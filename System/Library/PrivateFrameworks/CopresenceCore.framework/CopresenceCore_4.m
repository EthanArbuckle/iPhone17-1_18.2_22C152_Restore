uint64_t static Log.default.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for default, (uint64_t)static Log.default, a1);
}

uint64_t static Log.client.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for client, (uint64_t)static Log.client, a1);
}

uint64_t one-time initialization function for host(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.host);
}

uint64_t static Log.host.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for host, (uint64_t)static Log.host, a1);
}

uint64_t one-time initialization function for cryptor(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.cryptor);
}

uint64_t static Log.cryptor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for cryptor, (uint64_t)static Log.cryptor, a1);
}

uint64_t one-time initialization function for pubsub(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.pubsub);
}

uint64_t static Log.pubsub.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for pubsub, (uint64_t)static Log.pubsub, a1);
}

uint64_t one-time initialization function for attachmentLedgerService(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.attachmentLedgerService);
}

uint64_t static Log.attachmentLedgerService.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for attachmentLedgerService, (uint64_t)static Log.attachmentLedgerService, a1);
}

uint64_t one-time initialization function for pubSubReporter(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.pubSubReporter);
}

uint64_t static Log.pubSubReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for pubSubReporter, (uint64_t)static Log.pubSubReporter, a1);
}

uint64_t one-time initialization function for unreliableMessenger(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.unreliableMessenger);
}

uint64_t static Log.unreliableMessenger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for unreliableMessenger, (uint64_t)static Log.unreliableMessenger, a1);
}

uint64_t one-time initialization function for runtimeIssues()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.runtimeIssues);
  __swift_project_value_buffer(v0, (uint64_t)static Log.runtimeIssues);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.runtimeIssues.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for runtimeIssues != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Log.runtimeIssues);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t one-time initialization function for service(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.service);
}

uint64_t static Log.service.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for service, (uint64_t)static Log.service, a1);
}

uint64_t one-time initialization function for abcReporter(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.abcReporter);
}

uint64_t static Log.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for abcReporter, (uint64_t)static Log.abcReporter, a1);
}

uint64_t one-time initialization function for suspensionController(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.suspensionController);
}

uint64_t static Log.suspensionController.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for suspensionController, (uint64_t)static Log.suspensionController, a1);
}

uint64_t one-time initialization function for attachmentLedgerTopic()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.attachmentLedgerTopic);
  __swift_project_value_buffer(v0, (uint64_t)static Log.attachmentLedgerTopic);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.attachmentLedgerTopic.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for attachmentLedgerTopic, (uint64_t)static Log.attachmentLedgerTopic, a1);
}

uint64_t one-time initialization function for attachment()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.attachment);
  __swift_project_value_buffer(v0, (uint64_t)static Log.attachment);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.attachment.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for attachment, (uint64_t)static Log.attachment, a1);
}

uint64_t one-time initialization function for applicationManager(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.applicationManager);
}

uint64_t static Log.applicationManager.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for applicationManager, (uint64_t)static Log.applicationManager, a1);
}

uint64_t static Log.default.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = String.init<A>(reflecting:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t partial apply for closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in >> prefix<A>(_:)(a1, a2);
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

unint64_t Entitlement.rawValue.getter()
{
  unint64_t result = 0xD000000000000016;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000023;
      break;
    case 2:
    case 7:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000021;
      break;
    case 5:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 6:
      unint64_t result = 0xD000000000000030;
      break;
    case 8:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 9:
      unint64_t result = 0xD000000000000032;
      break;
    case 0xA:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0xB:
      unint64_t result = 0xD000000000000034;
      break;
    case 0xC:
      unint64_t result = 0xD000000000000032;
      break;
    case 0xD:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 0xE:
      unint64_t result = 0xD000000000000039;
      break;
    default:
      return result;
  }
  return result;
}

CopresenceCore::Entitlement_optional __swiftcall Entitlement.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Entitlement.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 15;
  if (v5 < 0xF) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Entitlement()
{
  return specialized == infix<A>(_:_:)();
}

unint64_t lazy protocol witness table accessor for type Entitlement and conformance Entitlement()
{
  unint64_t result = lazy protocol witness table cache variable for type Entitlement and conformance Entitlement;
  if (!lazy protocol witness table cache variable for type Entitlement and conformance Entitlement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entitlement and conformance Entitlement);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Entitlement()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Entitlement()
{
  Entitlement.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Entitlement()
{
  return Hasher._finalize()();
}

CopresenceCore::Entitlement_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Entitlement(Swift::String *a1)
{
  return Entitlement.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Entitlement@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = Entitlement.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Entitlement(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Entitlement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10A1BB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entitlement()
{
  return &type metadata for Entitlement;
}

uint64_t static PresenceSessionInterface.identity.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static PresenceSessionInterface.identity;
  return result;
}

uint64_t static PresenceSessionInterface.identity.setter(char *a1)
{
  char v1 = *a1;
  uint64_t result = swift_beginAccess();
  static PresenceSessionInterface.identity = v1;
  return result;
}

uint64_t (*static PresenceSessionInterface.identity.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t one-time initialization function for hostObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09D0578);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updateMembers_completion_, 0, 0);
  uint64_t result = swift_setDeallocating();
  static PresenceSessionInterface.hostObjectInterface = (uint64_t)v0;
  return result;
}

{
  id v0;
  uint64_t inited;
  uint64_t result;

  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09D0210);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updateMembersWithIdentifier_members_completion_, 1, 0);
  uint64_t result = swift_setDeallocating();
  static BackgroundSessionManagerInterface.hostObjectInterface = (uint64_t)v0;
  return result;
}

id static PresenceSessionInterface.hostObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (void **)&static PresenceSessionInterface.hostObjectInterface);
}

void static PresenceSessionInterface.hostObjectInterface.setter(void *a1)
{
}

uint64_t (*static PresenceSessionInterface.hostObjectInterface.modify())()
{
  if (one-time initialization token for hostObjectInterface != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

id static PresenceSessionInterface.clientObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (void **)&static PresenceSessionInterface.clientObjectInterface);
}

void static PresenceSessionInterface.clientObjectInterface.setter(void *a1)
{
}

uint64_t (*static PresenceSessionInterface.clientObjectInterface.modify())()
{
  if (one-time initialization token for clientObjectInterface != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance PresenceSessionInterface@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static PresenceSessionInterface.identity;
  return result;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance PresenceSessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for hostObjectInterface, (void **)&static PresenceSessionInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance PresenceSessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for clientObjectInterface, (void **)&static PresenceSessionInterface.clientObjectInterface);
}

ValueMetadata *type metadata accessor for PresenceSessionInterface()
{
  return &type metadata for PresenceSessionInterface;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t PresenceSessionHostConnection.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for PresenceSessionHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

void PresenceSessionHostConnection.delegate.setter(void *a1)
{
}

void (*PresenceSessionHostConnection.delegate.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for PresenceSessionHostConnection.delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1B3EA3B30](v5);
  return ActivitySessionHostConnection.delegate.modify;
}

uint64_t PresenceSessionHostConnection.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + direct field offset for PresenceSessionHostConnection.abcReporter, a1);
}

Swift::Void __swiftcall PresenceSessionHostConnection.handleHostConnectionInvalidated()()
{
  swift_getObjectType();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  int v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    unsigned int v6 = (void *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v14[0] = v7;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2112;
    v10 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unsigned int v6 = v2;

    _os_log_impl(&dword_1B0DF7000, v3, v4, "%s handleHostConnectionInvalidated: %@", (uint8_t *)v5, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
  }
  v11 = &v2[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1B3EA3B30](v11);
  if (v12)
  {
    v13 = (void *)v12;
    PresenceHostSession.resetSession()();
  }
}

char *PresenceSessionHostConnection.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return PresenceSessionHostConnection.init(connection:queue:)(a1, a2);
}

char *PresenceSessionHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  swift_unknownObjectWeakInit();
  id v5 = &v2[direct field offset for PresenceSessionHostConnection.abcReporter];
  uint64_t v6 = type metadata accessor for ABCReporter();
  uint64_t v7 = (void *)swift_allocObject();
  id v8 = objc_allocWithZone(MEMORY[0x1E4FA8AF0]);
  unint64_t v9 = v2;
  v7[2] = objc_msgSend(v8, sel_init);
  v7[3] = 0x636E795374736146;
  v7[4] = 0xE800000000000000;
  v7[5] = 0x65636E6573657250;
  v7[6] = 0xEF6E6F6973736553;
  *((void *)v5 + 3) = v6;
  *((void *)v5 + 4) = &protocol witness table for ABCReporter;
  *(void *)id v5 = v7;

  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t PresenceSessionHostConnection.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v1 = v0 + direct field offset for PresenceSessionHostConnection.abcReporter;
  return __swift_destroy_boxed_opaque_existential_1Tm(v1);
}

id PresenceSessionHostConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PresenceSessionHostConnection.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  uint64_t v2 = a1 + direct field offset for PresenceSessionHostConnection.abcReporter;
  return __swift_destroy_boxed_opaque_existential_1Tm(v2);
}

BOOL static PresenceSessionHostConnection.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PresenceSessionHostConnection.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int PresenceSessionHostConnection.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t PresenceSessionHostConnection.join(completion:)(uint64_t a1, uint64_t a2)
{
  return PresenceSessionHostConnection.join(completion:)(a1, a2, (uint64_t)&unk_1F09B6840, (uint64_t)partial apply for closure #1 in PresenceSessionHostConnection.join(completion:), (uint64_t)&block_descriptor_31);
}

void closure #1 in PresenceSessionHostConnection.join(completion:)(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  v10 = a1;
  v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v32 = (void *)swift_slowAlloc();
    v33 = a2;
    *(void *)&v34[0] = v10;
    *(_DWORD *)v13 = 138412290;
    v14 = v10;
    a2 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15 = v32;
    void *v32 = v10;

    _os_log_impl(&dword_1B0DF7000, v11, v12, "PresenceSessionHostConnection: %@ request to join", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v15, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
  }
  v16 = &v10[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x1B3EA3B30](v16);
  if (v17)
  {
    v18 = (void *)v17;
    uint64_t v19 = type metadata accessor for TaskPriority();
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    v20(v8, 1, 1, v19);
    v21 = (void *)swift_allocObject();
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = v18;
    v21[5] = a2;
    v21[6] = a3;
    id v22 = v18;
    swift_retain();
    uint64_t v23 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:), (uint64_t)v21);
    uint64_t v24 = (uint64_t)&v10[direct field offset for PresenceSessionHostConnection.abcReporter];
    uint64_t v26 = *(void *)&v10[direct field offset for XPCHostConnection.bundleIdentifier];
    uint64_t v25 = *(void *)&v10[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v20(v8, 1, 1, v19);
    outlined init with copy of UserNotificationCenter(v24, (uint64_t)v34);
    v27 = (void *)swift_allocObject();
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = v23;
    v27[5] = 0xD000000000000011;
    v27[6] = 0x80000001B11622B0;
    v27[7] = v26;
    v27[8] = v25;
    outlined init with take of BackgroundSessionManagerDataSource(v34, (uint64_t)(v27 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v27);
    swift_release();
    outlined destroy of TaskPriority?((uint64_t)v8);

    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
    v28 = (void *)swift_allocError();
    unsigned char *v29 = 0;
    swift_willThrow();
    id v30 = v28;
    a2(v28);
  }
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a5;
  v6[3] = a6;
  uint64_t v7 = (void *)swift_task_alloc();
  v6[4] = v7;
  *uint64_t v7 = v6;
  v7[1] = closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:);
  return PresenceHostSession.join()();
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:)()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))(v0 + 16))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = (void (*)(void *))v0[2];
  uint64_t v3 = v1;
  v2(v1);

  swift_willThrow();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t PresenceSessionHostConnection.leave(completion:)(uint64_t a1, uint64_t a2)
{
  return PresenceSessionHostConnection.join(completion:)(a1, a2, (uint64_t)&unk_1F09B6868, (uint64_t)partial apply for closure #1 in PresenceSessionHostConnection.leave(completion:), (uint64_t)&block_descriptor_6_3);
}

uint64_t PresenceSessionHostConnection.join(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v20[0] = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  os_log_type_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)&v5[direct field offset for XPCHostConnection.queue];
  v16 = (void *)swift_allocObject();
  v16[2] = v5;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v20[0];
  uint64_t v17 = _Block_copy(aBlock);
  v18 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  return swift_release();
}

void closure #1 in PresenceSessionHostConnection.leave(completion:)(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  uint64_t v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v32 = (void *)swift_slowAlloc();
    v33 = a2;
    *(void *)&v34[0] = v10;
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v14 = v10;
    a2 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15 = v32;
    void *v32 = v10;

    _os_log_impl(&dword_1B0DF7000, v11, v12, "PresenceSessionHostConnection: %@ request to leave", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v15, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
  }
  v16 = &v10[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v17 = MEMORY[0x1B3EA3B30](v16);
  if (v17)
  {
    v18 = (void *)v17;
    uint64_t v19 = type metadata accessor for TaskPriority();
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    v20(v8, 1, 1, v19);
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = v18;
    v21[5] = a2;
    v21[6] = a3;
    id v22 = v18;
    swift_retain();
    uint64_t v23 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:), (uint64_t)v21);
    uint64_t v24 = (uint64_t)&v10[direct field offset for PresenceSessionHostConnection.abcReporter];
    uint64_t v26 = *(void *)&v10[direct field offset for XPCHostConnection.bundleIdentifier];
    uint64_t v25 = *(void *)&v10[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v20(v8, 1, 1, v19);
    outlined init with copy of UserNotificationCenter(v24, (uint64_t)v34);
    v27 = (void *)swift_allocObject();
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = v23;
    v27[5] = 0xD000000000000012;
    v27[6] = 0x80000001B1162290;
    v27[7] = v26;
    v27[8] = v25;
    outlined init with take of BackgroundSessionManagerDataSource(v34, (uint64_t)(v27 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v27);
    swift_release();
    outlined destroy of TaskPriority?((uint64_t)v8);

    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
    v28 = (void *)swift_allocError();
    unsigned char *v29 = 0;
    swift_willThrow();
    id v30 = v28;
    a2(v28);
  }
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a5;
  v6[3] = a6;
  uint64_t v7 = (void *)swift_task_alloc();
  v6[4] = v7;
  *uint64_t v7 = v6;
  v7[1] = closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:);
  return PresenceHostSession.leave()();
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:)()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t @objc PresenceSessionHostConnection.join(completion:)(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t PresenceSessionHostConnection.updateMembers(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)&v3[direct field offset for XPCHostConnection.queue];
  v15 = (void *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12_2;
  v16 = _Block_copy(aBlock);
  uint64_t v17 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  v46 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  id v11 = a1;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = (char *)v11;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v45 = v9;
    uint64_t v17 = (void *)v16;
    uint64_t v43 = swift_slowAlloc();
    *(void *)&v47[0] = v43;
    *(_DWORD *)uint64_t v15 = 138412546;
    uint64_t v44 = a4;
    uint64_t v48 = (uint64_t)v12;
    v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v12;

    *(_WORD *)(v15 + 12) = 2080;
    type metadata accessor for TUHandle();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
    swift_bridgeObjectRetain();
    uint64_t v19 = Set.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v22 = v19;
    a4 = v44;
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, (uint64_t *)v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "PresenceSessionHostConnection: %@ request to update members to: %s", (uint8_t *)v15, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v23 = v17;
    uint64_t v9 = v45;
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    uint64_t v24 = v43;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v25 = &v12[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  uint64_t v26 = MEMORY[0x1B3EA3B30](v25);
  if (v26)
  {
    v27 = (void *)v26;
    uint64_t v28 = type metadata accessor for TaskPriority();
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
    v29(v9, 1, 1, v28);
    id v30 = (void *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    uint64_t v31 = v46;
    v30[4] = a2;
    v30[5] = v31;
    v30[6] = a4;
    v30[7] = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    id v32 = v27;
    uint64_t v33 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:), (uint64_t)v30);
    uint64_t v34 = (uint64_t)&v12[direct field offset for PresenceSessionHostConnection.abcReporter];
    v35 = &v12[direct field offset for XPCHostConnection.bundleIdentifier];
    uint64_t v37 = *(void *)&v12[direct field offset for XPCHostConnection.bundleIdentifier];
    uint64_t v36 = *((void *)v35 + 1);
    v29(v9, 1, 1, v28);
    outlined init with copy of UserNotificationCenter(v34, (uint64_t)v47);
    v38 = (void *)swift_allocObject();
    v38[2] = 0;
    v38[3] = 0;
    v38[4] = v33;
    v38[5] = 0xD00000000000001CLL;
    v38[6] = 0x80000001B1162270;
    v38[7] = v37;
    v38[8] = v36;
    outlined init with take of BackgroundSessionManagerDataSource(v47, (uint64_t)(v38 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v38);
    swift_release();
    outlined destroy of TaskPriority?((uint64_t)v9);

    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
    v39 = (void *)swift_allocError();
    unsigned char *v40 = 0;
    swift_willThrow();
    id v41 = v39;
    v46(v39);
  }
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:), 0, 0);
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)()
{
  uint64_t v25 = v0;
  uint64_t v1 = v0 + 4;
  unint64_t v2 = specialized Sequence.compactMap<A>(_:)(v0[4]);
  uint64_t v3 = specialized Set.init<A>(_:)(v2);
  v0[8] = v3;
  swift_bridgeObjectRelease();
  if ((v3 & 0xC000000000000001) != 0) {
    uint64_t v4 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v4 = *(void *)(v3 + 16);
  }
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 == __CocoaSet.count.getter())
    {
LABEL_6:
      id v5 = (void *)swift_task_alloc();
      v0[9] = v5;
      *id v5 = v0;
      v5[1] = closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:);
      return PresenceHostSession.updateMembers(_:)(v3);
    }
  }
  else if (v4 == *(void *)(*v1 + 16))
  {
    goto LABEL_6;
  }
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)uint64_t v10 = 136315394;
    type metadata accessor for AddressableMember();
    os_log_type_t type = v9;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    uint64_t v11 = Set.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for TUHandle();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
    swift_bridgeObjectRetain();
    uint64_t v14 = Set.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v8, type, "Lost members in conversion. convertedMembers %s vs members: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v17 = (void (*)(void))v0[5];
  lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
  v18 = (void *)swift_allocError();
  *uint64_t v19 = 1;
  v17();

  swift_allocError();
  *unint64_t v20 = 1;
  swift_willThrow();
  unint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    unint64_t v2 = closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:);
  }
  else {
    unint64_t v2 = closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  void (*v2)(void *);
  id v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[10];
  unint64_t v2 = (void (*)(void *))v0[5];
  uint64_t v3 = v1;
  v2(v1);

  swift_willThrow();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

void partial apply for closure #1 in PresenceSessionHostConnection.join(completion:)()
{
  closure #1 in PresenceSessionHostConnection.join(completion:)(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t objectdestroyTm_8()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in PresenceSessionHostConnection.leave(completion:)()
{
  closure #1 in PresenceSessionHostConnection.leave(completion:)(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B10A4A84()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)()
{
  closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

unint64_t lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors);
  }
  return result;
}

uint64_t sub_1B10A4B30@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for PresenceSessionHostConnection.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1B10A4B88()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for PresenceSessionHostConnection()
{
  uint64_t result = type metadata singleton initialization cache for PresenceSessionHostConnection;
  if (!type metadata singleton initialization cache for PresenceSessionHostConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PresenceSessionHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PresenceSessionHostConnection()
{
  return type metadata accessor for PresenceSessionHostConnection();
}

unsigned char *storeEnumTagSinglePayload for PresenceSessionHostConnection.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10A4D4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceSessionHostConnection.Errors()
{
  return &type metadata for PresenceSessionHostConnection.Errors;
}

uint64_t sub_1B10A4D84()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B10A4E10()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:), 0, 0);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v4;
  *long long v4 = v2;
  v4[1] = closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:);
  return PresenceHostSession.leave()();
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return specialized closure #1 in Task<>.reportFailure(on:function:process:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroy_46Tm_0()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:);
  return PresenceHostSession.join()();
}

uint64_t PeoplePickerConfiguration.shareSheetSessionID.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PeoplePickerConfiguration.shareSheetSessionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PeoplePickerConfiguration.shareSheetSessionID.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

id PeoplePickerConfiguration.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id PeoplePickerConfiguration.init()()
{
  id v1 = &v0[OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID];
  uint64_t v2 = (objc_class *)type metadata accessor for PeoplePickerConfiguration();
  *(void *)id v1 = 0;
  *((void *)v1 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for PeoplePickerConfiguration()
{
  return self;
}

uint64_t PeoplePickerConfiguration.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v13);
  if (!v14)
  {
    outlined destroy of Any?((uint64_t)v13);
    goto LABEL_11;
  }
  type metadata accessor for PeoplePickerConfiguration();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    char v10 = 0;
    return v10 & 1;
  }
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58))();
  uint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(void))((*v2 & *v12) + 0x58))();
  uint64_t v8 = v7;
  if (!v5)
  {

    if (!v8)
    {
      char v10 = 1;
      return v10 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (!v7)
  {

    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (v3 == v6 && v5 == v7) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v10 & 1;
}

uint64_t static PeoplePickerConfiguration.supportsSecureCoding.getter()
{
  return 1;
}

id PeoplePickerConfiguration.__allocating_init(coder:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (char *)objc_allocWithZone(v2);
  uint64_t v5 = (uint64_t *)&v4[OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID];
  type metadata accessor for NSString();
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v6 = v4;
  uint64_t v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  swift_beginAccess();
  *uint64_t v5 = v9;
  v5[1] = v11;

  swift_bridgeObjectRelease();
  v14.receiver = v6;
  v14.super_class = v2;
  id v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

id PeoplePickerConfiguration.init(coder:)(void *a1)
{
  id v2 = specialized PeoplePickerConfiguration.init(coder:)();

  return v2;
}

Swift::Void __swiftcall PeoplePickerConfiguration.encode(with:)(NSCoder with)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58))();
  if (v4)
  {
    uint64_t v5 = MEMORY[0x1B3EA1B00](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = (id)MEMORY[0x1B3EA1B00](0xD000000000000013, 0x80000001B11622D0);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
  swift_unknownObjectRelease();
}

id PeoplePickerConfiguration.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeoplePickerConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized PeoplePickerConfiguration.init(coder:)()
{
  id v1 = (uint64_t *)&v0[OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID];
  type metadata accessor for NSString();
  uint64_t *v1 = 0;
  v1[1] = 0;
  objc_super v2 = v0;
  uint64_t v3 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_beginAccess();
  uint64_t *v1 = v5;
  v1[1] = v7;

  swift_bridgeObjectRelease();
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for PeoplePickerConfiguration();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t sub_1B10A5B9C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B10A5BF8(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t method lookup function for PeoplePickerConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PeoplePickerConfiguration);
}

uint64_t dispatch thunk of PeoplePickerConfiguration.shareSheetSessionID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.shareSheetSessionID.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.shareSheetSessionID.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  outlined init with copy of PluginEndpoint(a1, a8, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
  v18 = (int *)type metadata accessor for PluginClient.Configuration(0);
  uint64_t v19 = v18;
  *(void *)(a8 + v18[5]) = a2;
  *(double *)(a8 + v18[6]) = a9;
  *(unsigned char *)(a8 + v18[7]) = a3;
  if (a5) {
    unint64_t v20 = a4;
  }
  else {
    unint64_t v20 = 0xD000000000000015;
  }
  unint64_t v21 = 0x80000001B1162310;
  if (a5) {
    unint64_t v21 = a5;
  }
  uint64_t v22 = (unint64_t *)(a8 + v18[8]);
  *uint64_t v22 = v20;
  v22[1] = v21;
  if (!a7)
  {
    a6 = 0xD00000000000001BLL;
    a7 = 0x80000001B1162330;
  }
  uint64_t result = outlined destroy of PluginEndpoint(a1, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
  uint64_t v24 = (unint64_t *)(a8 + v19[9]);
  *uint64_t v24 = a6;
  v24[1] = a7;
  return result;
}

uint64_t type metadata accessor for PluginClient.Configuration(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PluginClient.Configuration);
}

uint64_t PluginClient.__allocating_init(config:queue:reporter:reporterTag:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  PluginClient.init(config:queue:reporter:reporterTag:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t PluginClient.Configuration.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PluginEndpoint(v1, a1, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
}

uint64_t PluginClient.Configuration.connectionMaxAttempts.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 20));
}

double PluginClient.Configuration.connectionRetryInterval.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 24));
}

uint64_t PluginClient.Configuration.serverCertValidationEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 28));
}

uint64_t PluginClient.Configuration.serverCertHostname.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginClient.Configuration.serverCertLeafMarkerOID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for PluginClient.config : PluginClient(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PluginEndpoint(a1, (uint64_t)v6, type metadata accessor for PluginClient.Configuration);
  uint64_t v7 = *a2 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config;
  swift_beginAccess();
  outlined assign with take of PluginClient.Configuration((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t PluginClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config;
  swift_beginAccess();
  return outlined init with copy of PluginEndpoint(v3, a1, type metadata accessor for PluginClient.Configuration);
}

id PluginClient.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
}

uint64_t PluginClient.reporter.getter()
{
  return swift_retain();
}

uint64_t PluginClient.reporterTag.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t PluginClient.connectionState.getter()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState);
  swift_beginAccess();
  unint64_t v2 = *v1;
  outlined copy of ActivitySession.State(v2);
  return v2;
}

unint64_t PluginClient.connectionState.setter(unint64_t a1)
{
  uint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState);
  swift_beginAccess();
  unint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return outlined consume of ActivitySession.State(v4);
}

uint64_t (*PluginClient.connectionState.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginClient.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PluginClient.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_cancellables);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginClient.cancellables.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t PluginClient.pendingDataTransferReport.getter()
{
  return swift_retain();
}

uint64_t PluginClient.pendingDataTransferReport.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_pendingDataTransferReport);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*PluginClient.pendingDataTransferReport.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginClient.localParticipantID.getter()
{
  uint64_t v1 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (uint64_t *)((char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for PluginClient.Configuration(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v0 + 136))(v5);
  outlined init with copy of PluginEndpoint((uint64_t)v7, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
  outlined destroy of PluginEndpoint((uint64_t)v7, type metadata accessor for PluginClient.Configuration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = v3[5];
    outlined consume of Data?(v3[3], v3[4]);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of PluginEndpoint((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)log);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)id v12 = 136315138;
      uint64_t v18 = 0;
      unint64_t v19 = 0xE000000000000000;
      uint64_t v20 = v13;
      swift_retain();
      _StringGuts.grow(_:)(22);
      v14._object = (void *)0x80000001B1162350;
      v14._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v14);
      uint64_t v17 = v0;
      _print_unlocked<A, B>(_:_:)();
      v15._countAndFlagsBits = 41;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v10, v11, "%s Requested localParticipantID on a non-quickRelay endpoint.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v13, -1, -1);
      MEMORY[0x1B3EA39E0](v12, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
  return v8;
}

uint64_t PluginClient.init(config:queue:reporter:reporterTag:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v64 = a4;
  uint64_t v62 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v62);
  uint64_t v61 = (uint64_t)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  v59 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v17);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v18 - 8);
  *(void *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_cancellables) = MEMORY[0x1E4FBC870];
  *(void *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_pendingDataTransferReport) = 0;
  outlined init with copy of PluginEndpoint(a1, v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config, type metadata accessor for PluginClient.Configuration);
  id v65 = a2;
  if (a2)
  {
    uint64_t v19 = (uint64_t)a2;
  }
  else
  {
    v56[1] = type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.unspecified.getter();
    uint64_t v66 = MEMORY[0x1E4FBC860];
    uint64_t v20 = _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
    uint64_t v63 = a1;
    v56[0] = v20;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    a1 = v63;
    a2 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v16, *MEMORY[0x1E4FBCC58], v58);
    uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  }
  *(void *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue) = v19;
  *(void *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter) = a3;
  swift_retain();
  id v21 = a2;
  if (a5)
  {
    uint64_t v22 = v64;
    unint64_t v23 = a5;
  }
  else
  {
    uint64_t v24 = v59;
    UUID.init()();
    uint64_t v22 = UUID.uuidString.getter();
    unint64_t v23 = v25;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v24, v12);
  }
  uint64_t v26 = &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
  v27 = (uint64_t *)(v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag);
  uint64_t *v27 = v22;
  v27[1] = v23;
  *(void *)(v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState) = 0x8000000000000000;
  uint64_t v28 = one-time initialization token for log;
  swift_bridgeObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v59 = (char *)v30;
    uint64_t v60 = a3;
    uint64_t v63 = a1;
    unint64_t v33 = a5;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v71 = v35;
    *(_DWORD *)uint64_t v34 = 136315650;
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(22);
    v36._object = (void *)0x80000001B1162350;
    v36._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v36);
    uint64_t v69 = v6;
    _print_unlocked<A, B>(_:_:)();
    v37._countAndFlagsBits = 41;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    swift_release();
    uint64_t v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v38 = v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config;
    swift_beginAccess();
    outlined init with copy of PluginEndpoint(v38, v61, type metadata accessor for PluginClient.Configuration);
    uint64_t v39 = String.init<A>(describing:)();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 22) = 2080;
    if (v33)
    {
      uint64_t v69 = v64;
      unint64_t v70 = v33;
      swift_bridgeObjectRetain();
      uint64_t v41 = String.init<A>(reflecting:)();
      unint64_t v43 = v42;
    }
    else
    {
      unint64_t v43 = 0xE300000000000000;
      uint64_t v41 = 7104878;
    }
    a1 = v63;
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v31, v32, "%s init, config=%s tag=%s", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);

    a2 = v65;
    a3 = v60;
    a5 = v33;
    uint64_t v26 = &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
    if (!v60) {
      goto LABEL_19;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    if (!a3)
    {
LABEL_19:
      swift_bridgeObjectRelease();
LABEL_22:

      uint64_t v54 = a1;
      goto LABEL_23;
    }
  }
  if (a5)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    swift_release();
    goto LABEL_22;
  }
  uint64_t v60 = a3;
  swift_retain_n();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v44, v45))
  {
    swift_release_n();

    goto LABEL_21;
  }
  uint64_t v46 = swift_slowAlloc();
  uint64_t v47 = swift_slowAlloc();
  *(_DWORD *)uint64_t v46 = 136315394;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  uint64_t v71 = v47;
  swift_retain();
  _StringGuts.grow(_:)(22);
  v48._object = (void *)0x80000001B1162350;
  v48._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v48);
  uint64_t v68 = v6;
  _print_unlocked<A, B>(_:_:)();
  v49._countAndFlagsBits = 41;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  swift_release();
  uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v46 + 12) = 2080;
  v50 = (uint64_t *)(v6 + v26[25]);
  uint64_t v51 = a1;
  uint64_t v52 = *v50;
  unint64_t v53 = v50[1];
  swift_bridgeObjectRetain();
  uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B0DF7000, v44, v45, "%s initialized with a reporter, but no tag. Assigned random tag=%s", (uint8_t *)v46, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B3EA39E0](v47, -1, -1);
  MEMORY[0x1B3EA39E0](v46, -1, -1);

  swift_release();
  uint64_t v54 = v51;
LABEL_23:
  outlined destroy of PluginEndpoint(v54, type metadata accessor for PluginClient.Configuration);
  return v6;
}

uint64_t outlined init with copy of PluginEndpoint(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PluginEndpoint(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

Swift::Void __swiftcall PluginClient.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
}

uint64_t PluginClient.deinit()
{
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)log);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v10 = v5;
    swift_retain();
    _StringGuts.grow(_:)(22);
    v6._object = (void *)0x80000001B1162350;
    v6._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v2, v3, "%s deinit", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v5, -1, -1);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  else
  {

    uint64_t v8 = swift_release_n();
  }
  (*(void (**)(uint64_t))(*(void *)v0 + 288))(v8);
  outlined destroy of PluginEndpoint(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config, type metadata accessor for PluginClient.Configuration);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ActivitySession.State(*(void *)(v0
                                                      + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PluginClient.__deallocating_deinit()
{
  PluginClient.deinit();
  return swift_deallocClassInstance();
}

uint64_t PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 160))(v9);
  if (v12 == 0x8000000000000008)
  {
    uint64_t v13 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 3, 3, v13);
    swift_storeEnumTagMultiPayload();
    a2(v11);
    return outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
  else
  {
    outlined consume of ActivitySession.State(v12);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)log);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134217984;
      v24[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v16, v17, "Starting connection attempt #%ld", v18, 0xCu);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }

    v24[0] = PluginClient.createQuicConnection()();
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = a1;
    v20[3] = v19;
    v20[4] = a2;
    v20[5] = a3;
    uint64_t v21 = swift_allocObject();
    swift_weakInit();
    uint64_t v22 = (void *)swift_allocObject();
    v22[2] = v21;
    v22[3] = a1;
    v22[4] = a2;
    v22[5] = a3;
    swift_retain_n();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<NWConnection, PluginConnectError> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    unint64_t v23 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v4 + 200))(v24);
    AnyCancellable.store(in:)();
    swift_release();
    return v23(v24, 0);
  }
}

uint64_t closure #1 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t), uint64_t a5)
{
  v98 = a4;
  uint64_t v99 = a5;
  v103 = a3;
  uint64_t v101 = a2;
  uint64_t v94 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  v91 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for DispatchQoS();
  uint64_t v90 = *(void *)(v92 - 8);
  MEMORY[0x1F4188790](v92);
  v89 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for DispatchTime();
  uint64_t v88 = *(void *)(v95 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v95);
  v86 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  v87 = (char *)&v78 - v10;
  uint64_t v100 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v100);
  uint64_t v102 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v96);
  uint64_t v97 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginConnectError?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  unint64_t v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v78 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginConnectError>);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for PluginConnectError();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v85 = (uint64_t)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v78 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v31 = (char *)&v78 - v30;
  MEMORY[0x1F4188790](v29);
  unint64_t v33 = (char *)&v78 - v32;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v21, &demangling cache variable for type metadata for Subscribers.Completion<PluginConnectError>);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v34(v21, 1, v22) == 1) {
    return outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for Subscribers.Completion<PluginConnectError>);
  }
  v83 = v103 + 16;
  outlined init with take of PluginConnectError((uint64_t)v21, (uint64_t)v33);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)log);
  outlined init with copy of PluginEndpoint((uint64_t)v33, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
  swift_retain_n();
  uint64_t v81 = v37;
  uint64_t v38 = Logger.logObject.getter();
  int v82 = static os_log_type_t.error.getter();
  BOOL v39 = os_log_type_enabled(v38, (os_log_type_t)v82);
  v84 = v33;
  if (v39)
  {
    os_log_t v80 = v38;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    aBlock[0] = v79;
    *(_DWORD *)uint64_t v40 = 134218498;
    uint64_t v106 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 12) = 2080;
    outlined init with copy of PluginEndpoint((uint64_t)v31, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v18, 0, 1, v22);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v18, (uint64_t)v16, &demangling cache variable for type metadata for PluginConnectError?);
    if (v34(v16, 1, v22) == 1)
    {
      unint64_t v41 = 0xE300000000000000;
      uint64_t v42 = 7104878;
    }
    else
    {
      outlined init with take of PluginConnectError((uint64_t)v16, (uint64_t)v28);
      outlined init with copy of PluginEndpoint((uint64_t)v28, v85, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      uint64_t v42 = String.init<A>(reflecting:)();
      unint64_t v41 = v45;
      outlined destroy of PluginEndpoint((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    }
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for PluginConnectError?);
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v41, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PluginEndpoint((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    *(_WORD *)(v40 + 22) = 2080;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v43 = v100;
    if (Strong)
    {
      uint64_t v106 = Strong;
      type metadata accessor for PluginClient(0);
      uint64_t v47 = String.init<A>(reflecting:)();
      unint64_t v49 = v48;
      uint64_t v44 = v102;
      os_log_type_t v50 = v82;
      uint64_t v51 = v79;
    }
    else
    {
      unint64_t v49 = 0xE300000000000000;
      uint64_t v44 = v102;
      os_log_type_t v50 = v82;
      uint64_t v51 = v79;
      uint64_t v47 = 7104878;
    }
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v52 = v80;
    _os_log_impl(&dword_1B0DF7000, v80, v50, "Connection attempt #%ld failed: %s on client: %s", (uint8_t *)v40, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v51, -1, -1);
    MEMORY[0x1B3EA39E0](v40, -1, -1);

    unint64_t v33 = v84;
  }
  else
  {
    outlined destroy of PluginEndpoint((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for PluginConnectError);

    swift_release_n();
    uint64_t v43 = v100;
    uint64_t v44 = v102;
  }
  swift_beginAccess();
  uint64_t v53 = swift_weakLoadStrong();
  if (v53)
  {
    uint64_t v54 = v53;
    v55 = *(void (**)(void))(*(void *)v53 + 136);
    v55();
    uint64_t v56 = *(void *)(v44 + *(int *)(v43 + 20));
    outlined destroy of PluginEndpoint(v44, type metadata accessor for PluginClient.Configuration);
    if (v56 == v101)
    {
      uint64_t v57 = (uint64_t)v84;
      uint64_t v58 = v97;
      outlined init with copy of PluginEndpoint((uint64_t)v84, v97, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      swift_storeEnumTagMultiPayload();
      v98(v58);
      outlined destroy of UUID?(v58, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
      (*(void (**)(unint64_t))(*(void *)v54 + 168))(0x8000000000000008);
      swift_release();
      return outlined destroy of PluginEndpoint(v57, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    }
    else
    {
      swift_retain();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 134217984;
        v55();
        uint64_t v64 = *(void *)(v102 + *(int *)(v43 + 24));
        outlined destroy of PluginEndpoint(v102, type metadata accessor for PluginClient.Configuration);
        aBlock[0] = v64;
        uint64_t v44 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1B0DF7000, v61, v62, "Will retry connecting in %f seconds", v63, 0xCu);
        MEMORY[0x1B3EA39E0](v63, -1, -1);
      }
      else
      {

        swift_release();
      }
      id v65 = v86;
      uint64_t v66 = static DispatchTime.now()();
      ((void (*)(uint64_t))v55)(v66);
      double v67 = *(double *)(v44 + *(int *)(v43 + 24));
      outlined destroy of PluginEndpoint(v44, type metadata accessor for PluginClient.Configuration);
      uint64_t v68 = v87;
      MEMORY[0x1B3EA17C0](v65, v67);
      v103 = *(char **)(v88 + 8);
      ((void (*)(char *, uint64_t))v103)(v65, v95);
      uint64_t v102 = *(void *)(v54 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
      uint64_t v69 = swift_allocObject();
      swift_weakInit();
      unint64_t v70 = (void *)swift_allocObject();
      uint64_t v71 = v98;
      uint64_t v72 = v99;
      v70[2] = v69;
      v70[3] = v71;
      uint64_t v73 = v101;
      v70[4] = v72;
      v70[5] = v73;
      aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:);
      aBlock[5] = (uint64_t)v70;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = (uint64_t)&block_descriptor_42;
      v74 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      v75 = v89;
      static DispatchQoS.unspecified.getter();
      uint64_t v104 = MEMORY[0x1E4FBC860];
      _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v76 = v91;
      uint64_t v77 = v94;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1B3EA2180](v68, v75, v76, v74);
      _Block_release(v74);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v76, v77);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v75, v92);
      ((void (*)(char *, uint64_t))v103)(v68, v95);
      outlined destroy of PluginEndpoint((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    uint64_t v59 = type metadata accessor for NWError();
    uint64_t v60 = v97;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v97, 3, 3, v59);
    swift_storeEnumTagMultiPayload();
    v98(v60);
    outlined destroy of UUID?(v60, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    return outlined destroy of PluginEndpoint((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
  }
}

uint64_t closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t result = a4 + 1;
    if (__OFADD__(a4, 1))
    {
      __break(1u);
    }
    else
    {
      PluginClient.connectWithRetries(attempt:promise:)(result, a2, a3);
      return swift_release();
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 3, 3, v11);
    swift_storeEnumTagMultiPayload();
    a2(v9);
    return outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
  return result;
}

void closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = Strong;
    unint64_t v15 = (*(uint64_t (**)(void))(*(void *)Strong + 160))();
    outlined consume of ActivitySession.State(v15);
    if (v15 >> 62 == 1)
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v36 = a5;
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)log);
      swift_retain_n();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v35 = a4;
        uint64_t v20 = v19;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v40 = v21;
        *(_DWORD *)uint64_t v20 = 134218242;
        uint64_t v38 = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v20 + 12) = 2080;
        uint64_t v38 = 0;
        unint64_t v39 = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(22);
        v22._object = (void *)0x80000001B1162350;
        v22._countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v22);
        uint64_t v37 = v14;
        _print_unlocked<A, B>(_:_:)();
        v23._countAndFlagsBits = 41;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        swift_release();
        uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v17, v18, "Connection attempt #%ld succeeded on client: %s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v21, -1, -1);
        uint64_t v24 = v20;
        a4 = v35;
        MEMORY[0x1B3EA39E0](v24, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v29 = *(void (**)(uint64_t))(*(void *)v14 + 168);
      uint64_t v30 = swift_retain();
      v29(v30);
      uint64_t v31 = swift_allocObject();
      swift_weakInit();
      uint64_t v32 = swift_allocObject();
      swift_weakInit();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = v31;
      swift_retain();
      swift_retain();
      outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:));
      NWConnection.stateUpdateHandler.setter();
      swift_release();
      swift_release();
      swift_release();
      void *v11 = v12;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      a4(v11);
      swift_release();
      outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)log);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 134217984;
      uint64_t v38 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v26, v27, "Client was deinit'd when we received the connection on attempt #%ld", v28, 0xCu);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
  }
}

uint64_t closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v63 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v64 = (char *)&v52 - v5;
  uint64_t v6 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NWConnection.State();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for NWError();
  uint64_t v66 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v61 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  os_log_type_t v62 = (char *)&v52 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  id v65 = (char *)&v52 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v52 - v23;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v26 = result;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v28 = Strong;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
      if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v15, v12) == *MEMORY[0x1E4F38A08])
      {
        uint64_t v60 = v26;
        (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
        uint64_t v29 = v66;
        uint64_t v30 = v24;
        uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
        v57(v24, v15, v16);
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)log);
        uint64_t v32 = v65;
        uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
        v58(v65, v30, v16);
        swift_retain_n();
        uint64_t v33 = Logger.logObject.getter();
        int v59 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, (os_log_type_t)v59))
        {
          uint64_t v53 = v30;
          os_log_t v56 = v33;
          uint64_t v34 = swift_slowAlloc();
          uint64_t v52 = swift_slowAlloc();
          uint64_t v68 = v52;
          *(_DWORD *)uint64_t v34 = 136315394;
          uint64_t v35 = *(void *)v28;
          uint64_t v54 = (uint8_t *)(v34 + 4);
          uint64_t v55 = v28 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
          (*(void (**)(void))(v35 + 136))();
          outlined init with copy of PluginEndpoint((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
          outlined destroy of PluginEndpoint((uint64_t)v8, type metadata accessor for PluginClient.Configuration);
          uint64_t v36 = PluginEndpoint.description.getter();
          unint64_t v38 = v37;
          uint64_t v39 = v66;
          outlined destroy of PluginEndpoint((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
          uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          uint64_t v54 = (uint8_t *)v34;
          *(_WORD *)(v34 + 12) = 2080;
          uint64_t v40 = (uint64_t)v64;
          unint64_t v41 = v58;
          v58(v64, v32, v16);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v16);
          uint64_t v42 = v40;
          uint64_t v43 = v63;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, v63, &demangling cache variable for type metadata for NWError?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v43, 1, v16) == 1)
          {
            unint64_t v44 = 0xE300000000000000;
            uint64_t v45 = 7104878;
          }
          else
          {
            uint64_t v47 = v62;
            v57(v62, (char *)v43, v16);
            v41(v61, v47, v16);
            uint64_t v45 = String.init<A>(reflecting:)();
            unint64_t v44 = v48;
            (*(void (**)(char *, uint64_t))(v39 + 8))(v47, v16);
          }
          unint64_t v49 = v54;
          outlined destroy of UUID?((uint64_t)v64, &demangling cache variable for type metadata for NWError?);
          uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, &v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v46 = *(void (**)(char *, uint64_t))(v39 + 8);
          v46(v65, v16);
          os_log_t v50 = v56;
          _os_log_impl(&dword_1B0DF7000, v56, (os_log_type_t)v59, "PluginClient %s disconnected due to network failure: %s", v49, 0x16u);
          uint64_t v51 = v52;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v51, -1, -1);
          MEMORY[0x1B3EA39E0](v49, -1, -1);

          uint64_t v30 = v53;
        }
        else
        {
          swift_release_n();
          uint64_t v46 = *(void (**)(char *, uint64_t))(v29 + 8);
          v46(v32, v16);
        }
        (*(void (**)(unint64_t))(*(void *)v28 + 168))(0x8000000000000000);
        NWConnection.cancel()();
        swift_release();
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v46)(v30, v16);
      }
      else
      {
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t PluginClient.connectionFuture()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NWConnection.State();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = &v20[-v8];
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 160))(v7);
  unint64_t v11 = v10;
  if (!(v10 >> 62))
  {
    NWConnection.state.getter();
    (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4F389E8], v2);
    char v13 = MEMORY[0x1B3EA13D0](v9, v6);
    uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
    v14(v6, v2);
    v14(v9, v2);
    if (v13)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
      swift_allocObject();
      return Future.init(_:)();
    }
    outlined consume of ActivitySession.State(v11);
LABEL_9:
    uint64_t v16 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 200))(v20);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    void *v18 = MEMORY[0x1E4FBC870];
    v16(v20, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    swift_allocObject();
    swift_retain();
    uint64_t v12 = Future.init(_:)();
    uint64_t v19 = *(void (**)(uint64_t))(*(void *)v1 + 168);
    swift_retain();
    v19(v12 | 0x4000000000000000);
    return v12;
  }
  if (v10 >> 62 != 1)
  {
    if (v10 != 0x8000000000000000)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
      swift_allocObject();
      return Future.init(_:)();
    }
    goto LABEL_9;
  }
  return v10 & 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t closure #1 in PluginClient.connectionFuture()(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (uint64_t *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v7 = a3;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  a1(v7);
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
}

uint64_t closure #3 in PluginClient.connectionFuture()(void (*a1)(char *))
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NWError();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 3, 3, v5);
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
}

uint64_t PluginClient.call<A, B>(rpc:input:traceId:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(), void *a7)
{
  uint64_t v8 = v7;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v28 = a5;
  uint64_t v31 = a3;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v15 - 8);
  uint64_t v33 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *a1;
  uint64_t v21 = a1[1];
  uint64_t aBlock = a4;
  uint64_t v37 = v28;
  unint64_t v38 = v29;
  uint64_t v39 = v30;
  type metadata accessor for PluginRpcStream();
  uint64_t aBlock = v22;
  uint64_t v37 = v21;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, (uint64_t)v20, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v23 = specialized PluginRpcStream.__allocating_init(definition:input:traceId:)(&aBlock, a2, (uint64_t)v20);
  swift_release();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = v8;
  uint64_t v40 = partial apply for closure #1 in PluginClient.call<A, B>(rpc:input:traceId:);
  uint64_t v41 = v24;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v37 = 1107296256;
  unint64_t v38 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v39 = &block_descriptor_32;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v17, v14, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
  swift_release();
  uint64_t aBlock = v23;
  swift_getWitnessTable();
  uint64_t v26 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v26;
}

uint64_t closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MapError<Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>, PluginRpcError>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v17 = v6;
  uint64_t v18 = v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v14 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = PluginClient.connectionFuture()();
  swift_allocObject();
  swift_weakInit();
  static Subscribers.Demand.unlimited.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
  type metadata accessor for NWConnection();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<NWConnection, PluginConnectError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<NWConnection, PluginConnectError> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<NWConnection, PluginConnectError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<NWConnection, PluginConnectError>);
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  type metadata accessor for PluginRpcError();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>);
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_4(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (void (*)(uint64_t))type metadata accessor for PluginRpcError);
  uint64_t v9 = v14;
  uint64_t v10 = v15;
  Publisher.mapError<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v10);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.MapError<Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>, PluginRpcError> and conformance Publishers.MapError<A, B>, &demangling cache variable for type metadata for Publishers.MapError<Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>, PluginRpcError>);
  swift_retain_n();
  uint64_t v11 = v17;
  uint64_t v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v11);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(v12);
}

uint64_t closure #1 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PluginConnectError();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Fail<NWConnection, PluginConnectError>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v15 = PluginClient.createQuicStream(quicConnection:)(v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<NWConnection, PluginConnectError> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    uint64_t v12 = Publisher.eraseToAnyPublisher()();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v14 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 3, 3, v14);
    type metadata accessor for NWConnection();
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_4(&lazy protocol witness table cache variable for type PluginConnectError and conformance PluginConnectError, (void (*)(uint64_t))type metadata accessor for PluginConnectError);
    Fail.init(error:)();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Fail<NWConnection, PluginConnectError> and conformance Fail<A, B>, &demangling cache variable for type metadata for Fail<NWConnection, PluginConnectError>);
    uint64_t v12 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  *a2 = v12;
  return result;
}

uint64_t closure #2 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of PluginEndpoint(a1, a2, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
  type metadata accessor for PluginRpcError();
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #3 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  uint64_t v5 = type metadata accessor for PluginRpcError();
  int v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  uint64_t result = outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  if (v6 != 1) {
    return PassthroughSubject.send(completion:)();
  }
  return result;
}

Swift::Void __swiftcall PluginClient.close()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in PluginClient.close();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6_4;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v7, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v11);
  swift_release();
  swift_release();
}

uint64_t closure #1 in PluginClient.close()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 288))(result);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PluginClient._close()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v22 = v6;
    swift_retain();
    _StringGuts.grow(_:)(22);
    v7._object = (void *)0x80000001B1162350;
    v7._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 41;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "%s Closing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {

    uint64_t v9 = swift_release_n();
  }
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter);
  if (v10)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 208);
    uint64_t v12 = swift_retain();
    if (v11(v12))
    {
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_1B0DF7000, v13, v14, "Data-transfer report triggered", v15, 2u);
        MEMORY[0x1B3EA39E0](v15, -1, -1);
      }

      uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag);
      uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag + 8);
      uint64_t v18 = *(void **)(v10 + 16);
      uint64_t v19 = (void *)swift_allocObject();
      void v19[2] = v10;
      v19[3] = v17;
      v19[4] = v16;
      swift_retain();
      swift_bridgeObjectRetain();
      id v20 = v18;
      dispatch thunk of NWConnection.PendingDataTransferReport.collect(queue:completion:)();
      swift_release();
      swift_release();
    }
    uint64_t v9 = swift_release();
  }
  unint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 160))(v9);
  if (!(v21 >> 62)) {
    NWConnection.cancel()();
  }
  outlined consume of ActivitySession.State(v21);
  (*(void (**)(unint64_t))(*(void *)v1 + 168))(0x8000000000000008);
}

uint64_t PluginClient.description.getter()
{
  _StringGuts.grow(_:)(22);
  v0._object = (void *)0x80000001B1162350;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginClient()
{
  return PluginClient.description.getter();
}

uint64_t partial apply for closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)()
{
  return closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(*(void *)(v0 + 16));
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t sub_1B10AAFC0()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PluginClient.close()()
{
  return closure #1 in PluginClient.close()();
}

uint64_t sub_1B10AB000()
{
  return objectdestroy_8Tm(MEMORY[0x1E4FBC898], 40);
}

uint64_t partial apply for closure #1 in PluginClient._close()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, void))(**(void **)(v1 + 16) + 176))(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1B10AB068(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 136))();
}

uint64_t sub_1B10AB0B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10AB0FC(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(unint64_t))(**(void **)a2 + 168);
  outlined copy of ActivitySession.State(*a1);
  return v3(v2);
}

uint64_t sub_1B10AB158@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10AB1A4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 192);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B10AB1F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10AB244(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 216);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for PluginClient()
{
  return type metadata accessor for PluginClient(0);
}

uint64_t type metadata accessor for PluginClient(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PluginClient);
}

uint64_t type metadata completion function for PluginClient()
{
  uint64_t result = type metadata accessor for PluginClient.Configuration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PluginClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginClient);
}

uint64_t dispatch thunk of PluginClient.config.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PluginClient.connectionState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PluginClient.connectionState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PluginClient.connectionState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PluginClient.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PluginClient.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PluginClient.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PluginClient.pendingDataTransferReport.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PluginClient.pendingDataTransferReport.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PluginClient.pendingDataTransferReport.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PluginClient.localParticipantID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PluginClient.__allocating_init(config:queue:reporter:reporterTag:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of PluginClient.updateVirtualParticipant(_:localParticipantID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of PluginClient.call<A, B>(rpc:input:traceId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of PluginClient.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of PluginClient._close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t initializeBufferWithCopyOfBuffer for PluginClient.Configuration(uint64_t a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    type metadata accessor for PluginEndpoint();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = a2[2];
      Swift::String v8 = a2 + 3;
      unint64_t v9 = a2[4];
      swift_bridgeObjectRetain();
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v8;
      }
      else
      {
        uint64_t v12 = *(void *)v8;
        outlined copy of Data._Representation(v12, v9);
        *(void *)(a1 + 24) = v12;
        *(void *)(a1 + 32) = v9;
      }
      *(void *)(a1 + 40) = a2[5];
    }
    else
    {
      uint64_t v11 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    *(void *)(a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *(void *)(a1 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[8];
    *(unsigned char *)(a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[9];
    uint64_t v19 = (void *)(a1 + v18);
    id v20 = (void *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PluginClient.Configuration(uint64_t a1)
{
  type metadata accessor for PluginEndpoint();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    unint64_t v2 = *(void *)(a1 + 32);
    if (v2 >> 60 != 15) {
      outlined consume of Data._Representation(*(void *)(a1 + 24), v2);
    }
  }
  else
  {
    uint64_t v3 = type metadata accessor for NWEndpoint();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PluginClient.Configuration(uint64_t a1, void *a2, int *a3)
{
  type metadata accessor for PluginEndpoint();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = a2[2];
    uint64_t v7 = a2 + 3;
    unint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *v7;
    }
    else
    {
      uint64_t v10 = *(void *)v7;
      outlined copy of Data._Representation(v10, v8);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v8;
    }
    *(void *)(a1 + 40) = a2[5];
  }
  else
  {
    uint64_t v9 = type metadata accessor for NWEndpoint();
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)(a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  void *v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PluginClient.Configuration(uint64_t a1, void *a2, int *a3)
{
  if ((void *)a1 != a2)
  {
    outlined destroy of PluginEndpoint(a1, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
    type metadata accessor for PluginEndpoint();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = a2[2];
      uint64_t v6 = a2 + 3;
      unint64_t v7 = a2[4];
      swift_bridgeObjectRetain();
      if (v7 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v6;
      }
      else
      {
        uint64_t v9 = *(void *)v6;
        outlined copy of Data._Representation(v9, v7);
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = v7;
      }
      *(void *)(a1 + 40) = a2[5];
    }
    else
    {
      uint64_t v8 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for PluginClient.Configuration(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PluginEndpoint();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for NWEndpoint();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for PluginClient.Configuration(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of PluginEndpoint((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for PluginEndpoint);
    uint64_t v6 = type metadata accessor for PluginEndpoint();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for NWEndpoint();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[9];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v18 = *(void *)v16;
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginClient.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10ABDB0);
}

uint64_t sub_1B10ABDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PluginEndpoint();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PluginClient.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10ABE88);
}

uint64_t sub_1B10ABE88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PluginEndpoint();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for PluginClient.Configuration()
{
  uint64_t result = type metadata accessor for PluginEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginClient.ConnectionState()
{
  return &type metadata for PluginClient.ConnectionState;
}

uint64_t partial apply for closure #2 in PluginClient.connectionFuture()(void (*a1)(char *), uint64_t a2)
{
  return PluginClient.connectWithRetries(attempt:promise:)(1, a1, a2);
}

uint64_t partial apply for closure #1 in PluginClient.connectionFuture()(void (*a1)(void *), uint64_t a2)
{
  return closure #1 in PluginClient.connectionFuture()(a1, a2, v2);
}

uint64_t sub_1B10AC020()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1)
{
  return closure #1 in PluginClient.connectWithRetries(attempt:promise:)(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1B10AC06C()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t *a1)
{
  closure #2 in PluginClient.connectWithRetries(attempt:promise:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1)
{
  return closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:)(a1);
}

uint64_t outlined init with take of PluginConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PluginConnectError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B10AC128()
{
  return objectdestroy_8Tm(MEMORY[0x1E4FBC8D0], 48);
}

uint64_t objectdestroy_8Tm(void (*a1)(void), uint64_t a2)
{
  swift_release();
  a1(*(void *)(v2 + 32));
  return MEMORY[0x1F4186498](v2, a2, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:)()
{
  return closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:)(*(void *)(v0 + 16), *(void (**)(char *))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t outlined assign with take of PluginClient.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PluginClient.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(a1, a2);
}

uint64_t partial apply for closure #3 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(uint64_t a1)
{
  return closure #3 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(a1);
}

uint64_t partial apply for closure #4 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)v1 + 216))(*a1);
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall LSPropertyList.containsAnyGameCenterEntitlements()()
{
  v8[0] = 10;
  if (LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)v8)) {
    return 1;
  }
  uint64_t v2 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000001FLL, 0x80000001B115AC30);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v4 = objc_msgSend(v0, sel_objectForKey_ofClass_valuesOfClass_, v2, ObjCClassFromMetadata, swift_getObjCClassFromMetadata());

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      uint64_t v5 = *(void *)(v6 + 16);
      swift_bridgeObjectRelease();
      return v5 != 0;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

void CPApplicationController.registerObserver(observer:)(uint64_t a1)
{
  swift_getObjectType();
  specialized CPApplicationController.registerObserver(observer:)(a1, v1);
}

uint64_t CPApplicationControllerProtocol.isActivitySupported(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    LOBYTE(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8))(v8, v10, a2, a3);
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.default);
    id v13 = a1;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      id v18 = v13;
      uint64_t v19 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Missing bundle identifier: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v17, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {
    }
    return 0;
  }
}

Swift::Bool __swiftcall CPApplicationController.isBundleIdentifierSupported(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v4 = (void **)((char *)v1 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
  swift_beginAccess();
  uint64_t v5 = *v4;
  id v6 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = (uint64_t *)&v7[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v7) + 0x68)];
  *uint64_t v9 = countAndFlagsBits;
  v9[1] = (uint64_t)object;
  v33.receiver = v7;
  v33.super_class = v6;
  uint64_t v10 = &selRef_isScreenEnabled;
  swift_bridgeObjectRetain_n();
  id v11 = v5;
  id v12 = objc_msgSendSuper2(&v33, sel_init);
  id v13 = objc_msgSend(v11, sel_objectForKey_, v12);

  if (v13)
  {
    char v14 = *((unsigned char *)v13 + *(void *)((*v8 & *v13) + 0x68));

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    char v14 = (*(uint64_t (**)(uint64_t, void *))((*v8 & *v1) + 0x108))(countAndFlagsBits, object);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v32[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v32);
      uint64_t v10 = &selRef_isScreenEnabled;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v16, v17, "Caching value for %s: %{BOOL}d", (uint8_t *)v18, 0x12u);
      swift_arrayDestroy();
      uint64_t v20 = v19;
      uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
      MEMORY[0x1B3EA39E0](v20, -1, -1);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    uint64_t v21 = *v4;
    uint64_t v22 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedValue);
    uint64_t v23 = objc_allocWithZone(v22);
    v23[*(void *)((*v8 & *(void *)v23) + 0x68)] = v14 & 1;
    v31.receiver = v23;
    v31.super_class = v22;
    uint64_t v24 = v10[218];
    swift_bridgeObjectRetain();
    id v25 = objc_msgSendSuper2(&v31, v24);
    uint64_t v26 = (char *)objc_allocWithZone(v6);
    os_log_type_t v27 = (uint64_t *)&v26[*(void *)((*v8 & *(void *)v26) + 0x68)];
    uint64_t *v27 = countAndFlagsBits;
    v27[1] = (uint64_t)object;
    v30.receiver = v26;
    v30.super_class = v6;
    uint64_t v28 = v10[218];
    swift_bridgeObjectRetain();
    id v13 = objc_msgSendSuper2(&v30, v28);
    objc_msgSend(v21, sel_setObject_forKey_, v25, v13);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  return v14 & 1;
}

uint64_t CPApplicationController.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CPApplicationController.featureFlags.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPApplicationController_featureFlags);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*CPApplicationController.featureFlags.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t CPApplicationController.protectedAppsObserver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPApplicationController_protectedAppsObserver;
  swift_beginAccess();
  return outlined init with copy of ProtectedAppsObserverProtocol?(v3, a1);
}

uint64_t CPApplicationController.protectedAppsObserver.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPApplicationController_protectedAppsObserver;
  swift_beginAccess();
  outlined assign with take of ProtectedAppsObserverProtocol?(a1, v3);
  return swift_endAccess();
}

uint64_t (*CPApplicationController.protectedAppsObserver.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t one-time initialization function for systemBundleIdentifiers()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B1138A70;
  *(void *)(v0 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 40) = v1;
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 48) = result;
  *(void *)(v0 + 56) = v3;
  static CPApplicationController.systemBundleIdentifiers = v0;
  return result;
}

id CPApplicationController.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

NSObject *CPApplicationController.init()()
{
  id v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache;
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1C998]);
  uint64_t v5 = v0;
  id v6 = &selRef_isScreenEnabled;
  id v7 = objc_msgSend(v4, sel_init);
  objc_msgSend(v7, sel_setCountLimit_, 25);
  *(void *)&v1[v3] = v7;
  uint64_t v8 = OBJC_IVAR___CPApplicationController_definedSystemActivityIdentifiersCache;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C998]), sel_init);
  objc_msgSend(v9, sel_setCountLimit_, 25);
  *(void *)&v5[v8] = v9;
  uint64_t v10 = OBJC_IVAR___CPApplicationController_lock;
  type metadata accessor for Lock();
  uint64_t v11 = swift_allocObject();
  id v12 = (_DWORD *)swift_slowAlloc();
  *(void *)(v11 + 16) = v12;
  *id v12 = 0;
  *(void *)&v5[v10] = v11;
  uint64_t v13 = OBJC_IVAR___CPApplicationController_observers;
  *(void *)&v5[v13] = objc_msgSend(self, sel_weakObjectsHashTable);
  char v14 = &lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  uint64_t v15 = OBJC_IVAR___CPApplicationController_featureFlags;
  *(void *)&v5[v15] = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  uint64_t v16 = &lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  os_log_type_t v17 = &v5[OBJC_IVAR___CPApplicationController_protectedAppsObserver];
  *((void *)v17 + 4) = 0;
  *(_OWORD *)os_log_type_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;

  v47.receiver = v5;
  v47.super_class = (Class)type metadata accessor for CPApplicationController();
  id v18 = objc_msgSendSuper2(&v47, sel_init);
  uint64_t v19 = one-time initialization token for default;
  id v20 = v18;
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Log.default);
  uint64_t v22 = v20;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = (void *)swift_slowAlloc();
    *(_DWORD *)id v25 = 138412290;
    aBlock[0] = v22;
    os_log_type_t v27 = v22;
    id v6 = &selRef_isScreenEnabled;
    char v14 = &lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v26 = v22;

    _os_log_impl(&dword_1B0DF7000, v23, v24, "Initialized %@", v25, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v28 = v26;
    uint64_t v16 = &lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {

    uint64_t v23 = v22;
  }

  uint64_t result = objc_msgSend(self, sel_defaultWorkspace);
  if (result)
  {
    objc_super v30 = result;
    [result addObserver:v22];

    objc_super v31 = (id *)((char *)&v22->isa + v14[75]);
    swift_beginAccess();
    if (objc_msgSend(*v31, sel_appProtectionEnabled))
    {
      uint64_t v32 = (objc_class *)type metadata accessor for ProtectedAppsObserver();
      id v33 = [objc_allocWithZone(v32) v6[218]];
      unint64_t v44 = v32;
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t))&protocol witness table for ProtectedAppsObserver;
      aBlock[0] = v33;
      uint64_t v34 = (uint64_t)v22 + v16[76];
      swift_beginAccess();
      outlined assign with take of ProtectedAppsObserverProtocol?((uint64_t)aBlock, v34);
      swift_endAccess();
      swift_beginAccess();
      uint64_t v35 = *(void *)(v34 + 24);
      if (v35)
      {
        uint64_t v36 = *(void *)(v34 + 32);
        __swift_mutable_project_boxed_opaque_existential_1(v34, *(void *)(v34 + 24));
        uint64_t v37 = *(void (**)(NSObject *, _UNKNOWN **, uint64_t, uint64_t))(v36 + 16);
        unint64_t v38 = v22;
        v37(v22, &protocol witness table for CPApplicationController, v35, v36);
      }
      swift_endAccess();
    }
    uint64_t v39 = v22;
    if (objc_msgSend(*v31, sel_autoGameCenterEnabled))
    {
      uint64_t v39 = objc_msgSend(self, sel_shared);
      uint64_t v40 = swift_allocObject();
      *(void *)(v40 + 16) = v22;
      *(void *)(v40 + 24) = ObjectType;
      uint64_t v45 = partial apply for closure #1 in CPApplicationController.init();
      uint64_t v46 = v40;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [Any], @guaranteed Error?) -> ();
      unint64_t v44 = (objc_class *)&block_descriptor_33;
      uint64_t v41 = _Block_copy(aBlock);
      uint64_t v42 = v22;
      swift_release();
      [v39 fetchOnDeviceMultiplayerBundleIDsWithHandler:v41];

      _Block_release(v41);
    }

    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in CPApplicationController.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v45 = a3;
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v51[0] = v10;
    *(_DWORD *)id v9 = 136315138;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x1B3EA1D20](v11, MEMORY[0x1E4FBC840] + 8);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = v12;
    a3 = v45;
    *(void *)&v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Caching Game Center Multiplayer games in supportedBundleIdentifierCache. Games: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t result = specialized _arrayConditionalCast<A, B>(_:)(a1);
  if (result)
  {
    uint64_t v17 = *(void *)(result + 16);
    if (v17)
    {
      uint64_t v43 = (void **)(a3 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
      unint64_t v44 = *(uint64_t (**)(uint64_t, unint64_t))(a4 + 256);
      id v18 = (unint64_t *)(result + 40);
      do
      {
        uint64_t v20 = *(v18 - 1);
        unint64_t v19 = *v18;
        swift_bridgeObjectRetain();
        uint64_t v21 = (void *)v44(v20, v19);
        LOBYTE(v51[0]) = 10;
        if (!LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)v51))
        {
          uint64_t v26 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000001FLL, 0x80000001B115AC30);
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
          uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
          id v28 = objc_msgSend(v21, sel_objectForKey_ofClass_valuesOfClass_, v26, ObjCClassFromMetadata, swift_getObjCClassFromMetadata());

          if (v28)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v50, 0, sizeof(v50));
          }
          outlined init with take of Any?((uint64_t)v50, (uint64_t)v51);
          if (!v51[3])
          {
            outlined destroy of UUID?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_23:
            swift_bridgeObjectRetain();
            uint64_t v39 = Logger.logObject.getter();
            os_log_type_t v40 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v39, v40))
            {
              uint64_t v41 = swift_slowAlloc();
              uint64_t v42 = swift_slowAlloc();
              v51[0] = v42;
              *(_DWORD *)uint64_t v41 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)(v41 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v51);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1B0DF7000, v39, v40, "Do not cache value for %s: because it does not have Game Center entitlement.", (uint8_t *)v41, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1B3EA39E0](v42, -1, -1);
              MEMORY[0x1B3EA39E0](v41, -1, -1);
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }

            goto LABEL_9;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_23;
          }
          uint64_t v38 = *(void *)(v49 + 16);
          swift_bridgeObjectRelease();
          if (!v38) {
            goto LABEL_23;
          }
        }
        swift_bridgeObjectRetain_n();
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          v51[0] = v25;
          *(_DWORD *)uint64_t v24 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v51);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v22, v23, "Caching value for %s: true", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v25, -1, -1);
          MEMORY[0x1B3EA39E0](v24, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_beginAccess();
        uint64_t v29 = *v43;
        objc_super v30 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedValue);
        objc_super v31 = objc_allocWithZone(v30);
        uint64_t v32 = (void *)MEMORY[0x1E4FBC8C8];
        v31[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v31) + 0x68)] = 1;
        v48.receiver = v31;
        v48.super_class = v30;
        id v33 = objc_msgSendSuper2(&v48, sel_init);
        uint64_t v34 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
        uint64_t v35 = (char *)objc_allocWithZone(v34);
        uint64_t v36 = (uint64_t *)&v35[*(void *)((*v32 & *(void *)v35) + 0x68)];
        *uint64_t v36 = v20;
        v36[1] = v19;
        v47.receiver = v35;
        v47.super_class = v34;
        swift_bridgeObjectRetain();
        id v37 = objc_msgSendSuper2(&v47, sel_init);
        objc_msgSend(v29, sel_setObject_forKey_, v33, v37);
        swift_endAccess();

        swift_bridgeObjectRelease();
LABEL_9:
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v12;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      *(void *)(v3 + 16) = v6 + 1;
      uint64_t v7 = v3 + 16 * v6;
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

{
  uint64_t v2;
  uint64_t i;
  unsigned char v5[32];
  uint64_t v6;

  unint64_t v6 = MEMORY[0x1E4FBC860];
  int64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v5);
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for LSApplicationProxy);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed [Any], @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t static CPApplicationController.isAppHidden(for:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProtectedAppsObserver()), sel_init);
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78))();

  LOBYTE(a2) = specialized Sequence<>.contains(_:)(a1, a2, v5);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

id static CPApplicationController.entitlements(for:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v21 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v21);
    uint64_t v3 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Looking up bundle record for %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for LSBundleRecord);
  swift_bridgeObjectRetain();
  id result = @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (!v3)
  {
    uint64_t v12 = result;
    swift_bridgeObjectRetain_n();
    id v13 = v12;
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      unint64_t v19 = (void *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = v20;
      *(_DWORD *)uint64_t v16 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2112;
      id v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v19 = v13;

      _os_log_impl(&dword_1B0DF7000, v14, v15, "bundleIdentifier: %s bundleRecord: %@", (uint8_t *)v16, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v20, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v18 = objc_msgSend(v13, sel_entitlements);

    return v18;
  }
  return result;
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = (void *)MEMORY[0x1B3EA1B00]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

Swift::Bool __swiftcall CPApplicationController.lookupBundleIdentifierSupported(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = ObjectType;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v25 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Attempting to check if bundle identifier is supported: %s", v9, 0xCu);
    swift_arrayDestroy();
    uint64_t v11 = v10;
    uint64_t ObjectType = v24;
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for systemBundleIdentifiers != -1) {
    swift_once();
  }
  uint64_t v12 = countAndFlagsBits;
  if ((specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, (void *)static CPApplicationController.systemBundleIdentifiers) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = specialized tryLog<A>(_:_:function:line:)((uint64_t)"Entitlements", 12, 2, 0xD000000000000023, 0x80000001B1162400, 95, countAndFlagsBits, (uint64_t)object, ObjectType);
    if (v14)
    {
      os_log_type_t v15 = (void *)v14;
      unsigned int v16 = objc_msgSend((id)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xC8))(), sel_appProtectionEnabled);
      swift_unknownObjectRelease();
      if (!v16 || ((*(uint64_t (**)(uint64_t, void *))(ObjectType + 248))(countAndFlagsBits, object) & 1) == 0)
      {
        LOBYTE(v25) = 4;
        Swift::Bool v21 = LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)&v25);
        LOBYTE(v25) = 3;
        Swift::Bool v22 = LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)&v25);

        char v13 = v21 || v22;
        return v13 & 1;
      }
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      __swift_project_value_buffer(v6, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      id v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        uint64_t v25 = v20;
        *(_DWORD *)unint64_t v19 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, (unint64_t)object, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v17, v18, "[CPApplicationController] Hidden app found for %s", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v20, -1, -1);
        MEMORY[0x1B3EA39E0](v19, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    char v13 = 0;
    return v13 & 1;
  }
  char v13 = 1;
  return v13 & 1;
}

uint64_t implicit closure #2 in CPApplicationController.lookupBundleIdentifierSupported(_:)@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  return implicit closure #2 in CPApplicationController.lookupBundleIdentifierSupported(_:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;

  id result = (*(uint64_t (**)(void))(a1 + 256))();
  if (!v2) {
    *a2 = result;
  }
  return result;
}

Swift::Bool __swiftcall LSPropertyList.contains(entitlement:)(CopresenceCore::Entitlement entitlement)
{
  LOBYTE(v8[0]) = *(unsigned char *)entitlement;
  unint64_t v2 = Entitlement.rawValue.getter();
  uint64_t v3 = (void *)MEMORY[0x1B3EA1B00](v2);
  swift_bridgeObjectRelease();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v4 = objc_msgSend(v1, sel_objectForKey_ofClass_, v3, swift_getObjCClassFromMetadata());

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  outlined init with take of Any?((uint64_t)v8, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  unsigned __int8 v5 = objc_msgSend(v7, sel_BOOLValue);

  return v5;
}

uint64_t static CPApplicationController.lookupDefinedSystemActivityIdentifiers(for:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized tryLog<A>(_:_:function:line:)((uint64_t)"Entitlements", 12, 2, 0xD00000000000002CLL, 0x80000001B1162430, 114, a1, a2, v2);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = (void *)v5;
  id v7 = (void *)MEMORY[0x1B3EA1B00](0xD00000000000002ELL, 0x80000001B115ABC0);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v9 = objc_msgSend(v6, sel_objectForKey_ofClass_valuesOfClass_, v7, ObjCClassFromMetadata, swift_getObjCClassFromMetadata());

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  outlined init with take of Any?((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {
    outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast())
  {
LABEL_9:

    return MEMORY[0x1E4FBC860];
  }
  uint64_t v10 = v12;

  return v10;
}

uint64_t CPApplicationController.isValidSystemActivity(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  if (objc_msgSend(a1, sel_isSystemActivity)
    && (id v5 = objc_msgSend(a1, sel_bundleIdentifier)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    uint64_t v10 = (void **)(v2 + OBJC_IVAR___CPApplicationController_definedSystemActivityIdentifiersCache);
    swift_beginAccess();
    uint64_t v11 = *v10;
    uint64_t v12 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Cache<String, [String]>.WrappedKey);
    char v13 = (char *)objc_allocWithZone(v12);
    uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v15 = (uint64_t *)&v13[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v13) + 0x68)];
    uint64_t *v15 = v7;
    v15[1] = v9;
    v36.receiver = v13;
    v36.super_class = v12;
    swift_bridgeObjectRetain_n();
    id v16 = v11;
    id v17 = objc_msgSendSuper2(&v36, sel_init);
    os_log_type_t v18 = objc_msgSend(v16, sel_objectForKey_, v17);

    if (v18)
    {
      unint64_t v19 = *(void **)((char *)v18 + *(void *)((*v14 & *v18) + 0x68));
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease_n();
      id v20 = objc_msgSend(a1, sel_activityIdentifier);
    }
    else
    {

      swift_bridgeObjectRelease();
      unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 272))(v7, v9);
      swift_beginAccess();
      Swift::Bool v22 = *v10;
      os_log_type_t v23 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, [String]>.WrappedValue);
      uint64_t v24 = (char *)objc_allocWithZone(v23);
      *(void *)&v24[*(void *)((*v14 & *(void *)v24) + 0x68)] = v19;
      v35.receiver = v24;
      v35.super_class = v23;
      swift_bridgeObjectRetain_n();
      id v25 = objc_msgSendSuper2(&v35, sel_init);
      uint64_t v26 = (char *)objc_allocWithZone(v12);
      os_log_type_t v27 = (uint64_t *)&v26[*(void *)((*v14 & *(void *)v26) + 0x68)];
      uint64_t *v27 = v7;
      v27[1] = v9;
      v34.receiver = v26;
      v34.super_class = v12;
      swift_bridgeObjectRetain();
      id v28 = objc_msgSendSuper2(&v34, sel_init);
      objc_msgSend(v22, sel_setObject_forKey_, v25, v28, v34.receiver, v34.super_class, v35.receiver, v35.super_class);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      id v20 = objc_msgSend(a1, sel_activityIdentifier);
    }
    id v29 = v20;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    char v21 = specialized Sequence<>.contains(_:)(v30, v32, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

id CPApplicationController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPApplicationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL protocol witness for CPApplicationControllerProtocol.isBundleIdentifierSupported(_:) in conformance CPApplicationController(uint64_t a1, uint64_t a2)
{
  return CPApplicationController.isBundleIdentifierSupported(_:)(*(Swift::String *)&a1);
}

uint64_t CPApplicationController.notifyObservers(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)(v2 + OBJC_IVAR___CPApplicationController_lock)
                                                       + 16));
  id v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR___CPApplicationController_observers), sel_allObjects);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CPApplicationObserverProtocol);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v6 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v7 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_3:
  if (v7 >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        uint64_t v10 = (void *)MEMORY[0x1B3EA25C0](v9, v6);
      }
      else
      {
        uint64_t v10 = *(void **)(v6 + 8 * v9 + 32);
        swift_unknownObjectRetain();
      }
      ++v9;
      uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
      objc_msgSend(v10, sel_applicationController_bundleIdentifierChanged_, v2, v11);
      swift_unknownObjectRelease();
    }
    while (v7 != v9);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall CPApplicationController.invalidateCache(bundleIdentifier:)(Swift::String bundleIdentifier)
{
  uint64_t v2 = v1;
  object = bundleIdentifier._object;
  uint64_t countAndFlagsBits = bundleIdentifier._countAndFlagsBits;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v25[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v6, v7, "Invalidating cached value for bundle identifier: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = (void **)(v2 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
  swift_beginAccess();
  uint64_t v11 = *v10;
  uint64_t v12 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
  char v13 = (char *)objc_allocWithZone(v12);
  uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v15 = (uint64_t *)&v13[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v13) + 0x68)];
  uint64_t *v15 = countAndFlagsBits;
  v15[1] = (uint64_t)object;
  v24.receiver = v13;
  v24.super_class = v12;
  swift_bridgeObjectRetain_n();
  id v16 = objc_msgSendSuper2(&v24, sel_init);
  objc_msgSend(v11, sel_removeObjectForKey_, v16);
  swift_endAccess();
  swift_bridgeObjectRelease();

  id v17 = (void **)(v2 + OBJC_IVAR___CPApplicationController_definedSystemActivityIdentifiersCache);
  swift_beginAccess();
  os_log_type_t v18 = *v17;
  unint64_t v19 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Cache<String, [String]>.WrappedKey);
  id v20 = (char *)objc_allocWithZone(v19);
  char v21 = (uint64_t *)&v20[*(void *)((*v14 & *(void *)v20) + 0x68)];
  uint64_t *v21 = countAndFlagsBits;
  v21[1] = (uint64_t)object;
  v23.receiver = v20;
  v23.super_class = v19;
  swift_bridgeObjectRetain_n();
  id v22 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v18, sel_removeObjectForKey_, v22);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CPApplicationController.applicationsChanged(_:didInstall:)(Swift::OpaquePointer _, Swift::Bool didInstall)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void *)((char *)v2 + OBJC_IVAR___CPApplicationController_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 16));
  unint64_t v7 = specialized _arrayConditionalCast<A, B>(_:)((uint64_t)_._rawValue);
  if (v7)
  {
    unint64_t v8 = v7;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v34 = v6;
    Swift::Bool v33 = didInstall;
    if (!v9)
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
LABEL_23:
      swift_bridgeObjectRelease_n();
      uint64_t v29 = v11[2];
      if (v29)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = v11 + 5;
        do
        {
          uint64_t v31 = *v30;
          v35[0] = *(v30 - 1);
          v35[1] = v31;
          swift_bridgeObjectRetain();
          closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(v35, v2, v33, ObjectType);
          swift_bridgeObjectRelease();
          v30 += 2;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v6 = v34;
      goto LABEL_28;
    }
    if (v9 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        if ((v8 & 0xC000000000000001) != 0) {
          id v12 = (id)MEMORY[0x1B3EA25C0](v10, v8);
        }
        else {
          id v12 = *(id *)(v8 + 8 * v10 + 32);
        }
        char v13 = v12;
        id v14 = objc_msgSend(v12, sel_bundleIdentifier);
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = v9;
          id v17 = v2;
          uint64_t v18 = ObjectType;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          }
          unint64_t v23 = v11[2];
          unint64_t v22 = v11[3];
          if (v23 >= v22 >> 1) {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v11);
          }
          v11[2] = v23 + 1;
          objc_super v24 = &v11[2 * v23];
          void v24[4] = v19;
          v24[5] = v21;
          uint64_t ObjectType = v18;
          uint64_t v2 = v17;
          uint64_t v9 = v16;
        }
        else
        {
        }
        ++v10;
      }
      while (v9 != v10);
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_33;
  }
  if (one-time initialization token for default != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.default);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v28 = 0;
    _os_log_impl(&dword_1B0DF7000, v26, v27, "Failed to convert notifications' appProxies to LSApplicationProxy", v28, 2u);
    MEMORY[0x1B3EA39E0](v28, -1, -1);
  }

LABEL_28:
  uint64_t v32 = *(os_unfair_lock_s **)(v6 + 16);
  os_unfair_lock_unlock(v32);
}

void closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(uint64_t *a1, void *a2, char a3, uint64_t a4)
{
  unint64_t v7 = (void *)a1[1];
  v9._uint64_t countAndFlagsBits = *a1;
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  v9._object = v7;
  CPApplicationController.invalidateCache(bundleIdentifier:)(v9);
  uint64_t v10 = CPApplicationController.notifyObservers(bundleIdentifier:)(countAndFlagsBits, (uint64_t)v7);
  if (a3)
  {
    unsigned int v11 = objc_msgSend((id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0xC8))(v10), sel_autoGameCenterEnabled);
    swift_unknownObjectRelease();
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = specialized tryLog<A>(_:_:function:line:)((uint64_t)"Entitlements", 12, 2, 0xD000000000000022, 0x80000001B11624D0, 201, countAndFlagsBits, (uint64_t)v7, a4);
      if (v12)
      {
        char v13 = (void *)v12;
        if (LSPropertyList.containsAnyGameCenterEntitlements()())
        {
          id v14 = objc_msgSend(self, sel_shared);
          uint64_t v15 = (void *)MEMORY[0x1B3EA1B00](countAndFlagsBits, v7);
          uint64_t v16 = (void *)swift_allocObject();
          v16[2] = countAndFlagsBits;
          v16[3] = v7;
          v16[4] = a2;
          aBlock[4] = partial apply for closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:);
          aBlock[5] = v16;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
          void aBlock[3] = &block_descriptor_18_4;
          id v17 = _Block_copy(aBlock);
          swift_bridgeObjectRetain();
          uint64_t v18 = a2;
          swift_release();
          objc_msgSend(v14, sel_fetchGameCenterMultiplayerGameStatusForBundleID_handler_, v15, v17);

          _Block_release(v17);
        }
        else
        {
        }
      }
    }
  }
}

void closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    Swift::String v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unsigned int v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v25[0] = v12;
      *(_DWORD *)unsigned int v11 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v9, v10, "Caching value for multiplayer game %s: true", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v12, -1, -1);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char v13 = (void **)(a5 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
    swift_beginAccess();
    id v14 = *v13;
    uint64_t v15 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedValue);
    uint64_t v16 = objc_allocWithZone(v15);
    id v17 = (void *)MEMORY[0x1E4FBC8C8];
    v16[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v16) + 0x68)] = 1;
    v24.receiver = v16;
    v24.super_class = v15;
    swift_bridgeObjectRetain();
    id v18 = objc_msgSendSuper2(&v24, sel_init);
    uint64_t v19 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
    uint64_t v20 = (char *)objc_allocWithZone(v19);
    uint64_t v21 = (uint64_t *)&v20[*(void *)((*v17 & *(void *)v20) + 0x68)];
    uint64_t *v21 = a3;
    v21[1] = a4;
    v23.receiver = v20;
    v23.super_class = v19;
    swift_bridgeObjectRetain();
    id v22 = objc_msgSendSuper2(&v23, sel_init);
    objc_msgSend(v14, sel_setObject_forKey_, v18, v22);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall CPApplicationController.applicationsDidInstall(_:)(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall CPApplicationController.applicationsDidUninstall(_:)(Swift::OpaquePointer a1)
{
}

void CPApplicationController.applicationsDidInstall(_:)(Swift::OpaquePointer a1, const char *a2, char a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    Swift::String v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v10;
    *(_DWORD *)Swift::String v9 = 136315138;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x1B3EA1D20](v11, MEMORY[0x1E4FBC840] + 8);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, a2, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  CPApplicationController.applicationsChanged(_:didInstall:)(a1, a3 & 1);
}

uint64_t @objc CPApplicationController.applicationsDidInstall(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a1;
  a4(v6);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CPApplicationController.appProtectionsChanged(bundleIDs:)(Swift::OpaquePointer bundleIDs)
{
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR___CPApplicationController_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 16));
  uint64_t v17 = *((void *)bundleIDs._rawValue + 2);
  if (v17)
  {
    uint64_t v15 = (char *)bundleIDs._rawValue + 32;
    uint64_t v16 = OBJC_IVAR___CPApplicationController_observers;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    while (1)
    {
      id v4 = (uint64_t *)&v15[16 * v3];
      uint64_t v6 = *v4;
      uint64_t v5 = (void *)v4[1];
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = v6;
      v7._object = v5;
      CPApplicationController.invalidateCache(bundleIdentifier:)(v7);
      os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v18 + 16));
      id v8 = objc_msgSend(*(id *)(v1 + v16), sel_allObjects);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CPApplicationObserverProtocol);
      unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = v3;
      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        if (!v10) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v10) {
          goto LABEL_3;
        }
      }
      if (v10 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v11 = 0;
      do
      {
        if ((v9 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = (void *)MEMORY[0x1B3EA25C0](v11, v9);
        }
        else
        {
          uint64_t v12 = *(void **)(v9 + 8 * v11 + 32);
          swift_unknownObjectRetain();
        }
        ++v11;
        unint64_t v13 = (void *)MEMORY[0x1B3EA1B00](v6, v5);
        objc_msgSend(v12, sel_applicationController_bundleIdentifierChanged_, v1, v13);
        swift_unknownObjectRelease();
      }
      while (v10 != v11);
LABEL_3:
      ++v3;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if (v19 + 1 == v17)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  unint64_t v14 = *(os_unfair_lock_s **)(v18 + 16);
  os_unfair_lock_unlock(v14);
}

void specialized CPApplicationController.registerObserver(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + OBJC_IVAR___CPApplicationController_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 16));
  objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPApplicationController_observers), sel_addObject_, a1);
  uint64_t v5 = *(os_unfair_lock_s **)(v4 + 16);
  os_unfair_lock_unlock(v5);
}

uint64_t outlined init with copy of ProtectedAppsObserverProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ProtectedAppsObserverProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CPApplicationController()
{
  return self;
}

uint64_t sub_1B10B0124()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CPApplicationController.init()(uint64_t a1, uint64_t a2)
{
  return closure #1 in CPApplicationController.init()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t sub_1B10B016C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10B01C8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1B10B022C(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
}

uint64_t sub_1B10B0280(uint64_t a1, void **a2)
{
  outlined init with copy of ProtectedAppsObserverProtocol?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8))(v4);
}

uint64_t dispatch thunk of CPApplicationControllerProtocol.isBundleIdentifierSupported(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for CPApplicationController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPApplicationController);
}

uint64_t dispatch thunk of CPApplicationController.featureFlags.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CPApplicationController.featureFlags.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CPApplicationController.featureFlags.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CPApplicationController.protectedAppsObserver.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CPApplicationController.protectedAppsObserver.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CPApplicationController.protectedAppsObserver.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of static CPApplicationController.isAppHidden(for:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of static CPApplicationController.entitlements(for:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of CPApplicationController.lookupBundleIdentifierSupported(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of static CPApplicationController.lookupDefinedSystemActivityIdentifiers(for:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of CPApplicationController.isValidSystemActivity(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t sub_1B10B0518()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(char a1, uint64_t a2)
{
  closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t ActivitySessionEvent.type.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_type);
}

uint64_t ActivitySessionEvent.item.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_item);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActivitySessionEvent.originatorID.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_originatorID);
}

uint64_t ActivitySessionEvent.queueItemType.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_queueItemType);
}

void *ActivitySessionEvent.url.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionEvent_url);
  id v2 = v1;
  return v1;
}

id ActivitySessionEvent.__allocating_init(type:item:originatorID:queueItemType:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)(a1, a2, a3, a4, a5, a6);
}

id ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v6[OBJC_IVAR___CPActivitySessionEvent_type] = a1;
  uint64_t v16 = &v6[OBJC_IVAR___CPActivitySessionEvent_item];
  *(void *)uint64_t v16 = a2;
  *((void *)v16 + 1) = a3;
  *(void *)&v6[OBJC_IVAR___CPActivitySessionEvent_originatorID] = a4;
  *(void *)&v6[OBJC_IVAR___CPActivitySessionEvent_queueItemType] = a5;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a6, (uint64_t)v15, &demangling cache variable for type metadata for URL?);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  LODWORD(a3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17);
  uint64_t v20 = v6;
  uint64_t v21 = 0;
  if (a3 != 1)
  {
    URL._bridgeToObjectiveC()(v19);
    uint64_t v21 = v22;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
  }
  *(void *)&v20[OBJC_IVAR___CPActivitySessionEvent_url] = v21;

  objc_super v23 = (objc_class *)type metadata accessor for ActivitySessionEvent();
  v26.receiver = v20;
  v26.super_class = v23;
  id v24 = objc_msgSendSuper2(&v26, sel_init);
  outlined destroy of UUID?(a6, &demangling cache variable for type metadata for URL?);
  return v24;
}

uint64_t type metadata accessor for ActivitySessionEvent()
{
  return self;
}

uint64_t ActivitySessionEvent.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v15)
  {
    outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_20;
  }
  type metadata accessor for ActivitySessionEvent();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    char v10 = 0;
    return v10 & 1;
  }
  if (*(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_type) != *(void *)&v13[OBJC_IVAR___CPActivitySessionEvent_type]) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item + 8);
  uint64_t v3 = *(void *)&v13[OBJC_IVAR___CPActivitySessionEvent_item + 8];
  if (!v2)
  {
    if (!v3) {
      goto LABEL_14;
    }
LABEL_19:

    goto LABEL_20;
  }
  if (!v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item) == *(void *)&v13[OBJC_IVAR___CPActivitySessionEvent_item]
    && v2 == v3;
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_19;
  }
LABEL_14:
  if (*(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_originatorID) != *(void *)&v13[OBJC_IVAR___CPActivitySessionEvent_originatorID]
    || *(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_queueItemType) != *(void *)&v13[OBJC_IVAR___CPActivitySessionEvent_queueItemType])
  {
    goto LABEL_19;
  }
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionEvent_url);
  uint64_t v6 = *(void **)&v13[OBJC_IVAR___CPActivitySessionEvent_url];
  if (!v5)
  {
    id v12 = v6;

    if (!v6)
    {
      char v10 = 1;
      return v10 & 1;
    }

    goto LABEL_20;
  }
  if (!v6) {
    goto LABEL_19;
  }
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSURL);
  id v7 = v5;
  id v8 = v6;
  id v9 = v7;
  char v10 = static NSObject.== infix(_:_:)();

  return v10 & 1;
}

Swift::Int ActivitySessionEvent.hash.getter()
{
  Hasher.init()();
  Hasher._combine(_:)(*(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_type));
  if (*(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_item + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_originatorID));
  Hasher._combine(_:)(*(void *)(v0 + OBJC_IVAR___CPActivitySessionEvent_queueItemType));
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionEvent_url);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    id v2 = v1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher.finalize()();
}

uint64_t static ActivitySessionEvent.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ActivitySessionEvent.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ActivitySessionEvent.init(coder:)(a1);
}

uint64_t ActivitySessionEvent.init(coder:)(void *a1)
{
  id v3 = v1;
  BOOL v4 = (void *)MEMORY[0x1B3EA1B00](1701869940, 0xE400000000000000);
  objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  uint64_t v10 = NSCoder.decodeObject<A>(of:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSString?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  if (swift_dynamicCast())
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      uint64_t v8 = 0;
      LOBYTE(v9) = 1;
      static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  type metadata accessor for ActivitySessionEvent();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall ActivitySessionEvent.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_type);
  BOOL v4 = (void *)MEMORY[0x1B3EA1B00](1701869940, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeInteger:v3 forKey:v4];

  if (*(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item + 8)) {
    uint64_t v5 = MEMORY[0x1B3EA1B00](*(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item));
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)MEMORY[0x1B3EA1B00](1835365481, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
  swift_unknownObjectRelease();

  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  uint64_t v8 = (void *)MEMORY[0x1B3EA1B00](0x74616E696769726FLL, 0xEC0000004449726FLL);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v8];

  uint64_t v9 = *(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_queueItemType);
  uint64_t v10 = (void *)MEMORY[0x1B3EA1B00](0x6574496575657571, 0xED0000657079546DLL);
  [(objc_class *)with.super.isa encodeInteger:v9 forKey:v10];

  uint64_t v11 = *(void *)(v1 + OBJC_IVAR___CPActivitySessionEvent_url);
  id v12 = (id)MEMORY[0x1B3EA1B00](7107189, 0xE300000000000000);
  [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];
}

id ActivitySessionEvent.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ActivitySessionEvent.init()()
{
}

id ActivitySessionEvent.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySessionEvent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ActivitySessionEvent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ActivitySessionEvent);
}

uint64_t dispatch thunk of ActivitySessionEvent.__allocating_init(type:item:originatorID:queueItemType:url:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ActivitySessionEvent.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ActivitySessionEvent.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.begin(request:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.updateShare(_:activityID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 56) + **(int **)(a4 + 56));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 64))();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance TUConversationActivity(void **a1, void **a2)
{
  return specialized static TUConversationActivity.< infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance TUConversationActivity()
{
  return MEMORY[0x1F4183768]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance TUConversationActivity()
{
  return MEMORY[0x1F4183760]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance TUConversationActivity()
{
  return MEMORY[0x1F4183758]();
}

uint64_t specialized static TUConversationActivity.< infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v35 - v15;
  id v17 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v38 = a2;
  id v18 = objc_msgSend(a2, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type TUConversationActivity and conformance NSObject(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
  LOBYTE(v18) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  v19(v16, v10);
  if (v18)
  {
    id v20 = objc_msgSend(a1, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = UUID.uuidString.getter();
    uint64_t v23 = v22;
    id v24 = *(void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v25 = v9;
    uint64_t v26 = v37;
    v24(v25, v37);
    id v27 = objc_msgSend(v38, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v28 = UUID.uuidString.getter();
    uint64_t v30 = v29;
    v24(v7, v26);
    if (v21 == v28 && v23 == v30)
    {
      swift_bridgeObjectRelease_n();
      char v31 = 0;
    }
    else
    {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v32 = objc_msgSend(a1, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v33 = objc_msgSend(v38, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    char v31 = static Date.< infix(_:_:)();
    v19(v14, v10);
    v19(v16, v10);
  }
  return v31 & 1;
}

uint64_t base witness table accessor for Equatable in TUConversationActivity()
{
  return lazy protocol witness table accessor for type TUConversationActivity and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationActivity and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUConversationActivity);
}

unint64_t type metadata accessor for TUConversationActivity()
{
  unint64_t result = lazy cache variable for type metadata for TUConversationActivity;
  if (!lazy cache variable for type metadata for TUConversationActivity)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TUConversationActivity and conformance NSObject(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t DG_Datagram.seqNum.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0(a1, v3, type metadata accessor for DG_SequenceNumber);
  uint64_t v4 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t type metadata accessor for DG_Datagram(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DG_Datagram);
}

uint64_t type metadata accessor for DG_SequenceNumber(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DG_SequenceNumber);
}

uint64_t DG_Datagram.encryptionID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0(a1, v3, type metadata accessor for DG_EncryptionID);
  uint64_t v4 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t type metadata accessor for DG_EncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DG_EncryptionID);
}

uint64_t DG_Datagram.seqNum.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v7 = type metadata accessor for DG_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)a1, type metadata accessor for DG_SequenceNumber);
  }
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
}

uint64_t DG_Datagram.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v7 = type metadata accessor for DG_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)a1, type metadata accessor for DG_EncryptionID);
  }
  *a1 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
}

uint64_t protocol witness for AnyRawIngressDatagram.data.getter in conformance DG_Datagram()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t DG_Datagram.data.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t DG_Datagram.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*DG_Datagram.data.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for DG_Datagram.seqNum : DG_Datagram@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v8 = type metadata accessor for DG_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v6, (uint64_t)a2, type metadata accessor for DG_SequenceNumber);
  }
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for DG_SequenceNumber?);
}

uint64_t key path setter for DG_Datagram.seqNum : DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s14CopresenceCore17DG_SequenceNumberVWOcTm_0(a1, (uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for DG_SequenceNumber?);
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v7, v8, type metadata accessor for DG_SequenceNumber);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DG_SequenceNumber.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

void (*DG_Datagram.seqNum.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for DG_SequenceNumber(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)v10, type metadata accessor for DG_SequenceNumber);
  }
  return DG_Datagram.seqNum.modify;
}

void DG_Datagram.seqNum.modify(uint64_t a1, char a2)
{
}

BOOL DG_Datagram.hasSeqNum.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v5 = type metadata accessor for DG_SequenceNumber(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  return v6;
}

Swift::Void __swiftcall DG_Datagram.clearSeqNum()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v2 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t key path getter for DG_Datagram.encryptionID : DG_Datagram@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1F4188790](v4 - 8);
  BOOL v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 32), (uint64_t)v6, &demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v8 = type metadata accessor for DG_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v6, (uint64_t)a2, type metadata accessor for DG_EncryptionID);
  }
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for DG_EncryptionID?);
}

uint64_t key path setter for DG_Datagram.encryptionID : DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s14CopresenceCore17DG_SequenceNumberVWOcTm_0(a1, (uint64_t)v7, type metadata accessor for DG_EncryptionID);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for DG_EncryptionID?);
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v7, v8, type metadata accessor for DG_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DG_EncryptionID.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1B113B700;
  type metadata accessor for DG_EncryptionID(0);
  return UnknownStorage.init()();
}

void (*DG_Datagram.encryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for DG_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    _OWORD *v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  }
  else
  {
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)v10, type metadata accessor for DG_EncryptionID);
  }
  return DG_Datagram.encryptionID.modify;
}

void DG_Datagram.encryptionID.modify(uint64_t a1, char a2)
{
}

void DG_Datagram.seqNum.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48);
  uint64_t v8 = *(void **)(*(void *)a1 + 32);
  size_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void *)(*(void *)a1 + 16);
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  uint64_t v12 = *(void **)(*(void *)a1 + 8);
  uint64_t v13 = **(void **)a1 + v7;
  if (a2)
  {
    _s14CopresenceCore17DG_SequenceNumberVWOcTm_0(*(void *)(*(void *)a1 + 40), (uint64_t)v8, a4);
    outlined destroy of UUID?(v13, a3);
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v9, a4);
  }
  else
  {
    outlined destroy of UUID?(**(void **)a1 + v7, a3);
    _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

uint64_t _s14CopresenceCore17DG_SequenceNumberVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL DG_Datagram.hasEncryptionID.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 32), (uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v5 = type metadata accessor for DG_EncryptionID(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  return v6;
}

Swift::Void __swiftcall DG_Datagram.clearEncryptionID()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v2 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t DG_Datagram.sentEpochMillis.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t DG_Datagram.sentEpochMillis.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*DG_Datagram.sentEpochMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_Datagram.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return DG_Datagram.unknownFields.getter(type metadata accessor for DG_Datagram, a1);
}

uint64_t DG_Datagram.unknownFields.setter(uint64_t a1)
{
  return DG_Datagram.unknownFields.setter(a1, type metadata accessor for DG_Datagram);
}

uint64_t (*DG_Datagram.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_Datagram.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = type metadata accessor for DG_Datagram(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for DG_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t DG_SequenceNumber.senderParticipantID.getter()
{
  return *(void *)v0;
}

uint64_t DG_SequenceNumber.senderParticipantID.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*DG_SequenceNumber.senderParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_SequenceNumber.seqNum.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t DG_SequenceNumber.seqNum.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*DG_SequenceNumber.seqNum.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_SequenceNumber.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return DG_Datagram.unknownFields.getter(type metadata accessor for DG_SequenceNumber, a1);
}

uint64_t DG_Datagram.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t DG_SequenceNumber.unknownFields.setter(uint64_t a1)
{
  return DG_Datagram.unknownFields.setter(a1, type metadata accessor for DG_SequenceNumber);
}

uint64_t DG_Datagram.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*DG_SequenceNumber.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*DG_EncryptionID.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_EncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DG_EncryptionID(0) + 20);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t DG_EncryptionID.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DG_EncryptionID(0) + 20);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*DG_EncryptionID.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

const char *DG_Datagram.protoMessageName.unsafeMutableAddressor()
{
  return "cp.Datagram";
}

uint64_t static DG_Datagram.protoMessageName.getter()
{
  return 0x67617461442E7063;
}

uint64_t DG_Datagram._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_Datagram._protobuf_nameMap);
}

uint64_t static DG_Datagram._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_Datagram._protobuf_nameMap, a1);
}

uint64_t DG_Datagram.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 2:
          closure #2 in DG_Datagram.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in DG_Datagram.decodeMessage<A>(decoder:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in DG_Datagram.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in DG_Datagram.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DG_Datagram.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        uint64_t result = closure #1 in DG_Datagram.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
        if (!v4)
        {
          closure #2 in DG_Datagram.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
          if (v3[2]) {
            dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
          }
          type metadata accessor for DG_Datagram(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

uint64_t closure #1 in DG_Datagram.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for DG_SequenceNumber);
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v11, type metadata accessor for DG_SequenceNumber);
}

uint64_t closure #2 in DG_Datagram.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for DG_EncryptionID?);
  }
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0((uint64_t)v7, (uint64_t)v11, type metadata accessor for DG_EncryptionID);
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v11, type metadata accessor for DG_EncryptionID);
}

Swift::Int DG_Datagram.hashValue.getter()
{
  return DG_Datagram.hashValue.getter((void (*)(void))type metadata accessor for DG_Datagram, &lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
}

uint64_t protocol witness for Message.init() in conformance DG_Datagram@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for DG_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance DG_Datagram()
{
  return 0x67617461442E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DG_Datagram()
{
  return DG_Datagram.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DG_Datagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DG_Datagram.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DG_Datagram@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_Datagram._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DG_Datagram()
{
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *DG_SequenceNumber.protoMessageName.unsafeMutableAddressor()
{
  return &static DG_SequenceNumber.protoMessageName;
}

unint64_t static DG_SequenceNumber.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t DG_SequenceNumber._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_SequenceNumber._protobuf_nameMap);
}

uint64_t static DG_SequenceNumber._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t DG_SequenceNumber.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DG_SequenceNumber.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for DG_SequenceNumber(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int DG_SequenceNumber.hashValue.getter()
{
  return DG_Datagram.hashValue.getter((void (*)(void))type metadata accessor for DG_SequenceNumber, &lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DG_SequenceNumber()
{
  return DG_SequenceNumber.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DG_SequenceNumber()
{
  return DG_SequenceNumber.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DG_SequenceNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DG_SequenceNumber@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DG_SequenceNumber()
{
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DG_SequenceNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *DG_EncryptionID.protoMessageName.unsafeMutableAddressor()
{
  return &static DG_EncryptionID.protoMessageName;
}

uint64_t static DG_EncryptionID.protoMessageName.getter()
{
  return 0x7972636E452E7063;
}

uint64_t DG_EncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_EncryptionID._protobuf_nameMap);
}

uint64_t static DG_EncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_EncryptionID._protobuf_nameMap, a1);
}

uint64_t DG_EncryptionID.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
  }
  return result;
}

uint64_t DG_EncryptionID.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for DG_EncryptionID(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
      return result;
  }
}

Swift::Int DG_EncryptionID.hashValue.getter()
{
  return DG_Datagram.hashValue.getter((void (*)(void))type metadata accessor for DG_EncryptionID, &lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
}

Swift::Int DG_Datagram.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DG_EncryptionID()
{
  return DG_EncryptionID.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DG_EncryptionID()
{
  return DG_EncryptionID.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DG_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DG_EncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_EncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DG_EncryptionID()
{
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DG_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t specialized static DG_SequenceNumber.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1))
  {
    uint64_t v11 = type metadata accessor for DG_SequenceNumber(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static DG_EncryptionID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for DG_EncryptionID(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static DG_Datagram.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  v74 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v73 = (char *)&v67 - v7;
  uint64_t v81 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v79 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v76 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DG_EncryptionID?, DG_EncryptionID?));
  MEMORY[0x1F4188790](v9);
  int v82 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v77 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v83 = (uint64_t)&v67 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v80 = (uint64_t)&v67 - v16;
  uint64_t v17 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v78 = (uint64_t *)((char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DG_SequenceNumber?, DG_SequenceNumber?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  v84 = (uint64_t *)((char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v67 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v67 - v29;
  if ((specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v68 = v9;
  uint64_t v70 = v4;
  uint64_t v31 = type metadata accessor for DG_Datagram(0);
  uint64_t v32 = *(int *)(v31 + 28);
  uint64_t v72 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + v32, (uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v71 = v31;
  uint64_t v33 = *(int *)(v31 + 28);
  uint64_t v69 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + v33, (uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v34 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v22, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v34, &demangling cache variable for type metadata for DG_SequenceNumber?);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v35((uint64_t)v22, 1, v17) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
    if (v35(v34, 1, v17) == 1)
    {
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for DG_SequenceNumber?);
      uint64_t v36 = v70;
      goto LABEL_5;
    }
LABEL_12:
    os_log_t v56 = &demangling cache variable for type metadata for (DG_SequenceNumber?, DG_SequenceNumber?);
LABEL_22:
    uint64_t v62 = (uint64_t)v22;
    goto LABEL_23;
  }
  uint64_t v55 = v84;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v84, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if (v35(v34, 1, v17) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v55, type metadata accessor for DG_SequenceNumber);
    goto LABEL_12;
  }
  uint64_t v57 = v78;
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0(v34, (uint64_t)v78, type metadata accessor for DG_SequenceNumber);
  if (*v55 != *v57 || v55[1] != v57[1])
  {
    int v59 = type metadata accessor for DG_SequenceNumber;
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v57, type metadata accessor for DG_SequenceNumber);
    uint64_t v60 = &demangling cache variable for type metadata for DG_SequenceNumber?;
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
    uint64_t v61 = (uint64_t)v55;
LABEL_18:
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0(v61, v59);
    uint64_t v62 = (uint64_t)v22;
    os_log_t v56 = v60;
LABEL_23:
    outlined destroy of UUID?(v62, v56);
    goto LABEL_24;
  }
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  uint64_t v36 = v70;
  char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v57, type metadata accessor for DG_SequenceNumber);
  outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v55, type metadata accessor for DG_SequenceNumber);
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((v58 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_5:
  uint64_t v37 = v71;
  uint64_t v38 = v72;
  uint64_t v39 = v80;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v72 + *(int *)(v71 + 32), v80, &demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v40 = v69;
  uint64_t v41 = v83;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v69 + *(int *)(v37 + 32), v83, &demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v22 = v82;
  uint64_t v42 = (uint64_t)&v82[*(int *)(v68 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v39, (uint64_t)v82, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, v42, &demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  uint64_t v44 = v81;
  if (v43((uint64_t)v22, 1, v81) == 1)
  {
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
    if (v43(v42, 1, v44) == 1)
    {
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for DG_EncryptionID?);
      uint64_t v38 = v72;
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  uint64_t v63 = v77;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, v77, &demangling cache variable for type metadata for DG_EncryptionID?);
  if (v43(v42, 1, v44) == 1)
  {
    outlined destroy of UUID?(v83, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0(v63, type metadata accessor for DG_EncryptionID);
LABEL_21:
    os_log_t v56 = &demangling cache variable for type metadata for (DG_EncryptionID?, DG_EncryptionID?);
    goto LABEL_22;
  }
  uint64_t v65 = v76;
  _s14CopresenceCore17DG_SequenceNumberVWObTm_0(v42, v76, type metadata accessor for DG_EncryptionID);
  if ((specialized static Data.== infix(_:_:)(*(void *)v63, *(void *)(v63 + 8), *(void *)v65, *(void *)(v65 + 8)) & 1) == 0)
  {
    int v59 = type metadata accessor for DG_EncryptionID;
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0(v65, type metadata accessor for DG_EncryptionID);
    uint64_t v60 = &demangling cache variable for type metadata for DG_EncryptionID?;
    outlined destroy of UUID?(v83, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
    uint64_t v61 = v63;
    goto LABEL_18;
  }
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0(v65, type metadata accessor for DG_EncryptionID);
  outlined destroy of UUID?(v83, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
  _s14CopresenceCore17DG_SequenceNumberVWOhTm_0(v63, type metadata accessor for DG_EncryptionID);
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((v66 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_8:
  if (*(void *)(v38 + 16) != *(void *)(v40 + 16))
  {
LABEL_24:
    char v53 = 0;
    return v53 & 1;
  }
  uint64_t v45 = v36;
  uint64_t v46 = v71;
  uint64_t v47 = v38 + *(int *)(v71 + 24);
  uint64_t v48 = v75;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  os_log_t v50 = v73;
  v49(v73, v47, v45);
  uint64_t v51 = v40 + *(int *)(v46 + 24);
  uint64_t v52 = v74;
  v49(v74, v51, v45);
  lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
  v54(v52, v45);
  v54(v50, v45);
  return v53 & 1;
}

uint64_t lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DG_Datagram()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
}

uint64_t base witness table accessor for Message in DG_Datagram()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
}

uint64_t base witness table accessor for Hashable in DG_Datagram()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
}

uint64_t base witness table accessor for Equatable in DG_Datagram()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (void (*)(uint64_t))type metadata accessor for DG_Datagram);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
}

uint64_t base witness table accessor for Message in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
}

uint64_t base witness table accessor for Hashable in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
}

uint64_t base witness table accessor for Equatable in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
}

uint64_t base witness table accessor for Message in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
}

uint64_t base witness table accessor for Hashable in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
}

uint64_t base witness table accessor for Equatable in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
}

uint64_t *initializeBufferWithCopyOfBuffer for DG_Datagram(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = (_OWORD *)((char *)a1 + v14);
    uint64_t v16 = (_OWORD *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for DG_SequenceNumber(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      _OWORD *v15 = *v16;
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = type metadata accessor for DG_EncryptionID(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = *v23;
      unint64_t v28 = v23[1];
      outlined copy of Data._Representation(*v23, v28);
      *uint64_t v22 = v27;
      v22[1] = v28;
      v13((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
  }
  return a1;
}

uint64_t destroy for DG_Datagram(uint64_t a1, int *a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for DG_SequenceNumber(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)) {
    v12(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for DG_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v8, *(void *)(v8 + 8));
    uint64_t v11 = v8 + *(int *)(v9 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t *initializeWithCopy for DG_Datagram(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    _OWORD *v14 = *v15;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = *v21;
    unint64_t v26 = v21[1];
    outlined copy of Data._Representation(*v21, v26);
    *uint64_t v20 = v25;
    v20[1] = v26;
    v12((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t *assignWithCopy for DG_Datagram(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v41 = v13;
  uint64_t v39 = *(void (**)(char *, char *))(v40 + 24);
  v39(v11, v12);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v15, type metadata accessor for DG_SequenceNumber);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = *((void *)v16 + 1);
  ((void (*)(char *, char *, uint64_t))v39)(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v41);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v27 = *(void *)(v26 - 8);
  unint64_t v28 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v35 = *v25;
      unint64_t v36 = v25[1];
      outlined copy of Data._Representation(*v25, v36);
      uint64_t v37 = *v24;
      unint64_t v38 = v24[1];
      *uint64_t v24 = v35;
      v24[1] = v36;
      outlined consume of Data._Representation(v37, v38);
      ((void (*)(char *, char *, uint64_t))v39)((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v41);
      return a1;
    }
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v24, type metadata accessor for DG_EncryptionID);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v24, v25, *(void *)(*(void *)(v33 - 8) + 64));
    return a1;
  }
  uint64_t v31 = *v25;
  unint64_t v32 = v25[1];
  outlined copy of Data._Representation(*v25, v32);
  *uint64_t v24 = v31;
  v24[1] = v32;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v41);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t initializeWithTake for DG_Datagram(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    _OWORD *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t *assignWithTake for DG_Datagram(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v34 + 40);
  v33(v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for DG_SequenceNumber(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v13, type metadata accessor for DG_SequenceNumber);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  ((void (*)(char *, char *, uint64_t))v33)(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v35);
LABEL_7:
  uint64_t v21 = a3[8];
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = type metadata accessor for DG_EncryptionID(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v31 = *v22;
      unint64_t v32 = v22[1];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      outlined consume of Data._Representation(v31, v32);
      ((void (*)(char *, char *, uint64_t))v33)((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v35);
      return a1;
    }
    _s14CopresenceCore17DG_SequenceNumberVWOhTm_0((uint64_t)v22, type metadata accessor for DG_EncryptionID);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v35);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DG_Datagram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10B6A08);
}

uint64_t sub_1B10B6A08(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for DG_Datagram(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10B6BA8);
}

char *sub_1B10B6BA8(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[8]];
  return (char *)v15(v17, a2, a2, v16);
}

void type metadata completion function for DG_Datagram()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DG_SequenceNumber?(319, &lazy cache variable for type metadata for DG_SequenceNumber?, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DG_SequenceNumber?(319, &lazy cache variable for type metadata for DG_EncryptionID?, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for DG_SequenceNumber?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for DG_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10B6EEC);
}

uint64_t sub_1B10B6EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DG_SequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10B6F70);
}

uint64_t sub_1B10B6F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DG_SequenceNumber()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DG_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10B7094);
}

uint64_t sub_1B10B7094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DG_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10B7164);
}

void *sub_1B10B7164(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for DG_EncryptionID()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation4DataV_SSs5NeverOTg546_sSS14CopresenceCoreE5asHexSSyFSSs5UInt8VXEfU_Tf1cn_nTm(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      uint64_t v29 = MEMORY[0x1E4FBC860];
      int64_t v7 = v4 & ~(v4 >> 63);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
      uint64_t v3 = v29;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = __DataStorage._bytes.getter();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = __DataStorage._bytes.getter();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_1B1138A80;
        *(void *)(v16 + 56) = MEMORY[0x1E4FBC358];
        *(void *)(v16 + 64) = MEMORY[0x1E4FBC3B0];
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = String.init(format:_:)();
        uint64_t v18 = v17;
        uint64_t v29 = v3;
        unint64_t v20 = *(void *)(v3 + 16);
        unint64_t v19 = *(void *)(v3 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v3 = v29;
        }
        *(void *)(v3 + 16) = v20 + 1;
        uint64_t v21 = v3 + 16 * v20;
        *(void *)(v21 + 32) = v2;
        *(void *)(v21 + 40) = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

Swift::String_optional __swiftcall Data.asBase64()()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v1 = [(objc_class *)isa tu_URLSafeBase64EncodedString];

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result.value._object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

Swift::String_optional __swiftcall String.asBase64()()
{
  unint64_t v2 = v1;
  unint64_t v3 = v0;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized Data.init<A>(_:)(v3, v2);
  unint64_t v6 = v5;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v4, v6);
  id v8 = [(objc_class *)isa tu_URLSafeBase64EncodedString];

  if (v8)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = v9;
  char v13 = v11;
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

Swift::String __swiftcall String.asHex()()
{
  unint64_t v2 = v1;
  unint64_t v3 = v0;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized Data.init<A>(_:)(v3, v2);
  unint64_t v6 = v5;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation4DataV_SSs5NeverOTg546_sSS14CopresenceCoreE5asHexSSyFSSs5UInt8VXEfU_Tf1cn_nTm(v4, v5);
  outlined consume of Data._Representation(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = v7;
  uint64_t v11 = v9;
  result._object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

Swift::String __swiftcall Data.asHex()()
{
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation4DataV_SSs5NeverOTg546_sSS14CopresenceCoreE5asHexSSyFSSs5UInt8VXEfU_Tf1cn_nTm(v0, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = v2;
  unint64_t v6 = v4;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t Resettable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - v8, v2, v6);
  uint64_t v10 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, v5);
  }
  Resettable.initialize()(a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Resettable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

Swift::Void __swiftcall Resettable.reset()()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v11[-v6];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(&v11[-v6], v2, v4);
  uint64_t v12 = v3;
  char v13 = v2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Resettable.reset(), (uint64_t)v11, MEMORY[0x1E4FBC248], v8, v9, (uint64_t)v14);
  uint64_t v10 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v10(v7, v4);
  v10(v2, v4);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t Resettable.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t Resettable.initialize()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void (**)(uint64_t))(v2 + *(int *)(result + 28));
  if (v4)
  {
    uint64_t v5 = v2;
    uint64_t v6 = result;
    uint64_t v7 = swift_retain();
    v4(v7);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);
    uint64_t v8 = *(void *)(v6 + 16);
    uint64_t v9 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v5, v9);
    uint64_t v11 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v5, a2, v8);
    uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56);
    return v10(v5, 0, 1, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Resettable.initializer.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 28));
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v2);
  return v2;
}

uint64_t Resettable.initializer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 28));
  uint64_t result = _sxRi_zRi0_zlyytIseghHr_SgWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Resettable.initializer.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for Resettable.onReset : <A>Resettable<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Resettable() + 32));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6)
  {
    uint64_t v9 = (uint64_t (*)())swift_allocObject();
    *((void *)v9 + 2) = v5;
    *((void *)v9 + 3) = v7;
    *((void *)v9 + 4) = v8;
    uint64_t v10 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  *a4 = v10;
  a4[1] = v9;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v7);
}

uint64_t key path setter for Resettable.onReset : <A>Resettable<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1)
  {
    uint64_t v8 = (void *)swift_allocObject();
    _OWORD v8[2] = v5;
    v8[3] = v6;
    v8[4] = v7;
    uint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Resettable() + 32));
  uint64_t v11 = *v10;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v6);
  uint64_t result = _sxRi_zRi0_zlyytIseghHr_SgWOe(v11);
  uint64_t *v10 = (uint64_t)v9;
  v10[1] = (uint64_t)v8;
  return result;
}

uint64_t Resettable.onReset.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v2);
  return v2;
}

uint64_t Resettable.onReset.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(a3 + 32));
  uint64_t result = _sxRi_zRi0_zlyytIseghHr_SgWOe(*v6);
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Resettable.onReset.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t closure #1 in Resettable.reset()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = type metadata accessor for Resettable();
  uint64_t v7 = *(void (**)(uint64_t))(a2 + *(int *)(result + 32));
  if (v7)
  {
    swift_retain();
    v7(a1);
    uint64_t result = _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v7);
  }
  *a3 = v7 == 0;
  return result;
}

uint64_t partial apply for closure #1 in Resettable.reset()@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in Resettable.reset()(a1, *(void *)(v2 + 24), a2);
}

uint64_t Resettable.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
  uint64_t result = type metadata accessor for Resettable();
  uint64_t v4 = (void *)(a2 + *(int *)(result + 28));
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = (void *)(a2 + *(int *)(result + 32));
  *uint64_t v5 = 0;
  v5[1] = 0;
  return result;
}

uint64_t type metadata accessor for Resettable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B10B8168()
{
  return 8;
}

void *sub_1B10B8174(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata instantiation function for Resettable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t type metadata completion function for Resettable()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Resettable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  int v8 = *(_DWORD *)(v6 + 80);
  if ((v8 & 0x1000F8) != 0 || ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    unint64_t v11 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v12 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
    }
    else
    {
      uint64_t v13 = *(void *)(v12 + 8);
      *(void *)unint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = v13;
      swift_retain();
    }
    unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v15 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
      return a1;
    }
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for Resettable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  uint64_t v6 = a1 + *(void *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84)) {
    ++v6;
  }
  size_t v7 = (void *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for Resettable(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  unint64_t v14 = ((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
    swift_retain();
  }
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v18 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v19 = *(void *)(v18 + 8);
    *(void *)unint64_t v17 = *(void *)v18;
    *(void *)(v17 + 8) = v19;
    swift_retain();
  }
  return a1;
}

void *assignWithCopy for Resettable(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = (void *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (unint64_t *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = *v16;
  if (*v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v19 = v16[1];
      void *v15 = v17;
      v15[1] = v19;
      swift_retain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v16[1];
      void *v15 = v17;
      v15[1] = v18;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
LABEL_22:
  unint64_t v20 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (unint64_t *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      unint64_t v24 = v21[1];
      *unint64_t v20 = v22;
      v20[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_28:
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  if (v22 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  unint64_t v23 = v21[1];
  *unint64_t v20 = v22;
  v20[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for Resettable(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    size_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  size_t v13 = v12 + 7;
  unint64_t v14 = ((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
  }
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (uint64_t *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = *v18;
  if ((unint64_t)*v18 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v20 = v18[1];
    *(void *)unint64_t v17 = v19;
    *(void *)(v17 + 8) = v20;
  }
  return a1;
}

void *assignWithTake for Resettable(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = v13 + 7;
  unint64_t v15 = (void *)(((unint64_t)a1 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (unint64_t *)(((unint64_t)a2 + v14) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = *v16;
  if (*v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v19 = v16[1];
      void *v15 = v17;
      v15[1] = v19;
      goto LABEL_22;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v16[1];
      void *v15 = v17;
      v15[1] = v18;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
LABEL_22:
  uint64_t v20 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (unint64_t *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      unint64_t v24 = v21[1];
      *uint64_t v20 = v22;
      v20[1] = v24;
      return a1;
    }
LABEL_28:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  if (v22 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  unint64_t v23 = v21[1];
  *uint64_t v20 = v22;
  v20[1] = v23;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Resettable(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B10B8E6CLL);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_27:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v19 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    if ((v19 + 1) >= 2) {
      return v19;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for Resettable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a3)
  {
    unsigned int v13 = a3 - v10;
    if (((((v11 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((v11 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v16 = a2 - v10;
    }
    else {
      int v16 = 1;
    }
    if (((((v11 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v17 = ~v10 + a2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v16;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v12] = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x1B10B911CLL);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 < 0x7FFFFFFE)
        {
          uint64_t v21 = (void *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            void *v21 = 0;
            v21[1] = 0;
            *(_DWORD *)uint64_t v21 = a2 - 0x7FFFFFFF;
          }
          else
          {
            void *v21 = a2;
          }
        }
        else if (v9 >= a2)
        {
          unint64_t v22 = *(void (**)(void))(v7 + 56);
          v22();
        }
        else
        {
          if (v11 <= 3) {
            int v18 = ~(-1 << (8 * v11));
          }
          else {
            int v18 = -1;
          }
          if (v11)
          {
            int v19 = v18 & (~v9 + a2);
            if (v11 <= 3) {
              int v20 = v11;
            }
            else {
              int v20 = 4;
            }
            bzero(a1, v11);
            switch(v20)
            {
              case 2:
                *(_WORD *)a1 = v19;
                break;
              case 3:
                *(_WORD *)a1 = v19;
                a1[2] = BYTE2(v19);
                break;
              case 4:
                *(_DWORD *)a1 = v19;
                break;
              default:
                *a1 = v19;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_1B10B9154()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation4DataVSgG_14CopresenceCore11CP_KeyValueVs5NeverOTg5017_sSS10Foundation4e5VSg14f6Core11h1_ij27VIgggr_SS3key_AD5valuetAGs5k20OIegnrzr_TR04_s14c66p45PubSubTopicC14upsertMetadata_10completionySDym39Foundation4b40VSgG_ys6ResultOyytAA0cdE5C70OGctFyAA09e31_UpserteG7RequestVzXEfU0_AA0M9_fG12VSS_AItXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CP_KeyValue(0);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  MEMORY[0x1F4188790](v4);
  int v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (!v7) {
    return v8;
  }
  uint64_t v45 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  uint64_t v8 = v45;
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0;
  uint64_t v13 = a1 + 64;
  uint64_t v34 = a1 + 80;
  int64_t v35 = v7;
  uint64_t v36 = v10;
  uint64_t v37 = a1 + 64;
  uint64_t v38 = a1;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v11 >> 6;
    if ((*(void *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v10) {
      goto LABEL_24;
    }
    uint64_t v41 = v12;
    uint64_t v42 = 1 << v11;
    uint64_t v17 = *(void *)(a1 + 56);
    int v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v44 = v2;
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = (uint64_t *)(v17 + 16 * v11);
    uint64_t v23 = *v21;
    unint64_t v22 = v21[1];
    swift_bridgeObjectRetain();
    outlined copy of Data?(v23, v22);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v23, v22);
    swift_bridgeObjectRelease();
    uint64_t v24 = outlined consume of Data?(v23, v22);
    uint64_t v43 = &v33;
    MEMORY[0x1F4188790](v24);
    *(&v33 - 4) = v19;
    *(&v33 - 3) = v20;
    *(&v33 - 2) = v23;
    *(&v33 - 1) = v22;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, (void (*)(uint64_t))type metadata accessor for CP_KeyValue);
    uint64_t v25 = v44;
    static Message.with(_:)();
    uint64_t v2 = v25;
    swift_bridgeObjectRelease();
    outlined consume of Data?(v23, v22);
    uint64_t v45 = v8;
    unint64_t v27 = *(void *)(v8 + 16);
    unint64_t v26 = *(void *)(v8 + 24);
    if (v27 >= v26 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      uint64_t v8 = v45;
    }
    *(void *)(v8 + 16) = v27 + 1;
    uint64_t result = _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v27, type metadata accessor for CP_KeyValue);
    a1 = v38;
    int64_t v14 = 1 << *(unsigned char *)(v38 + 32);
    if (v11 >= v14) {
      goto LABEL_25;
    }
    uint64_t v13 = v37;
    uint64_t v28 = *(void *)(v37 + 8 * v16);
    if ((v28 & v42) == 0) {
      goto LABEL_26;
    }
    LODWORD(v10) = v36;
    if (*(_DWORD *)(v38 + 36) != v36) {
      goto LABEL_27;
    }
    unint64_t v29 = v28 & (-2 << (v11 & 0x3F));
    if (v29)
    {
      int64_t v14 = __clz(__rbit64(v29)) | v11 & 0xFFFFFFFFFFFFFFC0;
      int64_t v15 = v35;
    }
    else
    {
      unint64_t v30 = v16 + 1;
      unint64_t v31 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v35;
      if (v16 + 1 < v31)
      {
        unint64_t v32 = *(void *)(v37 + 8 * v30);
        if (v32)
        {
LABEL_20:
          int64_t v14 = __clz(__rbit64(v32)) + (v30 << 6);
        }
        else
        {
          while (v31 - 2 != v16)
          {
            unint64_t v32 = *(void *)(v34 + 8 * v16++);
            if (v32)
            {
              unint64_t v30 = v16 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v12 = v41 + 1;
    uint64_t v11 = v14;
    if (v41 + 1 == v15) {
      return v8;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64VAGG_14CopresenceCore17CP_SequenceNumberVs5NeverOTg504_ss6d5VAB14e6Core17g1_hi27VIgyyr_AB3key_AB5valuetAEs5J215OIegnrzr_TR04_s14b115Core11PubSubTopicC20setupSubscribeStream33_6FF60077F0B19FDD9659960D5DD0DECCLL05reuseH014isFirstAttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v6) {
    return v7;
  }
  uint64_t v33 = v1;
  uint64_t v34 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v7 = v34;
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  uint64_t v10 = result;
  uint64_t v11 = 0;
  uint64_t v12 = a1 + 64;
  uint64_t v27 = a1 + 80;
  int64_t v28 = v6;
  uint64_t v29 = v9;
  uint64_t v30 = a1 + 64;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v15 = (unint64_t)v10 >> 6;
    if ((*(void *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v9) {
      goto LABEL_24;
    }
    MEMORY[0x1F4188790](result);
    *(&v26 - 2) = v17;
    *(&v26 - 1) = v16;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
    uint64_t v18 = v33;
    static Message.with(_:)();
    uint64_t v33 = v18;
    uint64_t v34 = v7;
    unint64_t v20 = *(void *)(v7 + 16);
    unint64_t v19 = *(void *)(v7 + 24);
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      uint64_t v7 = v34;
    }
    *(void *)(v7 + 16) = v20 + 1;
    uint64_t result = _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v5, v7+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v20, type metadata accessor for CP_SequenceNumber);
    int64_t v13 = 1 << *(unsigned char *)(a1 + 32);
    if (v10 >= v13) {
      goto LABEL_25;
    }
    uint64_t v12 = v30;
    uint64_t v21 = *(void *)(v30 + 8 * v15);
    if ((v21 & (1 << v10)) == 0) {
      goto LABEL_26;
    }
    LODWORD(v9) = v29;
    if (*(_DWORD *)(a1 + 36) != v29) {
      goto LABEL_27;
    }
    unint64_t v22 = v21 & (-2 << (v10 & 0x3F));
    if (v22)
    {
      int64_t v13 = __clz(__rbit64(v22)) | v10 & 0xFFFFFFFFFFFFFFC0;
      int64_t v14 = v28;
    }
    else
    {
      unint64_t v23 = v15 + 1;
      unint64_t v24 = (unint64_t)(v13 + 63) >> 6;
      int64_t v14 = v28;
      if (v15 + 1 < v24)
      {
        unint64_t v25 = *(void *)(v30 + 8 * v23);
        if (v25)
        {
LABEL_20:
          int64_t v13 = __clz(__rbit64(v25)) + (v23 << 6);
        }
        else
        {
          while (v24 - 2 != v15)
          {
            unint64_t v25 = *(void *)(v27 + 8 * v15++);
            if (v25)
            {
              unint64_t v23 = v15 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v11;
    uint64_t v10 = v13;
    if (v11 == v14) {
      return v7;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t static TopicCatchupError.== infix(_:_:)()
{
  return 1;
}

void TopicCatchupError.hash(into:)()
{
}

Swift::Int TopicCatchupError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t PubSubTopic.Participant.participantID.getter()
{
  return *(void *)v0;
}

uint64_t PubSubTopic.Participant.participantID.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*PubSubTopic.Participant.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Participant.isSaltVerified.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t PubSubTopic.Participant.isSaltVerified.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*PubSubTopic.Participant.isSaltVerified.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t PubSubTopic.Participant.description.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0xD000000000000012;
  v3._object = (void *)0x80000001B11625A0;
  String.append(_:)(v3);
  if (v1) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v1) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD000000000000010;
}

uint64_t static PubSubTopic.Participant.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t PubSubTopic.Participant.init(participantID:isSaltVerified:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = a2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.Participant(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t PubSubTopic.Configuration.publishPayloadMaxSizeBytes.getter()
{
  return *(void *)v0;
}

uint64_t PubSubTopic.Configuration.publishPayloadMaxSizeBytes.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.publishPayloadMaxSizeBytes.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.publishQueueMaxSize.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PubSubTopic.Configuration.publishQueueMaxSize.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.publishQueueMaxSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.decryptionQueueMaxSize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PubSubTopic.Configuration.decryptionQueueMaxSize.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.decryptionQueueMaxSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.rpcStreamMaxTries.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PubSubTopic.Configuration.rpcStreamMaxTries.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.rpcStreamMaxTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.rpcStreamRetryInterval.getter()
{
  return *(double *)(v0 + 32);
}

void PubSubTopic.Configuration.rpcStreamRetryInterval.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*PubSubTopic.Configuration.rpcStreamRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.refreshDataCryptorMaxTries.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t PubSubTopic.Configuration.refreshDataCryptorMaxTries.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.refreshDataCryptorMaxTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.refreshDataCryptorInterval.getter()
{
  return *(double *)(v0 + 48);
}

void PubSubTopic.Configuration.refreshDataCryptorInterval.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*PubSubTopic.Configuration.refreshDataCryptorInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.gracefulShutdownWindow.getter()
{
  return *(double *)(v0 + 56);
}

void PubSubTopic.Configuration.gracefulShutdownWindow.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*PubSubTopic.Configuration.gracefulShutdownWindow.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.init()@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B11485B0;
  *(_OWORD *)(a1 + 16) = xmmword_1B11485C0;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(void *)(a1 + 40) = 3;
  double result = 10.0;
  *(_OWORD *)(a1 + 48) = xmmword_1B11485D0;
  return result;
}

uint64_t default argument 0 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 0x10000;
}

uint64_t default argument 1 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1000;
}

uint64_t default argument 2 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1000;
}

uint64_t default argument 3 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 2;
}

double default argument 4 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1.0;
}

uint64_t default argument 5 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 3;
}

double default argument 6 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 10.0;
}

double default argument 7 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1.0;
}

uint64_t PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(double *)(a6 + 32) = a7;
  *(void *)(a6 + 40) = a5;
  *(double *)(a6 + 48) = a8;
  *(double *)(a6 + 56) = a9;
  return result;
}

uint64_t PubSubTopic.Message.data.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t PubSubTopic.Message.participants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.Message.seqNum.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PubSubTopic.Message.init(data:participants:seqNum:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  return specialized static PubSubTopic.ClosedReason.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t PubSubTopic.Configuration.init(proto:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (!v4) {
    goto LABEL_6;
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(result + 16);
    if (v5)
    {
      while (v5 < 0)
      {
        __break(1u);
LABEL_6:
        uint64_t v4 = 1000;
        uint64_t v5 = *(void *)(result + 16);
        if (!v5) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      uint64_t v5 = 1000;
    }
    unsigned int v7 = *(_DWORD *)(result + 28);
    unsigned int v6 = *(_DWORD *)(result + 32);
    unsigned int v8 = *(_DWORD *)(result + 24);
    if (v7) {
      double v9 = (double)v7 / 1000.0;
    }
    else {
      double v9 = 1.0;
    }
    if (v6) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = 3;
    }
    if (v8) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 2;
    }
    if (v3) {
      uint64_t v12 = v3;
    }
    else {
      uint64_t v12 = 0x10000;
    }
    uint64_t v13 = *(void *)(result + 36);
    double result = outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(result, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    v14.i64[0] = v13;
    v14.i64[1] = HIDWORD(v13);
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v11;
    *(double *)(a2 + 32) = v9;
    *(void *)(a2 + 40) = v10;
    *(int8x16_t *)(a2 + 48) = vbslq_s8((int8x16_t)vceqzq_s64(v14), (int8x16_t)xmmword_1B11485D0, (int8x16_t)vcvtq_f64_u64((uint64x2_t)v14));
  }
  return result;
}

uint64_t PubSubTopic.ReceivedRecord.publisherID.getter()
{
  return *(void *)v0;
}

uint64_t PubSubTopic.ReceivedRecord.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t PubSubTopic.ReceivedRecord.topicName.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PubSubTopic.ReceivedRecord.toParticipantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.ReceivedRecord.init(from:withDecryptedData:withTopic:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (void **)((char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (uint64_t *)((char *)&v33 - v19);
  uint64_t v33 = a5 + 7;
  swift_weakInit();
  uint64_t v21 = *(int *)(type metadata accessor for CP_Record(0) + 36);
  uint64_t v36 = a1;
  uint64_t v22 = a1 + v21;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + v21, (uint64_t)v13, &demangling cache variable for type metadata for CP_SequenceNumber?);
  unint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v23(v13, 1, v14) == 1)
  {
    *unint64_t v20 = 0;
    v20[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v13, (uint64_t)v20, type metadata accessor for CP_SequenceNumber);
  }
  uint64_t v24 = *v20;
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v20, type metadata accessor for CP_SequenceNumber);
  *a5 = v24;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v22, (uint64_t)v11, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if (v23(v11, 1, v14) == 1)
  {
    void *v18 = 0;
    v18[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v11, (uint64_t)v18, type metadata accessor for CP_SequenceNumber);
  }
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  uint64_t v27 = v34;
  uint64_t v28 = v18[1];
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v18, type metadata accessor for CP_SequenceNumber);
  a5[1] = v28;
  a5[2] = v27;
  uint64_t v29 = *(void *)(a4 + 16);
  uint64_t v30 = *(void *)(a4 + 24);
  a5[3] = v25;
  a5[4] = v29;
  a5[5] = v30;
  uint64_t v31 = *(void *)(v26 + 32);
  if (*(void *)(v31 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t v31 = 0;
  }
  swift_bridgeObjectRetain();
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v26, type metadata accessor for CP_Record);
  a5[6] = v31;
  swift_weakAssign();
  return swift_release();
}

Swift::Void __swiftcall PubSubTopic.ReceivedRecord.acknowledge()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = Strong;
    uint64_t v25 = *(void *)(Strong + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)v35);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v35, v11 + 24);
    uint64_t v33 = partial apply for closure #1 in PubSubTopic.ReceivedRecord.acknowledge();
    uint64_t v34 = v11;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v30 = 1107296256;
    uint64_t v31 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v32 = &block_descriptor_34;
    uint64_t v12 = _Block_copy(&aBlock);
    uint64_t v24 = v5;
    uint64_t v13 = v12;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v28[0] = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v8, v4, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v24);
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)log);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)v35);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)&aBlock);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)v28);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v27 = v18;
      *(_DWORD *)uint64_t v17 = 134218498;
      uint64_t v19 = v35[0];
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v35);
      uint64_t v26 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2048;
      uint64_t v20 = v30;
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)&aBlock);
      uint64_t v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 22) = 2080;
      uint64_t v21 = v28[4];
      unint64_t v22 = v28[5];
      swift_bridgeObjectRetain();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v28);
      _os_log_impl(&dword_1B0DF7000, v15, v16, "Ignoring ack, topic released publisherID=%llu seqNum=%llu topic=%s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
    else
    {
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)&aBlock);
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v35);
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v28);
    }
  }
}

void PubSubTopic.ack(publisherID:seqNum:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CP_SubscribeRequest(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 3u)
  {
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)log);
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 134218240;
        v53[0] = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2048;
        v53[0] = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B0DF7000, v16, v17, "Ignoring ack, shutting down publisherID=%llu seqNum=%llu", (uint8_t *)v18, 0x16u);
        MEMORY[0x1B3EA39E0](v18, -1, -1);
      }

      return;
    }
LABEL_39:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v19 = v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked;
  swift_beginAccess();
  uint64_t v20 = *(void *)v19;
  if (!*(void *)(*(void *)v19 + 16) || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v22 & 1) == 0))
  {
    uint64_t v24 = swift_endAccess();
    goto LABEL_15;
  }
  unint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
  uint64_t v24 = swift_endAccess();
  if (v23 < a2)
  {
LABEL_15:
    MEMORY[0x1F4188790](v24);
    *(&v50 - 2) = a1;
    *(&v50 - 1) = a2;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
    static Message.with(_:)();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52[0] = *(void *)v19;
    *(void *)uint64_t v19 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a1, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v19 = v52[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)log);
    swift_retain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      v53[0] = v50;
      *(_DWORD *)uint64_t v36 = 134218498;
      v52[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2048;
      v52[0] = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 22) = 2080;
      uint64_t v37 = *(void *)(v3 + 16);
      unint64_t v38 = *(void *)(v3 + 24);
      swift_bridgeObjectRetain();
      v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v34, v35, "Sending ack publisherID=%llu seqNum=%llu topic=%s", (uint8_t *)v36, 0x20u);
      uint64_t v39 = v50;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v39, -1, -1);
      MEMORY[0x1B3EA39E0](v36, -1, -1);
    }
    else
    {

      swift_release();
    }
    uint64_t v40 = (uint64_t *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue);
    swift_beginAccess();
    uint64_t v41 = *v40;
    uint64_t v42 = MEMORY[0x1E4FBC860];
    uint64_t v54 = MEMORY[0x1E4FBC860];
    uint64_t v43 = *(void *)(v41 + 16);
    swift_bridgeObjectRetain();
    if (!v43)
    {
LABEL_35:
      swift_bridgeObjectRelease();
      uint64_t *v40 = v42;
      swift_bridgeObjectRelease();
      swift_retain();
      uint64_t v49 = (uint64_t)v51;
      PassthroughSubject.send(_:)();
      swift_release();
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v49, type metadata accessor for CP_SubscribeRequest);
      return;
    }
    uint64_t v50 = v3;
    unint64_t v44 = 0;
    uint64_t v45 = v41 + 32;
    while (v44 < *(void *)(v41 + 16))
    {
      outlined init with copy of PubSubTopic.ReceivedRecord(v45, (uint64_t)v53);
      if (v53[0] != a1 || v53[1] > a2)
      {
        outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v53, (uint64_t)v52);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
        }
        uint64_t v42 = v54;
        unint64_t v48 = *(void *)(v54 + 16);
        unint64_t v47 = *(void *)(v54 + 24);
        if (v48 >= v47 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
          uint64_t v42 = v54;
        }
        *(void *)(v42 + 16) = v48 + 1;
        outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v52, v42 + (v48 << 6) + 32);
      }
      else
      {
        outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v53);
      }
      ++v44;
      v45 += 64;
      if (v43 == v44)
      {
        uint64_t v42 = v54;
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_38;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)log);
  swift_retain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v53[0] = v29;
    *(_DWORD *)uint64_t v28 = 134218754;
    v52[0] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2048;
    v52[0] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 22) = 2048;
    v52[0] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 32) = 2080;
    uint64_t v30 = PubSubTopic.description.getter();
    v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v26, v27, "Ignoring ack, publisherID=%llu currentSeqNum=%llu <= previousSeqNum=%llu %s", (uint8_t *)v28, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v29, -1, -1);
    MEMORY[0x1B3EA39E0](v28, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t protocol witness for PubSubTopicRecord.data.getter in conformance PubSubTopic.ReceivedRecord()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t protocol witness for PubSubTopicRecord.toParticipantIDs.getter in conformance PubSubTopic.ReceivedRecord()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.SendItem.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t PubSubTopic.SendItem.toParticipantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.SendItem.seqNum.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t PubSubTopic.SendItem.seqNum.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 40) = a1;
  *(unsigned char *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*PubSubTopic.SendItem.seqNum.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopic.SendItem.previousSeqNumUnacked.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 56);
}

uint64_t PubSubTopic.SendItem.previousSeqNumUnacked.setter(uint64_t a1, char a2)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v2 + 56) = a1;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*PubSubTopic.SendItem.previousSeqNumUnacked.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopic.SendItem.publishedAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

uint64_t PubSubTopic.SendItem.publishedAt.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t (*PubSubTopic.SendItem.publishedAt.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopic.SendItem.__allocating_init(data:to:previousSeqNumUnacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 40) = 0;
  *(unsigned char *)(v10 + 48) = 1;
  *(void *)(v10 + 56) = 0;
  *(unsigned char *)(v10 + 64) = 1;
  uint64_t v11 = v10 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 32) = a3;
  swift_beginAccess();
  *(void *)(v10 + 56) = a4;
  *(unsigned char *)(v10 + 64) = a5 & 1;
  return v10;
}

uint64_t PubSubTopic.SendItem.init(data:to:previousSeqNumUnacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v5 + 40) = 0;
  *(unsigned char *)(v5 + 48) = 1;
  *(void *)(v5 + 56) = 0;
  *(unsigned char *)(v5 + 64) = 1;
  uint64_t v11 = v5 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(void *)(v5 + 32) = a3;
  swift_beginAccess();
  *(void *)(v5 + 56) = a4;
  *(unsigned char *)(v5 + 64) = a5 & 1;
  return v5;
}

uint64_t PubSubTopic.SendItem.deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return v0;
}

uint64_t PubSubTopic.SendItem.__deallocating_deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.SendItem(uint64_t *a1, uint64_t *a2)
{
  return specialized static PubSubTopic.SendItem.== infix(_:_:)(*a1, *a2);
}

uint64_t PubSubTopic.State.description.getter()
{
  uint64_t result = 0x676E697472617453;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x676E696863746143;
      break;
    case 2:
      uint64_t result = 0x7964616552;
      break;
    case 3:
      uint64_t result = 0x676E697474756853;
      break;
    case 4:
      uint64_t result = 0x6E776F6474756853;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static PubSubTopic.State.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PubSubTopic.State.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static PubSubTopic.State.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int PubSubTopic.State.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PubSubTopic.State()
{
  uint64_t result = 0x676E697472617453;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x676E696863746143;
      break;
    case 2:
      uint64_t result = 0x7964616552;
      break;
    case 3:
      uint64_t result = 0x676E697474756853;
      break;
    case 4:
      uint64_t result = 0x6E776F6474756853;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PubSubTopic.PrimaryStreamState.description.getter(char a1)
{
  uint64_t result = 0x696C616974696E49;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x676E697972746552;
      break;
    case 2:
      uint64_t result = 0x7964616552;
      break;
    case 3:
      uint64_t result = 0x6465736F6C43;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static PubSubTopic.PrimaryStreamState.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PubSubTopic.PrimaryStreamState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int PubSubTopic.PrimaryStreamState.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PubSubTopic.PrimaryStreamState()
{
  uint64_t result = 0x696C616974696E49;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x676E697972746552;
      break;
    case 2:
      uint64_t result = 0x7964616552;
      break;
    case 3:
      uint64_t result = 0x6465736F6C43;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PubSubTopic.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 PubSubTopic.config.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v1 + 72);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v3;
  __n128 result = *(__n128 *)(v1 + 80);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t PubSubTopic.localParticipantID.getter()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t PubSubTopic.service.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 96, a1);
}

uint64_t PubSubTopic.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v0 + 136);
}

uint64_t PubSubTopic.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 144) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PubSubTopic.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3EA3B30](v1 + 136);
  uint64_t v5 = *(void *)(v1 + 144);
  v3[3] = v4;
  v3[4] = v5;
  return PubSubTopic.delegate.modify;
}

void PubSubTopic.delegate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 144) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t PubSubTopic.firstSubscribeAttemptAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

uint64_t PubSubTopic.firstSubscribeAttemptAt.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t (*PubSubTopic.firstSubscribeAttemptAt.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

id PubSubTopic.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
}

uint64_t PubSubTopic.reporter.getter()
{
  return swift_retain();
}

uint64_t PubSubTopic.reporterTag.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PubSubTopic.dataCryptorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider, a1);
}

uint64_t PubSubTopic.subscribers.getter()
{
  return PubSubTopic.subscribers.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for PubSubTopic.subscribers : PubSubTopic@<X0>(void *a1@<X8>)
{
  return key path getter for PubSubTopic.subscribers : PubSubTopic(a1);
}

{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  __n128 result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PubSubTopic.subscribers : PubSubTopic()
{
  return key path setter for PubSubTopic.subscribers : PubSubTopic();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t PubSubTopic.subscribers.setter()
{
  return static Published.subscript.setter();
}

void (*PubSubTopic.subscribers.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t PubSubTopic.$subscribers.getter()
{
  return swift_endAccess();
}

uint64_t key path getter for PubSubTopic.$subscribers : PubSubTopic()
{
  return swift_endAccess();
}

uint64_t key path setter for PubSubTopic.$subscribers : PubSubTopic(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t PubSubTopic.$subscribers.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PubSubTopic.$subscribers.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscribers;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

uint64_t PubSubTopic.subscriberSeqNums.getter()
{
  return PubSubTopic.subscribers.getter();
}

uint64_t PubSubTopic.isAvailable.getter()
{
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t closure #1 in PubSubTopic.isAvailable.getter@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 3u;
  return result;
}

BOOL PubSubTopic.isAvailableUnsafe.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 3u;
}

uint64_t PubSubTopic.__allocating_init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  swift_allocObject();
  uint64_t v17 = specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  swift_unknownObjectRelease();
  return v17;
}

uint64_t PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11 = specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  swift_unknownObjectRelease();
  return v11;
}

uint64_t PubSubTopic.bootstrap()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    aBlock[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = *(void *)(v1 + 16);
    unint64_t v8 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Bootstrapping topic=%s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v9 = *(NSObject **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in PubSubTopic.bootstrap();
  *(void *)(v10 + 24) = v1;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = (uint64_t)&block_descriptor_112;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v11);
  _Block_release(v11);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v9) {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopic.__allocating_init(name:config:service:dataCryptorProvider:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7)
{
  uint64_t v13 = *(void *)(a3 + 32);
  uint64_t v14 = *(void *)(a3 + 40);
  long long v15 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v15;
  uint64_t v21 = v13;
  uint64_t v22 = v14;
  long long v23 = *(_OWORD *)(a3 + 48);
  outlined init with copy of UserNotificationCenter(a4, (uint64_t)v19);
  outlined init with copy of UserNotificationCenter(a5, (uint64_t)v18);
  swift_allocObject();
  uint64_t v16 = specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(a1, a2, v20, (uint64_t)v19, (uint64_t)v18, a6, a7, 0, 0, 0, 0);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v16;
}

uint64_t PubSubTopic.deinit()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeResponseCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeMissingEncryptionIDsCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeNotAuthorizedCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishResponseCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  uint64_t v2 = (void *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_upsertMetadataCancellables);
  swift_beginAccess();
  *uint64_t v2 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + 136);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt, (uint64_t *)&demangling cache variable for type metadata for Date?);

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscribers;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  outlined consume of PubSubTopic.ClosedReason?(*(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason), *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason + 8));
  uint64_t v5 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscriberSeqNums;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : UInt64]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PubSubTopic.__deallocating_deinit()
{
  PubSubTopic.deinit();
  return swift_deallocClassInstance();
}

void closure #1 in PubSubTopic.bootstrap()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  uint64_t v43 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v40 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  uint64_t v45 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v35 = v15;
  uint64_t v36 = v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = a1;
  uint64_t v19 = (void *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v20);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
  id v47 = *(id *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  id v22 = v47;
  uint64_t v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v23 = *(void *)(v38 - 8);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v39 = v23 + 56;
  v37(v10, 1, 1, v38);
  id v34 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
  v33[3] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v33[4] = MEMORY[0x1E4F1AAE8];
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
  v33[2] = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  Publisher.dropFirst(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>);
  uint64_t v24 = v35;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v24);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v25 = v19[3];
  uint64_t v26 = v19[4];
  __swift_project_boxed_opaque_existential_1(v19, v25);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
  os_log_type_t v27 = v34;
  id v47 = v34;
  v37(v10, 1, 1, v38);
  id v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  uint64_t v29 = v40;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>);
  unint64_t v31 = v41;
  uint64_t v30 = v42;
  Publisher.dropFirst(_:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v30);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>>);
  uint64_t v32 = v44;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v32);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(0, 1);
  PubSubTopic.setupPublishStream()();
}

uint64_t closure #1 in closure #1 in PubSubTopic.bootstrap()(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(a1);
    return swift_release();
  }
  return result;
}

void PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CP_PublishRequest(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v35 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (void *)((char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t v16 = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    MEMORY[0x1F4188790](v16);
    v34[-2] = v1;
    v34[-1] = a1;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
    static Message.with(_:)();
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)log);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
      swift_retain_n();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v37 = v21;
        *(_DWORD *)uint64_t v20 = 136315394;
        v34[1] = v20 + 4;
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        *(_WORD *)(v20 + 12) = 2080;
        uint64_t v24 = *(void *)(v1 + 16);
        unint64_t v25 = *(void *)(v1 + 24);
        swift_bridgeObjectRetain();
        uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v18, v19, "[Decrypt] Sending encryptionID, encryptionID=%s topic=%s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v21, -1, -1);
        MEMORY[0x1B3EA39E0](v20, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

        swift_release_n();
      }
      swift_retain();
      uint64_t v33 = (uint64_t)v35;
      PassthroughSubject.send(_:)();
      swift_release();
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v33, type metadata accessor for CP_PublishRequest);
      return;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)log);
  swift_retain();
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v37 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v31 = *(void *)(v2 + 16);
    unint64_t v32 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v27, v28, "[Decrypt] Skipping local-encryptionID-update, topic=%s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v30, -1, -1);
    MEMORY[0x1B3EA39E0](v29, -1, -1);
  }
  else
  {

    swift_release();
  }
}

uint64_t closure #2 in closure #1 in PubSubTopic.bootstrap()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PubSubTopic.onEncryptionIDsRefreshed()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PubSubTopic.onEncryptionIDsRefreshed()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
    uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
    if (one-time initialization token for log == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v35 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = MEMORY[0x1B3EA1D20](v16, v15);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v20 = *(void *)(v1 + 16);
    unint64_t v21 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v11, v12, "[Decrypt] Refreshed encryptionIDs, encryptionIDs=%s topic=%s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state))
  {
    PubSubTopic.processDecryptionQueue()();
  }
  else
  {
    char v22 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight);
    swift_retain();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    if (v22)
    {
      if (v25)
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v35 = v27;
        *(_DWORD *)uint64_t v26 = 136315138;
        uint64_t v28 = *(void *)(v1 + 16);
        unint64_t v29 = *(void *)(v1 + 24);
        swift_bridgeObjectRetain();
        uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v23, v24, "[Decrypt] Skipping retry, initialize-in-flight topic=%s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v27, -1, -1);
        MEMORY[0x1B3EA39E0](v26, -1, -1);
      }
      else
      {

        swift_release();
      }
      *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_cryptorUpdatedWhileInitializing) = 1;
    }
    else
    {
      if (v25)
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        uint64_t v35 = v31;
        *(_DWORD *)uint64_t v30 = 136315138;
        uint64_t v32 = *(void *)(v1 + 16);
        unint64_t v33 = *(void *)(v1 + 24);
        swift_bridgeObjectRetain();
        uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v23, v24, "[Decrypt] Retrying Subscribe stream, topic=%s", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v31, -1, -1);
        MEMORY[0x1B3EA39E0](v30, -1, -1);
      }
      else
      {

        swift_release();
      }
      *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 1;
      PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(1, 0);
    }
  }
}

void PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(int a1, int a2)
{
  uint64_t v3 = v2;
  int v106 = a2;
  LODWORD(v104) = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v4 - 8);
  v103 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for CP_SubscribeRequest(0);
  uint64_t v6 = MEMORY[0x1F4188790](v108);
  uint64_t v105 = (uint64_t)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v109 = (char *)&v92 - v8;
  uint64_t v111 = type metadata accessor for UUID();
  uint64_t v107 = *(void *)(v111 - 8);
  MEMORY[0x1F4188790](v111);
  v110 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v99 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>);
  uint64_t v101 = *(void *)(v12 - 8);
  uint64_t v102 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v100 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v95 = *(void *)(v98 - 8);
  MEMORY[0x1F4188790](v98);
  uint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_SubscribeRequest, Never>>);
  uint64_t v96 = *(void *)(v20 - 8);
  uint64_t v97 = v20;
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchPredicate();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (uint64_t *)((char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, *MEMORY[0x1E4FBCBF0], v23);
  id v94 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
LABEL_6:
    uint64_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)log);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      uint64_t v112 = v70;
      *(_DWORD *)uint64_t v69 = 136315394;
      swift_bridgeObjectRetain();
      id v114 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, (unint64_t)v15, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v69 + 12) = 2080;
      uint64_t v71 = PubSubTopic.description.getter();
      id v114 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v67, v68, "[Subscribe] Initializing, %s %s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy();
      uint64_t v73 = v70;
      uint64_t v17 = (uint64_t)v109;
      MEMORY[0x1B3EA39E0](v73, -1, -1);
      MEMORY[0x1B3EA39E0](v69, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v81 = v105;
    _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v17, v105, type metadata accessor for CP_SubscribeRequest);
    int v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = v81;
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      uint64_t v112 = v86;
      *(_DWORD *)uint64_t v85 = 136315138;
      uint64_t v87 = Message.debugDescription.getter();
      id v114 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = (uint64_t)v109;
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v84, type metadata accessor for CP_SubscribeRequest);
      _os_log_impl(&dword_1B0DF7000, v82, v83, "[Subscribe] Sending Initialize request=%s", v85, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v86, -1, -1);
      MEMORY[0x1B3EA39E0](v85, -1, -1);
    }
    else
    {
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v81, type metadata accessor for CP_SubscribeRequest);
    }

    if (v106)
    {
      uint64_t v89 = (uint64_t)v103;
      static Date.now.getter();
      uint64_t v90 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 0, 1, v90);
      uint64_t v91 = (uint64_t)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
      swift_beginAccess();
      outlined assign with take of Date?(v89, v91);
      swift_endAccess();
    }
    *((unsigned char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight) = 1;
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v17, type metadata accessor for CP_SubscribeRequest);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v110, v111);
    return;
  }
  *(void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeMissingEncryptionIDsCancellable) = 0;
  swift_release();
  *(void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeNotAuthorizedCancellable) = 0;
  swift_release();
  if (*((unsigned __int8 *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    if ((v104 & 1) == 0)
    {
      uint64_t v28 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInput;
      LOBYTE(v112) = 1;
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_SubscribeRequest, Never>);
      swift_allocObject();
      *(void *)((char *)v3 + v28) = PassthroughSubject.init()();
      swift_release();
      uint64_t v112 = *(void *)((char *)v3 + v28);
      uint64_t v29 = *MEMORY[0x1E4F1A900];
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
      uint64_t v93 = v16;
      v30(v19, v29, v16);
      uint64_t v31 = v95;
      uint64_t v32 = v98;
      (*(void (**)(char *, void, uint64_t))(v95 + 104))(v15, *MEMORY[0x1E4F1A918], v98);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<CP_SubscribeRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<CP_SubscribeRequest, Never>);
      swift_retain();
      Publisher.buffer(size:prefetch:whenFull:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v93);
      swift_release();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<PassthroughSubject<CP_SubscribeRequest, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_SubscribeRequest, Never>>);
      uint64_t v33 = v97;
      uint64_t v34 = Publisher.eraseToAnyPublisher()();
      (*(void (**)(char *, uint64_t))(v96 + 8))(v22, v33);
      uint64_t v35 = v3[15];
      uint64_t v36 = v3[16];
      __swift_project_boxed_opaque_existential_1(v3 + 12, v35);
      uint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, v35, v36);
      uint64_t v37 = v94;
      id v114 = v94;
      uint64_t v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      uint64_t v39 = (uint64_t)v99;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v99, 1, 1, v38);
      id v40 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_SubscribeResponse, PluginRpcError>);
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_SubscribeResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_SubscribeResponse, PluginRpcError>);
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
      uint64_t v41 = v100;
      Publisher.receive<A>(on:options:)();
      outlined destroy of UUID?(v39, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<CP_SubscribeResponse, PluginRpcError>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>);
      swift_retain_n();
      uint64_t v42 = v102;
      uint64_t v43 = Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v101 + 8))(v41, v42);
      *(void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeResponseCancellable) = v43;
      swift_release();
    }
    uint64_t v44 = (void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
    uint64_t v45 = *(void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
    uint64_t v46 = *(void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
    __swift_project_boxed_opaque_existential_1((void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v45);
    id v47 = v110;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
    uint64_t v48 = v44[3];
    uint64_t v49 = v44[4];
    __swift_project_boxed_opaque_existential_1(v44, v48);
    uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 24))(v48, v49);
    uint64_t v51 = MEMORY[0x1F4188790](v50);
    *(&v92 - 4) = (uint64_t)v3;
    *(&v92 - 3) = v51;
    *(&v92 - 2) = (uint64_t)v47;
    uint64_t v52 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
    uint64_t v17 = (uint64_t)v109;
    uint64_t v104 = v52;
    static Message.with(_:)();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v53 = v112;
    uint64_t v54 = v3[15];
    uint64_t v55 = v3[16];
    __swift_project_boxed_opaque_existential_1(v3 + 12, v54);
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
    uint64_t v57 = *(void *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v112 = v53;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v57, v56, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t v112 = 0;
    unint64_t v113 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v59._uint64_t countAndFlagsBits = 0x7165536E776F6E6BLL;
    v59._object = (void *)0xED00003D736D754ELL;
    String.append(_:)(v59);
    v60._uint64_t countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v61._object = (void *)0x80000001B1162A00;
    v61._uint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v61);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v62 = v111;
    v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._uint64_t countAndFlagsBits = 0x7470797263656420;
    v64._object = (void *)0xEF3D7344496E6F69;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = MEMORY[0x1B3EA1D20](v50, v62);
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v112;
    uint64_t v15 = (char *)v113;
    if (one-time initialization token for log == -1) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v74 = type metadata accessor for Logger();
  __swift_project_value_buffer(v74, (uint64_t)log);
  swift_retain_n();
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v112 = v78;
    *(_DWORD *)uint64_t v77 = 136315138;
    uint64_t v79 = PubSubTopic.description.getter();
    id v114 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, &v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v75, v76, "Skipping Subscribe stream setup, closing, %s", v77, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v78, -1, -1);
    MEMORY[0x1B3EA39E0](v77, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

void PubSubTopic.setupPublishStream()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v51 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_PublishResponse, PluginRpcError>, OS_dispatch_queue>);
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v52 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v6 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v46 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_PublishRequest, Never>>);
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (void *)((char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v19 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4FBCBF0], v15);
  id v48 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v20 = v1;
  if (*((unsigned __int8 *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    uint64_t v21 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishInput;
    LOBYTE(v56) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_PublishRequest, Never>);
    swift_allocObject();
    *(void *)((char *)v1 + v21) = PassthroughSubject.init()();
    swift_release();
    uint64_t v56 = *(void *)((char *)v1 + v21);
    v44[1] = v1[5];
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4F1A900], v8);
    char v22 = v46;
    uint64_t v23 = v47;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v46, *MEMORY[0x1E4F1A918], v47);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<CP_PublishRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<CP_PublishRequest, Never>);
    uint64_t v45 = v20;
    swift_retain();
    Publisher.buffer(size:prefetch:whenFull:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v23);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<PassthroughSubject<CP_PublishRequest, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_PublishRequest, Never>>);
    uint64_t v24 = v50;
    uint64_t v25 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v14, v24);
    uint64_t v26 = v45;
    uint64_t v27 = v45[15];
    uint64_t v28 = v45[16];
    __swift_project_boxed_opaque_existential_1(v45 + 12, v27);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 56))(v25, v27, v28);
    *((unsigned char *)v26 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) = 2;
    PubSubTopic.attemptSendQueueFlush()();
    uint64_t v30 = v48;
    id v55 = v48;
    uint64_t v56 = v29;
    uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v32 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v51, 1, 1, v31);
    id v33 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_PublishResponse, PluginRpcError>);
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_PublishResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_PublishResponse, PluginRpcError>);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
    uint64_t v34 = v52;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v32, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<CP_PublishResponse, PluginRpcError>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_PublishResponse, PluginRpcError>, OS_dispatch_queue>);
    swift_retain_n();
    uint64_t v35 = v54;
    uint64_t v36 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v35);
    *(void *)((char *)v26 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishResponseCancellable) = v36;
    swift_release();
    return;
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)log);
  swift_retain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    id v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v56 = v41;
    *(_DWORD *)id v40 = 136315138;
    uint64_t v42 = PubSubTopic.description.getter();
    id v55 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v38, v39, "Skipping Publish stream setup, closing, %s", v40, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v41, -1, -1);
    MEMORY[0x1B3EA39E0](v40, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t PubSubTopic.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0x7964616552;
  unint64_t v3 = 0xE500000000000000;
  v4._uint64_t countAndFlagsBits = 0x3D666C6573;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  *(void *)&long long v72 = 0x3D656D616ELL;
  *((void *)&v72 + 1) = 0xE500000000000000;
  uint64_t v5 = v0[2];
  uint64_t v6 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  *(void *)&long long v72 = 0x3D6574617473;
  *((void *)&v72 + 1) = 0xE600000000000000;
  uint64_t v8 = 0x7964616552;
  switch(*((unsigned char *)v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state))
  {
    case 1:
      unint64_t v3 = 0xEA00000000007055;
      uint64_t v8 = 0x676E696863746143;
      break;
    case 2:
      break;
    case 3:
      unint64_t v3 = 0xEC0000006E776F44;
      unsigned int v9 = 1953851475;
      goto LABEL_5;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v8 = 0x6E776F6474756853;
      break;
    default:
      unint64_t v3 = 0xE800000000000000;
      unsigned int v9 = 1918989395;
LABEL_5:
      uint64_t v8 = v9 | 0x676E697400000000;
      break;
  }
  unint64_t v10 = v3;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  Swift::String v69 = (Swift::String)v72;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(void *)&long long v72 = 0xD000000000000015;
  *((void *)&v72 + 1) = 0x80000001B11625C0;
  unint64_t v11 = 0xE500000000000000;
  uint64_t v12 = 0x7964616552;
  switch(*((unsigned char *)v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState))
  {
    case 1:
      unint64_t v11 = 0xE800000000000000;
      uint64_t v12 = 0x676E697972746552;
      break;
    case 2:
      break;
    case 3:
      unint64_t v11 = 0xE600000000000000;
      uint64_t v12 = 0x6465736F6C43;
      break;
    default:
      uint64_t v12 = 0x696C616974696E49;
      unint64_t v11 = 0xEC000000676E697ALL;
      break;
  }
  unint64_t v13 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  Swift::String v68 = (Swift::String)v72;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  *(void *)&long long v72 = 0xD000000000000013;
  *((void *)&v72 + 1) = 0x80000001B11625E0;
  uint64_t v14 = (void *)0xE500000000000000;
  switch(*((unsigned char *)v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState))
  {
    case 1:
      uint64_t v14 = (void *)0xE800000000000000;
      uint64_t v2 = 0x676E697972746552;
      break;
    case 2:
      break;
    case 3:
      uint64_t v14 = (void *)0xE600000000000000;
      uint64_t v2 = 0x6465736F6C43;
      break;
    default:
      uint64_t v2 = 0x696C616974696E49;
      uint64_t v14 = (void *)0xEC000000676E697ALL;
      break;
  }
  v15._uint64_t countAndFlagsBits = v2;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)*((void *)&v72 + 1);
  uint64_t v67 = v72;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  *(void *)&long long v72 = 0xD000000000000013;
  *((void *)&v72 + 1) = 0x80000001B1161240;
  uint64_t v17 = v0[15];
  uint64_t v18 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  HIDWORD(v72) = -335544320;
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v66 = strcpy((char *)&v72, "seqNum=");
  strcpy((char *)&v72, "seqNumAcked=");
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  char v22 = (void *)*((void *)&v72 + 1);
  uint64_t v65 = v72;
  *(void *)&long long v72 = 0;
  *((void *)&v72 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  uint64_t v70 = 0x75657551646E6573;
  unint64_t v71 = 0xEF3D657A69732D65;
  uint64_t v23 = (void *)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  if (*v23 >> 62)
  {
LABEL_43:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)v71;
  uint64_t v64 = v70;
  uint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = (char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue;
  swift_beginAccess();
  int64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = *(void *)v27;
  uint64_t v31 = 1 << *(unsigned char *)(*(void *)v27 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  uint64_t v34 = *(void *)(v30 + 64);
  uint64_t v33 = v30 + 64;
  unint64_t v35 = v32 & v34;
  int64_t v36 = (unint64_t)(v31 + 63) >> 6;
  while (v35)
  {
    unint64_t v37 = __clz(__rbit64(v35));
    v35 &= v35 - 1;
    unint64_t v38 = v37 | (v28 << 6);
LABEL_20:
    uint64_t v39 = *(void *)(*(void *)(*(void *)(*(void *)v27 + 56) + 8 * v38) + 16);
    BOOL v40 = __OFADD__(v29, v39);
    v29 += v39;
    if (v40)
    {
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
  }
  int64_t v41 = v28 + 1;
  if (__OFADD__(v28, 1)) {
    goto LABEL_42;
  }
  if (v41 >= v36) {
    goto LABEL_40;
  }
  unint64_t v42 = *(void *)(v33 + 8 * v41);
  ++v28;
  if (v42) {
    goto LABEL_39;
  }
  int64_t v28 = v41 + 1;
  if (v41 + 1 >= v36) {
    goto LABEL_40;
  }
  unint64_t v42 = *(void *)(v33 + 8 * v28);
  if (v42) {
    goto LABEL_39;
  }
  int64_t v28 = v41 + 2;
  if (v41 + 2 >= v36) {
    goto LABEL_40;
  }
  unint64_t v42 = *(void *)(v33 + 8 * v28);
  if (v42) {
    goto LABEL_39;
  }
  int64_t v28 = v41 + 3;
  if (v41 + 3 >= v36) {
    goto LABEL_40;
  }
  unint64_t v42 = *(void *)(v33 + 8 * v28);
  if (v42) {
    goto LABEL_39;
  }
  int64_t v28 = v41 + 4;
  if (v41 + 4 >= v36) {
    goto LABEL_40;
  }
  unint64_t v42 = *(void *)(v33 + 8 * v28);
  if (v42)
  {
LABEL_39:
    unint64_t v35 = (v42 - 1) & v42;
    unint64_t v38 = __clz(__rbit64(v42)) + (v28 << 6);
    goto LABEL_20;
  }
  int64_t v43 = v41 + 5;
  if (v43 >= v36) {
    goto LABEL_40;
  }
  unint64_t v42 = *(void *)(v33 + 8 * v43);
  if (v42)
  {
    int64_t v28 = v43;
    goto LABEL_39;
  }
  while (1)
  {
    int64_t v28 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      JUMPOUT(0x1B10C0520);
    }
    if (v28 >= v36) {
      break;
    }
    unint64_t v42 = *(void *)(v33 + 8 * v28);
    ++v43;
    if (v42) {
      goto LABEL_39;
    }
  }
LABEL_40:
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 32;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  v46._uint64_t countAndFlagsBits = 0x3D656D616ELL;
  v46._object = (void *)0xE500000000000000;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 32;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 32;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = 32;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50._uint64_t countAndFlagsBits = v67;
  v50._object = v16;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 32;
  v51._object = (void *)0xE100000000000000;
  String.append(_:)(v51);
  v52._uint64_t countAndFlagsBits = 0xD000000000000013;
  v52._object = (void *)0x80000001B1161240;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._uint64_t countAndFlagsBits = 32;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  v54._uint64_t countAndFlagsBits = (uint64_t)v66;
  v54._object = (void *)0xE700000000000000;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._uint64_t countAndFlagsBits = 32;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56._uint64_t countAndFlagsBits = v65;
  v56._object = v22;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = 32;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58._uint64_t countAndFlagsBits = v64;
  v58._object = v25;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v59._uint64_t countAndFlagsBits = 32;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  v60._uint64_t countAndFlagsBits = 0xD000000000000012;
  v60._object = (void *)0x80000001B1162600;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 32;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  v62._uint64_t countAndFlagsBits = 0xD000000000000012;
  v62._object = (void *)0x80000001B1162620;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t PubSubTopic.seqNumWatermark.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v9 = v17;
    uint64_t v10 = v1[15];
    uint64_t v11 = v1[16];
    __swift_project_boxed_opaque_existential_1(v1 + 12, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    uint64_t v13 = *(void *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = v9;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, v12, isUniquelyReferenced_nonNull_native);
    uint64_t v15 = v17;
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopic.updateState(state:)(unsigned __int8 *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *a1;
  uint64_t v10 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v8 = v10;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBF0], v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    uint64_t v2 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state);
    *((unsigned char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) = v9;
    if (one-time initialization token for log == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)log);
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = 0x676E697472617453;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v29[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315650;
    unint64_t v18 = 0xE800000000000000;
    uint64_t v19 = v17;
    uint64_t v20 = 0x676E697472617453;
    uint64_t v26 = v2;
    switch(v2)
    {
      case 1:
        uint64_t v20 = 0x676E696863746143;
        unint64_t v18 = 0xEA00000000007055;
        break;
      case 2:
        unint64_t v18 = 0xE500000000000000;
        uint64_t v20 = 0x7964616552;
        break;
      case 3:
        uint64_t v20 = 0x676E697474756853;
        unint64_t v18 = 0xEC0000006E776F44;
        break;
      case 4:
        uint64_t v20 = 0x6E776F6474756853;
        break;
      default:
        break;
    }
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v18, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    unint64_t v21 = 0xE800000000000000;
    switch(v9)
    {
      case 1:
        uint64_t v15 = 0x676E696863746143;
        unint64_t v21 = 0xEA00000000007055;
        break;
      case 2:
        unint64_t v21 = 0xE500000000000000;
        uint64_t v15 = 0x7964616552;
        break;
      case 3:
        uint64_t v15 = 0x676E697474756853;
        unint64_t v21 = 0xEC0000006E776F44;
        break;
      case 4:
        uint64_t v15 = 0x6E776F6474756853;
        break;
      default:
        break;
    }
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v21, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v2 = v3[2];
    unint64_t v22 = v3[3];
    swift_bridgeObjectRetain();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v22, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Updated state old-state=%s new-state=%s topic=%s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);

    LOBYTE(v2) = v26;
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3 + 17);
  if (result)
  {
    uint64_t v24 = v3[18];
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v27) = v2;
    char v28 = v9;
    (*(void (**)(void *, uint64_t *, char *, uint64_t, uint64_t))(v24 + 40))(v3, &v27, &v28, ObjectType, v24);
    return swift_unknownObjectRelease();
  }
  return result;
}

void PubSubTopic._setMetadata(metadata:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CP_KeyValue(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (uint64_t *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    int64_t v14 = *(void *)(a1 + 16);
    if (v14)
    {
      uint64_t v38 = v2;
      v42[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      uint64_t v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v16 = *(void *)(v5 + 72);
      uint64_t v17 = v42[0];
      uint64_t v39 = v16;
      do
      {
        _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v15, (uint64_t)v7, type metadata accessor for CP_KeyValue);
        uint64_t v19 = *v7;
        uint64_t v18 = v7[1];
        uint64_t v20 = v7[2];
        unint64_t v21 = v7[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v20, v21);
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, type metadata accessor for CP_KeyValue);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v16 = v39;
          uint64_t v17 = v42[0];
        }
        unint64_t v23 = *(void *)(v17 + 16);
        unint64_t v22 = *(void *)(v17 + 24);
        unint64_t v24 = v23 + 1;
        if (v23 >= v22 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          unint64_t v24 = v23 + 1;
          uint64_t v16 = v39;
          uint64_t v17 = v42[0];
        }
        *(void *)(v17 + 16) = v24;
        uint64_t v25 = (void *)(v17 + 32 * v23);
        v25[4] = v19;
        v25[5] = v18;
        v25[6] = v20;
        v25[7] = v21;
        v15 += v16;
        --v14;
      }
      while (v14);
      uint64_t v2 = v38;
    }
    else if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
      uint64_t v26 = MEMORY[0x1E4FBC868];
LABEL_12:
      v42[0] = v26;
      uint64_t v27 = (void *)swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v27, 1, v42);
      swift_bridgeObjectRelease();
      uint64_t v28 = v42[0];
      uint64_t v29 = (uint64_t *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata);
      swift_beginAccess();
      uint64_t *v29 = v28;
      swift_bridgeObjectRelease();
      if (one-time initialization token for log == -1) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
    uint64_t v26 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_12;
  }
  __break(1u);
LABEL_18:
  swift_once();
LABEL_13:
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)log);
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v41 = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v35 = Dictionary.Keys.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v31, v32, "Setting metadata with keys %s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v34, -1, -1);
    MEMORY[0x1B3EA39E0](v33, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t PubSubTopic.updateMetdata(metadata:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v35 = MEMORY[0x1E4FBC870];
  Swift::Int v34 = MEMORY[0x1E4FBC868];
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for CP_KeyValue(0) - 8);
    uint64_t v12 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)));
    uint64_t v13 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in PubSubTopic.updateMetdata(metadata:)(v12, v2, &v34);
      uint64_t v12 = (uint64_t *)((char *)v12 + v13);
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)log);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v33[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v19 = Set.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v22 = Dictionary.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v15, v16, "Updating metadata removedKeys=%s upsertedKeyValues=%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }

  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v2 + 136))
  {
    uint64_t v25 = *(void *)(v2 + 144);
    uint64_t ObjectType = swift_getObjectType();
    swift_beginAccess();
    uint64_t v27 = v35;
    swift_beginAccess();
    Swift::Int v28 = v34;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, Swift::Int, uint64_t, uint64_t))(v25 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v2, v27, v28, ObjectType, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PubSubTopic.updateMetdata(metadata:)(uint64_t *a1, uint64_t a2, Swift::Int *a3)
{
  uint64_t v3 = a1[2];
  unint64_t v4 = a1[3];
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1B10C17ECLL);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 < 1)
      {
LABEL_8:
        uint64_t v15 = *a1;
        uint64_t v16 = a1[1];
        swift_beginAccess();
        swift_bridgeObjectRetain();
        specialized Dictionary._Variant.removeValue(forKey:)(v15, v16, &v19);
        swift_endAccess();
        swift_bridgeObjectRelease();
        outlined consume of Data?(v19, *((unint64_t *)&v19 + 1));
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v18, v15, v16);
      }
      else
      {
        uint64_t v11 = *a1;
        uint64_t v10 = a1[1];
        uint64_t v12 = (void *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v3, v4);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v19 = *v12;
        *uint64_t v12 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v11, v10, isUniquelyReferenced_nonNull_native);
        *uint64_t v12 = v19;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v3, v4);
        char v14 = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v18 = *a3;
        *a3 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v11, v10, v14);
        *a3 = v18;
        swift_bridgeObjectRelease();
      }
      return swift_bridgeObjectRelease();
    case 2uLL:
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(v4);
      goto LABEL_6;
  }
}

uint64_t PubSubTopic._publish(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v120 = *(void *)(v4 - 8);
  uint64_t v121 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v112 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  v117 = (char *)&v108 - v7;
  uint64_t v118 = type metadata accessor for OSSignposter();
  uint64_t v122 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118);
  v116 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for CP_PublishRequest(0);
  MEMORY[0x1F4188790](v115);
  v119 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v113 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v124 = *(void *)(v12 - 8);
  uint64_t v125 = v12;
  MEMORY[0x1F4188790](v12);
  v123 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v14 = MEMORY[0x1F4188790](v126);
  unint64_t v114 = (unint64_t)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v127 = (char *)&v108 - v16;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v20 = (uint64_t *)((char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v128 = v2;
  unint64_t v21 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *unint64_t v20 = v21;
  uint64_t v22 = *MEMORY[0x1E4FBCBF0];
  unint64_t v23 = *(void (**)(void *, uint64_t, uint64_t))(v18 + 104);
  v23(v20, v22, v17);
  id v24 = v21;
  char v25 = _dispatchPreconditionTest(_:)();
  Swift::Int v28 = *(void (**)(void *, uint64_t))(v18 + 8);
  uint64_t v27 = v18 + 8;
  uint64_t v26 = v28;
  v28(v20, v17);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  swift_beginAccess();
  uint64_t v129 = a1;
  if ((*(unsigned char *)(a1 + 64) & 1) != 0
    || (unint64_t v29 = *(void *)(v129 + 56),
        *(void *)((char *)v128 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) < v29))
  {
    *unint64_t v20 = v24;
    v23(v20, v22, v17);
    id v30 = v24;
    char v31 = _dispatchPreconditionTest(_:)();
    v26(v20, v17);
    if (v31)
    {
      uint64_t v32 = v128;
      uint64_t v33 = *(void *)((char *)v128 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum);
      BOOL v34 = __CFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (!v34)
      {
        *(void *)((char *)v128 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum) = v35;
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
        uint64_t v27 = (uint64_t)v127;
        static Message.with(_:)();
        uint64_t v36 = *(void *)(v27 + 8);
        uint64_t v37 = v129;
        swift_beginAccess();
        *(void *)(v37 + 40) = v36;
        *(unsigned char *)(v37 + 48) = 0;
        uint64_t v38 = *(void *)((char *)v32 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
        uint64_t v39 = *(void *)((char *)v32 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
        __swift_project_boxed_opaque_existential_1((void *)((char *)v32 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v38);
        uint64_t v40 = *(void *)(v37 + 16);
        unint64_t v41 = *(void *)(v37 + 24);
        uint64_t v42 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v40, v41, v36, v38, v39);
        if (v43 >> 60 != 15)
        {
          uint64_t v53 = v42;
          unint64_t v114 = v41;
          uint64_t v126 = v40;
          v109 = (uint64_t *)(v37 + 40);
          Swift::String v54 = v123;
          unint64_t v55 = v43;
          Date.init()();
          uint64_t v57 = v124;
          uint64_t v56 = v125;
          uint64_t v58 = v27;
          uint64_t v59 = v113;
          (*(void (**)(uint64_t, char *, uint64_t))(v124 + 16))(v113, v54, v125);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v59, 0, 1, v56);
          uint64_t v60 = v37 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
          swift_beginAccess();
          uint64_t v61 = v59;
          uint64_t v27 = v58;
          outlined assign with take of Date?(v61, v60);
          uint64_t v62 = swift_endAccess();
          MEMORY[0x1F4188790](v62);
          *(&v108 - 6) = (uint64_t)v32;
          *(&v108 - 5) = v58;
          uint64_t v113 = v53;
          *(&v108 - 4) = v53;
          *(&v108 - 3) = v55;
          unint64_t v111 = v55;
          *(&v108 - 2) = v37;
          *(&v108 - 1) = (uint64_t)v54;
          _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest);
          uint64_t v63 = (uint64_t)v119;
          static Message.with(_:)();
          if (one-time initialization token for messenger != -1) {
            swift_once();
          }
          uint64_t v64 = v118;
          uint64_t v65 = __swift_project_value_buffer(v118, (uint64_t)static Signposts.messenger);
          uint64_t v66 = v116;
          (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v116, v65, v64);
          char v67 = OSSignposter.isEnabled.getter();
          uint64_t v68 = (uint64_t)v117;
          uint64_t v69 = v126;
          unint64_t v70 = v114;
          if (v67)
          {
            outlined copy of Data._Representation(v126, v114);
            specialized OSSignpostID.init<A, B>(hash:using:)(v69, v70, v68);
          }
          else
          {
            OSSignpostID.init(_:)();
          }
          lazy protocol witness table accessor for type Int and conformance Int();
          swift_retain_n();
          default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
          _sxRi_zRi0_zlyytIseghHr_SgWOe(v78);
          swift_retain_n();
          swift_retain();
          uint64_t v79 = OSSignposter.logHandle.getter();
          int v110 = static os_signpost_type_t.event.getter();
          v115 = v79;
          if (OS_os_log.signpostsEnabled.getter())
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v112, v68, v121);
            uint64_t v80 = swift_slowAlloc();
            uint64_t v81 = swift_slowAlloc();
            v130[0] = v81;
            *(_DWORD *)uint64_t v80 = 134218754;
            uint64_t v82 = v81;
            uint64_t v83 = 0;
            switch(v70 >> 62)
            {
              case 1uLL:
                LODWORD(v83) = HIDWORD(v69) - v69;
                if (__OFSUB__(HIDWORD(v69), v69))
                {
                  __break(1u);
LABEL_42:
                  __break(1u);
                  JUMPOUT(0x1B10C27FCLL);
                }
                uint64_t v83 = (int)v83;
LABEL_30:
                uint64_t v131 = v83;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                uint64_t v93 = v129;
                swift_release();
                *(_WORD *)(v80 + 12) = 2080;
                uint64_t v94 = v32[2];
                unint64_t v95 = v32[3];
                swift_bridgeObjectRetain();
                uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v130);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_bridgeObjectRelease();
                *(_WORD *)(v80 + 22) = 2048;
                uint64_t v97 = v32[15];
                uint64_t v96 = v32[16];
                __swift_project_boxed_opaque_existential_1(v32 + 12, v97);
                uint64_t v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 16))(v97, v96);
                swift_release();
                uint64_t v131 = v98;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                *(_WORD *)(v80 + 32) = 2080;
                if (*(unsigned char *)(v93 + 48))
                {
                  unint64_t v99 = 0xE300000000000000;
                  uint64_t v100 = 7104878;
                }
                else
                {
                  uint64_t v131 = *v109;
                  uint64_t v100 = String.init<A>(reflecting:)();
                  unint64_t v99 = v101;
                }
                uint64_t v102 = v117;
                uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v99, v130);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                v103 = v112;
                os_signpost_id_t v104 = OSSignpostID.rawValue.getter();
                uint64_t v105 = v115;
                _os_signpost_emit_with_name_impl(&dword_1B0DF7000, v115, (os_signpost_type_t)v110, v104, "transport-message-sent", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu seqNum=%s", (uint8_t *)v80, 0x2Au);
                swift_arrayDestroy();
                MEMORY[0x1B3EA39E0](v82, -1, -1);
                MEMORY[0x1B3EA39E0](v80, -1, -1);

                uint64_t v106 = v121;
                uint64_t v107 = *(void (**)(char *, uint64_t))(v120 + 8);
                v107(v102, v121);
                (*(void (**)(char *, uint64_t))(v122 + 8))(v116, v118);
                v107(v103, v106);
                uint64_t v27 = (uint64_t)v127;
                uint64_t v63 = (uint64_t)v119;
                break;
              case 2uLL:
                uint64_t v91 = *(void *)(v69 + 16);
                uint64_t v90 = *(void *)(v69 + 24);
                BOOL v92 = __OFSUB__(v90, v91);
                uint64_t v83 = v90 - v91;
                if (!v92) {
                  goto LABEL_30;
                }
                goto LABEL_42;
              case 3uLL:
                goto LABEL_30;
              default:
                uint64_t v83 = BYTE6(v70);
                goto LABEL_30;
            }
          }
          else
          {
            swift_release_n();
            swift_release_n();

            (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v68, v121);
            (*(void (**)(char *, uint64_t))(v122 + 8))(v66, v64);
          }
          swift_retain();
          PassthroughSubject.send(_:)();
          outlined consume of Data?(v113, v111);
          swift_release();
          outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v63, type metadata accessor for CP_PublishRequest);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v123, v125);
          return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v27, type metadata accessor for CP_SequenceNumber);
        }
        if (one-time initialization token for log == -1)
        {
LABEL_8:
          uint64_t v44 = type metadata accessor for Logger();
          __swift_project_value_buffer(v44, (uint64_t)log);
          uint64_t v45 = v114;
          _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v27, v114, type metadata accessor for CP_SequenceNumber);
          swift_retain_n();
          Swift::String v46 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v46, v47))
          {
            uint64_t v48 = swift_slowAlloc();
            uint64_t v49 = swift_slowAlloc();
            v130[0] = v49;
            *(_DWORD *)uint64_t v48 = 134218242;
            uint64_t v50 = *(void *)(v45 + 8);
            outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v45, type metadata accessor for CP_SequenceNumber);
            uint64_t v131 = v50;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v48 + 12) = 2080;
            uint64_t v51 = PubSubTopic.description.getter();
            uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, v46, v47, "Unexpected encryption failure, dropping message seqNum=%llu %s", (uint8_t *)v48, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v49, -1, -1);
            MEMORY[0x1B3EA39E0](v48, -1, -1);
          }
          else
          {
            outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v45, type metadata accessor for CP_SequenceNumber);

            swift_release_n();
          }
          return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v27, type metadata accessor for CP_SequenceNumber);
        }
LABEL_40:
        swift_once();
        goto LABEL_8;
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v71 = type metadata accessor for Logger();
  __swift_project_value_buffer(v71, (uint64_t)log);
  swift_retain_n();
  long long v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v132[0] = v75;
    *(_DWORD *)uint64_t v74 = 134218242;
    v130[0] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v74 + 12) = 2080;
    uint64_t v76 = PubSubTopic.description.getter();
    v130[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v72, v73, "[Publish] Dropping previously sent message with seqNum=%llu %s", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v75, -1, -1);
    MEMORY[0x1B3EA39E0](v74, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t v84 = v129;
  swift_retain();
  unint64_t v85 = swift_bridgeObjectRetain();
  unint64_t v86 = specialized Collection.firstIndex(where:)(v85, v84);
  char v88 = v87;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if ((v88 & 1) == 0)
  {
    swift_beginAccess();
    specialized Array.remove(at:)(v86);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t *v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in PubSubTopic._publish(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v19[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, (void (*)(uint64_t))type metadata accessor for CP_Record);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v16, a1, type metadata accessor for CP_Record);
  uint64_t v17 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a1, 0, 1, v17);
}

uint64_t closure #1 in closure #2 in PubSubTopic._publish(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v31 = a5;
  uint64_t v34 = a7;
  uint64_t v33 = a6;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v9 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v32 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v16;
  a1[1] = v17;
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v29, (uint64_t)v15, type metadata accessor for CP_SequenceNumber);
  uint64_t v18 = type metadata accessor for CP_Record(0);
  uint64_t v19 = (uint64_t)a1 + *(int *)(v18 + 36);
  outlined destroy of UUID?(v19, &demangling cache variable for type metadata for CP_SequenceNumber?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v15, v19, type metadata accessor for CP_SequenceNumber);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v12);
  uint64_t v20 = a1[2];
  unint64_t v21 = a1[3];
  uint64_t v22 = v30;
  unint64_t v23 = v31;
  a1[2] = v30;
  a1[3] = v23;
  outlined copy of Data._Representation(v22, v23);
  outlined consume of Data._Representation(v20, v21);
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  static Message.with(_:)();
  uint64_t v24 = (uint64_t)a1 + *(int *)(v18 + 40);
  outlined destroy of UUID?(v24, &demangling cache variable for type metadata for CP_EncryptionID?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v11, v24, type metadata accessor for CP_EncryptionID);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v24, 0, 1, v9);
  if (*(void *)(v33 + 32)) {
    uint64_t v25 = *(void *)(v33 + 32);
  }
  else {
    uint64_t v25 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = v25;
  uint64_t result = Date.timeIntervalSince1970.getter();
  double v28 = v27 * 1000.0;
  if ((~*(void *)&v28 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v28 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v28 < 1.84467441e19)
  {
    a1[5] = (unint64_t)v28;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in PubSubTopic._publish(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((void *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v23 = UUID.uuid.getter();
  char v24 = v10;
  char v25 = v11;
  char v26 = v12;
  char v27 = v13;
  char v28 = v14;
  char v29 = v15;
  char v30 = v16;
  char v31 = v17;
  uint64_t v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v20;
  return result;
}

void PubSubTopic.attemptSendQueueFlush()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once();
LABEL_11:
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)log);
    swift_retain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v41[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v25 = PubSubTopic.description.getter();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v21, v22, "[Flush] sendQueue flush ignored %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v24, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) != 2
    || *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) != 2)
  {
    if (one-time initialization token for log == -1) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
  unint64_t v8 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue;
  swift_beginAccess();
  if (*(void *)v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v36) {
      return;
    }
  }
  else if (!*(void *)((*(void *)v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  uint64_t v9 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum;
  char v10 = (uint8_t *)OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked;
  if (*(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) >= *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum)) {
    goto LABEL_16;
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_37;
  }
  while (1)
  {
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)log);
    swift_retain();
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    int v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = swift_slowAlloc();
      int v38 = v14;
      uint64_t v16 = v15;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v42 = v39;
      *(_DWORD *)uint64_t v16 = 134218498;
      uint64_t v40 = *(void *)(v1 + v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2048;
      uint64_t v40 = *(void *)&v10[v1];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 22) = 2080;
      uint64_t v17 = *(void *)(v1 + 16);
      unint64_t v18 = *(void *)(v1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v12, (os_log_type_t)v38, "[Flush] Rewinding seqNum from=%llu to=%llu topic=%s", (uint8_t *)v16, 0x20u);
      uint64_t v19 = v39;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {

      swift_release();
    }
    *(void *)(v1 + v9) = *(void *)&v10[v1];
LABEL_16:
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)log);
    swift_retain_n();
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    uint64_t v9 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      char v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v42 = v30;
      *(_DWORD *)char v10 = 136315138;
      uint64_t v31 = PubSubTopic.description.getter();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v28, (os_log_type_t)v9, "[Flush] Flushing sendQueue %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v30, -1, -1);
      MEMORY[0x1B3EA39E0](v10, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    unint64_t v8 = *(void *)v8;
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      if (!v33) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v33 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v33) {
        goto LABEL_34;
      }
    }
    if (v33 >= 1) {
      break;
    }
    __break(1u);
LABEL_37:
    swift_once();
  }
  for (uint64_t i = 0; i != v33; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v35 = MEMORY[0x1B3EA25C0](i, v8);
    }
    else
    {
      uint64_t v35 = *(void *)(v8 + 8 * i + 32);
      swift_retain();
    }
    PubSubTopic._publish(_:)(v35);
    swift_release();
  }
LABEL_34:
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v8, a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
  uint64_t v9 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 0, 1, v9);
}

uint64_t closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CP_SequenceNumber>);
  type metadata accessor for CP_SequenceNumber(0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B1138A80;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  static Message.with(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t PubSubTopic.close(reason:description:)(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v44 = a1;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void **)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCBF0], v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) == 4) {
    return result;
  }
  LOBYTE(v50[0]) = 4;
  PubSubTopic.updateState(state:)((unsigned __int8 *)v50);
  if (*(void *)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  unsigned int v43 = a2;
  if (one-time initialization token for log != -1) {
    goto LABEL_27;
  }
LABEL_6:
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  uint64_t v18 = v5;
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v50[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v22 = PubSubTopic.description.getter();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v17, v19, "Shutdown reason='%s' %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = (void *)(v18 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  uint64_t v25 = *v24;
  if (*v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if (v26)
  {
    uint64_t v48 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0);
    if (v26 < 0)
    {
      __break(1u);
      return result;
    }
    unint64_t v41 = v24;
    uint64_t v42 = v18;
    uint64_t v28 = 0;
    uint64_t v29 = v48;
    unint64_t v45 = v25 & 0xC000000000000001;
    uint64_t v46 = v26;
    uint64_t v47 = v25;
    do
    {
      if (v45)
      {
        uint64_t v30 = MEMORY[0x1B3EA25C0](v28, v25);
      }
      else
      {
        uint64_t v30 = *(void *)(v25 + 8 * v28 + 32);
        swift_retain();
      }
      uint64_t v32 = *(void *)(v30 + 16);
      unint64_t v31 = *(void *)(v30 + 24);
      uint64_t v33 = *(void *)(v30 + 32);
      swift_beginAccess();
      uint64_t v34 = *(void *)(v30 + 40);
      char v35 = *(unsigned char *)(v30 + 48);
      outlined copy of Data._Representation(v32, v31);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v48 = v29;
      unint64_t v37 = *(void *)(v29 + 16);
      unint64_t v36 = *(void *)(v29 + 24);
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        uint64_t v29 = v48;
      }
      ++v28;
      *(void *)(v29 + 16) = v37 + 1;
      uint64_t v38 = v29 + 40 * v37;
      *(void *)(v38 + 32) = v32;
      *(void *)(v38 + 40) = v31;
      *(void *)(v38 + 48) = v33;
      *(void *)(v38 + 56) = v34;
      *(unsigned char *)(v38 + 64) = v35;
      uint64_t v25 = v47;
    }
    while (v46 != v28);
    swift_bridgeObjectRelease();
    uint64_t v24 = v41;
    uint64_t v18 = v42;
    uint64_t v27 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = MEMORY[0x1E4FBC860];
  }
  *uint64_t v24 = v27;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!MEMORY[0x1B3EA3B30](v18 + 136)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v39 = *(void *)(v18 + 144);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(v39 + 56))(v18, v44, v43, v29, ObjectType, v39);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t CP_Record.decodedEncryptionID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v13 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v9 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_EncryptionID);
  }
  uint64_t v14 = *v9;
  unint64_t v15 = v9[1];
  outlined copy of Data._Representation(*v9, v15);
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for CP_EncryptionID);
  UUID.init(data:)(v14, v15, (uint64_t)v12);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
    uint64_t v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a1, v12, v16);
    uint64_t v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a1, v18, 1, v16);
}

uint64_t CP_EncryptionID.toUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  unint64_t v6 = v1[1];
  outlined copy of Data._Representation(v7, v6);
  UUID.init(data:)(v7, v6, (uint64_t)v5);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
    uint64_t v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v10, 1, v8);
}

uint64_t PubSubTopic.processDecryptionQueue()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v1 - 8);
  v127 = (char *)&v103 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v3 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  uint64_t v112 = (uint64_t *)((char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v106 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v114 = (uint64_t)&v103 - v9;
  MEMORY[0x1F4188790](v8);
  unint64_t v111 = (char *)&v103 - v10;
  uint64_t v116 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v116 - 8);
  MEMORY[0x1F4188790](v116);
  uint64_t v105 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for CP_Record(0);
  uint64_t v134 = *(void *)(v113 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v113);
  uint64_t v117 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v135 = (uint64_t)&v103 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v132 = (uint64_t)&v103 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v103 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (NSObject **)((char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = *(NSObject **)((char *)&v0->isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v24 = v25;
  (*(void (**)(NSObject **, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x1E4FBCBF0], v21);
  uint64_t v26 = v25;
  char v27 = _dispatchPreconditionTest(_:)();
  (*(void (**)(NSObject **, uint64_t))(v22 + 8))(v24, v21);
  if ((v27 & 1) == 0)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v118 = MEMORY[0x1E4FBC868];
  uint64_t v138 = MEMORY[0x1E4FBC868];
  uint64_t v28 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue);
  swift_beginAccess();
  uint64_t v108 = v28;
  uint64_t v29 = *v28;
  uint64_t v30 = *(void *)(*v28 + 64);
  uint64_t v122 = *v28 + 64;
  uint64_t v31 = 1 << *(unsigned char *)(v29 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & v30;
  int64_t v123 = (unint64_t)(v31 + 63) >> 6;
  int v110 = (unsigned int (**)(uint64_t, uint64_t, NSObject *))(v3 + 48);
  v109 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  v115 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  os_signpost_id_t v104 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  v103 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v128 = v29;
  swift_bridgeObjectRetain();
  int v119 = 0;
  int64_t v34 = 0;
  *(void *)&long long v35 = 134218754;
  long long v121 = v35;
  uint64_t v120 = MEMORY[0x1E4FBC840] + 8;
  long long v107 = xmmword_1B113B700;
  uint64_t v25 = v0;
  v133 = v0;
  uint64_t v125 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  while (1)
  {
    if (v33)
    {
      uint64_t v130 = (v33 - 1) & v33;
      unint64_t v38 = __clz(__rbit64(v33)) | (v34 << 6);
      goto LABEL_24;
    }
    int64_t v39 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (v39 >= v123) {
      goto LABEL_58;
    }
    unint64_t v40 = *(void *)(v122 + 8 * v39);
    ++v34;
    if (!v40)
    {
      int64_t v34 = v39 + 1;
      if (v39 + 1 >= v123) {
        goto LABEL_58;
      }
      unint64_t v40 = *(void *)(v122 + 8 * v34);
      if (!v40)
      {
        int64_t v34 = v39 + 2;
        if (v39 + 2 >= v123) {
          goto LABEL_58;
        }
        unint64_t v40 = *(void *)(v122 + 8 * v34);
        if (!v40) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v130 = (v40 - 1) & v40;
    unint64_t v38 = __clz(__rbit64(v40)) + (v34 << 6);
LABEL_24:
    int64_t v131 = v34;
    uint64_t v42 = 8 * v38;
    uint64_t v43 = *(void *)(v128 + 56);
    uint64_t v129 = *(void *)(*(void *)(v128 + 48) + v42);
    uint64_t v44 = *(void *)(v43 + v42);
    uint64_t v136 = MEMORY[0x1E4FBC860];
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
      unint64_t v46 = (*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
      uint64_t v47 = (v44 + v46);
      swift_bridgeObjectRetain();
      swift_beginAccess();
      uint64_t v124 = v45 - 1;
      for (unint64_t i = 0; ; ++i)
      {
        while (1)
        {
          if (i >= *(void *)(v44 + 16))
          {
            __break(1u);
LABEL_63:

            swift_release_n();
            goto LABEL_64;
          }
          uint64_t v51 = *(void *)(v134 + 72);
          _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v47 + v51 * i, (uint64_t)v20, type metadata accessor for CP_Record);
          if (!*(void *)(v136 + 16)) {
            break;
          }
          _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v20, v135, type metadata accessor for CP_Record);
          swift_beginAccess();
          uint64_t v0 = v136;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v0[2].isa + 1, 1, (unint64_t)v0);
          }
          unint64_t isa = (unint64_t)v0[2].isa;
          unint64_t v52 = (unint64_t)v0[3].isa;
          if (isa >= v52 >> 1) {
            uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, isa + 1, 1, (unint64_t)v0);
          }
          v0[2].unint64_t isa = (Class)(isa + 1);
          uint64_t v49 = (uint64_t)v0 + v46 + isa * v51;
          uint64_t v50 = v135;
LABEL_27:
          _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v50, v49, type metadata accessor for CP_Record);
          uint64_t v136 = (uint64_t)v0;
          swift_endAccess();
LABEL_28:
          ++i;
          outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v20, type metadata accessor for CP_Record);
          if (v45 == i) {
            goto LABEL_45;
          }
        }
        uint64_t v0 = v133;
        int v54 = PubSubTopic.decryptAndMarkReady(record:)((uint64_t)v20);
        if (v54 == 1)
        {
          _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v20, v132, type metadata accessor for CP_Record);
          swift_beginAccess();
          uint64_t v0 = v136;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v0[2].isa + 1, 1, (unint64_t)v0);
          }
          unint64_t v56 = (unint64_t)v0[2].isa;
          unint64_t v55 = (unint64_t)v0[3].isa;
          if (v56 >= v55 >> 1) {
            uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1, (unint64_t)v0);
          }
          v0[2].unint64_t isa = (Class)(v56 + 1);
          uint64_t v49 = (uint64_t)v0 + v46 + v56 * v51;
          uint64_t v50 = v132;
          goto LABEL_27;
        }
        if (v54) {
          goto LABEL_28;
        }
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v20, type metadata accessor for CP_Record);
        int v119 = 1;
        if (v124 == i) {
          goto LABEL_45;
        }
      }
    }
    swift_bridgeObjectRetain();
LABEL_45:
    uint64_t v57 = *(void *)(v44 + 16);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v58 = *(void *)(v136 + 16);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)log);
    uint64_t v25 = v133;
    swift_retain();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = v57 - v58;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v137 = v64;
      *(_DWORD *)uint64_t v63 = v121;
      *(void *)(v63 + 4) = v129;
      *(_WORD *)(v63 + 12) = 2048;
      *(void *)(v63 + 14) = v62;
      *(_WORD *)(v63 + 22) = 2048;
      *(void *)(v63 + 24) = *(void *)(v136 + 16);
      *(_WORD *)(v63 + 32) = 2080;
      uint64_t v66 = (uint64_t)v25[2].isa;
      unint64_t v65 = (unint64_t)v25[3].isa;
      swift_bridgeObjectRetain();
      *(void *)(v63 + 34) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, &v137);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v60, v61, "[Decrypt] Processed decrypt-queue, publisherID=%llu decrypted-count=%ld remaining-count=%ld topic=%s", (uint8_t *)v63, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v64, -1, -1);
      MEMORY[0x1B3EA39E0](v63, -1, -1);
    }
    else
    {

      swift_release();
    }
    uint64_t v36 = (uint64_t)v127;
    uint64_t v0 = v126;
    unint64_t v37 = v125;
    if (*(void *)(v136 + 16))
    {
      uint64_t v67 = v117;
      _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v136 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80)), v117, type metadata accessor for CP_Record);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v67 + *(int *)(v113 + 40), v36, &demangling cache variable for type metadata for CP_EncryptionID?);
      if ((*v110)(v36, 1, v0) == 1)
      {
        uint64_t v68 = v112;
        *(_OWORD *)uint64_t v112 = v107;
        UnknownStorage.init()();
        outlined destroy of UUID?(v36, &demangling cache variable for type metadata for CP_EncryptionID?);
      }
      else
      {
        uint64_t v68 = v112;
        _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v36, (uint64_t)v112, type metadata accessor for CP_EncryptionID);
      }
      uint64_t v69 = *v68;
      unint64_t v70 = v68[1];
      outlined copy of Data._Representation(*v68, v70);
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v68, type metadata accessor for CP_EncryptionID);
      uint64_t v71 = v114;
      UUID.init(data:)(v69, v70, v114);
      long long v72 = *v37;
      uint64_t v73 = v116;
      if ((*v37)(v71, 1, v116) == 1)
      {
        outlined destroy of UUID?(v71, &demangling cache variable for type metadata for UUID?);
        uint64_t v74 = (uint64_t)v111;
        (*v115)(v111, 1, 1, v73);
        goto LABEL_55;
      }
      uint64_t v75 = v71;
      uint64_t v76 = *v109;
      unint64_t v77 = v111;
      (*v109)(v111, v75, v73);
      uint64_t v78 = *v115;
      (*v115)(v77, 0, 1, v73);
      unsigned int v79 = v72((uint64_t)v77, 1, v73);
      uint64_t v74 = (uint64_t)v77;
      if (v79 == 1)
      {
LABEL_55:
        outlined destroy of UUID?(v74, &demangling cache variable for type metadata for UUID?);
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v117, type metadata accessor for CP_Record);
      }
      else
      {
        uint64_t v80 = v105;
        uint64_t v81 = v116;
        v76(v105, v74, v116);
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v117, type metadata accessor for CP_Record);
        uint64_t v82 = (uint64_t)v106;
        (*v104)(v106, v80, v81);
        v78((char *)v82, 0, 1, v81);
        specialized Dictionary.subscript.setter(v82, v129);
        (*v103)(v80, v81);
      }
      uint64_t v83 = v136;
      swift_bridgeObjectRetain();
      uint64_t v84 = v118;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v137 = v84;
      uint64_t v0 = &v137;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v83, v129, isUniquelyReferenced_nonNull_native);
      uint64_t v118 = v137;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    int64_t v34 = v131;
    unint64_t v33 = v130;
  }
  int64_t v41 = v39 + 3;
  if (v41 < v123)
  {
    unint64_t v40 = *(void *)(v122 + 8 * v41);
    if (!v40)
    {
      while (1)
      {
        int64_t v34 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_71;
        }
        if (v34 >= v123) {
          goto LABEL_58;
        }
        unint64_t v40 = *(void *)(v122 + 8 * v34);
        ++v41;
        if (v40) {
          goto LABEL_23;
        }
      }
    }
    int64_t v34 = v41;
    goto LABEL_23;
  }
LABEL_58:
  swift_release();
  *uint64_t v108 = v118;
  swift_bridgeObjectRelease();
  if (!*(void *)(v138 + 16)) {
    goto LABEL_65;
  }
  if (one-time initialization token for log != -1) {
LABEL_73:
  }
    swift_once();
  uint64_t v86 = type metadata accessor for Logger();
  __swift_project_value_buffer(v86, (uint64_t)log);
  swift_retain_n();
  uint64_t v0 = Logger.logObject.getter();
  uint64_t v47 = v25;
  os_log_type_t v87 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v0, v87)) {
    goto LABEL_63;
  }
  uint64_t v88 = swift_slowAlloc();
  uint64_t v89 = swift_slowAlloc();
  uint64_t v137 = v89;
  *(_DWORD *)uint64_t v88 = 136315394;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v90 = Dictionary.description.getter();
  unint64_t v92 = v91;
  swift_bridgeObjectRelease();
  uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, &v137);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v88 + 12) = 2080;
  uint64_t v93 = (uint64_t)v47[2].isa;
  unint64_t v94 = (unint64_t)v47[3].isa;
  swift_bridgeObjectRetain();
  uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, &v137);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B0DF7000, v0, v87, "[Decrypt] Requesting encryptionIDs, missingPublisherEncryptionIDs=%s topic=%s", (uint8_t *)v88, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B3EA39E0](v89, -1, -1);
  MEMORY[0x1B3EA39E0](v88, -1, -1);

LABEL_64:
  uint64_t v95 = *(uint64_t *)((char *)&v47[3].isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  uint64_t v96 = *(uint64_t *)((char *)&v47[4].isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  __swift_project_boxed_opaque_existential_1((Class *)((char *)&v47->isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v95);
  swift_beginAccess();
  uint64_t v97 = swift_bridgeObjectRetain();
  uint64_t v98 = specialized _copyCollectionToContiguousArray<A>(_:)(v97);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 72))(v98, v95, v96);
  swift_release();
LABEL_65:
  if ((v119 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v99 = v133;
  if (*((unsigned char *)&v133->isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) != 2) {
    return swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (!MEMORY[0x1B3EA3B30](&v99[17])) {
    return swift_bridgeObjectRelease();
  }
  Class v100 = v99[18].isa;
  uint64_t ObjectType = swift_getObjectType();
  (*((void (**)(NSObject *, uint64_t, Class))v100 + 1))(v99, ObjectType, v100);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, (void (*)(uint64_t))type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v8, a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  uint64_t v9 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 0, 1, v9);
}

uint64_t closure #1 in closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v11;
  a1[1] = v10;
  uint64_t v15 = a3;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  static Message.with(_:)();
  uint64_t v12 = (uint64_t)a1 + *(int *)(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0) + 24);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for CP_EncryptionID?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v9, v12, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
}

uint64_t PubSubTopic.decryptAndMarkReady(record:)(uint64_t a1)
{
  uint64_t v53 = a1;
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v57 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  unint64_t v56 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v51 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v7 = (uint64_t *)((char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v49 - v12);
  uint64_t v50 = type metadata accessor for CP_Record(0);
  uint64_t v14 = MEMORY[0x1F4188790](v50);
  uint64_t v49 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v49 - v16;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (uint64_t *)((char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v55 = (void *)v1;
  uint64_t v22 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4FBCBF0], v18);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v25 = *(void (**)(void *, uint64_t))(v19 + 8);
  uint64_t v24 = v19 + 8;
  v25(v21, v18);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v26 = v53;
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v53, (uint64_t)v17, type metadata accessor for CP_Record);
  CP_Record.decodedEncryptionID.getter((uint64_t)v13);
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, type metadata accessor for CP_Record);
  uint64_t v27 = v57;
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  uint64_t v24 = v54;
  uint64_t v1 = v28(v13, 1, v54);
  outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
  if (v1 == 1)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, (unint64_t)v11);
    void *v13 = v11;
    goto LABEL_12;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v26 + *(int *)(v50 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v29 = v26;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v5, 1, v52) == 1)
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v5, (uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  }
  uint64_t v30 = v7[1];
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  CP_Record.decodedEncryptionID.getter((uint64_t)v11);
  uint64_t result = v28(v11, 1, v24);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v32 = v56;
  (*(void (**)(char *, void *, uint64_t))(v27 + 32))(v56, v11, v24);
  uint64_t v33 = v29;
  uint64_t v34 = *(void *)(v29 + 32);
  uint64_t v35 = (uint64_t)v55;
  if (*(void *)(v34 + 16))
  {
    uint64_t v36 = v55[15];
    uint64_t v37 = v55[16];
    __swift_project_boxed_opaque_existential_1(v55 + 12, v36);
    uint64_t v38 = v24;
    int64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 16);
    swift_bridgeObjectRetain();
    uint64_t v40 = v39(v36, v37);
    uint64_t v35 = (uint64_t)v55;
    uint64_t v24 = v38;
    char v41 = specialized Sequence<>.contains(_:)(v40, v34);
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v38);
      return 4;
    }
  }
  uint64_t v42 = *(void *)(v35 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  uint64_t v43 = *(void *)(v35 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v35 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v42);
  uint64_t v1 = (*(uint64_t (**)(void, void, char *, uint64_t, uint64_t, uint64_t))(v43 + 64))(*(void *)(v33 + 16), *(void *)(v33 + 24), v32, v30, v42, v43);
  uint64_t v7 = v44;
  uint64_t v45 = v49;
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v33, v49, type metadata accessor for CP_Record);
  outlined copy of Data._Representation(v1, (unint64_t)v7);
  swift_retain();
  PubSubTopic.ReceivedRecord.init(from:withDecryptedData:withTopic:)(v45, v1, (uint64_t)v7, v35, v59);
  outlined init with copy of PubSubTopic.ReceivedRecord((uint64_t)v59, (uint64_t)v58);
  uint64_t v13 = (void *)(v35 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue);
  swift_beginAccess();
  uint64_t v11 = (void *)*v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v13 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_17;
  }
LABEL_12:
  unint64_t v48 = v11[2];
  unint64_t v47 = v11[3];
  if (v48 >= v47 >> 1)
  {
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, (unint64_t)v11);
    void *v13 = v11;
  }
  v11[2] = v48 + 1;
  outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v58, (uint64_t)&v11[8 * v48 + 4]);
  swift_endAccess();
  outlined consume of Data._Representation(v1, (unint64_t)v7);
  outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v59);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v24);
  return 0;
}

uint64_t PubSubTopic.queueRecordForDecryption(_:)(uint64_t a1)
{
  os_signpost_id_t v104 = (void *)a1;
  uint64_t v105 = type metadata accessor for UUID();
  uint64_t v103 = *(void *)(v105 - 8);
  MEMORY[0x1F4188790](v105);
  uint64_t v102 = (char *)&v91 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v97 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v91 - v6;
  uint64_t v8 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v99 = *(void *)(v8 - 8);
  uint64_t v100 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v91 - v12);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v96 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v91 - v17;
  uint64_t v98 = type metadata accessor for CP_Record(0);
  uint64_t v94 = *(void *)(v98 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v98);
  uint64_t v92 = (uint64_t)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v93 = (uint64_t)&v91 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v91 - v23;
  uint64_t v25 = type metadata accessor for DispatchPredicate();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (uint64_t *)((char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v101 = v1;
  uint64_t v29 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v28 = v29;
  (*(void (**)(void *, void, uint64_t))(v26 + 104))(v28, *MEMORY[0x1E4FBCBF0], v25);
  id v30 = v29;
  uint64_t v31 = _dispatchPreconditionTest(_:)();
  uint64_t v33 = *(void (**)(void *, uint64_t))(v26 + 8);
  uint64_t v32 = (char *)(v26 + 8);
  v33(v28, v25);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v28 = v104;
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v104, (uint64_t)v24, type metadata accessor for CP_Record);
  CP_Record.decodedEncryptionID.getter((uint64_t)v18);
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v24, type metadata accessor for CP_Record);
  uint64_t v31 = v103;
  uint64_t v25 = v103 + 48;
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v103 + 48);
  int v35 = v34(v18, 1, v105);
  outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
  if (v35 == 1)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
  uint64_t v36 = (uint64_t)v28 + *(int *)(v98 + 36);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v36, (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v37 = v100;
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
  if (v38(v7, 1, v100) == 1)
  {
    uint64_t *v13 = 0;
    v13[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v7, (uint64_t)v13, type metadata accessor for CP_SequenceNumber);
  }
  uint64_t v39 = (uint64_t)v97;
  uint64_t v40 = *v13;
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v13, type metadata accessor for CP_SequenceNumber);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v36, v39, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if (v38((char *)v39, 1, v37) == 1)
  {
    void *v11 = 0;
    v11[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v39, (uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  }
  uint64_t v32 = v102;
  uint64_t v41 = (uint64_t)v96;
  uint64_t v42 = v11[1];
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, type metadata accessor for CP_SequenceNumber);
  CP_Record.decodedEncryptionID.getter(v41);
  uint64_t result = v95(v41, 1, v105);
  if (result != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v32, v41, v105);
    v108[0] = 0;
    v108[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    strcpy((char *)v108, "publisherID=");
    BYTE5(v108[1]) = 0;
    HIWORD(v108[1]) = -5120;
    uint64_t v107 = v40;
    v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 0x3D6D754E71657320;
    v45._object = (void *)0xE800000000000000;
    String.append(_:)(v45);
    uint64_t v107 = v42;
    v46._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._uint64_t countAndFlagsBits = 0x74707972636E6520;
    v47._object = (void *)0xEE003D44496E6F69;
    String.append(_:)(v47);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    v48._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = 0x3D6369706F7420;
    v49._object = (void *)0xE700000000000000;
    String.append(_:)(v49);
    uint64_t v25 = v101;
    uint64_t v50 = *(void *)(v101 + 16);
    uint64_t v51 = *(void **)(v101 + 24);
    swift_bridgeObjectRetain();
    v52._uint64_t countAndFlagsBits = v50;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    uint64_t v53 = v40;
    uint64_t v7 = (char *)v108[0];
    uint64_t v28 = (void *)v108[1];
    uint64_t v31 = v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue;
    swift_beginAccess();
    uint64_t v54 = *(void *)v31;
    uint64_t v55 = *(void *)(*(void *)v31 + 16);
    uint64_t v99 = v53;
    if (v55 && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v53), (v57 & 1) != 0))
    {
      unint64_t v58 = *(void *)(*(void *)(v54 + 56) + 8 * v56);
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v58 = MEMORY[0x1E4FBC860];
    }
    unint64_t v109 = v58;
    swift_endAccess();
    uint64_t v59 = *(void *)(v58 + 16);
    if (v59)
    {
      if (*(void *)(v25 + 48) <= v59)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v75 = type metadata accessor for Logger();
        __swift_project_value_buffer(v75, (uint64_t)log);
        swift_bridgeObjectRetain();
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        BOOL v78 = os_log_type_enabled(v76, v77);
        uint64_t v79 = v103;
        if (v78)
        {
          uint64_t v80 = (uint8_t *)swift_slowAlloc();
          uint64_t v81 = swift_slowAlloc();
          v108[0] = v81;
          *(_DWORD *)uint64_t v80 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v7, (unint64_t)v28, v108);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v76, v77, "[Decrypt] Decrypt-queue max capacity exceeded, closing streams, %s", v80, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v81, -1, -1);
          MEMORY[0x1B3EA39E0](v80, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        PubSubTopic.closeStreams(reason:)(4, 2);
        return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v32, v105);
      }
      uint64_t v60 = v92;
      _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v104, v92, type metadata accessor for CP_Record);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59 + 1, 1, v58);
      }
      unint64_t v62 = *(void *)(v58 + 16);
      unint64_t v61 = *(void *)(v58 + 24);
      if (v62 >= v61 >> 1) {
        unint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v58);
      }
      *(void *)(v58 + 16) = v62 + 1;
      _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v60, v58+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(void *)(v94 + 72) * v62, type metadata accessor for CP_Record);
      unint64_t v109 = v58;
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      __swift_project_value_buffer(v63, (uint64_t)log);
      unint64_t v64 = v109;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        v108[0] = v68;
        *(_DWORD *)uint64_t v67 = 134218242;
        uint64_t v107 = *(void *)(v64 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v67 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v7, (unint64_t)v28, v108);
        uint64_t v32 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v65, v66, "[Decrypt] Decrypt-queue found, count=%ld %s", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v68, -1, -1);
        MEMORY[0x1B3EA39E0](v67, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      uint64_t v82 = v99;
LABEL_39:
      swift_beginAccess();
      uint64_t v89 = v109;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v106 = *(void *)v31;
      *(void *)uint64_t v31 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v89, v82, isUniquelyReferenced_nonNull_native);
      *(void *)uint64_t v31 = v106;
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v79 = v103;
      return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v32, v105);
    }
    if (one-time initialization token for log == -1)
    {
LABEL_25:
      uint64_t v69 = type metadata accessor for Logger();
      __swift_project_value_buffer(v69, (uint64_t)log);
      swift_bridgeObjectRetain();
      unint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        long long v72 = (uint8_t *)swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        v108[0] = v73;
        *(_DWORD *)long long v72 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v7, (unint64_t)v28, v108);
        uint64_t v32 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v70, v71, "[Decrypt] Decrypt-queue created, %s", v72, 0xCu);
        swift_arrayDestroy();
        uint64_t v74 = v73;
        uint64_t v25 = v101;
        MEMORY[0x1B3EA39E0](v74, -1, -1);
        MEMORY[0x1B3EA39E0](v72, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v82 = v99;
      uint64_t v83 = v93;
      _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v104, v93, type metadata accessor for CP_Record);
      unint64_t v84 = v109;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v84 + 16) + 1, 1, v84);
      }
      unint64_t v86 = *(void *)(v84 + 16);
      unint64_t v85 = *(void *)(v84 + 24);
      if (v86 >= v85 >> 1) {
        unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, v84);
      }
      *(void *)(v84 + 16) = v86 + 1;
      _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v83, v84+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(void *)(v94 + 72) * v86, type metadata accessor for CP_Record);
      unint64_t v109 = v84;
      uint64_t v87 = *(void *)(v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
      __swift_project_boxed_opaque_existential_1((void *)(v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), *(void *)(v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
      uint64_t v88 = swift_allocObject();
      *(_OWORD *)(v88 + 16) = xmmword_1B1138A80;
      *(void *)(v88 + 32) = v82;
      (*(void (**)(void))(v87 + 72))();
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
LABEL_45:
    swift_once();
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t PubSubTopic.closeStreams(reason:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v45 = a2;
  uint64_t v46 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v44 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCBF0], v16);
  id v21 = v20;
  char v22 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if (v22)
  {
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) != 4)
    {
      LOBYTE(v48) = 3;
      PubSubTopic.updateState(state:)((unsigned __int8 *)&v48);
      uint64_t v24 = v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason;
      uint64_t v25 = *(void *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason);
      uint64_t v26 = v46;
      *(void *)uint64_t v24 = v46;
      unsigned __int8 v27 = *(unsigned char *)(v24 + 8);
      unsigned __int8 v28 = v45;
      *(unsigned char *)(v24 + 8) = v45;
      outlined consume of PubSubTopic.ClosedReason?(v25, v27);
      LOBYTE(v48) = 1;
      outlined copy of PubSubTopic.ClosedReason(v26, v28);
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
      LOBYTE(v48) = 1;
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSTimer);
      id v29 = objc_msgSend(self, sel_mainRunLoop);
      uint64_t v30 = type metadata accessor for NSRunLoop.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v9, 1, 1, v30);
      uint64_t v31 = static NSTimer.publish(every:tolerance:on:in:options:)();

      outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
      uint64_t v48 = v31;
      type metadata accessor for NSTimer.TimerPublisher();
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher, MEMORY[0x1E4F28000]);
      uint64_t v32 = ConnectablePublisher.autoconnect()();
      swift_release();
      id v47 = v21;
      uint64_t v48 = v32;
      uint64_t v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v6, 1, 1, v33);
      id v34 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
      Publisher.receive<A>(on:options:)();
      outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

      swift_release();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
      uint64_t v35 = v42;
      Publisher.first()();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v35);
      uint64_t v36 = swift_allocObject();
      swift_weakInit();
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v36;
      uint64_t v38 = v46;
      *(void *)(v37 + 24) = v46;
      *(unsigned char *)(v37 + 32) = v28;
      outlined copy of PubSubTopic.ClosedReason(v38, v28);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
      uint64_t v39 = v44;
      uint64_t v40 = Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v39);
      *(void *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable) = v40;
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PubSubTopic.publish(message:to:previousSeqNumUnacked:)(uint64_t a1, unint64_t a2, uint64_t a3, uint8_t *a4, int a5)
{
  uint64_t v6 = v5;
  LODWORD(v44) = a5;
  int v45 = a4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v6 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  uint64_t v16 = _dispatchPreconditionTest(_:)();
  uint64_t v18 = *(void (**)(void *, uint64_t))(v11 + 8);
  char v17 = v11 + 8;
  v18(v13, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v20 = v19 + 1;
    if (!__OFADD__(v19, 1)) {
      goto LABEL_4;
    }
    goto LABEL_35;
  }
  uint64_t v16 = v6 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue;
  swift_beginAccess();
  uint64_t v10 = *(void *)v16;
  if (*(void *)v16 >> 62) {
    goto LABEL_33;
  }
  uint64_t v19 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v20 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
LABEL_4:
    if (*(void *)(v6 + 40) >= v20)
    {
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v21) = HIDWORD(a1) - a1;
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v21 = (int)v21;
            goto LABEL_11;
          }
          __break(1u);
          goto LABEL_38;
        case 2uLL:
          uint64_t v23 = *(void *)(a1 + 16);
          uint64_t v22 = *(void *)(a1 + 24);
          BOOL v24 = __OFSUB__(v22, v23);
          uint64_t v21 = v22 - v23;
          if (!v24) {
            goto LABEL_11;
          }
LABEL_38:
          __break(1u);
          goto LABEL_39;
        case 3uLL:
          goto LABEL_13;
        default:
          uint64_t v21 = BYTE6(a2);
LABEL_11:
          if (v21 >= 1 && *(void *)(v6 + 32) < (unint64_t)v21) {
            break;
          }
LABEL_13:
          if (*(unsigned __int8 *)(v6 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 2u) {
            break;
          }
          uint64_t v43 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state;
          type metadata accessor for PubSubTopic.SendItem(0);
          uint64_t v10 = swift_allocObject();
          *(void *)(v10 + 40) = 0;
          *(unsigned char *)(v10 + 48) = 1;
          *(void *)(v10 + 56) = 0;
          *(unsigned char *)(v10 + 64) = 1;
          uint64_t v25 = v10 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
          uint64_t v26 = type metadata accessor for Date();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
          *(void *)(v10 + 16) = a1;
          *(void *)(v10 + 24) = a2;
          *(void *)(v10 + 32) = a3;
          swift_beginAccess();
          uint64_t v27 = (uint64_t)v45;
          *(void *)(v10 + 56) = v45;
          uint64_t v19 = v27;
          char v17 = v44;
          *(unsigned char *)(v10 + 64) = v44 & 1;
          swift_beginAccess();
          outlined copy of Data._Representation(a1, a2);
          swift_bridgeObjectRetain();
          uint64_t v28 = swift_retain();
          MEMORY[0x1B3EA1CF0](v28);
          if (*(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
            goto LABEL_15;
          goto LABEL_36;
      }
    }
    type metadata accessor for PubSubTopicError(0);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type PubSubTopicError and conformance PubSubTopicError, (void (*)(uint64_t))type metadata accessor for PubSubTopicError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_15:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  if (*(unsigned char *)(v6 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) == 2
    && *(unsigned char *)(v6 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) == 2
    && *(unsigned char *)(v6 + v43) != 1)
  {
    PubSubTopic._publish(_:)(v10);
  }
  else
  {
    if (v17)
    {
      if (one-time initialization token for log != -1) {
LABEL_39:
      }
        swift_once();
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)log);
      swift_retain_n();
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315138;
        int v45 = v32 + 4;
        v46[0] = v33;
        uint64_t v34 = PubSubTopic.description.getter();
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v30, v31, "[Publish] Queueing message %s", v32, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v33, -1, -1);
        MEMORY[0x1B3EA39E0](v32, -1, -1);
        swift_release();

        return;
      }
    }
    else
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)log);
      swift_retain_n();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v46[0] = v44;
        *(_DWORD *)uint64_t v39 = 134218242;
        uint64_t v47 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2080;
        uint64_t v40 = PubSubTopic.description.getter();
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v37, v38, "[Publish] Queueing message, previousSeqNumUnacked=%llu %s", (uint8_t *)v39, 0x16u);
        uint64_t v42 = v44;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v42, -1, -1);
        MEMORY[0x1B3EA39E0](v39, -1, -1);
        swift_release();

        return;
      }
    }
    swift_release_n();
  }
  swift_release();
}

uint64_t PubSubTopic.publishQueueCount.getter()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = (unint64_t *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  unint64_t v8 = *v7;
  if (v8 >> 62)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    return v9;
  }
  return *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
}

uint64_t PubSubTopic.retrieveNextMessage()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *id v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v10 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)v10 + 16)
    || *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 2u)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  swift_beginAccess();
  *(void *)(a1 + 24) = &type metadata for PubSubTopic.ReceivedRecord;
  *(void *)(a1 + 32) = &protocol witness table for PubSubTopic.ReceivedRecord;
  uint64_t result = swift_allocObject();
  *(void *)a1 = result;
  if (!*(void *)(*(void *)v10 + 16)) {
    goto LABEL_9;
  }
  outlined init with copy of PubSubTopic.ReceivedRecord(*(void *)v10 + 32, result + 16);
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  return swift_endAccess();
}

uint64_t PubSubTopic.retrieveQueueCount.getter()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) >= 2u)
    {
      uint64_t v8 = v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue;
      swift_beginAccess();
      return *(void *)(*(void *)v8 + 16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopic.topicMetadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), PubSubTopicError>);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CP_UpsertTopicMetadataRequest(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v15 = (void (**)(char *))((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FBCBF0], v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    if (*((unsigned __int8 *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 2u)
    {
      type metadata accessor for PubSubTopicError(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v26(v8);
      return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for Result<(), PubSubTopicError>);
    }
    else
    {
      uint64_t v19 = specialized Sequence.forEach(_:)(a1, (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))partial apply for closure #1 in PubSubTopic.upsertMetadata(_:completion:));
      MEMORY[0x1F4188790](v19);
      *(&v26 - 2) = (void (*)(char *))v3;
      *(&v26 - 1) = (void (*)(char *))a1;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, (void (*)(uint64_t))type metadata accessor for CP_UpsertTopicMetadataRequest);
      static Message.with(_:)();
      uint64_t v20 = v3[15];
      uint64_t v21 = v3[16];
      __swift_project_boxed_opaque_existential_1(v3 + 12, v20);
      uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 72))(v11, v20, v21);
      uint64_t v22 = (void *)swift_allocObject();
      BOOL v24 = v26;
      uint64_t v23 = v27;
      v22[2] = v4;
      v22[3] = v24;
      v22[4] = v23;
      uint64_t v25 = (void *)swift_allocObject();
      v25[2] = v24;
      uint64_t v25[3] = v23;
      v25[4] = v4;
      v25[5] = a1;
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_UpsertTopicMetadataResponse, PluginRpcError>);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_UpsertTopicMetadataResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_UpsertTopicMetadataResponse, PluginRpcError>);
      Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      swift_release();
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, type metadata accessor for CP_UpsertTopicMetadataRequest);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4 >> 60 == 15)
  {
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, &v14);
    swift_endAccess();
    unint64_t v8 = *((void *)&v14 + 1);
    uint64_t v7 = v14;
  }
  else
  {
    uint64_t v11 = (void *)(a5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata);
    swift_beginAccess();
    outlined copy of Data?(a3, a4);
    outlined copy of Data?(a3, a4);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v14 = *v11;
    void *v11 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a4, a1, a2, isUniquelyReferenced_nonNull_native);
    void *v11 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v7 = a3;
    unint64_t v8 = a4;
  }
  return outlined consume of Data?(v7, v8);
}

uint64_t closure #2 in PubSubTopic.upsertMetadata(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v5;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation4DataVSgG_14CopresenceCore11CP_KeyValueVs5NeverOTg5017_sSS10Foundation4e5VSg14f6Core11h1_ij27VIgggr_SS3key_AD5valuetAGs5k20OIegnrzr_TR04_s14c66p45PubSubTopicC14upsertMetadata_10completionySDym39Foundation4b40VSgG_ys6ResultOyytAA0cdE5C70OGctFyAA09e31_UpserteG7RequestVzXEfU0_AA0M9_fG12VSS_AItXEfU_Tf3nnnpf_nTf1cn_n(a3);
  uint64_t result = swift_bridgeObjectRelease();
  a1[2] = v7;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in PubSubTopic.upsertMetadata(_:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  *a1 = a2;
  a1[1] = a3;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (a5 >> 60 != 15)
  {
    uint64_t v9 = a1[2];
    unint64_t v10 = a1[3];
    outlined copy of Data._Representation(a4, a5);
    uint64_t result = outlined consume of Data._Representation(v9, v10);
    a1[2] = a4;
    a1[3] = a5;
  }
  return result;
}

uint64_t closure #3 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), PubSubTopicError>);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  uint64_t v13 = type metadata accessor for PluginRpcError();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13) == 1)
  {
    long long v14 = &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>;
    uint64_t v15 = (uint64_t)v12;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1) {
      return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    }
    int v43 = *(unsigned __int8 *)v12;
    id v17 = (void *)v12[1];
    uint64_t v16 = v12[2];
    uint64_t v41 = a4;
    uint64_t v42 = v16;
    uint64_t v18 = v12[3];
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    id v20 = v17;
    swift_bridgeObjectRetain();
    swift_retain();
    id v21 = v17;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc();
      os_log_t v38 = v22;
      uint64_t v26 = v25;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v47 = v18;
      uint64_t v48 = v39;
      *(_DWORD *)uint64_t v26 = 136315394;
      LOBYTE(v44) = v43;
      int v45 = v17;
      uint64_t v46 = v42;
      uint64_t v40 = a3;
      int v37 = v24;
      uint64_t v27 = PluginRpcStatus.description.getter();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v29 = PubSubTopic.description.getter();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v48);
      a3 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v31 = v42;
      swift_bridgeObjectRelease();
      os_log_t v32 = v38;
      _os_log_impl(&dword_1B0DF7000, v38, (os_log_type_t)v37, "[UpsertMetadata] Failed, error=%s %s", (uint8_t *)v26, 0x16u);
      uint64_t v33 = v39;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v33, -1, -1);
      MEMORY[0x1B3EA39E0](v26, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v31 = v42;
    }
    *uint64_t v9 = v43;
    *((void *)v9 + 1) = v17;
    *((void *)v9 + 2) = v31;
    *((void *)v9 + 3) = v18;
    swift_storeEnumTagMultiPayload();
    type metadata accessor for PubSubTopicError(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    id v35 = v17;
    swift_bridgeObjectRetain();
    a3(v9);

    swift_bridgeObjectRelease();
    long long v14 = &demangling cache variable for type metadata for Result<(), PubSubTopicError>;
    uint64_t v15 = (uint64_t)v9;
  }
  return outlined destroy of UUID?(v15, v14);
}

uint64_t closure #4 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v97 = a5;
  uint64_t v102 = a2;
  uint64_t v103 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v100 = *(void (***)(char *, uint64_t))(v7 - 8);
  uint64_t v101 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v98 = *(void *)(v10 - 8);
  uint64_t v99 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  id v17 = (char *)v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v91 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), PubSubTopicError>);
  MEMORY[0x1F4188790](v20);
  os_log_type_t v23 = (char *)v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)a1;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    switch(v24)
    {
      case 1:
        uint64_t v24 = 1;
        goto LABEL_19;
      case 2:
        uint64_t v24 = 3;
        goto LABEL_19;
      case 3:
        uint64_t v101 = v21;
        uint64_t v26 = *(void *)(a1 + 16);
        unint64_t v25 = *(void *)(a1 + 24);
        uint64_t v27 = one-time initialization token for log;
        swift_bridgeObjectRetain();
        if (v27 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)log);
        uint64_t v29 = a4;
        swift_retain_n();
        swift_bridgeObjectRetain();
        unint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v30, v31)) {
          goto LABEL_30;
        }
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t aBlock = v33;
        *(_DWORD *)uint64_t v32 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v32 + 12) = 2080;
        uint64_t v34 = *(void *)(v29 + 16);
        unint64_t v35 = *(void *)(v29 + 24);
        swift_bridgeObjectRetain();
        uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v30, v31, "[UpsertMetadata] Failed, unknown-topic, error=%s topic=%s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v33, -1, -1);
        MEMORY[0x1B3EA39E0](v32, -1, -1);

        goto LABEL_31;
      case 4:
        uint64_t v24 = 5;
        goto LABEL_19;
      case 5:
        unint64_t v36 = *(void *)(a1 + 24);
        uint64_t v95 = *(uint64_t **)(a1 + 16);
        uint64_t v37 = one-time initialization token for log;
        swift_bridgeObjectRetain();
        if (v37 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)log);
        swift_retain_n();
        swift_bridgeObjectRetain();
        uint64_t v96 = (void (*)(void, void))v39;
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        int v42 = v41;
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v43 = swift_slowAlloc();
          LODWORD(v94) = v42;
          uint64_t v44 = v43;
          uint64_t v93 = (uint64_t *)swift_slowAlloc();
          uint64_t aBlock = (uint64_t)v93;
          *(_DWORD *)uint64_t v44 = 136315394;
          os_log_t v92 = v40;
          swift_bridgeObjectRetain();
          uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v95, v36, &aBlock);
          uint64_t v95 = &v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v44 + 12) = 2080;
          v91[1] = v44 + 14;
          uint64_t v46 = *(void *)(a4 + 16);
          unint64_t v45 = *(void *)(a4 + 24);
          swift_bridgeObjectRetain();
          uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v45, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          os_log_t v47 = v92;
          _os_log_impl(&dword_1B0DF7000, v92, (os_log_type_t)v94, "[UpsertMetadata] Failed, not-authorized, error=%s topic=%s", (uint8_t *)v44, 0x16u);
          uint64_t v48 = v93;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v48, -1, -1);
          MEMORY[0x1B3EA39E0](v44, -1, -1);
        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
        }
        swift_retain();
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.default.getter();
        int v78 = v77;
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v79 = swift_slowAlloc();
          LODWORD(v95) = v78;
          uint64_t v80 = v79;
          uint64_t v96 = (void (*)(void, void))swift_slowAlloc();
          uint64_t aBlock = (uint64_t)v96;
          *(_DWORD *)uint64_t v80 = 134218242;
          uint64_t v110 = *(void *)(a4 + 64);
          uint64_t v93 = &v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v80 + 12) = 2080;
          os_log_t v92 = (os_log_t)(v80 + 14);
          os_log_t v94 = v76;
          uint64_t v82 = *(void *)(a4 + 16);
          unint64_t v81 = *(void *)(a4 + 24);
          swift_bridgeObjectRetain();
          uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v81, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          os_log_t v83 = v94;
          _os_log_impl(&dword_1B0DF7000, v94, (os_log_type_t)v95, "Will retry UpsertMetadata in %f seconds topic=%s", (uint8_t *)v80, 0x16u);
          unint64_t v84 = v96;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v84, -1, -1);
          MEMORY[0x1B3EA39E0](v80, -1, -1);
        }
        else
        {

          swift_release();
        }
        static DispatchTime.now()();
        MEMORY[0x1B3EA17C0](v17, *(double *)(a4 + 64));
        uint64_t v96 = *(void (**)(void, void))(v14 + 8);
        v96(v17, v13);
        uint64_t v95 = *(uint64_t **)(a4 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
        unint64_t v85 = swift_allocObject();
        swift_weakInit();
        unint64_t v86 = (void *)swift_allocObject();
        os_log_t v94 = v85;
        uint64_t v87 = v97;
        v86[2] = v85;
        v86[3] = v87;
        uint64_t v88 = v103;
        v86[4] = v102;
        v86[5] = v88;
        uint64_t v108 = partial apply for closure #1 in closure #4 in PubSubTopic.upsertMetadata(_:completion:);
        unint64_t v109 = v86;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        unint64_t v105 = 1107296256;
        uint64_t v106 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v107 = &block_descriptor_82_0;
        uint64_t v89 = _Block_copy(&aBlock);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        uint64_t v110 = MEMORY[0x1E4FBC860];
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        uint64_t v90 = v101;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1B3EA2180](v19, v12, v9, v89);
        _Block_release(v89);
        v100[1](v9, v90);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v12, v99);
        v96(v19, v13);
        swift_release();
        return swift_release();
      case 6:
        uint64_t v101 = v21;
        uint64_t v50 = *(void *)(a1 + 16);
        unint64_t v49 = *(void *)(a1 + 24);
        uint64_t v51 = one-time initialization token for log;
        swift_bridgeObjectRetain();
        if (v51 != -1) {
          swift_once();
        }
        uint64_t v52 = type metadata accessor for Logger();
        __swift_project_value_buffer(v52, (uint64_t)log);
        uint64_t v53 = a4;
        swift_retain_n();
        swift_bridgeObjectRetain();
        unint64_t v30 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v54))
        {
          uint64_t v55 = swift_slowAlloc();
          uint64_t v56 = swift_slowAlloc();
          uint64_t aBlock = v56;
          *(_DWORD *)uint64_t v55 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v49, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v55 + 12) = 2080;
          uint64_t v57 = *(void *)(v53 + 16);
          unint64_t v58 = *(void *)(v53 + 24);
          swift_bridgeObjectRetain();
          uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v30, v54, "[UpsertMetadata] Failed, topic metadata exceeded size, error=%s topic=%s", (uint8_t *)v55, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v56, -1, -1);
          MEMORY[0x1B3EA39E0](v55, -1, -1);
        }
        else
        {
LABEL_30:

          swift_release_n();
          swift_bridgeObjectRelease_n();
        }
LABEL_31:
        type metadata accessor for PubSubTopicError(0);
        swift_storeEnumTagMultiPayload();
        break;
      case 7:
        uint64_t v24 = 8;
        goto LABEL_19;
      case 8:
        break;
      default:
        goto LABEL_19;
    }
    swift_storeEnumTagMultiPayload();
    v102(v23);
    uint64_t v74 = (uint64_t)v23;
  }
  else
  {
LABEL_19:
    uint64_t v100 = (void (**)(char *, uint64_t))((char *)v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v101 = v21;
    uint64_t v60 = *(void *)(a1 + 16);
    uint64_t v59 = *(void **)(a1 + 24);
    uint64_t v61 = one-time initialization token for log;
    swift_bridgeObjectRetain();
    if (v61 != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)log);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t aBlock = v66;
      *(_DWORD *)uint64_t v65 = 134218498;
      uint64_t v110 = v24;
      uint64_t v99 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v65 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, (unint64_t)v59, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v65 + 22) = 2080;
      uint64_t v67 = PubSubTopic.description.getter();
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &aBlock);
      uint64_t v24 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v63, v64, "[UpsertMetadata] Failed, unexpected response-status, code=%ld error=%s %s", (uint8_t *)v65, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v66, -1, -1);
      MEMORY[0x1B3EA39E0](v65, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t aBlock = 0;
    unint64_t v105 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    uint64_t aBlock = 0x3D65646F63;
    unint64_t v105 = 0xE500000000000000;
    uint64_t v110 = v24;
    v69._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    v70._uint64_t countAndFlagsBits = 0x3D726F72726520;
    v70._object = (void *)0xE700000000000000;
    String.append(_:)(v70);
    v71._uint64_t countAndFlagsBits = v60;
    v71._object = v59;
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    unint64_t v72 = v105;
    uint64_t v73 = v100;
    *uint64_t v100 = (void (*)(char *, uint64_t))aBlock;
    v73[1] = (void (*)(char *, uint64_t))v72;
    type metadata accessor for PubSubTopicError(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v102((char *)v73);
    uint64_t v74 = (uint64_t)v73;
  }
  return outlined destroy of UUID?(v74, &demangling cache variable for type metadata for Result<(), PubSubTopicError>);
}

uint64_t closure #1 in closure #4 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PubSubTopic.upsertMetadata(_:completion:)(a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t PubSubTopic.refreshDataCryptorProvider(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  os_log_type_t v31 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v29 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)log);
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v26 = a1;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = v7;
    uint64_t v14 = v13;
    aBlock[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v28 = v5;
    uint64_t v15 = v4;
    uint64_t v16 = *(void *)(v2 + 16);
    unint64_t v17 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v18 = v16;
    a1 = v26;
    *(void *)&v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v4 = v15;
    uint64_t v5 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v10, v11, "Refreshing data-cryptor-provider topic=%s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v14;
    uint64_t v7 = v27;
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v12, -1, -1);
  }
  else
  {

    swift_release();
  }
  outlined init with copy of Any(a1, (uint64_t)v34);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v2;
  outlined init with take of Any(v34, (_OWORD *)(v20 + 24));
  aBlock[4] = (uint64_t)partial apply for closure #1 in PubSubTopic.refreshDataCryptorProvider(with:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = (uint64_t)&block_descriptor_23_1;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v22 = v29;
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  os_log_type_t v23 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v22, v23, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v23, v4);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v7);
  return swift_release();
}

Swift::Void __swiftcall PubSubTopic.unsubscribe(force:)(Swift::Bool force)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)log);
      swift_retain();
      os_log_type_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        uint64_t v14 = swift_slowAlloc();
        uint64_t v25 = v14;
        *(_DWORD *)uint64_t v13 = 67109378;
        LODWORD(v24) = force;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 8) = 2080;
        uint64_t v15 = *(void *)(v2 + 16);
        unint64_t v16 = *(void *)(v2 + 24);
        swift_bridgeObjectRetain();
        uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v11, v12, "[Unsubscribe] Shutting down, forced=%{BOOL}d topic=%s", (uint8_t *)v13, 0x12u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v14, -1, -1);
        MEMORY[0x1B3EA39E0](v13, -1, -1);
      }
      else
      {

        swift_release();
      }
      LOBYTE(v25) = 3;
      PubSubTopic.updateState(state:)((unsigned __int8 *)&v25);
      if (force)
      {
        LOBYTE(v25) = 1;
        swift_retain();
        PassthroughSubject.send(completion:)();
        swift_release();
        LOBYTE(v25) = 1;
        swift_retain();
        PassthroughSubject.send(completion:)();
        swift_release();
        PubSubTopic.close(reason:description:)(5, 2u, 0xD000000000000012, 0x80000001B1162640);
      }
      else
      {
        PubSubTopic.closeStreams(reason:)(5, 2);
      }
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)log);
  swift_retain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v25 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v22 = *(void *)(v2 + 16);
    unint64_t v23 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v18, v19, "[Unsubscribe] Ignored, already shutting down, topic=%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v21, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {

    swift_release();
  }
}

uint64_t PubSubTopic.PrimaryStream.description.getter(char a1)
{
  if (a1) {
    return 0x6873696C627550;
  }
  else {
    return 0x6269726373627553;
  }
}

CopresenceCore::PubSubTopic::PrimaryStream_optional __swiftcall PubSubTopic.PrimaryStream.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PubSubTopic.PrimaryStream.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = CopresenceCore_PubSubTopic_PrimaryStream_publish;
  }
  else {
    v4.value = CopresenceCore_PubSubTopic_PrimaryStream_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t PubSubTopic.PrimaryStream.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6873696C627570;
  }
  else {
    return 0x6269726373627573;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.PrimaryStream(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x6873696C627570;
  }
  else {
    uint64_t v3 = 0x6269726373627573;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000065;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (*a2) {
    uint64_t v5 = 0x6873696C627570;
  }
  else {
    uint64_t v5 = 0x6269726373627573;
  }
  if (*a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE900000000000065;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PubSubTopic.PrimaryStream()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PubSubTopic.PrimaryStream()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PubSubTopic.PrimaryStream()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PubSubTopic.PrimaryStream@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PubSubTopic.PrimaryStream.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PubSubTopic.PrimaryStream(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6269726373627573;
  if (*v1) {
    uint64_t v2 = 0x6873696C627570;
  }
  unint64_t v3 = 0xE900000000000065;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PubSubTopic.PrimaryStream()
{
  if (*v0) {
    return 0x6873696C627550;
  }
  else {
    return 0x6269726373627553;
  }
}

void closure #1 in PubSubTopic.closeStreams(reason:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(unsigned char *)(Strong + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) == 3)
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)log);
      swift_retain_n();
      char v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v11 = swift_slowAlloc();
        uint64_t v21 = v11;
        *(_DWORD *)uint64_t v10 = 136315138;
        uint64_t v12 = PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v8, v9, "Shutdown failsafe triggered, %s", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v11, -1, -1);
        MEMORY[0x1B3EA39E0](v10, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      PubSubTopic.close(reason:description:)(a3, a4, 0xD00000000000001BLL, 0x80000001B11629E0);
      swift_release();
    }
    else
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)log);
      swift_retain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v21 = v18;
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v19 = PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v15, v16, "Shutdown failsafe timer fired but already shutdown, %s", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v18, -1, -1);
        MEMORY[0x1B3EA39E0](v17, -1, -1);
        swift_release();
      }
      else
      {

        swift_release_n();
      }
    }
  }
}

uint64_t PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(char a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginConnectError?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v208 = (uint64_t)&v193 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v215 = (char *)&v193 - v8;
  uint64_t v207 = type metadata accessor for PluginConnectError();
  uint64_t v206 = *(void *)(v207 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v207);
  uint64_t v196 = (uint64_t)&v193 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v197 = (uint64_t)&v193 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v214 = (uint64_t)&v193 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v217 = (uint64_t)&v193 - v15;
  uint64_t v204 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v203 = *(void *)(v204 - 8);
  MEMORY[0x1F4188790](v204);
  v201 = (char *)&v193 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for DispatchQoS();
  uint64_t v200 = *(void *)(v202 - 8);
  MEMORY[0x1F4188790](v202);
  v199 = (char *)&v193 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchTime();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v210 = v18;
  uint64_t v211 = v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v198 = (char *)&v193 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v209 = (char *)&v193 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v212 = (uint64_t)&v193 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v213 = (uint64_t)&v193 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v29 = (char *)&v193 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for PluginRpcError();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v205 = (uint64_t)&v193 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  unint64_t v36 = (char *)&v193 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v39 = (char *)&v193 - v38;
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  int v42 = (uint64_t *)((char *)&v193 - v41);
  MEMORY[0x1F4188790](v40);
  uint64_t v216 = (uint64_t)&v193 - v43;
  uint64_t v44 = v2;
  LOBYTE(aBlock) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v29, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  unint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v45(v29, 1, v30) == 1)
  {
    LODWORD(v217) = a1 & 1;
    uint64_t v46 = 0xD000000000000014;
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    uint64_t v47 = *(void *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason);
    unsigned int v48 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason + 8);
    if (v48 == 255)
    {
LABEL_45:
      uint64_t aBlock = 0;
      unint64_t v219 = 0xE000000000000000;
      outlined copy of PubSubTopic.ClosedReason?(v47, v48);
      _StringGuts.grow(_:)(27);
      if (v217) {
        uint64_t v97 = 0x6873696C627550;
      }
      else {
        uint64_t v97 = 0x6269726373627553;
      }
      if (v217) {
        unint64_t v98 = 0xE700000000000000;
      }
      else {
        unint64_t v98 = 0xE900000000000065;
      }
      unint64_t v99 = v98;
      String.append(_:)(*(Swift::String *)&v97);
      swift_bridgeObjectRelease();
      v100._uint64_t countAndFlagsBits = 0xD000000000000019;
      v100._object = (void *)0x80000001B1162A20;
      String.append(_:)(v100);
      uint64_t v46 = aBlock;
      unint64_t v49 = v219;
      unsigned int v50 = 2;
      uint64_t v47 = 5;
    }
    else if (v48 == 2)
    {
      unint64_t v49 = 0x80000001B1162A60;
      unsigned int v50 = 2;
      switch(v47)
      {
        case 0:
          uint64_t aBlock = 0;
          unint64_t v219 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          swift_bridgeObjectRelease();
          uint64_t aBlock = 0xD00000000000001CLL;
          unint64_t v219 = 0x80000001B1162B10;
          if (v217) {
            uint64_t v51 = 0x6873696C627550;
          }
          else {
            uint64_t v51 = 0x6269726373627553;
          }
          if (v217) {
            unint64_t v52 = 0xE700000000000000;
          }
          else {
            unint64_t v52 = 0xE900000000000065;
          }
          unint64_t v53 = v52;
          String.append(_:)(*(Swift::String *)&v51);
          swift_bridgeObjectRelease();
          v54._uint64_t countAndFlagsBits = 0x206D616572747320;
          v54._object = (void *)0xEE003D6369706F74;
          String.append(_:)(v54);
          uint64_t v55 = *(void *)(v2 + 16);
          uint64_t v56 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v57._uint64_t countAndFlagsBits = v55;
          v57._object = v56;
          String.append(_:)(v57);
          swift_bridgeObjectRelease();
          uint64_t v47 = 0;
          uint64_t v46 = aBlock;
          unint64_t v49 = v219;
          unsigned int v50 = 2;
          break;
        case 1:
          uint64_t aBlock = 0;
          unint64_t v219 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          uint64_t aBlock = 0xD000000000000014;
          unint64_t v219 = 0x80000001B1162AF0;
          if (v217) {
            uint64_t v167 = 0x6873696C627550;
          }
          else {
            uint64_t v167 = 0x6269726373627553;
          }
          if (v217) {
            unint64_t v168 = 0xE700000000000000;
          }
          else {
            unint64_t v168 = 0xE900000000000065;
          }
          unint64_t v169 = v168;
          String.append(_:)(*(Swift::String *)&v167);
          swift_bridgeObjectRelease();
          v170._uint64_t countAndFlagsBits = 0x206D616572747320;
          v170._object = (void *)0xEE003D6369706F74;
          String.append(_:)(v170);
          uint64_t v171 = *(void *)(v2 + 16);
          v172 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v173._uint64_t countAndFlagsBits = v171;
          v173._object = v172;
          String.append(_:)(v173);
          swift_bridgeObjectRelease();
          uint64_t v46 = aBlock;
          unint64_t v49 = v219;
          unsigned int v50 = 2;
          uint64_t v47 = 1;
          break;
        case 2:
          uint64_t aBlock = 0;
          unint64_t v219 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          uint64_t aBlock = 0xD000000000000014;
          unint64_t v219 = 0x80000001B1162AD0;
          if (v217) {
            uint64_t v174 = 0x6873696C627550;
          }
          else {
            uint64_t v174 = 0x6269726373627553;
          }
          if (v217) {
            unint64_t v175 = 0xE700000000000000;
          }
          else {
            unint64_t v175 = 0xE900000000000065;
          }
          unint64_t v176 = v175;
          String.append(_:)(*(Swift::String *)&v174);
          swift_bridgeObjectRelease();
          v177._uint64_t countAndFlagsBits = 0x206D616572747320;
          v177._object = (void *)0xEE003D6369706F74;
          String.append(_:)(v177);
          uint64_t v178 = *(void *)(v2 + 16);
          v179 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v180._uint64_t countAndFlagsBits = v178;
          v180._object = v179;
          String.append(_:)(v180);
          swift_bridgeObjectRelease();
          uint64_t v46 = aBlock;
          unint64_t v49 = v219;
          uint64_t v47 = 2;
          unsigned int v50 = 2;
          break;
        case 3:
          break;
        case 4:
          uint64_t aBlock = 0;
          unint64_t v219 = 0xE000000000000000;
          uint64_t v47 = 4;
          outlined copy of PubSubTopic.ClosedReason(4, 2u);
          _StringGuts.grow(_:)(76);
          v181._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
          v181._object = (void *)0x80000001B1162A80;
          String.append(_:)(v181);
          uint64_t v182 = *(void *)(v2 + 16);
          v183 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v184._uint64_t countAndFlagsBits = v182;
          v184._object = v183;
          String.append(_:)(v184);
          swift_bridgeObjectRelease();
          uint64_t v46 = aBlock;
          unint64_t v49 = v219;
          break;
        case 5:
          goto LABEL_45;
        default:
          goto LABEL_38;
      }
    }
    else
    {
LABEL_38:
      uint64_t aBlock = 0;
      unint64_t v219 = 0xE000000000000000;
      outlined copy of PubSubTopic.ClosedReason(v47, v48);
      _StringGuts.grow(_:)(42);
      v88._uint64_t countAndFlagsBits = 0x7463657078656E55;
      v88._object = (void *)0xEC000000202C6465;
      String.append(_:)(v88);
      if (v217) {
        uint64_t v89 = 0x6873696C627550;
      }
      else {
        uint64_t v89 = 0x6269726373627553;
      }
      if (v217) {
        unint64_t v90 = 0xE700000000000000;
      }
      else {
        unint64_t v90 = 0xE900000000000065;
      }
      unint64_t v91 = v90;
      String.append(_:)(*(Swift::String *)&v89);
      swift_bridgeObjectRelease();
      v92._uint64_t countAndFlagsBits = 0xD000000000000010;
      v92._object = (void *)0x80000001B1162A40;
      String.append(_:)(v92);
      uint64_t v224 = v47;
      LOBYTE(v225) = v48;
      _print_unlocked<A, B>(_:_:)();
      v93._uint64_t countAndFlagsBits = 0x3D6369706F74202CLL;
      v93._object = (void *)0xE800000000000000;
      String.append(_:)(v93);
      uint64_t v94 = *(void *)(v2 + 16);
      uint64_t v95 = *(void **)(v2 + 24);
      swift_bridgeObjectRetain();
      v96._uint64_t countAndFlagsBits = v94;
      v96._object = v95;
      String.append(_:)(v96);
      swift_bridgeObjectRelease();
      uint64_t v46 = aBlock;
      unint64_t v49 = v219;
      unsigned int v50 = v48;
    }
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v101 = type metadata accessor for Logger();
    __swift_project_value_buffer(v101, (uint64_t)log);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v102, v103))
    {
      uint64_t v104 = swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      uint64_t aBlock = v105;
      *(_DWORD *)uint64_t v104 = 136315650;
      if (v217) {
        uint64_t v106 = 0x6873696C627550;
      }
      else {
        uint64_t v106 = 0x6269726373627553;
      }
      if (v217) {
        unint64_t v107 = 0xE700000000000000;
      }
      else {
        unint64_t v107 = 0xE900000000000065;
      }
      uint64_t v217 = v47;
      uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, &aBlock);
      LODWORD(v216) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v104 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v49, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v104 + 22) = 2080;
      uint64_t v108 = PubSubTopic.description.getter();
      uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, &aBlock);
      unsigned int v50 = v216;
      uint64_t v47 = v217;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v102, v103, "Service closed %s stream, reason='%s', %s", (uint8_t *)v104, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v105, -1, -1);
      MEMORY[0x1B3EA39E0](v104, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    PubSubTopic.close(reason:description:)(v47, v50, v46, v49);
    outlined consume of PubSubTopic.ClosedReason(v47, v50);
    return swift_bridgeObjectRelease();
  }
  uint64_t v58 = (uint64_t)v29;
  uint64_t v59 = v216;
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v58, v216, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v59, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    int v72 = a1 & 1;
    uint64_t v73 = v217;
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v42, v217, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) != 4)
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)log);
      uint64_t v75 = v214;
      _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v73, v214, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      swift_retain_n();
      uint64_t v76 = Logger.logObject.getter();
      int v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, (os_log_type_t)v77))
      {
        LODWORD(v212) = v77;
        uint64_t v78 = swift_slowAlloc();
        uint64_t v213 = swift_slowAlloc();
        uint64_t aBlock = v213;
        *(_DWORD *)uint64_t v78 = 136315906;
        if (v72) {
          uint64_t v79 = 0x6873696C627550;
        }
        else {
          uint64_t v79 = 0x6269726373627553;
        }
        if (v72) {
          unint64_t v80 = 0xE700000000000000;
        }
        else {
          unint64_t v80 = 0xE900000000000065;
        }
        uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v78 + 12) = 2080;
        uint64_t v81 = (uint64_t)v215;
        _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v75, (uint64_t)v215, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        uint64_t v82 = v206;
        uint64_t v83 = v207;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v206 + 56))(v81, 0, 1, v207);
        uint64_t v84 = v81;
        uint64_t v85 = v208;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v84, v208, &demangling cache variable for type metadata for PluginConnectError?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v85, 1, v83) == 1)
        {
          uint64_t v86 = 7104878;
          unint64_t v87 = 0xE300000000000000;
        }
        else
        {
          uint64_t v144 = v197;
          _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v85, v197, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
          _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v144, v196, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
          uint64_t v86 = String.init<A>(reflecting:)();
          unint64_t v87 = v145;
          outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v144, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        }
        outlined destroy of UUID?((uint64_t)v215, &demangling cache variable for type metadata for PluginConnectError?);
        uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v75, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        *(_WORD *)(v78 + 22) = 2080;
        PubSubTopic.seqNumWatermark.getter();
        uint64_t v146 = Dictionary.description.getter();
        unint64_t v148 = v147;
        swift_bridgeObjectRelease();
        uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v148, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v78 + 32) = 2080;
        uint64_t v149 = PubSubTopic.description.getter();
        uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v150, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v76, (os_log_type_t)v212, "%s stream failed with connection error, error=%s seqNumWatermark=%s %s", (uint8_t *)v78, 0x2Au);
        uint64_t v151 = v213;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v151, -1, -1);
        MEMORY[0x1B3EA39E0](v78, -1, -1);

        uint64_t v59 = v216;
        uint64_t v73 = v217;
      }
      else
      {
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v75, (uint64_t (*)(void))type metadata accessor for PluginConnectError);

        swift_release_n();
      }
    }
    uint64_t v152 = PubSubTopic.seqNumWatermark.getter();
    uint64_t aBlock = 0;
    unint64_t v219 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    if (v72) {
      uint64_t v153 = 0x6873696C627550;
    }
    else {
      uint64_t v153 = 0x6269726373627553;
    }
    if (v72) {
      unint64_t v154 = 0xE700000000000000;
    }
    else {
      unint64_t v154 = 0xE900000000000065;
    }
    unint64_t v155 = v154;
    String.append(_:)(*(Swift::String *)&v153);
    swift_bridgeObjectRelease();
    v156._uint64_t countAndFlagsBits = 0xD000000000000024;
    v156._object = (void *)0x80000001B1162B30;
    String.append(_:)(v156);
    uint64_t v158 = aBlock;
    unint64_t v157 = v219;
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    PubSubTopic.close(reason:description:)(v152, 0, v158, v157);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v73, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v59, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  }
  LODWORD(v208) = *(unsigned __int8 *)v42;
  v215 = (char *)v42[1];
  uint64_t v206 = v42[2];
  uint64_t v214 = v42[3];
  uint64_t v60 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt;
  LODWORD(v217) = a1 & 1;
  if (a1) {
    uint64_t v60 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt;
  }
  uint64_t v207 = *(void *)(v2 + *v60);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = __swift_project_value_buffer(v61, (uint64_t)log);
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v59, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  uint64_t v197 = v62;
  uint64_t v63 = Logger.logObject.getter();
  int v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, (os_log_type_t)v64))
  {
    int v194 = v64;
    os_log_t v195 = v63;
    uint64_t v196 = v44;
    uint64_t v65 = swift_slowAlloc();
    uint64_t v193 = swift_slowAlloc();
    uint64_t aBlock = v193;
    *(_DWORD *)uint64_t v65 = 136315650;
    if (v217) {
      uint64_t v66 = 0x6873696C627550;
    }
    else {
      uint64_t v66 = 0x6269726373627553;
    }
    if (v217) {
      unint64_t v67 = 0xE700000000000000;
    }
    else {
      unint64_t v67 = 0xE900000000000065;
    }
    uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 12) = 2048;
    uint64_t v224 = v207;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v65 + 22) = 2080;
    uint64_t v68 = v213;
    _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v39, v213, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v68, 0, 1, v30);
    uint64_t v69 = v212;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v68, v212, &demangling cache variable for type metadata for PluginRpcError?);
    if (v45((char *)v69, 1, v30) == 1)
    {
      uint64_t v70 = 7104878;
      unint64_t v71 = 0xE300000000000000;
    }
    else
    {
      _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v69, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v36, v205, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      uint64_t v70 = String.init<A>(reflecting:)();
      unint64_t v71 = v113;
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    }
    uint64_t v112 = v214;
    uint64_t v111 = v215;
    outlined destroy of UUID?(v68, &demangling cache variable for type metadata for PluginRpcError?);
    uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    os_log_t v114 = v195;
    _os_log_impl(&dword_1B0DF7000, v195, (os_log_type_t)v194, "%s stream attempt #%ld failed, error=%s", (uint8_t *)v65, 0x20u);
    uint64_t v115 = v193;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v115, -1, -1);
    MEMORY[0x1B3EA39E0](v65, -1, -1);

    uint64_t v44 = v196;
    uint64_t v59 = v216;
  }
  else
  {
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for PluginRpcError);

    uint64_t v112 = v214;
    uint64_t v111 = v215;
  }
  if (*(unsigned __int8 *)(v44 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 2u)
  {
    uint64_t aBlock = 0;
    unint64_t v219 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    uint64_t v224 = aBlock;
    unint64_t v225 = v219;
    if (v217) {
      uint64_t v125 = 0x6873696C627550;
    }
    else {
      uint64_t v125 = 0x6269726373627553;
    }
    if (v217) {
      unint64_t v126 = 0xE700000000000000;
    }
    else {
      unint64_t v126 = 0xE900000000000065;
    }
    unint64_t v127 = v126;
    String.append(_:)(*(Swift::String *)&v125);
    swift_bridgeObjectRelease();
    v128._uint64_t countAndFlagsBits = 0xD000000000000028;
    v128._object = (void *)0x80000001B1162B60;
    String.append(_:)(v128);
    LOBYTE(aBlock) = v208;
    unint64_t v219 = (unint64_t)v111;
    v220 = (uint64_t (*)())v206;
    v221 = (void *)v112;
    v129._uint64_t countAndFlagsBits = PluginRpcStatus.description.getter();
    String.append(_:)(v129);
    swift_bridgeObjectRelease();
    v130._uint64_t countAndFlagsBits = 39;
    v130._object = (void *)0xE100000000000000;
    String.append(_:)(v130);
    uint64_t v132 = v224;
    unint64_t v131 = v225;
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    uint64_t v143 = 5;
    goto LABEL_125;
  }
  if (v208 == 14)
  {
    swift_retain_n();
    uint64_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v118 = swift_slowAlloc();
      uint64_t v119 = swift_slowAlloc();
      uint64_t aBlock = v119;
      *(_DWORD *)uint64_t v118 = 136315394;
      PubSubTopic.seqNumWatermark.getter();
      uint64_t v120 = Dictionary.description.getter();
      unint64_t v122 = v121;
      swift_bridgeObjectRelease();
      uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v122, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v118 + 12) = 2080;
      uint64_t v123 = PubSubTopic.description.getter();
      uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, &aBlock);
      uint64_t v111 = v215;
      uint64_t v59 = v216;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v116, v117, "Server bouncing, seqNum-watermark=%s %s", (uint8_t *)v118, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v119, -1, -1);
      MEMORY[0x1B3EA39E0](v118, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v159 = PubSubTopic.seqNumWatermark.getter();
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    uint64_t v143 = v159;
    unsigned int v164 = 1;
    uint64_t v165 = 0x6220726576726553;
    unint64_t v166 = 0xEF676E69636E756FLL;
    goto LABEL_126;
  }
  if (v207 >= *(void *)(v44 + 56))
  {
    uint64_t aBlock = 0;
    unint64_t v219 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    if (v217) {
      uint64_t v160 = 0x6873696C627550;
    }
    else {
      uint64_t v160 = 0x6269726373627553;
    }
    if (v217) {
      unint64_t v161 = 0xE700000000000000;
    }
    else {
      unint64_t v161 = 0xE900000000000065;
    }
    unint64_t v162 = v161;
    String.append(_:)(*(Swift::String *)&v160);
    swift_bridgeObjectRelease();
    v163._uint64_t countAndFlagsBits = 0xD000000000000018;
    v163._object = (void *)0x80000001B1162B90;
    String.append(_:)(v163);
    uint64_t v132 = aBlock;
    unint64_t v131 = v219;
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    uint64_t v143 = 0;
LABEL_125:
    unsigned int v164 = 2;
    uint64_t v165 = v132;
    unint64_t v166 = v131;
LABEL_126:
    PubSubTopic.close(reason:description:)(v143, v164, v165, v166);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v59, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  }
  v133 = v198;
  static DispatchTime.now()();
  double v134 = *(double *)(v44 + 64);
  MEMORY[0x1B3EA17C0](v133, v134);
  uint64_t v135 = *(void (**)(char *, uint64_t))(v211 + 8);
  v211 += 8;
  v135(v133, v210);
  swift_retain_n();
  uint64_t v136 = Logger.logObject.getter();
  os_log_type_t v137 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v136, v137))
  {
    uint64_t v138 = swift_slowAlloc();
    uint64_t v139 = swift_slowAlloc();
    uint64_t aBlock = v139;
    *(_DWORD *)uint64_t v138 = 136315394;
    int v140 = v217;
    if (v217) {
      uint64_t v141 = 0x6873696C627550;
    }
    else {
      uint64_t v141 = 0x6269726373627553;
    }
    if (v217) {
      unint64_t v142 = 0xE700000000000000;
    }
    else {
      unint64_t v142 = 0xE900000000000065;
    }
    uint64_t v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v138 + 12) = 2048;
    uint64_t v224 = *(void *)&v134;
    uint64_t v111 = v215;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v136, v137, "Will retry %s stream in %f seconds", (uint8_t *)v138, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v139, -1, -1);
    MEMORY[0x1B3EA39E0](v138, -1, -1);
  }
  else
  {

    swift_release_n();
    int v140 = v217;
  }
  v185 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState;
  if (v140) {
    v185 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState;
  }
  *(unsigned char *)(v44 + *v185) = 1;
  uint64_t v186 = swift_allocObject();
  swift_weakInit();
  uint64_t v187 = swift_allocObject();
  *(void *)(v187 + 16) = v186;
  *(unsigned char *)(v187 + 24) = v140;
  v222 = partial apply for closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:);
  uint64_t v223 = v187;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  unint64_t v219 = 1107296256;
  v220 = thunk for @escaping @callee_guaranteed () -> ();
  v221 = &block_descriptor_105_0;
  v188 = _Block_copy(&aBlock);
  swift_retain();
  v189 = v199;
  static DispatchQoS.unspecified.getter();
  uint64_t v224 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v190 = v201;
  uint64_t v191 = v204;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v192 = v209;
  MEMORY[0x1B3EA2180](v209, v189, v190, v188);
  _Block_release(v188);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v203 + 8))(v190, v191);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v189, v202);
  v135(v192, v210);
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v216, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (a2)
    {
      uint64_t v7 = *(void *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt);
      BOOL v5 = __OFADD__(v7, 1);
      uint64_t v8 = v7 + 1;
      if (!v5)
      {
        *(void *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = v8;
        PubSubTopic.setupPublishStream()();
        return swift_release();
      }
    }
    else
    {
      uint64_t v4 = *(void *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt);
      BOOL v5 = __OFADD__(v4, 1);
      uint64_t v6 = v4 + 1;
      if (!v5)
      {
        *(void *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt) = v6;
        PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(0, 0);
        return swift_release();
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void closure #2 in PubSubTopic.setupPublishStream()(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v107 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
  uint64_t v108 = *(void *)(v9 - 8);
  uint64_t v109 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v106 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
  uint64_t v111 = *(void *)(v11 - 8);
  uint64_t v112 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v110 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = type metadata accessor for CP_PublishResponse(0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)a1;
  if (*(unsigned char *)(a1 + 8) != 1)
  {
LABEL_30:
    uint64_t v66 = *(void *)(a1 + 16);
    unint64_t v65 = *(void *)(a1 + 24);
    *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
    uint64_t v67 = one-time initialization token for log;
    swift_bridgeObjectRetain();
    if (v67 != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)log);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v69))
    {
      uint64_t v70 = swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      v116[0] = v71;
      *(_DWORD *)uint64_t v70 = 134218498;
      id v115 = (id)v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v70 + 12) = 2080;
      swift_bridgeObjectRetain();
      id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v70 + 22) = 2080;
      uint64_t v72 = PubSubTopic.description.getter();
      id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v33, v69, "[Publish] Failed, unexpected response-status, code=%ld error=%s %s", (uint8_t *)v70, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v71, -1, -1);
      uint64_t v74 = v70;
LABEL_34:
      MEMORY[0x1B3EA39E0](v74, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    return;
  }
  switch(v23)
  {
    case 1:
      *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
      dequeue #1 () in closure #2 in PubSubTopic.setupPublishStream()(a1, a2);
      uint64_t v24 = *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
      BOOL v25 = __CFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
      }
      else
      {
        *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) = v26;
        if (one-time initialization token for log == -1) {
          goto LABEL_5;
        }
      }
      swift_once();
LABEL_5:
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)log);
      _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(a1, (uint64_t)v22, type metadata accessor for CP_PublishResponse);
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      int v29 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v28, (os_log_type_t)v29))
      {
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v22, type metadata accessor for CP_PublishResponse);

        goto LABEL_50;
      }
      LODWORD(v112) = v29;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v116[0] = v31;
      *(_DWORD *)uint64_t v30 = 134218242;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v22[*(int *)(v20 + 28)], (uint64_t)v15, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v17 + 48))(v15, 1, v16) == 1)
      {
        *uint64_t v19 = 0;
        v19[1] = 0;
        UnknownStorage.init()();
        outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for CP_SequenceNumber?);
      }
      else
      {
        _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v15, (uint64_t)v19, type metadata accessor for CP_SequenceNumber);
      }
      uint64_t v95 = (void *)v19[1];
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, type metadata accessor for CP_SequenceNumber);
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v22, type metadata accessor for CP_PublishResponse);
      id v115 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v96 = PubSubTopic.description.getter();
      id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v33 = v28;
      _os_log_impl(&dword_1B0DF7000, v28, (os_log_type_t)v112, "[Publish] Ignored, responseSeqNum=%llu %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v31, -1, -1);
      uint64_t v74 = v30;
      goto LABEL_34;
    case 2:
      *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)log);
      swift_retain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v33, v34)) {
        goto LABEL_49;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v116[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v37 = PubSubTopic.description.getter();
      id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v39 = "[Publish] Rejected, upcoming server-bounce, %s";
      goto LABEL_45;
    case 3:
      *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)log);
      swift_retain_n();
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v116[0] = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        uint64_t v45 = PubSubTopic.description.getter();
        id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v41, v42, "[Publish] Failed, unknown-topic, %s", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v44, -1, -1);
        MEMORY[0x1B3EA39E0](v43, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      PubSubTopic.closeStreams(reason:)(2, 2);
      return;
    case 4:
      uint64_t v23 = 5;
      goto LABEL_30;
    case 5:
      uint64_t v48 = *(void *)(a1 + 16);
      unint64_t v47 = *(void *)(a1 + 24);
      *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
      uint64_t v49 = one-time initialization token for log;
      swift_bridgeObjectRetain();
      if (v49 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      uint64_t v51 = __swift_project_value_buffer(v50, (uint64_t)log);
      swift_retain_n();
      swift_bridgeObjectRetain();
      unint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = v48;
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        v116[0] = v56;
        *(_DWORD *)uint64_t v55 = 136315394;
        swift_bridgeObjectRetain();
        id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v47, v116);
        uint64_t v105 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v55 + 12) = 2080;
        uint64_t v57 = PubSubTopic.description.getter();
        id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v52, v53, "[Publish] Failed, not-authorized, error=%s %s", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v56, -1, -1);
        MEMORY[0x1B3EA39E0](v55, -1, -1);
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      if (*((unsigned char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) != 1)
      {
        *((unsigned char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 1;
        swift_retain();
        uint64_t v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v81 = 134217984;
          v116[0] = a2[8];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_1B0DF7000, v79, v80, "Will retry Subscribe stream in %f seconds", v81, 0xCu);
          MEMORY[0x1B3EA39E0](v81, -1, -1);
        }
        else
        {

          swift_release();
        }
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSTimer);
        id v82 = objc_msgSend(self, sel_mainRunLoop);
        uint64_t v83 = type metadata accessor for NSRunLoop.SchedulerOptions();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v8, 1, 1, v83);
        uint64_t v84 = static NSTimer.publish(every:tolerance:on:in:options:)();

        outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
        v116[0] = v84;
        type metadata accessor for NSTimer.TimerPublisher();
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher, MEMORY[0x1E4F28000]);
        uint64_t v85 = ConnectablePublisher.autoconnect()();
        swift_release();
        v116[0] = v85;
        id v115 = *(id *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
        id v86 = v115;
        uint64_t v87 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
        uint64_t v88 = (uint64_t)v107;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v107, 1, 1, v87);
        id v89 = v86;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
        lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
        unint64_t v90 = v106;
        Publisher.receive<A>(on:options:)();
        outlined destroy of UUID?(v88, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

        swift_release();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
        uint64_t v91 = v109;
        Swift::String v92 = v110;
        Publisher.first()();
        (*(void (**)(char *, uint64_t))(v108 + 8))(v90, v91);
        swift_allocObject();
        swift_weakInit();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
        uint64_t v93 = v112;
        uint64_t v94 = Publisher<>.sink(receiveValue:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v111 + 8))(v92, v93);
        *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeNotAuthorizedCancellable) = v94;
        swift_release();
        return;
      }
      swift_retain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        v116[0] = v36;
        *(_DWORD *)uint64_t v35 = 136315138;
        uint64_t v77 = PubSubTopic.description.getter();
        id v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v39 = "[Publish] Already retrying subscribe stream, %s";
LABEL_45:
        _os_log_impl(&dword_1B0DF7000, v33, v34, v39, v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v36, -1, -1);
        uint64_t v74 = (uint64_t)v35;
        goto LABEL_34;
      }
LABEL_49:

LABEL_50:
      swift_release_n();
      return;
    case 6:
      uint64_t v20 = *(void *)(a1 + 16);
      unint64_t v16 = *(void *)(a1 + 24);
      *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
      uint64_t v59 = (void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
      swift_beginAccess();
      unint64_t v60 = *v59;
      if (!(v60 >> 62))
      {
        uint64_t v61 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v61) {
          goto LABEL_23;
        }
LABEL_58:
        swift_bridgeObjectRelease();
        uint64_t v8 = 0;
        goto LABEL_59;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_58;
      }
LABEL_23:
      if ((v60 & 0xC000000000000001) != 0)
      {
        uint64_t v62 = MEMORY[0x1B3EA25C0](0, v60);
      }
      else
      {
        if (!*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x1B10CE6CCLL);
        }
        uint64_t v62 = *(void *)(v60 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v63 = *(char **)(v62 + 40);
      int v64 = *(unsigned __int8 *)(v62 + 48);
      swift_release();
      if (v64) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = v63;
      }
LABEL_59:
      if (one-time initialization token for log != -1) {
LABEL_65:
      }
        swift_once();
      uint64_t v98 = type metadata accessor for Logger();
      __swift_project_value_buffer(v98, (uint64_t)log);
      swift_retain_n();
      swift_bridgeObjectRetain();
      unint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        uint64_t v113 = (uint64_t)v8;
        uint64_t v114 = v102;
        *(_DWORD *)uint64_t v101 = 134218498;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v101 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v16, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v101 + 22) = 2080;
        uint64_t v103 = PubSubTopic.description.getter();
        uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, &v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v99, v100, "[Publish] Failed, quota-exceeded, seqNumRejected=%llu error=%s %s", (uint8_t *)v101, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v102, -1, -1);
        MEMORY[0x1B3EA39E0](v101, -1, -1);
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      PubSubTopic.closeStreams(reason:)(3, 2);
      return;
    case 7:
      uint64_t v23 = 8;
      goto LABEL_30;
    case 8:
      *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
      dequeue #1 () in closure #2 in PubSubTopic.setupPublishStream()(a1, a2);
      uint64_t v75 = *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
      BOOL v25 = __CFADD__(v75, 1);
      uint64_t v76 = v75 + 1;
      if (!v25)
      {
        *(void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) = v76;
        return;
      }
      __break(1u);
      goto LABEL_65;
    default:
      goto LABEL_30;
  }
}

uint64_t dequeue #1 () in closure #2 in PubSubTopic.setupPublishStream()(uint64_t a1, void *a2)
{
  uint64_t v109 = a2;
  uint64_t v3 = type metadata accessor for CP_PublishResponse(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v97 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v102 = *(void *)(v5 - 8);
  uint64_t v103 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v98 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v104 = (char *)&v94 - v8;
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v106 = *(void *)(v9 - 8);
  uint64_t v107 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v105 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v100 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v100);
  uint64_t v96 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v99 = (char *)&v94 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v94 - v21;
  uint64_t v23 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (uint64_t *)((char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v25);
  int v29 = (uint64_t *)((char *)&v94 - v28);
  uint64_t v95 = v3;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v3 + 28), (uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v30(v22, 1, v23) == 1)
  {
    void *v29 = 0;
    v29[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v22, (uint64_t)v29, type metadata accessor for CP_SequenceNumber);
  }
  uint64_t v108 = v29;
  uint64_t v31 = (void *)((char *)v109 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  uint64_t v32 = *v31;
  if (!((unint64_t)*v31 >> 62))
  {
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_6;
    }
LABEL_43:
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)log);
    uint64_t v84 = v97;
    _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(a1, v97, type metadata accessor for CP_PublishResponse);
    swift_retain_n();
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v87 = swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      v113[0] = v107;
      *(_DWORD *)uint64_t v87 = 134218242;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v84 + *(int *)(v95 + 28), (uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
      if (v30(v20, 1, v23) == 1)
      {
        void *v27 = 0;
        v27[1] = 0;
        UnknownStorage.init()();
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
      }
      else
      {
        _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v20, (uint64_t)v27, type metadata accessor for CP_SequenceNumber);
      }
      uint64_t v88 = v27[1];
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v27, type metadata accessor for CP_SequenceNumber);
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v97, type metadata accessor for CP_PublishResponse);
      uint64_t v111 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v87 + 12) = 2080;
      uint64_t v89 = PubSubTopic.description.getter();
      uint64_t v111 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v85, v86, "[Publish] Unexpected, queue empty, seqNumAck=%llu %s", (uint8_t *)v87, 0x16u);
      uint64_t v91 = v107;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v91, -1, -1);
      MEMORY[0x1B3EA39E0](v87, -1, -1);

      uint64_t v61 = (uint64_t)v108;
    }
    else
    {
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v84, type metadata accessor for CP_PublishResponse);
      swift_release_n();

      uint64_t v61 = (uint64_t)v108;
    }
    return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v61, type metadata accessor for CP_SequenceNumber);
  }
  swift_bridgeObjectRetain();
  uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v82) {
    goto LABEL_43;
  }
LABEL_6:
  swift_beginAccess();
  uint64_t v33 = *v31;
  if ((unint64_t)*v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v35 = (uint64_t)v108;
  uint64_t v36 = (uint64_t)v104;
  uint64_t v37 = v105;
  uint64_t v38 = v101;
  if (v34)
  {
    uint64_t v33 = *v31;
    if (!((unint64_t)*v31 >> 62))
    {
      uint64_t v39 = v109;
      if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_11;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v92 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v39 = v109;
  if (!v92) {
    goto LABEL_55;
  }
LABEL_11:
  if ((v33 & 0xC000000000000001) != 0)
  {
LABEL_56:
    uint64_t v32 = MEMORY[0x1B3EA25C0](0, v33);
    goto LABEL_14;
  }
  if (!*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v32 = *(void *)(v33 + 32);
  swift_retain();
LABEL_14:
  if (!((unint64_t)*v31 >> 62))
  {
    if (*(void *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  swift_bridgeObjectRetain();
  uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v93)
  {
LABEL_16:
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    swift_endAccess();
    uint64_t v40 = v32 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
    swift_beginAccess();
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v40, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Date?);
    uint64_t v41 = v100;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v13, 1, v100) == 1)
    {
      outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Date?);
      goto LABEL_27;
    }
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v99, v13, v41);
    os_log_type_t v42 = v96;
    static Date.now.getter();
    Date.timeIntervalSince(_:)();
    double v44 = v43;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v38 + 8);
    v45(v42, v41);
    if (v44 <= 0.0)
    {
      unint64_t v47 = 0;
      goto LABEL_24;
    }
    double v46 = v44 * 1000.0;
    if ((~COERCE__INT64(v44 * 1000.0) & 0x7FF0000000000000) != 0)
    {
      if (v46 > -1.0)
      {
        if (v46 < 1.84467441e19)
        {
          unint64_t v47 = (unint64_t)v46;
LABEL_24:
          uint64_t v48 = *(void *)((char *)v39 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporter);
          if (v48) {
            (*(void (**)(unint64_t, void, void, void, void))(*(void *)v48 + 152))(v47, *(void *)((char *)v39 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag), *(void *)((char *)v39 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag + 8), v39[2], v39[3]);
          }
          v45(v99, v41);
LABEL_27:
          if (one-time initialization token for messenger == -1) {
            goto LABEL_28;
          }
          goto LABEL_60;
        }
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        JUMPOUT(0x1B10CF5D8);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_63;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  swift_once();
LABEL_28:
  uint64_t v49 = v107;
  uint64_t v50 = __swift_project_value_buffer(v107, (uint64_t)static Signposts.messenger);
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v37, v50, v49);
  uint64_t v51 = *(void *)(v32 + 16);
  unint64_t v52 = *(void *)(v32 + 24);
  outlined copy of Data._Representation(v51, v52);
  if (OSSignposter.isEnabled.getter())
  {
    specialized OSSignpostID.init<A, B>(hash:using:)(v51, v52, v36);
  }
  else
  {
    OSSignpostID.init(_:)();
    outlined consume of Data._Representation(v51, v52);
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  swift_retain_n();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v53);
  swift_retain_n();
  swift_retain();
  uint64_t v54 = OSSignposter.logHandle.getter();
  int v55 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_release_n();
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v36, v103);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v37, v107);
    uint64_t v61 = v35;
    return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v61, type metadata accessor for CP_SequenceNumber);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v98, v36, v103);
  uint64_t v56 = swift_slowAlloc();
  uint64_t v57 = swift_slowAlloc();
  uint64_t v112 = v57;
  *(_DWORD *)uint64_t v56 = 134218754;
  uint64_t v58 = *(void *)(v32 + 16);
  unint64_t v59 = *(void *)(v32 + 24);
  uint64_t v60 = 0;
  switch(v59 >> 62)
  {
    case 1uLL:
      LODWORD(v60) = HIDWORD(v58) - v58;
      if (__OFSUB__(HIDWORD(v58), v58)) {
        goto LABEL_64;
      }
      uint64_t v60 = (int)v60;
LABEL_38:
      uint64_t v101 = v57;
      LODWORD(v109) = v55;
      uint64_t v111 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v56 + 12) = 2080;
      uint64_t v67 = v39[2];
      unint64_t v66 = v39[3];
      swift_bridgeObjectRetain();
      uint64_t v111 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v66, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 22) = 2048;
      uint64_t v68 = v39[15];
      uint64_t v69 = v39[16];
      __swift_project_boxed_opaque_existential_1(v39 + 12, v68);
      uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 16))(v68, v69);
      swift_release();
      uint64_t v111 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v56 + 32) = 2080;
      swift_beginAccess();
      if (*(unsigned char *)(v32 + 48))
      {
        unint64_t v71 = 0xE300000000000000;
        uint64_t v72 = 7104878;
      }
      else
      {
        uint64_t v110 = *(void *)(v32 + 40);
        uint64_t v72 = String.init<A>(reflecting:)();
        unint64_t v71 = v73;
      }
      uint64_t v74 = (uint64_t)v108;
      uint64_t v75 = v105;
      uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v71, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v76 = v98;
      os_signpost_id_t v77 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1B0DF7000, v54, (os_signpost_type_t)v109, v77, "plugin-ack-received", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu seqNum=%s", (uint8_t *)v56, 0x2Au);
      uint64_t v78 = v101;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v78, -1, -1);
      MEMORY[0x1B3EA39E0](v56, -1, -1);
      swift_release();

      uint64_t v79 = v103;
      os_log_type_t v80 = *(void (**)(char *, uint64_t))(v102 + 8);
      v80(v104, v103);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v75, v107);
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v74, type metadata accessor for CP_SequenceNumber);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v80)(v76, v79);
      break;
    case 2uLL:
      uint64_t v64 = v58 + 16;
      uint64_t v63 = *(void *)(v58 + 16);
      uint64_t v62 = *(void *)(v64 + 8);
      BOOL v65 = __OFSUB__(v62, v63);
      uint64_t v60 = v62 - v63;
      if (!v65) {
        goto LABEL_38;
      }
      goto LABEL_65;
    case 3uLL:
      goto LABEL_38;
    default:
      uint64_t v60 = BYTE6(v59);
      goto LABEL_38;
  }
  return result;
}

void closure #1 in closure #2 in PubSubTopic.setupPublishStream()()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(unsigned char *)(Strong + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) == 2)
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)log);
      swift_retain_n();
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)swift_slowAlloc();
        uint64_t v5 = swift_slowAlloc();
        uint64_t v8 = v5;
        *(_DWORD *)uint64_t v4 = 136315138;
        uint64_t v6 = PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v2, v3, "Skipping Subscribe stream setup, already ready, %s", v4, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v5, -1, -1);
        MEMORY[0x1B3EA39E0](v4, -1, -1);
        swift_release();
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(0, 0);
      swift_release();
    }
  }
}

uint64_t closure #1 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  uint64_t v7 = type metadata accessor for PluginRpcError();
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  uint64_t result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  if (v8 == 1
    && *(unsigned char *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) == 1
    && *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    *(unsigned char *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 3;
  }
  else
  {
    *(unsigned char *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 3;
    return PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(0, a1);
  }
  return result;
}

uint64_t closure #2 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v6 - 8);
  int v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v26 - v20;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
    return outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  }
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v14, (uint64_t)v21, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v21, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v19, (uint64_t)v8, type metadata accessor for CP_Record);
      PubSubTopic.processRecord(_:)(v8);
      uint64_t v24 = type metadata accessor for CP_Record;
      uint64_t v25 = (uint64_t)v8;
    }
    else
    {
      _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v19, (uint64_t)v5, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      PubSubTopic.processTopicUpdate(_:)((uint64_t)v5);
      uint64_t v24 = type metadata accessor for CP_SubscribeResponse.TopicUpdate;
      uint64_t v25 = (uint64_t)v5;
    }
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v19, (uint64_t)v11, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    *(unsigned char *)(v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight) = 0;
    PubSubTopic.processInitializeAck(_:)((uint64_t)v11);
    uint64_t v24 = type metadata accessor for CP_SubscribeResponse.InitializeAck;
    uint64_t v25 = (uint64_t)v11;
  }
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v25, v24);
  return outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v21, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

void PubSubTopic.processInitializeAck(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v4 - 8);
  v284 = (char *)&v269 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1F4188790](v6 - 8);
  v282 = (char *)&v269 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v286 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
  uint64_t v285 = *(void *)(v286 - 8);
  MEMORY[0x1F4188790](v286);
  v283 = (char *)&v269 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
  uint64_t v288 = *(void *)(v289 - 8);
  MEMORY[0x1F4188790](v289);
  v287 = (char *)&v269 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  uint64_t v300 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10 - 8);
  v304 = (uint8_t *)&v269 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v294 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v299 = *(void *)(v294 - 8);
  uint64_t v12 = *(void *)(v299 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v294);
  uint64_t v14 = (char *)&v269 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  v290 = (uint64_t *)((char *)&v269 - v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v277 = (uint64_t)&v269 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v293 = (uint64_t)&v269 - v19;
  uint64_t v292 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v298 = *(void *)(v292 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v292);
  v301 = (uint64_t *)((char *)&v269 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v276 = (uint64_t *)((char *)&v269 - v23);
  MEMORY[0x1F4188790](v22);
  v274 = (uint64_t *)((char *)&v269 - v24);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  v275 = (char *)&v269 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v273 = (uint64_t)&v269 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v291 = (uint64_t)&v269 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
  v278 = (char *)&v269 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v295 = (uint64_t)&v269 - v34;
  uint64_t v297 = type metadata accessor for Date();
  uint64_t v296 = *(void *)(v297 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v297);
  v279 = (char *)&v269 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  v280 = (char *)&v269 - v37;
  uint64_t v303 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  uint64_t v38 = MEMORY[0x1F4188790](v303);
  v302 = (uint64_t *)((char *)&v269 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  os_log_type_t v42 = (char *)&v269 - v41;
  MEMORY[0x1F4188790](v40);
  double v44 = (uint64_t *)((char *)&v269 - v43);
  uint64_t v45 = type metadata accessor for DispatchPredicate();
  uint64_t v46 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v48 = (uint64_t *)((char *)&v269 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v49 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v48 = v49;
  (*(void (**)(void *, void, uint64_t))(v46 + 104))(v48, *MEMORY[0x1E4FBCBF0], v45);
  id v281 = v49;
  LOBYTE(v49) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v46 + 8))(v48, v45);
  if ((v49 & 1) == 0) {
    goto LABEL_146;
  }
  if (one-time initialization token for log != -1) {
LABEL_147:
  }
    swift_once();
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v51 = __swift_project_value_buffer(v50, (uint64_t)log);
  uint64_t v306 = a1;
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(a1, (uint64_t)v44, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  swift_retain_n();
  uint64_t v305 = v51;
  unint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  BOOL v54 = os_log_type_enabled(v52, v53);
  v272 = v14;
  uint64_t v271 = v12;
  if (v54)
  {
    uint64_t v55 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v308 = (void *)v56;
    *(_DWORD *)uint64_t v55 = 136315394;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.InitializeAck);
    uint64_t v57 = Message.debugDescription.getter();
    id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)&v308);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v44, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    *(_WORD *)(v55 + 12) = 2080;
    uint64_t v59 = v2[2];
    unint64_t v60 = v2[3];
    swift_bridgeObjectRetain();
    id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v308);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v52, v53, "[Subscribe] Received InitializeAck response=%s topic=%s", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v56, -1, -1);
    MEMORY[0x1B3EA39E0](v55, -1, -1);
  }
  else
  {
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v44, type metadata accessor for CP_SubscribeResponse.InitializeAck);

    swift_release_n();
  }
  if (*((unsigned __int8 *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 2u)
  {
    swift_retain_n();
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v74))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      v308 = (void *)v75;
      *(_DWORD *)uint64_t v66 = 136315138;
      uint64_t v76 = PubSubTopic.description.getter();
      id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)&v308);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v78 = "[Subscribe] Ignoring InitializeAck, unsubscribed while initializing %s";
LABEL_16:
      _os_log_impl(&dword_1B0DF7000, v64, v74, v78, (uint8_t *)v66, 0xCu);
      swift_arrayDestroy();
      uint64_t v73 = v75;
LABEL_17:
      MEMORY[0x1B3EA39E0](v73, -1, -1);
      MEMORY[0x1B3EA39E0](v66, -1, -1);

      return;
    }
LABEL_19:

    swift_release_n();
    return;
  }
  int v61 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_cryptorUpdatedWhileInitializing);
  *((unsigned char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_cryptorUpdatedWhileInitializing) = 0;
  uint64_t v62 = v306;
  if (*(unsigned char *)(v306 + 8) != 1)
  {
LABEL_9:
    _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v62, (uint64_t)v42, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    uint64_t v63 = (uint64_t)v302;
    _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v62, (uint64_t)v302, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    swift_retain_n();
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      v308 = (void *)v67;
      *(_DWORD *)uint64_t v66 = 134218498;
      uint64_t v68 = *(void **)v42;
      BOOL v190 = v42[8] == 1;
      v270 = v2;
      if (v190) {
        uint64_t v68 = (void *)qword_1B1148D78[(void)v68];
      }
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v42, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      id v309 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v66 + 12) = 2080;
      uint64_t v69 = *(void *)(v63 + 16);
      unint64_t v70 = *(void *)(v63 + 24);
      swift_bridgeObjectRetain();
      id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)&v308);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v63, type metadata accessor for CP_SubscribeResponse.InitializeAck);
      *(_WORD *)(v66 + 22) = 2080;
      uint64_t v71 = PubSubTopic.description.getter();
      id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v308);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v64, v65, "[Subscribe] InitializeAck failed, unexpected response-status, code=%ld error=%s %s", (uint8_t *)v66, 0x20u);
      swift_arrayDestroy();
      uint64_t v73 = v67;
      goto LABEL_17;
    }
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v42, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v63, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    goto LABEL_19;
  }
  uint64_t v62 = v306;
  switch(*(void *)v306)
  {
    case 3:
      swift_retain_n();
      unint64_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc();
        uint64_t v93 = swift_slowAlloc();
        v308 = (void *)v93;
        *(_DWORD *)uint64_t v92 = 136315138;
        uint64_t v94 = PubSubTopic.description.getter();
        id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, (uint64_t *)&v308);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v90, v91, "[Subscribe] InitializeAck failed, topic not found, %s", v92, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v93, -1, -1);
        MEMORY[0x1B3EA39E0](v92, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v96 = 2;
      goto LABEL_56;
    case 7:
      uint64_t v79 = *(void *)(v306 + 48);
      int64_t v80 = *(void *)(v79 + 16);
      if (v80)
      {
        v308 = (void *)MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80, 0);
        uint64_t v81 = *(unsigned __int8 *)(v300 + 80);
        uint64_t v303 = v79;
        uint64_t v82 = v79 + ((v81 + 32) & ~v81);
        uint64_t v83 = *(void *)(v300 + 72);
        uint64_t v84 = (uint64_t)v308;
        do
        {
          uint64_t v85 = v304;
          _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v82, (uint64_t)v304, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
          uint64_t v86 = *(void *)v85;
          outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v85, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
          uint64_t v87 = (uint64_t)v2;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v84 + 16) + 1, 1);
            uint64_t v84 = (uint64_t)v308;
          }
          unint64_t v89 = *(void *)(v84 + 16);
          unint64_t v88 = *(void *)(v84 + 24);
          if (v89 >= v88 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
            uint64_t v84 = (uint64_t)v308;
          }
          *(void *)(v84 + 16) = v89 + 1;
          *(void *)(v84 + 8 * v89 + 32) = v86;
          v82 += v83;
          --v80;
          uint64_t v2 = (void *)v87;
        }
        while (v80);
        swift_bridgeObjectRelease();
        swift_retain();
        uint64_t v100 = swift_bridgeObjectRetain();
        unint64_t v101 = specialized Sequence.compactMap<A>(_:)(v100, v87);
        swift_bridgeObjectRelease();
        swift_release();
        if (*(void *)(v101 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, UUID>);
          uint64_t v102 = static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          uint64_t v102 = MEMORY[0x1E4FBC868];
        }
        v308 = (void *)v102;
        uint64_t v120 = swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v120, 1, &v308);
        swift_bridgeObjectRelease();
        swift_retain();
        unint64_t v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v121, v122))
        {
          uint64_t v123 = (uint8_t *)swift_slowAlloc();
          uint64_t v306 = swift_slowAlloc();
          v308 = (void *)v306;
          *(_DWORD *)uint64_t v123 = 136315138;
          v304 = v123 + 4;
          type metadata accessor for UUID();
          unint64_t v124 = v2;
          swift_retain();
          uint64_t v125 = Dictionary.description.getter();
          unint64_t v127 = v126;
          swift_release();
          uint64_t v128 = v125;
          uint64_t v2 = v124;
          id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v127, (uint64_t *)&v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v121, v122, "[Subscribe] Missing encryptionIDs publisherIDToEncryptionIDs=%s", v123, 0xCu);
          uint64_t v129 = v306;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v129, -1, -1);
          MEMORY[0x1B3EA39E0](v123, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        if (v61)
        {
          swift_release();
          swift_retain_n();
          Swift::String v130 = Logger.logObject.getter();
          os_log_type_t v131 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v130, v131))
          {
            uint64_t v132 = (uint8_t *)swift_slowAlloc();
            uint64_t v133 = swift_slowAlloc();
            v308 = (void *)v133;
            *(_DWORD *)uint64_t v132 = 136315138;
            uint64_t v134 = PubSubTopic.description.getter();
            id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, (uint64_t *)&v308);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, v130, v131, "[Subscribe] Retrying, dataCryptorProvider updated while Initialize was in flight %s", v132, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v133, -1, -1);
            MEMORY[0x1B3EA39E0](v132, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          *((unsigned char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 1;
          PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(1, 0);
        }
        else
        {
          uint64_t v136 = *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
          uint64_t v137 = *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
          __swift_project_boxed_opaque_existential_1((void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v136);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 72))(v84, v136, v137);
          swift_release();
          *((unsigned char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 1;
          type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSTimer);
          id v138 = objc_msgSend(self, sel_mainRunLoop);
          uint64_t v139 = type metadata accessor for NSRunLoop.SchedulerOptions();
          uint64_t v140 = (uint64_t)v282;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v282, 1, 1, v139);
          uint64_t v141 = static NSTimer.publish(every:tolerance:on:in:options:)();

          outlined destroy of UUID?(v140, &demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
          v308 = (void *)v141;
          type metadata accessor for NSTimer.TimerPublisher();
          _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher, MEMORY[0x1E4F28000]);
          uint64_t v142 = ConnectablePublisher.autoconnect()();
          swift_release();
          v308 = (void *)v142;
          uint64_t v143 = v281;
          id v309 = v281;
          uint64_t v144 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
          uint64_t v145 = (uint64_t)v284;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 56))(v284, 1, 1, v144);
          id v146 = v143;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
          lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
          unint64_t v147 = v283;
          Publisher.receive<A>(on:options:)();
          outlined destroy of UUID?(v145, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

          swift_release();
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
          unint64_t v148 = v287;
          uint64_t v149 = v286;
          Publisher.first()();
          (*(void (**)(char *, uint64_t))(v285 + 8))(v147, v149);
          swift_allocObject();
          swift_weakInit();
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
          uint64_t v150 = v289;
          uint64_t v151 = Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v288 + 8))(v148, v150);
          *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeMissingEncryptionIDsCancellable) = v151;
          swift_release();
        }
      }
      else
      {
        swift_retain_n();
        uint64_t v107 = Logger.logObject.getter();
        os_log_type_t v108 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v107, v108))
        {
          uint64_t v109 = (uint8_t *)swift_slowAlloc();
          uint64_t v110 = swift_slowAlloc();
          v308 = (void *)v110;
          *(_DWORD *)uint64_t v109 = 136315138;
          uint64_t v111 = PubSubTopic.description.getter();
          id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, (uint64_t *)&v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v107, v108, "[Subscribe] Missing encryptionIDs, empty response from server, %s", v109, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v110, -1, -1);
          MEMORY[0x1B3EA39E0](v109, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        uint64_t v96 = 1;
LABEL_56:
        PubSubTopic.closeStreams(reason:)(v96, 2);
      }
      return;
    case 8:
      uint64_t v97 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState;
      if (*((unsigned char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) == 2)
      {
        swift_retain_n();
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v64, v74))
        {
          uint64_t v66 = swift_slowAlloc();
          uint64_t v75 = swift_slowAlloc();
          v308 = (void *)v75;
          *(_DWORD *)uint64_t v66 = 136315138;
          uint64_t v98 = PubSubTopic.description.getter();
          id v309 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, (uint64_t *)&v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          uint64_t v78 = "[Subscribe] Skipping InitializeAck processing, already ready %s";
          goto LABEL_16;
        }
        goto LABEL_19;
      }
      uint64_t v103 = (uint64_t)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
      swift_beginAccess();
      uint64_t v104 = v295;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v103, v295, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v12 = v296;
      uint64_t v105 = v297;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v296 + 48))(v104, 1, v297) != 1)
      {
        uint64_t v113 = v280;
        (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v280, v104, v105);
        uint64_t v114 = v279;
        static Date.now.getter();
        Date.timeIntervalSince(_:)();
        double v116 = v115;
        os_log_type_t v117 = *(void (**)(char *, uint64_t))(v12 + 8);
        v117(v114, v105);
        uint64_t v106 = v306;
        if (v116 > 0.0)
        {
          double v118 = v116 * 1000.0;
          if ((~COERCE__INT64(v116 * 1000.0) & 0x7FF0000000000000) == 0) {
            goto LABEL_152;
          }
          if (v118 <= -1.0)
          {
LABEL_153:
            __break(1u);
          }
          else if (v118 < 1.84467441e19)
          {
            unint64_t v119 = (unint64_t)v118;
LABEL_60:
            uint64_t v152 = *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporter);
            if (v152) {
              (*(void (**)(unint64_t, void, void, void, void))(*(void *)v152 + 144))(v119, *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag), *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag + 8), v2[2], v2[3]);
            }
            v117(v113, v105);
            uint64_t v153 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
            v12 += 56;
            uint64_t v154 = (uint64_t)v278;
            v153(v278, 1, 1, v105);
            swift_beginAccess();
            outlined assign with take of Date?(v154, v103);
            swift_endAccess();
            goto LABEL_63;
          }
          __break(1u);
LABEL_155:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0x1B10D25F8);
        }
        unint64_t v119 = 0;
        goto LABEL_60;
      }
      outlined destroy of UUID?(v104, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v106 = v306;
LABEL_63:
      *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt) = 0;
      *((unsigned char *)v2 + v97) = 2;
      v308 = *(void **)(v106 + 32);
      swift_bridgeObjectRetain();
      uint64_t v155 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v155);
      uint64_t v300 = (uint64_t)v308;
      uint64_t v156 = v308[2];
      v270 = v2;
      if (v156)
      {
        unint64_t v157 = v2 + 12;
        uint64_t v12 = v300 + 32;
        v302 = v2 + 12;
        do
        {
          uint64_t v159 = *(void *)v12;
          v12 += 8;
          uint64_t v158 = v159;
          swift_getKeyPath();
          swift_getKeyPath();
          static Published.subscript.getter();
          swift_release();
          swift_release();
          if (v308[2])
          {
            specialized __RawDictionaryStorage.find<A>(_:)(v158);
            char v161 = v160;
            swift_bridgeObjectRelease();
            if (v161) {
              goto LABEL_67;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v162 = v2[15];
          uint64_t v163 = v2[16];
          __swift_project_boxed_opaque_existential_1(v157, v162);
          if (v158 == (*(uint64_t (**)(uint64_t, uint64_t))(v163 + 16))(v162, v163)) {
            goto LABEL_67;
          }
          v304 = (uint8_t *)v12;
          swift_getKeyPath();
          swift_getKeyPath();
          unsigned int v164 = (void (*)(void **, void))static Published.subscript.modify();
          unint64_t v166 = v165;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v307 = *v166;
          uint64_t v168 = v307;
          *unint64_t v166 = 0x8000000000000000;
          unint64_t v170 = specialized __RawDictionaryStorage.find<A>(_:)(v158);
          uint64_t v171 = *(void *)(v168 + 16);
          BOOL v172 = (v169 & 1) == 0;
          uint64_t v173 = v171 + v172;
          if (__OFADD__(v171, v172)) {
            goto LABEL_150;
          }
          char v174 = v169;
          if (*(void *)(v168 + 24) >= v173)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              Swift::String v177 = (void *)v307;
              if ((v169 & 1) == 0) {
                goto LABEL_80;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              Swift::String v177 = (void *)v307;
              if ((v174 & 1) == 0) {
                goto LABEL_80;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v173, isUniquelyReferenced_nonNull_native);
            unint64_t v175 = specialized __RawDictionaryStorage.find<A>(_:)(v158);
            if ((v174 & 1) != (v176 & 1)) {
              goto LABEL_155;
            }
            unint64_t v170 = v175;
            Swift::String v177 = (void *)v307;
            if ((v174 & 1) == 0)
            {
LABEL_80:
              v177[(v170 >> 6) + 8] |= 1 << v170;
              uint64_t v178 = 8 * v170;
              *(void *)(v177[6] + v178) = v158;
              *(void *)(v177[7] + v178) = 0;
              uint64_t v179 = v177[2];
              BOOL v180 = __OFADD__(v179, 1);
              uint64_t v181 = v179 + 1;
              if (v180) {
                goto LABEL_151;
              }
              v177[2] = v181;
              goto LABEL_66;
            }
          }
          *(void *)(v177[7] + 8 * v170) = 0;
LABEL_66:
          *unint64_t v166 = (uint64_t)v177;
          swift_bridgeObjectRelease();
          v164(&v308, 0);
          swift_release();
          swift_release();
          uint64_t v2 = v270;
          uint64_t v106 = v306;
          unint64_t v157 = v302;
          uint64_t v12 = (uint64_t)v304;
LABEL_67:
          --v156;
        }
        while (v156);
      }
      swift_bridgeObjectRelease();
      uint64_t v182 = *(void *)(v106 + 32);
      os_log_type_t v42 = *(char **)(v182 + 16);
      if (!v42)
      {
        swift_bridgeObjectRetain();
        double v44 = (void *)MEMORY[0x1E4FBC868];
        goto LABEL_113;
      }
      uint64_t v2 = (void *)(v182 + 32);
      v304 = *(uint8_t **)(v106 + 32);
      swift_bridgeObjectRetain_n();
      a1 = 0;
      double v44 = (void *)MEMORY[0x1E4FBC868];
      do
      {
        uint64_t v14 = (char *)v2[a1];
        uint64_t v184 = *(void *)(v306 + 56);
        uint64_t v185 = *(void *)(v184 + 16);
        if (v185)
        {
          if (*(char **)(v184 + 32) == v14)
          {
            BOOL v186 = 1;
            goto LABEL_100;
          }
          if (v185 != 1)
          {
            uint64_t v187 = 5;
            while (1)
            {
              uint64_t v188 = v187 - 3;
              if (__OFADD__(v187 - 4, 1)) {
                break;
              }
              v189 = *(char **)(v184 + 8 * v187);
              BOOL v186 = v189 == v14;
              ++v187;
              BOOL v190 = v189 == v14 || v188 == v185;
              if (v190) {
                goto LABEL_100;
              }
            }
            __break(1u);
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }
        }
        BOOL v186 = 0;
LABEL_100:
        uint64_t v12 = swift_isUniquelyReferenced_nonNull_native();
        v308 = v44;
        unint64_t v192 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
        uint64_t v193 = v44[2];
        BOOL v194 = (v191 & 1) == 0;
        uint64_t v195 = v193 + v194;
        if (__OFADD__(v193, v194))
        {
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        char v196 = v191;
        if (v44[3] >= v195)
        {
          if (v12)
          {
            double v44 = v308;
            if (v191) {
              goto LABEL_86;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            double v44 = v308;
            if (v196) {
              goto LABEL_86;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v195, v12);
          unint64_t v197 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
          if ((v196 & 1) != (v198 & 1)) {
            goto LABEL_155;
          }
          unint64_t v192 = v197;
          double v44 = v308;
          if (v196)
          {
LABEL_86:
            uint64_t v183 = v44[7] + 16 * v192;
            *(void *)uint64_t v183 = v14;
            *(unsigned char *)(v183 + 8) = v186;
            goto LABEL_87;
          }
        }
        v44[(v192 >> 6) + 8] |= 1 << v192;
        *(void *)(v44[6] + 8 * v192) = v14;
        uint64_t v199 = v44[7] + 16 * v192;
        *(void *)uint64_t v199 = v14;
        *(unsigned char *)(v199 + 8) = v186;
        uint64_t v200 = v44[2];
        BOOL v180 = __OFADD__(v200, 1);
        uint64_t v201 = v200 + 1;
        if (v180) {
          goto LABEL_149;
        }
        void v44[2] = v201;
LABEL_87:
        swift_bridgeObjectRelease();
        ++a1;
      }
      while ((char *)a1 != v42);
      swift_bridgeObjectRelease();
      uint64_t v2 = v270;
      uint64_t v106 = v306;
LABEL_113:
      swift_bridgeObjectRelease();
      uint64_t v202 = v2[15];
      uint64_t v203 = v2[16];
      __swift_project_boxed_opaque_existential_1(v2 + 12, v202);
      uint64_t v204 = (*(uint64_t (**)(uint64_t, uint64_t))(v203 + 16))(v202, v203);
      uint64_t v205 = v2[15];
      uint64_t v206 = v2[16];
      __swift_project_boxed_opaque_existential_1(v2 + 12, v205);
      uint64_t v207 = (*(uint64_t (**)(uint64_t, uint64_t))(v206 + 16))(v205, v206);
      char v208 = swift_isUniquelyReferenced_nonNull_native();
      v308 = v44;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v207, 0, v204, v208);
      uint64_t v209 = (uint64_t)v308;
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      v308 = (void *)v209;
      swift_retain();
      uint64_t v306 = v209;
      swift_bridgeObjectRetain();
      static Published.subscript.setter();
      uint64_t v210 = v106 + *(int *)(v303 + 48);
      uint64_t v211 = v291;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v210, v291, &demangling cache variable for type metadata for CP_SequenceNumber?);
      uint64_t v212 = v298;
      uint64_t v213 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v298 + 48);
      uint64_t v214 = v292;
      LODWORD(v204) = v213(v211, 1, v292);
      outlined destroy of UUID?(v211, &demangling cache variable for type metadata for CP_SequenceNumber?);
      uint64_t v215 = v294;
      if (v204 != 1)
      {
        uint64_t v216 = v273;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v210, v273, &demangling cache variable for type metadata for CP_SequenceNumber?);
        uint64_t v217 = v214;
        if (v213(v216, 1, v214) == 1)
        {
          v218 = v274;
          void *v274 = 0;
          v218[1] = 0;
          UnknownStorage.init()();
          outlined destroy of UUID?(v216, &demangling cache variable for type metadata for CP_SequenceNumber?);
        }
        else
        {
          v218 = v274;
          _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v216, (uint64_t)v274, type metadata accessor for CP_SequenceNumber);
        }
        uint64_t v219 = (uint64_t)v275;
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v218, type metadata accessor for CP_SequenceNumber);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v210, v219, &demangling cache variable for type metadata for CP_SequenceNumber?);
        if (v213(v219, 1, v217) == 1)
        {
          v220 = v276;
          void *v276 = 0;
          v220[1] = 0;
          UnknownStorage.init()();
          outlined destroy of UUID?(v219, &demangling cache variable for type metadata for CP_SequenceNumber?);
        }
        else
        {
          v220 = v276;
          _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v219, (uint64_t)v276, type metadata accessor for CP_SequenceNumber);
        }
        uint64_t v221 = v220[1];
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v220, type metadata accessor for CP_SequenceNumber);
        if (v221)
        {
          *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum) = v221;
          *(void *)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) = v221;
          swift_retain_n();
          v222 = Logger.logObject.getter();
          os_log_type_t v223 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v222, v223))
          {
            uint64_t v224 = swift_slowAlloc();
            uint64_t v225 = swift_slowAlloc();
            uint64_t v307 = v221;
            v308 = (void *)v225;
            *(_DWORD *)uint64_t v224 = 134218242;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v224 + 12) = 2080;
            uint64_t v226 = PubSubTopic.description.getter();
            uint64_t v307 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v226, v227, (uint64_t *)&v308);
            uint64_t v212 = v298;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, v222, v223, "[Subscribe] Updated selfSeqNum, responseSeqNum=%llu %s", (uint8_t *)v224, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v225, -1, -1);
            MEMORY[0x1B3EA39E0](v224, -1, -1);
          }
          else
          {

            swift_release_n();
          }
        }
      }
      uint64_t v228 = *(void *)(v106 + 40);
      if (*(void *)(v228 + 16)) {
        PubSubTopic._setMetadata(metadata:)(v228);
      }
      uint64_t v229 = v106 + *(int *)(v303 + 44);
      uint64_t v230 = v293;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v229, v293, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      v231 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v299 + 48);
      int v232 = v231(v230, 1, v215);
      outlined destroy of UUID?(v230, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
      if (v232 == 1)
      {
        swift_bridgeObjectRelease();
        LOBYTE(v308) = 2;
        PubSubTopic.updateState(state:)((unsigned __int8 *)&v308);
        PubSubTopic.attemptSendQueueFlush()();
      }
      else
      {
        uint64_t v233 = v277;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v229, v277, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        if (v231(v233, 1, v215) == 1)
        {
          uint64_t v234 = MEMORY[0x1E4FBC860];
          v235 = v290;
          uint64_t *v290 = 0;
          v235[1] = v234;
          UnknownStorage.init()();
          outlined destroy of UUID?(v233, &demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
        }
        else
        {
          v235 = v290;
          _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v233, (uint64_t)v290, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        }
        uint64_t v236 = *v235;
        uint64_t v237 = v235[1];
        v304 = (uint8_t *)v236;
        int64_t v238 = *(void *)(v237 + 16);
        uint64_t v239 = MEMORY[0x1E4FBC860];
        if (v238)
        {
          v308 = (void *)MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v238, 0);
          uint64_t v240 = v237 + ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80));
          uint64_t v241 = *(void *)(v212 + 72);
          uint64_t v239 = (uint64_t)v308;
          do
          {
            v242 = v301;
            _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(v240, (uint64_t)v301, type metadata accessor for CP_SequenceNumber);
            uint64_t v244 = *v242;
            uint64_t v243 = v242[1];
            outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v242, type metadata accessor for CP_SequenceNumber);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v239 + 16) + 1, 1);
              uint64_t v239 = (uint64_t)v308;
            }
            unint64_t v246 = *(void *)(v239 + 16);
            unint64_t v245 = *(void *)(v239 + 24);
            if (v246 >= v245 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v245 > 1, v246 + 1, 1);
              uint64_t v239 = (uint64_t)v308;
            }
            *(void *)(v239 + 16) = v246 + 1;
            uint64_t v247 = v239 + 16 * v246;
            *(void *)(v247 + 32) = v244;
            *(void *)(v247 + 40) = v243;
            v240 += v241;
            --v238;
          }
          while (v238);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v248 = v270;
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v249 = Logger.logObject.getter();
        os_log_type_t v250 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v249, v250))
        {
          uint64_t v251 = swift_slowAlloc();
          uint64_t v252 = swift_slowAlloc();
          *(_DWORD *)uint64_t v251 = 134218498;
          uint64_t v307 = (uint64_t)v304;
          v308 = (void *)v252;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v251 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UInt64));
          v254 = v248;
          uint64_t v255 = MEMORY[0x1B3EA1D20](v239, v253);
          unint64_t v257 = v256;
          swift_bridgeObjectRelease();
          uint64_t v307 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v255, v257, (uint64_t *)&v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v251 + 22) = 2080;
          uint64_t v258 = v254[2];
          unint64_t v259 = v254[3];
          swift_bridgeObjectRetain();
          uint64_t v260 = v258;
          v248 = v254;
          uint64_t v307 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v260, v259, (uint64_t *)&v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v249, v250, "[Subscribe] Catchup required, fromParticipantID=%llu seqNums=%s topic=%s", (uint8_t *)v251, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v252, -1, -1);
          MEMORY[0x1B3EA39E0](v251, -1, -1);
        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
        }
        LOBYTE(v308) = 1;
        PubSubTopic.updateState(state:)((unsigned __int8 *)&v308);
        swift_beginAccess();
        if (MEMORY[0x1B3EA3B30](v248 + 17))
        {
          uint64_t v261 = v248[18];
          uint64_t ObjectType = swift_getObjectType();
          v263 = v290;
          uint64_t v264 = (uint64_t)v272;
          _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v290, (uint64_t)v272, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
          unint64_t v265 = (*(unsigned __int8 *)(v299 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v299 + 80);
          uint64_t v266 = swift_allocObject();
          *(void *)(v266 + 16) = v248;
          *(void *)(v266 + 24) = v239;
          _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v264, v266 + v265, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
          v267 = *(void (**)(uint64_t, uint8_t *, uint64_t (*)(unsigned char *), uint64_t, uint64_t, uint64_t))(v261 + 48);
          uint64_t v268 = swift_retain();
          v267(v268, v304, partial apply for closure #2 in PubSubTopic.processInitializeAck(_:), v266, ObjectType, v261);
          swift_unknownObjectRelease();
          swift_release();
          outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v263, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        }
        else
        {
          swift_bridgeObjectRelease();
          outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v290, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
        }
      }
      return;
    default:
      goto LABEL_9;
  }
}

uint64_t PubSubTopic.processRecord(_:)(void *a1)
{
  uint64_t v149 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v136 = (uint64_t)&v128 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v133 = *(void *)(v134 - 8);
  MEMORY[0x1F4188790](v134);
  unint64_t v135 = (uint64_t *)((char *)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v145 = type metadata accessor for CP_Record(0);
  MEMORY[0x1F4188790](v145);
  uint64_t v138 = (uint64_t)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v141 = *(void *)(v6 - 8);
  uint64_t v142 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v137 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v139 = (char *)&v128 - v9;
  uint64_t v10 = type metadata accessor for OSSignposter();
  uint64_t v143 = *(void *)(v10 - 8);
  uint64_t v144 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v140 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  id v146 = (uint64_t *)((char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  unint64_t v147 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (uint64_t *)((char *)&v128 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v148 = v1;
  uint64_t v25 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x1E4FBCBF0], v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  uint64_t v28 = *(void (**)(void *, uint64_t))(v22 + 8);
  uint64_t v27 = (void *)(v22 + 8);
  v28(v24, v21);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_65;
  }
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  double v30 = v29 * 1000.0;
  if ((~*(void *)&v30 & 0x7FF0000000000000) == 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v30 <= -1.0)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v30 < 1.84467441e19)
  {
    uint64_t v27 = v148;
    unint64_t v31 = v149[5];
    uint64_t v32 = v146;
    uint64_t v24 = (void *)v18;
    if (v31 > (unint64_t)v30) {
      goto LABEL_12;
    }
    Date.timeIntervalSince1970.getter();
    double v34 = v33 * 1000.0;
    if ((~*(void *)&v34 & 0x7FF0000000000000) != 0)
    {
      if (v34 > -1.0)
      {
        if (v34 < 1.84467441e19)
        {
          if ((unint64_t)v34 >= v31)
          {
            uint64_t v35 = *(void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporter);
            if (v35) {
              (*(void (**)(unint64_t, void, void, void, void))(*(void *)v35 + 160))((unint64_t)v34 - v31, *(void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag), *(void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag + 8), v27[2], v27[3]);
            }
LABEL_12:
            outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v149 + *(int *)(v145 + 36), (uint64_t)v14, &demangling cache variable for type metadata for CP_SequenceNumber?);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
            {
              uint64_t *v32 = 0;
              v32[1] = 0;
              UnknownStorage.init()();
              outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SequenceNumber?);
            }
            else
            {
              _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v14, (uint64_t)v32, type metadata accessor for CP_SequenceNumber);
            }
            uint64_t v16 = *v32;
            unint64_t v18 = v32[1];
            uint64_t v36 = v27[15];
            uint64_t v37 = v27[16];
            __swift_project_boxed_opaque_existential_1(v27 + 12, v36);
            if (v16 == (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37))
            {
LABEL_16:
              if (one-time initialization token for log == -1) {
                goto LABEL_17;
              }
              goto LABEL_68;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            uint64_t v50 = v150[0];
            if (*(void *)(v150[0] + 16))
            {
              unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
              if (v52)
              {
                uint64_t v132 = v16;
                unint64_t v53 = *(void *)(*(void *)(v50 + 56) + 8 * v51);
                swift_bridgeObjectRelease();
                if (v53 < v18)
                {
                  swift_getKeyPath();
                  swift_getKeyPath();
                  BOOL v54 = (void (*)(uint64_t *, void))static Published.subscript.modify();
                  uint64_t v56 = v55;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v151 = *v56;
                  *uint64_t v56 = 0x8000000000000000;
                  uint64_t v16 = v132;
                  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, v132, isUniquelyReferenced_nonNull_native);
                  *uint64_t v56 = v151;
                  swift_bridgeObjectRelease();
                  v54(v150, 0);
                  swift_release();
                  swift_release();
                  goto LABEL_16;
                }
                uint64_t v149 = v24;
                if (one-time initialization token for log != -1) {
                  swift_once();
                }
                uint64_t v90 = type metadata accessor for Logger();
                __swift_project_value_buffer(v90, (uint64_t)log);
                swift_retain_n();
                uint64_t v59 = Logger.logObject.getter();
                os_log_type_t v91 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v59, v91))
                {
                  uint64_t v61 = swift_slowAlloc();
                  uint64_t v62 = swift_slowAlloc();
                  v150[0] = v62;
                  *(_DWORD *)uint64_t v61 = 134218754;
                  uint64_t v151 = v132;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v61 + 12) = 2048;
                  uint64_t v151 = v18;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v61 + 22) = 2048;
                  uint64_t v151 = v53;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v61 + 32) = 2080;
                  uint64_t v63 = v19;
                  uint64_t v92 = PubSubTopic.description.getter();
                  uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v150);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  uint64_t v66 = "Skipping old record, participantID=%llu, recordSeqNum=%llu <= currentSeqNum=%llu %s";
                  uint64_t v67 = v59;
                  os_log_type_t v68 = v91;
                  uint64_t v69 = (uint8_t *)v61;
                  uint32_t v70 = 42;
                  goto LABEL_26;
                }
                goto LABEL_41;
              }
            }
            uint64_t v149 = v24;
            swift_bridgeObjectRelease();
            if (one-time initialization token for log == -1)
            {
LABEL_24:
              uint64_t v58 = type metadata accessor for Logger();
              __swift_project_value_buffer(v58, (uint64_t)log);
              swift_retain_n();
              uint64_t v59 = Logger.logObject.getter();
              os_log_type_t v60 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v59, v60))
              {
                uint64_t v61 = swift_slowAlloc();
                uint64_t v62 = swift_slowAlloc();
                v150[0] = v62;
                *(_DWORD *)uint64_t v61 = 134218498;
                uint64_t v151 = v16;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v61 + 12) = 2048;
                uint64_t v151 = v18;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v61 + 22) = 2080;
                uint64_t v63 = v19;
                uint64_t v64 = PubSubTopic.description.getter();
                uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v150);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                uint64_t v66 = "Skipping record from unknown publisher participantID=%llu seqNum=%llu %s";
                uint64_t v67 = v59;
                os_log_type_t v68 = v60;
                uint64_t v69 = (uint8_t *)v61;
                uint32_t v70 = 32;
LABEL_26:
                _os_log_impl(&dword_1B0DF7000, v67, v68, v66, v69, v70);
                swift_arrayDestroy();
                MEMORY[0x1B3EA39E0](v62, -1, -1);
                MEMORY[0x1B3EA39E0](v61, -1, -1);

                outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v146, type metadata accessor for CP_SequenceNumber);
                return (*(uint64_t (**)(char *, void *))(v63 + 8))(v147, v149);
              }
LABEL_41:
              swift_release_n();

              outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v32, type metadata accessor for CP_SequenceNumber);
              return (*(uint64_t (**)(char *, void *))(v19 + 8))(v147, v149);
            }
LABEL_73:
            swift_once();
            goto LABEL_24;
          }
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_71;
  }
LABEL_67:
  __break(1u);
LABEL_68:
  swift_once();
LABEL_17:
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)log);
  swift_retain();
  uint64_t v131 = v39;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  uint64_t v132 = v16;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v129 = swift_slowAlloc();
    v150[0] = v129;
    *(_DWORD *)uint64_t v43 = 134218498;
    uint64_t v151 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2048;
    uint64_t v151 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 22) = 2080;
    uint64_t v44 = v148[2];
    unint64_t v45 = v18;
    uint64_t v46 = v24;
    uint64_t v47 = v19;
    unint64_t v48 = v148[3];
    swift_bridgeObjectRetain();
    uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v48, v150);
    uint64_t v27 = v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v19 = v47;
    uint64_t v24 = v46;
    unint64_t v18 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v40, v41, "Received record fromParticipantID=%llu seqNum=%llu topic=%s", (uint8_t *)v43, 0x20u);
    uint64_t v49 = v129;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v49, -1, -1);
    MEMORY[0x1B3EA39E0](v43, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v72 = (uint64_t)v139;
  uint64_t v73 = v140;
  if (one-time initialization token for messenger != -1) {
    swift_once();
  }
  uint64_t v74 = v144;
  uint64_t v75 = __swift_project_value_buffer(v144, (uint64_t)static Signposts.messenger);
  (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v73, v75, v74);
  uint64_t v76 = v149[2];
  unint64_t v77 = v149[3];
  if (OSSignposter.isEnabled.getter())
  {
    outlined copy of Data._Representation(v76, v77);
    specialized OSSignpostID.init<A, B>(hash:using:)(v76, v77, v72);
  }
  else
  {
    OSSignpostID.init(_:)();
  }
  uint64_t v78 = v138;
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v149, v138, type metadata accessor for CP_Record);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v79);
  swift_retain_n();
  int64_t v80 = OSSignposter.logHandle.getter();
  os_signpost_type_t v81 = static os_signpost_type_t.event.getter();
  char v82 = OS_os_log.signpostsEnabled.getter();
  unint64_t v130 = v18;
  if (v82)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v137, v72, v142);
    uint64_t v83 = v78;
    uint64_t v84 = swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    v150[0] = v85;
    *(_DWORD *)uint64_t v84 = 134218754;
    uint64_t v86 = *(void *)(v83 + 16);
    unint64_t v87 = *(void *)(v83 + 24);
    uint64_t v88 = v85;
    uint64_t v89 = 0;
    uint64_t v129 = v19;
    switch(v87 >> 62)
    {
      case 1uLL:
        LODWORD(v89) = HIDWORD(v86) - v86;
        if (__OFSUB__(HIDWORD(v86), v86))
        {
          __break(1u);
LABEL_75:
          __break(1u);
          JUMPOUT(0x1B10D3B0CLL);
        }
        uint64_t v89 = (int)v89;
LABEL_45:
        uint64_t v151 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v138, type metadata accessor for CP_Record);
        *(_WORD *)(v84 + 12) = 2080;
        uint64_t v98 = v148[2];
        unint64_t v99 = v148[3];
        swift_bridgeObjectRetain();
        uint64_t v100 = v98;
        uint64_t v27 = v148;
        uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v99, v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 22) = 2048;
        uint64_t v151 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v84 + 32) = 2048;
        uint64_t v151 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v101 = v137;
        os_signpost_id_t v102 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1B0DF7000, v80, v81, v102, "transport-message-received", "payload-size=%{xcode:size-in-bytes}ld topic=%s participantID=%llu seqNum=%llu", (uint8_t *)v84, 0x2Au);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v88, -1, -1);
        MEMORY[0x1B3EA39E0](v84, -1, -1);

        uint64_t v103 = v142;
        uint64_t v104 = *(void (**)(char *, uint64_t))(v141 + 8);
        v104(v139, v142);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v140, v144);
        v104(v101, v103);
        uint64_t v19 = v129;
        break;
      case 2uLL:
        uint64_t v96 = v86 + 16;
        uint64_t v95 = *(void *)(v86 + 16);
        uint64_t v94 = *(void *)(v96 + 8);
        BOOL v97 = __OFSUB__(v94, v95);
        uint64_t v89 = v94 - v95;
        if (!v97) {
          goto LABEL_45;
        }
        goto LABEL_75;
      case 3uLL:
        goto LABEL_45;
      default:
        uint64_t v89 = BYTE6(v87);
        goto LABEL_45;
    }
  }
  else
  {
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v78, type metadata accessor for CP_Record);
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v72, v142);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v73, v144);
  }
  uint64_t v105 = *(void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  uint64_t v106 = *(void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((void *)((char *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v105);
  uint64_t v107 = v136;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v149 + *(int *)(v145 + 40), v136, &demangling cache variable for type metadata for CP_EncryptionID?);
  int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v107, 1, v134);
  uint64_t v109 = v135;
  if (v108 == 1)
  {
    *(_OWORD *)unint64_t v135 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?(v107, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v107, (uint64_t)v135, type metadata accessor for CP_EncryptionID);
  }
  uint64_t v110 = *v109;
  unint64_t v111 = v109[1];
  outlined copy of Data._Representation(*v109, v111);
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v109, type metadata accessor for CP_EncryptionID);
  char v112 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v106 + 40))(v110, v111, v105, v106);
  outlined consume of Data._Representation(v110, v111);
  if (v112)
  {
    uint64_t v113 = (char *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue;
    swift_beginAccess();
    uint64_t v114 = (uint64_t)v146;
    if (*(void *)(*(void *)v113 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v132), (v115 & 1) != 0))
    {
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      int v124 = PubSubTopic.decryptAndMarkReady(record:)((uint64_t)v149);
      if (v124 != 1)
      {
        if (!v124 && *((unsigned __int8 *)v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) >= 2u)
        {
          swift_beginAccess();
          if (MEMORY[0x1B3EA3B30](v27 + 17))
          {
            uint64_t v125 = v27[18];
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(void *, uint64_t, uint64_t))(v125 + 8))(v27, ObjectType, v125);
            swift_unknownObjectRelease();
          }
        }
        goto LABEL_61;
      }
    }
    PubSubTopic.queueRecordForDecryption(_:)((uint64_t)v149);
LABEL_61:
    uint64_t v127 = v114;
    goto LABEL_63;
  }
  swift_retain_n();
  double v116 = Logger.logObject.getter();
  os_log_type_t v117 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v116, v117))
  {
    uint64_t v118 = swift_slowAlloc();
    uint64_t v119 = swift_slowAlloc();
    uint64_t v149 = v24;
    v150[0] = v119;
    uint64_t v120 = v119;
    *(_DWORD *)uint64_t v118 = 134218242;
    uint64_t v151 = v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v118 + 12) = 2080;
    uint64_t v121 = v19;
    uint64_t v122 = v27[2];
    unint64_t v123 = v27[3];
    swift_bridgeObjectRetain();
    uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v116, v117, "Record has invalid encryptionID, dropping, seqNum=%llu topic=%s", (uint8_t *)v118, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v120, -1, -1);
    MEMORY[0x1B3EA39E0](v118, -1, -1);

    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v146, type metadata accessor for CP_SequenceNumber);
    return (*(uint64_t (**)(char *, void *))(v121 + 8))(v147, v149);
  }
  swift_release_n();

  uint64_t v127 = (uint64_t)v146;
LABEL_63:
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v127, type metadata accessor for CP_SequenceNumber);
  return (*(uint64_t (**)(char *, void *))(v19 + 8))(v147, v24);
}

void PubSubTopic.processTopicUpdate(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v95 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (void *)((char *)v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  void *v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v96 = (uint64_t *)v7;
    if (one-time initialization token for log == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)log);
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(a1, (uint64_t)v9, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  swift_retain_n();
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    v95[1] = v17;
    uint64_t v21 = v2;
    uint64_t v22 = v20;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v97 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    uint64_t v24 = Message.debugDescription.getter();
    unint64_t v99 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v26 = v21[2];
    unint64_t v27 = v21[3];
    swift_bridgeObjectRetain();
    unint64_t v99 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v18, v19, "[TopicUpdate] Received message=%s topic=%s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    uint64_t v28 = v22;
    uint64_t v2 = v21;
    MEMORY[0x1B3EA39E0](v28, -1, -1);
  }
  else
  {
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for CP_SubscribeResponse.TopicUpdate);

    swift_release_n();
  }
  double v29 = v96;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    uint64_t v30 = *(void *)(a1 + 24);
    int v31 = *(unsigned __int8 *)(a1 + 32);
    if (*(void *)a1)
    {
      if (*(void *)a1 == 1)
      {
        swift_retain_n();
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          uint64_t v35 = swift_slowAlloc();
          unint64_t v99 = (void *)v35;
          *(_DWORD *)uint64_t v34 = 136315394;
          uint64_t v97 = v30;
          char v98 = v31;
          unint64_t v36 = PubSubTopic.Participant.description.getter();
          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v34 + 12) = 2080;
          uint64_t v38 = v2;
          uint64_t v39 = v2[2];
          unint64_t v40 = v2[3];
          swift_bridgeObjectRetain();
          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          uint64_t v2 = v38;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v32, v33, "[TopicUpdate] Subscriber removed participant=%s topic=%s", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v35, -1, -1);
          MEMORY[0x1B3EA39E0](v34, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v74 = (void (*)(uint64_t *, void))static Published.subscript.modify();
        specialized Dictionary._Variant.removeValue(forKey:)(v30);
        v74(&v97, 0);
        swift_release();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v75 = (void (*)(uint64_t *, void))static Published.subscript.modify();
        unint64_t v77 = v76;
        unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if (v79)
        {
          unint64_t v80 = v78;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v99 = (void *)*v77;
          *unint64_t v77 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
          uint64_t v82 = (uint64_t)v99;
          specialized _NativeDictionary._delete(at:)(v80, (uint64_t)v99);
          *unint64_t v77 = v82;
          swift_bridgeObjectRelease();
        }
        v75(&v97, 0);
        swift_release();
        swift_release();
        swift_beginAccess();
        if (MEMORY[0x1B3EA3B30](v2 + 17))
        {
          uint64_t v83 = v2[18];
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v83 + 32))(v2, v30, ObjectType, v83);
LABEL_35:
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_retain();
        os_log_type_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          uint64_t v97 = v63;
          *(_DWORD *)uint64_t v62 = 136315138;
          uint64_t v64 = v2[2];
          unint64_t v65 = v2[3];
          swift_bridgeObjectRetain();
          unint64_t v99 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v60, v61, "[TopicUpdate] Metadata changed topic=%s", v62, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v63, -1, -1);
          MEMORY[0x1B3EA39E0](v62, -1, -1);
        }
        else
        {

          swift_release();
        }
        PubSubTopic.updateMetdata(metadata:)(*(void *)(a1 + 16));
      }
    }
    else
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v48 = v97;
      if (*(void *)(v97 + 16) && (unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v30), (v50 & 1) != 0))
      {
        uint64_t v51 = *(void *)(*(void *)(v48 + 56) + 8 * v49);
        swift_bridgeObjectRelease();
        swift_retain_n();
        char v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = swift_slowAlloc();
          uint64_t v96 = (uint64_t *)swift_slowAlloc();
          uint64_t v97 = v30;
          unint64_t v99 = v96;
          *(_DWORD *)uint64_t v54 = 136315650;
          char v98 = v31;
          unint64_t v55 = PubSubTopic.Participant.description.getter();
          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v54 + 12) = 2048;
          uint64_t v97 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v54 + 22) = 2080;
          uint64_t v57 = v2[2];
          unint64_t v58 = v2[3];
          swift_bridgeObjectRetain();
          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v52, v53, "[TopicUpdate] Subscriber re-added participant=%s seqNum=%llu topic=%s", (uint8_t *)v54, 0x20u);
          uint64_t v59 = (uint64_t)v96;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v59, -1, -1);
          MEMORY[0x1B3EA39E0](v54, -1, -1);
        }
        else
        {

          swift_release_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_retain_n();
        uint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = swift_slowAlloc();
          uint64_t v69 = swift_slowAlloc();
          unint64_t v99 = (void *)v69;
          *(_DWORD *)uint64_t v68 = 136315394;
          uint64_t v97 = v30;
          char v98 = v31;
          LODWORD(v96) = v31;
          unint64_t v70 = PubSubTopic.Participant.description.getter();
          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v68 + 12) = 2080;
          uint64_t v72 = v2[2];
          unint64_t v73 = v2[3];
          swift_bridgeObjectRetain();
          uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, (uint64_t *)&v99);
          LOBYTE(v31) = (_BYTE)v96;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v66, v67, "[TopicUpdate] Subscriber added participant=%s topic=%s", (uint8_t *)v68, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v69, -1, -1);
          MEMORY[0x1B3EA39E0](v68, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v85 = (void (*)(uint64_t *, void))static Published.subscript.modify();
        unint64_t v87 = v86;
        char v88 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v99 = (void *)*v87;
        uint64_t *v87 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v30, v88);
        uint64_t *v87 = (uint64_t)v99;
        swift_bridgeObjectRelease();
        v85(&v97, 0);
        swift_release();
        swift_release();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v89 = (void (*)(uint64_t *, void))static Published.subscript.modify();
      os_log_type_t v91 = v90;
      char v92 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v99 = (void *)*v91;
      uint64_t *v91 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, v31, v30, v92);
      uint64_t *v91 = (uint64_t)v99;
      swift_bridgeObjectRelease();
      v89(&v97, 0);
      swift_release();
      swift_release();
      swift_beginAccess();
      if (MEMORY[0x1B3EA3B30](v2 + 17))
      {
        uint64_t v93 = v2[18];
        uint64_t v94 = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v93 + 24))(v2, v30, v94, v93);
        goto LABEL_35;
      }
    }
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(a1, (uint64_t)v96, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    swift_retain();
    os_log_type_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v97 = v44;
      *(_DWORD *)uint64_t v43 = 134218242;
      uint64_t v45 = *v29;
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v29, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      unint64_t v99 = (void *)v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v46 = v2[2];
      unint64_t v47 = v2[3];
      swift_bridgeObjectRetain();
      unint64_t v99 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v41, v42, "[TopicUpdate] Unexpected event-type, event=%ld topic=%s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v44, -1, -1);
      MEMORY[0x1B3EA39E0](v43, -1, -1);
    }
    else
    {
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v29, type metadata accessor for CP_SubscribeResponse.TopicUpdate);

      swift_release();
    }
  }
}

uint64_t closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.Initialize);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v10, a1, type metadata accessor for CP_SubscribeRequest.Initialize);
  uint64_t v11 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 0, 1, v11);
}

uint64_t closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v44 = a3;
  unint64_t v42 = a4;
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v47 = (char *)&v40 - v11;
  uint64_t v12 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = a2[2];
  uint64_t v17 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v16;
  a1[1] = v17;
  uint64_t v18 = a2[15];
  uint64_t v19 = a2[16];
  __swift_project_boxed_opaque_existential_1(a2 + 12, v18);
  a1[4] = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64VAGG_14CopresenceCore17CP_SequenceNumberVs5NeverOTg504_ss6d5VAB14e6Core17g1_hi27VIgyyr_AB3key_AB5valuetAEs5J215OIegnrzr_TR04_s14b115Core11PubSubTopicC20setupSubscribeStream33_6FF60077F0B19FDD9659960D5DD0DECCLL05reuseH014isFirstAttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n(v51);
  swift_bridgeObjectRelease();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, (void (*)(uint64_t))type metadata accessor for CP_SequenceNumber);
  uint64_t v45 = v15;
  unint64_t v21 = AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n;
  static Message.with(_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n+ 16)+ 1, 1, AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n);
  }
  unint64_t v23 = *(void *)(v21 + 16);
  unint64_t v22 = *(void *)(v21 + 24);
  if (v23 >= v22 >> 1) {
    unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v21);
  }
  *(void *)(v21 + 16) = v23 + 1;
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v45, v21+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v23, type metadata accessor for CP_SequenceNumber);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = v21;
  uint64_t v24 = v44;
  int64_t v25 = *(void *)(v44 + 16);
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if (v25)
  {
    unint64_t v40 = v21;
    os_log_type_t v41 = a1;
    uint64_t v51 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
    unint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16);
    uint64_t v28 = v24 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
    uint64_t v44 = *(void *)(v50 + 72);
    uint64_t v45 = v27;
    v50 += 16;
    double v29 = (void (**)(char *, uint64_t))(v50 - 8);
    do
    {
      uint64_t v30 = v46;
      uint64_t v31 = v45(v7, v28, v46);
      MEMORY[0x1F4188790](v31);
      *(&v40 - 2) = (unint64_t)v7;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
      static Message.with(_:)();
      (*v29)(v7, v30);
      uint64_t v26 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1);
        uint64_t v26 = v51;
      }
      unint64_t v33 = *(void *)(v26 + 16);
      unint64_t v32 = *(void *)(v26 + 24);
      uint64_t v34 = (uint64_t)v47;
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        uint64_t v34 = (uint64_t)v47;
        uint64_t v26 = v51;
      }
      *(void *)(v26 + 16) = v33 + 1;
      _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v34, v26+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v33, type metadata accessor for CP_EncryptionID);
      v28 += v44;
      --v25;
    }
    while (v25);
    a1 = v41;
  }
  uint64_t v35 = (uint64_t)v43;
  if (*(void *)(v26 + 16))
  {
    uint64_t v36 = swift_bridgeObjectRelease();
    a1[3] = v26;
  }
  else
  {
    uint64_t v36 = swift_bridgeObjectRelease();
  }
  MEMORY[0x1F4188790](v36);
  *(&v40 - 2) = v42;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, (void (*)(uint64_t))type metadata accessor for CP_EncryptionID);
  uint64_t v37 = v49;
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  uint64_t v38 = (uint64_t)a1 + *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 40);
  outlined destroy of UUID?(v38, &demangling cache variable for type metadata for CP_EncryptionID?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0(v35, v38, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v38, 0, 1, v37);
}

uint64_t CP_SubscribeResponse.InitializeAck.otherParticipants.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (void *)MEMORY[0x1E4FBC868];
LABEL_30:
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain_n();
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    uint64_t v8 = *(void *)(v3 + 8 * v4);
    uint64_t v9 = *(void *)(v5 + 16);
    if (v9)
    {
      if (*(void *)(v5 + 32) == v8)
      {
        BOOL v10 = 1;
        goto LABEL_17;
      }
      if (v9 != 1) {
        break;
      }
    }
    BOOL v10 = 0;
LABEL_17:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    uint64_t v18 = v6[2];
    BOOL v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      goto LABEL_32;
    }
    char v21 = v16;
    if (v6[3] >= v20)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v16) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v21) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_34;
      }
      unint64_t v17 = v22;
      if (v21)
      {
LABEL_3:
        uint64_t v7 = v6[7] + 16 * v17;
        *(void *)uint64_t v7 = v8;
        *(unsigned char *)(v7 + 8) = v10;
        goto LABEL_4;
      }
    }
    v6[(v17 >> 6) + 8] |= 1 << v17;
    *(void *)(v6[6] + 8 * v17) = v8;
    uint64_t v24 = v6[7] + 16 * v17;
    *(void *)uint64_t v24 = v8;
    *(unsigned char *)(v24 + 8) = v10;
    uint64_t v25 = v6[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_33;
    }
    v6[2] = v27;
LABEL_4:
    swift_bridgeObjectRelease();
    if (++v4 == v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  uint64_t v11 = 5;
  while (1)
  {
    uint64_t v12 = v11 - 3;
    if (__OFADD__(v11 - 4, 1)) {
      break;
    }
    uint64_t v13 = *(void *)(v5 + 8 * v11);
    BOOL v10 = v13 == v8;
    ++v11;
    if (v13 == v8 || v12 == v9) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in PubSubTopic.processInitializeAck(_:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  BOOL v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v11 - 8);
  uint64_t v23 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1F4188790](v14 - 8);
  LOBYTE(a1) = *a1;
  v21[1] = *(void *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(a4, (uint64_t)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = (_BYTE)a1;
  *(void *)(v18 + 24) = a2;
  *(void *)(v18 + 32) = a3;
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  aBlock[4] = partial apply for closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_98_0;
  BOOL v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v13, v10, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v23);
  return swift_release();
}

void closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t KeyPath = type metadata accessor for CP_SubscribeRequest(0);
  MEMORY[0x1F4188790](KeyPath);
  unint64_t v10 = (unint64_t)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  if ((a1 & 1) == 0)
  {
    uint64_t v100 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v101 = a3;
    uint64_t v98 = a4;
    if (one-time initialization token for log != -1) {
      goto LABEL_82;
    }
    while (1)
    {
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)log);
      swift_retain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      unint64_t v99 = KeyPath;
      if (v14)
      {
        unint64_t KeyPath = swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        v108[0] = v15;
        *(_DWORD *)unint64_t KeyPath = 136315138;
        uint64_t v16 = PubSubTopic.description.getter();
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v12, v13, "[Subscribe] Catchup completed successfully, %s", (uint8_t *)KeyPath, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v15, -1, -1);
        MEMORY[0x1B3EA39E0](KeyPath, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v28 = *(void *)(v10 + 1064);
      if (*((unsigned char *)a2 + v28) != 1)
      {
        swift_retain_n();
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v76, v77)) {
          goto LABEL_62;
        }
        uint64_t v78 = 0x676E697472617453;
        uint64_t v79 = swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        v108[0] = v80;
        *(_DWORD *)uint64_t v79 = 136315394;
        unint64_t v81 = 0xE800000000000000;
        uint64_t v82 = v80;
        switch(*((unsigned char *)a2 + v28))
        {
          case 1:
            uint64_t v78 = 0x676E696863746143;
            unint64_t v81 = 0xEA00000000007055;
            break;
          case 2:
            unint64_t v81 = 0xE500000000000000;
            uint64_t v78 = 0x7964616552;
            break;
          case 3:
            uint64_t v78 = 0x676E697474756853;
            unint64_t v81 = 0xEC0000006E776F44;
            break;
          case 4:
            uint64_t v78 = 0x6E776F6474756853;
            break;
          default:
            break;
        }
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v81, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v79 + 12) = 2080;
        uint64_t v91 = a2[2];
        unint64_t v92 = a2[3];
        swift_bridgeObjectRetain();
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        os_log_type_t v93 = v77;
        uint64_t v94 = "[Subscribe] Post-catchup work aborted, state=%s topic=%s";
LABEL_76:
        _os_log_impl(&dword_1B0DF7000, v76, v93, v94, (uint8_t *)v79, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v82, -1, -1);
        MEMORY[0x1B3EA39E0](v79, -1, -1);

        return;
      }
      LOBYTE(v108[0]) = 2;
      PubSubTopic.updateState(state:)((unsigned __int8 *)v108);
      uint64_t v29 = v101;
      uint64_t v30 = *(void *)(v101 + 16);
      if (!v30)
      {
LABEL_64:
        MEMORY[0x1F4188790](v29);
        *(&v97 - 2) = v98;
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest);
        uint64_t v87 = (uint64_t)v100;
        static Message.with(_:)();
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        PubSubTopic.attemptSendQueueFlush()();
        char v88 = (char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue;
        swift_beginAccess();
        if (*(void *)(*(void *)v88 + 16))
        {
          swift_beginAccess();
          if (MEMORY[0x1B3EA3B30](a2 + 17))
          {
            uint64_t v89 = a2[18];
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(void *, uint64_t, uint64_t))(v89 + 8))(a2, ObjectType, v89);
            swift_unknownObjectRelease();
          }
        }
        outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(v87, type metadata accessor for CP_SubscribeRequest);
        return;
      }
      unint64_t v10 = (unint64_t)(a2 + 12);
      uint64_t v31 = (void *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked);
      unint64_t v32 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      os_signpost_id_t v102 = a2 + 12;
      uint64_t v103 = a2;
      while (1)
      {
        uint64_t v33 = *(v32 - 1);
        unint64_t v106 = *v32;
        uint64_t v34 = a2[15];
        uint64_t v35 = a2[16];
        __swift_project_boxed_opaque_existential_1((void *)v10, v34);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35) == v33) {
          goto LABEL_36;
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        if (!*(void *)(v108[0] + 16))
        {
          swift_bridgeObjectRelease();
LABEL_24:
          uint64_t v105 = v30;
          swift_getKeyPath();
          unint64_t KeyPath = swift_getKeyPath();
          uint64_t v104 = (void (*)(uint64_t *, void))static Published.subscript.modify();
          a2 = v42;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = *a2;
          uint64_t v44 = v107;
          *a2 = 0x8000000000000000;
          unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
          uint64_t v46 = *(void *)(v44 + 16);
          BOOL v47 = (v45 & 1) == 0;
          uint64_t v48 = v46 + v47;
          if (__OFADD__(v46, v47)) {
            goto LABEL_78;
          }
          char v49 = v45;
          if (*(void *)(v44 + 24) >= v48)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              char v52 = (void *)v107;
              if ((v45 & 1) == 0) {
                goto LABEL_33;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              char v52 = (void *)v107;
              if ((v49 & 1) == 0) {
                goto LABEL_33;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, isUniquelyReferenced_nonNull_native);
            unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
            if ((v49 & 1) != (v51 & 1)) {
              goto LABEL_84;
            }
            unint64_t v10 = v50;
            char v52 = (void *)v107;
            if ((v49 & 1) == 0)
            {
LABEL_33:
              v52[(v10 >> 6) + 8] |= 1 << v10;
              uint64_t v53 = 8 * v10;
              *(void *)(v52[6] + v53) = v33;
              *(void *)(v52[7] + v53) = v106;
              uint64_t v54 = v52[2];
              BOOL v55 = __OFADD__(v54, 1);
              uint64_t v56 = v54 + 1;
              if (v55) {
                goto LABEL_81;
              }
              v52[2] = v56;
              goto LABEL_35;
            }
          }
          *(void *)(v52[7] + 8 * v10) = v106;
LABEL_35:
          *a2 = v52;
          swift_bridgeObjectRelease();
          v104(v108, 0);
          swift_release();
          swift_release();
          unint64_t v10 = (unint64_t)v102;
          a2 = v103;
          uint64_t v30 = v105;
          goto LABEL_36;
        }
        specialized __RawDictionaryStorage.find<A>(_:)(v33);
        char v37 = v36;
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0) {
          goto LABEL_24;
        }
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        uint64_t v38 = v108[0];
        if (!*(void *)(v108[0] + 16) || (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v40 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_84:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x1B10D6614);
        }
        unint64_t v41 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
        swift_bridgeObjectRelease();
        if (v41 < v106) {
          goto LABEL_24;
        }
LABEL_36:
        swift_beginAccess();
        uint64_t v57 = *v31;
        if (*(void *)(*v31 + 16))
        {
          specialized __RawDictionaryStorage.find<A>(_:)(v33);
          char v59 = v58;
          swift_endAccess();
          if (v59)
          {
            unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
            if ((v61 & 1) == 0) {
              goto LABEL_80;
            }
            if (*(void *)(*(void *)(v57 + 56) + 8 * v60) >= v106) {
              goto LABEL_15;
            }
          }
        }
        else
        {
          swift_endAccess();
        }
        swift_beginAccess();
        char v62 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v107 = *v31;
        uint64_t v63 = v107;
        *uint64_t v31 = 0x8000000000000000;
        unint64_t KeyPath = specialized __RawDictionaryStorage.find<A>(_:)(v33);
        uint64_t v65 = *(void *)(v63 + 16);
        BOOL v66 = (v64 & 1) == 0;
        uint64_t v67 = v65 + v66;
        if (__OFADD__(v65, v66)) {
          break;
        }
        char v68 = v64;
        if (*(void *)(v63 + 24) >= v67)
        {
          if (v62)
          {
            unint64_t v71 = (void *)v107;
            if ((v64 & 1) == 0) {
              goto LABEL_49;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            unint64_t v71 = (void *)v107;
            if ((v68 & 1) == 0) {
              goto LABEL_49;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, v62);
          unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
          if ((v68 & 1) != (v70 & 1)) {
            goto LABEL_84;
          }
          unint64_t KeyPath = v69;
          unint64_t v71 = (void *)v107;
          if ((v68 & 1) == 0)
          {
LABEL_49:
            v71[(KeyPath >> 6) + 8] |= 1 << KeyPath;
            uint64_t v72 = 8 * KeyPath;
            *(void *)(v71[6] + v72) = v33;
            *(void *)(v71[7] + v72) = v106;
            uint64_t v73 = v71[2];
            BOOL v55 = __OFADD__(v73, 1);
            uint64_t v74 = v73 + 1;
            if (v55) {
              goto LABEL_79;
            }
            v71[2] = v74;
            goto LABEL_14;
          }
        }
        *(void *)(v71[7] + 8 * KeyPath) = v106;
LABEL_14:
        *uint64_t v31 = (uint64_t)v71;
        swift_bridgeObjectRelease();
        swift_endAccess();
LABEL_15:
        v32 += 2;
        if (!--v30)
        {
          uint64_t v29 = swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      swift_once();
    }
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)log);
  swift_retain_n();
  BOOL v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v108[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v23 = String.init<A>(reflecting:)();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v25 = a2;
    uint64_t v26 = a2[2];
    unint64_t v27 = a2[3];
    swift_bridgeObjectRetain();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a2 = v25;
    unint64_t v10 = 0x1E9B5A000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v19, v20, "[Subscribe] Catchup failed, retrying subscription error=%s topic=%s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v75 = *(void *)(v10 + 1064);
  if (*((unsigned char *)a2 + v75) == 1)
  {
    *((unsigned char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 1;
    PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(1, 0);
  }
  else
  {
    swift_retain_n();
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v83))
    {
      uint64_t v84 = 0x676E697472617453;
      uint64_t v79 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      v108[0] = v85;
      *(_DWORD *)uint64_t v79 = 136315394;
      unint64_t v86 = 0xE800000000000000;
      uint64_t v82 = v85;
      switch(*((unsigned char *)a2 + v75))
      {
        case 1:
          uint64_t v84 = 0x676E696863746143;
          unint64_t v86 = 0xEA00000000007055;
          break;
        case 2:
          unint64_t v86 = 0xE500000000000000;
          uint64_t v84 = 0x7964616552;
          break;
        case 3:
          uint64_t v84 = 0x676E697474756853;
          unint64_t v86 = 0xEC0000006E776F44;
          break;
        case 4:
          uint64_t v84 = 0x6E776F6474756853;
          break;
        default:
          break;
      }
      uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v86, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 12) = 2080;
      uint64_t v95 = a2[2];
      unint64_t v96 = a2[3];
      swift_bridgeObjectRetain();
      uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v93 = v83;
      uint64_t v94 = "[Subscribe] Re-subscribe aborted, state=%s topic=%s";
      goto LABEL_76;
    }
LABEL_62:

    swift_release_n();
  }
}

uint64_t closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = a2;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, (void (*)(uint64_t))type metadata accessor for CP_SubscribeRequest.RecordAck);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v6, a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
  uint64_t v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
}

uint64_t closure #4 in PubSubTopic.processInitializeAck(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v49 = a3;
  uint64_t v47 = a2;
  uint64_t v48 = a1;
  uint64_t v3 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v46 = (uint64_t *)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1F4188790](v12 - 8);
  BOOL v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (uint64_t *)((char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  char v45 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(int *)(v4 + 32);
  uint64_t v23 = v48;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v48 + v22, (uint64_t)v14, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    *(_OWORD *)uint64_t v18 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    _s14CopresenceCore17CP_SequenceNumberVWObTm_0((uint64_t)v14, (uint64_t)v18, type metadata accessor for CP_EncryptionID);
  }
  uint64_t v24 = *v18;
  unint64_t v25 = v18[1];
  outlined copy of Data._Representation(*v18, v25);
  UUID.init(data:)(v24, v25, (uint64_t)v9);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v26(v9, 1, v19) == 1)
  {
    outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    uint64_t v27 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v11, v9, v19);
    uint64_t v27 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v11, v27, 1, v19);
  outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v18, type metadata accessor for CP_EncryptionID);
  if (v26(v11, 1, v19) == 1)
  {
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)log);
    uint64_t v29 = v46;
    _s14CopresenceCore17CP_SequenceNumberVWOcTm_0((uint64_t)v23, (uint64_t)v46, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    swift_retain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v51 = v33;
      *(_DWORD *)uint64_t v32 = 134218242;
      uint64_t v34 = *v29;
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v29, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
      uint64_t v50 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v35 = PubSubTopic.description.getter();
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v30, v31, "[Subscribe] Unexpected, malformed encryptionID, participantID=%llu %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v33, -1, -1);
      MEMORY[0x1B3EA39E0](v32, -1, -1);
    }
    else
    {
      outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)v29, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);

      swift_release_n();
    }
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v49, 1, 1, v43);
  }
  else
  {
    char v37 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    uint64_t v38 = v45;
    v37(v45, v11, v19);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
    char v40 = v49;
    unint64_t v41 = (char *)v49 + *(int *)(v39 + 48);
    *char v49 = *v23;
    v37(v41, v38, v19);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v40, 0, 1, v39);
  }
}

uint64_t closure #5 in PubSubTopic.processInitializeAck(_:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)log);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 134218242;
      uint64_t v16 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v7 = PubSubTopic.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v3, v4, "[Subscribe] EncryptionID refresh timed out, retrying attempt=%ld %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v6, -1, -1);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt);
    if (v9 >= *(void *)(v1 + 72))
    {
      swift_retain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v16 = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        uint64_t v14 = PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v10, v11, "[Subscribe] Failed to refresh encryptionIDs, closing topic %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v13, -1, -1);
        MEMORY[0x1B3EA39E0](v12, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 3;
      PubSubTopic.closeStreams(reason:)(1, 2);
    }
    else
    {
      *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt) = v9 + 1;
      PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(1, 0);
    }
    return swift_release();
  }
  return result;
}

void CP_SubscribeResponse.TopicUpdate.participant.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t CP_SubscribeResponse.TopicUpdate.participant.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24) = *(void *)result;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.participant.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
  return CP_SubscribeResponse.TopicUpdate.participant.modify;
}

uint64_t CP_SubscribeResponse.TopicUpdate.participant.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 24) = *(void *)result;
  *(unsigned char *)(v1 + 32) = v2;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, char a2, void *a3)
{
  uint64_t v5 = a1[2];
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_24;
  }
  uint64_t v7 = a1[6];
  unint64_t v6 = a1[7];
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v6);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v10 = (void *)*a3;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  char v16 = v11;
  if (v10[3] >= v15)
  {
    if (a2)
    {
      if ((v11 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) == 0) {
        goto LABEL_13;
      }
    }
LABEL_10:
    uint64_t v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v7, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_30;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_29:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_30:
    _StringGuts.grow(_:)(30);
    v44._object = (void *)0x80000001B11617F0;
    v44._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v44);
    _print_unlocked<A, B>(_:_:)();
    v45._uint64_t countAndFlagsBits = 39;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v17;
  if (v16) {
    goto LABEL_10;
  }
LABEL_13:
  uint64_t v21 = (void *)*a3;
  *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v21[6] + 16 * v12);
  *uint64_t v22 = v9;
  v22[1] = v8;
  uint64_t v23 = (uint64_t *)(v21[7] + 16 * v12);
  *uint64_t v23 = v7;
  v23[1] = v6;
  uint64_t v24 = v21[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  void v21[2] = v26;
  if (v5 != 1)
  {
    uint64_t v27 = a1 + 11;
    unint64_t v28 = 1;
    while (v28 < a1[2])
    {
      uint64_t v7 = *(v27 - 1);
      unint64_t v6 = *v27;
      uint64_t v30 = *(v27 - 3);
      uint64_t v29 = *(v27 - 2);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v7, v6);
      if (!v29) {
        goto LABEL_24;
      }
      os_log_type_t v31 = (void *)*a3;
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v25 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v25) {
        goto LABEL_26;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_29;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      char v40 = (uint64_t *)(v39[6] + 16 * v32);
      uint64_t *v40 = v30;
      v40[1] = v29;
      unint64_t v41 = (uint64_t *)(v39[7] + 16 * v32);
      *unint64_t v41 = v7;
      v41[1] = v6;
      uint64_t v42 = v39[2];
      BOOL v25 = __OFADD__(v42, 1);
      uint64_t v43 = v42 + 1;
      if (v25) {
        goto LABEL_27;
      }
      ++v28;
      v39[2] = v43;
      v27 += 4;
      if (v5 == v28) {
        goto LABEL_24;
      }
    }
    goto LABEL_28;
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  closure #1 in static Data.== infix(_:_:)(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

unint64_t specialized static PubSubTopic.ClosedReason.== infix(_:_:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  if (!a2)
  {
    if (!a4) {
      return specialized static Dictionary<>.== infix(_:_:)(a1, a3);
    }
    return 0;
  }
  if (a2 == 1)
  {
    if (a4 == 1) {
      return specialized static Dictionary<>.== infix(_:_:)(a1, a3);
    }
    return 0;
  }
  switch(a1)
  {
    case 1uLL:
      if (a4 != 2 || a3 != 1) {
        return 0;
      }
      unint64_t result = 1;
      break;
    case 2uLL:
      if (a4 != 2 || a3 != 2) {
        return 0;
      }
      unint64_t result = 1;
      break;
    case 3uLL:
      if (a4 != 2 || a3 != 3) {
        return 0;
      }
      unint64_t result = 1;
      break;
    case 4uLL:
      if (a4 != 2 || a3 != 4) {
        return 0;
      }
      unint64_t result = 1;
      break;
    case 5uLL:
      if (a4 != 2 || a3 != 5) {
        return 0;
      }
      unint64_t result = 1;
      break;
    default:
      if (a4 != 2 || a3) {
        return 0;
      }
      unint64_t result = 1;
      break;
  }
  return result;
}

uint64_t outlined destroy of CP_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PubSubTopic.ReceivedRecord(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B10D8020()
{
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t outlined init with take of PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  swift_weakTakeInit();
  return a2;
}

void partial apply for closure #1 in PubSubTopic.ReceivedRecord.acknowledge()()
{
  PubSubTopic.ack(publisherID:seqNum:)(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized static PubSubTopic.SendItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static Data.== infix(_:_:)(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)return 0; {
  swift_beginAccess();
  }
  uint64_t v4 = *(void *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 48);
  swift_beginAccess();
  uint64_t result = *(unsigned __int8 *)(a2 + 48);
  if ((v5 & 1) == 0) {
    return (v4 == *(void *)(a2 + 40)) & ~result;
  }
  return result;
}

void partial apply for closure #1 in PubSubTopic.isAvailable.getter(BOOL *a1@<X8>)
{
  *a1 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 3u;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v22) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v21 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v22) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v21 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v22) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v21 + 8 * v8);
        if (!v19)
        {
          int64_t v8 = v18 + 3;
          if (v18 + 3 >= v22) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v21 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v19 - 1) & v19;
    unint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = 16 * v10;
    char v12 = (uint64_t *)(*(void *)(a1 + 48) + v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 56) + v11);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    a2(v13, v14, v16, v17);
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of Data?(v16, v17);
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v22) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v21 + 8 * v20);
  if (v19)
  {
    int64_t v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v8 >= v22) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v21 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID)?);
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (void *)((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  uint64_t v8 = *(void *)(v27 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v27);
  uint64_t v26 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v25 = (uint64_t)v22 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = *(void *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0) - 8);
  uint64_t v14 = (void *)(a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)));
  uint64_t v23 = v8;
  uint64_t v15 = (unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v16 = *(void *)(v13 + 72);
  v22[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v24 = a2;
  do
  {
    closure #4 in PubSubTopic.processInitializeAck(_:)(v14, a2, v7);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*v15)(v7, 1, v27) == 1)
    {
      outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for (UInt64, UUID)?);
    }
    else
    {
      uint64_t v18 = v25;
      outlined init with take of (UInt64, UUID)((uint64_t)v7, v25);
      outlined init with take of (UInt64, UUID)(v18, v26);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
      }
      unint64_t v20 = *(void *)(v17 + 16);
      unint64_t v19 = *(void *)(v17 + 24);
      if (v20 >= v19 >> 1) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
      }
      *(void *)(v17 + 16) = v20 + 1;
      outlined init with take of (UInt64, UUID)(v26, v17+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v20);
      a2 = v24;
    }
    uint64_t v14 = (void *)((char *)v14 + v16);
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = a1;
  __s1[8] = *MEMORY[0x1E4F143B8];
  if (a1 >> 62) {
    goto LABEL_61;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v43 = v4 & 0xC000000000000001;
      uint64_t v7 = *(void *)(a2 + 16);
      unint64_t v6 = *(void *)(a2 + 24);
      swift_beginAccess();
      uint64_t v8 = 0;
      BOOL v9 = __OFSUB__(HIDWORD(v7), v7);
      BOOL v36 = v9;
      unint64_t v37 = v6;
      unint64_t v41 = v6 >> 62;
      uint64_t v42 = BYTE6(v6);
      unint64_t v39 = v4;
      uint64_t v40 = v5;
      while (2)
      {
        if (v43)
        {
          uint64_t v10 = MEMORY[0x1B3EA25C0](v8, v4);
        }
        else
        {
          uint64_t v10 = *(void *)(v4 + 8 * v8 + 32);
          swift_retain();
        }
        uint64_t v11 = *(void *)(v10 + 16);
        unint64_t v12 = *(void *)(v10 + 24);
        uint64_t v13 = 0;
        switch(v12 >> 62)
        {
          case 1uLL:
            LODWORD(v13) = HIDWORD(v11) - v11;
            if (__OFSUB__(HIDWORD(v11), v11)) {
              goto LABEL_58;
            }
            uint64_t v13 = (int)v13;
LABEL_15:
            uint64_t v17 = v42;
            switch(v41)
            {
              case 1uLL:
                uint64_t v17 = HIDWORD(v7) - (int)v7;
                if (v36) {
                  goto LABEL_60;
                }
                goto LABEL_19;
              case 2uLL:
                uint64_t v19 = *(void *)(v7 + 16);
                uint64_t v18 = *(void *)(v7 + 24);
                BOOL v16 = __OFSUB__(v18, v19);
                uint64_t v17 = v18 - v19;
                if (!v16) {
                  goto LABEL_19;
                }
                goto LABEL_59;
              case 3uLL:
                if (v13) {
                  goto LABEL_25;
                }
                goto LABEL_38;
              default:
LABEL_19:
                if (v13 != v17) {
                  goto LABEL_25;
                }
                if (v13 < 1) {
                  goto LABEL_38;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v15 = *(void *)(v11 + 16);
            uint64_t v14 = *(void *)(v11 + 24);
            BOOL v16 = __OFSUB__(v14, v15);
            uint64_t v13 = v14 - v15;
            if (!v16) {
              goto LABEL_15;
            }
            goto LABEL_57;
          case 3uLL:
            goto LABEL_15;
          default:
            uint64_t v13 = BYTE6(v12);
            goto LABEL_15;
        }
        switch(v12 >> 62)
        {
          case 1uLL:
            if (v11 >> 32 < (int)v11)
            {
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
            }
            uint64_t v35 = v3;
            outlined copy of Data._Representation(v7, v37);
            outlined copy of Data._Representation(v11, v12);
            uint64_t v32 = __DataStorage._bytes.getter();
            if (v32)
            {
              uint64_t v33 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v11, v33)) {
                goto LABEL_67;
              }
              v32 += (int)v11 - v33;
            }
            __DataStorage._length.getter();
            unint64_t v4 = v37;
            closure #1 in static Data.== infix(_:_:)(v32, v7, v37, (char *)__s1);
            uint64_t v5 = v40;
            if (v35) {
              goto LABEL_71;
            }
            uint64_t v3 = 0;
            outlined consume of Data._Representation(v7, v37);
            outlined consume of Data._Representation(v11, v12);
            unint64_t v4 = v39;
            if (__s1[0]) {
              goto LABEL_38;
            }
            goto LABEL_25;
          case 2uLL:
            uint64_t v23 = v3;
            unint64_t v20 = (char *)(v12 & 0x3FFFFFFFFFFFFFFFLL);
            uint64_t v24 = *(void *)(v11 + 16);
            uint64_t v25 = *(void *)(v11 + 24);
            outlined copy of Data._Representation(v7, v37);
            swift_retain();
            swift_retain();
            unint64_t v12 = __DataStorage._bytes.getter();
            if (!v12) {
              goto LABEL_31;
            }
            uint64_t v26 = __DataStorage._offset.getter();
            if (__OFSUB__(v24, v26)) {
              goto LABEL_66;
            }
            v12 += v24 - v26;
LABEL_31:
            if (__OFSUB__(v25, v24)) {
              goto LABEL_65;
            }
            __DataStorage._length.getter();
            unint64_t v4 = v37;
            closure #1 in static Data.== infix(_:_:)(v12, v7, v37, (char *)__s1);
            if (v23) {
              goto LABEL_69;
            }
            uint64_t v3 = 0;
            outlined consume of Data._Representation(v7, v37);
            swift_release();
            swift_release();
            unint64_t v4 = v39;
            uint64_t v5 = v40;
            if (__s1[0]) {
              goto LABEL_38;
            }
            goto LABEL_25;
          case 3uLL:
            memset(__s1, 0, 14);
            unint64_t v20 = (char *)v37;
            outlined copy of Data._Representation(v7, v37);
            closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v7, v37, &v44);
            if (v3) {
              goto LABEL_70;
            }
            uint64_t v3 = 0;
            uint64_t v21 = v7;
            unint64_t v22 = v37;
            goto LABEL_37;
          default:
            __s1[0] = *(void *)(v10 + 16);
            LOWORD(__s1[1]) = v12;
            BYTE2(__s1[1]) = BYTE2(v12);
            BYTE3(__s1[1]) = BYTE3(v12);
            BYTE4(__s1[1]) = BYTE4(v12);
            BYTE5(__s1[1]) = BYTE5(v12);
            unint64_t v20 = (char *)__s1 + BYTE6(v12);
            uint64_t v11 = v37;
            outlined copy of Data._Representation(v7, v37);
            closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v7, v37, &v44);
            if (v3)
            {
              outlined consume of Data._Representation(v7, v37);
              __break(1u);
LABEL_69:
              outlined consume of Data._Representation(v7, v4);
              swift_release();
              swift_release();
              __break(1u);
LABEL_70:
              outlined consume of Data._Representation(v7, (unint64_t)v20);
              __break(1u);
LABEL_71:
              outlined consume of Data._Representation(v7, v4);
              outlined consume of Data._Representation(v11, v12);
              __break(1u);
              JUMPOUT(0x1B10D8C9CLL);
            }
            uint64_t v3 = 0;
            uint64_t v21 = v7;
            unint64_t v22 = v37;
LABEL_37:
            outlined consume of Data._Representation(v21, v22);
            if ((v44 & 1) == 0)
            {
LABEL_25:
              swift_release();
              if (__OFADD__(v8, 1)) {
                goto LABEL_56;
              }
              goto LABEL_46;
            }
LABEL_38:
            swift_beginAccess();
            uint64_t v27 = *(void *)(v10 + 40);
            char v28 = *(unsigned char *)(v10 + 48);
            uint64_t v29 = *(void *)(a2 + 40);
            char v30 = *(unsigned char *)(a2 + 48);
            swift_release();
            if (v28)
            {
              uint64_t v5 = v40;
              if (v30) {
                return v8;
              }
            }
            else
            {
              if (v27 == v29) {
                char v31 = v30;
              }
              else {
                char v31 = 1;
              }
              uint64_t v5 = v40;
              if ((v31 & 1) == 0) {
                return v8;
              }
            }
            unint64_t v4 = v39;
            if (!__OFADD__(v8, 1))
            {
LABEL_46:
              if (++v8 == v5) {
                return 0;
              }
              continue;
            }
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            swift_bridgeObjectRetain();
            uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v5) {
              return 0;
            }
            break;
        }
        break;
      }
    }
  }
  return 0;
}

uint64_t specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(uint64_t a1, void *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v97 = a8;
  uint64_t v89 = a7;
  uint64_t v90 = a6;
  uint64_t v99 = a4;
  uint64_t v100 = a5;
  uint64_t v98 = a2;
  uint64_t v87 = a1;
  uint64_t v88 = a11;
  uint64_t v82 = a9;
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v95 = *(void *)(v14 - 8);
  uint64_t v96 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v94 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v92);
  os_log_type_t v93 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v91 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v79 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : UInt64]>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v86 = *a3;
  uint64_t v85 = *((void *)a3 + 2);
  uint64_t v84 = *((void *)a3 + 3);
  uint64_t v28 = *((void *)a3 + 4);
  uint64_t v83 = *((void *)a3 + 5);
  uint64_t v29 = *((void *)a3 + 6);
  uint64_t v30 = *((void *)a3 + 7);
  *(void *)(v12 + 144) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v31 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
  uint64_t v32 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  uint64_t v33 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscribers;
  uint64_t v34 = MEMORY[0x1E4FBC868];
  uint64_t v103 = MEMORY[0x1E4FBC868];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : PubSubTopic.Participant]);
  Published.init(initialValue:)();
  uint64_t v35 = v27;
  uint64_t v36 = v82;
  uint64_t v37 = v24;
  char v38 = v98;
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v33, v35, v37);
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata) = v34;
  uint64_t v39 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason;
  *(void *)uint64_t v39 = 0;
  *(unsigned char *)(v39 + 8) = -1;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt) = 0;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 0;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) = 0;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight) = 0;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_cryptorUpdatedWhileInitializing) = 0;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum) = 0;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) = 0;
  uint64_t v40 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscriberSeqNums;
  uint64_t v103 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : UInt64]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v40, v23, v20);
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked) = v34;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue) = v34;
  uint64_t v41 = v87;
  uint64_t v42 = MEMORY[0x1E4FBC860];
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue) = MEMORY[0x1E4FBC860];
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue) = v42;
  uint64_t v43 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInput;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_SubscribeRequest, Never>);
  swift_allocObject();
  *(void *)(v12 + v43) = PassthroughSubject.init()();
  uint64_t v44 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishInput;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_PublishRequest, Never>);
  swift_allocObject();
  *(void *)(v12 + v44) = PassthroughSubject.init()();
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeResponseCancellable) = 0;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeMissingEncryptionIDsCancellable) = 0;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeNotAuthorizedCancellable) = 0;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishResponseCancellable) = 0;
  uint64_t v45 = MEMORY[0x1E4FBC870];
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_upsertMetadataCancellables) = MEMORY[0x1E4FBC870];
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable) = 0;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorCancellables) = v45;
  *(void *)(v12 + 16) = v41;
  *(void *)(v12 + 24) = v38;
  *(_OWORD *)(v12 + 32) = v86;
  uint64_t v46 = v84;
  *(void *)(v12 + 48) = v85;
  *(void *)(v12 + 56) = v46;
  *(void *)(v12 + 64) = v28;
  *(void *)(v12 + 72) = v83;
  *(void *)(v12 + 80) = v29;
  *(void *)(v12 + 88) = v30;
  outlined init with copy of UserNotificationCenter(v99, v12 + 96);
  outlined init with copy of UserNotificationCenter(v100, v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  swift_beginAccess();
  *(void *)(v12 + 144) = v89;
  swift_unknownObjectWeakAssign();
  uint64_t v47 = v88;
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporter) = v36;
  if (v47)
  {
    uint64_t v48 = (void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag);
    *uint64_t v48 = a10;
    v48[1] = v47;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    BOOL v66 = v79;
    UUID.init()();
    uint64_t v67 = UUID.uuidString.getter();
    uint64_t v69 = v68;
    (*(void (**)(char *, uint64_t))(v80 + 8))(v66, v81);
    char v70 = (uint64_t *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag);
    *char v70 = v67;
    v70[1] = v69;
    if (v36)
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)log);
      swift_retain();
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        v102[0] = v90;
        *(_DWORD *)uint64_t v74 = 136315138;
        uint64_t v89 = v74 + 4;
        uint64_t v76 = *v70;
        unint64_t v75 = v70[1];
        swift_bridgeObjectRetain();
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v75, v102);
        uint64_t v42 = MEMORY[0x1E4FBC860];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        char v38 = v98;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v72, v73, "PubSubTopic initialized with a reporter, but no tag. Assigning random tag=%s", v74, 0xCu);
        uint64_t v77 = v90;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v77, -1, -1);
        MEMORY[0x1B3EA39E0](v74, -1, -1);
      }
      else
      {

        swift_release();
      }
    }
  }
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  strcpy((char *)v102, "PubSubTopic.");
  BYTE5(v102[1]) = 0;
  HIWORD(v102[1]) = -5120;
  v49._uint64_t countAndFlagsBits = v41;
  v49._object = v38;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v102[0] = v42;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v95 + 104))(v94, *MEMORY[0x1E4FBCC58], v96);
  *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) = 0;
  uint64_t v50 = v97;
  if (v97)
  {
    uint64_t v51 = *(void *)(v12 + 120);
    uint64_t v52 = *(void *)(v12 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v12 + 96), v51);
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(v51, v52);
    if (*(void *)(v50 + 16))
    {
      unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v53);
      if (v55)
      {
        uint64_t v56 = *(void *)(*(void *)(v50 + 56) + 8 * v54);
        *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum) = v56;
        *(void *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) = v56;
      }
    }
    uint64_t v57 = (uint64_t *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked);
    swift_beginAccess();
    *uint64_t v57 = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v58 = *(void *)(v12 + 120);
    uint64_t v59 = *(void *)(v12 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v12 + 96), v58);
    uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 16))(v58, v59);
    unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v60);
    if (v62)
    {
      unint64_t v63 = v61;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v101 = v50;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v50 = v101;
      }
      specialized _NativeDictionary._delete(at:)(v63, v50);
      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v101 = v50;
    swift_retain();
    static Published.subscript.setter();
  }
  PubSubTopic.bootstrap()();
  __swift_destroy_boxed_opaque_existential_1Tm(v100);
  __swift_destroy_boxed_opaque_existential_1Tm(v99);
  return v12;
}

uint64_t outlined consume of PubSubTopic.ClosedReason?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    return outlined consume of PubSubTopic.ClosedReason(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of PubSubTopic.ClosedReason(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  return closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for PubSubTopicError(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PubSubTopicError);
}

uint64_t type metadata accessor for PubSubTopic.SendItem(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PubSubTopic.SendItem);
}

uint64_t sub_1B10D98B4()
{
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return closure #1 in PubSubTopic.upsertMetadata(_:completion:)(a1, a2, a3, a4, v4);
}

uint64_t partial apply for closure #2 in PubSubTopic.upsertMetadata(_:completion:)(void *a1)
{
  return closure #2 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B10D9928()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #3 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1)
{
  return closure #3 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1B10D9974()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #4 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1)
{
  return closure #4 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1B10D99C8()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in PubSubTopic.refreshDataCryptorProvider(with:)()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0 + 24, v2, v3);
}

unint64_t lazy protocol witness table accessor for type TopicCatchupError and conformance TopicCatchupError()
{
  unint64_t result = lazy protocol witness table cache variable for type TopicCatchupError and conformance TopicCatchupError;
  if (!lazy protocol witness table cache variable for type TopicCatchupError and conformance TopicCatchupError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicCatchupError and conformance TopicCatchupError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PubSubTopic.State and conformance PubSubTopic.State()
{
  unint64_t result = lazy protocol witness table cache variable for type PubSubTopic.State and conformance PubSubTopic.State;
  if (!lazy protocol witness table cache variable for type PubSubTopic.State and conformance PubSubTopic.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubTopic.State and conformance PubSubTopic.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState()
{
  unint64_t result = lazy protocol witness table cache variable for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState;
  if (!lazy protocol witness table cache variable for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream()
{
  unint64_t result = lazy protocol witness table cache variable for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream;
  if (!lazy protocol witness table cache variable for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream);
  }
  return result;
}

uint64_t sub_1B10D9BD0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 136;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v4);
  uint64_t v6 = *(void *)(v3 + 144);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1B10D9C2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 144) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B10D9C90@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 32);
  *(void *)a2 = *(void *)(result + 24);
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1B10D9CA4(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 24) = *(void *)result;
  *(unsigned char *)(a2 + 32) = v2;
  return result;
}

uint64_t dispatch thunk of PubSubTopicDelegate.onRecordReceive(topic:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onMetadataUpdated(topic:removedKeys:upsertedKeyValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onSubscriberAdded(topic:participantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onSubscriberRemoved(topic:participantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onStateUpdated(topic:oldState:newState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.catchupNeeded(topic:catchupSender:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.topicClosed(topic:reason:unackedMessages:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

unsigned char *storeEnumTagSinglePayload for TopicCatchupError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B10D9DE0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TopicCatchupError()
{
  return &type metadata for TopicCatchupError;
}

uint64_t dispatch thunk of PubSubTopicRecord.publisherID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PubSubTopicRecord.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PubSubTopicRecord.toParticipantIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PubSubTopicRecord.acknowledge()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void *assignWithCopy for PubSubTopicError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for PubSubTopicError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v7 = (void *)a2[1];
        id v8 = v7;
        a1[1] = v7;
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v9 = type metadata accessor for NWError();
        uint64_t v10 = *(void *)(v9 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 3, v9))
        {
          uint64_t v11 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v10 + 16))(a1, a2, v9);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 3, v9);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for PubSubTopicError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CP_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for PubSubTopicError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v7 = type metadata accessor for NWError();
        uint64_t v8 = *(void *)(v7 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
        {
          uint64_t v9 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for PubSubTopicError()
{
  uint64_t result = type metadata accessor for PluginRpcError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.Participant(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.Participant(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.Participant()
{
  return &type metadata for PubSubTopic.Participant;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.Configuration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.Configuration()
{
  return &type metadata for PubSubTopic.Configuration;
}

uint64_t destroy for PubSubTopic.Message(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PubSubTopic.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PubSubTopic.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v8;
  return a1;
}

uint64_t assignWithTake for PubSubTopic.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.Message(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.Message(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.Message()
{
  return &type metadata for PubSubTopic.Message;
}

uint64_t initializeBufferWithCopyOfBuffer for PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of PubSubTopic.ClosedReason(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t outlined copy of PubSubTopic.ClosedReason(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PubSubTopic.ClosedReason(uint64_t a1)
{
  return outlined consume of PubSubTopic.ClosedReason(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of PubSubTopic.ClosedReason(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of PubSubTopic.ClosedReason(v5, v6);
  return a1;
}

uint64_t assignWithTake for PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of PubSubTopic.ClosedReason(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.ClosedReason(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.ClosedReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PubSubTopic.ClosedReason(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for PubSubTopic.ClosedReason(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.ClosedReason()
{
  return &type metadata for PubSubTopic.ClosedReason;
}

uint64_t destroy for PubSubTopic.ReceivedRecord(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  outlined copy of Data._Representation(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  return a1;
}

void *assignWithCopy for PubSubTopic.ReceivedRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  outlined copy of Data._Representation(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.ReceivedRecord(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.ReceivedRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.ReceivedRecord()
{
  return &type metadata for PubSubTopic.ReceivedRecord;
}

uint64_t ObjC metadata update function for PubSubTopic.SendItem()
{
  return type metadata accessor for PubSubTopic.SendItem(0);
}

void type metadata completion function for PubSubTopic.SendItem()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PubSubTopic.SendItem(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PubSubTopic.SendItem);
}

uint64_t dispatch thunk of PubSubTopic.SendItem.__allocating_init(data:to:previousSeqNumUnacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v5 + 120))(a1, a2, a3, a4, a5 & 1);
}

void type metadata accessor for Date?()
{
  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PubSubTopic.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10DACC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.State()
{
  return &type metadata for PubSubTopic.State;
}

unsigned char *storeEnumTagSinglePayload for PubSubTopic.PrimaryStreamState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10DADC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.PrimaryStreamState()
{
  return &type metadata for PubSubTopic.PrimaryStreamState;
}

uint64_t ObjC metadata update function for PubSubTopic()
{
  return type metadata accessor for PubSubTopic(0);
}

uint64_t type metadata accessor for PubSubTopic(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PubSubTopic);
}

void type metadata completion function for PubSubTopic()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<[UInt64 : PubSubTopic.Participant]>(319, &lazy cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>, &demangling cache variable for type metadata for [UInt64 : PubSubTopic.Participant]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<[UInt64 : PubSubTopic.Participant]>(319, &lazy cache variable for type metadata for Published<[UInt64 : UInt64]>, &demangling cache variable for type metadata for [UInt64 : UInt64]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for PubSubTopic(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PubSubTopic);
}

uint64_t dispatch thunk of PubSubTopic.__allocating_init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)()
{
  return (*(uint64_t (**)(void))(v0 + 360))();
}

unsigned char *storeEnumTagSinglePayload for PubSubTopic.PrimaryStream(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10DB168);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.PrimaryStream()
{
  return &type metadata for PubSubTopic.PrimaryStream;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_1B10DB208()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B10DB240()
{
  swift_release();
  outlined consume of PubSubTopic.ClosedReason(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  return MEMORY[0x1F4186498](v0, 33, 7);
}

void partial apply for closure #1 in PubSubTopic.closeStreams(reason:)(uint64_t a1)
{
  closure #1 in PubSubTopic.closeStreams(reason:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_1B10DB290()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #4 in PubSubTopic.upsertMetadata(_:completion:)()
{
  return closure #1 in closure #4 in PubSubTopic.upsertMetadata(_:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PubSubTopic.upsertMetadata(_:completion:)(void *a1)
{
  return closure #1 in closure #1 in closure #2 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in PubSubTopic.nextSeqNum()(uint64_t *a1)
{
  a1[1] = *(void *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum);
  uint64_t v3 = v1[15];
  uint64_t v4 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #2 in PubSubTopic._publish(_:)(uint64_t a1)
{
  return partial apply for closure #2 in PubSubTopic._publish(_:)(a1, closure #2 in PubSubTopic._publish(_:));
}

uint64_t partial apply for closure #1 in closure #2 in PubSubTopic._publish(_:)(uint64_t a1)
{
  return partial apply for closure #2 in PubSubTopic._publish(_:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #2 in PubSubTopic._publish(_:));
}

uint64_t partial apply for closure #2 in PubSubTopic._publish(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PubSubTopic._publish(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #2 in PubSubTopic._publish(_:)(a1, v1);
}

uint64_t partial apply for closure #1 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  return closure #1 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, v1);
}

uint64_t partial apply for closure #2 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  return closure #2 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, v1);
}

uint64_t partial apply for closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  return closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B10DB450@<X0>(void *a1@<X8>)
{
  return key path getter for PubSubTopic.subscribers : PubSubTopic(a1);
}

uint64_t sub_1B10DB478()
{
  return key path setter for PubSubTopic.subscribers : PubSubTopic();
}

uint64_t partial apply for closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(void *a1)
{
  return closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #2 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t *a1)
{
  uint64_t v3 = v1[15];
  uint64_t v4 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a1 = result;
  a1[1] = *(void *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
  return result;
}

__n128 partial apply for closure #1 in closure #1 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(__n128 *a1)
{
  __n128 result = v1[1];
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #5 in PubSubTopic.processInitializeAck(_:)()
{
  return closure #5 in PubSubTopic.processInitializeAck(_:)();
}

uint64_t sub_1B10DB554()
{
  uint64_t v1 = (int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #2 in PubSubTopic.processInitializeAck(_:)(unsigned char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0) - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #2 in PubSubTopic.processInitializeAck(_:)(a1, v4, v5, v6);
}

uint64_t sub_1B10DB6CC()
{
  uint64_t v1 = (int *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return MEMORY[0x1F4186498](v0, v4, v5);
}

void partial apply for closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0) - 8);
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(v2, v3, v4, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(void *a1)
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 16) + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t outlined init with take of (UInt64, UUID)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of PubSubTopic.ClosedReason?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    return outlined copy of PubSubTopic.ClosedReason(a1, a2);
  }
  return a1;
}

uint64_t sub_1B10DB920()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 25, 7);
}

uint64_t partial apply for closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)()
{
  return closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t partial apply for closure #1 in PubSubTopic.setupPublishStream()(uint64_t a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) = 3;
  return PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(1, a1);
}

void partial apply for closure #2 in PubSubTopic.setupPublishStream()(uint64_t a1)
{
  closure #2 in PubSubTopic.setupPublishStream()(a1, v1);
}

void partial apply for closure #1 in closure #2 in PubSubTopic.setupPublishStream()()
{
}

uint64_t _s14CopresenceCore17CP_SequenceNumberVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(void *a1)
{
  return closure #1 in closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _s14CopresenceCore17CP_SequenceNumberVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void partial apply for closure #1 in PubSubTopic.bootstrap()()
{
  closure #1 in PubSubTopic.bootstrap()(v0);
}

uint64_t sub_1B10DBA84()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PubSubTopic.bootstrap()(uint64_t a1)
{
  return closure #1 in closure #1 in PubSubTopic.bootstrap()(a1);
}

uint64_t partial apply for closure #2 in closure #1 in PubSubTopic.bootstrap()()
{
  return closure #2 in closure #1 in PubSubTopic.bootstrap()();
}

uint64_t partial apply for closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t a1)
{
  return closure #1 in PubSubTopic.ack(publisherID:seqNum:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t *a1)
{
  return closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(a1);
}

uint64_t partial apply for closure #4 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1);
}

double partial apply for closure #1 in closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(__n128 *a1)
{
  *(void *)&double result = partial apply for closure #1 in closure #1 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1).n128_u64[0];
  return result;
}

uint64_t specialized AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v3[19] = v5;
  v3[20] = *(void *)(v5 - 8);
  v3[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized AsyncSerialQueue.performAndWaitFor<A>(_:), 0, 0);
}

uint64_t specialized AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[18];
  uint64_t v13 = v0[21];
  uint64_t v14 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v5 = v0[14];
  uint64_t v12 = v0[15];
  uint64_t v6 = v0[13];
  v0[2] = v0;
  v0[7] = v0 + 12;
  v0[3] = specialized AsyncSerialQueue.performAndWaitFor<A>(_:);
  uint64_t v7 = swift_continuation_init();
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = v7;
  v8[3] = v6;
  v8[4] = v5;
  uint64_t v9 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v12 + *(int *)(v9 + 20), v4);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v10 + 24) = v8;
  v0[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v0[11] = v10;
  swift_retain();
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v13, v14);
  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(*v0 + 96);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 8);
    return v5(v4);
  }
}

BOOL PresenceHostSession.State.canBeReplaced.getter(unsigned __int8 a1)
{
  return a1 > 2u;
}

char *PresenceHostSession.__allocating_init(id:presenceController:)(char *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return PresenceHostSession.init(id:presenceController:)(a1, a2);
}

BOOL static PresenceHostSession.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t PresenceHostSession.updateSuspensionController(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_sessionSuspensionController;
  swift_beginAccess();
  outlined init with copy of SessionSuspensionControllerProtocol?(v3, (uint64_t)v6);
  uint64_t v4 = v7;
  uint64_t result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  if (v4)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of UserNotificationCenter(a1, (uint64_t)v6);
    swift_beginAccess();
    outlined assign with take of SessionSuspensionControllerProtocol?((uint64_t)v6, v3);
    return swift_endAccess();
  }
  return result;
}

id PresenceHostSession.connectionInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint);
  uint64_t v2 = (objc_class *)type metadata accessor for PresenceSessionConnectionInfo();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v1;
  v6.receiver = v3;
  v6.super_class = v2;
  id v4 = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

Swift::Void __swiftcall PresenceHostSession.resetSession()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  objc_super v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  int v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  id v8 = v0;
  if (v7 == 1)
  {
    outlined destroy of UUID?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in PresenceHostSession.resetSession();
  *(void *)(v12 + 24) = v6;
  if (v10 | v9)
  {
    v13[0] = 0;
    v13[1] = 0;
    _OWORD v13[2] = v9;
    v13[3] = v10;
  }
  swift_task_create();
  swift_release();
}

uint64_t PresenceHostSession.join()()
{
  v1[13] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceHostSession.join(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v14;
  char v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  objc_super v6 = os_log_type_enabled(v4, v5);
  int v7 = (void *)v0[13];
  if (v6)
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)id v8 = 138412290;
    v0[12] = v7;
    uint64_t v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = v7;

    _os_log_impl(&dword_1B0DF7000, v4, v5, "%@ Received request to join session.", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v10 = (void *)v0[13];
  v0[17] = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue;
  uint64_t v15 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v15);
  uint64_t v11 = swift_allocObject();
  v0[18] = v11;
  *(void *)(v11 + 16) = v10;
  uint64_t v12 = v10;
  return MEMORY[0x1F4188298](PresenceHostSession.join(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  v0[2] = v0;
  v0[3] = PresenceHostSession.join();
  uint64_t v5 = swift_continuation_init();
  objc_super v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PresenceHostSession.join();
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  int v7 = swift_allocObject();
  *(void *)(v7 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v7 + 24) = v6;
  v0[10] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 152) = v2;
  if (v2)
  {
    swift_willThrow();
    return MEMORY[0x1F4188298](PresenceHostSession.join(), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PresenceHostSession.leave()()
{
  v1[13] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceHostSession.leave(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v14;
  char v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  objc_super v6 = os_log_type_enabled(v4, v5);
  int v7 = (void *)v0[13];
  if (v6)
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)id v8 = 138412290;
    v0[12] = v7;
    uint64_t v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = v7;

    _os_log_impl(&dword_1B0DF7000, v4, v5, "%@ Received request to leave session.", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v10 = (void *)v0[13];
  v0[17] = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue;
  uint64_t v15 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v15);
  uint64_t v11 = swift_allocObject();
  v0[18] = v11;
  *(void *)(v11 + 16) = v10;
  uint64_t v12 = v10;
  return MEMORY[0x1F4188298](PresenceHostSession.leave(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  v0[2] = v0;
  v0[3] = PresenceHostSession.leave();
  uint64_t v5 = swift_continuation_init();
  objc_super v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PresenceHostSession.leave();
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  int v7 = swift_allocObject();
  *(void *)(v7 + 16) = &closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply;
  *(void *)(v7 + 24) = v6;
  v0[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 152) = v2;
  if (v2)
  {
    swift_willThrow();
    return MEMORY[0x1F4188298](PresenceHostSession.leave(), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
    return v3();
  }
}

uint64_t PresenceHostSession.updateMembers(_:)(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x1F4188298](PresenceHostSession.updateMembers(_:), 0, 0);
}

uint64_t PresenceHostSession.updateMembers(_:)()
{
  uint64_t v25 = v0;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  id v3 = v1;
  swift_bridgeObjectRetain_n();
  id v4 = v3;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  id v8 = (void *)v0[4];
  if (v7)
  {
    log = v5;
    uint64_t v9 = swift_slowAlloc();
    os_log_type_t type = v6;
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v9 = 138412546;
    v0[2] = v8;
    id v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v10 = v8;

    *(_WORD *)(v9 + 12) = 2080;
    type metadata accessor for AddressableMember();
    _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    uint64_t v12 = Set.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, log, type, "%@ Received request to update members to: %s.", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = v0[4];
  char v23 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v23);
  uint64_t v16 = *(void (**)(uint64_t))(**(void **)(v15
                                                     + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                       + 112);
  uint64_t v17 = swift_bridgeObjectRetain();
  v16(v17);
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t PresenceHostSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id PresenceHostSession.listener.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_listener);
}

id PresenceHostSession.endpoint.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint);
}

uint64_t PresenceHostSession.presenceController.getter()
{
  return swift_retain();
}

void *PresenceHostSession.maxAllowedDevices.unsafeMutableAddressor()
{
  return &static PresenceHostSession.maxAllowedDevices;
}

uint64_t static PresenceHostSession.maxAllowedDevices.getter()
{
  return 33;
}

uint64_t static PresenceHostSession.Errors.== infix(_:_:)()
{
  return 1;
}

void PresenceHostSession.Errors.hash(into:)()
{
}

Swift::Int PresenceHostSession.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

void PresenceHostSession.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int PresenceHostSession.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t PresenceHostSession.state.didset()
{
  LOBYTE(v17) = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v17);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  os_log_type_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (v5)
  {
    uint64_t v7 = swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v17 = v9;
    *(_DWORD *)uint64_t v7 = 138412546;
    uint64_t v10 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v8 = v2;

    *(_WORD *)(v7 + 12) = 2080;
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v10) + 0xB8))(v11);
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "%@ updated state to: %s", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    uint64_t v14 = v7;
    os_log_type_t v6 = (void *)MEMORY[0x1E4FBC8C8];
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  else
  {
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))((*v6 & *v2) + 0xB8))(v15);
  if (result == 4) {
    return (*(uint64_t (**)(void))((*v6 & *v2) + 0x128))(0);
  }
  return result;
}

uint64_t PresenceHostSession.state.getter()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PresenceHostSession.state.setter()
{
  return PresenceHostSession.state.didset();
}

uint64_t (*PresenceHostSession.state.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession__state;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 17);
  return PresenceHostSession.state.modify;
}

uint64_t PresenceHostSession.state.modify(uint64_t a1)
{
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a1 + 16);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  return PresenceHostSession.state.didset();
}

uint64_t PresenceHostSession.$state.getter()
{
  return swift_retain();
}

id PresenceHostSession.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_queue);
}

uint64_t PresenceHostSession.workQueue.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AsyncSerialQueue(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue, a1, (uint64_t (*)(void))type metadata accessor for AsyncSerialQueue);
}

uint64_t PresenceHostSession.suspensionAssertions.getter()
{
  return swift_bridgeObjectRetain();
}

void PresenceHostSession.suspensionAssertions.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_suspensionAssertions);
  swift_beginAccess();
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  char v4 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v4);
}

void (*PresenceHostSession.suspensionAssertions.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PresenceHostSession.suspensionAssertions.modify;
}

void PresenceHostSession.suspensionAssertions.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    char v3 = 0;
    AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v3);
  }
}

uint64_t PresenceHostSession.reporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_reporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a1);
}

uint64_t PresenceHostSession.reporter.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_reporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3);
  return swift_endAccess();
}

uint64_t (*PresenceHostSession.reporter.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PresenceHostSession.abcReporter.getter()
{
  return swift_retain();
}

void PresenceHostSession.connection.willset(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  id v4 = a1;
  id v5 = v1;
  id v6 = v4;
  uint64_t v7 = (char *)v5;
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  uint64_t v10 = &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v30 = v9;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v31[0] = v29;
    *(_DWORD *)uint64_t v11 = 138412802;
    unint64_t v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v7;

    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v14 = (void **)&v13[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection];
    swift_beginAccess();
    uint64_t v15 = *v14;
    if (*v14)
    {
      type metadata accessor for PresenceSessionHostConnection();
      id v16 = v15;
      uint64_t v17 = String.init<A>(reflecting:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2080;
    if (a1)
    {
      type metadata accessor for PresenceSessionHostConnection();
      id v20 = v6;
      uint64_t v21 = String.init<A>(reflecting:)();
      unint64_t v23 = v22;
      uint64_t v10 = &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
      uint64_t v24 = v29;
    }
    else
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v10 = &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
      uint64_t v24 = v29;
      uint64_t v21 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v8, v30, "%@ updated oldConnection: %s newConnection: %s", (uint8_t *)v11, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
  }
  uint64_t v25 = (void **)&v7[v10[53]];
  swift_beginAccess();
  uint64_t v26 = (char *)*v25;
  if (*v25)
  {
    uint64_t v27 = *(void **)&v26[direct field offset for XPCHostConnection.connection];
    uint64_t v28 = v26;
    objc_msgSend(v27, sel_setExportedObject_, 0);
    objc_msgSend(v27, sel_setInvalidationHandler_, 0);
    objc_msgSend(v27, sel_setInterruptionHandler_, 0);
    objc_msgSend(v27, sel_invalidate);
  }
}

void *PresenceHostSession.connection.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void PresenceHostSession.connection.setter(void *a1)
{
  PresenceHostSession.connection.willset(a1);
  id v3 = (void **)(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

void (*PresenceHostSession.connection.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection;
  v3[4] = v1;
  v3[5] = v4;
  id v5 = (void **)(v1 + v4);
  swift_beginAccess();
  id v6 = *v5;
  v3[3] = *v5;
  id v7 = v6;
  return PresenceHostSession.connection.modify;
}

void PresenceHostSession.connection.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24);
  id v3 = *v4;
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    id v7 = v3;
    PresenceHostSession.connection.willset(v3);
    id v8 = *(void **)(v5 + v6);
    *(void *)(v5 + v6) = v3;

    os_log_type_t v9 = *v4;
  }
  else
  {
    PresenceHostSession.connection.willset(*(void **)(*(void *)a1 + 24));
    os_log_type_t v9 = *(void **)(v5 + v6);
    *(void *)(v5 + v6) = v3;
  }

  free(v2);
}

uint64_t PresenceHostSession.presentDeviceListener.getter()
{
  return swift_retain();
}

uint64_t PresenceHostSession.presentDeviceListener.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presentDeviceListener);
  swift_beginAccess();
  *id v3 = a1;
  return swift_release();
}

uint64_t (*PresenceHostSession.presentDeviceListener.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

char *PresenceHostSession.init(id:presenceController:)(char *a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v67 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v63 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v60 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v59);
  uint64_t v58 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v9 - 8);
  v52[2] = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession__state;
  LOBYTE(v70) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceHostSession.State, Never>);
  swift_allocObject();
  unint64_t v19 = v2;
  *(void *)&v2[v18] = CurrentValueSubject.init(_:)();
  uint64_t v20 = (uint64_t)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue];
  uint64_t v54 = type metadata accessor for TaskPriority();
  uint64_t v21 = *(void *)(v54 - 8);
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v55 = v21 + 56;
  v53(v17, 1, 1, v54);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBD028], v11);
  AsyncSerialQueue.init(priority:bufferingPolicy:)((uint64_t)v17, (uint64_t)v14, v20);
  *(void *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_suspensionAssertions] = MEMORY[0x1E4FBC870];
  unint64_t v22 = &v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_reporter];
  *((void *)v22 + 3) = &type metadata for FastSyncAnalyticsReporter;
  *((void *)v22 + 4) = &protocol witness table for FastSyncAnalyticsReporter;
  *(void *)unint64_t v22 = 0;
  uint64_t v23 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter;
  type metadata accessor for ABCReporter();
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v24[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init);
  v24[3] = 0x636E795374736146;
  void v24[4] = 0xE800000000000000;
  v24[5] = 0x65636E6573657250;
  v24[6] = 0xEF6E6F6973736553;
  *(void *)&v19[v23] = v24;
  *(void *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection] = 0;
  *(void *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presentDeviceListener] = 0;
  uint64_t v25 = &v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_sessionSuspensionController];
  *(_OWORD *)uint64_t v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *((void *)v25 + 4) = 0;
  uint64_t v65 = v4;
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v57 = v4 + 16;
  v56(&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_id], (uint64_t)v67, v3);
  id v26 = objc_msgSend(self, sel_anonymousListener);
  *(void *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_listener] = v26;
  id v27 = objc_msgSend(v26, sel_endpoint);
  *(void *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint] = v27;
  v52[1] = type metadata accessor for OS_dispatch_queue();
  unint64_t v70 = 0;
  unint64_t v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  unint64_t v70 = 0xD000000000000014;
  unint64_t v71 = 0x80000001B1162BB0;
  uint64_t v28 = _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v64 = v3;
  v52[0] = v28;
  v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  unint64_t v70 = MEMORY[0x1E4FBC860];
  _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v61 + 104))(v60, *MEMORY[0x1E4FBCC58], v62);
  *(void *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController] = v66;
  swift_retain();

  os_log_type_t v30 = (objc_class *)type metadata accessor for PresenceHostSession(0);
  v72.receiver = v19;
  v72.super_class = v30;
  id v31 = objc_msgSendSuper2(&v72, sel_init);
  v53(v17, 1, 1, v54);
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = 0;
  uint64_t v32[3] = 0;
  v32[4] = v31;
  uint64_t v33 = (char *)v31;
  uint64_t v34 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in PresenceHostSession.init(id:presenceController:), (uint64_t)v32);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  uint64_t v35 = AnyCancellable.init(_:)();
  uint64_t v36 = (uint64_t *)&v33[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presentDeviceListener];
  swift_beginAccess();
  *uint64_t v36 = v35;
  swift_release();
  uint64_t v37 = *(void **)&v33[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_listener];
  objc_msgSend(v37, sel_setDelegate_, v33);
  objc_msgSend(v37, sel_resume);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Log.host);
  uint64_t v39 = v63;
  uint64_t v40 = v64;
  uint64_t v41 = v67;
  v56(v63, (uint64_t)v67, v64);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t v62 = v34;
    uint64_t v46 = v45;
    uint64_t v69 = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Swift::String v49 = *(void (**)(char *, uint64_t))(v65 + 8);
    v49(v39, v40);
    _os_log_impl(&dword_1B0DF7000, v42, v43, "Initialized PresenceHostSession with identifier: %s", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v46, -1, -1);
    MEMORY[0x1B3EA39E0](v44, -1, -1);
    swift_release();

    swift_release();
    v49(v67, v40);
  }
  else
  {

    swift_release();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v65 + 8);
    v50(v39, v40);
    swift_release();
    v50(v41, v40);
  }
  return v33;
}

uint64_t outlined init with copy of SessionSuspensionControllerProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SessionSuspensionControllerProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in PresenceHostSession.init(id:presenceController:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(int **)((*MEMORY[0x1E4FBC8C8] & *a4) + 0x158);
  uint64_t v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v8();
}

uint64_t PresenceHostSession.listenForUpdatedDevices()()
{
  v1[25] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[26] = v2;
  v1[27] = *(void *)(v2 - 8);
  v1[28] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  v1[29] = v3;
  v1[30] = *(void *)(v3 - 8);
  v1[31] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DispatchQoS();
  v1[32] = v4;
  v1[33] = *(void *)(v4 - 8);
  v1[34] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>);
  v1[35] = v5;
  v1[36] = *(void *)(v5 - 8);
  v1[37] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
  v1[38] = v6;
  v1[39] = *(void *)(v6 - 8);
  v1[40] = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceHostSession.listenForUpdatedDevices(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[41] = __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Waiting for presenceController to provide updated devices.", v4, 2u);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  uint64_t v6 = v0[36];
  uint64_t v5 = v0[37];
  uint64_t v7 = v0[35];
  uint64_t v8 = v0[25];

  v0[20] = (*(uint64_t (**)(void))(**(void **)(v8
                                              + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                + 152))();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  uint64_t v10 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[PresentDevice], Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  MEMORY[0x1B3EA1110](v9, v10);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v11 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[42] = v12;
  *uint64_t v12 = v0;
  v12[1] = PresenceHostSession.listenForUpdatedDevices();
  uint64_t v13 = v0[38];
  return MEMORY[0x1F4187C78](v0 + 22, v13, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PresenceHostSession.listenForUpdatedDevices();
  }
  else {
    uint64_t v2 = PresenceHostSession.listenForUpdatedDevices();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 352) = *(void *)(v0 + 176);
  return MEMORY[0x1F4188298](PresenceHostSession.listenForUpdatedDevices(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t (*v12)(void);
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void *, void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_class *v36;
  unsigned char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  objc_super *v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;

  unint64_t v70 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0[44];
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v69 = v6;
      *(_DWORD *)uint64_t v5 = 136315138;
      v1[24] = v2;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PresentDevice]);
      uint64_t v7 = String.init<A>(reflecting:)();
      *(void *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Received updated present devices: %s", (uint8_t *)v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v6, -1, -1);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v14 = (uint64_t *)MEMORY[0x1E4FBC8C8];
    uint64_t v15 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v1[25]) + 0x108))();
    if (v15)
    {
      uint64_t v16 = (char *)v15;
      uint64_t v61 = v1 + 2;
      uint64_t v17 = *v14;
      uint64_t v18 = *(void *)(v2 + 16);
      unint64_t v19 = (void (*)(void *, void))(*(uint64_t (**)(void *))((v17 & *(void *)v1[25])
                                                                                       + 0x100))(v1 + 13);
      uint64_t v21 = *(void *)(v20 + 24);
      unint64_t v22 = *(void *)(v20 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v18, v21, v22);
      v19(v1 + 13, 0);
      uint64_t v68 = v1;
      if (v18)
      {
        uint64_t v60 = v16;
        uint64_t v62 = (objc_super *)(v1 + 17);
        v1[19] = MEMORY[0x1E4FBC860];
        unint64_t v63 = v1 + 19;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v23 = v2 + 32;
        uint64_t v24 = v1 + 8;
        do
        {
          uint64_t v25 = v1[27];
          id v26 = v1[28];
          uint64_t v64 = v1[26];
          uint64_t v66 = v18;
          outlined init with copy of UserNotificationCenter(v23, (uint64_t)v24);
          id v27 = v1[11];
          uint64_t v28 = v68[12];
          __swift_project_boxed_opaque_existential_1(v24, v27);
          (*(void (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
          Swift::String v29 = v68[11];
          os_log_type_t v30 = v68[12];
          __swift_project_boxed_opaque_existential_1(v24, v29);
          id v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 24))(v29, v30);
          uint64_t v33 = v32;
          uint64_t v34 = v68[11];
          uint64_t v35 = v68[12];
          __swift_project_boxed_opaque_existential_1(v24, v34);
          LOBYTE(v34) = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 32))(v34, v35);
          uint64_t v36 = (objc_class *)type metadata accessor for PresenceSessionParticipant();
          uint64_t v37 = objc_allocWithZone(v36);
          *(NSUUID *)&v37[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = UUID._bridgeToObjectiveC()();
          uint64_t v38 = MEMORY[0x1B3EA1B00](v31, v33);
          uint64_t v1 = v68;
          swift_bridgeObjectRelease();
          *(void *)&v37[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v38;
          v37[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = v34 & 1;

          v68[17] = v37;
          v68[18] = v36;
          [(objc_super *)v62 init];
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v64);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v23 += 40;
          uint64_t v18 = v66 - 1;
        }
        while (v66 != 1);
        uint64_t v39 = *v63;
        swift_bridgeObjectRelease();
        uint64_t v16 = v60;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = MEMORY[0x1E4FBC860];
      }
      Swift::String v49 = v1[33];
      unint64_t v48 = v1[34];
      uint64_t v50 = v1[31];
      uint64_t v67 = v1[32];
      uint64_t v51 = v68[30];
      uint64_t v52 = v68[29];
      uint64_t v53 = *(void **)&v16[direct field offset for XPCHostConnection.queue];
      uint64_t v54 = swift_allocObject();
      *(void *)(v54 + 16) = v16;
      *(void *)(v54 + 24) = v39;
      v68[6] = partial apply for closure #2 in PresenceHostSession.listenForUpdatedDevices();
      v68[7] = v54;
      v68[2] = MEMORY[0x1E4F143A8];
      v68[3] = 1107296256;
      v68[4] = thunk for @escaping @callee_guaranteed () -> ();
      v68[5] = &block_descriptor_35;
      uint64_t v55 = _Block_copy(v61);
      uint64_t v56 = v53;
      uint64_t v65 = v16;
      static DispatchQoS.unspecified.getter();
      v68[23] = MEMORY[0x1E4FBC860];
      _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1B3EA2200](0, v48, v50, v55);
      _Block_release(v55);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      uint64_t v1 = v68;
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v67);
      swift_release();
    }
    else
    {
      uint64_t v40 = (void *)v1[25];
      swift_bridgeObjectRelease();
      uint64_t v41 = v40;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      uint64_t v44 = os_log_type_enabled(v42, v43);
      uint64_t v45 = (void *)v1[25];
      if (v44)
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v47 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 138412290;
        *(void *)(v46 + 4) = v45;
        *uint64_t v47 = v45;
        _os_log_impl(&dword_1B0DF7000, v42, v43, "%@ Ignoring updated devices because there is no XPC connection to the client.", (uint8_t *)v46, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v47, -1, -1);
        MEMORY[0x1B3EA39E0](v46, -1, -1);
      }
      else
      {
      }
    }
    uint64_t v57 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
    uint64_t v58 = (void *)swift_task_alloc();
    v1[42] = v58;
    *uint64_t v58 = v1;
    v58[1] = PresenceHostSession.listenForUpdatedDevices();
    uint64_t v59 = v1[38];
    return MEMORY[0x1F4187C78](v1 + 22, v59, v57);
  }
  else
  {
    (*(void (**)(void, void))(v1[39] + 8))(v1[40], v1[38]);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B0DF7000, v9, v10, "PresenceController finished providing devices. ", v11, 2u);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v1[1];
    return v12();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 168) = *(void *)(v0 + 344);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

void closure #2 in PresenceHostSession.listenForUpdatedDevices()(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceSessionXPCClient);
  if (swift_dynamicCast())
  {
    type metadata accessor for PresenceSessionParticipant();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_updatePresentDevicesWithDevices_, isa);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t PresenceHostSession.description.getter()
{
  swift_getObjectType();
  _StringGuts.grow(_:)(32);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x203A666C6573283ELL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0x203A6469202CLL;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x3A6574617473202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

id PresenceHostSession.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PresenceHostSession.init()()
{
}

id PresenceHostSession.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceHostSession(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Identifiable.id.getter in conformance PresenceHostSession@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_id;
  uint64_t v4 = type metadata accessor for UUID();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance PresenceHostSession()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance PresenceHostSession;
  return PresenceHostSession.acquireSuspensionAssertion()();
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance PresenceHostSession(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  Swift::String v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t PresenceHostSession.acquireSuspensionAssertion()()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  v1[3] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[4] = v3;
  v1[5] = *(void *)(v3 + 64);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceHostSession.acquireSuspensionAssertion(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t (*v10)(void *, uint64_t);
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(id *)(v0 + 16);
  UUID.init()();
  swift_unknownObjectWeakInit();

  outlined init with copy of AsyncSerialQueue(v1, v2, type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  uint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  Swift::String v6 = swift_allocObject();
  *(void *)(v0 + 64) = v6;
  *(void *)(v6 + 16) = v4;
  outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(v2, v6 + v5);
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to specialized AsyncSerialQueue.performAndWaitFor<A>(_:)
                                                + async function pointer to specialized AsyncSerialQueue.performAndWaitFor<A>(_:));
  uint64_t v7 = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v8;
  *uint64_t v8 = v0;
  v8[1] = PresenceHostSession.acquireSuspensionAssertion();
  return v10(&async function pointer to partial apply for closure #1 in PresenceHostSession.acquireSuspensionAssertion(), v6);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  outlined destroy of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(v0[7], type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[11];
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(*(void *)(v0 + 56), type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  swift_release();
  if (v1)
  {
    uint64_t v5 = PresenceHostSession.acquireSuspensionAssertion();
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = PresenceHostSession.acquireSuspensionAssertion();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t closure #1 in PresenceHostSession.join()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.join(), 0, 0);
}

uint64_t closure #1 in PresenceHostSession.join()()
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized PresenceHostSession.invalidation(block:)
                                                + async function pointer to specialized PresenceHostSession.invalidation(block:));
  id v1 = *(id *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in PresenceHostSession.join();
  uint64_t v3 = *(void *)(v0 + 16);
  return v5(v3, v3);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  id v1 = *(void **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc();

  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t PresenceHostSession._join()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](PresenceHostSession._join(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  uint8_t *v10;
  void *v11;
  id v12;
  uint8_t *v13;
  void *v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (void **)(v0 + 24);
  uint64_t v17 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v17);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v3 = *v2;
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  uint64_t v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *v2;
  if (v8)
  {
    uint64_t v16 = v1;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    *(v2 - 1) = v9;
    uint64_t v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v11 = v9;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "%@ processing request to join", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    uint64_t v13 = v10;
    uint64_t v1 = v16;
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v14;
  char *v14 = v1;
  v14[1] = PresenceHostSession._join();
  return PresenceHostSession.assertPresence()();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t PresenceHostSession.invalidation(block:)(int *a1)
{
  *(void *)(v2 + 40) = v1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  *uint64_t v3 = v2;
  v3[1] = PresenceHostSession.invalidation(block:);
  return v5();
}

uint64_t PresenceHostSession.invalidation(block:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](PresenceHostSession.invalidation(block:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  void *v1;
  void **v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  NSObject *log;
  uint64_t *v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = (void **)(v0 + 40);
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 56);
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  uint64_t v5 = v1;
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.error.getter();
  uint64_t v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void **)(v0 + 56);
  uint64_t v13 = *(void **)(v0 + 40);
  uint64_t v33 = v0;
  if (v11)
  {
    uint64_t v14 = (void *)(v0 + 16);
    os_log_type_t type = v10;
    uint64_t v15 = (void *)(v0 + 24);
    os_log_type_t v30 = (uint64_t *)(v0 + 32);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)uint64_t v16 = 138412546;
    char *v14 = v13;
    log = v9;
    uint64_t v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v13;

    *(_WORD *)(v16 + 12) = 2080;
    void *v15 = v12;
    unint64_t v19 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v20 = String.init<A>(reflecting:)();
    *os_log_type_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v9 = log;
    _os_log_impl(&dword_1B0DF7000, log, type, "Invalidating %@ due to invalidation block throwing error. %s", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v32, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
  }
  unint64_t v22 = *v2;
  uint64_t v23 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **v2) + 0xC0))(4);
  (*(void (**)(void))((*v23 & *v22) + 0x110))(0);
  uint64_t v24 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v26 = 0;
    _os_log_impl(&dword_1B0DF7000, v24, v25, "Releasing presence assertion due to invalidation.", v26, 2u);
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }

  id v27 = (void *)swift_task_alloc();
  *(void *)(v33 + 64) = v27;
  void *v27 = v33;
  v27[1] = PresenceHostSession.invalidation(block:);
  v27[4] = *(void *)(v33 + 40);
  return MEMORY[0x1F4188298](PresenceHostSession.releasePresence(), 0, 0);
}

{
  void *v0;
  uint64_t v2;

  swift_task_dealloc();
  if (v0) {

  }
  return MEMORY[0x1F4188298](PresenceHostSession.invalidation(block:), 0, 0);
}

uint64_t PresenceHostSession.assertPresence()()
{
  *(void *)(v1 + 40) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 48) = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceHostSession.assertPresence(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  id *v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  void *v9;
  uint8_t *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  id v17;
  uint8_t *v18;
  void *v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  const char *v24;
  uint64_t (*v25)(void);
  void *v27;
  uint64_t (*v28)(void);
  char v29;
  uint64_t v30;
  uint64_t v31;

  os_log_type_t v30 = v0;
  uint64_t v1 = (void *)v0;
  uint64_t v2 = (id *)(v0 + 40);
  Swift::String v29 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v29);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v1[5];
  uint64_t v4 = type metadata accessor for Logger();
  v1[7] = __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  uint64_t v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = (void *)v1[5];
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    *(v2 - 1) = v9;
    uint64_t v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v11 = v9;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "%@ Received request to assert presence", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {
  }
  v1[8] = v9;
  switch((*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v1[5]) + 0xB8))())
  {
    case 1u:
      uint64_t v21 = Logger.logObject.getter();
      unint64_t v22 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v21, v22)) {
        goto LABEL_16;
      }
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      uint64_t v24 = "Failing to assert presence because we're already asserted.";
      break;
    case 3u:
      uint64_t v21 = Logger.logObject.getter();
      unint64_t v22 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v21, v22)) {
        goto LABEL_16;
      }
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      uint64_t v24 = "Failing to assert presence because session is currently leaving and shouldn't have been able to re-enter.";
      break;
    case 4u:
      uint64_t v21 = Logger.logObject.getter();
      unint64_t v22 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v21, v22)) {
        goto LABEL_16;
      }
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      uint64_t v24 = "Failing to assert presence because we're in the invalidated state.";
      break;
    default:
      uint64_t v13 = *v2;
      uint64_t v14 = Logger.logObject.getter();
      uint64_t v15 = static os_log_type_t.default.getter();
      uint64_t v16 = os_log_type_enabled(v14, v15);
      uint64_t v17 = *v2;
      if (v16)
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        unint64_t v19 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 138412290;
        *(v2 - 2) = v17;
        uint64_t v20 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v19 = v9;

        _os_log_impl(&dword_1B0DF7000, v14, v15, "%@ asserting presence", v18, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v19, -1, -1);
        MEMORY[0x1B3EA39E0](v18, -1, -1);
      }
      else
      {
      }
      uint64_t v28 = (uint64_t (*)(void))(*(void *)(**(void **)(v1[5]
                                                        + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                          + 192)
                              + **(int **)(**(void **)(v1[5]
                                                       + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                         + 192));
      id v27 = (void *)swift_task_alloc();
      v1[9] = v27;
      void *v27 = v1;
      v27[1] = PresenceHostSession.assertPresence();
      uint64_t v25 = v28;
      return v25();
  }
  _os_log_impl(&dword_1B0DF7000, v21, v22, v24, v23, 2u);
  MEMORY[0x1B3EA39E0](v23, -1, -1);
LABEL_16:

  lazy protocol witness table accessor for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v1[1];
  return v25();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x1F4188298](PresenceHostSession.assertPresence(), 0, 0);
  }
}

{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21;

  uint64_t v1 = *(id *)(v0 + 40);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v20 = *(void *)(v0 + 64);
    uint64_t v4 = *(void **)(v0 + 40);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    *(void *)(v0 + 16) = v4;
    uint64_t v7 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v20;

    _os_log_impl(&dword_1B0DF7000, v2, v3, "%@ Asserted presence", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 40);
  }
  uint64_t v9 = *(void **)(v0 + 40);
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v9) + 0xC0))(1);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))((*v10 & *v9) + 0x120))(v11);
  swift_release();
  if (!v12)
  {
    uint64_t v14 = *(void **)(v0 + 40);
    uint64_t v13 = *(void *)(v0 + 48);
    static TaskPriority.background.getter();
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 0, 1, v15);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v14;
    uint64_t v17 = v14;
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v13, (uint64_t)&async function pointer to partial apply for closure #1 in PresenceHostSession.assertPresence(), (uint64_t)v16);
    swift_release();
    outlined destroy of UUID?(v13, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t closure #1 in PresenceHostSession.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(void *)(v4 + 48) = a2;
  *(unsigned char *)(v4 + 82) = 4;
  return MEMORY[0x1F4188298](PresenceHostSession._leave(endState:), 0, 0);
}

uint64_t PresenceHostSession._leave(endState:)(char a1)
{
  *(void *)(v2 + 48) = v1;
  *(unsigned char *)(v2 + 82) = a1;
  return MEMORY[0x1F4188298](PresenceHostSession._leave(endState:), 0, 0);
}

uint64_t PresenceHostSession._leave(endState:)()
{
  uint64_t v41 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = (void **)(v0 + 48);
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 48);
  if (v7)
  {
    char v35 = *(unsigned char *)(v0 + 82);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v36 = (void *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    v40[0] = v38;
    *(_DWORD *)uint64_t v9 = 138412546;
    *(void *)(v0 + 32) = v8;
    id v10 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v36 = v8;

    uint64_t v2 = (void **)(v0 + 48);
    *(_WORD *)(v9 + 12) = 2080;
    *(unsigned char *)(v0 + 81) = v35;
    uint64_t v11 = String.init<A>(reflecting:)();
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v5, v6, "%@ Received request to leave current session with an end-desired state of: %s", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v36, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v38, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  *(void *)(v0 + 56) = v8;
  uint64_t v13 = *(void **)(v0 + 48);
  int v14 = *(unsigned __int8 *)(v0 + 82);
  LOBYTE(v40[0]) = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)v40);
  uint64_t v15 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v16 = *(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v13) + 0xB8);
  if (v14 == v16())
  {
    id v17 = *(id *)(v0 + 48);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *v2;
    if (v20)
    {
      char v37 = *(unsigned char *)(v0 + 82);
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v40[0] = v39;
      *(_DWORD *)uint64_t v22 = 138412546;
      *(void *)(v0 + 16) = v21;
      uint64_t v24 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v8;

      *(_WORD *)(v22 + 12) = 2080;
      *(unsigned char *)(v0 + 80) = v37;
      uint64_t v25 = String.init<A>(reflecting:)();
      *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v18, v19, "%@ is already in desired end-state: %s", (uint8_t *)v22, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v39, -1, -1);
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }
    else
    {
    }
LABEL_14:
    specialized $defer #1 () in PresenceHostSession._leave(endState:)(*(void **)(v0 + 48));
    id v31 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    switch(v16())
    {
      case 1u:
        if (*(unsigned char *)(v0 + 82) == 4) {
          (*(void (**)(uint64_t))((*v15 & **v2) + 0xC0))(3);
        }
        uint64_t v32 = (void *)swift_task_alloc();
        *(void *)(v0 + 64) = v32;
        void *v32 = v0;
        v32[1] = PresenceHostSession._leave(endState:);
        v32[4] = *(void *)(v0 + 48);
        return MEMORY[0x1F4188298](PresenceHostSession.releasePresence(), 0, 0);
      case 2u:
        uint64_t v33 = *(unsigned __int8 *)(v0 + 82);
        if (v33 == 4)
        {
          (*(void (**)(uint64_t))((*v15 & **(void **)(v0 + 48)) + 0xC0))(3);
          uint64_t v33 = *(unsigned __int8 *)(v0 + 82);
        }
        (*(void (**)(uint64_t))((*v15 & **(void **)(v0 + 48)) + 0xC0))(v33);
        goto LABEL_14;
      case 3u:
        id v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.fault.getter();
        if (!os_log_type_enabled(v27, v28)) {
          goto LABEL_28;
        }
        Swift::String v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v29 = 0;
        os_log_type_t v30 = "Session is currently leaving and shouldn't have been able to re-enter.";
        break;
      case 4u:
        id v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v27, v28)) {
          goto LABEL_28;
        }
        Swift::String v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v29 = 0;
        os_log_type_t v30 = "Session is currently invalidated. Can't leave.";
        break;
      default:
        id v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v27, v28)) {
          goto LABEL_28;
        }
        Swift::String v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v29 = 0;
        os_log_type_t v30 = "Session is currently idle in .waiting state. Can't leave.";
        break;
    }
    _os_log_impl(&dword_1B0DF7000, v27, v28, v30, v29, 2u);
    MEMORY[0x1B3EA39E0](v29, -1, -1);
LABEL_28:

    lazy protocol witness table accessor for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors();
    swift_allocError();
    swift_willThrow();
    specialized $defer #1 () in PresenceHostSession._leave(endState:)(*(void **)(v0 + 48));
    id v31 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v31();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PresenceHostSession._leave(endState:);
  }
  else {
    uint64_t v2 = PresenceHostSession._leave(endState:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 48)) + 0xC0))(*(unsigned __int8 *)(v0 + 82));
  specialized $defer #1 () in PresenceHostSession._leave(endState:)(*(void **)(v0 + 48));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 48)) + 0xC0))(*(unsigned __int8 *)(v0 + 82));
  specialized $defer #1 () in PresenceHostSession._leave(endState:)(*(void **)(v0 + 48));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PresenceHostSession.releasePresence()()
{
  *(void *)(v1 + 32) = v0;
  return MEMORY[0x1F4188298](PresenceHostSession.releasePresence(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  char v5;
  uint64_t v6;
  uint64_t v7;

  os_log_type_t v6 = v0;
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v5 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v5);
  id v4 = (uint64_t (*)(void))(*(void *)(**(void **)(v1
                                                   + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                     + 200)
                         + **(int **)(**(void **)(v1
                                                  + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                    + 200));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = PresenceHostSession.releasePresence();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](BackgroundSession.releasePresence(), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t closure #1 in PresenceHostSession.assertPresence()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.assertPresence(), 0, 0);
}

uint64_t closure #1 in PresenceHostSession.assertPresence()()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter);
  id v2 = objc_msgSend(self, sel_mainBundle);
  id v3 = objc_msgSend(v2, sel_bundleIdentifier);

  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0xD00000000000001DLL;
    unint64_t v6 = 0x80000001B115CEE0;
  }
  uint64_t v7 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(*(void *)v1 + 112))(0xD000000000000011, 0x80000001B1162CB0, 0xD00000000000002FLL, 0x80000001B1162CD0, v4, v6);
  v0[3] = v7;
  swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v16 = (uint64_t (*)(uint64_t, __n128))(*(void *)(*(void *)v1 + 120)
                                                  + **(int **)(*(void *)v1 + 120));
    uint64_t v8 = (void *)swift_task_alloc();
    v0[4] = v8;
    *uint64_t v8 = v0;
    v8[1] = closure #2 in IDSGroupSessionProvider.requestParticipant(for:);
    v9.n128_u64[0] = 0;
    return v16(v7, v9);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.abcReporter);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      int v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v14 = 0;
      _os_log_impl(&dword_1B0DF7000, v12, v13, "Failed to generate signature for session unsuspend failure", v14, 2u);
      MEMORY[0x1B3EA39E0](v14, -1, -1);
    }

    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t closure #1 in PresenceHostSession.resetSession()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.resetSession(), 0, 0);
}

uint64_t closure #1 in PresenceHostSession.resetSession()()
{
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = type metadata accessor for Logger();
  v0[6] = __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[5];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[4] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v12 = v7;

    _os_log_impl(&dword_1B0DF7000, v4, v5, "%@ Resetting session", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  id v10 = (void *)swift_task_alloc();
  v0[7] = v10;
  void *v10 = v0;
  v10[1] = closure #1 in PresenceHostSession.resetSession();
  return PresenceHostSession.leave()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.resetSession(), 0, 0);
  }
  else
  {
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = v1;
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    BOOL v6 = (void *)v0[8];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v15 = v8;
    v0[2] = v6;
    id v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    id v10 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v4, v5, "Failed to reset session, error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
    unint64_t v12 = (void *)v0[8];
  }
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t partial apply for closure #1 in PresenceHostSession.resetSession()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *id v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[5] = v2;
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.resetSession(), 0, 0);
}

uint64_t PresenceHostSession.suspend()()
{
  *(void *)(v1 + 80) = v0;
  return MEMORY[0x1F4188298](PresenceHostSession.suspend(), 0, 0);
}

{
  void *v0;
  id *v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  id v21;
  uint8_t *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  id v30;
  uint8_t *v31;
  void *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  id v36;
  BOOL v37;
  id v38;
  id v39;
  uint64_t (*v40)(void);
  id v41;
  os_log_type_t v42;
  BOOL v43;
  void *v44;
  id v45;
  const char *v46;
  id v47;
  BOOL v48;
  id v49;
  void *v51;
  char v52;
  void *v53;
  uint64_t v54;

  uint64_t v53 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = (id *)(v0 + 10);
  uint64_t v2 = (void *)v0[10];
  id v3 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  uint64_t v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  BOOL v6 = static os_log_type_t.default.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[10];
  uint64_t v51 = v8;
  if (v7)
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    id v10 = (void *)swift_slowAlloc();
    *(_DWORD *)id v9 = 138412290;
    v0[9] = v8;
    uint64_t v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v10 = v8;

    _os_log_impl(&dword_1B0DF7000, v5, v6, "%@ Handling request to suspend", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  v0[12] = v8;
  unint64_t v12 = (void *)v0[10];
  uint64_t v52 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v52);
  uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
  int v14 = *(void *)((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v12) + 0xD8))() + 16);
  uint64_t v15 = swift_bridgeObjectRelease();
  uint64_t v16 = (void *)v0[10];
  if (v14)
  {
    switch((*(unsigned __int8 (**)(uint64_t))((*v13 & *v16) + 0xB8))(v15))
    {
      case 1u:
        char v35 = swift_task_alloc();
        v0[13] = v35;
        *(void *)char v35 = v0;
        *(void *)(v35 + 8) = PresenceHostSession.suspend();
        *(void *)(v35 + 48) = v0[10];
        *(unsigned char *)(v35 + 82) = 2;
        return MEMORY[0x1F4188298](PresenceHostSession._leave(endState:), 0, 0);
      case 2u:
        uint64_t v36 = *v1;
        id v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        char v37 = os_log_type_enabled(v27, v28);
        uint64_t v38 = *v1;
        if (v37)
        {
          id v31 = (uint8_t *)swift_slowAlloc();
          uint64_t v32 = (void *)swift_slowAlloc();
          *(_DWORD *)id v31 = 138412290;
          v0[6] = v38;
          uint64_t v39 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v32 = v8;

          uint64_t v34 = "%@ already suspended.";
          goto LABEL_18;
        }

        goto LABEL_19;
      case 3u:
        uint64_t v41 = *v1;
        uint64_t v18 = Logger.logObject.getter();
        uint64_t v42 = static os_log_type_t.fault.getter();
        os_log_type_t v43 = os_log_type_enabled(v18, v42);
        uint64_t v21 = *v1;
        if (!v43) {
          goto LABEL_26;
        }
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412290;
        v0[2] = v21;
        uint64_t v45 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v44 = v8;

        uint64_t v46 = "%@ Session is currently leaving and shouldn't have been able to re-enter.";
        goto LABEL_24;
      case 4u:
        uint64_t v47 = *v1;
        uint64_t v18 = Logger.logObject.getter();
        uint64_t v42 = static os_log_type_t.default.getter();
        unint64_t v48 = os_log_type_enabled(v18, v42);
        uint64_t v21 = *v1;
        if (!v48) {
          goto LABEL_26;
        }
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412290;
        v0[3] = v21;
        Swift::String v49 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v44 = v8;

        uint64_t v46 = "%@ Session is currently invalidated. Can't suspend.";
LABEL_24:
        _os_log_impl(&dword_1B0DF7000, v18, v42, v46, v22, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        uint64_t v25 = v44;
        goto LABEL_25;
      default:
        uint64_t v17 = *v1;
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.fault.getter();
        BOOL v20 = os_log_type_enabled(v18, v19);
        uint64_t v21 = *v1;
        if (v20)
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          uint64_t v23 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = 138412290;
          v0[7] = v21;
          uint64_t v24 = v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v23 = v8;

          _os_log_impl(&dword_1B0DF7000, v18, v19, "%@ can't suspend without an idle session", v22, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          uint64_t v25 = v23;
LABEL_25:
          MEMORY[0x1B3EA39E0](v25, -1, -1);
          MEMORY[0x1B3EA39E0](v22, -1, -1);
        }
        else
        {
LABEL_26:
        }
        lazy protocol witness table accessor for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors();
        swift_allocError();
        swift_willThrow();
        uint64_t v40 = (uint64_t (*)(void))v0[1];
        break;
    }
  }
  else
  {
    unint64_t v26 = v16;
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    Swift::String v29 = os_log_type_enabled(v27, v28);
    os_log_type_t v30 = *v1;
    if (v29)
    {
      id v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)id v31 = 138412290;
      v0[8] = v30;
      uint64_t v33 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v32 = v51;

      uint64_t v34 = "%@ Not suspending because we have no suspension assertions";
LABEL_18:
      _os_log_impl(&dword_1B0DF7000, v27, v28, v34, v31, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v32, -1, -1);
      MEMORY[0x1B3EA39E0](v31, -1, -1);
    }
    else
    {
    }
LABEL_19:

    uint64_t v40 = (uint64_t (*)(void))v0[1];
  }
  return v40();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](PresenceHostSession.suspend(), 0, 0);
  }
  else
  {
    id v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;

  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = *(id *)(v0 + 80);
  id v3 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  BOOL v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v21 = v6;
    uint64_t v8 = *(void **)(v0 + 112);
    BOOL v20 = *(void *)(v0 + 96);
    id v9 = *(void **)(v0 + 80);
    id v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(void *)(v0 + 32) = v9;
    *(_DWORD *)id v10 = 138412546;
    unint64_t v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char *v11 = v20;

    *(_WORD *)(v10 + 12) = 2112;
    uint64_t v13 = v8;
    int v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v11[1] = v14;

    uint64_t v15 = v8;
    BOOL v6 = v21;

    _os_log_impl(&dword_1B0DF7000, v21, v7, "%@ Suspend's leave failed, reason: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {
    uint64_t v16 = *(void **)(v0 + 112);
    uint64_t v17 = *(void **)(v0 + 80);
  }
  swift_willThrow();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t PresenceHostSession.unsuspend()()
{
  *(void *)(v1 + 32) = v0;
  return MEMORY[0x1F4188298](PresenceHostSession.unsuspend(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id *v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  id v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t (*v23)(void);
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  id v28;
  uint8_t *v29;
  id v30;
  void *v32;
  uint64_t v33[2];
  void *v34;
  uint64_t v35;

  uint64_t v34 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  uint64_t v2 = Logger.logObject.getter();
  id v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Handling request to unsuspend", v4, 2u);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }
  uint64_t v5 = (id *)(v0 + 4);
  BOOL v6 = (void *)v0[4];

  LOBYTE(v33[0]) = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)v33);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v6) + 0xD8);
  id v9 = *(void *)(v8() + 16);
  id v10 = swift_bridgeObjectRelease();
  uint64_t v11 = (void *)v0[4];
  if (v9)
  {
    unint64_t v12 = v11;
    uint64_t v13 = Logger.logObject.getter();
    int v14 = static os_log_type_t.default.getter();
    uint64_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *v5;
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v33[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      v8();
      type metadata accessor for UUID();
      _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      os_log_type_t v19 = Set.description.getter();
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v13, v14, "Not unsuspending due to active suspension assertions: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
    else
    {
    }
    uint64_t v23 = (uint64_t (*)(void))v0[1];
LABEL_18:
    return v23();
  }
  if ((*(unsigned __int8 (**)(uint64_t))((*v7 & *v11) + 0xB8))(v10) != 2)
  {
    uint64_t v24 = *v5;
    uint64_t v25 = Logger.logObject.getter();
    unint64_t v26 = static os_log_type_t.fault.getter();
    id v27 = os_log_type_enabled(v25, v26);
    os_log_type_t v28 = *v5;
    if (v27)
    {
      Swift::String v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v29 = 138412290;
      v0[3] = v28;
      os_log_type_t v30 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v32 = v6;

      _os_log_impl(&dword_1B0DF7000, v25, v26, "%@ Can't unsuspend without a suspended session.", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v32, -1, -1);
      MEMORY[0x1B3EA39E0](v29, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors();
    swift_allocError();
    swift_willThrow();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    goto LABEL_18;
  }
  uint64_t v22 = (void *)swift_task_alloc();
  v0[5] = v22;
  *uint64_t v22 = v0;
  v22[1] = ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
  v22[3] = v0[4];
  return MEMORY[0x1F4188298](PresenceHostSession._join(), 0, 0);
}

uint64_t PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[18] = v5;
  v2[19] = *(void *)(v5 + 64);
  v2[20] = swift_task_alloc();
  return MEMORY[0x1F4188298](PresenceHostSession.releaseSuspensionAssertion(_:), 0, 0);
}

uint64_t PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[12];
  uint64_t v5 = (void *)v0[13];
  v0[21] = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue;
  char v10 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[22] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  id v8 = v5;
  return MEMORY[0x1F4188298](PresenceHostSession.releaseSuspensionAssertion(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[22];
  uint64_t v3 = v0[15];
  uint64_t v2 = v0[16];
  uint64_t v4 = v0[14];
  v0[2] = v0;
  v0[3] = PersonalPresenceController.assertPresence(for:);
  uint64_t v5 = swift_continuation_init();
  unint64_t v6 = (void *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:);
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply;
  *(void *)(v7 + 24) = v6;
  v0[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:), 0, 0);
}

uint64_t closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 64))
                                                                                + 0xE8))(v0 + 16);
  specialized Set._Variant.remove(_:)(v2, v1);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for UUID?);
  v3(v0 + 16, 0);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:);
  v4[4] = *(void *)(v0 + 64);
  return MEMORY[0x1F4188298](PresenceHostSession.unsuspend(), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = v0[10];
  static TaskPriority.background.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  v5[5] = v2;
  uint64_t v6 = v2;
  uint64_t v7 = v1;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:), (uint64_t)v5);
  swift_release();
  outlined destroy of UUID?(v3, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  id v8 = (void *)v0[13];
  id v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.service);
  char v10 = v8;
  uint64_t v11 = v8;
  uint64_t v12 = Logger.logObject.getter();
  uint64_t v13 = static os_log_type_t.error.getter();
  int v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = (void *)v0[13];
  if (v14)
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v23 = v17;
    v0[6] = v15;
    uint64_t v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    os_log_type_t v19 = String.init<A>(reflecting:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v12, v13, "Failed to unsuspend: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:), 0, 0);
}

uint64_t closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = *(void *)(v0[3] + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter);
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v0[2] = v1;
  id v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v4._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(self, sel_mainBundle);
  id v6 = objc_msgSend(v5, sel_bundleIdentifier);

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0xD00000000000001DLL;
    unint64_t v9 = 0x80000001B115CEE0;
  }
  uint64_t v10 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(*(void *)v2 + 112))(0xD000000000000011, 0x80000001B1162C90, 0xD000000000000029, 0x80000001B1162C60, v7, v9);
  v0[5] = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    os_log_type_t v19 = (uint64_t (*)(uint64_t, __n128))(*(void *)(*(void *)v2 + 120)
                                                  + **(int **)(*(void *)v2 + 120));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[6] = v11;
    void *v11 = v0;
    v11[1] = closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:);
    v12.n128_u64[0] = 0;
    return v19(v10, v12);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, v15, v16, "Failed to generate signature for session unsuspend failure", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }

    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[11] = swift_task_alloc();
  uint64_t v4 = *(void *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  v3[12] = v4;
  v3[13] = *(void *)(v4 + 64);
  v3[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.acquireSuspensionAssertion(), 0, 0);
}

uint64_t closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v2 = (char *)v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = (void *)v0[9];
  (*(void (**)(char *, void, uint64_t))(v4 + 16))(v2, v0[10], v3);
  id v6 = (void (*)(void *, void))(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v5) + 0xE8))(v0 + 2);
  specialized Set._Variant.insert(_:)(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  v6(v0 + 2, 0);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[19] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in PresenceHostSession.acquireSuspensionAssertion();
  v7[10] = v0[9];
  return MEMORY[0x1F4188298](PresenceHostSession.suspend(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in PresenceHostSession.acquireSuspensionAssertion();
  }
  else {
    uint64_t v2 = closure #1 in PresenceHostSession.acquireSuspensionAssertion();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = (uint64_t *)v0[8];
  outlined init with copy of AsyncSerialQueue(v0[10], v1, type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  uint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(v1, v5 + v4);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  *uint64_t v3 = AnyCancellable.init(_:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = v0[11];
  uint64_t v3 = (void *)v0[9];
  static TaskPriority.background.getter();
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 0, 1, v4);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v3;
  v5[5] = v1;
  id v6 = v1;
  uint64_t v7 = v3;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), (uint64_t)v5);
  swift_release();
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  unint64_t v8 = (void *)v0[20];
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.service);
  uint64_t v10 = v8;
  uint64_t v11 = v8;
  __n128 v12 = Logger.logObject.getter();
  uint64_t v13 = static os_log_type_t.error.getter();
  uint64_t v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = (void *)v0[20];
  if (v14)
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = v17;
    *(_DWORD *)os_log_type_t v16 = 136315138;
    v0[6] = v15;
    uint64_t v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    os_log_type_t v19 = String.init<A>(reflecting:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v12, v13, "Failed to suspend: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a4;
  *(void *)(v5 + 32) = a5;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), 0, 0);
}

uint64_t closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v1 = 0xD00000000000001DLL;
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = *(void *)(v0[3] + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter);
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v0[2] = v2;
  id v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v5._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(self, sel_mainBundle);
  id v7 = objc_msgSend(v6, sel_bundleIdentifier);

  if (v7)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0x80000001B115CEE0;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(*(void *)v3 + 112))(0x206E6F6973736553, 0xEF646E6570737553, 0xD000000000000027, 0x80000001B1162D00, v1, v9);
  v0[5] = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    os_log_type_t v19 = (uint64_t (*)(uint64_t, __n128))(*(void *)(*(void *)v3 + 120)
                                                  + **(int **)(*(void *)v3 + 120));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[6] = v11;
    void *v11 = v0;
    v11[1] = closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:);
    v12.n128_u64[0] = 0;
    return v19(v10, v12);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, v15, v16, "Failed to generate signature for session suspend failure", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }

    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of AsyncSerialQueue(a1, (uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()((uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCytSg_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), v10);
  return swift_release();
}

uint64_t closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), 0, 0);
}

uint64_t closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  uint64_t v3 = MEMORY[0x1B3EA3B30](v1 + *(int *)(v2 + 20));
  *(void *)(v0 + 32) = v3;
  if (v3)
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion();
    uint64_t v5 = *(void *)(v0 + 24);
    return PresenceHostSession.releaseSuspensionAssertion(_:)(v5);
  }
  else
  {
    **(unsigned char **)(v0 + 16) = 1;
    id v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion();
  }
  else
  {

    uint64_t v3 = closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion();
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;

  **(unsigned char **)(v0 + 16) = *(void *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Bool __swiftcall PresenceHostSession.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized PresenceHostSession.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t partial apply for closure #1 in PresenceHostSession.join()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.join(), 0, 0);
}

uint64_t sub_1B10E65B4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1B10E65EC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PresenceHostSession.leave()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PresenceHostSession.leave()(a1, v4);
}

uint64_t type metadata accessor for PresenceHostSession(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PresenceHostSession);
}

uint64_t partial apply for closure #1 in PresenceHostSession.init(id:presenceController:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PresenceHostSession.init(id:presenceController:)(a1, v4, v5, v6);
}

uint64_t sub_1B10E679C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #2 in PresenceHostSession.listenForUpdatedDevices()()
{
  closure #2 in PresenceHostSession.listenForUpdatedDevices()(*(void *)(v0 + 16));
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

uint64_t type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
}

uint64_t outlined init with copy of AsyncSerialQueue(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B10E6874()
{
  uint64_t v1 = *(void *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in PresenceHostSession.acquireSuspensionAssertion()(a1, v5, v6);
}

unint64_t lazy protocol witness table accessor for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors);
  }
  return result;
}

uint64_t specialized PresenceHostSession.invalidation(block:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v4;
  *uint64_t v4 = v2;
  v4[1] = specialized PresenceHostSession.invalidation(block:);
  v4[3] = a2;
  return MEMORY[0x1F4188298](PresenceHostSession._join(), 0, 0);
}

uint64_t specialized PresenceHostSession.invalidation(block:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](specialized PresenceHostSession.invalidation(block:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  void *v1;
  void **v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  NSObject *log;
  uint64_t *v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  char v35 = v0;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v2 = (void **)(v0 + 40);
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 56);
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  uint64_t v5 = v1;
  uint64_t v6 = v3;
  uint64_t v7 = v5;
  uint64_t v8 = v3;
  uint64_t v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.error.getter();
  uint64_t v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void **)(v0 + 56);
  uint64_t v13 = *(void **)(v0 + 40);
  uint64_t v33 = v0;
  if (v11)
  {
    uint64_t v14 = (void *)(v0 + 16);
    os_log_type_t type = v10;
    uint64_t v15 = (void *)(v0 + 24);
    os_log_type_t v30 = (uint64_t *)(v0 + 32);
    os_log_type_t v16 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v34 = v32;
    *(_DWORD *)os_log_type_t v16 = 138412546;
    uint8_t *v14 = v13;
    log = v9;
    uint64_t v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v13;

    *(_WORD *)(v16 + 12) = 2080;
    NSObject *v15 = v12;
    os_log_type_t v19 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v20 = String.init<A>(reflecting:)();
    *os_log_type_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    uint64_t v9 = log;
    _os_log_impl(&dword_1B0DF7000, log, type, "Invalidating %@ due to invalidation block throwing error. %s", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v32, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
  }
  uint64_t v22 = *v2;
  uint64_t v23 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **v2) + 0xC0))(4);
  (*(void (**)(void))((*v23 & *v22) + 0x110))(0);
  uint64_t v24 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v26 = 0;
    _os_log_impl(&dword_1B0DF7000, v24, v25, "Releasing presence assertion due to invalidation.", v26, 2u);
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }

  id v27 = (void *)swift_task_alloc();
  *(void *)(v33 + 64) = v27;
  NSObject *v27 = v33;
  v27[1] = specialized PresenceHostSession.invalidation(block:);
  v27[4] = *(void *)(v33 + 40);
  return MEMORY[0x1F4188298](PresenceHostSession.releasePresence(), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = PresenceHostSession.invalidation(block:);
  }
  else
  {
    uint64_t v1 = specialized PresenceHostSession.invalidation(block:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized $defer #1 () in PresenceHostSession._leave(endState:)(void *a1)
{
  void (*v6)(void *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v21;
  uint64_t v22;
  void v23[3];
  uint64_t v24;
  uint64_t v25;
  void v26[3];
  uint64_t v27;
  uint64_t v28;

  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x108))();
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = *(void *)(result + direct field offset for XPCHostConnection.bundleIdentifier + 8);
    os_log_type_t v19 = *(void *)(result + direct field offset for XPCHostConnection.bundleIdentifier);
    swift_bridgeObjectRetain();

    uint64_t v6 = *(void (**)(void *__return_ptr))((*v2 & *a1) + 0xF0);
    v6(v26);
    uint64_t v7 = v27;
    uint64_t v8 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v10 = v9;
    v6(v23);
    uint64_t v12 = v24;
    uint64_t v11 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v12, v11);
    uint64_t v14 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    ((void (*)(void *__return_ptr, uint64_t))v6)(v20, v14);
    uint64_t v15 = v21;
    os_log_type_t v16 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v8 + 32))(v18, v10, v19, v5, v13, v17 == 33, v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  }
  return result;
}

uint64_t sub_1B10E748C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(a1, v5, v6);
}

uint64_t specialized PresenceHostSession.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = v5;
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "Asked to accept new connection from: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  if ((*(unsigned __int8 (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xB8))())
  {
    id v11 = v5;
    uint64_t v12 = v2;
    uint64_t v13 = v11;
    uint64_t v14 = v12;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)v15, v16))
    {
      os_log_type_t type = v16;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412546;
      os_log_type_t v19 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v13;

      *(_WORD *)(v17 + 12) = 2112;
      aBlock[0] = v14;
      uint64_t v20 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v18[1] = v2;

      _os_log_impl(&dword_1B0DF7000, (os_log_t)v15, type, "PresenceSessionHostConnection for connection: %@ rejected for invalid state. %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v18, -1, -1);
      uint64_t v21 = v17;
LABEL_9:
      MEMORY[0x1B3EA39E0](v21, -1, -1);
LABEL_14:

      return 0;
    }
LABEL_13:

    uint64_t v15 = (uint64_t)v13;
    goto LABEL_14;
  }
  uint64_t v22 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_queue);
  id v23 = objc_allocWithZone((Class)type metadata accessor for PresenceSessionHostConnection());
  id v24 = v5;
  uint64_t v14 = v22;
  uint64_t v25 = PresenceSessionHostConnection.init(connection:queue:)(v24, v14);
  if (!v25)
  {
    id v32 = v24;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v15, v33))
    {

      uint64_t v15 = (uint64_t)v32;
      goto LABEL_14;
    }
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 67109120;
    LODWORD(aBlock[0]) = objc_msgSend(v32, sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1B0DF7000, (os_log_t)v15, v33, "PresenceSessionHostConnection could not be created; rejecting connection from PID: %d",
      v34,
      8u);
    uint64_t v21 = (uint64_t)v34;
    goto LABEL_9;
  }
  unint64_t v26 = v25;
  uint64_t v15 = 1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v2;
  *(void *)(v27 + 24) = v26;
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = partial apply for closure #1 in PresenceHostSession.listener(_:shouldAcceptNewConnection:);
  v13[3] = v27;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_102;
  os_log_type_t v28 = _Block_copy(aBlock);
  Swift::String v29 = v2;
  os_log_type_t v30 = v26;
  swift_retain();
  swift_release();
  dispatch_sync(v14, v28);

  _Block_release(v28);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v30)
  {
    __break(1u);
    goto LABEL_13;
  }
  return v15;
}

unint64_t lazy protocol witness table accessor for type PresenceHostSession.State and conformance PresenceHostSession.State()
{
  unint64_t result = lazy protocol witness table cache variable for type PresenceHostSession.State and conformance PresenceHostSession.State;
  if (!lazy protocol witness table cache variable for type PresenceHostSession.State and conformance PresenceHostSession.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession.State and conformance PresenceHostSession.State);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in PresenceHostSession()
{
  return _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

uint64_t _s14CopresenceCore17AddressableMemberCSo8NSObjectCSH10ObjectiveCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B10E7D28@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10E7D84(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC0))(*a1);
}

uint64_t sub_1B10E7DDC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10E7E38(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B10E7E9C(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF0))();
}

uint64_t sub_1B10E7EF0(uint64_t a1, void **a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF8))(v4);
}

uint64_t sub_1B10E7F5C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x108))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10E7FC0(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x110);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B10E8030@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x120))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10E8094(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x128);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for PresenceHostSession()
{
  return type metadata accessor for PresenceHostSession(0);
}

uint64_t type metadata completion function for PresenceHostSession()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AsyncSerialQueue();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t method lookup function for PresenceHostSession(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PresenceHostSession);
}

uint64_t dispatch thunk of PresenceHostSession.state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PresenceHostSession.state.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PresenceHostSession.state.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PresenceHostSession.$state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of PresenceHostSession.suspensionAssertions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of PresenceHostSession.suspensionAssertions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of PresenceHostSession.suspensionAssertions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of PresenceHostSession.reporter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of PresenceHostSession.reporter.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of PresenceHostSession.reporter.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of PresenceHostSession.connection.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of PresenceHostSession.connection.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of PresenceHostSession.connection.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of PresenceHostSession.presentDeviceListener.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of PresenceHostSession.presentDeviceListener.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of PresenceHostSession.presentDeviceListener.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of PresenceHostSession.__allocating_init(id:presenceController:)()
{
  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of PresenceHostSession.listenForUpdatedDevices()()
{
  unint64_t v2 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158);
  id v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

unsigned char *storeEnumTagSinglePayload for PresenceHostSession.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B10E876CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceHostSession.Errors()
{
  return &type metadata for PresenceHostSession.Errors;
}

unsigned char *storeEnumTagSinglePayload for PresenceHostSession.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B10E8870);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceHostSession.State()
{
  return &type metadata for PresenceHostSession.State;
}

uint64_t *initializeBufferWithCopyOfBuffer for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_unknownObjectWeakCopyInit();
  }
  return a1;
}

uint64_t destroy for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B10E8C00);
}

uint64_t sub_1B10E8C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B10E8C80);
}

uint64_t sub_1B10E8C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B10E8DE4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PresenceHostSession.listener(_:shouldAcceptNewConnection:)()
{
  unint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x110);
  id v4 = v2;
  return v3(v2);
}

uint64_t sub_1B10E8E94()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:), 0, 0);
}

uint64_t objectdestroyTm_9()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in PresenceHostSession.assertPresence()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  long long v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *long long v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #1 in PresenceHostSession.assertPresence(), 0, 0);
}

uint64_t sub_1B10E90E8()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t objectdestroy_104Tm()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), 0, 0);
}

uint64_t sub_1B10E9218()
{
  uint64_t v1 = *(void *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v1 = *(void *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(v2);
}

uint64_t sub_1B10E9368()
{
  uint64_t v1 = *(void *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_unknownObjectRelease();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[2] = a1;
  v6[3] = v5;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), 0, 0);
}

uint64_t NWProtocolFramer.Message.init(header:)(uint64_t a1)
{
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v2 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
  v5[3] = type metadata accessor for PluginProtocolHeader();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  outlined init with copy of PluginProtocolHeader(a1, (uint64_t)boxed_opaque_existential_1);
  swift_retain();
  dispatch thunk of NWProtocolFramer.Message.subscript.setter();
  swift_release();
  outlined destroy of PluginProtocolHeader(a1);
  return v2;
}

uint64_t *PluginProtocolFramer.definition.unsafeMutableAddressor()
{
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  return &static PluginProtocolFramer.definition;
}

uint64_t NWProtocolFramer.Message.header.getter@<X0>(uint64_t a1@<X8>)
{
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (v6[3])
  {
    uint64_t v2 = type metadata accessor for PluginProtocolHeader();
    int v3 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, v3 ^ 1u, 1, v2);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v5 = type metadata accessor for PluginProtocolHeader();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

const char *PluginProtocolFramer.label.unsafeMutableAddressor()
{
  return "qrp-01";
}

uint64_t one-time initialization function for definition()
{
  type metadata accessor for PluginProtocolFramer();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type PluginProtocolFramer and conformance PluginProtocolFramer, v0, (void (*)(uint64_t))type metadata accessor for PluginProtocolFramer);
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  uint64_t result = NWProtocolFramer.Definition.init(implementation:)();
  static PluginProtocolFramer.definition = result;
  return result;
}

uint64_t type metadata accessor for PluginProtocolHeader()
{
  uint64_t result = type metadata singleton initialization cache for PluginProtocolHeader;
  if (!type metadata singleton initialization cache for PluginProtocolHeader) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of PluginProtocolHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PluginProtocolHeader();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PluginProtocolHeader(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PluginProtocolHeader();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static PluginProtocolFramer.definition.getter()
{
  if (one-time initialization token for definition != -1) {
    swift_once();
  }
  return swift_retain();
}

void *PluginProtocolFramer.MAX_MESSAGE_SIZE_FRAMER_OPTIONS_KEY.unsafeMutableAddressor()
{
  return &static PluginProtocolFramer.MAX_MESSAGE_SIZE_FRAMER_OPTIONS_KEY;
}

unint64_t static PluginProtocolFramer.MAX_MESSAGE_SIZE_FRAMER_OPTIONS_KEY.getter()
{
  return 0xD000000000000010;
}

void *PluginProtocolFramer.MESSAGE_MAX_SIZE.unsafeMutableAddressor()
{
  return &static PluginProtocolFramer.MESSAGE_MAX_SIZE;
}

uint64_t static PluginProtocolFramer.MESSAGE_MAX_SIZE.getter()
{
  return 0x7FFFFFFFLL;
}

uint64_t static PluginProtocolFramer.label.getter()
{
  return 0x31302D707271;
}

uint64_t PluginProtocolFramer.__allocating_init(framer:)()
{
  uint64_t v0 = swift_allocObject();
  PluginProtocolFramer.init(framer:)();
  return v0;
}

uint64_t PluginProtocolFramer.init(framer:)()
{
  NWProtocolFramer.Instance.options.getter();
  dispatch thunk of NWProtocolFramer.Options.subscript.getter();
  swift_release();
  swift_release();
  if (!v5)
  {
    outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    uint64_t v1 = 0x7FFFFFFFLL;
    goto LABEL_6;
  }
  uint64_t v1 = v3;
LABEL_6:
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t PluginProtocolFramer.start(framer:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F38AA0];
  uint64_t started = type metadata accessor for NWProtocolFramer.StartResult();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 104);
  return v4(a1, v2, started);
}

uint64_t PluginProtocolFramer.stop(framer:)()
{
  return 1;
}

uint64_t PluginProtocolFramer.handleInput(framer:)(unsigned int (**a1)(char *, uint64_t, uint64_t))
{
  uint64_t v27 = *v1;
  uint64_t v3 = type metadata accessor for PluginProtocolHeader();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginProtocolHeader?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v23 - v14);
  os_log_type_t v16 = v1[2];
  id v24 = *(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v25 = v16;
  uint64_t v26 = v4 + 56;
  id v23 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  while (1)
  {
    v24(v15, 1, 1, v3);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    uint64_t v18 = MEMORY[0x1F4188790](v17);
    *(&v23 - 6) = v25;
    *(&v23 - 5) = a1;
    *(&v23 - 4) = v15;
    *(&v23 - 3) = (unsigned int (**)(char *, uint64_t, uint64_t))v18;
    *(&v23 - 2) = v27;
    if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)() & 1) == 0) {
      goto LABEL_9;
    }
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for PluginProtocolHeader?);
    if ((*v23)(v13, 1, v3) == 1)
    {
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for PluginProtocolHeader?);
LABEL_9:
      swift_release();
      uint64_t v21 = 4;
      goto LABEL_11;
    }
    outlined init with take of PluginProtocolHeader((uint64_t)v13, (uint64_t)v9);
    type metadata accessor for NWProtocolFramer.Message();
    outlined init with copy of PluginProtocolHeader((uint64_t)v9, (uint64_t)v7);
    if (one-time initialization token for definition != -1) {
      swift_once();
    }
    swift_retain();
    dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
    v28[3] = v3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    outlined init with copy of PluginProtocolHeader((uint64_t)v7, (uint64_t)boxed_opaque_existential_1);
    dispatch thunk of NWProtocolFramer.Message.subscript.setter();
    outlined destroy of PluginProtocolHeader((uint64_t)v7);
    swift_beginAccess();
    char v20 = NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)();
    swift_release();
    outlined destroy of PluginProtocolHeader((uint64_t)v9);
    swift_release();
    if ((v20 & 1) == 0) {
      break;
    }
    outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for PluginProtocolHeader?);
  }
  uint64_t v21 = 0;
LABEL_11:
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for PluginProtocolHeader?);
  return v21;
}

uint64_t closure #1 in PluginProtocolFramer.handleInput(framer:)(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, uint64_t a8)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1F4188790](v14 - 8);
  os_log_type_t v16 = (_DWORD *)((char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = 0;
  if ((a3 & 1) != 0 || !a1 || a2 - (uint64_t)a1 < 4) {
    return result;
  }
  uint64_t v18 = (void *)(a8 + 16);
  unsigned int v35 = 0;
  specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(a1, (uint64_t)a1 + 4, (uint64_t)&v35);
  uint64_t v19 = bswap32(v35);
  if ((v19 & 0x80000000) != 0)
  {
    PluginRpcStatusCode.init(rawValue:)(WORD1(v19) & 0x7FFF);
    if (v37 == 17) {
      __int16 v27 = 2;
    }
    else {
      __int16 v27 = v37;
    }
    outlined destroy of UUID?((uint64_t)a7, &demangling cache variable for type metadata for PluginProtocolHeader?);
    *a7 = v27;
    uint64_t v28 = type metadata accessor for PluginProtocolHeader();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a7, 0, 1, v28);
    swift_beginAccess();
    void *v18 = (unsigned __int16)v19;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)log);
    swift_retain();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 33554944;
      __int16 v36 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 6) = 2048;
      swift_beginAccess();
      v34[1] = *(void *)(a8 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1B0DF7000, v30, v31, "Parsed status %hu, len=%ld", (uint8_t *)v32, 0x10u);
      MEMORY[0x1B3EA39E0](v32, -1, -1);
    }
    else
    {

      swift_release();
    }
    return 4;
  }
  if (v19 <= a5)
  {
    outlined destroy of UUID?((uint64_t)a7, &demangling cache variable for type metadata for PluginProtocolHeader?);
    uint64_t v33 = type metadata accessor for PluginProtocolHeader();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a7, 0, 1, v33);
    swift_beginAccess();
    void *v18 = v19;
    return 4;
  }
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)log);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v23 = 67109120;
    int v37 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v21, v22, "Message is too large (length %u)", v23, 8u);
    MEMORY[0x1B3EA39E0](v23, -1, -1);
  }

  _DWORD *v16 = 22;
  uint64_t v24 = *MEMORY[0x1E4F38B48];
  uint64_t v25 = type metadata accessor for NWError();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v26 + 104))(v16, v24, v25);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v26 + 56))(v16, 0, 1, v25);
  NWProtocolFramer.Instance.markFailed(error:)();
  outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for NWError?);
  return 0;
}

void *specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = (void *)MEMORY[0x1F4188790](result);
    if (v3) {
      size_t v5 = v4 - (void)v3;
    }
    else {
      size_t v5 = 0;
    }
    return partial apply for specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(v3, v5);
  }
  return result;
}

void PluginProtocolFramer.handleOutput(framer:message:messageLength:isComplete:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v62[1] = a1;
  unint64_t v63 = a3;
  v74[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = type metadata accessor for UUID();
  v62[0] = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  size_t v5 = (char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v62 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginProtocolHeader?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PluginProtocolHeader();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v62 - v20;
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (v74[1])
  {
    int v22 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, v22 ^ 1u, 1, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
    {
      outlined init with take of PluginProtocolHeader((uint64_t)v14, (uint64_t)v21);
      outlined init with copy of PluginProtocolHeader((uint64_t)v21, (uint64_t)v19);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        Swift::Int v24 = v63;
        if (EnumCaseMultiPayload == 1)
        {
          if ((v63 & 0x8000000000000000) == 0 && v63 < 0x10000)
          {
            unsigned int v25 = bswap32(v63 | 0x80000000);
LABEL_23:
            LODWORD(v65) = v25;
            uint64_t v36 = specialized Data.init<A>(_:)((uint64_t)&v65, (uint64_t)&v65 + 4);
            unint64_t v38 = v37;
            NWProtocolFramer.Instance.writeOutput(data:)();
            outlined consume of Data._Representation(v36, v38);
LABEL_24:
            NWProtocolFramer.Instance.writeOutputNoCopy(length:)(v24);
            if (v39)
            {
              if (one-time initialization token for log != -1) {
                swift_once();
              }
              uint64_t v40 = type metadata accessor for Logger();
              __swift_project_value_buffer(v40, (uint64_t)log);
              id v41 = v39;
              id v42 = v39;
              os_log_type_t v43 = Logger.logObject.getter();
              os_log_type_t v44 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v43, v44))
              {
                uint64_t v45 = (uint8_t *)swift_slowAlloc();
                uint64_t v46 = swift_slowAlloc();
                uint64_t v65 = v46;
                *(_DWORD *)uint64_t v45 = 136315138;
                uint64_t v64 = (uint64_t)v39;
                id v47 = v39;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
                uint64_t v48 = String.init<A>(reflecting:)();
                uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v65);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();

                _os_log_impl(&dword_1B0DF7000, v43, v44, "Exception in handleOutput(): %s", v45, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1B3EA39E0](v46, -1, -1);
                MEMORY[0x1B3EA39E0](v45, -1, -1);
              }
              else
              {
              }
            }
            outlined destroy of PluginProtocolHeader((uint64_t)v21);
            return;
          }
        }
        else if ((v63 & 0x8000000000000000) == 0 && !HIDWORD(v63))
        {
          unsigned int v25 = bswap32(v63);
          goto LABEL_23;
        }
      }
      else
      {
        outlined init with take of UUID?((uint64_t)v19, (uint64_t)v11);
        unsigned __int16 v30 = v63;
        if ((v63 & 0x8000000000000000) == 0 && v63 < 0x10000)
        {
          os_log_type_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62[0] + 48);
          unsigned int v32 = ((v31(v11, 1, v3) != 1) << 15) + v30;
          if ((v32 & 0x10000) != 0) {
            __break(1u);
          }
          LOWORD(v65) = bswap32(v32) >> 16;
          uint64_t v33 = specialized Data.init<A>(_:)((uint64_t)&v65, (uint64_t)&v65 + 2);
          unint64_t v35 = v34;
          NWProtocolFramer.Instance.writeOutput(data:)();
          outlined consume of Data._Representation(v33, v35);
          outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for UUID?);
          if (v31(v9, 1, v3) == 1)
          {
            outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
            outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
          }
          else
          {
            uint64_t v50 = v62[0];
            (*(void (**)(char *, char *, uint64_t))(v62[0] + 32))(v5, v9, v3);
            uint64_t v65 = UUID.uuid.getter();
            char v66 = v51;
            char v67 = v52;
            char v68 = v53;
            char v69 = v54;
            char v70 = v55;
            char v71 = v56;
            char v72 = v57;
            char v73 = v58;
            uint64_t v59 = specialized Data.init<A>(_:)((uint64_t)&v65, (uint64_t)v74);
            unint64_t v61 = v60;
            NWProtocolFramer.Instance.writeOutput(data:)();
            outlined consume of Data._Representation(v59, v61);
            (*(void (**)(char *, uint64_t))(v50 + 8))(v5, v3);
            outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
          }
          Swift::Int v24 = v63;
          goto LABEL_24;
        }
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for PluginProtocolHeader?);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)log);
  __int16 v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&dword_1B0DF7000, v27, v28, "Header missing", v29, 2u);
    MEMORY[0x1B3EA39E0](v29, -1, -1);
  }
}

uint64_t PluginProtocolFramer.deinit()
{
  return v0;
}

uint64_t PluginProtocolFramer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static NWProtocolFramerImplementation.label.getter in conformance PluginProtocolFramer()
{
  return 0x31302D707271;
}

uint64_t protocol witness for NWProtocolFramerImplementation.init(framer:) in conformance PluginProtocolFramer()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.start(framer:) in conformance PluginProtocolFramer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleInput(framer:) in conformance PluginProtocolFramer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleOutput(framer:message:messageLength:isComplete:) in conformance PluginProtocolFramer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.wakeup(framer:) in conformance PluginProtocolFramer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.stop(framer:) in conformance PluginProtocolFramer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.cleanup(framer:) in conformance PluginProtocolFramer()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t specialized static PluginProtocolHeader.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  id v42 = (char *)a2;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = type metadata accessor for PluginProtocolHeader();
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (unsigned __int8 *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PluginProtocolHeader, PluginProtocolHeader));
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  id v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v24 = &v23[*(int *)(v21 + 56)];
  outlined init with copy of PluginProtocolHeader(v41, (uint64_t)v23);
  outlined init with copy of PluginProtocolHeader((uint64_t)v42, (uint64_t)v24);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    id v42 = v4;
    uint64_t v27 = v39;
    uint64_t v28 = v40;
    outlined init with copy of PluginProtocolHeader((uint64_t)v23, (uint64_t)v19);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      goto LABEL_9;
    }
    uint64_t v30 = (uint64_t)v13;
    outlined init with take of UUID?((uint64_t)v24, (uint64_t)v13);
    uint64_t v31 = (uint64_t)v7;
    uint64_t v32 = (uint64_t)&v7[*(int *)(v5 + 48)];
    outlined init with take of UUID?((uint64_t)v19, (uint64_t)v7);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v30, v32, &demangling cache variable for type metadata for UUID?);
    uint64_t v33 = v27;
    unint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    uint64_t v35 = v28;
    if (v34(v31, 1, v28) == 1)
    {
      outlined destroy of UUID?(v30, &demangling cache variable for type metadata for UUID?);
      if (v34(v32, 1, v28) == 1)
      {
        outlined destroy of UUID?(v31, &demangling cache variable for type metadata for UUID?);
        goto LABEL_8;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, (uint64_t)v11, &demangling cache variable for type metadata for UUID?);
      if (v34(v32, 1, v28) != 1)
      {
        uint64_t v36 = (uint64_t)v42;
        (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v42, v32, v35);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
        v38(v36, v35);
        outlined destroy of UUID?(v30, &demangling cache variable for type metadata for UUID?);
        v38((uint64_t)v11, v35);
        outlined destroy of UUID?(v31, &demangling cache variable for type metadata for UUID?);
        if (v37) {
          goto LABEL_8;
        }
LABEL_19:
        outlined destroy of PluginProtocolHeader((uint64_t)v23);
        return 0;
      }
      outlined destroy of UUID?(v30, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v28);
    }
    outlined destroy of UUID?(v31, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 2) {
      goto LABEL_9;
    }
LABEL_8:
    outlined destroy of PluginProtocolHeader((uint64_t)v23);
    return 1;
  }
  outlined init with copy of PluginProtocolHeader((uint64_t)v23, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
LABEL_9:
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for (PluginProtocolHeader, PluginProtocolHeader));
    return 0;
  }
  BOOL v26 = *v17 == *v24;
  outlined destroy of PluginProtocolHeader((uint64_t)v23);
  return v26;
}

uint64_t sub_1B10EB38C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PluginProtocolFramer.handleInput(framer:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  return closure #1 in PluginProtocolFramer.handleInput(framer:)(a1, a2, a3 & 1, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(unsigned char **)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t outlined init with take of PluginProtocolHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PluginProtocolHeader();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for PluginProtocolHeader(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for PluginProtocolHeader(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v5 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v3);
    if (!result)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      return v4(a1, v3);
    }
  }
  return result;
}

void *initializeWithCopy for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PluginProtocolHeader((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PluginProtocolHeader((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for PluginProtocolHeader()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t type metadata accessor for PluginProtocolFramer()
{
  return self;
}

uint64_t method lookup function for PluginProtocolFramer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginProtocolFramer);
}

uint64_t dispatch thunk of PluginProtocolFramer.__allocating_init(framer:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PluginProtocolFramer.start(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PluginProtocolFramer.stop(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PluginProtocolFramer.wakeup(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PluginProtocolFramer.cleanup(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PluginProtocolFramer.handleInput(framer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PluginProtocolFramer.handleOutput(framer:message:messageLength:isComplete:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

void *partial apply for specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(void *__src, size_t __len)
{
  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
    {
      __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v4 = __src;
      uint64_t v5 = *(void **)(v2 + 40);
      return memmove(v5, v4, __len);
    }
  }
  return __src;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

char *ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  return specialized ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)(a1, a2, a3, a4);
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

uint64_t ConversationManagerHostConnection.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for ConversationManagerHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t ConversationManagerHostConnection.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for ConversationManagerHostConnection.delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ConversationManagerHostConnection.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for ConversationManagerHostConnection.delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t ConversationManagerHostConnection.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationManagerHostConnection.serverBag.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationManagerHostConnection.hasRequestedState.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationManagerHostConnection.hasRequestedState);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationManagerHostConnection.hasRequestedState.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for ConversationManagerHostConnection.hasRequestedState);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ConversationManagerHostConnection.hasRequestedState.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ConversationManagerHostConnection.aliasedConversationContainers.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t ConversationManagerHostConnection.aliasedConversationContainers.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for ConversationManagerHostConnection.aliasedConversationContainers);
}

uint64_t (*ConversationManagerHostConnection.aliasedConversationContainers.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t ConversationManagerHostConnection.protectedStorage.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  swift_beginAccess();
  outlined init with copy of ProtectedStorage?(v3, (uint64_t)&v7);
  if (v8) {
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  }
  outlined destroy of ProtectedStorage?((uint64_t)&v7);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)&v7, v3);
  return swift_endAccess();
}

uint64_t ConversationManagerHostConnection.protectedStorage.setter(long long *a1)
{
  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  uint64_t v2 = v1 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*ConversationManagerHostConnection.protectedStorage.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ConversationManagerHostConnection.protectedStorage.getter(v3);
  return ConversationManagerHostConnection.protectedStorage.modify;
}

void ConversationManagerHostConnection.protectedStorage.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    uint64_t v6 = v5 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((long long *)*a1, (uint64_t)v3);
    uint64_t v8 = v7 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

uint64_t ConversationManagerHostConnection.identifiersForCustomEndpoints.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t ConversationManagerHostConnection.identifiersForCustomEndpoints.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for ConversationManagerHostConnection.identifiersForCustomEndpoints);
}

uint64_t (*ConversationManagerHostConnection.identifiersForCustomEndpoints.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

char *ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  return specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(a1, a2, a3, a4, v4);
}

Swift::Void __swiftcall ConversationManagerHostConnection.handleHostConnectionInvalidated()()
{
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))())
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v2 + 80))(v0, ObjectType, v2);
    swift_unknownObjectRelease();
  }
}

void ConversationManagerHostConnection.__allocating_init(connection:queue:)()
{
}

void ConversationManagerHostConnection.init(connection:queue:)()
{
}

uint64_t ConversationManagerHostConnection.__ivar_destroyer()
{
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + direct field offset for ConversationManagerHostConnection.delegate);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ProtectedStorage?(v0 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage);
  return swift_bridgeObjectRelease();
}

id ConversationManagerHostConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationManagerHostConnection();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc ConversationManagerHostConnection.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of weak ActivitySessionManagerProtocol?(a1 + direct field offset for ConversationManagerHostConnection.delegate);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ProtectedStorage?(a1 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)(Swift::OpaquePointer conversationContainersByGroupUUID)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)((char *)v1 + direct field offset for XPCHostConnection.queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A0))(v9))
    {
      uint64_t v11 = (Swift::OpaquePointer *)swift_allocObject();
      v11[2]._rawValue = v1;
      v11[3]._rawValue = conversationContainersByGroupUUID._rawValue;
      uint64_t v12 = *(void (**)(unint64_t, unint64_t, void (*)(), Swift::OpaquePointer *))((*v10 & *v1) + 0x140);
      uint64_t v13 = v1;
      swift_bridgeObjectRetain();
      v12(0xD000000000000040, 0x80000001B1162E40, partial apply for closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:), v11);
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)(uint64_t a1)
{
  id v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCClient);
  if (swift_dynamicCast())
  {
    type metadata accessor for UUID();
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_updateConversationContainersWithConversationContainersByGroupUUID_, isa);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void ConversationManagerHostConnection.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v25 = a4;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (void *)((char *)&aBlock[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)((char *)v6 + direct field offset for XPCHostConnection.queue);
  void *v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t v17 = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (*((unsigned char *)v6 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v6) + 0x1E8))(v17);
    char v19 = specialized Set.contains(_:)(a1, a2, v18);
    swift_bridgeObjectRelease();
    if (v19)
    {
      id v20 = objc_msgSend(*(id *)((char *)v6 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCClient);
      if (swift_dynamicCast())
      {
        uint64_t v21 = (void *)aBlock[6];
        uint64_t v22 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        aBlock[4] = a5;
        aBlock[5] = a6;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
        void aBlock[3] = &block_descriptor_36;
        Swift::Int v24 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v21, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v22, isa, v25, v24);
        _Block_release(v24);
        swift_unknownObjectRelease();

        return;
      }
      goto LABEL_9;
    }
  }
  a5(0);
}

uint64_t ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)&v3[direct field offset for XPCHostConnection.queue];
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_6_5;
  id v16 = _Block_copy(aBlock);
  id v17 = a1;
  swift_retain();
  uint64_t v18 = v3;
  static DispatchQoS.unspecified.getter();
  v20[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *((unsigned __int8 *)a1 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI);
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  uint64_t v11 = v10;
  if (v8 == 1)
  {
    if (!result) {
      return result;
    }
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a1, a2, a3, a4, ObjectType, v11);
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = swift_getObjectType();
    (*(void (**)(void *, void, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a1, 0, a3, a4, v13, v11);
  }
  return swift_unknownObjectRelease();
}

uint64_t ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  char v55 = a3;
  uint64_t v56 = a4;
  char v54 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v51 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v4) + 0x188))(v14);
  if (v15)
  {
    uint64_t v17 = v15;
    uint64_t v18 = v16;
    uint64_t v49 = *(void *)&v5[direct field offset for XPCHostConnection.queue];
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
    uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v48 = v7;
    uint64_t v20 = (v19 + 48) & ~v19;
    uint64_t v21 = (char *)swift_allocObject();
    *((void *)v21 + 2) = v17;
    *((void *)v21 + 3) = v18;
    id v47 = v10;
    uint64_t v22 = v54;
    *((void *)v21 + 4) = v5;
    *((void *)v21 + 5) = v22;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v21[v20], (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    id v23 = &v21[(v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v24 = v56;
    *(void *)id v23 = v55;
    *((void *)v23 + 1) = v24;
    aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:);
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_12_3;
    uint64_t v25 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    BOOL v26 = v5;
    id v27 = v22;
    swift_retain();
    uint64_t v28 = v47;
    static DispatchQoS.unspecified.getter();
    uint64_t v57 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v29 = v51;
    uint64_t v30 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v28, v29, v25);
    _Block_release(v25);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v52);
    return swift_release();
  }
  else
  {
    uint64_t v32 = v54;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.default);
    unint64_t v34 = v4;
    id v35 = v32;
    uint64_t v36 = v34;
    id v37 = v35;
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc();
      LODWORD(v54) = v40;
      uint64_t v42 = v41;
      os_log_type_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412546;
      aBlock[0] = v37;
      id v44 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v43 = v37;

      *(_WORD *)(v42 + 12) = 2112;
      aBlock[0] = v36;
      uint64_t v45 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v43[1] = v5;

      _os_log_impl(&dword_1B0DF7000, v38, (os_log_type_t)v54, "Failed to create activitySession for request %@ because delegate is nil on %@", (uint8_t *)v42, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v43, -1, -1);
      MEMORY[0x1B3EA39E0](v42, -1, -1);
    }
    else
    {
    }
    return v55(0);
  }
}

uint64_t ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v2;
  v13[3] = a1;
  void v13[4] = a2;
  aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_18_5;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)(void *a1)
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  uint64_t v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for ConversationManagerHostConnection();
    uint64_t v8 = v3;
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v4, v5, "requestConversationContainersByGroupUUID for %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x188))();
  if (result)
  {
    uint64_t v13 = v12;
    uint64_t ObjectType = swift_getObjectType();
    MEMORY[0x1F4188790](ObjectType);
    (*(void (**)(void *, uint64_t (*)()))(v13 + 16))(v3, partial apply for closure #1 in closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:));
    return swift_unknownObjectRelease();
  }
  return result;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary) -> ()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

void ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  os_log_t v40 = *(os_log_t *)(v8 - 8);
  uint64_t v41 = (void *)v8;
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v38 - v14;
  if (v2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    uint64_t v39 = *(void *)&v2[direct field offset for XPCHostConnection.queue];
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v38 - v14, a2, v11);
    unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v2;
    *(void *)(v18 + 24) = a1;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v17, v16, v11);
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = (uint64_t)&block_descriptor_24_2;
    uint64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = v2;
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v44 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v10, v7, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v5);
    ((void (*)(char *, void *))v40[1].isa)(v10, v41);
    swift_release();
  }
  else
  {
    uint64_t v21 = v15;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v21, a2, v11);
    id v23 = v2;
    swift_bridgeObjectRetain_n();
    uint64_t v24 = v23;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      aBlock[0] = v42;
      *(_DWORD *)uint64_t v28 = 136315650;
      os_log_t v40 = v25;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
      LODWORD(v39) = v27;
      lazy protocol witness table accessor for type TUConversationMember and conformance NSObject();
      swift_bridgeObjectRetain();
      uint64_t v29 = Set.description.getter();
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v21, v11);
      *(_WORD *)(v28 + 22) = 2112;
      uint64_t v44 = (uint64_t)v24;
      unint64_t v34 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v35 = v41;
      *uint64_t v41 = v24;

      os_log_t v36 = v40;
      _os_log_impl(&dword_1B0DF7000, v40, (os_log_type_t)v39, "Process is not entitled to addRemoteMembers %s toConversationWithUUID %s, connection=%@", (uint8_t *)v28, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v35, -1, -1);
      uint64_t v37 = v42;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v37, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v21, v11);
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)(Swift::Bool _, Swift::String forBundleIdentifier)
{
  object = forBundleIdentifier._object;
  uint64_t countAndFlagsBits = forBundleIdentifier._countAndFlagsBits;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    uint64_t v26 = *(void *)&v2[direct field offset for XPCHostConnection.queue];
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v2;
    *(unsigned char *)(v14 + 24) = _;
    *(void *)(v14 + 32) = countAndFlagsBits;
    *(void *)(v14 + 40) = object;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = (uint64_t)&block_descriptor_30_0;
    uint64_t v15 = _Block_copy(aBlock);
    uint64_t v16 = v2;
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v28 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v13, v9, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release();
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.host);
    uint64_t v18 = v2;
    swift_bridgeObjectRetain_n();
    uint64_t v19 = v18;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      aBlock[0] = v24;
      *(_DWORD *)uint64_t v22 = 67109634;
      LODWORD(v28) = _;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 8) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 18) = 2112;
      uint64_t v28 = (uint64_t)v19;
      uint64_t v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v23 = v19;

      _os_log_impl(&dword_1B0DF7000, v20, v21, "Process is not entitled to setActivityAuthorization %{BOOL}d forBundleIdentifier %s, connection=%@", (uint8_t *)v22, 0x1Cu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v24, -1, -1);
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v10 = v9;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, void, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40))(a1, a2 & 1, a3, a4, ObjectType, v10);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(uint64_t a1, uint64_t a2)
{
  ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1F09B7290, (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:), block_descriptor_36_0, "Process is not entitled to buzzMember %@ conversationUUID %s, connection=%@");
}

uint64_t closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(int a1, uint64_t a2)
{
  int v33 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v29 - v15;
  if (*((unsigned char *)v2 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v29 - v15, a2, v10);
    unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v2;
    *(unsigned char *)(v18 + 24) = v33 & 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, v16, v10);
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = (uint64_t)&block_descriptor_42_0;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v2;
    static DispatchQoS.unspecified.getter();
    uint64_t v35 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v9, v6, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
    swift_release();
  }
  else
  {
    char v21 = v33;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      aBlock[0] = v26;
      *(_DWORD *)uint64_t v25 = 67109378;
      LODWORD(v35) = v21 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 8) = 2080;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      _os_log_impl(&dword_1B0DF7000, v23, v24, "Process is not entitled to setDownlinkMuted %{BOOL}d forRemoteParticipantsInConversationWithUUID %s", (uint8_t *)v25, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v26, -1, -1);
      MEMORY[0x1B3EA39E0](v25, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(void *a1, char a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, void, uint64_t, uint64_t, uint64_t))(v8 + 64))(a1, a2 & 1, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationManagerHostConnection.kickMember(_:conversationUUID:)(uint64_t a1, uint64_t a2)
{
  ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1F09B72E0, (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:), block_descriptor_48, "Process is not entitled to kickMember %@ conversationUUID %s, connection=%@");
}

void ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, const char *a6)
{
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  v48[2] = a3;
  uint64_t v54 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void (***)(char *, uint64_t))(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  os_log_t v51 = *(os_log_t *)(v12 - 8);
  uint64_t v52 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  MEMORY[0x1F4188790](v17);
  id v20 = (char *)v48 - v18;
  if (v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    v48[1] = *(void *)&v6[direct field offset for XPCHostConnection.queue];
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v48 - v18, a2, v15);
    unint64_t v21 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v22 = swift_allocObject();
    id v23 = (void *)v54;
    *(void *)(v22 + 16) = v6;
    *(void *)(v22 + 24) = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v22 + v21, v20, v15);
    aBlock[4] = v49;
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = (uint64_t)v50;
    os_log_type_t v24 = _Block_copy(aBlock);
    uint64_t v25 = v6;
    id v26 = v23;
    static DispatchQoS.unspecified.getter();
    uint64_t v56 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v14, v11, v24);
    _Block_release(v24);
    v53[1](v11, v9);
    ((void (*)(char *, uint64_t))v51[1].isa)(v14, v52);
    swift_release();
  }
  else
  {
    uint64_t v27 = (void *)v54;
    uint64_t v28 = v19;
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.host);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v28, a2, v15);
    uint64_t v30 = v6;
    id v31 = v27;
    uint64_t v32 = v30;
    id v33 = v31;
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v53 = (void (**)(char *, uint64_t))a6;
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v50 = v32;
      os_log_t v40 = (void *)v39;
      uint64_t v54 = swift_slowAlloc();
      aBlock[0] = v54;
      *(_DWORD *)uint64_t v38 = 138412802;
      LODWORD(v52) = v36;
      uint64_t v56 = (uint64_t)v33;
      os_log_t v51 = v34;
      id v41 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v40 = v33;

      *(_WORD *)(v38 + 12) = 2080;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v28, v15);
      *(_WORD *)(v38 + 22) = 2112;
      uint64_t v56 = (uint64_t)v50;
      uint64_t v44 = v50;
      uint64_t v45 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v40[1] = v44;

      os_log_t v46 = v51;
      _os_log_impl(&dword_1B0DF7000, v51, (os_log_type_t)v52, (const char *)v53, (uint8_t *)v38, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v40, -1, -1);
      uint64_t v47 = v54;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v47, -1, -1);
      MEMORY[0x1B3EA39E0](v38, -1, -1);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v28, v15);
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 72))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v12, v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v7 - 8);
  id v41 = (void *)v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v39 - v15;
  if (v2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    uint64_t v39 = *(void *)&v2[direct field offset for XPCHostConnection.queue];
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v39 - v15, a1, v10);
    unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v2;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v17, v16, v10);
    *(void *)(v19 + v18) = v43;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:);
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = (uint64_t)&block_descriptor_54_0;
    id v20 = _Block_copy(aBlock);
    unint64_t v21 = v2;
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v45 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v9, v6, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v4);
    (*(void (**)(char *, void *))(v40 + 8))(v9, v41);
    swift_release();
  }
  else
  {
    if (one-time initialization token for host != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
    id v23 = v2;
    swift_bridgeObjectRetain_n();
    os_log_type_t v24 = v23;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      id v41 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      aBlock[0] = v42;
      *(_DWORD *)uint64_t v28 = 136315650;
      LODWORD(v40) = v27;
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v31 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationParticipantPresentationContext);
      uint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v33 = MEMORY[0x1B3EA1D20](v32, v31);
      unint64_t v35 = v34;
      swift_bridgeObjectRelease();
      uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 22) = 2112;
      uint64_t v45 = (uint64_t)v24;
      int v36 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v37 = v41;
      *id v41 = v24;

      _os_log_impl(&dword_1B0DF7000, v25, (os_log_type_t)v40, "Process is not entitled to updateConversation %s participantPresentationContexts %s, connection=%@", (uint8_t *)v28, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v37, -1, -1);
      uint64_t v38 = v42;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v38, -1, -1);
      MEMORY[0x1B3EA39E0](v28, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  v20[0] = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)&v2[direct field offset for XPCHostConnection.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v20[0];
  *(void *)(v15 + 16) = v2;
  *(void *)(v15 + 24) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, v13, v10);
  aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_60_0;
  unint64_t v17 = _Block_copy(aBlock);
  unint64_t v18 = v2;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v9, v6, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v8 = v7;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 88))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(Swift::String a1)
{
}

uint64_t closure #1 in ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(void *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x1F8);
  swift_bridgeObjectRetain();
  uint64_t v8 = (uint64_t (*)(unsigned char *, void))v7(v14);
  specialized Set._Variant.insert(_:)(&v15, a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v9 = v8(v14, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))((*v6 & *a1) + 0x188))(v9);
  if (result)
  {
    uint64_t v12 = v11;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, Swift::Int, Swift::Int, uint64_t, uint64_t))(v12 + 96))(a1, a2, a3, ObjectType, v12);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)(Swift::String a1)
{
}

void ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v42 = a3;
  uint64_t v8 = v6;
  uint64_t v47 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v45 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  uint64_t v41 = v17;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v39 = v14;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = a6;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v40 = v13;
    uint64_t v23 = v22;
    aBlock[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, a2, aBlock);
    uint64_t v14 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v18, v19, v42, v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = v23;
    uint64_t v13 = v40;
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    uint64_t v25 = v21;
    a6 = v38;
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (*((unsigned char *)v8 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
  {
    os_log_type_t v26 = (void *)swift_allocObject();
    uint64_t v27 = v47;
    v26[2] = v8;
    v26[3] = v27;
    v26[4] = a2;
    aBlock[4] = v44;
    aBlock[5] = (uint64_t)v26;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = a6;
    uint64_t v28 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v29 = v8;
    unint64_t v30 = v45;
    static DispatchQoS.unspecified.getter();
    uint64_t v48 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v30, v13, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v30, v14);
    swift_release();
  }
  else
  {
    id v31 = v8;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      unint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v34 = 138412290;
      aBlock[0] = (uint64_t)v31;
      id v36 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v35 = v31;

      _os_log_impl(&dword_1B0DF7000, v32, v33, "Process is not entitled to provide custom endpoints, connection=%@", v34, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v35, -1, -1);
      MEMORY[0x1B3EA39E0](v34, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *a1)
                                                                                   + 0x1F8))(v7);
  specialized Set._Variant.remove(_:)(a2, a3);
  swift_bridgeObjectRelease();
  return v5(v7, 0);
}

uint64_t @objc ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a5;
  uint64_t v52 = a4;
  uint64_t v53 = a6;
  uint64_t v60 = a1;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v58 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v56 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v54 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v48 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v43 - v15;
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.host);
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v49 = a3;
  uint64_t v47 = v18;
  v18(v16, a3, v11);
  swift_bridgeObjectRetain_n();
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  unint64_t v46 = a2;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    aBlock[0] = v44;
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, a2, aBlock);
    uint64_t v45 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2080;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
    uint64_t v13 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    _os_log_impl(&dword_1B0DF7000, v19, v20, "fetchEndpoint %s activitySessionUUID %s", (uint8_t *)v22, 0x16u);
    uint64_t v25 = v44;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    uint64_t v26 = v22;
    uint64_t v27 = v60;
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);

    uint64_t v27 = v60;
  }
  uint64_t v28 = v51;
  uint64_t v60 = *(void *)&v51[direct field offset for XPCHostConnection.queue];
  id v29 = v48;
  v47(v48, v49, v11);
  unint64_t v30 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v31 = (v13 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = (char *)swift_allocObject();
  *((void *)v32 + 2) = v28;
  *((void *)v32 + 3) = v27;
  *((void *)v32 + 4) = v46;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v32[v30], v29, v11);
  unint64_t v34 = v52;
  uint64_t v33 = v53;
  *(void *)&v32[v31] = v52;
  unint64_t v35 = &v32[(v31 + 15) & 0xFFFFFFFFFFFFFFF8];
  *(void *)unint64_t v35 = v50;
  *((void *)v35 + 1) = v33;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:);
  aBlock[5] = (uint64_t)v32;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = (uint64_t)&block_descriptor_78_0;
  id v36 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v37 = v28;
  id v38 = v34;
  swift_retain();
  uint64_t v39 = v54;
  static DispatchQoS.unspecified.getter();
  uint64_t v61 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v40 = v56;
  uint64_t v41 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v39, v40, v36);
  _Block_release(v36);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v57);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x188))();
  if (result)
  {
    uint64_t v16 = v15;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 104))(a1, a2, a3, a4, a5, a6, a7, ObjectType, v16);
    return swift_unknownObjectRelease();
  }
  return result;
}

char *specialized ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_allocWithZone((Class)type metadata accessor for ConversationManagerHostConnection());
  return specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(a1, a2, a3, a4, (uint64_t)v8);
}

uint64_t outlined init with copy of ProtectedStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ProtectedStorage?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ConversationManagerHostConnection()
{
  uint64_t result = type metadata singleton initialization cache for ConversationManagerHostConnection;
  if (!type metadata singleton initialization cache for ConversationManagerHostConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B10F25F0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)()
{
  closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)(*(void *)(v0 + 16));
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t sub_1B10F2640()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)()
{
  return closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1B10F269C()
{
  return objectdestroy_14Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)()
{
  return closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)(*(void **)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type TUConversationMember and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject)
  {
    type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:));
}

uint64_t sub_1B10F2744()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)()
{
  return closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:));
}

uint64_t sub_1B10F27B0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 25) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(v2, v3, v4);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:));
}

uint64_t sub_1B10F2900()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)(v3, v0 + v2, v4);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:));
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  return a1(v3, v4, v5);
}

uint64_t sub_1B10F2B0C()
{
  return objectdestroy_14Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)()
{
  return closure #1 in ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B10F2B30()
{
  return objectdestroy_14Tm(MEMORY[0x1E4FBC898]);
}

uint64_t objectdestroy_14Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));
  return MEMORY[0x1F4186498](v1, 40, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)()
{
  return closure #1 in ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1B10F2BA4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();
  return MEMORY[0x1F4186498](v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (void *)v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (uint64_t)v0 + v2;
  uint64_t v8 = *(void *)((char *)v0 + v3);
  uint64_t v9 = (void *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  return closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)(v4, v5, v6, v7, v8, v10, v11);
}

uint64_t sub_1B10F2D4C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x188))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B10F2DB0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x190);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1B10F2E2C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1A0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B10F2E94(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A8))(*a1);
}

uint64_t sub_1B10F2EF4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10F2F58(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1C0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B10F2FC4(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1D0))();
}

uint64_t sub_1B10F3020(uint64_t a1, void **a2)
{
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1D8))(v4);
}

uint64_t sub_1B10F30A0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1E8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10F3104(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1F0);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:updateConversationWith:participantPresentationContexts:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:requestConversationContainersByGroupUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:addRemoteMembers:toConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:prepareForActivationWithOverrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:setActivityAuthorization:forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:setDownlinkMuted:forRemoteParticipantsInConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:kickMember:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnectionInvalidated(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:includeMetricsReport:onConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:didRegisterEndpointWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 104))();
}

uint64_t type metadata completion function for ConversationManagerHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ConversationManagerHostConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationManagerHostConnection);
}

uint64_t dispatch thunk of ConversationManagerHostConnection.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.hasRequestedState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.hasRequestedState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.hasRequestedState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.aliasedConversationContainers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.aliasedConversationContainers.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.aliasedConversationContainers.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.protectedStorage.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.protectedStorage.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.protectedStorage.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.identifiersForCustomEndpoints.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.identifiersForCustomEndpoints.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.identifiersForCustomEndpoints.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)()
{
  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t ObjC metadata update function for ConversationManagerHostConnection()
{
  return type metadata accessor for ConversationManagerHostConnection();
}

void *initializeBufferWithCopyOfBuffer for ConversationManagerHostConnection.ConversationContainerWrapper(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for ConversationManagerHostConnection.ConversationContainerWrapper(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for ConversationManagerHostConnection.ConversationContainerWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ConversationManagerHostConnection.ConversationContainerWrapper(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for ConversationManagerHostConnection.ConversationContainerWrapper()
{
  return &type metadata for ConversationManagerHostConnection.ConversationContainerWrapper;
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary) -> ()(a1, *(void *)(v1 + 16));
}

void specialized ConversationManagerHostConnection.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(void, void))
{
  uint64_t v25 = a4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (void *)((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a6;
  uint64_t v15 = *(void **)((char *)a5 + direct field offset for XPCHostConnection.queue);
  void *v13 = v15;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBCBF0], v10);
  _Block_copy(a6);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  uint64_t v17 = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    _Block_release(a6);
    __break(1u);
    return;
  }
  if (*((unsigned char *)a5 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a5) + 0x1E8))(v17);
    char v19 = specialized Set.contains(_:)(a1, a2, v18);
    swift_bridgeObjectRelease();
    if (v19)
    {
      id v20 = objc_msgSend(*(id *)((char *)a5 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCClient);
      if (swift_dynamicCast())
      {
        BOOL v21 = (void *)aBlock[6];
        uint64_t v22 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        aBlock[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()partial apply;
        aBlock[5] = v14;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
        void aBlock[3] = &block_descriptor_119;
        unint64_t v24 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v21, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v22, isa, v25, v24);
        _Block_release(v24);
        swift_release();
        swift_unknownObjectRelease();

        return;
      }
      goto LABEL_9;
    }
  }
  a6[2](a6, 0);
  swift_release();
}

uint64_t specialized ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:)(void *a1, uint64_t a2, void *a3, const void *a4)
{
  uint64_t v47 = a2;
  uint64_t v54 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = (void (**)(const void *, void))v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v48 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  uint64_t v13 = *(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *a3) + 0x188);
  uint64_t v14 = _Block_copy(a4);
  uint64_t v15 = v13(v14);
  if (v15)
  {
    uint64_t v17 = v15;
    uint64_t v18 = v16;
    uint64_t v46 = *(void *)((char *)a3 + direct field offset for XPCHostConnection.queue);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v47, v9);
    uint64_t v19 = v12;
    unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    BOOL v21 = (char *)swift_allocObject();
    *((void *)v21 + 2) = v17;
    *((void *)v21 + 3) = v18;
    uint64_t v22 = v54;
    *((void *)v21 + 4) = a3;
    *((void *)v21 + 5) = v22;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v21[v20], (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    uint64_t v23 = (uint64_t (**)(char))&v21[(v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8];
    *uint64_t v23 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
    v23[1] = (uint64_t (*)(char))v19;
    aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:);
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_109;
    unint64_t v24 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    uint64_t v25 = a3;
    id v26 = v22;
    swift_retain();
    uint64_t v27 = v48;
    static DispatchQoS.unspecified.getter();
    uint64_t v55 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v28 = v50;
    id v29 = v53;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v27, v28, v24);
    _Block_release(v24);
    swift_unknownObjectRelease();
    (*(void (**)(char *, void))(v52 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v27, v51);
    swift_release();
  }
  else
  {
    unint64_t v30 = v54;
    uint64_t v53 = (void (**)(const void *, void))a4;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.default);
    uint64_t v32 = a3;
    id v33 = v30;
    unint64_t v34 = v32;
    id v35 = v33;
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    int v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v39 = swift_slowAlloc();
      LODWORD(v52) = v38;
      uint64_t v40 = v39;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v54 = (void *)v12;
      uint64_t v42 = (void *)v41;
      *(_DWORD *)uint64_t v40 = 138412546;
      aBlock[0] = v35;
      id v43 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v42 = v35;

      *(_WORD *)(v40 + 12) = 2112;
      aBlock[0] = v34;
      uint64_t v44 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v42[1] = a3;

      _os_log_impl(&dword_1B0DF7000, v36, (os_log_type_t)v52, "Failed to create activitySession for request %@ because delegate is nil on %@", (uint8_t *)v40, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v42, -1, -1);
      MEMORY[0x1B3EA39E0](v40, -1, -1);
    }
    else
    {
    }
    v53[2](v53, 0);
  }
  return swift_release();
}

uint64_t sub_1B10F4148()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (char *)v0 + v2;
  uint64_t v7 = (void *)((char *)v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, v5, v6, v8, v9, ObjectType, v3);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)()
{
  uint64_t v1 = *(void **)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A8))(1);
}

uint64_t RunningBoardAppVisibilityMonitor.__allocating_init(appPolicyManager:applicationController:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(a1, a2);
  return v4;
}

uint64_t specialized AppVisibilityMonitor.applicationType(forBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 3, v5);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6) & 1) == 0) {
    return 2;
  }
  uint64_t v7 = (void *)v2[2];
  uint64_t v8 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v7) + 0x98);
  uint64_t v9 = v7;
  uint64_t v10 = v8();

  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v12)
    {
      id v13 = *(id *)(*(void *)(v10 + 56) + 8 * v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v14 = objc_msgSend(v13, sel_BOOLValue);

      return v14;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return 0;
}

id RBSProcessStateUpdate.bundleIdentifier.getter()
{
  id v1 = objc_msgSend(v0, sel_process);
  id v2 = objc_msgSend(v1, sel_bundle);

  if (v2)
  {
    id v3 = objc_msgSend(v2, sel_identifier);

    if (v3)
    {
      id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id protocol witness for ProcessStateUpdate.bundleIdentifier.getter in conformance RBSProcessStateUpdate()
{
  id v1 = objc_msgSend(*v0, sel_process);
  id v2 = objc_msgSend(v1, sel_bundle);

  if (v2)
  {
    id v3 = objc_msgSend(v2, sel_identifier);

    if (v3)
    {
      id v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id protocol witness for ProcessStateUpdate.state.getter in conformance RBSProcessStateUpdate()
{
  id v1 = objc_msgSend(*v0, sel_state);
  return v1;
}

id protocol witness for ProcessStateUpdate.previousState.getter in conformance RBSProcessStateUpdate()
{
  id v1 = objc_msgSend(*v0, sel_previousState);
  return v1;
}

id RunningBoardAppVisibilityMonitor.appPolicyManager.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t RunningBoardAppVisibilityMonitor.applicationController.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 24, a1);
}

uint64_t RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(void *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *v3;
  v3[8] = MEMORY[0x1E4FBC860];
  v3[9] = 0;
  v3[2] = (uint64_t)a1;
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)(v3 + 3));
  uint64_t v7 = *(void (**)(void))(v6 + 192);
  id v8 = a1;
  v7();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:);
  *(void *)(v9 + 24) = v3;
  v15[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ();
  v15[5] = v9;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ();
  v15[3] = &block_descriptor_37;
  uint64_t v10 = _Block_copy(v15);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_retain();
  id v12 = objc_msgSend(ObjCClassFromMetadata, sel_monitorWithConfiguration_, v10);
  _Block_release(v10);
  swift_release();
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();

  uint64_t result = swift_release();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a2);
    unsigned int v14 = (void *)v3[9];
    v3[9] = (uint64_t)v12;

    return (uint64_t)v3;
  }
  return result;
}

void closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96448]), sel_init);
  objc_msgSend(v2, sel_setValues_, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B1138A80;
  *(void *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v3 + 40) = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setEndowmentNamespaces_, isa);

  objc_msgSend(a1, sel_setStateDescriptor_, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B1138AA0;
  *(void *)(v6 + 32) = objc_msgSend(self, sel_predicateMatchingProcessTypeApplication);
  specialized Array._endMutation()();
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessPredicate);
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setPredicates_, v7, v6);

  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  v10[4] = partial apply for closure #1 in closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:);
  v10[5] = v8;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitor, @guaranteed RBSProcessHandle, @guaranteed RBSProcessStateUpdate) -> ();
  v10[3] = &block_descriptor_13_1;
  uint64_t v9 = _Block_copy(v10);
  swift_release();
  objc_msgSend(a1, sel_setUpdateHandler_, v9);
  _Block_release(v9);
}

void partial apply for closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(void *a1)
{
}

uint64_t closure #1 in closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    v8[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessStateUpdate);
    v8[4] = &protocol witness table for RBSProcessStateUpdate;
    v8[0] = a3;
    uint64_t v6 = *(void (**)(void *))(*(void *)v5 + 176);
    id v7 = a3;
    v6(v8);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1B10F4BF8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

id *RunningBoardAppVisibilityMonitor.deinit()
{
  (*((void (**)(void))*v0 + 21))();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 3));
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t RunningBoardAppVisibilityMonitor.__deallocating_deinit()
{
  (*((void (**)(void))*v0 + 21))();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 3));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall RunningBoardAppVisibilityMonitor.invalidate()()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }
  else {
    __break(1u);
  }
}

void RunningBoardAppVisibilityMonitor.handleProcessStateUpdate(_:)(void *a1)
{
  id v2 = v1;
  uint64_t v3 = (uint64_t)a1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  if (!v6) {
    goto LABEL_9;
  }
  id v7 = v6;
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(void *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v3, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  if (!v11)
  {

LABEL_9:
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    outlined init with copy of UserNotificationCenter(v3, (uint64_t)v62);
    id v7 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v61 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      outlined init with copy of UserNotificationCenter((uint64_t)v62, (uint64_t)&v59);
      outlined init with copy of ProcessStateUpdate?((uint64_t)&v59, (uint64_t)&v57);
      if (v58)
      {
        outlined init with take of BackgroundSessionManagerDataSource(&v57, (uint64_t)v56);
        outlined init with copy of UserNotificationCenter((uint64_t)v56, (uint64_t)v55);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProcessStateUpdate);
        uint64_t v27 = String.init<A>(reflecting:)();
        unint64_t v29 = v28;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
      }
      else
      {
        unint64_t v29 = 0xE300000000000000;
        uint64_t v27 = 7104878;
      }
      outlined destroy of UUID?((uint64_t)&v59, &demangling cache variable for type metadata for ProcessStateUpdate?);
      uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
      _os_log_impl(&dword_1B0DF7000, v7, v24, "RunningBoardAppVisibilityMonitor: Skipping process state update since it's missing necessary contents: %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v26, -1, -1);
      MEMORY[0x1B3EA39E0](v25, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
    }
    goto LABEL_40;
  }
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  uint64_t v59 = v10;
  unint64_t v60 = v11;
  unsigned int v14 = *(uint64_t (**)(uint64_t, uint64_t))(*v1 + 200);
  swift_bridgeObjectRetain();
  char v15 = v14(v12, v13);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.default);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(void *)&long long v57 = v34;
      *(_DWORD *)id v33 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v56[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v31, v32, "RunningBoardAppVisibilityMonitor: Ignoring visibility update for bundle identifier: %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v34, -1, -1);
      MEMORY[0x1B3EA39E0](v33, -1, -1);

      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();

    goto LABEL_40;
  }
  uint64_t v16 = *(void *)(v3 + 24);
  uint64_t v17 = *(void *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v3, v16);
  uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
  if (v18)
  {
    uint64_t v3 = (uint64_t)v18;
    if (objc_msgSend(v18, sel_taskState) == 4)
    {
      id v19 = objc_msgSend((id)v3, sel_endowmentNamespaces);
      if (v19)
      {
        uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        LODWORD(v19) = specialized Set.contains(_:)(v21, v22, v20);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      goto LABEL_24;
    }
  }
  LODWORD(v19) = 0;
LABEL_24:
  if ([v7 taskState] == 4
    && (id v35 = [v7 endowmentNamespaces]) != 0)
  {
    id v36 = v35;
    uint64_t v37 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = specialized Set.contains(_:)(v38, v39, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 ^ v3))
    {
      if (v3)
      {
        uint64_t v40 = v2 + 8;
        swift_beginAccess();
        uint64_t v3 = v2[8];
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v2[8] = v3;
        if (isUniquelyReferenced_nonNull_native)
        {
LABEL_29:
          unint64_t v43 = *(void *)(v3 + 16);
          unint64_t v42 = *(void *)(v3 + 24);
          unint64_t v44 = v43 + 1;
          if (v43 >= v42 >> 1)
          {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, (void *)v3);
            unint64_t v44 = v43 + 1;
            uint64_t v3 = (uint64_t)v54;
            uint64_t *v40 = (uint64_t)v54;
          }
          *(void *)(v3 + 16) = v44;
          uint64_t v45 = v3 + 16 * v43;
          *(void *)(v45 + 32) = v12;
          *(void *)(v45 + 40) = v13;
          swift_endAccess();
LABEL_39:
          swift_bridgeObjectRetain();
          uint64_t v52 = specialized AppVisibilityMonitor.applicationType(forBundleIdentifier:)(v12, v13);
          swift_bridgeObjectRelease();
          uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*v2 + 208);
          swift_bridgeObjectRetain();
          v53(v12, v13, v52);
          swift_bridgeObjectRelease_n();
          goto LABEL_40;
        }
LABEL_43:
        uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, (void *)v3);
        uint64_t *v40 = v3;
        goto LABEL_29;
      }
LABEL_33:
      uint64_t v40 = v2 + 8;
      swift_beginAccess();
      uint64_t v12 = 0;
      uint64_t v46 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)(v2 + 8), &v59);
      int64_t v47 = *(void *)(v2[8] + 16);
      if (v47 >= v46)
      {
        specialized Array.replaceSubrange<A>(_:with:)(v46, v47);
        swift_endAccess();
        uint64_t v48 = *(void *)(*v40 + 16);
        if (v48)
        {
          uint64_t v49 = *v40 + 16 * v48;
          uint64_t v12 = *(void *)(v49 + 16);
          uint64_t v50 = *(void *)(v49 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v50 = v51;
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v50;
        goto LABEL_39;
      }
      __break(1u);
      goto LABEL_43;
    }
  }
  else if (v19)
  {
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_40:
}

uint64_t static RunningBoardAppVisibilityMonitor.processMonitorType.getter()
{
  return type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessMonitor);
}

Swift::Bool __swiftcall RunningBoardAppVisibilityMonitor._shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(Swift::String forBundleIdentifier)
{
  return specialized AppVisibilityMonitor.shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(forBundleIdentifier._countAndFlagsBits, (unint64_t)forBundleIdentifier._object) & 1;
}

void RunningBoardAppVisibilityMonitor._handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

id protocol witness for AppVisibilityMonitor.appPolicyManager.getter in conformance RunningBoardAppVisibilityMonitor()
{
  return *(id *)(v0 + 16);
}

uint64_t protocol witness for AppVisibilityMonitor.applicationController.getter in conformance RunningBoardAppVisibilityMonitor@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 24, a1);
}

uint64_t protocol witness for AppVisibilityMonitor.invalidate() in conformance RunningBoardAppVisibilityMonitor()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t protocol witness for AppVisibilityMonitor.handleUpdatedConversations(conversations:) in conformance RunningBoardAppVisibilityMonitor()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t outlined init with copy of ProcessStateUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProcessStateUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, uint64_t *a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  while (1)
  {
    uint64_t result = v2[v5 + 4];
    if (result == v7 && v2[v5 + 5] == v8) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v6;
    v5 += 2;
    if (v3 == v6) {
      return v2[2];
    }
  }
  unint64_t v11 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_33;
  }
  unint64_t v12 = v2[2];
  if (v11 == v12) {
    return v6;
  }
  while (v11 < v12)
  {
    unsigned int v14 = &v2[v5];
    uint64_t result = v2[v5 + 6];
    if (result != *a2 || v2[v5 + 7] != a2[1])
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        if (v11 != v6)
        {
          if (v6 >= v12) {
            goto LABEL_31;
          }
          uint64_t v16 = &v2[2 * v6 + 4];
          uint64_t v17 = *v16;
          uint64_t v18 = v16[1];
          uint64_t v19 = v14[6];
          uint64_t v20 = v14[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          }
          uint64_t v21 = &v2[2 * v6];
          v21[4] = v19;
          v21[5] = v20;
          uint64_t result = swift_bridgeObjectRelease();
          if (v11 >= v2[2]) {
            goto LABEL_32;
          }
          uint64_t v22 = &v2[v5];
          v22[6] = v17;
          v22[7] = v18;
          uint64_t result = swift_bridgeObjectRelease();
          *(void *)a1 = v2;
        }
        if (__OFADD__(v6++, 1)) {
          goto LABEL_30;
        }
      }
    }
    ++v11;
    unint64_t v12 = v2[2];
    v5 += 2;
    if (v11 == v12) {
      return v6;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ProcessStateUpdate.bundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ProcessStateUpdate.state.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ProcessStateUpdate.previousState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for RunningBoardAppVisibilityMonitor()
{
  return self;
}

uint64_t method lookup function for RunningBoardAppVisibilityMonitor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RunningBoardAppVisibilityMonitor);
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.__allocating_init(appPolicyManager:applicationController:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.invalidate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.handleProcessStateUpdate(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.handleUpdatedConversations(conversations:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of static RunningBoardAppVisibilityMonitor.processMonitorType.getter()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor._shouldHandleAppVisibilityUpdate(forBundleIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor._handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t sub_1B10F6168()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(uint64_t a1, uint64_t a2, void *a3)
{
  return closure #1 in closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(a1, a2, a3);
}

id static NSBundle.copresenceCore.getter()
{
  type metadata accessor for ConversationManagerHost();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  return v1;
}

id CPDisplayCloneStateObserver.isCloned.getter()
{
  id result = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_display);
  if (result) {
    return objc_msgSend(result, sel_isCloned);
  }
  return result;
}

uint64_t CPDisplayCloneStateObserver.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t CPDisplayCloneStateObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CPDisplayCloneStateObserver.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

id CPDisplayCloneStateObserver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void *CPDisplayCloneStateObserver.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_observation] = 0;
  *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = one-time initialization token for default;
  uint64_t v2 = v0;
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1B0DF7000, v4, v5, "Initializing CPDisplayCloneStateObserver", v6, 2u);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }

  id v7 = objc_msgSend(self, sel_mainDisplay);
  *(void *)&v2[OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_display] = v7;

  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for CPDisplayCloneStateObserver();
  uint64_t v8 = (char *)objc_msgSendSuper2(&v19, sel_init);
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)&v8[OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_display];
  if (v10)
  {
    swift_getKeyPath();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v11 = v9;
    id v12 = v10;
    uint64_t v13 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();

    swift_release();
    swift_release();

    unsigned int v14 = *(char **)&v11[OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_observation];
    *(void *)&v11[OBJC_IVAR____TtC14CopresenceCore27CPDisplayCloneStateObserver_observation] = v13;
  }
  else
  {
    unsigned int v14 = v8;
    char v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, v15, v16, "No display available. isCloned will be false", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
  }
  return v9;
}

uint64_t type metadata accessor for CPDisplayCloneStateObserver()
{
  return self;
}

void closure #1 in CPDisplayCloneStateObserver.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3EA3B30](v3);
  if (v4)
  {
    os_log_type_t v5 = (void *)v4;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    id v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    unint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
    if (v10)
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v12 = 67109120;
      (*(uint64_t (**)(void))((*v11 & *v7) + 0x68))();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1B0DF7000, v8, v9, "Display cloned state changed to: %{BOOL}d", v12, 8u);
      MEMORY[0x1B3EA39E0](v12, -1, -1);
    }
    else
    {
    }
    if ((*(uint64_t (**)(void))((*v11 & *v7) + 0x88))())
    {
      uint64_t v14 = v13;
      uint64_t ObjectType = swift_getObjectType();
      char v16 = (*(uint64_t (**)(void))((*v11 & *v7) + 0x68))();
      (*(void (**)(void, uint64_t, uint64_t))(v14 + 8))(v16 & 1, ObjectType, v14);
      swift_unknownObjectRelease();
    }
  }
}

id CPDisplayCloneStateObserver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPDisplayCloneStateObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for CPDisplayCloneStateObserverProtocol.isCloned.getter in conformance CPDisplayCloneStateObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t protocol witness for CPDisplayCloneStateObserverProtocol.delegate.getter in conformance CPDisplayCloneStateObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t protocol witness for CPDisplayCloneStateObserverProtocol.delegate.setter in conformance CPDisplayCloneStateObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

void (*protocol witness for CPDisplayCloneStateObserverProtocol.delegate.modify in conformance CPDisplayCloneStateObserver(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x98))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

char *keypath_get_selector_isCloned()
{
  return sel_isCloned;
}

id sub_1B10F6A94@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isCloned);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1B10F6AC8()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in CPDisplayCloneStateObserver.init()(uint64_t a1, uint64_t a2)
{
  closure #1 in CPDisplayCloneStateObserver.init()(a1, a2, v2);
}

uint64_t sub_1B10F6B08@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B10F6B64(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x90);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of CPDisplayCloneStateObserverDelegate.clonedStateChanged(isCloned:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CPDisplayCloneStateObserverProtocol.isCloned.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CPDisplayCloneStateObserverProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CPDisplayCloneStateObserverProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CPDisplayCloneStateObserverProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t method lookup function for CPDisplayCloneStateObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPDisplayCloneStateObserver);
}

uint64_t dispatch thunk of CPDisplayCloneStateObserver.isCloned.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CPDisplayCloneStateObserver.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CPDisplayCloneStateObserver.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CPDisplayCloneStateObserver.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

void one-time initialization function for appleTVBundleIDs()
{
  static BundleIdentiferMap.appleTVBundleIDs = (uint64_t)&outlined read-only object #0 of one-time initialization function for appleTVBundleIDs;
}

void one-time initialization function for musicBundleIDs()
{
  static BundleIdentiferMap.musicBundleIDs = (uint64_t)&outlined read-only object #0 of one-time initialization function for musicBundleIDs;
}

void one-time initialization function for notesBundleIDs()
{
  static BundleIdentiferMap.notesBundleIDs = (uint64_t)&outlined read-only object #0 of one-time initialization function for notesBundleIDs;
}

BOOL specialized static BundleIdentiferMap.areEquivalentBundleIDs(bundleID:otherBundleID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = (a2 | a4) == 0;
  if (a2 && a4)
  {
    if (a1 == a3 && a2 == a4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    if (one-time initialization token for appleTVBundleIDs != -1) {
      swift_once();
    }
    os_log_type_t v9 = (void *)static BundleIdentiferMap.appleTVBundleIDs;
    if ((specialized Sequence<>.contains(_:)(a1, a2, (void *)static BundleIdentiferMap.appleTVBundleIDs) & 1) != 0
      && (specialized Sequence<>.contains(_:)(a3, a4, v9) & 1) != 0)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Log.default);
      unint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v11, v12)) {
        goto LABEL_31;
      }
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      uint64_t v14 = "Found equivalent apple tv BundleID";
    }
    else
    {
      if (one-time initialization token for musicBundleIDs != -1) {
        swift_once();
      }
      char v15 = (void *)static BundleIdentiferMap.musicBundleIDs;
      if ((specialized Sequence<>.contains(_:)(a1, a2, (void *)static BundleIdentiferMap.musicBundleIDs) & 1) != 0
        && (specialized Sequence<>.contains(_:)(a3, a4, v15) & 1) != 0)
      {
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Log.default);
        unint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v11, v12)) {
          goto LABEL_31;
        }
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        uint64_t v14 = "Found equivalent music BundleID";
      }
      else
      {
        if (one-time initialization token for notesBundleIDs != -1) {
          swift_once();
        }
        uint64_t v17 = (void *)static BundleIdentiferMap.notesBundleIDs;
        if ((specialized Sequence<>.contains(_:)(a1, a2, (void *)static BundleIdentiferMap.notesBundleIDs) & 1) == 0
          || (specialized Sequence<>.contains(_:)(a3, a4, v17) & 1) == 0)
        {
          return 0;
        }
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        __swift_project_value_buffer(v18, (uint64_t)static Log.default);
        unint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v11, v12)) {
          goto LABEL_31;
        }
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        uint64_t v14 = "Found equivalent notes BundleID";
      }
    }
    _os_log_impl(&dword_1B0DF7000, v11, v12, v14, v13, 2u);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
LABEL_31:

    return 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for BundleIdentiferMap()
{
  return &type metadata for BundleIdentiferMap;
}

uint64_t PresenceController.__allocating_init(activityID:personalPresenceController:)(char *a1, uint64_t a2)
{
  uint64_t v2 = specialized PresenceController.__allocating_init(activityID:personalPresenceController:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t PresenceController.members.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 40))(ObjectType, v1);
}

uint64_t PresenceController.members.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, ObjectType, v3);
}

uint64_t (*PresenceController.members.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 24);
  a1[1] = *(void *)(v1 + 16);
  a1[2] = v3;
  a1[3] = swift_getObjectType();
  *a1 = (*(uint64_t (**)(void))(v3 + 40))();
  return PresenceController.members.modify;
}

uint64_t PresenceController.members.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if ((a2 & 1) == 0) {
    return v4(*a1, v3, v2);
  }
  uint64_t v5 = swift_bridgeObjectRetain();
  v4(v5, v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for PresenceController.presentDevices : PresenceController()
{
  return swift_bridgeObjectRelease();
}

uint64_t PresenceController.presentDevices.getter()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PresenceController.$presentDevices.getter()
{
  return swift_retain();
}

uint64_t PresenceController.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresenceController.cancellables.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PresenceController.cancellables.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t PresenceController.__allocating_init<A>(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  PresenceController.init<A>(dataSource:)(a1, a2, a3, a4);
  return v8;
}

uint64_t PresenceController.init<A>(dataSource:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v21 = a3;
  swift_getExtendedExistentialTypeMetadata();
  type metadata accessor for Array();
  type metadata accessor for AnyPublisher();
  void v17[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [PresentDevice]);
  v17[1] = swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for Publishers.Map();
  uint64_t v20 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  swift_allocObject();
  *(void *)(v4 + 32) = CurrentValueSubject.init(_:)();
  *(void *)(v4 + 40) = MEMORY[0x1E4FBC870];
  uint64_t v11 = a1;
  uint64_t ObjectType = swift_getObjectType();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  v17[3] = v11;
  swift_unknownObjectRetain();
  uint64_t v21 = v13(ObjectType, a2);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v19;
  *(void *)(v14 + 16) = v18;
  *(void *)(v14 + 24) = v15;
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  swift_getWitnessTable();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_unknownObjectRelease();
  return v5;
}

uint64_t closure #1 in PresenceController.init<A>(dataSource:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v10[7] = *a1;
  void v10[2] = a2;
  v10[3] = a3;
  v10[5] = a2;
  swift_getExtendedExistentialTypeMetadata();
  uint64_t v5 = type metadata accessor for Array();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresentDevice);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in PresenceController.init<A>(dataSource:), (uint64_t)v10, v5, v6, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v8);
  *a4 = result;
  return result;
}

uint64_t closure #1 in closure #1 in PresenceController.init<A>(dataSource:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 3);
  uint64_t v3 = a1[3];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a1, v3);
  *(_OWORD *)(a2 + 24) = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  return (*(uint64_t (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(boxed_opaque_existential_1, v4, v3);
}

uint64_t closure #2 in PresenceController.init<A>(dataSource:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PresenceController.assertPresence()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](PresenceController.assertPresence(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  void *v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v3;
  *uint64_t v3 = v0;
  v3[1] = PersonalPresenceDataSource.assertPresence(using:);
  return PresenceDataSource.assertPresence()(ObjectType, v1);
}

uint64_t PresenceController.releasePresence()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](PresenceController.releasePresence(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  void *v3;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v1 + 72) + **(int **)(v1 + 72));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v3;
  *uint64_t v3 = v0;
  v3[1] = PersonalPresenceDataSource.releasePresence();
  return v5(ObjectType, v1);
}

uint64_t PresenceController.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PresenceController.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized PresenceController.__allocating_init(activityID:personalPresenceController:)(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v33 - v8;
  if (one-time initialization token for service != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.service);
  id v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v36(v9, (uint64_t)a1, v4);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    id v35 = a1;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v34 = a2;
    uint64_t v16 = v15;
    uint64_t v40 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    id v33 = v14 + 4;
    lazy protocol witness table accessor for type PersonalPresenceDataSource and conformance PersonalPresenceDataSource((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v9, v4);
    os_log_type_t v20 = v12;
    uint64_t v21 = v19;
    _os_log_impl(&dword_1B0DF7000, v11, v20, "Creating multiplexed presence controller for me-to-me session with identifier: %s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v16;
    a2 = v34;
    MEMORY[0x1B3EA39E0](v22, -1, -1);
    uint64_t v23 = v14;
    a1 = v35;
    MEMORY[0x1B3EA39E0](v23, -1, -1);
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v9, v4);
  }

  uint64_t v24 = (uint64_t)v37;
  v36(v37, (uint64_t)a1, v4);
  type metadata accessor for PersonalPresenceDataSource(0);
  swift_allocObject();
  swift_retain();
  uint64_t v25 = specialized PersonalPresenceDataSource.init(activityID:personalPresenceController:)(v24, a2);
  uint64_t v26 = a1;
  uint64_t v27 = v25;
  swift_release();
  uint64_t v28 = lazy protocol witness table accessor for type PersonalPresenceDataSource and conformance PersonalPresenceDataSource((unint64_t *)&lazy protocol witness table cache variable for type PersonalPresenceDataSource and conformance PersonalPresenceDataSource, (void (*)(uint64_t))type metadata accessor for PersonalPresenceDataSource);
  unint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, ValueMetadata *, unint64_t))(v38 + 184);
  unint64_t v30 = lazy protocol witness table accessor for type EmptyPresenceContext and conformance EmptyPresenceContext();
  uint64_t v31 = v29(v27, v28, &type metadata for EmptyPresenceContext, v30);
  v21(v26, v4);
  return v31;
}

uint64_t sub_1B10F7FE0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PresenceController.init<A>(dataSource:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in PresenceController.init<A>(dataSource:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1B10F7FF8()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B10F8030@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10F807C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 112);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B10F80D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10F8120@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1B10F816C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for PresenceController()
{
  return self;
}

uint64_t method lookup function for PresenceController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PresenceController);
}

uint64_t dispatch thunk of PresenceController.members.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PresenceController.members.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PresenceController.members.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PresenceController.presentDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PresenceController.$presentDevices.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PresenceController.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PresenceController.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PresenceController.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PresenceController.__allocating_init<A>(dataSource:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of PresenceController.assertPresence()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 192) + **(int **)(*(void *)v0 + 192));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v4();
}

uint64_t dispatch thunk of PresenceController.releasePresence()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 200) + **(int **)(*(void *)v0 + 200));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t partial apply for closure #1 in closure #1 in PresenceController.init<A>(dataSource:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in PresenceController.init<A>(dataSource:)(a1, a2);
}

uint64_t lazy protocol witness table accessor for type PersonalPresenceDataSource and conformance PersonalPresenceDataSource(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, SEL *a2)
{
  uint64_t v3 = a1;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v22;
    uint64_t v20 = v23;
    uint64_t v4 = v24;
    int64_t v5 = v25;
    unint64_t v6 = v26;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v20 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v19 = v4;
  int64_t v10 = (unint64_t)(v4 + 64) >> 6;
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v21;
    swift_unknownObjectRelease();
    int64_t v13 = v5;
    uint64_t v11 = v6;
    if (!v21) {
      goto LABEL_36;
    }
LABEL_26:
    id v17 = objc_msgSend(v14, *a2, v19);

    int64_t v5 = v13;
    unint64_t v6 = v11;
    if (v17)
    {
      MEMORY[0x1B3EA1CF0]();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int64_t v5 = v13;
      unint64_t v6 = v11;
    }
  }
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v5 << 6);
    int64_t v13 = v5;
LABEL_25:
    id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v12);
    if (!v14) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  int64_t v13 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v13 >= v10) {
      goto LABEL_36;
    }
    unint64_t v15 = *(void *)(v20 + 8 * v13);
    if (!v15)
    {
      int64_t v16 = v5 + 2;
      if (v5 + 2 >= v10) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v16);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v16 = v5 + 3;
      if (v5 + 3 >= v10) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v16);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v16 = v5 + 4;
      if (v5 + 4 >= v10) {
        goto LABEL_36;
      }
      unint64_t v15 = *(void *)(v20 + 8 * v16);
      if (v15)
      {
LABEL_23:
        int64_t v13 = v16;
      }
      else
      {
        int64_t v13 = v5 + 5;
        if (v5 + 5 >= v10) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v20 + 8 * v13);
        if (!v15)
        {
          int64_t v18 = v5 + 6;
          while (v10 != v18)
          {
            unint64_t v15 = *(void *)(v20 + 8 * v18++);
            if (v15)
            {
              int64_t v13 = v18 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_24:
    uint64_t v11 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v16 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v12 = v3;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_31;
    }
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v10 = v23;
    swift_unknownObjectRelease();
    if (!v23) {
      goto LABEL_31;
    }
LABEL_10:
    unsigned __int8 v11 = objc_msgSend(v10, sel_isValidated);

    if ((v11 & 1) == 0) {
      goto LABEL_31;
    }
  }
  if (v4)
  {
    unint64_t v8 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v9 = v8 | (v3 << 6);
LABEL_9:
    id v10 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v10) {
      goto LABEL_31;
    }
    goto LABEL_10;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v16) {
      goto LABEL_31;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    ++v3;
    if (!v14)
    {
      uint64_t v3 = v12 + 2;
      if (v12 + 2 >= v16) {
        goto LABEL_31;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v3);
      if (!v14)
      {
        uint64_t v3 = v12 + 3;
        if (v12 + 3 >= v16) {
          goto LABEL_31;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v3);
        if (!v14)
        {
          uint64_t v3 = v12 + 4;
          if (v12 + 4 >= v16) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v17 + 8 * v3);
          if (!v14)
          {
            uint64_t v3 = v12 + 5;
            if (v12 + 5 >= v16) {
              goto LABEL_31;
            }
            unint64_t v14 = *(void *)(v17 + 8 * v3);
            if (!v14)
            {
              uint64_t v15 = v12 + 6;
              while (v16 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v3 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_31:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_9;
  }
  __break(1u);
}

double CPApplicationPolicyManager.Config.handleExpiryTimeout.getter()
{
  return *(double *)v0;
}

void CPApplicationPolicyManager.Config.handleExpiryTimeout.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*CPApplicationPolicyManager.Config.handleExpiryTimeout.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

CopresenceCore::CPApplicationPolicyManager::Config __swiftcall CPApplicationPolicyManager.Config.init()()
{
  *uint64_t v0 = 0x4143C68000000000;
  return result;
}

double default argument 0 of CPApplicationPolicyManager.Config.init(handleExpiryTimeout:)()
{
  return 2592000.0;
}

CopresenceCore::CPApplicationPolicyManager::Config __swiftcall CPApplicationPolicyManager.Config.init(handleExpiryTimeout:)(CopresenceCore::CPApplicationPolicyManager::Config handleExpiryTimeout)
{
  v1->handleExpiryTimeout = handleExpiryTimeout.handleExpiryTimeout;
  return handleExpiryTimeout;
}

id closure #1 in variable initialization expression of static CPApplicationPolicyManager.shared()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)CPSharedConversationServerBag), sel_init);
  double v5 = (double)(uint64_t)objc_msgSend(v0, sel_backgroundAppPolicyHandleExpiryDays) * 24.0 * 60.0 * 60.0;
  LOBYTE(v6) = 0;
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init, *(void *)&v5, v6);
  id v2 = objc_allocWithZone((Class)type metadata accessor for CPApplicationPolicyManager());
  id v3 = CPApplicationPolicyManager.init(config:contactStore:featureFlags:)((uint64_t)&v5, v1, 0);

  return v3;
}

id CPApplicationPolicyManager.__allocating_init(config:contactStore:featureFlags:)(uint64_t a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  return CPApplicationPolicyManager.init(config:contactStore:featureFlags:)(a1, a2, a3);
}

id static CPApplicationPolicyManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v0 = (void *)static CPApplicationPolicyManager.shared;
  return v0;
}

uint64_t CPApplicationPolicyManager.authorizedBundleIdentifiers.getter()
{
  uint64_t v1 = *(void *)((char *)v0 + OBJC_IVAR___CPApplicationPolicyManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  closure #1 in CPApplicationPolicyManager.authorizedBundleIdentifiers.getter(v0, &v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  return v3;
}

id closure #1 in CPApplicationPolicyManager.authorizedBundleIdentifiers.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (void *)((char *)a1 + OBJC_IVAR___CPApplicationPolicyManager_storage);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, v7, v5, v6);
  uint64_t v9 = specialized Dictionary.compactMapValues<A>(_:)(v8);
  swift_bridgeObjectRelease();
  id v10 = specialized _NativeDictionary.mapValues<A>(_:)(v9);
  swift_bridgeObjectRelease();
  id result = objc_msgSend(*(id *)((char *)a1 + OBJC_IVAR___CPApplicationPolicyManager_featureFlags), sel_appProtectionEnabled);
  if (result)
  {
    (*(void (**)(void *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xD8))(v23);
    uint64_t v12 = v24;
    if (v24)
    {
      uint64_t v13 = v25;
      unint64_t v14 = __swift_project_boxed_opaque_existential_1(v23, v24);
      uint64_t v15 = *(void *)(v12 - 8);
      MEMORY[0x1F4188790](v14);
      uint64_t v17 = (char *)&v23[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v15 + 16))(v17);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
      uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v12);
      MEMORY[0x1F4188790](v19);
      void v21[2] = v18;
      uint64_t v20 = specialized _NativeDictionary.filter(_:)((uint64_t)v10, (uint64_t)partial apply for closure #1 in closure #1 in closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory(), (uint64_t)v21, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
      swift_bridgeObjectRelease();
      id result = (id)swift_release();
      id v10 = (void *)v20;
    }
    else
    {
      id result = (id)outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
    }
  }
  *a2 = v10;
  return result;
}

uint64_t closure #2 in closure #1 in CPApplicationPolicyManager.authorizedBundleIdentifiers.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4[2];
  if (!v4) {
    return 1;
  }
  if (a4[4] == a1 && a4[5] == a2) {
    return 0;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v9 & 1) == 0)
  {
    if (v4 == 1) {
      return 1;
    }
    unsigned __int8 v11 = a4 + 7;
    for (uint64_t i = 1; ; ++i)
    {
      uint64_t v13 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      BOOL v14 = *(v11 - 1) == a1 && *v11 == a2;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 0;
      }
      v11 += 2;
      uint64_t result = 1;
      if (v13 == v4) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t CPApplicationPolicyManager.autoSharePlayEnabled.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CPApplicationPolicyManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___CPApplicationPolicyManager_storage + 24);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR___CPApplicationPolicyManager_storage + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR___CPApplicationPolicyManager_storage), v2);
  (*(void (**)(uint64_t *__return_ptr, void, unint64_t, unint64_t, void, uint64_t, uint64_t))(v3 + 40))(&v5, MEMORY[0x1E4FBB390], 0xD00000000000001FLL, 0x80000001B115E4C0, MEMORY[0x1E4FBB390], v2, v3);
  LOBYTE(v2) = (v5 == 2) | v5;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
  return v2 & 1;
}

void CPApplicationPolicyManager.autoSharePlayEnabled.setter(char a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v5, v6, "[CPAppPolicyManager] set auto-SharePlay enabled %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }

  uint64_t v11 = *(void *)((char *)v2 + OBJC_IVAR___CPApplicationPolicyManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  closure #1 in CPApplicationPolicyManager.autoSharePlayEnabled.setter(v2, a1 & 1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
}

uint64_t closure #1 in CPApplicationPolicyManager.autoSharePlayEnabled.setter(void *a1, char a2)
{
  uint64_t v3 = (void *)((char *)a1 + OBJC_IVAR___CPApplicationPolicyManager_storage);
  uint64_t v4 = *(void *)((char *)a1 + OBJC_IVAR___CPApplicationPolicyManager_storage + 24);
  uint64_t v5 = *(void *)((char *)a1 + OBJC_IVAR___CPApplicationPolicyManager_storage + 32);
  __swift_project_boxed_opaque_existential_1((void *)((char *)a1 + OBJC_IVAR___CPApplicationPolicyManager_storage), v4);
  uint64_t v41 = MEMORY[0x1E4FBB390];
  v40[0] = a2;
  (*(void (**)(unsigned char *, unint64_t, unint64_t, uint64_t, uint64_t))(v5 + 8))(v40, 0xD00000000000001FLL, 0x80000001B115E4C0, v4, v5);
  uint64_t result = outlined destroy of UUID?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (a2) {
    return result;
  }
  if (one-time initialization token for default != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl(&dword_1B0DF7000, v8, v9, "[CPAppPolicyManager] Disabling auto-SharePlay for all previously allowed apps", v10, 2u);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }

  uint64_t v11 = v3[3];
  uint64_t v12 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v13, v13, v11, v12);
  uint64_t v15 = specialized Dictionary.compactMapValues<A>(_:)(v14);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int64_t v18 = 0;
  uint64_t v42 = v15;
  uint64_t v19 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  uint64_t v21 = v15 + 64;
  unint64_t v22 = v20 & *(void *)(v15 + 64);
  uint64_t v38 = v21;
  int64_t v39 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      unint64_t v23 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_9;
    }
    int64_t v30 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v30 >= v39)
    {
LABEL_29:
      uint64_t result = swift_release();
      if (v17)
      {
        uint64_t v33 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xC0))(result);
        uint64_t v34 = (void *)swift_allocObject();
        void v34[2] = a1;
        long long v34[3] = v16;
        v34[4] = v17;
        id v35 = *(void (**)(void (*)(void *), void *))(*(void *)v33 + 152);
        id v36 = a1;
        v35(partial apply for closure #1 in closure #1 in CPApplicationPolicyManager.autoSharePlayEnabled.setter, v34);
        swift_release();
        return swift_release();
      }
      return result;
    }
    unint64_t v31 = *(void *)(v38 + 8 * v30);
    ++v18;
    if (!v31)
    {
      int64_t v18 = v30 + 1;
      if (v30 + 1 >= v39) {
        goto LABEL_29;
      }
      unint64_t v31 = *(void *)(v38 + 8 * v18);
      if (!v31)
      {
        int64_t v18 = v30 + 2;
        if (v30 + 2 >= v39) {
          goto LABEL_29;
        }
        unint64_t v31 = *(void *)(v38 + 8 * v18);
        if (!v31)
        {
          int64_t v18 = v30 + 3;
          if (v30 + 3 >= v39) {
            goto LABEL_29;
          }
          unint64_t v31 = *(void *)(v38 + 8 * v18);
          if (!v31)
          {
            int64_t v18 = v30 + 4;
            if (v30 + 4 >= v39) {
              goto LABEL_29;
            }
            unint64_t v31 = *(void *)(v38 + 8 * v18);
            if (!v31) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v22 = (v31 - 1) & v31;
    unint64_t v24 = __clz(__rbit64(v31)) + (v18 << 6);
LABEL_9:
    uint64_t v25 = (uint64_t *)(*(void *)(v42 + 48) + 16 * v24);
    uint64_t v16 = *v25;
    uint64_t v26 = v25[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = v3[3];
    uint64_t v28 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v27);
    unint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 24);
    swift_bridgeObjectRetain();
    v29(v16, v26, v27, v28);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = v26;
  }
  int64_t v32 = v30 + 5;
  if (v32 >= v39) {
    goto LABEL_29;
  }
  unint64_t v31 = *(void *)(v38 + 8 * v32);
  if (v31)
  {
    int64_t v18 = v32;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v18 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v18 >= v39) {
      goto LABEL_29;
    }
    unint64_t v31 = *(void *)(v38 + 8 * v18);
    ++v32;
    if (v31) {
      goto LABEL_28;
    }
  }
  __break(1u);
  return result;
}

void (*CPApplicationPolicyManager.autoSharePlayEnabled.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_storage + 24);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_storage + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_storage), v4);
  (*(void (**)(void, unint64_t, unint64_t, void, uint64_t, uint64_t))(v5 + 40))(MEMORY[0x1E4FBB390], 0xD00000000000001FLL, 0x80000001B115E4C0, MEMORY[0x1E4FBB390], v4, v5);
  char v6 = (*(unsigned char *)(a1 + 9) == 2) | *(unsigned char *)(a1 + 9);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return CPApplicationPolicyManager.autoSharePlayEnabled.modify;
}

void CPApplicationPolicyManager.autoSharePlayEnabled.modify(uint64_t a1)
{
}

uint64_t static CPApplicationPolicyManager.InputError.== infix(_:_:)()
{
  return 1;
}

void CPApplicationPolicyManager.InputError.hash(into:)()
{
}

Swift::Int CPApplicationPolicyManager.InputError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t CPApplicationPolicyManager.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR___CPApplicationPolicyManager_storage, a1);
}

double CPApplicationPolicyManager.config.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_config);
  *a1 = result;
  return result;
}

uint64_t CPApplicationPolicyManager.lock.getter()
{
  return swift_retain();
}

id CPApplicationPolicyManager.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPApplicationPolicyManager_queue);
}

uint64_t CPApplicationPolicyManager.delegates.getter()
{
  return swift_retain();
}

uint64_t CPApplicationPolicyManager.delegates.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_delegates);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*CPApplicationPolicyManager.delegates.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t CPApplicationPolicyManager.contactStore.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CPApplicationPolicyManager.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CPApplicationPolicyManager.protectedAppsObserver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPApplicationPolicyManager_protectedAppsObserver;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
}

uint64_t CPApplicationPolicyManager.protectedAppsObserver.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPApplicationPolicyManager_protectedAppsObserver;
  swift_beginAccess();
  outlined assign with take of ProtectedAppsObserverProtocol?(a1, v3);
  return swift_endAccess();
}

uint64_t (*CPApplicationPolicyManager.protectedAppsObserver.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

id closure #1 in variable initialization expression of CPApplicationPolicyManager.contactsDataSourceCreationBlock(uint64_t a1)
{
  id v2 = objc_allocWithZone(MEMORY[0x1E4F1B980]);
  return objc_msgSend(v2, sel_initWithConfiguration_, a1);
}

uint64_t key path setter for CPApplicationPolicyManager.contactsDataSourceCreationBlock : CPApplicationPolicyManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  char v6 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xF8);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNContactStoreConfiguration) -> (@out TUContactsDataSource), v5);
}

uint64_t CPApplicationPolicyManager.contactsDataSourceCreationBlock.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPApplicationPolicyManager_contactsDataSourceCreationBlock);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t CPApplicationPolicyManager.contactsDataSourceCreationBlock.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___CPApplicationPolicyManager_contactsDataSourceCreationBlock);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*CPApplicationPolicyManager.contactsDataSourceCreationBlock.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

id CPApplicationPolicyManager.init(config:contactStore:featureFlags:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v54 = a3;
  uint64_t v52 = a2;
  uint64_t v51 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v9 - 8);
  double v10 = *(double *)a1;
  int v53 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v11 = OBJC_IVAR___CPApplicationPolicyManager_lock;
  uint64_t v50 = type metadata accessor for Lock();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v3;
  uint64_t v14 = (_DWORD *)swift_slowAlloc();
  *(void *)(v12 + 16) = v14;
  _DWORD *v14 = 0;
  *(void *)&v3[v11] = v12;
  uint64_t v49 = OBJC_IVAR___CPApplicationPolicyManager_queue;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  *(void *)&v56[0] = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCC58], v51);
  uint64_t v15 = v52;
  *(void *)&v13[v49] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = OBJC_IVAR___CPApplicationPolicyManager_delegates;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DelegatesManager<CPApplicationPolicyManagerDelegate>);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = (_DWORD *)swift_slowAlloc();
  *(void *)(v18 + 16) = v19;
  *uint64_t v19 = 0;
  *(void *)(v17 + 24) = v18;
  *(void *)&v13[v16] = v17;
  uint64_t v20 = &v13[OBJC_IVAR___CPApplicationPolicyManager_protectedAppsObserver];
  uint64_t v21 = (objc_class *)type metadata accessor for ProtectedAppsObserver();
  id v22 = objc_msgSend(objc_allocWithZone(v21), sel_init);
  *((void *)v20 + 3) = v21;
  *((void *)v20 + 4) = &protocol witness table for ProtectedAppsObserver;
  *(void *)uint64_t v20 = v22;
  unint64_t v23 = (id (**)(uint64_t))&v13[OBJC_IVAR___CPApplicationPolicyManager_contactsDataSourceCreationBlock];
  *unint64_t v23 = closure #1 in variable initialization expression of CPApplicationPolicyManager.contactsDataSourceCreationBlock;
  v23[1] = 0;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  *(void *)&v56[0] = 0;
  *((void *)&v56[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  *(void *)&v56[0] = v24;
  *((void *)&v56[0] + 1) = v26;
  v27._object = (void *)0x80000001B11630C0;
  v27._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v27);
  static NSUserDefaults.classProtectedStorage(suiteName:)(*(uint64_t *)&v56[0], *((unint64_t *)&v56[0] + 1), v56);
  swift_bridgeObjectRelease();
  outlined init with take of BackgroundSessionManagerDataSource(v56, (uint64_t)&v13[OBJC_IVAR___CPApplicationPolicyManager_storage]);
  double v28 = 2592000.0;
  if (!v53) {
    double v28 = v10;
  }
  *(double *)&v13[OBJC_IVAR___CPApplicationPolicyManager_config] = v28;
  if (v15) {
    id v29 = v15;
  }
  else {
    id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
  }
  *(void *)&v13[OBJC_IVAR___CPApplicationPolicyManager_contactStore] = v29;
  int64_t v30 = v54;
  if (v54)
  {
    swift_unknownObjectRetain();
    id v31 = v30;
  }
  else
  {
    id v32 = objc_allocWithZone((Class)CPFeatureFlags);
    swift_unknownObjectRetain();
    id v31 = objc_msgSend(v32, sel_init);
  }
  *(void *)&v13[OBJC_IVAR___CPApplicationPolicyManager_featureFlags] = v31;
  swift_unknownObjectRetain();

  uint64_t v33 = (objc_class *)type metadata accessor for CPApplicationPolicyManager();
  v55.receiver = v13;
  v55.super_class = v33;
  id v34 = objc_msgSendSuper2(&v55, sel_init);
  id v35 = self;
  id v36 = v34;
  id v37 = objc_msgSend(v35, sel_defaultCenter);
  objc_msgSend(v37, sel_addObserver_selector_name_object_, v36, sel_handleCNContactStoreDidChangeNotification_, *MEMORY[0x1E4F1AF80], 0);
  if (v30)
  {
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_appProtectionEnabled))
    {
      uint64_t v38 = (uint64_t)v36 + OBJC_IVAR___CPApplicationPolicyManager_protectedAppsObserver;
      swift_beginAccess();
      uint64_t v39 = *(void *)(v38 + 24);
      if (v39)
      {
        uint64_t v40 = *(void *)(v38 + 32);
        __swift_mutable_project_boxed_opaque_existential_1(v38, *(void *)(v38 + 24));
        uint64_t v41 = *(void (**)(id, _UNKNOWN **, uint64_t, uint64_t))(v40 + 16);
        id v42 = v36;
        v41(v36, &protocol witness table for CPApplicationPolicyManager, v39, v40);
      }
      swift_endAccess();
    }
    swift_unknownObjectRelease();
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Log.default);
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_1B0DF7000, v44, v45, "[CPAppPolicyManager] Init", v46, 2u);
    MEMORY[0x1B3EA39E0](v46, -1, -1);
  }

  CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v36;
}

id CPApplicationPolicyManager.__deallocating_deinit()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v2, sel_removeObserver_, v1);

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.default);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1B0DF7000, v4, v5, "[CPAppPolicyManager] Deinit", v6, 2u);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for CPApplicationPolicyManager();
  return objc_msgSendSuper2(&v8, sel_dealloc);
}

uint64_t CPApplicationPolicyManager.applicationInfo(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR___CPApplicationPolicyManager_storage + 24);
  uint64_t v8 = *(void *)(v3 + OBJC_IVAR___CPApplicationPolicyManager_storage + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + OBJC_IVAR___CPApplicationPolicyManager_storage), v7);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(v18, v9, a1, a2, v9, v7, v8);
  uint64_t result = v18[0];
  if (v18[0]
    && (specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(v18[0], (uint64_t *)v16),
        long long v14 = v16[1],
        long long v15 = v16[0],
        uint64_t v11 = v17,
        uint64_t result = outlined init with take of CPAppPolicy.AuthorizedBundles?((uint64_t)v16, (uint64_t)v18),
        v18[2]))
  {
    long long v13 = v14;
    long long v12 = v15;
  }
  else
  {
    uint64_t v11 = 0;
    long long v12 = 0uLL;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  *(void *)(a3 + 32) = v11;
  return result;
}

uint64_t CPApplicationPolicyManager.persist(_:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *(void *)((char *)v1 + OBJC_IVAR___CPApplicationPolicyManager_storage + 24);
  uint64_t v5 = *(void *)((char *)v1 + OBJC_IVAR___CPApplicationPolicyManager_storage + 32);
  __swift_project_boxed_opaque_existential_1((void *)((char *)v1 + OBJC_IVAR___CPApplicationPolicyManager_storage), v4);
  uint64_t v6 = CPAppPolicy.AuthorizedBundles.dictionaryRepresentation.getter();
  v15[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  v15[0] = v6;
  (*(void (**)(void *, void, void, uint64_t, uint64_t))(v5 + 8))(v15, *(void *)(a1 + 8), *(void *)(a1 + 16), v4, v5);
  uint64_t v7 = outlined destroy of UUID?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xC0))(v7);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v2;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 40) = v10;
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(v9 + 56) = v11;
  long long v12 = *(void (**)(void (*)(void *), uint64_t))(*(void *)v8 + 152);
  v15[0] = v11;
  long long v13 = v2;
  swift_bridgeObjectRetain();
  outlined retain of [UInt64 : AttachmentLedger_AttachmentEncryption].Values((uint64_t)v15);
  v12(partial apply for closure #1 in CPApplicationPolicyManager.persist(_:), v9);
  swift_release();
  return swift_release();
}

void CPApplicationPolicyManager.updateAllowedHandles(_:for:)(void (*a1)(char *, uint64_t, uint64_t), uint64_t a2, unint64_t a3)
{
  uint64_t v95 = a1;
  uint64_t v103 = type metadata accessor for Date();
  uint64_t v101 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  uint64_t v99 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  unint64_t v10 = (unint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v100 = (char *)&v89 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t)&v89 - v13;
  (*(void (**)(void *__return_ptr, uint64_t, unint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x110))(v106, a2, a3);
  uint64_t v15 = v106[1];
  uint64_t v92 = v106[0];
  unint64_t v16 = v106[2];
  char v17 = v107;
  uint64_t v18 = v108;
  uint64_t v19 = outlined init with take of CPAppPolicy.AuthorizedBundles?((uint64_t)v106, (uint64_t)v109);
  if (!v110)
  {
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v92 = 2;
    uint64_t v18 = (void *)MEMORY[0x1E4FBC868];
LABEL_9:
    uint64_t v90 = a2;
    uint64_t v91 = a3;
    MEMORY[0x1F4188790](v19);
    *(&v89 - 2) = v3;
    swift_bridgeObjectRetain();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = specialized _NativeDictionary.filter(_:)(v25, (uint64_t)partial apply for closure #1 in CPApplicationPolicyManager.expiredHandles(from:), (uint64_t)(&v89 - 4), (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v26 + 16);
    uint64_t v89 = v3;
    double v28 = v95;
    if (v27)
    {
      if (one-time initialization token for default != -1) {
        goto LABEL_90;
      }
      goto LABEL_11;
    }
LABEL_14:
    unint64_t v94 = v10;
    uint64_t v40 = 0;
    uint64_t v41 = v26 + 64;
    uint64_t v42 = 1 << *(unsigned char *)(v26 + 32);
    uint64_t v43 = -1;
    if (v42 < 64) {
      uint64_t v43 = ~(-1 << v42);
    }
    unint64_t v10 = v43 & *(void *)(v26 + 64);
    uint64_t v98 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((unint64_t)(v42 + 63) >> 6);
    uint64_t v104 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56);
    os_signpost_id_t v102 = (void (**)(char *, uint64_t, uint64_t))(v101 + 32);
    uint64_t v44 = v103;
    while (1)
    {
      if (v10)
      {
        unint64_t v46 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v47 = v46 | (v40 << 6);
      }
      else
      {
        uint64_t v48 = v40 + 1;
        if (__OFADD__(v40, 1))
        {
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        if (v48 >= (uint64_t)v98) {
          goto LABEL_43;
        }
        unint64_t v49 = *(void *)(v41 + 8 * v48);
        ++v40;
        if (!v49)
        {
          uint64_t v40 = v48 + 1;
          if (v48 + 1 >= (uint64_t)v98) {
            goto LABEL_43;
          }
          unint64_t v49 = *(void *)(v41 + 8 * v40);
          if (!v49)
          {
            uint64_t v40 = v48 + 2;
            if (v48 + 2 >= (uint64_t)v98) {
              goto LABEL_43;
            }
            unint64_t v49 = *(void *)(v41 + 8 * v40);
            if (!v49)
            {
              uint64_t v40 = v48 + 3;
              if (v48 + 3 >= (uint64_t)v98) {
                goto LABEL_43;
              }
              unint64_t v49 = *(void *)(v41 + 8 * v40);
              if (!v49)
              {
                uint64_t v40 = v48 + 4;
                if (v48 + 4 >= (uint64_t)v98) {
                  goto LABEL_43;
                }
                unint64_t v49 = *(void *)(v41 + 8 * v40);
                if (!v49)
                {
                  uint64_t v50 = v48 + 5;
                  if (v50 >= (uint64_t)v98)
                  {
LABEL_43:
                    swift_release();
                    uint64_t v57 = *((void *)v28 + 7);
                    uint64_t v96 = (char *)v28 + 56;
                    uint64_t v58 = 1 << *((unsigned char *)v28 + 32);
                    uint64_t v59 = -1;
                    if (v58 < 64) {
                      uint64_t v59 = ~(-1 << v58);
                    }
                    unint64_t v10 = v59 & v57;
                    int64_t v97 = (unint64_t)(v58 + 63) >> 6;
                    uint64_t v98 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
                    uint64_t v93 = v101 + 40;
                    swift_bridgeObjectRetain();
                    int64_t v60 = 0;
                    while (1)
                    {
LABEL_48:
                      uint64_t v14 = (uint64_t)v100;
                      if (v10)
                      {
                        unint64_t v63 = __clz(__rbit64(v10));
                        v10 &= v10 - 1;
                        unint64_t v64 = v63 | (v60 << 6);
                      }
                      else
                      {
                        int64_t v65 = v60 + 1;
                        if (__OFADD__(v60, 1)) {
                          goto LABEL_86;
                        }
                        if (v65 >= v97)
                        {
LABEL_81:
                          swift_release();
                          LOBYTE(v111[0]) = v92;
                          v111[1] = v90;
                          v111[2] = v91;
                          char v112 = 1;
                          uint64_t v113 = v18;
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          CPApplicationPolicyManager.persist(_:)((uint64_t)v111);
                          swift_bridgeObjectRelease_n();
                          goto LABEL_82;
                        }
                        unint64_t v66 = *(void *)&v96[8 * v65];
                        ++v60;
                        if (!v66)
                        {
                          int64_t v60 = v65 + 1;
                          if (v65 + 1 >= v97) {
                            goto LABEL_81;
                          }
                          unint64_t v66 = *(void *)&v96[8 * v60];
                          if (!v66)
                          {
                            int64_t v60 = v65 + 2;
                            if (v65 + 2 >= v97) {
                              goto LABEL_81;
                            }
                            unint64_t v66 = *(void *)&v96[8 * v60];
                            if (!v66)
                            {
                              int64_t v67 = v65 + 3;
                              if (v67 >= v97) {
                                goto LABEL_81;
                              }
                              unint64_t v66 = *(void *)&v96[8 * v67];
                              if (!v66)
                              {
                                while (1)
                                {
                                  int64_t v60 = v67 + 1;
                                  if (__OFADD__(v67, 1)) {
                                    goto LABEL_88;
                                  }
                                  if (v60 >= v97) {
                                    goto LABEL_81;
                                  }
                                  unint64_t v66 = *(void *)&v96[8 * v60];
                                  ++v67;
                                  if (v66) {
                                    goto LABEL_63;
                                  }
                                }
                              }
                              int64_t v60 = v67;
                            }
                          }
                        }
LABEL_63:
                        unint64_t v10 = (v66 - 1) & v66;
                        unint64_t v64 = __clz(__rbit64(v66)) + (v60 << 6);
                      }
                      char v68 = (uint64_t *)(*((void *)v28 + 6) + 16 * v64);
                      uint64_t v69 = *v68;
                      uint64_t v26 = v68[1];
                      swift_bridgeObjectRetain();
                      Date.init()();
                      char v70 = *v104;
                      (*v104)(v14, 0, 1, v44);
                      if ((*v98)(v14, 1, v44) != 1) {
                        break;
                      }
                      outlined destroy of UUID?(v14, (uint64_t *)&demangling cache variable for type metadata for Date?);
                      swift_bridgeObjectRetain();
                      unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v26);
                      char v73 = v72;
                      swift_bridgeObjectRelease();
                      if (v73)
                      {
                        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v111[0] = (uint64_t)v18;
                        if (!isUniquelyReferenced_nonNull_native)
                        {
                          specialized _NativeDictionary.copy()();
                          uint64_t v18 = (void *)v111[0];
                        }
                        swift_bridgeObjectRelease();
                        uint64_t v62 = v94;
                        uint64_t v44 = v103;
                        (*(void (**)(unint64_t, unint64_t, uint64_t))(v101 + 32))(v94, v18[7] + *(void *)(v101 + 72) * v71, v103);
                        specialized _NativeDictionary._delete(at:)(v71, (uint64_t)v18);
                        swift_bridgeObjectRelease();
                        uint64_t v61 = 0;
                      }
                      else
                      {
                        uint64_t v61 = 1;
                        uint64_t v44 = v103;
                        uint64_t v62 = v94;
                      }
                      v70(v62, v61, 1, v44);
                      swift_bridgeObjectRelease();
                      outlined destroy of UUID?(v62, (uint64_t *)&demangling cache variable for type metadata for Date?);
                    }
                    double v28 = *v102;
                    (*v102)(v99, v14, v44);
                    int v75 = swift_isUniquelyReferenced_nonNull_native();
                    v111[0] = (uint64_t)v18;
                    unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v26);
                    uint64_t v78 = v18[2];
                    BOOL v79 = (v76 & 1) == 0;
                    uint64_t v80 = v78 + v79;
                    if (__OFADD__(v78, v79))
                    {
                      __break(1u);
                      goto LABEL_85;
                    }
                    uint64_t v14 = v76;
                    if (v18[3] >= v80)
                    {
                      if (v75)
                      {
                        uint64_t v83 = (void *)v111[0];
                        if ((v76 & 1) == 0) {
                          goto LABEL_78;
                        }
                      }
                      else
                      {
                        specialized _NativeDictionary.copy()();
                        uint64_t v83 = (void *)v111[0];
                        if ((v14 & 1) == 0) {
                          goto LABEL_78;
                        }
                      }
                    }
                    else
                    {
                      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, v75);
                      unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v69, v26);
                      if ((v14 & 1) != (v82 & 1))
                      {
                        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                        return;
                      }
                      unint64_t v77 = v81;
                      uint64_t v83 = (void *)v111[0];
                      if ((v14 & 1) == 0)
                      {
LABEL_78:
                        v83[(v77 >> 6) + 8] |= 1 << v77;
                        uint64_t v85 = (uint64_t *)(v83[6] + 16 * v77);
                        *uint64_t v85 = v69;
                        v85[1] = v26;
                        v28((char *)(v83[7] + *(void *)(v101 + 72) * v77), (uint64_t)v99, v103);
                        uint64_t v86 = v83[2];
                        BOOL v87 = __OFADD__(v86, 1);
                        uint64_t v88 = v86 + 1;
                        if (v87) {
                          goto LABEL_87;
                        }
                        v83[2] = v88;
                        swift_bridgeObjectRetain();
                        uint64_t v44 = v103;
                        goto LABEL_80;
                      }
                    }
                    unint64_t v84 = v83[7] + *(void *)(v101 + 72) * v77;
                    uint64_t v44 = v103;
                    (*(void (**)(unint64_t, char *, uint64_t))(v101 + 40))(v84, v99, v103);
LABEL_80:
                    uint64_t v18 = (void *)v111[0];
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    double v28 = v95;
                    goto LABEL_48;
                  }
                  unint64_t v49 = *(void *)(v41 + 8 * v50);
                  if (!v49)
                  {
                    while (1)
                    {
                      uint64_t v40 = v50 + 1;
                      if (__OFADD__(v50, 1)) {
                        break;
                      }
                      if (v40 >= (uint64_t)v98) {
                        goto LABEL_43;
                      }
                      unint64_t v49 = *(void *)(v41 + 8 * v40);
                      ++v50;
                      if (v49) {
                        goto LABEL_38;
                      }
                    }
LABEL_89:
                    __break(1u);
LABEL_90:
                    swift_once();
LABEL_11:
                    uint64_t v29 = type metadata accessor for Logger();
                    __swift_project_value_buffer(v29, (uint64_t)static Log.default);
                    swift_retain_n();
                    int64_t v30 = Logger.logObject.getter();
                    os_log_type_t v31 = static os_log_type_t.default.getter();
                    int v32 = v31;
                    if (os_log_type_enabled(v30, v31))
                    {
                      uint64_t v33 = swift_slowAlloc();
                      LODWORD(v102) = v32;
                      id v34 = (uint8_t *)v33;
                      uint64_t v104 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))swift_slowAlloc();
                      v111[0] = (uint64_t)v104;
                      *(_DWORD *)id v34 = 136315138;
                      uint64_t v98 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 4);
                      id v35 = v34;
                      swift_retain();
                      uint64_t v36 = Dictionary.description.getter();
                      unint64_t v38 = v37;
                      swift_release();
                      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v111);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl(&dword_1B0DF7000, v30, (os_log_type_t)v102, "[CPAppPolicyManager] Pruning expired handles:%s", v34, 0xCu);
                      uint64_t v39 = v104;
                      swift_arrayDestroy();
                      MEMORY[0x1B3EA39E0](v39, -1, -1);
                      MEMORY[0x1B3EA39E0](v35, -1, -1);
                    }
                    else
                    {

                      swift_release_n();
                    }
                    goto LABEL_14;
                  }
                  uint64_t v40 = v50;
                }
              }
            }
          }
        }
LABEL_38:
        unint64_t v10 = (v49 - 1) & v49;
        unint64_t v47 = __clz(__rbit64(v49)) + (v40 << 6);
      }
      uint64_t v51 = (uint64_t *)(*(void *)(v26 + 48) + 16 * v47);
      uint64_t v52 = *v51;
      uint64_t v53 = v51[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v53);
      LOBYTE(v52) = v55;
      swift_bridgeObjectRelease();
      if (v52)
      {
        int v56 = swift_isUniquelyReferenced_nonNull_native();
        v111[0] = (uint64_t)v18;
        if (!v56)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v18 = (void *)v111[0];
        }
        swift_bridgeObjectRelease();
        uint64_t v44 = v103;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v101 + 32))(v14, v18[7] + *(void *)(v101 + 72) * v54, v103);
        specialized _NativeDictionary._delete(at:)(v54, (uint64_t)v18);
        swift_bridgeObjectRelease();
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v45 = 1;
        uint64_t v44 = v103;
      }
      (*v104)(v14, v45, 1, v44);
      outlined destroy of UUID?(v14, (uint64_t *)&demangling cache variable for type metadata for Date?);
      swift_bridgeObjectRelease();
    }
  }
  if (v17)
  {
    a3 = v16;
    a2 = v15;
    goto LABEL_9;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v111[0] = v24;
    *(_DWORD *)unint64_t v23 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v21, v22, "[CPAppPolicyManager] Not updating authorized handles list since the application %s isn't authorized", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_82:
    swift_bridgeObjectRelease_n();
  }
}

BOOL closure #1 in CPApplicationPolicyManager.expiredHandles(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = type metadata accessor for DateInterval();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a3, v4);
  DateInterval.init(start:duration:)();
  Date.init()();
  DateInterval.end.getter();
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
  char v15 = dispatch thunk of static Comparable.< infix(_:_:)();
  unint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return (v15 & 1) == 0;
}

uint64_t CPApplicationPolicyManager.fetchAndStoreContactIdentifiers(for:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(void *)&v1[OBJC_IVAR___CPApplicationPolicyManager_queue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in CPApplicationPolicyManager.fetchAndStoreContactIdentifiers(for:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_38;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = a1;
  uint64_t v14 = v1;
  static DispatchQoS.unspecified.getter();
  v16[1] = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void closure #1 in CPApplicationPolicyManager.fetchAndStoreContactIdentifiers(for:)(void *a1, void *a2)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(void *)(v4 - 8);
  unint64_t v127 = v4;
  unint64_t v128 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v126 = (void *)((char *)v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t)v115 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  id v13 = (char *)v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v15 = (os_unfair_lock_t *)((char *)v115 - v14);
  unint64_t v16 = (uint8_t *)objc_msgSend(self, sel_tu_contactStoreConfigurationForConversation_, a1);
  char v17 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0xF0);
  os_log_type_t v117 = a2;
  uint64_t v18 = (uint64_t (*)(uint8_t *))v17();
  uint64_t v19 = (void *)v18(v16);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1B1138AA0;
  *(void *)(v20 + 32) = a1;
  v131[0] = (id)v20;
  specialized Array._endMutation()();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  uint64_t v21 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v120 = 0;
  v131[0] = 0;
  uint64_t v24 = (uint64_t)objc_msgSend(v19, sel_tu_contactsByRemoteConversationMemberForConversations_keyDescriptors_error_, isa, v23, v131);

  id v25 = v131[0];
  if (!v24)
  {
    uint64_t v125 = v13;
    uint64_t v26 = v128;
    id v69 = v131[0];
    uint64_t v24 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();

    if (one-time initialization token for default != -1) {
      goto LABEL_119;
    }
    goto LABEL_54;
  }
  v115[1] = v19;
  double v116 = v16;
  uint64_t v21 = (uint8_t *)0x1E4FADB80;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CNContact]);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v28 = v25;

  int64_t v29 = 0;
  unint64_t v130 = MEMORY[0x1E4FBC868];
  uint64_t v30 = *(void *)(v27 + 64);
  uint64_t v118 = v27 + 64;
  uint64_t v121 = v27;
  uint64_t v31 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & v30;
  int64_t v119 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v9 = (uint64_t)&property descriptor for XPCClient.connectionClosure;
  while (1)
  {
    if (v33)
    {
      uint64_t v122 = (v33 - 1) & v33;
      unint64_t v34 = __clz(__rbit64(v33)) | (v29 << 6);
      goto LABEL_22;
    }
    int64_t v35 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    if (v35 >= v119) {
      goto LABEL_57;
    }
    unint64_t v36 = *(void *)(v118 + 8 * v35);
    ++v29;
    if (!v36)
    {
      int64_t v29 = v35 + 1;
      if (v35 + 1 >= v119) {
        goto LABEL_57;
      }
      unint64_t v36 = *(void *)(v118 + 8 * v29);
      if (!v36)
      {
        int64_t v29 = v35 + 2;
        if (v35 + 2 >= v119) {
          goto LABEL_57;
        }
        unint64_t v36 = *(void *)(v118 + 8 * v29);
        if (!v36) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v122 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v29 << 6);
LABEL_22:
    uint64_t v38 = 8 * v34;
    uint64_t v39 = *(char **)(*(void *)(v121 + 48) + v38);
    uint64_t isUniquelyReferenced_nonNull_native = *(void *)(*(void *)(v121 + 56) + v38);
    unint64_t v123 = (void *)v29;
    if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
    {
      if (isUniquelyReferenced_nonNull_native < 0) {
        uint64_t v21 = (uint8_t *)isUniquelyReferenced_nonNull_native;
      }
      else {
        uint64_t v21 = (uint8_t *)(isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain_n();
      char v68 = v39;
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v24) {
        goto LABEL_5;
      }
LABEL_24:
      unint64_t v126 = (void *)isUniquelyReferenced_nonNull_native;
      unint64_t v127 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      uint64_t v26 = 4;
      unint64_t v124 = v24;
      uint64_t v125 = v39;
      while (2)
      {
        uint64_t v43 = (v26 - 4);
        if (v127) {
          uint64_t v44 = (os_unfair_lock_t *)MEMORY[0x1B3EA25C0](v26 - 4, isUniquelyReferenced_nonNull_native);
        }
        else {
          uint64_t v44 = (os_unfair_lock_t *)*(id *)(isUniquelyReferenced_nonNull_native + 8 * v26);
        }
        char v15 = v44;
        if (__OFADD__(v43, 1))
        {
          __break(1u);
LABEL_104:
          __break(1u);
          goto LABEL_105;
        }
        unint64_t v128 = v26 - 3;
        id v45 = [v44 *(SEL *)(v9 + 3976)];
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v48 = v47;

        if (*(void *)(v130 + 16))
        {
          specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
          unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
          if (v50) {
            unint64_t v49 = (void *)swift_bridgeObjectRetain();
          }
        }
        else
        {
          unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
        }
        v131[0] = v49;
        swift_bridgeObjectRelease();
        id v51 = objc_msgSend(v39, sel_handle);
        MEMORY[0x1B3EA1CF0]();
        if (*(void *)(((unint64_t)v131[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v131[0] & 0xFFFFFFFFFFFFFF8)
                                                                                                + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v13 = (char *)v9;
        id v52 = [v15 *(SEL *)(v9 + 3976)];
        unint64_t v16 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v25 = v53;

        uint64_t v9 = (uint64_t)v131[0];
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v43 = v130;
        uint64_t v132 = v130;
        unint64_t v130 = 0x8000000000000000;
        uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16, (uint64_t)v25);
        Class v55 = v43[2].isa;
        BOOL v56 = (v54 & 1) == 0;
        uint64_t v57 = (uint64_t)v55 + v56;
        if (__OFADD__(v55, v56)) {
          goto LABEL_104;
        }
        char v58 = v54;
        if ((uint64_t)v43[3].isa >= v57)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v61 = (void *)v132;
            if ((v54 & 1) == 0) {
              goto LABEL_44;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v61 = (void *)v132;
            if ((v58 & 1) == 0) {
              goto LABEL_44;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
          unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16, (uint64_t)v25);
          if ((v58 & 1) != (v60 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
          uint64_t v24 = v59;
          uint64_t v61 = (void *)v132;
          if ((v58 & 1) == 0)
          {
LABEL_44:
            uint64_t v62 = &v61[(unint64_t)v24 >> 6];
            unint64_t v63 = v62[8];
            v62[8] = v63 | (1 << v24);
            unint64_t v64 = (uint8_t **)(v61[6] + 16 * v24);
            *unint64_t v64 = v16;
            v64[1] = (uint8_t *)v25;
            *(void *)(v61[7] + 8 * v24) = v9;
            uint64_t v65 = v61[2];
            BOOL v66 = __OFADD__(v65, 1);
            uint64_t v67 = v65 + 1;
            if (v66)
            {
              __break(1u);
              goto LABEL_111;
            }
            v61[2] = v67;
            swift_bridgeObjectRetain();
            goto LABEL_26;
          }
        }
        uint64_t v42 = v61[7];
        swift_bridgeObjectRelease();
        *(void *)(v42 + 8 * v24) = v9;
LABEL_26:
        uint64_t v21 = (uint8_t *)v130;
        unint64_t v130 = (unint64_t)v61;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v26;
        uint64_t v24 = v124;
        uint64_t v39 = v125;
        uint64_t v9 = (uint64_t)v13;
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v126;
        if (v128 == v124) {
          goto LABEL_5;
        }
        continue;
      }
    }
    uint64_t v24 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v41 = v39;
    if (v24) {
      goto LABEL_24;
    }
LABEL_5:

    swift_bridgeObjectRelease();
    unint64_t v33 = v122;
    int64_t v29 = (int64_t)v123;
  }
  int64_t v37 = v35 + 3;
  if (v37 < v119)
  {
    unint64_t v36 = *(void *)(v118 + 8 * v37);
    if (!v36)
    {
      while (1)
      {
        int64_t v29 = v37 + 1;
        if (__OFADD__(v37, 1)) {
          break;
        }
        if (v29 >= v119) {
          goto LABEL_57;
        }
        unint64_t v36 = *(void *)(v118 + 8 * v29);
        ++v37;
        if (v36) {
          goto LABEL_21;
        }
      }
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    int64_t v29 = v37;
    goto LABEL_21;
  }
LABEL_57:
  swift_release();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v78 = type metadata accessor for Logger();
  uint64_t v21 = (uint8_t *)__swift_project_value_buffer(v78, (uint64_t)static Log.default);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.default.getter();
  uint64_t v26 = v79;
  BOOL v80 = os_log_type_enabled((os_log_t)v9, v79);
  unint64_t v123 = v21;
  if (v80)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v131[0] = (id)v24;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUHandle]);
    char v15 = (os_unfair_lock_t *)Dictionary.description.getter();
    unint64_t v82 = v81;
    swift_bridgeObjectRelease();
    uint64_t v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v15, v82, (uint64_t *)v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, (os_log_t)v9, (os_log_type_t)v26, "[CPAppPolicyManager] Updating CPAppPolicy.ContactHandles with %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v24, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }

  swift_beginAccess();
  uint64_t v83 = *(void *)(v130 + 64);
  unint64_t v124 = v130 + 64;
  uint64_t v84 = 1 << *(unsigned char *)(v130 + 32);
  uint64_t v85 = -1;
  if (v84 < 64) {
    uint64_t v85 = ~(-1 << v84);
  }
  unint64_t v86 = v85 & v83;
  unint64_t v127 = OBJC_IVAR___CPApplicationPolicyManager_lock;
  unint64_t v126 = (void *)((char *)v117 + OBJC_IVAR___CPApplicationPolicyManager_storage);
  uint64_t v125 = (char *)((unint64_t)(v84 + 63) >> 6);
  unint64_t v128 = v130;
  swift_bridgeObjectRetain();
  uint64_t v87 = 0;
  if (!v86) {
    goto LABEL_65;
  }
  while (2)
  {
    unint64_t v88 = __clz(__rbit64(v86));
    v86 &= v86 - 1;
    unint64_t v89 = v88 | (v87 << 6);
LABEL_76:
    uint64_t v92 = (uint64_t *)(*(void *)(v128 + 48) + 16 * v89);
    uint64_t v93 = *v92;
    uint64_t v26 = v92[1];
    uint64_t v9 = *(void *)(*(void *)(v128 + 56) + 8 * v89);
    if ((unint64_t)v9 >> 62)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v21 = (uint8_t *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(uint8_t **)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    char v15 = (os_unfair_lock_t *)&lazy cache variable for type metadata for TUHandle;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    v131[0] = (id)Set.init(minimumCapacity:)();
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0) {
        uint64_t v21 = (uint8_t *)v9;
      }
      else {
        uint64_t v21 = (uint8_t *)(v9 & 0xFFFFFFFFFFFFFF8);
      }
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_85;
      }
    }
    else
    {
      uint64_t v24 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v24) {
        goto LABEL_92;
      }
LABEL_85:
      if (v24 < 1) {
        goto LABEL_115;
      }
      if ((v9 & 0xC000000000000001) != 0)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          uint64_t v95 = (void *)MEMORY[0x1B3EA25C0](i, v9);
          specialized Set._Variant.insert(_:)(&v129, v95);
        }
      }
      else
      {
        for (uint64_t j = 0; j != v24; ++j)
        {
          int64_t v97 = *(void **)(v9 + 8 * j + 32);
          specialized Set._Variant.insert(_:)(&v129, v97);
        }
      }
    }
LABEL_92:
    swift_bridgeObjectRelease();
    uint64_t v98 = v120;
    uint64_t v99 = specialized CPApplicationPolicyManager.hashedHandles(from:)((uint64_t)v131[0]);
    if (v98)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc();
        unint64_t v106 = (void *)swift_slowAlloc();
        v131[0] = v106;
        *(_DWORD *)uint64_t v105 = 136315138;
        id v129 = (id)v9;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUHandle]);
        uint64_t v107 = String.init<A>(reflecting:)();
        id v129 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, (uint64_t *)v131);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v103, v104, "[CPAppPolicyManager] Error getting normalized handles from %s", v105, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v106, -1, -1);
        MEMORY[0x1B3EA39E0](v105, -1, -1);
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease_n();
      }
      swift_unknownObjectRelease();

      goto LABEL_113;
    }
    uint64_t v100 = v99;
    uint64_t v120 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v100);
    swift_bridgeObjectRelease();
    char v15 = *(os_unfair_lock_t **)((char *)v117 + v127);
    os_unfair_lock_lock(v15[2]);
    uint64_t v101 = v126[3];
    uint64_t v24 = v126[4];
    uint64_t v21 = (uint8_t *)__swift_project_boxed_opaque_existential_1(v126, v101);
    os_signpost_id_t v102 = (void *)CPAppPolicy.ContactHandles.dictionaryRepresentation.getter(v93, v26, v9);
    v131[3] = (id)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
    v131[0] = v102;
    (*(void (**)(id *, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v131, v93, v26, v101, v24);
    outlined destroy of UUID?((uint64_t)v131, (uint64_t *)&demangling cache variable for type metadata for Any?);
    os_unfair_lock_unlock(v15[2]);
    swift_release();
    swift_bridgeObjectRelease_n();
    if (v86) {
      continue;
    }
    break;
  }
LABEL_65:
  BOOL v66 = __OFADD__(v87++, 1);
  if (v66) {
    goto LABEL_116;
  }
  if (v87 >= (uint64_t)v125)
  {

    goto LABEL_112;
  }
  unint64_t v90 = *(void *)(v124 + 8 * v87);
  unint64_t v63 = (unint64_t)v116;
  if (v90)
  {
LABEL_75:
    unint64_t v86 = (v90 - 1) & v90;
    unint64_t v89 = __clz(__rbit64(v90)) + (v87 << 6);
    goto LABEL_76;
  }
  uint64_t v91 = v87 + 1;
  if (v87 + 1 >= (uint64_t)v125) {
    goto LABEL_111;
  }
  unint64_t v90 = *(void *)(v124 + 8 * v91);
  if (v90) {
    goto LABEL_74;
  }
  uint64_t v91 = v87 + 2;
  if (v87 + 2 >= (uint64_t)v125) {
    goto LABEL_111;
  }
  unint64_t v90 = *(void *)(v124 + 8 * v91);
  if (v90) {
    goto LABEL_74;
  }
  uint64_t v91 = v87 + 3;
  if (v87 + 3 >= (uint64_t)v125)
  {
LABEL_111:

LABEL_112:
    swift_release();
    swift_unknownObjectRelease();
LABEL_113:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v90 = *(void *)(v124 + 8 * v91);
  if (v90)
  {
LABEL_74:
    uint64_t v87 = v91;
    goto LABEL_75;
  }
  while (1)
  {
    uint64_t v87 = v91 + 1;
    if (__OFADD__(v91, 1)) {
      break;
    }
    if (v87 >= (uint64_t)v125) {
      goto LABEL_111;
    }
    unint64_t v90 = *(void *)(v124 + 8 * v87);
    ++v91;
    if (v90) {
      goto LABEL_75;
    }
  }
LABEL_118:
  __break(1u);
LABEL_119:
  swift_once();
LABEL_54:
  uint64_t v70 = type metadata accessor for Logger();
  __swift_project_value_buffer(v70, (uint64_t)static Log.default);
  unint64_t v71 = v21;
  id v72 = (id)v24;
  unint64_t v16 = v71;
  id v73 = (id)v24;
  uint64_t v43 = Logger.logObject.getter();
  int v74 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, (os_log_type_t)v74))
  {
    uint64_t v39 = (char *)v9;
    id v13 = (char *)v15;
    LODWORD(v124) = v74;
    uint64_t isUniquelyReferenced_nonNull_native = swift_slowAlloc();
    unint64_t v123 = (void *)swift_slowAlloc();
    v131[0] = v123;
    *(_DWORD *)uint64_t isUniquelyReferenced_nonNull_native = 136315394;
    id v75 = [(uint8_t *)v16 UUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v25 = (id)v127;
    (*(void (**)(os_unfair_lock_t *, void, uint64_t, unint64_t))(v26 + 56))(v15, 0, 1, v127);
    uint64_t v9 = (uint64_t)v125;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v125, &demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, id))(v26 + 48))(v9, 1, v25) == 1)
    {
      unint64_t v76 = 0xE300000000000000;
      uint64_t v77 = 7104878;
    }
    else
    {
LABEL_105:
      (*(void (**)(char *, uint64_t, id))(v26 + 32))(v39, v9, v25);
      (*(void (**)(void *, char *, id))(v26 + 16))(v126, v39, v25);
      uint64_t v77 = String.init<A>(reflecting:)();
      uint64_t v109 = v39;
      unint64_t v76 = v110;
      (*(void (**)(char *, id))(v26 + 8))(v109, v25);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
    uint64_t v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v76, (uint64_t *)v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(isUniquelyReferenced_nonNull_native + 12) = 2080;
    uint64_t v132 = v24;
    id v111 = (id)v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v112 = String.init<A>(reflecting:)();
    uint64_t v132 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, (uint64_t *)v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v43, (os_log_type_t)v124, "[CPAppPolicyManager] Failed to fetch Contacts for converation with UUID %s, error: %s", (uint8_t *)isUniquelyReferenced_nonNull_native, 0x16u);
    uint64_t v114 = v123;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v114, -1, -1);
    MEMORY[0x1B3EA39E0](isUniquelyReferenced_nonNull_native, -1, -1);
  }
  else
  {
  }
}

uint64_t CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)&v0[OBJC_IVAR___CPApplicationPolicyManager_queue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory();
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_37_0;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = MEMORY[0x1E4FBC860];
  _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(char *a1)
{
  void (*v8)(long long *__return_ptr, void, unint64_t, unint64_t, void, uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  Class isa;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  Class v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  objc_class *v38;
  char *v39;
  void (**v40)(uint64_t, unint64_t);
  char *v41;
  id v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  Class v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(long long *, unint64_t, unint64_t, uint64_t, uint64_t);
  id v72;
  id v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  id v82;
  objc_super v83;
  _OWORD v84[2];
  long long v85;
  uint64_t v86;
  uint64_t v87;

  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  id v75 = *(void *)(v2 - 8);
  unint64_t v76 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)&a1[OBJC_IVAR___CPApplicationPolicyManager_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
  uint64_t v6 = *(void *)&a1[OBJC_IVAR___CPApplicationPolicyManager_storage + 24];
  uint64_t v7 = *(void *)&a1[OBJC_IVAR___CPApplicationPolicyManager_storage + 32];
  uint64_t v77 = &a1[OBJC_IVAR___CPApplicationPolicyManager_storage];
  __swift_project_boxed_opaque_existential_1(&a1[OBJC_IVAR___CPApplicationPolicyManager_storage], v6);
  uint64_t v8 = *(void (**)(long long *__return_ptr, void, unint64_t, unint64_t, void, uint64_t, uint64_t))(v7 + 40);
  uint64_t v78 = (unint64_t)"CPAppPolicy.AutoSharePlayToggle";
  v8(&v85, MEMORY[0x1E4F277C0], 0xD000000000000026, 0x80000001B115E4E0, MEMORY[0x1E4F277C0], v6, v7);
  os_log_type_t v79 = v5;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 16));
  uint64_t v10 = *((void *)&v85 + 1);
  uint64_t v9 = v85;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  outlined copy of Data?(v9, v10);
  outlined copy of Data?(v9, v10);
  BOOL v80 = v12;
  id v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.info.getter();
  char v15 = os_log_type_enabled(v13, v14);
  unint64_t v16 = v10 >> 60;
  unint64_t v81 = v10;
  if (v15)
  {
    char v17 = 7104878;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(void *)&v84[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    int v74 = v10 >> 60;
    if (v10 >> 60 == 15
      || (Class isa = Data._bridgeToObjectiveC()().super.isa,
          uint64_t v21 = [(objc_class *)isa tu_URLSafeBase64EncodedString],
          isa,
          !v21))
    {
      uint64_t v26 = 0xE300000000000000;
    }
    else
    {
      os_log_type_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      *(void *)&uint64_t v85 = v22;
      *((void *)&v85 + 1) = v24;
      char v17 = String.init<A>(reflecting:)();
      uint64_t v26 = v25;
    }
    *(void *)&uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v26, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = v81;
    outlined consume of Data?(v9, v81);
    outlined consume of Data?(v9, v10);
    _os_log_impl(&dword_1B0DF7000, v13, v14, "[CPAppPolicyManager] Read CPAppPolicy.ContactsChangeHistoryToken: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);

    unint64_t v16 = v74;
  }
  else
  {
    outlined consume of Data?(v9, v10);
    outlined consume of Data?(v9, v10);
  }
  uint64_t v27 = *(void **)&a1[OBJC_IVAR___CPApplicationPolicyManager_contactStore];
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B8E0]), sel_init);
  if (v16 <= 0xE)
  {
    outlined copy of Data._Representation(v9, v10);
    int64_t v29 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(v9, v10);
  }
  else
  {
    int64_t v29 = 0;
  }
  objc_msgSend(v28, sel_setStartingToken_, v29);

  *(void *)&uint64_t v85 = 0;
  uint64_t v30 = objc_msgSend(v27, sel_tu_enumeratorForChangeHistoryFetchRequest_error_, v28, &v85);
  if (v30)
  {
    uint64_t v31 = v30;
    id v73 = v28;
    int v74 = v9;
    uint64_t v32 = (id)v85;
    unint64_t v33 = objc_msgSend(v31, sel_currentHistoryToken);
    unint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    int64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = a1;
    uint64_t v38 = (objc_class *)type metadata accessor for ChangeHistoryProcessor();
    uint64_t v39 = (char *)objc_allocWithZone(v38);
    uint64_t v40 = (void (**)(uint64_t, unint64_t))&v39[OBJC_IVAR____TtC14CopresenceCore22ChangeHistoryProcessor_onContactDeleted];
    uint64_t *v40 = partial apply for closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory();
    v40[1] = (void (*)(uint64_t, unint64_t))v37;
    v83.receiver = v39;
    v83.super_class = v38;
    uint64_t v41 = a1;
    uint64_t v42 = objc_msgSendSuper2(&v83, sel_init);
    id v72 = v31;
    uint64_t v43 = objc_msgSend(v31, sel_value);
    NSEnumerator.makeIterator()();

    NSFastEnumerationIterator.next()();
    while (v86)
    {
      outlined init with take of Any(&v85, v84);
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for CNChangeHistoryEvent);
      if (swift_dynamicCast())
      {
        uint64_t v44 = v82;
        objc_msgSend(v82, sel_acceptEventVisitor_, v42);
      }
      NSFastEnumerationIterator.next()();
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v4, v76);
    outlined copy of Data._Representation(v34, v36);
    outlined copy of Data._Representation(v34, v36);
    id v45 = Logger.logObject.getter();
    uint64_t v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(void *)&v84[0] = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      unint64_t v49 = Data._bridgeToObjectiveC()().super.isa;
      char v50 = [(objc_class *)v49 tu_URLSafeBase64EncodedString];

      if (v50)
      {
        id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v53 = v52;

        *(void *)&uint64_t v85 = v51;
        *((void *)&v85 + 1) = v53;
        char v54 = String.init<A>(reflecting:)();
        BOOL v56 = v55;
      }
      else
      {
        char v54 = 7104878;
        BOOL v56 = 0xE300000000000000;
      }
      *(void *)&uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, (uint64_t *)v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v34, v36);
      outlined consume of Data._Representation(v34, v36);
      _os_log_impl(&dword_1B0DF7000, v45, v46, "[CPAppPolicyManager] Writing CPAppPolicy.ContactsChangeHistoryToken:%s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v48, -1, -1);
      MEMORY[0x1B3EA39E0](v47, -1, -1);
    }
    else
    {
      outlined consume of Data._Representation(v34, v36);
      outlined consume of Data._Representation(v34, v36);
    }

    char v68 = v79;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v79 + 16));
    id v69 = *((void *)v77 + 3);
    uint64_t v70 = *((void *)v77 + 4);
    __swift_project_boxed_opaque_existential_1(v77, v69);
    unint64_t v86 = MEMORY[0x1E4F277C0];
    *(void *)&uint64_t v85 = v34;
    *((void *)&v85 + 1) = v36;
    unint64_t v71 = *(void (**)(long long *, unint64_t, unint64_t, uint64_t, uint64_t))(v70 + 8);
    outlined copy of Data._Representation(v34, v36);
    v71(&v85, 0xD000000000000026, v78 | 0x8000000000000000, v69, v70);
    outlined destroy of UUID?((uint64_t)&v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v68 + 16));
    outlined consume of Data?(v74, v81);

    outlined consume of Data._Representation(v34, v36);
  }
  else
  {
    uint64_t v57 = (id)v85;
    char v58 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data?(v9, v10);

    unint64_t v59 = v58;
    char v60 = v58;
    uint64_t v61 = Logger.logObject.getter();
    uint64_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      unint64_t v63 = (uint8_t *)swift_slowAlloc();
      unint64_t v64 = swift_slowAlloc();
      *(void *)&uint64_t v85 = v64;
      *(_DWORD *)unint64_t v63 = 136315138;
      *(void *)&v84[0] = v58;
      uint64_t v65 = v58;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      BOOL v66 = String.init<A>(reflecting:)();
      *(void *)&v84[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v61, v62, "[CPAppPolicyManager] Failed to fetch contacts error: %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v64, -1, -1);
      MEMORY[0x1B3EA39E0](v63, -1, -1);
    }
    else
    {
    }
  }
}

void closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "[CPAppPolicyManager] Received deleted contactIdentifier: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = *(void *)(a3 + OBJC_IVAR___CPApplicationPolicyManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  closure #1 in closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(a3, a1, a2);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
}

uint64_t closure #1 in closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  BOOL v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  void v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  void v65[4];
  uint64_t v66[3];
  char v67;
  uint64_t v68;
  uint64_t v69;

  uint64_t v4 = v3;
  uint64_t v7 = (void *)(a1 + OBJC_IVAR___CPApplicationPolicyManager_storage);
  uint64_t v8 = v7[3];
  uint64_t v9 = v7[4];
  char v60 = v7;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  uint64_t v11 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 40);
  uint64_t v53 = a2;
  char v54 = a3;
  unint64_t v59 = v10;
  v11(v66, v10, a2, a3, v10, v8, v9);
  uint64_t result = v66[0];
  if (v66[0])
  {
    uint64_t result = specialized CPAppPolicy.ContactHandles.init(dictionary:)(v66[0]);
    if (v13)
    {
      char v15 = result;
      unint64_t v16 = v13;
      char v17 = v14;
      if (one-time initialization token for default != -1) {
LABEL_32:
      }
        swift_once();
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v19 = Logger.logObject.getter();
      uint64_t v20 = static os_log_type_t.default.getter();
      uint64_t v21 = os_log_type_enabled(v19, v20);
      char v58 = v17;
      if (v21)
      {
        os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
        id v69 = swift_slowAlloc();
        v66[0] = v69;
        *(_DWORD *)os_log_type_t v22 = 136315138;
        unint64_t v64 = v22 + 4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        Class v23 = CPAppPolicy.ContactHandles.description.getter(v15, v16, v17);
        id v25 = v24;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v19, v20, "[CPAppPolicyManager] Contact deleted, removing %s and associated handles from AuthorizedBundles", v22, 0xCu);
        uint64_t v26 = v69;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v26, -1, -1);
        MEMORY[0x1B3EA39E0](v22, -1, -1);
        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      char v15 = v60[3];
      uint64_t v27 = v60[4];
      __swift_project_boxed_opaque_existential_1(v60, v15);
      id v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v59, v59, v15, v27);
      int64_t v29 = specialized Dictionary.compactMapValues<A>(_:)(v28);
      id v69 = v4;
      swift_bridgeObjectRelease();
      uint64_t v30 = 0;
      uint64_t v31 = *(void *)(v29 + 64);
      Class v55 = v29 + 64;
      uint64_t v32 = 1 << *(unsigned char *)(v29 + 32);
      unint64_t v33 = -1;
      if (v32 < 64) {
        unint64_t v33 = ~(-1 << v32);
      }
      unint64_t v34 = v33 & v31;
      BOOL v56 = (unint64_t)(v32 + 63) >> 6;
      uint64_t v57 = v29;
      while (1)
      {
        if (v34)
        {
          unint64_t v63 = (v34 - 1) & v34;
          unint64_t v64 = v30;
          int64_t v35 = __clz(__rbit64(v34)) | ((void)v30 << 6);
          uint64_t v4 = v69;
          unint64_t v36 = v58;
        }
        else
        {
          uint64_t v46 = __OFADD__(v30, 1);
          uint64_t v47 = (int64_t)(v30 + 1);
          uint64_t v4 = v69;
          if (v46)
          {
            __break(1u);
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
          unint64_t v36 = v58;
          if (v47 >= v56) {
            goto LABEL_28;
          }
          uint64_t v48 = *(void *)(v55 + 8 * v47);
          if (!v48)
          {
            unint64_t v49 = v47 + 1;
            if (v47 + 1 >= v56) {
              goto LABEL_28;
            }
            uint64_t v48 = *(void *)(v55 + 8 * v49);
            if (!v48)
            {
              unint64_t v49 = v47 + 2;
              if (v47 + 2 >= v56) {
                goto LABEL_28;
              }
              uint64_t v48 = *(void *)(v55 + 8 * v49);
              if (!v48)
              {
                unint64_t v49 = v47 + 3;
                if (v47 + 3 >= v56)
                {
LABEL_28:
                  swift_bridgeObjectRelease();
                  swift_release();
                  char v50 = v60[3];
                  id v51 = v60[4];
                  __swift_project_boxed_opaque_existential_1(v60, v50);
                  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 24))(v53, v54, v50, v51);
                }
                uint64_t v48 = *(void *)(v55 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    uint64_t v47 = v49 + 1;
                    if (__OFADD__(v49, 1)) {
                      goto LABEL_31;
                    }
                    if (v47 >= v56) {
                      goto LABEL_28;
                    }
                    uint64_t v48 = *(void *)(v55 + 8 * v47);
                    ++v49;
                    if (v48) {
                      goto LABEL_23;
                    }
                  }
                }
              }
            }
            uint64_t v47 = v49;
          }
LABEL_23:
          unint64_t v63 = (v48 - 1) & v48;
          unint64_t v64 = (uint8_t *)v47;
          int64_t v35 = __clz(__rbit64(v48)) + (v47 << 6);
        }
        int64_t v37 = *(void *)(v57 + 56);
        uint64_t v38 = (uint64_t *)(*(void *)(v57 + 48) + 16 * v35);
        char v15 = v38[1];
        uint64_t v62 = *v38;
        uint64_t v39 = (char *)(v37 + 40 * v35);
        uint64_t v40 = *v39;
        unint64_t v16 = (void *)*((void *)v39 + 1);
        uint64_t v41 = *((void *)v39 + 2);
        uint64_t v61 = v39[24];
        v52[2] = MEMORY[0x1F4188790](v36);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v42 = swift_bridgeObjectRetain();
        uint64_t v43 = specialized _NativeDictionary.filter(_:)(v42, (uint64_t)partial apply for closure #1 in closure #1 in closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory(), (uint64_t)v52, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
        id v69 = v4;
        swift_bridgeObjectRelease();
        char v17 = v60[3];
        uint64_t v44 = v60[4];
        __swift_project_boxed_opaque_existential_1(v60, v17);
        LOBYTE(v66[0]) = v40;
        v66[1] = (uint64_t)v16;
        v66[2] = v41;
        uint64_t v67 = v61;
        char v68 = v43;
        swift_retain();
        id v45 = CPAppPolicy.AuthorizedBundles.dictionaryRepresentation.getter();
        swift_release();
        swift_bridgeObjectRelease();
        v65[3] = v59;
        v65[0] = v45;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8))(v65, v62, v15, v17, v44);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
        swift_release();
        unint64_t v34 = v63;
        uint64_t v30 = v64;
      }
    }
  }
  return result;
}

id ChangeHistoryProcessor.__allocating_init(onContactDeleted:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  uint64_t v6 = &v5[OBJC_IVAR____TtC14CopresenceCore22ChangeHistoryProcessor_onContactDeleted];
  *(void *)uint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

Swift::Bool __swiftcall CPApplicationPolicyManager.isAuthorized(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA0))())
  {
    uint64_t v5 = (*(uint64_t (**)(void))((*v4 & *v1) + 0x98))();
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
      if (v7)
      {
        objc_super v8 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
        id v9 = v8;
      }
      else
      {
        objc_super v8 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      objc_super v8 = 0;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v11.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    if (v8)
    {
      id v12 = v8;
      char v10 = static NSObject.== infix(_:_:)();
    }
    else
    {
      char v10 = 0;
    }
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t CPApplicationPolicyManager.addDelegate(_:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xC0))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 160))(a1, a2);
  return swift_release();
}

uint64_t CPApplicationPolicyManager.shouldAutoLaunchApp(for:on:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xB8))() & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_30;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    uint64_t v27 = "[CPAppPolicyManager] Not allowing auto-launch for unsupported platform";
LABEL_23:
    _os_log_impl(&dword_1B0DF7000, v24, v25, v27, v26, 2u);
    uint64_t v38 = v26;
LABEL_29:
    MEMORY[0x1B3EA39E0](v38, -1, -1);
LABEL_30:

    return 0;
  }
  id v7 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v7)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.default);
    id v29 = a1;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v88[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v91 = (uint64_t)v29;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      id v33 = v29;
      uint64_t v34 = String.init<A>(reflecting:)();
      uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      unint64_t v36 = "[CPAppPolicyManager] Unable to auto-launch app for activity with missing bundle identifier: %s";
LABEL_28:
      _os_log_impl(&dword_1B0DF7000, v24, v30, v36, v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v32, -1, -1);
      uint64_t v38 = v31;
      goto LABEL_29;
    }
LABEL_32:

    return 0;
  }
  objc_super v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  if (((*(uint64_t (**)(void))((*v6 & *v3) + 0xA0))() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Log.default);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_30;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    uint64_t v27 = "[CPAppPolicyManager] Not allowing auto-launch because auto-SharePlay is disabled";
    goto LABEL_23;
  }
  if ((specialized CPApplicationPolicyManager.doesActivityTypeSupportAutoLaunch(activity:)(a1) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Log.default);
    id v29 = a1;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v88[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v91 = (uint64_t)v29;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      id v40 = v29;
      uint64_t v41 = String.init<A>(reflecting:)();
      uint64_t v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      unint64_t v36 = "[CPAppPolicyManager] Auto-launch not supported for activity: %s";
      goto LABEL_28;
    }
    goto LABEL_32;
  }
  uint64_t v87 = v9;
  id v12 = objc_msgSend(a2, sel_mergedRemoteMembers);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v13, (SEL *)&selRef_handle);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v91 = v15;
  id v16 = objc_msgSend(a2, sel_lightweightMembers);
  uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.contains(where:)(v17);
  LOBYTE(v16) = v18;
  swift_bridgeObjectRelease();
  if (v16)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.default);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl(&dword_1B0DF7000, v20, v21, "[CPAppPolicyManager] Conversation contains non-validated lightweight member. Not allowing BG launch", v22, 2u);
      MEMORY[0x1B3EA39E0](v22, -1, -1);
    }

    goto LABEL_54;
  }
  swift_bridgeObjectRetain();
  id v44 = objc_msgSend(a2, sel_lightweightMembers);
  uint64_t v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v45, (SEL *)&selRef_handle);
  uint64_t v46 = v15;
  unint64_t v48 = v47;
  swift_bridgeObjectRelease();
  v88[0] = v46;
  specialized Array.append<A>(contentsOf:)(v48);
  uint64_t v90 = v46;
  id v49 = objc_msgSend(a2, sel_localMember);
  if (v49)
  {
    char v50 = v49;
    id v51 = objc_msgSend(v49, sel_handle);
    MEMORY[0x1B3EA1CF0]();
    if (*(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v90 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v52 = objc_msgSend(a1, sel_originator, v46);
  if (v52)
  {
    id v53 = v52;
    id v54 = v52;
    unint64_t v55 = swift_bridgeObjectRetain();
    unsigned __int8 v56 = specialized Sequence.contains(where:)(v55, (uint64_t)v54);
    swift_bridgeObjectRelease();

    if ((v56 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v67 = type metadata accessor for Logger();
      __swift_project_value_buffer(v67, (uint64_t)static Log.default);
      id v68 = v54;
      id v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        id v72 = (void *)swift_slowAlloc();
        uint64_t v73 = swift_slowAlloc();
        uint64_t v89 = v73;
        *(_DWORD *)uint64_t v71 = 138412546;
        v88[0] = (uint64_t)v68;
        id v74 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v72 = v53;

        *(_WORD *)(v71 + 12) = 2080;
        swift_beginAccess();
        uint64_t v75 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
        uint64_t v76 = swift_bridgeObjectRetain();
        uint64_t v77 = MEMORY[0x1B3EA1D20](v76, v75);
        unint64_t v79 = v78;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        BOOL v80 = "[CPAppPolicyManager] Activity originator %@ can't be found in the conversation's members %s. Not allowing BG launch";
LABEL_52:
        _os_log_impl(&dword_1B0DF7000, v69, v70, v80, (uint8_t *)v71, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v72, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v73, -1, -1);
        MEMORY[0x1B3EA39E0](v71, -1, -1);

        swift_bridgeObjectRelease();
LABEL_54:
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_53:

      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
  }
  id v57 = objc_msgSend(a1, sel_trustedFromHandle);
  if (v57)
  {
    id v58 = v57;
    id v59 = v57;
    unint64_t v60 = swift_bridgeObjectRetain();
    unsigned __int8 v61 = specialized Sequence.contains(where:)(v60, (uint64_t)v59);
    swift_bridgeObjectRelease();

    if (v61)
    {

      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    __swift_project_value_buffer(v81, (uint64_t)static Log.default);
    id v68 = v59;
    id v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      id v72 = (void *)swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      uint64_t v89 = v73;
      *(_DWORD *)uint64_t v71 = 138412546;
      v88[0] = (uint64_t)v68;
      id v74 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v72 = v58;

      *(_WORD *)(v71 + 12) = 2080;
      swift_beginAccess();
      uint64_t v82 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      uint64_t v83 = swift_bridgeObjectRetain();
      uint64_t v84 = MEMORY[0x1B3EA1D20](v83, v82);
      unint64_t v86 = v85;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v86, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      BOOL v80 = "[CPAppPolicyManager] Activity's trusted fromHandle %@ can't be found in the conversation's members %s. Not a"
            "llowing BG launch";
      goto LABEL_52;
    }
    goto LABEL_53;
  }
LABEL_43:
  id v62 = objc_msgSend(a2, sel_lightweightMembers);
  uint64_t v63 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.compactMap<A>(_:)(v63, (SEL *)&selRef_lightweightPrimary);
  unint64_t v65 = v64;
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)(v65);
  uint64_t v66 = *(void *)((char *)v3 + OBJC_IVAR___CPApplicationPolicyManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v66 + 16));
  specialized closure #7 in CPApplicationPolicyManager.shouldAutoLaunchApp(for:on:)(v3, v87, v11, a1, v88);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return LOBYTE(v88[0]);
}

void specialized closure #7 in CPApplicationPolicyManager.shouldAutoLaunchApp(for:on:)(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X4>, unsigned char *a5@<X8>)
{
  (*(void (**)(void *__return_ptr, uint64_t, unint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x110))(v64, a2, a3);
  outlined init with take of CPAppPolicy.AuthorizedBundles?((uint64_t)v64, (uint64_t)&v65);
  if (!v66)
  {
    *a5 = 0;
    return;
  }
  *(_OWORD *)id v69 = v65;
  *(void *)&v69[16] = v66;
  uint64_t v11 = v68;
  if (v67)
  {
    swift_beginAccess();
    unint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v19 = specialized Set.init<A>(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v20 = specialized CPApplicationPolicyManager.hashedHandles(from:)(v19);
    if (v5)
    {

      swift_bridgeObjectRelease();
      long long v70 = *(_OWORD *)&v69[8];
      outlined release of String((uint64_t)&v70);
      uint64_t v71 = v11;
      outlined release of [String : Date]((uint64_t)&v71);
    }
    else
    {
      uint64_t v26 = v20;
      uint64_t v27 = swift_bridgeObjectRelease();
      if (*(void *)(v26 + 16))
      {
        *(void *)&long long v70 = v11;
        MEMORY[0x1F4188790](v27);
        v53[2] = a1;
        outlined retain of [UInt64 : AttachmentLedger_AttachmentEncryption].Values((uint64_t)&v70);
        uint64_t v28 = specialized _NativeDictionary.filter(_:)(v11, (uint64_t)closure #1 in CPApplicationPolicyManager.expiredHandles(from:)partial apply, (uint64_t)v53, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
        outlined release of [String : Date]((uint64_t)&v70);
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Log.default);
        swift_retain_n();
        id v72 = (void *)v30;
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        int v58 = v32;
        BOOL v33 = os_log_type_enabled(v31, v32);
        id v59 = a5;
        if (v33)
        {
          os_log_t v56 = v31;
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = swift_slowAlloc();
          *(void *)&long long v61 = v55;
          id v54 = v34;
          *(_DWORD *)uint64_t v34 = 136315138;
          v53[4] = v34 + 4;
          type metadata accessor for Date();
          swift_retain();
          uint64_t v35 = Dictionary.description.getter();
          uint64_t v57 = v26;
          uint64_t v36 = v35;
          unint64_t v38 = v37;
          swift_release();
          uint64_t v26 = v57;
          uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, (uint64_t *)&v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          os_log_t v39 = v56;
          id v40 = v54;
          _os_log_impl(&dword_1B0DF7000, v56, (os_log_type_t)v58, "[CPAppPolicyManager] Expired handles: %s", v54, 0xCu);
          uint64_t v41 = v55;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v41, -1, -1);
          MEMORY[0x1B3EA39E0](v40, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        uint64_t v42 = swift_bridgeObjectRetain();
        uint64_t v43 = specialized Set.init<A>(_:)(v42);
        long long v61 = *(_OWORD *)&v69[8];
        outlined release of String((uint64_t)&v61);
        outlined release of [String : Date]((uint64_t)&v70);
        uint64_t v71 = v43;
        specialized Set._subtract<A>(_:)(v28);
        swift_release();
        char v44 = specialized Set.isSubset(of:)(v71, v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = a4;
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        int v48 = v47;
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v49 = swift_slowAlloc();
          id v72 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = 67109378;
          LODWORD(v62) = v44 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v49 + 8) = 2112;
          int v58 = v48;
          id v62 = v45;
          char v50 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v51 = v72;
          *id v72 = v45;

          _os_log_impl(&dword_1B0DF7000, v46, (os_log_type_t)v58, "[CPAppPolicyManager] Application allowed to auto-launch: %{BOOL}d for activity: %@", (uint8_t *)v49, 0x12u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v51, -1, -1);
          MEMORY[0x1B3EA39E0](v49, -1, -1);
        }
        else
        {

          uint64_t v46 = v45;
        }
        id v52 = v59;

        *id v52 = v44 & 1;
        return;
      }
      long long v70 = *(_OWORD *)&v69[8];
      outlined release of String((uint64_t)&v70);
      uint64_t v71 = v11;
      outlined release of [String : Date]((uint64_t)&v71);
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v13, v22)) {
      goto LABEL_15;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    id v62 = v23;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TUHandle]);
    uint64_t v24 = String.init<A>(reflecting:)();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v13, v22, "[CPAppPolicyManager] Error getting normalized handles from handles: %s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v23;
LABEL_14:
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
LABEL_15:

    *a5 = 0;
    return;
  }
  long long v63 = *(_OWORD *)&v69[8];
  outlined release of String((uint64_t)&v63);
  *(void *)&long long v61 = v11;
  outlined release of [String : Date]((uint64_t)&v61);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(void *)&long long v70 = v16;
    id v72 = v5;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "[CPAppPolicyManager] Application %s is not authorized", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v16;
    goto LABEL_14;
  }

  swift_bridgeObjectRelease_n();
  *a5 = 0;
}

uint64_t specialized Set.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v31 = a2 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  uint64_t v32 = a1 + 56;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v12)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (i << 6);
      int64_t v12 = i;
      if (!*(void *)(v4 + 16)) {
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    int64_t v13 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v13 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v13);
    int64_t v12 = i + 1;
    if (!v14)
    {
      int64_t v12 = i + 2;
      if (i + 2 >= v30) {
        goto LABEL_41;
      }
      unint64_t v14 = *(void *)(v31 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = i + 3;
        if (i + 3 >= v30) {
          goto LABEL_41;
        }
        unint64_t v14 = *(void *)(v31 + 8 * v12);
        if (!v14) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    if (!*(void *)(v4 + 16))
    {
LABEL_40:
      uint64_t v2 = 0;
      goto LABEL_42;
    }
LABEL_25:
    uint64_t v16 = v3;
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v20 = Hasher._finalize()();
    uint64_t v21 = v4;
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = v20 & ~v22;
    if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v24 = *(void *)(v21 + 48);
    unint64_t v25 = (void *)(v24 + 16 * v23);
    BOOL v26 = *v25 == v19 && v25[1] == v18;
    if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v27 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v27;
        if (((*(void *)(v32 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v28 = (void *)(v24 + 16 * v23);
        BOOL v29 = *v28 == v19 && v28[1] == v18;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
LABEL_42:
      outlined consume of [String : ()].Iterator._Variant();
      return v2;
    }
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v16;
    uint64_t v4 = v21;
  }
  int64_t v15 = i + 4;
  if (i + 4 >= v30)
  {
LABEL_41:
    uint64_t v2 = 1;
    goto LABEL_42;
  }
  unint64_t v14 = *(void *)(v31 + 8 * v15);
  if (v14)
  {
    int64_t v12 = i + 4;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v30) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v31 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_24;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

void CPApplicationPolicyManager.updateAllowedHandles(for:)(void *a1)
{
  id v3 = objc_msgSend(a1, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  uint64_t v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = v1;
  id v6 = a1;
  specialized Sequence.forEach(_:)(v4, v5, (uint64_t)v6);
  swift_bridgeObjectRelease();
}

void CPApplicationPolicyManager.updateAllowedHandles(for:on:)(void *a1, void *a2)
{
  id v3 = v2;
  id v6 = (void *)MEMORY[0x1E4FBC8C8];
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xB8))() & 1) == 0)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.default);
    oslog = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(oslog, v17)) {
      goto LABEL_24;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    uint64_t v19 = "[CPAppPolicyManager] Ignoring update to allowed handles for unsupported platform";
    goto LABEL_23;
  }
  id v7 = objc_msgSend(a1, sel_activity);
  id v8 = objc_msgSend(v7, sel_bundleIdentifier);

  if (!v8)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.default);
    oslog = a1;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v49 = v24;
      *(_DWORD *)unint64_t v23 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
      unint64_t v25 = oslog;
      uint64_t v26 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v21, v22, "[CPAppPolicyManager] Unable to update allowed handles for activity with missing bundle identifier: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v24, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);

      return;
    }

    goto LABEL_24;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  if (((*(uint64_t (**)(void))((*v6 & *v3) + 0xA0))() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.default);
    oslog = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(oslog, v17)) {
      goto LABEL_24;
    }
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    uint64_t v19 = "[CPAppPolicyManager] Ignoring update to allowed handles since auto-SharePlay is disabled";
    goto LABEL_23;
  }
  if (objc_msgSend(a1, sel_isPermittedToJoin))
  {
    id v12 = objc_msgSend(a2, sel_mergedRemoteMembers);
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Sequence.compactMap<A>(_:)(v13, (SEL *)&selRef_handle);
    swift_bridgeObjectRelease();
    unint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = specialized Set.init<A>(_:)(v14);
    swift_bridgeObjectRelease();
    int64_t v30 = (void (*)(char *, uint64_t, uint64_t))specialized CPApplicationPolicyManager.hashedHandles(from:)(v15);
    swift_bridgeObjectRelease();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.default);
    id v32 = a1;
    swift_bridgeObjectRetain();
    id v33 = v32;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      os_log_type_t type = v35;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v49 = v46;
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
      id v37 = v33;
      uint64_t v38 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v40 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      uint64_t v41 = swift_bridgeObjectRetain();
      uint64_t v42 = MEMORY[0x1B3EA1D20](v41, v40);
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v34, type, "[CPAppPolicyManager] Updating allowed handles for activity: %s with handles: %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v46, -1, -1);
      MEMORY[0x1B3EA39E0](v36, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    CPApplicationPolicyManager.fetchAndStoreContactIdentifiers(for:)(a2);
    uint64_t v45 = *(void *)((char *)v3 + OBJC_IVAR___CPApplicationPolicyManager_lock);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v45 + 16));
    CPApplicationPolicyManager.updateAllowedHandles(_:for:)(v30, v9, v11);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 16));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  oslog = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    uint64_t v19 = "[CPAppPolicyManager] Ignoring update to allowed handles since activity session is not permitted to be joined.";
LABEL_23:
    _os_log_impl(&dword_1B0DF7000, oslog, v17, v19, v18, 2u);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
LABEL_24:
}

Swift::Void __swiftcall CPApplicationPolicyManager.setAuthorization(_:for:)(Swift::Bool _, Swift::String a2)
{
  id v3 = v2;
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v29 = v11;
    *(_DWORD *)uint64_t v10 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 2080;
    swift_bridgeObjectRetain();
    v28[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v8, v9, "[CPAppPolicyManager] Setting authorization: %{BOOL}d for bundleID: %s", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v11, -1, -1);
    MEMORY[0x1B3EA39E0](v10, -1, -1);
  }
  else
  {

    uint64_t v12 = swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xA0))(v12))
  {
    uint64_t v14 = *(void *)((char *)v3 + OBJC_IVAR___CPApplicationPolicyManager_lock);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
    uint64_t v15 = countAndFlagsBits;
    (*(void (**)(void *__return_ptr, uint64_t, void *))((*v13 & *v3) + 0x110))(v27, countAndFlagsBits, object);
    char v16 = v27[0];
    uint64_t v17 = v27[1];
    uint64_t v18 = (void *)v27[2];
    uint64_t v19 = v27[4];
    outlined init with take of CPAppPolicy.AuthorizedBundles?((uint64_t)v27, (uint64_t)v28);
    if (v28[2])
    {
      uint64_t v15 = v17;
      object = v18;
    }
    else
    {
      swift_bridgeObjectRetain();
      char v16 = 2;
      uint64_t v19 = MEMORY[0x1E4FBC868];
    }
    LOBYTE(v29) = v16;
    uint64_t v30 = v15;
    uint64_t v31 = object;
    Swift::Bool v32 = _;
    uint64_t v33 = v19;
    CPApplicationPolicyManager.persist(_:)((uint64_t)&v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 16));
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = countAndFlagsBits;
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v28[0] = v24;
      *(_DWORD *)unint64_t v23 = 136315138;
      uint64_t v29 = v22;
      uint64_t v30 = (uint64_t)object;
      swift_bridgeObjectRetain();
      uint64_t v25 = String.init<A>(reflecting:)();
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v20, v21, "[CPAppPolicyManager] Not setting authorization for %s as auto-SharePlay is disabled", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v24, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

Swift::Void __swiftcall CPApplicationPolicyManager.removeAuthorization(for:)(Swift::OpaquePointer a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADBD0]), sel_init);
  unsigned int v4 = objc_msgSend(v3, sel_expanseEnabled);

  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_lock);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
    uint64_t v6 = *((void *)a1._rawValue + 2);
    if (v6)
    {
      uint64_t v18 = v5;
      uint64_t v7 = (void *)(v1 + OBJC_IVAR___CPApplicationPolicyManager_storage);
      swift_bridgeObjectRetain();
      id v8 = (uint64_t *)((char *)a1._rawValue + 40);
      do
      {
        uint64_t v9 = *(v8 - 1);
        uint64_t v10 = *v8;
        uint64_t v11 = v7[3];
        uint64_t v12 = v7[4];
        __swift_project_boxed_opaque_existential_1(v7, v11);
        uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24);
        swift_bridgeObjectRetain();
        v13(v9, v10, v11, v12);
        swift_bridgeObjectRelease();
        v8 += 2;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      uint64_t v5 = v18;
    }
    uint64_t v14 = *(os_unfair_lock_s **)(v5 + 16);
    os_unfair_lock_unlock(v14);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.default);
    oslog = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B0DF7000, oslog, v16, "[CPAppPolicyManager] removeAuthorization called with ff disabled", v17, 2u);
      MEMORY[0x1B3EA39E0](v17, -1, -1);
    }
  }
}

Swift::Void __swiftcall CPApplicationPolicyManager.handleApplicationUninstalledNotification(_:)(NSNotification a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  uint64_t v6 = a1.super.isa;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v22 = v5;
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v23[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)&long long v24 = v6;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSNotification);
    uint64_t v11 = v6;
    uint64_t v12 = String.init<A>(reflecting:)();
    *(void *)&long long v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "[CPAppPolicyManager] handleApplicationUninstalledNotification %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  id v14 = [(objc_class *)v6 userInfo];
  if (!v14)
  {
    long long v24 = 0u;
    long long v25 = 0u;
LABEL_15:
    outlined destroy of UUID?((uint64_t)&v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  uint64_t v15 = v14;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v16 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v18 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v24);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v23);
  if (!*((void *)&v25 + 1)) {
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (swift_dynamicCast())
  {
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x180))(v23[0]);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_16:
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v21 = 0;
    _os_log_impl(&dword_1B0DF7000, v19, v20, "[CPAppPolicyManager] could not get list of bundleIDs while handing app uninstalled enotification", v21, 2u);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
}

Swift::Void __swiftcall CPApplicationPolicyManager.handleCNContactStoreDidChangeNotification(_:)(NSNotification a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = a1.super.isa;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSNotification);
    os_log_type_t v8 = v3;
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v4, v5, "[CPAppPolicyManager] handleCNContactStoreDidChangeNotification %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()();
}

void CPApplicationPolicyManager.init()()
{
}

Swift::Void __swiftcall CPApplicationPolicyManager.appProtectionsChanged(bundleIDs:)(Swift::OpaquePointer bundleIDs)
{
  void (*v5)(void *__return_ptr, void);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  void (*v23)(void *__return_ptr, void);
  uint64_t v24;
  char *v25;
  long long v26;
  uint64_t v27;
  void v28[3];
  uint64_t v29;
  uint64_t v30;

  uint64_t v2 = *((void *)bundleIDs._rawValue + 2);
  if (!v2) {
    return;
  }
  id v3 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  os_log_type_t v5 = *(void (**)(void *__return_ptr, void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8);
  long long v25 = (char *)bundleIDs._rawValue + 32;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  unint64_t v23 = v5;
  long long v24 = v2;
  while (1)
  {
    os_log_type_t v8 = &v25[16 * v6];
    unint64_t v10 = *(void *)v8;
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v11 = swift_bridgeObjectRetain();
    v5(&v26, v11);
    if (!v27)
    {
      outlined destroy of UUID?((uint64_t)&v26, &demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
LABEL_17:
      (*(void (**)(uint64_t, uint64_t, uint64_t))((*v4 & *v3) + 0x178))(1, v10, v9);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    outlined init with take of BackgroundSessionManagerDataSource(&v26, (uint64_t)v28);
    uint64_t v12 = v29;
    unint64_t v13 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    id v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
    uint64_t v15 = v14;
    uint64_t v16 = v14[2];
    if (!v16)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    unint64_t v17 = v14[4] == v10 && v14[5] == v9;
    if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v16 == 1) {
        goto LABEL_13;
      }
      char v18 = v15[6] == v10 && v15[7] == v9;
      if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1B1138A80;
    *(void *)(v7 + 32) = v10;
    *(void *)(v7 + 40) = v9;
    (*(void (**)(void))((*v4 & *v3) + 0x180))();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
    os_log_type_t v5 = v23;
    uint64_t v2 = v24;
LABEL_4:
    if (++v6 == v2)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  if (v16 == 2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    os_log_type_t v5 = v23;
    uint64_t v2 = v24;
LABEL_16:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
    goto LABEL_17;
  }
  uint64_t v19 = v15 + 9;
  os_log_type_t v20 = 2;
  while (1)
  {
    os_log_type_t v21 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    uint64_t v22 = *(v19 - 1) == v10 && *v19 == v9;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_3;
    }
    v19 += 2;
    ++v20;
    if (v21 == v16) {
      goto LABEL_13;
    }
  }
  __break(1u);
}

uint64_t ChangeHistoryProcessor.onContactDeleted.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore22ChangeHistoryProcessor_onContactDeleted);
  swift_retain();
  return v1;
}

Swift::Void __swiftcall ChangeHistoryProcessor.visit(_:)(CNChangeHistoryDeleteContactEvent a1)
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v1
                                               + OBJC_IVAR____TtC14CopresenceCore22ChangeHistoryProcessor_onContactDeleted);
  id v3 = [(objc_class *)a1.super.super.isa contactIdentifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v2(v4, v6);
  swift_bridgeObjectRelease();
}

id ChangeHistoryProcessor.init(onContactDeleted:)(uint64_t a1, uint64_t a2)
{
  id v3 = &v2[OBJC_IVAR____TtC14CopresenceCore22ChangeHistoryProcessor_onContactDeleted];
  *(void *)id v3 = a1;
  *((void *)v3 + 1) = a2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for ChangeHistoryProcessor();
  return objc_msgSendSuper2(&v5, sel_init);
}

id ChangeHistoryProcessor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ChangeHistoryProcessor.init()()
{
}

id ChangeHistoryProcessor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChangeHistoryProcessor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall CPApplicationPolicyManager.clearBackgroundAccessForAllApps()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
  uint64_t v19 = *(void *)((char *)v0 + OBJC_IVAR___CPApplicationPolicyManager_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 16));
  uint64_t v20 = v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(v1 + 64);
  uint64_t v22 = (void *)((char *)v0 + OBJC_IVAR___CPApplicationPolicyManager_storage);
  uint64_t v23 = v1;
  int64_t v21 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v7 = v6 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return;
    }
    if (v16 >= v21) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v20 + 8 * v16);
    ++v5;
    if (!v17)
    {
      int64_t v5 = v16 + 1;
      if (v16 + 1 >= v21) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v20 + 8 * v5);
      if (!v17)
      {
        int64_t v5 = v16 + 2;
        if (v16 + 2 >= v21) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v20 + 8 * v5);
        if (!v17)
        {
          int64_t v5 = v16 + 3;
          if (v16 + 3 >= v21) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v20 + 8 * v5);
          if (!v17)
          {
            int64_t v5 = v16 + 4;
            if (v16 + 4 >= v21) {
              goto LABEL_25;
            }
            unint64_t v17 = *(void *)(v20 + 8 * v5);
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v4 = (v17 - 1) & v17;
    unint64_t v7 = __clz(__rbit64(v17)) + (v5 << 6);
LABEL_5:
    os_log_type_t v8 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = *(void **)(*(void *)(v23 + 56) + 8 * v7);
    uint64_t v13 = v22[3];
    uint64_t v12 = v22[4];
    __swift_project_boxed_opaque_existential_1(v22, v13);
    id v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 24);
    swift_bridgeObjectRetain();
    id v15 = v11;
    v14(v9, v10, v13, v12);

    swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 5;
  if (v18 < v21)
  {
    unint64_t v17 = *(void *)(v20 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        int64_t v5 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_29;
        }
        if (v5 >= v21) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v20 + 8 * v5);
        ++v18;
        if (v17) {
          goto LABEL_24;
        }
      }
    }
    int64_t v5 = v18;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 16));
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CPApplicationPolicyManager()
{
  return self;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x1B3EA25C0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1B3EA25C0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for IDSGroupSessionProvider.CurrentSessionInfo;
  }
  __break(1u);
  return result;
}

uint64_t specialized CPApplicationPolicyManager.hashedHandles(from:)(uint64_t a1)
{
  uint64_t v72 = type metadata accessor for SHA256Digest();
  uint64_t v3 = *(void *)(v72 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v72);
  char v67 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v71 = (char *)v61 - v7;
  MEMORY[0x1F4188790](v6);
  long long v70 = (char *)v61 - v8;
  uint64_t v9 = type metadata accessor for SharableObjectIdentifier();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Sequence.compactMap<A>(_:)(a1);
  uint64_t v13 = v12;
  if ((a1 & 0xC000000000000001) != 0) {
    int64_t v14 = __CocoaSet.count.getter();
  }
  else {
    int64_t v14 = *(void *)(a1 + 16);
  }
  if (v14 != *(void *)(v13 + 16))
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError();
    swift_allocError();
    swift_willThrow();
    return v13;
  }
  if (!v14)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = MEMORY[0x1E4FBC860];
LABEL_36:
    uint64_t v13 = specialized Set.init<A>(_:)(v46);
    swift_bridgeObjectRelease();
    return v13;
  }
  v61[1] = v1;
  uint64_t v80 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
  uint64_t v15 = 0;
  v61[0] = v13;
  long long v65 = (void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v66 = v13 + 32;
  id v62 = (void (**)(char *, uint64_t))(v3 + 8);
  long long v76 = xmmword_1B1138A80;
  int64_t v63 = v14;
  unint64_t v64 = v11;
  while (1)
  {
    uint64_t v69 = v15;
    int64_t v16 = (uint64_t *)(v66 + 16 * v15);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    SHA256.init()();
    specialized SharableObjectIdentifier.update<A>(_:)(v17, v18);
    uint64_t v19 = v70;
    SHA256.finalize()();
    uint64_t v20 = *v65;
    uint64_t v22 = v71;
    uint64_t v21 = v72;
    (*v65)(v71, v19, v72);
    _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_5(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, MEMORY[0x1E4F24F80]);
    uint64_t v23 = dispatch thunk of Sequence.underestimatedCount.getter();
    uint64_t v79 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
    uint64_t v24 = v79;
    v20(v67, v22, v21);
    uint64_t result = dispatch thunk of Sequence.makeIterator()();
    if (v23 < 0) {
      break;
    }
    uint64_t v26 = v78;
    uint64_t v68 = v18;
    if (v23)
    {
      uint64_t v27 = v77;
      uint64_t v74 = *(void *)(v77 + 16);
      if (v78 == v74) {
        goto LABEL_44;
      }
      uint64_t v75 = v77 + 32;
      uint64_t v28 = v23 - 1;
      unint64_t v29 = v78;
      uint64_t v73 = v77;
      while ((v26 & 0x8000000000000000) == 0)
      {
        if (v29 >= *(void *)(v27 + 16)) {
          goto LABEL_39;
        }
        uint64_t v30 = v26;
        char v31 = *(unsigned char *)(v75 + v29);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = v76;
        *(void *)(v32 + 56) = MEMORY[0x1E4FBC358];
        *(void *)(v32 + 64) = MEMORY[0x1E4FBC3B0];
        *(unsigned char *)(v32 + 32) = v31;
        uint64_t result = String.init(format:_:)();
        uint64_t v33 = result;
        uint64_t v35 = v34;
        uint64_t v79 = v24;
        unint64_t v37 = *(void *)(v24 + 16);
        unint64_t v36 = *(void *)(v24 + 24);
        if (v37 >= v36 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          uint64_t v24 = v79;
        }
        *(void *)(v24 + 16) = v37 + 1;
        uint64_t v38 = v24 + 16 * v37;
        *(void *)(v38 + 32) = v33;
        *(void *)(v38 + 40) = v35;
        if (!v28)
        {
          uint64_t v26 = v29 + 1;
          unint64_t v78 = v29 + 1;
          goto LABEL_19;
        }
        ++v29;
        --v28;
        uint64_t v27 = v73;
        uint64_t v26 = v30;
        if (v74 == v29) {
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
LABEL_19:
    uint64_t v39 = v77;
    uint64_t v40 = *(void *)(v77 + 16);
    uint64_t v75 = v40;
    if (v26 != v40)
    {
      if (v26 >= v40) {
        goto LABEL_45;
      }
      uint64_t v74 = v77 + 32;
      unint64_t v51 = v26;
      while ((v26 & 0x8000000000000000) == 0)
      {
        if (v51 >= *(void *)(v39 + 16)) {
          goto LABEL_42;
        }
        uint64_t v52 = v26;
        char v53 = *(unsigned char *)(v74 + v51);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = v76;
        *(void *)(v54 + 56) = MEMORY[0x1E4FBC358];
        *(void *)(v54 + 64) = MEMORY[0x1E4FBC3B0];
        *(unsigned char *)(v54 + 32) = v53;
        uint64_t result = String.init(format:_:)();
        uint64_t v55 = result;
        uint64_t v57 = v56;
        uint64_t v79 = v24;
        unint64_t v59 = *(void *)(v24 + 16);
        unint64_t v58 = *(void *)(v24 + 24);
        if (v59 >= v58 >> 1)
        {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
          uint64_t v24 = v79;
        }
        ++v51;
        *(void *)(v24 + 16) = v59 + 1;
        uint64_t v60 = v24 + 16 * v59;
        *(void *)(v60 + 32) = v55;
        *(void *)(v60 + 40) = v57;
        uint64_t v26 = v52;
        if (v75 == v51) {
          goto LABEL_20;
        }
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      break;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v77 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v43 = v42;
    unint64_t v44 = *v62;
    uint64_t v45 = v72;
    (*v62)(v71, v72);
    swift_bridgeObjectRelease();
    v44(v70, v45);
    outlined destroy of SharableObjectIdentifier((uint64_t)v64);
    swift_bridgeObjectRelease();
    uint64_t v46 = v80;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1);
      uint64_t v46 = v80;
    }
    uint64_t v47 = v69;
    unint64_t v49 = *(void *)(v46 + 16);
    unint64_t v48 = *(void *)(v46 + 24);
    if (v49 >= v48 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
      uint64_t v46 = v80;
    }
    uint64_t v15 = v47 + 1;
    *(void *)(v46 + 16) = v49 + 1;
    uint64_t v50 = v46 + 16 * v49;
    *(void *)(v50 + 32) = v41;
    *(void *)(v50 + 40) = v43;
    if (v15 == v63)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t outlined init with take of CPAppPolicy.AuthorizedBundles?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, char *))
{
  uint64_t v25 = a2;
  uint64_t v32 = a4;
  uint64_t v26 = a1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v33 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v27 = 0;
  uint64_t v28 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v31 = v6 + 16;
  int64_t v29 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v30 = v6 + 8;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v29) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
    }
    unint64_t v21 = *(void *)(v28 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v29) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
      }
      unint64_t v21 = *(void *)(v28 + 8 * v10);
      if (!v21)
      {
        int64_t v10 = v20 + 2;
        if (v20 + 2 >= v29) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
        }
        unint64_t v21 = *(void *)(v28 + 8 * v10);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_5:
    uint64_t v17 = (uint64_t *)(v33[6] + 16 * v16);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v33[7] + *(void *)(v6 + 72) * v16, v5);
    swift_bridgeObjectRetain();
    LOBYTE(v18) = v32(v18, v19, v9);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t result = swift_bridgeObjectRelease();
    if (v18)
    {
      *(unint64_t *)((char *)v26 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
      }
    }
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v29) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v29) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
    }
    unint64_t v21 = *(void *)(v28 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void specialized Sequence.forEach(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v22;
    uint64_t v21 = v23;
    uint64_t v6 = v24;
    uint64_t v7 = v25;
    unint64_t v8 = v26;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v20 = (unint64_t)(v6 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v8)
    {
      uint64_t v13 = (v8 - 1) & v8;
      unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v15 = v7;
      goto LABEL_29;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v17 >= v20) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    uint64_t v15 = v7 + 1;
    if (!v18)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v20) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v21 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v20) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v20) {
            goto LABEL_32;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v20) {
              goto LABEL_32;
            }
            unint64_t v18 = *(void *)(v21 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v7 + 6;
              while (v20 != v19)
              {
                unint64_t v18 = *(void *)(v21 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_29:
    id v16 = *(id *)(*(void *)(v5 + 48) + 8 * v14);
    if (!v16) {
      goto LABEL_32;
    }
    while (1)
    {
      (*(void (**)(id, uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x170))(v16, a3);

      uint64_t v7 = v15;
      unint64_t v8 = v13;
      if ((v5 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v16 = v27;
        swift_unknownObjectRelease();
        uint64_t v15 = v7;
        uint64_t v13 = v8;
        if (v27) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, id))
{
  uint64_t v23 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v25) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v24 + 8 * v17);
    ++v6;
    if (!v18)
    {
      int64_t v6 = v17 + 1;
      if (v17 + 1 >= v25) {
        goto LABEL_24;
      }
      unint64_t v18 = *(void *)(v24 + 8 * v6);
      if (!v18)
      {
        int64_t v6 = v17 + 2;
        if (v17 + 2 >= v25) {
          goto LABEL_24;
        }
        unint64_t v18 = *(void *)(v24 + 8 * v6);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void **)(*(void *)(a3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    id v16 = v15;
    LOBYTE(v13) = a4(v13, v14, v16);
    swift_bridgeObjectRelease();

    if (v13)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
LABEL_24:
        specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v23, a3);
        return;
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v25) {
    goto LABEL_24;
  }
  unint64_t v18 = *(void *)(v24 + 8 * v19);
  if (v18)
  {
    int64_t v6 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v6 >= v25) {
      goto LABEL_24;
    }
    unint64_t v18 = *(void *)(v24 + 8 * v6);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v9 = isStackAllocationSafe;
  v16[1] = *MEMORY[0x1E4F143B8];
  char v10 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v11 = (unint64_t)((1 << v10) + 63) >> 6;
  size_t v12 = 8 * v11;
  if ((v10 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v16 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v12);
    uint64_t v13 = a4((char *)v16 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v11, v9, a2, a3);
    if (v4) {
      swift_willThrow();
    }
    else {
      return v13;
    }
  }
  else
  {
    uint64_t v14 = (void *)swift_slowAlloc();
    bzero(v14, v12);
    uint64_t v6 = a4((char *)v14, v11, v9, a2, a3);
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  return v6;
}

id specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1B3EA25C0](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_isEquivalentToHandle_, a2);

      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4) {
          continue;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
  }
  id v9 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized CPApplicationPolicyManager.doesActivityTypeSupportAutoLaunch(activity:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_metadata);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_context);

    id v5 = objc_msgSend(v4, sel_typedIdentifier);
    LOBYTE(v4) = TUConversationActivityContextIdentifier.isMedia.getter();

    return v4 & 1;
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    id v8 = a1;
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v16 = v12;
      *(_DWORD *)unint64_t v11 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      id v13 = v8;
      uint64_t v14 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v9, v10, "[CPAppPolicyManager] Missing activity identifier or invalid activity-type found for %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v12, -1, -1);
      MEMORY[0x1B3EA39E0](v11, -1, -1);
    }
    else
    {
    }
    return 0;
  }
}

uint64_t type metadata accessor for ChangeHistoryProcessor()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError()
{
  unint64_t result = lazy protocol witness table cache variable for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError;
  if (!lazy protocol witness table cache variable for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError;
  if (!lazy protocol witness table cache variable for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPApplicationPolicyManager.InputError and conformance CPApplicationPolicyManager.InputError);
  }
  return result;
}

uint64_t sub_1B1104120@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B1104180(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8))(*a1);
}

uint64_t sub_1B11041D8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC0))();
  *a2 = result;
  return result;
}

uint64_t sub_1B1104234(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xC8);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B1104298(void **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xD8))();
}

uint64_t sub_1B11042EC(uint64_t a1, void **a2)
{
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
  return (*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE0))(v4);
}

uint64_t sub_1B1104360@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF0))();
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CNContactStoreConfiguration) -> (@owned TUContactsDataSource);
  a2[1] = result;
  return result;
}

ValueMetadata *type metadata accessor for CPApplicationPolicyManager.Config()
{
  return &type metadata for CPApplicationPolicyManager.Config;
}

uint64_t method lookup function for CPApplicationPolicyManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPApplicationPolicyManager);
}

uint64_t dispatch thunk of CPApplicationPolicyManager.authorizedBundleIdentifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.autoSharePlayEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.autoSharePlayEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.autoSharePlayEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.autoLaunchEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.delegates.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.delegates.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.delegates.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.protectedAppsObserver.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.protectedAppsObserver.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.protectedAppsObserver.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.contactsDataSourceCreationBlock.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.contactsDataSourceCreationBlock.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.contactsDataSourceCreationBlock.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.__allocating_init(config:contactStore:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.applicationInfo(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.isAuthorized(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.addDelegate(_:queue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.shouldAutoLaunchApp(for:on:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.updateAllowedHandles(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.updateAllowedHandles(for:on:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.setAuthorization(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.removeAuthorization(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.handleApplicationUninstalledNotification(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CPApplicationPolicyManager.handleCNContactStoreDidChangeNotification(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

unsigned char *storeEnumTagSinglePayload for CPApplicationPolicyManager.InputError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B1104A08);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CPApplicationPolicyManager.InputError()
{
  return &type metadata for CPApplicationPolicyManager.InputError;
}

uint64_t method lookup function for ChangeHistoryProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ChangeHistoryProcessor);
}

uint64_t dispatch thunk of ChangeHistoryProcessor.visit(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

{
  void *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ChangeHistoryProcessor.__allocating_init(onContactDeleted:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1B1104B3C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CNContactStoreConfiguration) -> (@out TUContactsDataSource)(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  id v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed CNContactStoreConfiguration) -> (@owned TUContactsDataSource)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B1104BE8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

void partial apply for closure #1 in CPApplicationPolicyManager.persist(_:)(void *a1)
{
  uint64_t v3 = v1[2];
  id v4 = (id)MEMORY[0x1B3EA1B00](v1[4], v1[5]);
  objc_msgSend(a1, sel_applicationPolicyManager_authorizationChangedForBundleIdentifier_, v3, v4);
}

BOOL partial apply for closure #1 in CPApplicationPolicyManager.expiredHandles(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in CPApplicationPolicyManager.expiredHandles(from:)(a1, a2, a3);
}

uint64_t _sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1104CEC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in CPApplicationPolicyManager.fetchAndStoreContactIdentifiers(for:)()
{
  closure #1 in CPApplicationPolicyManager.fetchAndStoreContactIdentifiers(for:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t outlined release of String(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B1104DE8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()()
{
  closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(*(char **)(v0 + 16));
}

void partial apply for closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(uint64_t a1, unint64_t a2)
{
  closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in CPApplicationPolicyManager.fetchAndProcessContactChangeHistory()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in closure #1 in CPApplicationPolicyManager.authorizedBundleIdentifiers.getter(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_1B1104E38()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in CPApplicationPolicyManager.autoSharePlayEnabled.setter(void *a1)
{
  uint64_t v3 = v1[2];
  id v4 = (id)MEMORY[0x1B3EA1B00](v1[3], v1[4]);
  objc_msgSend(a1, sel_applicationPolicyManager_authorizationChangedForBundleIdentifier_, v3, v4);
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  _DWORD *v1 = 0;
  return v0;
}

Swift::Void __swiftcall Lock.lock()()
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
}

Swift::Void __swiftcall Lock.unlock()()
{
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
}

Swift::Void __swiftcall Lock.assertOwned()()
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t Lock.deinit()
{
  MEMORY[0x1B3EA39E0](*(void *)(v0 + 16), -1, -1);
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  MEMORY[0x1B3EA39E0](*(void *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall Lock.tryLock()()
{
  return os_unfair_lock_trylock(*(os_unfair_lock_t *)(v0 + 16));
}

Swift::Void __swiftcall Lock.assertNotOwned()()
{
  os_unfair_lock_assert_not_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t method lookup function for Lock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Lock);
}

uint64_t dispatch thunk of Lock.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t BackgroundApplicationLaunchBehavior.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  uint64_t v1 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t BackgroundApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.revokeBackgroundAuthorization(for:), 0, 0);
}

uint64_t BackgroundApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 32) + 88))();
  *(void *)(v0 + 40) = v1;
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.revokeBackgroundAuthorization(for:), v1, 0);
}

{
  Swift::String *v0;
  uint64_t (*object)(void);
  uint64_t v3;

  BackgroundApplicationLaunchBehavior.AssertionStore.revokeBackgroundAuthorization(for:)(v0[1]);
  swift_release();
  object = (uint64_t (*)(void))v0->_object;
  return object();
}

uint64_t BackgroundApplicationLaunchBehavior.init()()
{
  type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore();
  uint64_t v1 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t BackgroundApplicationLaunchBehavior.deinit()
{
  swift_release();
  return v0;
}

uint64_t BackgroundApplicationLaunchBehavior.assertionStore.getter()
{
  return swift_retain();
}

uint64_t BackgroundApplicationLaunchBehavior.assertionStore.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*BackgroundApplicationLaunchBehavior.assertionStore.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t BackgroundApplicationLaunchBehavior.shouldThrowOnLaunchTimeout.getter()
{
  return 1;
}

uint64_t BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:), 0, 0);
}

uint64_t BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:)()
{
  id v1 = objc_msgSend(*(id *)(v0 + 32), sel_activity);
  id v2 = objc_msgSend(v1, sel_bundleIdentifier);

  if (v2)
  {
    uint64_t v3 = *(void **)(v0 + 48);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
    *(void *)(v0 + 16) = v4;
    *(void *)(v0 + 24) = v5;

    *(void *)(v0 + 64) = v6;
    uint64_t v7 = v3[3];
    uint64_t v8 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v7);
    unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
    id v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v9;
    *id v9 = v0;
    v9[1] = BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:);
    uint64_t v11 = *(void *)(v0 + 32);
    uint64_t v10 = *(void *)(v0 + 40);
    return v15(v11, v10, v7, v8);
  }
  else
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    unsigned char *v13 = 3;
    swift_willThrow();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  id v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v2 + 56) + 160)
                                                  + **(int **)(**(void **)(v2 + 56) + 160));
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v2 + 88) = v4;
    *uint64_t v4 = v2;
    v4[1] = BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:);
    uint64_t v5 = *(void *)(v2 + 64);
    return v7(v3, v5);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  unsigned char *v2;
  uint64_t v4;

  if ((*(unsigned char *)(v0 + 96) & 1) == 0)
  {
    lazy protocol witness table accessor for type ApplicationLauncher.LaunchError and conformance ApplicationLauncher.LaunchError();
    swift_allocError();
    *id v2 = 2;
    swift_willThrow();
  }
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:)(char a1)
{
  *(unsigned char *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:), 0, 0);
}

unint64_t BackgroundApplicationLaunchBehavior.createProcessAssertion(bundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = self;
  uint64_t v7 = (void *)MEMORY[0x1B3EA1B00](a1, a2);
  id v8 = objc_msgSend(v6, sel_processAssertionWithBundleIdentifier_, v7);

  unint64_t result = type metadata accessor for BKSProcessAssertion();
  a3[3] = result;
  a3[4] = &protocol witness table for BKSProcessAssertion;
  *a3 = v8;
  return result;
}

uint64_t BackgroundApplicationLaunchBehavior.acquireBackgroundAssertion(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.acquireBackgroundAssertion(bundleIdentifier:), 0, 0);
}

uint64_t BackgroundApplicationLaunchBehavior.acquireBackgroundAssertion(bundleIdentifier:)()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (*(uint64_t (**)(void, void))(*(void *)v1 + 152))(v0[7], v0[8]);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 88))(v2);
  v0[10] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = BackgroundApplicationLaunchBehavior.acquireBackgroundAssertion(bundleIdentifier:);
  uint64_t v5 = v0[7];
  v4[12] = v0[8];
  v4[13] = v3;
  v4[10] = v0 + 2;
  v4[11] = v5;
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.AssertionStore.acquireBackgroundAssertion(_:bundleIdentifier:), v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  return v1(v2);
}

uint64_t BackgroundApplicationLaunchBehavior.acquireBackgroundAssertion(bundleIdentifier:)(char a1)
{
  *(unsigned char *)(*(void *)v1 + 96) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.acquireBackgroundAssertion(bundleIdentifier:), 0, 0);
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  return v0;
}

uint64_t type metadata accessor for BackgroundApplicationLaunchBehavior.AssertionStore()
{
  return self;
}

uint64_t BackgroundApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t BackgroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 144)
                                                          + **(int **)(*(void *)v3 + 144));
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *id v8 = v4;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v10(a1, a2, a3);
}

uint64_t BackgroundApplicationLaunchBehavior.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:) in conformance BackgroundApplicationLaunchBehavior()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t protocol witness for ApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:) in conformance BackgroundApplicationLaunchBehavior(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 120)
                                                          + **(int **)(*(void *)v3 + 120));
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *id v8 = v4;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:) in conformance BackgroundApplicationLaunchBehavior(uint64_t a1, uint64_t a2)
{
  id v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 128) + **(int **)(*(void *)v2 + 128));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v8(a1, a2);
}

uint64_t protocol witness for ApplicationLaunchBehavior.shouldThrowOnLaunchTimeout.getter in conformance BackgroundApplicationLaunchBehavior()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.assertions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.assertions.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*BackgroundApplicationLaunchBehavior.AssertionStore.assertions.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.acquireBackgroundAssertion(_:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  return MEMORY[0x1F4188298](BackgroundApplicationLaunchBehavior.AssertionStore.acquireBackgroundAssertion(_:bundleIdentifier:), v3, 0);
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.acquireBackgroundAssertion(_:bundleIdentifier:)()
{
  uint64_t v28 = v0;
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  if (v4)
  {
    uint64_t v5 = v0[12];
    uint64_t v6 = v0[11];
    outlined init with copy of UserNotificationCenter(v0[10], (uint64_t)(v0 + 2));
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)(v0 + 2), v6, v5);
    swift_endAccess();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    unint64_t v11 = v0[12];
    if (v10)
    {
      char v25 = v4;
      uint64_t v12 = v0[11];
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v27 = v14;
      *(_DWORD *)id v13 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v15 = v12;
      char v4 = v25;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v11, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v8, v9, "Acquired assertion for %s", v13, 0xCu);
      swift_arrayDestroy();
      uint64_t v16 = v14;
LABEL_10:
      MEMORY[0x1B3EA39E0](v16, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
      goto LABEL_12;
    }
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    BOOL v19 = os_log_type_enabled(v8, v18);
    unint64_t v20 = v0[12];
    if (v19)
    {
      uint64_t v21 = v0[11];
      id v13 = (uint8_t *)swift_slowAlloc();
      char v26 = v4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = v22;
      *(_DWORD *)id v13 = 136315138;
      swift_bridgeObjectRetain();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v8, v18, "Failed to acquire assertion for %s", v13, 0xCu);
      swift_arrayDestroy();
      uint64_t v16 = v22;
      char v4 = v26;
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_12:

  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23(v4 & 1);
}

Swift::Void __swiftcall BackgroundApplicationLaunchBehavior.AssertionStore.revokeBackgroundAuthorization(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 112);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v6)
    {
      outlined init with copy of UserNotificationCenter(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v19);
    }
    else
    {
      uint64_t v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v20 + 1))
    {
      outlined init with take of BackgroundSessionManagerDataSource(&v19, (uint64_t)v22);
      uint64_t v7 = v23;
      uint64_t v8 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
      uint64_t v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.setter((uint64_t)&v19, countAndFlagsBits, (uint64_t)object);
      swift_endAccess();
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      BOOL v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        *(void *)&long long v19 = v13;
        *(_DWORD *)uint64_t v12 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v10, v11, "Removing process assertion for %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v13, -1, -1);
        MEMORY[0x1B3EA39E0](v12, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
      return;
    }
  }
  else
  {
    uint64_t v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
  }
  outlined destroy of ProcessAssertion?((uint64_t)&v19);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v22[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v15, v16, "No existing process assertion for %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.init()()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = MEMORY[0x1E4FBC868];
  return v0;
}

unint64_t type metadata accessor for BKSProcessAssertion()
{
  unint64_t result = lazy cache variable for type metadata for BKSProcessAssertion;
  if (!lazy cache variable for type metadata for BKSProcessAssertion)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BKSProcessAssertion);
  }
  return result;
}

uint64_t BackgroundApplicationLaunchBehavior.AssertionStore.unownedExecutor.getter()
{
  return v0;
}

id protocol witness for ProcessAssertion.acquire() in conformance BKSProcessAssertion()
{
  return objc_msgSend(*v0, sel_acquire);
}

id protocol witness for ProcessAssertion.invalidate() in conformance BKSProcessAssertion()
{
  return objc_msgSend(*v0, sel_invalidate);
}

uint64_t outlined destroy of ProcessAssertion?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProcessAssertion?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1106AB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1B1106B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B1106B54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of ProcessAssertion.acquire()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ProcessAssertion.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for BackgroundApplicationLaunchBehavior()
{
  return self;
}

uint64_t method lookup function for BackgroundApplicationLaunchBehavior(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundApplicationLaunchBehavior);
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.assertionStore.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.assertionStore.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.assertionStore.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 120)
                                                          + **(int **)(*(void *)v3 + 120));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 128) + **(int **)(*(void *)v2 + 128));
  char v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *char v6 = v3;
  v6[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.shouldThrowOnLaunchTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.launchAndAcquireBackgroundAssertion(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 144)
                                                          + **(int **)(*(void *)v3 + 144));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.createProcessAssertion(bundleIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.acquireBackgroundAssertion(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 160) + **(int **)(*(void *)v2 + 160));
  char v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *char v6 = v3;
  v6[1] = dispatch thunk of ApplicationLauncher.openApplicationOptions(for:options:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t method lookup function for BackgroundApplicationLaunchBehavior.AssertionStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundApplicationLaunchBehavior.AssertionStore);
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.AssertionStore.assertions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.AssertionStore.assertions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.AssertionStore.assertions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.AssertionStore.acquireBackgroundAssertion(_:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 120)
                                                          + **(int **)(*(void *)v3 + 120));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = dispatch thunk of ABCReporterProtocol.report(with:duration:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.AssertionStore.revokeBackgroundAuthorization(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of BackgroundApplicationLaunchBehavior.AssertionStore.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t specialized Data.init<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of BackgroundSessionManagerDataSource(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_1(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  outlined destroy of ContiguousBytes?((uint64_t)v38);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      char v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        char v6 = (unsigned char *)(v4 + v5);
      }
      else {
        char v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = specialized Data._Representation.init(_:)(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = specialized Data._Representation.init(count:)(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x1F4188790](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((void *(*)(uint64_t *__return_ptr, char *, char *))partial apply for specialized closure #3 in Data.init<A>(_:));
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    outlined consume of Data?(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  outlined consume of Data?((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1E4FBB2B8];
  v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = a1;
  v8[1] = a2;
  unint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  unint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (v4 = (unsigned char *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v6;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v28[5] = *MEMORY[0x1E4F143B8];
  v28[3] = MEMORY[0x1E4F277C0];
  uint64_t v28[4] = MEMORY[0x1E4F277B0];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = 0;
      }
      closure #1 in Data.init<A>(_:)(v8, v13, &v27);
      outlined consume of Data._Representation(v5, v6);
LABEL_27:
      outlined consume of Data._Representation(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        BOOL v23 = v22;
      }
      else {
        BOOL v23 = 0;
      }
      closure #1 in Data.init<A>(_:)(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      outlined copy of Data._Representation(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      closure #1 in Data.init<A>(_:)(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t UUID.data.getter()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  return specialized Data.init<A>(_:)((uint64_t)&v9, (uint64_t)&v18);
}

uint64_t UUID.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_12:
        __break(1u);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 16)
      {
        lazy protocol witness table accessor for type Data and conformance Data();
        DataProtocol.copyBytes(to:)();
        UUID.init(uuid:)();
        outlined consume of Data._Representation(a1, a2);
        uint64_t v10 = type metadata accessor for UUID();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a3, 0, 1, v10);
      }
      else
      {
LABEL_8:
        outlined consume of Data._Representation(a1, a2);
        uint64_t v12 = type metadata accessor for UUID();
        char v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
        return v13(a3, 1, 1, v12);
      }
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x1B3EA1BF0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

char *specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)char v1 = xmmword_1B113B700;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        uint64_t *v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        uint64_t *v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      uint64_t *v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *specialized Data._Representation.init(_:)(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data._Representation.init(count:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t Histogram.__allocating_init(buckets:log:)(void *a1, uint64_t a2)
{
  return Histogram.init(buckets:log:)(a1, a2);
}

uint64_t Histogram.buckets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Histogram.bucketCounts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Histogram.bucketCounts.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore9Histogram_bucketCounts);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Histogram.bucketCounts.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t Histogram.init(buckets:log:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v81 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  unint64_t v8 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v77 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v78 = (uint64_t)&v77 - v15;
  uint64_t v16 = v3 + OBJC_IVAR____TtC14CopresenceCore9Histogram_minValue;
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v17 = v3 + OBJC_IVAR____TtC14CopresenceCore9Histogram_maxValue;
  *(void *)uint64_t v17 = 0;
  *(unsigned char *)(v17 + 8) = 1;
  *(void *)(v3 + OBJC_IVAR____TtC14CopresenceCore9Histogram_totalCount) = 0;
  uint64_t v83 = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v83);
  BOOL v18 = specialized static Array<A>.== infix(_:_:)(a1, v83);
  swift_release();
  if (v18)
  {
    unint64_t v19 = a1[2];
    if (v19 < 2)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = v81;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v81, (uint64_t)v11, &demangling cache variable for type metadata for Logger?);
      uint64_t v28 = type metadata accessor for Logger();
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v11, 1, v28) == 1)
      {
        outlined destroy of UUID?(v27, &demangling cache variable for type metadata for Logger?);
        uint64_t v23 = (uint64_t)v11;
        goto LABEL_10;
      }
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_1B0DF7000, v33, v34, "Bucket count must be greater than 1", v35, 2u);
        MEMORY[0x1B3EA39E0](v35, -1, -1);
      }

      outlined destroy of UUID?(v27, &demangling cache variable for type metadata for Logger?);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v28);
    }
    else if (a1[4])
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = v81;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v81, (uint64_t)v14, &demangling cache variable for type metadata for Logger?);
      uint64_t v21 = type metadata accessor for Logger();
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v14, 1, v21) == 1)
      {
        outlined destroy of UUID?(v20, &demangling cache variable for type metadata for Logger?);
        uint64_t v23 = (uint64_t)v14;
LABEL_10:
        outlined destroy of UUID?(v23, &demangling cache variable for type metadata for Logger?);
        goto LABEL_37;
      }
      long long v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v61, v62))
      {
        int64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v63 = 0;
        _os_log_impl(&dword_1B0DF7000, v61, v62, "First bucket must be 0", v63, 2u);
        MEMORY[0x1B3EA39E0](v63, -1, -1);
      }

      outlined destroy of UUID?(v81, &demangling cache variable for type metadata for Logger?);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
    }
    else
    {
      uint64_t v77 = v3;
      unint64_t v36 = (void *)MEMORY[0x1E4FBC868];
      uint64_t v83 = (void *)MEMORY[0x1E4FBC868];
      swift_bridgeObjectRetain();
      uint64_t v37 = 0;
      long long v79 = xmmword_1B1138A80;
      uint64_t v80 = (void *)v19;
      do
      {
        uint64_t v38 = a1[v37 + 4];
        unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
        uint64_t v41 = v36[2];
        BOOL v42 = (v39 & 1) == 0;
        uint64_t v43 = v41 + v42;
        if (__OFADD__(v41, v42))
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
        char v44 = v39;
        if (v36[3] < v43)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, 1);
          unint64_t v36 = v83;
          unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
          if ((v44 & 1) != (v46 & 1)) {
            goto LABEL_46;
          }
          unint64_t v40 = v45;
        }
        if (v44)
        {
          uint64_t v47 = v36[7];
          unint64_t v48 = *(void **)(v47 + 8 * v40);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v47 + 8 * v40) = v48;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
            *(void *)(v47 + 8 * v40) = v48;
          }
          unint64_t v51 = v48[2];
          unint64_t v50 = v48[3];
          if (v51 >= v50 >> 1)
          {
            unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v48);
            *(void *)(v47 + 8 * v40) = v48;
          }
          v48[2] = v51 + 1;
          v48[v51 + 4] = v38;
          unint64_t v19 = (unint64_t)v80;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
          uint64_t v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = v79;
          *(void *)(v52 + 32) = v38;
          v36[(v40 >> 6) + 8] |= 1 << v40;
          *(void *)(v36[6] + 8 * v40) = v38;
          *(void *)(v36[7] + 8 * v40) = v52;
          uint64_t v53 = v36[2];
          BOOL v54 = __OFADD__(v53, 1);
          uint64_t v55 = v53 + 1;
          if (v54) {
            goto LABEL_45;
          }
          v36[2] = v55;
        }
        ++v37;
      }
      while (v19 != v37);
      swift_bridgeObjectRelease();
      uint64_t v56 = specialized _NativeDictionary.filter(_:)((uint64_t)v36);
      swift_release();
      if (!v56[2])
      {
        uint64_t v64 = v77;
        uint64_t v66 = v81;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v81, v77 + OBJC_IVAR____TtC14CopresenceCore9Histogram_log, &demangling cache variable for type metadata for Logger?);
        *(void *)(v64 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets) = a1;
        uint64_t v67 = specialized Array.init(repeating:count:)(0, v19);
        swift_release();
        outlined destroy of UUID?(v66, &demangling cache variable for type metadata for Logger?);
        *(void *)(v64 + OBJC_IVAR____TtC14CopresenceCore9Histogram_bucketCounts) = v67;
        return v64;
      }
      swift_bridgeObjectRelease();
      uint64_t v57 = v81;
      uint64_t v58 = v78;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v81, v78, &demangling cache variable for type metadata for Logger?);
      uint64_t v59 = type metadata accessor for Logger();
      uint64_t v60 = *(void *)(v59 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59) == 1)
      {
        outlined destroy of UUID?(v57, &demangling cache variable for type metadata for Logger?);
        swift_release();
        uint64_t v23 = v58;
        goto LABEL_10;
      }
      swift_retain_n();
      uint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v68, v69))
      {
        long long v70 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = (void *)swift_slowAlloc();
        uint64_t v83 = v80;
        *(_DWORD *)long long v70 = 136315138;
        *(void *)&long long v79 = v70 + 4;
        uint64_t v71 = v70;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
        uint64_t v72 = Dictionary.Keys.description.getter();
        unint64_t v74 = v73;
        swift_release();
        uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, (uint64_t *)&v83);
        uint64_t v58 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v68, v69, "Duplicates found, %s", v71, 0xCu);
        uint64_t v75 = v80;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v75, -1, -1);
        MEMORY[0x1B3EA39E0](v71, -1, -1);
        swift_release();

        uint64_t v76 = v81;
      }
      else
      {

        swift_release_n();
        uint64_t v76 = v57;
      }
      outlined destroy of UUID?(v76, &demangling cache variable for type metadata for Logger?);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = v81;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v81, (uint64_t)v8, &demangling cache variable for type metadata for Logger?);
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v8, 1, v25) == 1)
    {
      outlined destroy of UUID?(v24, &demangling cache variable for type metadata for Logger?);
      outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for Logger?);
    }
    else
    {
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_1B0DF7000, v30, v31, "Buckets not sorted", v32, 2u);
        MEMORY[0x1B3EA39E0](v32, -1, -1);
      }

      outlined destroy of UUID?(v24, &demangling cache variable for type metadata for Logger?);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v25);
    }
  }
LABEL_37:
  type metadata accessor for Histogram();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t Token = type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
  uint64_t v4 = MEMORY[0x1F4188790](Token);
  uint64_t v6 = (void *)((char *)v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  uint64_t v9 = (void *)((char *)v88 - v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v10 && a1 != a2)
  {
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v93 = *(void *)(v7 + 72);
    uint64_t v94 = a1;
    uint64_t v91 = a2;
    while (1)
    {
      outlined init with copy of CP_KeyValue(a1 + v11, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
      outlined init with copy of CP_KeyValue(a2 + v11, (uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
      uint64_t v12 = *v9;
      unint64_t v13 = v9[1];
      uint64_t v14 = *v6;
      unint64_t v15 = v6[1];
      uint64_t v16 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          LODWORD(v16) = HIDWORD(v12) - v12;
          if (__OFSUB__(HIDWORD(v12), v12))
          {
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
          }
          uint64_t v16 = (int)v16;
LABEL_10:
          unint64_t v20 = v15 >> 62;
          switch(v15 >> 62)
          {
            case 1uLL:
              LODWORD(v21) = HIDWORD(v14) - v14;
              if (__OFSUB__(HIDWORD(v14), v14)) {
                goto LABEL_132;
              }
              uint64_t v21 = (int)v21;
LABEL_15:
              if (v16 != v21) {
                goto LABEL_128;
              }
              if (v16 < 1) {
                goto LABEL_116;
              }
              break;
            case 2uLL:
              uint64_t v23 = *(void *)(v14 + 16);
              uint64_t v22 = *(void *)(v14 + 24);
              BOOL v19 = __OFSUB__(v22, v23);
              uint64_t v21 = v22 - v23;
              if (!v19) {
                goto LABEL_15;
              }
              goto LABEL_133;
            case 3uLL:
              if (v16) {
                goto LABEL_128;
              }
              goto LABEL_116;
            default:
              uint64_t v21 = BYTE6(v15);
              goto LABEL_15;
          }
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(v12 + 16);
          uint64_t v17 = *(void *)(v12 + 24);
          BOOL v19 = __OFSUB__(v17, v18);
          uint64_t v16 = v17 - v18;
          if (!v19) {
            goto LABEL_10;
          }
          goto LABEL_131;
        case 3uLL:
          goto LABEL_10;
        default:
          uint64_t v16 = BYTE6(v13);
          goto LABEL_10;
      }
      uint64_t v92 = *v6;
      switch(v13 >> 62)
      {
        case 1uLL:
          unint64_t v90 = v15;
          if ((int)v12 > v12 >> 32) {
            goto LABEL_134;
          }
          outlined copy of Data._Representation(v12, v13);
          os_log_type_t v31 = (char *)__DataStorage._bytes.getter();
          if (!v31) {
            goto LABEL_31;
          }
          uint64_t v32 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v12, v32)) {
            goto LABEL_136;
          }
          v31 += (int)v12 - v32;
LABEL_31:
          a2 = v91;
          __DataStorage._length.getter();
          if (v20)
          {
            uint64_t v89 = v31;
            if (v20 == 1)
            {
              uint64_t v33 = (int)v92;
              uint64_t v34 = (v92 >> 32) - (int)v92;
              if (v92 >> 32 < (int)v92) {
                goto LABEL_145;
              }
              swift_retain();
              uint64_t v35 = (char *)__DataStorage._bytes.getter();
              if (v35)
              {
                uint64_t v36 = __DataStorage._offset.getter();
                if (__OFSUB__(v33, v36)) {
                  goto LABEL_152;
                }
                v35 += v33 - v36;
              }
              a2 = v91;
              uint64_t v37 = __DataStorage._length.getter();
              if (v37 >= v34) {
                size_t v38 = v34;
              }
              else {
                size_t v38 = v37;
              }
              if (!v89) {
                goto LABEL_154;
              }
              if (!v35) {
                goto LABEL_155;
              }
              int v39 = memcmp(v89, v35, v38);
              outlined consume of Data._Representation(v92, v90);
            }
            else
            {
              uint64_t v73 = *(void *)(v92 + 16);
              unint64_t v90 = *(void *)(v92 + 24);
              swift_retain();
              swift_retain();
              uint64_t v74 = __DataStorage._bytes.getter();
              if (v74)
              {
                uint64_t v75 = v74;
                uint64_t v76 = __DataStorage._offset.getter();
                if (__OFSUB__(v73, v76)) {
                  goto LABEL_151;
                }
                uint64_t v77 = (const void *)(v75 + v73 - v76);
              }
              else
              {
                uint64_t v77 = 0;
              }
              int64_t v83 = v90 - v73;
              if (__OFSUB__(v90, v73)) {
                goto LABEL_146;
              }
              uint64_t v84 = __DataStorage._length.getter();
              if (v84 >= v83) {
                size_t v85 = v83;
              }
              else {
                size_t v85 = v84;
              }
              a2 = v91;
              if (!v89) {
                goto LABEL_165;
              }
              if (!v77) {
                goto LABEL_166;
              }
              int v39 = memcmp(v89, v77, v85);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v92;
            LODWORD(__s1[1]) = v90;
            WORD2(__s1[1]) = WORD2(v90);
            if (!v31) {
              goto LABEL_159;
            }
            int v39 = memcmp(v31, __s1, BYTE6(v90));
          }
          outlined consume of Data._Representation(v12, v13);
          if (v39) {
            goto LABEL_128;
          }
LABEL_116:
          BOOL v86 = v9[2] == v6[2] && v9[3] == v6[3];
          if (!v86 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            || (v9[4] != v6[4] || v9[5] != v6[5]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            || v9[6] != v6[6]
            || (type metadata accessor for UnknownStorage(),
                lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage(),
                (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
          {
LABEL_128:
            outlined destroy of CP_KeyValue((uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
            outlined destroy of CP_KeyValue((uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
            return 0;
          }
          outlined destroy of CP_KeyValue((uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
          outlined destroy of CP_KeyValue((uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
          a1 = v94;
          v11 += v93;
          if (!--v10) {
            return 1;
          }
          break;
        case 2uLL:
          unint64_t v90 = v15;
          uint64_t v40 = *(void *)(v12 + 16);
          swift_retain();
          swift_retain();
          uint64_t v41 = (char *)__DataStorage._bytes.getter();
          if (!v41) {
            goto LABEL_46;
          }
          uint64_t v42 = __DataStorage._offset.getter();
          if (__OFSUB__(v40, v42)) {
            goto LABEL_135;
          }
          v41 += v40 - v42;
LABEL_46:
          a2 = v91;
          __DataStorage._length.getter();
          if (v20)
          {
            v88[1] = v13 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v89 = v41;
            if (v20 == 1)
            {
              uint64_t v43 = (int)v92;
              uint64_t v44 = (v92 >> 32) - (int)v92;
              if (v92 >> 32 < (int)v92) {
                goto LABEL_139;
              }
              swift_retain();
              uint64_t v45 = __DataStorage._bytes.getter();
              if (v45)
              {
                uint64_t v46 = v45;
                uint64_t v47 = __DataStorage._offset.getter();
                if (__OFSUB__(v43, v47)) {
                  goto LABEL_150;
                }
                unint64_t v48 = (const void *)(v46 + v43 - v47);
              }
              else
              {
                unint64_t v48 = 0;
              }
              uint64_t v81 = __DataStorage._length.getter();
              if (v81 >= v44) {
                size_t v82 = v44;
              }
              else {
                size_t v82 = v81;
              }
              if (!v89) {
                goto LABEL_163;
              }
              if (!v48) {
                goto LABEL_164;
              }
              int v66 = memcmp(v89, v48, v82);
              outlined consume of Data._Representation(v92, v90);
            }
            else
            {
              uint64_t v67 = *(void *)(v92 + 16);
              uint64_t v68 = *(void *)(v92 + 24);
              swift_retain();
              swift_retain();
              uint64_t v69 = __DataStorage._bytes.getter();
              if (v69)
              {
                uint64_t v70 = v69;
                uint64_t v71 = __DataStorage._offset.getter();
                if (__OFSUB__(v67, v71)) {
                  goto LABEL_149;
                }
                uint64_t v72 = (const void *)(v70 + v67 - v71);
              }
              else
              {
                uint64_t v72 = 0;
              }
              if (__OFSUB__(v68, v67)) {
                goto LABEL_144;
              }
              uint64_t v79 = __DataStorage._length.getter();
              if (v79 >= v68 - v67) {
                size_t v80 = v68 - v67;
              }
              else {
                size_t v80 = v79;
              }
              a2 = v91;
              if (!v89) {
                goto LABEL_161;
              }
              if (!v72) {
                goto LABEL_162;
              }
              int v66 = memcmp(v89, v72, v80);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v92;
            LODWORD(__s1[1]) = v90;
            WORD2(__s1[1]) = WORD2(v90);
            if (!v41) {
              goto LABEL_158;
            }
            int v66 = memcmp(v41, __s1, BYTE6(v90));
          }
LABEL_105:
          swift_release();
          swift_release();
          if (v66) {
            goto LABEL_128;
          }
          goto LABEL_116;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v20) {
            goto LABEL_62;
          }
          if (v20 == 1)
          {
            uint64_t v49 = (int)v14;
            uint64_t v25 = (v14 >> 32) - (int)v14;
            if (v14 >> 32 < (int)v14) {
              goto LABEL_138;
            }
            unint64_t v26 = v15;
            swift_retain();
            uint64_t v50 = __DataStorage._bytes.getter();
            if (!v50) {
              goto LABEL_156;
            }
            uint64_t v28 = v50;
            uint64_t v51 = __DataStorage._offset.getter();
            uint64_t v30 = v49 - v51;
            if (__OFSUB__(v49, v51)) {
              goto LABEL_143;
            }
LABEL_57:
            uint64_t v52 = __DataStorage._length.getter();
            if (v52 >= v25) {
              size_t v53 = v25;
            }
            else {
              size_t v53 = v52;
            }
            int v54 = memcmp(__s1, (const void *)(v28 + v30), v53);
            outlined consume of Data._Representation(v92, v26);
            a2 = v91;
            if (v54) {
              goto LABEL_128;
            }
            goto LABEL_116;
          }
          uint64_t v61 = *(void *)(v14 + 16);
          uint64_t v62 = *(void *)(v14 + 24);
          swift_retain();
          swift_retain();
          uint64_t v60 = (char *)__DataStorage._bytes.getter();
          if (v60)
          {
            uint64_t v63 = __DataStorage._offset.getter();
            if (__OFSUB__(v61, v63)) {
              goto LABEL_148;
            }
            v60 += v61 - v63;
          }
          BOOL v19 = __OFSUB__(v62, v61);
          int64_t v64 = v62 - v61;
          if (v19) {
            goto LABEL_140;
          }
          uint64_t v65 = __DataStorage._length.getter();
          a2 = v91;
          if (!v60) {
            goto LABEL_157;
          }
LABEL_86:
          if (v65 >= v64) {
            size_t v78 = v64;
          }
          else {
            size_t v78 = v65;
          }
          int v66 = memcmp(__s1, v60, v78);
          goto LABEL_105;
        default:
          __s1[0] = v12;
          LOWORD(__s1[1]) = v13;
          BYTE2(__s1[1]) = BYTE2(v13);
          BYTE3(__s1[1]) = BYTE3(v13);
          BYTE4(__s1[1]) = BYTE4(v13);
          BYTE5(__s1[1]) = BYTE5(v13);
          if (!v20)
          {
LABEL_62:
            uint64_t __s2 = v14;
            __int16 v97 = v15;
            char v98 = BYTE2(v15);
            char v99 = BYTE3(v15);
            char v100 = BYTE4(v15);
            char v101 = BYTE5(v15);
            if (memcmp(__s1, &__s2, BYTE6(v15))) {
              goto LABEL_128;
            }
            goto LABEL_116;
          }
          if (v20 == 1)
          {
            uint64_t v24 = (int)v14;
            uint64_t v25 = (v14 >> 32) - (int)v14;
            if (v14 >> 32 < (int)v14) {
              goto LABEL_137;
            }
            unint64_t v26 = v15;
            swift_retain();
            uint64_t v27 = __DataStorage._bytes.getter();
            if (!v27)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __DataStorage._length.getter();
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
              JUMPOUT(0x1B1109D4CLL);
            }
            uint64_t v28 = v27;
            uint64_t v29 = __DataStorage._offset.getter();
            uint64_t v30 = v24 - v29;
            if (__OFSUB__(v24, v29)) {
              goto LABEL_142;
            }
            goto LABEL_57;
          }
          uint64_t v55 = *(void *)(v14 + 16);
          uint64_t v56 = *(void *)(v14 + 24);
          swift_retain();
          swift_retain();
          uint64_t v57 = __DataStorage._bytes.getter();
          if (v57)
          {
            uint64_t v58 = v57;
            uint64_t v59 = __DataStorage._offset.getter();
            if (__OFSUB__(v55, v59)) {
              goto LABEL_147;
            }
            uint64_t v60 = (char *)(v58 + v55 - v59);
          }
          else
          {
            uint64_t v60 = 0;
          }
          int64_t v64 = v56 - v55;
          if (__OFSUB__(v56, v55)) {
            goto LABEL_141;
          }
          uint64_t v65 = __DataStorage._length.getter();
          a2 = v91;
          if (!v60) {
            goto LABEL_160;
          }
          goto LABEL_86;
      }
    }
  }
  return 1;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  int v38;
  void *v39;
  uint64_t *v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  const void *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  size_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v73;
  char *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t *v77;
  uint64_t v78;
  __int16 v79;
  char v80;
  char v81;
  char v82;
  char v83;
  void __s1[3];

  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          outlined copy of Data._Representation(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          unint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            outlined consume of Data._Representation(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                uint64_t v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                outlined copy of Data._Representation(v8, v7);
                uint64_t v23 = (char *)__DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                __DataStorage._length.getter();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  uint64_t v41 = BYTE6(v7);
                  uint64_t v40 = __s1;
                  int v39 = v23;
LABEL_103:
                  uint64_t v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)__DataStorage._bytes.getter();
                  if (v25)
                  {
                    unint64_t v26 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = __DataStorage._length.getter();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    uint64_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    uint64_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  uint64_t v29 = memcmp(v23, v25, v28);
                  outlined consume of Data._Representation(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                uint64_t v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = __DataStorage._bytes.getter();
                if (v68)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = __DataStorage._length.getter();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                uint64_t v56 = v23;
                uint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                uint64_t v55 = (size_t)v71;
                uint64_t v57 = (const void *)v68;
LABEL_116:
                uint64_t v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                os_log_type_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  uint64_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      uint64_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      uint64_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    uint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    uint64_t v29 = memcmp(v73, v42, v45);
                    outlined consume of Data._Representation(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    outlined consume of Data._Representation(v8, v7);
LABEL_104:
                    outlined consume of Data._Representation(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v61 = (char *)__DataStorage._bytes.getter();
                    if (v61)
                    {
                      uint64_t v62 = __DataStorage._offset.getter();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    uint64_t v17 = __OFSUB__(v59, v60);
                    uint64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    int64_t v64 = __DataStorage._length.getter();
                    if (v64 >= v63) {
                      uint64_t v65 = v63;
                    }
                    else {
                      uint64_t v65 = v64;
                    }
                    uint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    outlined consume of Data._Representation(v8, v7);
                    outlined consume of Data._Representation(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  uint64_t v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  outlined consume of Data._Representation(v8, v7);
                  outlined consume of Data._Representation(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  outlined copy of Data._Representation(v8, v7);
                  uint64_t v34 = __DataStorage._bytes.getter();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  unint64_t v20 = v34;
                  uint64_t v35 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = __DataStorage._length.getter();
                  if (v36 >= v18) {
                    uint64_t v37 = v18;
                  }
                  else {
                    uint64_t v37 = v36;
                  }
                  size_t v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  outlined consume of Data._Representation(v8, v7);
                  outlined consume of Data._Representation(v6, v5);
                  uint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                size_t v53 = *(void *)(v8 + 24);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                unint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  int v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                uint64_t v17 = __OFSUB__(v53, v52);
                uint64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  uint64_t v55 = v50;
                }
                else {
                  uint64_t v55 = v51;
                }
                uint64_t v56 = __s1;
                uint64_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  size_t v78 = v8;
                  uint64_t v79 = v7;
                  size_t v80 = BYTE2(v7);
                  uint64_t v81 = BYTE3(v7);
                  size_t v82 = BYTE4(v7);
                  int64_t v83 = BYTE5(v7);
                  outlined copy of Data._Representation(v8, v7);
                  int v39 = __s1;
                  uint64_t v40 = &v78;
                  uint64_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  outlined copy of Data._Representation(v8, v7);
                  BOOL v19 = __DataStorage._bytes.getter();
                  if (!v19)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x1B110A6B4);
                  }
                  unint64_t v20 = v19;
                  uint64_t v21 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                outlined copy of Data._Representation(v8, v7);
                swift_retain();
                swift_retain();
                unint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                uint64_t v17 = __OFSUB__(v47, v46);
                uint64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = __DataStorage._length.getter();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          unint64_t v15 = *(void *)(v8 + 24);
          uint64_t v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          outlined copy of Data._Representation(v8, v7);
LABEL_121:
          outlined consume of Data._Representation(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int (**v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  BOOL v68;
  char v69;
  uint64_t *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  void __s1[5];

  void __s1[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v83 = (uint64_t *)((char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1F4188790](v7);
  unint64_t v88 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = MEMORY[0x1F4188790](v10);
  unint64_t v15 = (char *)&v72 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v87 = (uint64_t)&v72 - v16;
  uint64_t v89 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  uint64_t v17 = MEMORY[0x1F4188790](v89);
  BOOL v19 = (uint64_t *)((char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (uint64_t *)((char *)&v72 - v21);
  uint64_t v84 = a1;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23 != *(void *)(a2 + 16)) {
    goto LABEL_56;
  }
  if (!v23 || v84 == a2)
  {
    uint64_t v67 = 1;
    return v67 & 1;
  }
  uint64_t v81 = v4;
  size_t v82 = v15;
  uint64_t v74 = 0;
  uint64_t v75 = v7;
  uint64_t v24 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v77 = *(void *)(v20 + 72);
  size_t v78 = v12;
  uint64_t v25 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  unint64_t v26 = v23 - 1;
  uint64_t v76 = a2;
  uint64_t v79 = v19;
  size_t v80 = (char *)&v72 - v21;
  while (1)
  {
    outlined init with copy of CP_KeyValue(v84 + v24, (uint64_t)v22, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    outlined init with copy of CP_KeyValue(a2 + v24, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    if (*v22 != *v19) {
      goto LABEL_55;
    }
    uint64_t v27 = v19;
    uint64_t v28 = a2;
    size_t v85 = v26;
    BOOL v86 = v24;
    uint64_t v29 = v89;
    uint64_t v30 = v87;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22 + *(int *)(v89 + 24), v87, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    os_log_type_t v31 = (uint64_t)v82;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v27 + *(int *)(v29 + 24), (uint64_t)v82, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v32 = v88;
    uint64_t v33 = v88 + *(int *)(v7 + 48);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v30, v88, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, v33, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v34 = *v25;
    if ((*v25)(v32, 1, v4) != 1) {
      break;
    }
    outlined destroy of UUID?(v31, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of UUID?(v30, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    if (v34(v33, 1, v4) != 1)
    {
      uint64_t v32 = v88;
      BOOL v19 = v79;
      uint64_t v22 = v80;
      uint64_t v70 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
      goto LABEL_54;
    }
    outlined destroy of UUID?(v88, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v22 = v80;
    uint64_t v36 = v85;
    uint64_t v35 = v86;
    a2 = v28;
    BOOL v19 = v79;
LABEL_43:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    uint64_t v67 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CP_KeyValue((uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    outlined destroy of CP_KeyValue((uint64_t)v22, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    uint64_t v68 = v36 != 0;
    unint64_t v26 = v36 - 1;
    uint64_t v69 = v68;
    if (v67)
    {
      uint64_t v24 = v35 + v77;
      uint64_t v4 = v81;
      if (v69) {
        continue;
      }
    }
    return v67 & 1;
  }
  uint64_t v37 = v78;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v32, (uint64_t)v78, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if (v34(v33, 1, v4) != 1)
  {
    size_t v38 = v33;
    int v39 = v83;
    outlined init with take of CP_EncryptionID(v38, (uint64_t)v83, type metadata accessor for AttachmentLedger_EncryptionID);
    uint64_t v41 = *v37;
    uint64_t v40 = v37[1];
    uint64_t v43 = *v39;
    uint64_t v42 = v39[1];
    BOOL v19 = v79;
    uint64_t v22 = v80;
    uint64_t v44 = 0;
    switch(v40 >> 62)
    {
      case 1uLL:
        LODWORD(v44) = HIDWORD(v41) - v41;
        if (__OFSUB__(HIDWORD(v41), v41))
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
        }
        uint64_t v44 = (int)v44;
LABEL_15:
        switch(v42 >> 62)
        {
          case 1uLL:
            LODWORD(v48) = HIDWORD(v43) - v43;
            if (__OFSUB__(HIDWORD(v43), v43)) {
              goto LABEL_60;
            }
            unint64_t v48 = (int)v48;
LABEL_20:
            if (v44 != v48) {
              goto LABEL_50;
            }
            if (v44 < 1) {
              goto LABEL_42;
            }
            break;
          case 2uLL:
            uint64_t v50 = *(void *)(v43 + 16);
            uint64_t v49 = *(void *)(v43 + 24);
            uint64_t v47 = __OFSUB__(v49, v50);
            unint64_t v48 = v49 - v50;
            if (!v47) {
              goto LABEL_20;
            }
            goto LABEL_61;
          case 3uLL:
            if (v44) {
              goto LABEL_50;
            }
            goto LABEL_42;
          default:
            unint64_t v48 = BYTE6(v42);
            goto LABEL_20;
        }
        break;
      case 2uLL:
        uint64_t v46 = *(void *)(v41 + 16);
        uint64_t v45 = *(void *)(v41 + 24);
        uint64_t v47 = __OFSUB__(v45, v46);
        uint64_t v44 = v45 - v46;
        if (!v47) {
          goto LABEL_15;
        }
        goto LABEL_59;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v44 = BYTE6(v40);
        goto LABEL_15;
    }
    switch(v40 >> 62)
    {
      case 1uLL:
        uint64_t v73 = (v41 >> 32) - (int)v41;
        if (v41 >> 32 < (int)v41) {
          goto LABEL_62;
        }
        outlined copy of Data._Representation(v41, v40);
        uint64_t v51 = __DataStorage._bytes.getter();
        if (v51)
        {
          uint64_t v72 = v51;
          uint64_t v52 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v41, v52)) {
            goto LABEL_64;
          }
          size_t v53 = v72 + (int)v41 - v52;
        }
        else
        {
          size_t v53 = 0;
        }
        __DataStorage._length.getter();
        uint64_t v62 = v53;
        uint64_t v63 = v74;
        closure #1 in static Data.== infix(_:_:)(v62, v43, v42, (char *)__s1);
        uint64_t v74 = v63;
        outlined consume of Data._Representation(v41, v40);
        goto LABEL_41;
      case 2uLL:
        int v54 = *(void *)(v41 + 16);
        uint64_t v73 = *(void *)(v41 + 24);
        swift_retain();
        swift_retain();
        uint64_t v55 = __DataStorage._bytes.getter();
        if (v55)
        {
          uint64_t v56 = v55;
          uint64_t v57 = __DataStorage._offset.getter();
          if (__OFSUB__(v54, v57)) {
            goto LABEL_65;
          }
          uint64_t v58 = v54;
          uint64_t v59 = v56 + v54 - v57;
        }
        else
        {
          uint64_t v58 = v54;
          uint64_t v59 = 0;
        }
        if (__OFSUB__(v73, v58)) {
          goto LABEL_63;
        }
        __DataStorage._length.getter();
        uint64_t v61 = v74;
        closure #1 in static Data.== infix(_:_:)(v59, v43, v42, (char *)__s1);
        uint64_t v74 = v61;
        swift_release();
        swift_release();
LABEL_41:
        if ((__s1[0] & 1) == 0)
        {
LABEL_50:
          outlined destroy of CP_KeyValue((uint64_t)v83, type metadata accessor for AttachmentLedger_EncryptionID);
          uint64_t v70 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
          goto LABEL_53;
        }
LABEL_42:
        int64_t v64 = (uint64_t)v78;
        uint64_t v65 = (uint64_t)v83;
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        int v66 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CP_KeyValue(v65, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v82, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?(v87, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of CP_KeyValue(v64, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        uint64_t v7 = v75;
        a2 = v76;
        uint64_t v36 = v85;
        uint64_t v35 = v86;
        if ((v66 & 1) == 0) {
          goto LABEL_55;
        }
        break;
      case 3uLL:
        memset(__s1, 0, 14);
        goto LABEL_34;
      default:
        __s1[0] = v41;
        LOWORD(__s1[1]) = v40;
        BYTE2(__s1[1]) = BYTE2(v40);
        BYTE3(__s1[1]) = BYTE3(v40);
        BYTE4(__s1[1]) = BYTE4(v40);
        BYTE5(__s1[1]) = BYTE5(v40);
LABEL_34:
        uint64_t v60 = v74;
        closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v43, v42, &v90);
        uint64_t v74 = v60;
        if ((v90 & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_42;
    }
    goto LABEL_43;
  }
  BOOL v19 = v79;
  uint64_t v22 = v80;
  uint64_t v70 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
LABEL_53:
  outlined destroy of UUID?((uint64_t)v82, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined destroy of UUID?(v87, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined destroy of CP_KeyValue((uint64_t)v78, type metadata accessor for AttachmentLedger_EncryptionID);
LABEL_54:
  outlined destroy of UUID?(v32, v70);
LABEL_55:
  outlined destroy of CP_KeyValue((uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
  outlined destroy of CP_KeyValue((uint64_t)v22, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
LABEL_56:
  uint64_t v67 = 0;
  return v67 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (**v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  void __s1[4];

  void __s1[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content));
  MEMORY[0x1F4188790](v91);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v89 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = MEMORY[0x1F4188790](v11);
  unint64_t v88 = (uint64_t *)((char *)&v74 - v14);
  MEMORY[0x1F4188790](v13);
  uint64_t v95 = (uint64_t)&v74 - v15;
  uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?));
  MEMORY[0x1F4188790](v96);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  BOOL v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  char v101 = (uint64_t)&v74 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v74 - v24;
  uint64_t v94 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
  unint64_t v26 = MEMORY[0x1F4188790](v94);
  MEMORY[0x1F4188790](v26);
  __int16 v97 = a1;
  char v98 = a2;
  uint64_t v30 = *(void *)(a1 + 16);
  if (v30 != *(void *)(a2 + 16)) {
    goto LABEL_63;
  }
  if (!v30 || v97 == v98)
  {
    uint64_t v69 = 1;
    return v69 & 1;
  }
  uint64_t v81 = v6;
  size_t v80 = 0;
  os_log_type_t v31 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v92 = *(void *)(v27 + 72);
  uint64_t v93 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v32 = v30 - 1;
  unint64_t v90 = v8;
  uint64_t v33 = v9;
  size_t v82 = v9;
  uint64_t v34 = (char *)&v74 - v28;
  uint64_t v35 = v29;
  uint64_t v84 = v29;
  int64_t v83 = v17;
  size_t v85 = (char *)&v74 - v28;
  BOOL v86 = v25;
  uint64_t v87 = v21;
  while (1)
  {
    char v100 = v32;
    outlined init with copy of CP_KeyValue(v97 + v31, (uint64_t)v34, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
    char v99 = v31;
    outlined init with copy of CP_KeyValue(v98 + v31, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v34, (uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    uint64_t v36 = (uint64_t)v25;
    uint64_t v37 = v101;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v35, v101, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    size_t v38 = (uint64_t)&v17[*(int *)(v96 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v36, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v37, v38, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    int v39 = *v93;
    if ((*v93)(v17, 1, v33) != 1) {
      break;
    }
    outlined destroy of UUID?(v37, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined destroy of UUID?(v36, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    uint64_t v25 = (char *)v36;
    if (v39((char *)v38, 1, v33) != 1)
    {
      uint64_t v70 = &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      goto LABEL_62;
    }
LABEL_49:
    outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    uint64_t v69 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CP_KeyValue(v35, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
    outlined destroy of CP_KeyValue((uint64_t)v34, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
    uint64_t v32 = v100 - 1;
    if (v69)
    {
      os_log_type_t v31 = v99 + v92;
      if (v100) {
        continue;
      }
    }
    return v69 & 1;
  }
  uint64_t v40 = (uint64_t)v87;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v17, (uint64_t)v87, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  if (v39((char *)v38, 1, v33) == 1)
  {
    uint64_t v71 = v101;
    uint64_t v25 = v86;
    uint64_t v70 = &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    goto LABEL_61;
  }
  uint64_t v41 = v95;
  outlined init with take of CP_EncryptionID(v38, v95, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  uint64_t v42 = (uint64_t)v90;
  uint64_t v43 = (uint64_t *)&v90[*(int *)(v91 + 48)];
  outlined init with copy of CP_KeyValue(v40, (uint64_t)v90, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  outlined init with copy of CP_KeyValue(v41, (uint64_t)v43, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v44 = v89;
    outlined init with copy of CP_KeyValue(v42, v89, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v45 = (uint64_t)v81;
      outlined init with take of CP_EncryptionID((uint64_t)v43, (uint64_t)v81, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v46 = static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v44, v45);
      outlined destroy of CP_KeyValue(v45, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined destroy of CP_KeyValue(v44, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v35 = v84;
      uint64_t v34 = v85;
      uint64_t v17 = v83;
      uint64_t v33 = v82;
      uint64_t v25 = v86;
      if ((v46 & 1) == 0)
      {
        uint64_t v72 = v42;
        goto LABEL_59;
      }
      goto LABEL_48;
    }
    outlined destroy of CP_KeyValue(v44, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_56:
    uint64_t v34 = v85;
    uint64_t v25 = v86;
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content));
    uint64_t v35 = v84;
    uint64_t v17 = v83;
    goto LABEL_60;
  }
  uint64_t v47 = v88;
  outlined init with copy of CP_KeyValue(v42, (uint64_t)v88, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  unint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(v48, v49);
    uint64_t v42 = (uint64_t)v90;
    goto LABEL_56;
  }
  uint64_t v50 = *v43;
  uint64_t v51 = v43[1];
  uint64_t v34 = v85;
  uint64_t v25 = v86;
  uint64_t v52 = 0;
  uint64_t v35 = v84;
  uint64_t v17 = v83;
  uint64_t v33 = v82;
  switch(v49 >> 62)
  {
    case 1uLL:
      LODWORD(v52) = HIDWORD(v48) - v48;
      if (__OFSUB__(HIDWORD(v48), v48))
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
      }
      uint64_t v52 = (int)v52;
      break;
    case 2uLL:
      int v54 = *(void *)(v48 + 16);
      size_t v53 = *(void *)(v48 + 24);
      uint64_t v55 = __OFSUB__(v53, v54);
      uint64_t v52 = v53 - v54;
      if (!v55) {
        break;
      }
      goto LABEL_66;
    case 3uLL:
      break;
    default:
      uint64_t v52 = BYTE6(v49);
      break;
  }
  switch(v51 >> 62)
  {
    case 1uLL:
      LODWORD(v56) = HIDWORD(v50) - v50;
      if (__OFSUB__(HIDWORD(v50), v50)) {
        goto LABEL_67;
      }
      uint64_t v56 = (int)v56;
LABEL_24:
      if (v52 == v56)
      {
        if (v52 < 1)
        {
LABEL_29:
          outlined consume of Data._Representation(v50, v51);
          outlined consume of Data._Representation(v48, v49);
        }
        else
        {
          uint64_t v79 = v50;
          switch(v49 >> 62)
          {
            case 1uLL:
              size_t v78 = v51;
              uint64_t v77 = (v48 >> 32) - (int)v48;
              if (v48 >> 32 < (int)v48) {
                goto LABEL_69;
              }
              outlined copy of Data._Representation(v48, v49);
              uint64_t v59 = __DataStorage._bytes.getter();
              if (v59)
              {
                uint64_t v76 = v59;
                uint64_t v60 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v48, v60)) {
                  goto LABEL_71;
                }
                uint64_t v61 = v76 + (int)v48 - v60;
              }
              else
              {
                uint64_t v61 = 0;
              }
              __DataStorage._length.getter();
              uint64_t v68 = v61;
              uint64_t v67 = v78;
              int v66 = v80;
              closure #1 in static Data.== infix(_:_:)(v68, v79, v78, (char *)__s1);
              outlined consume of Data._Representation(v48, v49);
              goto LABEL_45;
            case 2uLL:
              size_t v78 = v51;
              uint64_t v76 = *(void *)(v48 + 16);
              uint64_t v75 = *(void *)(v48 + 24);
              swift_retain();
              swift_retain();
              uint64_t v62 = __DataStorage._bytes.getter();
              uint64_t v77 = v49 & 0x3FFFFFFFFFFFFFFFLL;
              if (v62)
              {
                uint64_t v63 = v62;
                int64_t v64 = __DataStorage._offset.getter();
                uint64_t v65 = v76;
                if (__OFSUB__(v76, v64)) {
                  goto LABEL_72;
                }
                uint64_t v74 = v63 + v76 - v64;
              }
              else
              {
                uint64_t v74 = 0;
                uint64_t v65 = v76;
              }
              if (__OFSUB__(v75, v65)) {
                goto LABEL_70;
              }
              __DataStorage._length.getter();
              uint64_t v67 = v78;
              int v66 = v80;
              closure #1 in static Data.== infix(_:_:)(v74, v79, v78, (char *)__s1);
              swift_release();
              swift_release();
LABEL_45:
              outlined consume of Data._Representation(v79, v67);
              outlined consume of Data._Representation(v48, v49);
              if ((__s1[0] & 1) == 0) {
                goto LABEL_58;
              }
LABEL_46:
              size_t v80 = v66;
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              goto LABEL_38;
            default:
              __s1[0] = v48;
              LOWORD(__s1[1]) = v49;
              BYTE2(__s1[1]) = BYTE2(v49);
              BYTE3(__s1[1]) = BYTE3(v49);
              BYTE4(__s1[1]) = BYTE4(v49);
              BYTE5(__s1[1]) = BYTE5(v49);
LABEL_38:
              int v66 = v80;
              closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v50, v51, &v102);
              outlined consume of Data._Representation(v79, v51);
              outlined consume of Data._Representation(v48, v49);
              if ((v102 & 1) == 0) {
                goto LABEL_58;
              }
              goto LABEL_46;
          }
        }
        uint64_t v42 = (uint64_t)v90;
LABEL_48:
        outlined destroy of CP_KeyValue(v42, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
        outlined destroy of CP_KeyValue(v95, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
        outlined destroy of UUID?(v101, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
        outlined destroy of UUID?((uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
        outlined destroy of CP_KeyValue(v40, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
        goto LABEL_49;
      }
LABEL_57:
      outlined consume of Data._Representation(v50, v51);
      outlined consume of Data._Representation(v48, v49);
LABEL_58:
      uint64_t v72 = (uint64_t)v90;
LABEL_59:
      outlined destroy of CP_KeyValue(v72, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
LABEL_60:
      outlined destroy of CP_KeyValue(v95, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      uint64_t v70 = &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?;
      uint64_t v71 = v101;
LABEL_61:
      outlined destroy of UUID?(v71, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      outlined destroy of UUID?((uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      outlined destroy of CP_KeyValue(v40, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
LABEL_62:
      outlined destroy of UUID?((uint64_t)v17, v70);
      outlined destroy of CP_KeyValue(v35, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
      outlined destroy of CP_KeyValue((uint64_t)v34, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
LABEL_63:
      uint64_t v69 = 0;
      return v69 & 1;
    case 2uLL:
      uint64_t v58 = *(void *)(v50 + 16);
      uint64_t v57 = *(void *)(v50 + 24);
      uint64_t v55 = __OFSUB__(v57, v58);
      uint64_t v56 = v57 - v58;
      if (!v55) {
        goto LABEL_24;
      }
      goto LABEL_68;
    case 3uLL:
      if (!v52) {
        goto LABEL_29;
      }
      goto LABEL_57;
    default:
      uint64_t v56 = BYTE6(v51);
      goto LABEL_24;
  }
}

{
  uint64_t vars8;

  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0) - 8;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      unint64_t v15 = 1;
    }
    else
    {
      uint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      unint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        outlined init with copy of CP_KeyValue(a1 + v12, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        outlined init with copy of CP_KeyValue(a2 + v12, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        unint64_t v15 = static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v10, v7);
        outlined destroy of CP_KeyValue((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        outlined destroy of CP_KeyValue((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        uint64_t v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const void *v80;
  size_t v81;
  uint64_t v82;
  size_t v83;
  uint64_t v84;
  size_t v85;
  int64_t v86;
  uint64_t v87;
  size_t v88;
  uint64_t result;
  void v90[2];
  const void *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t __s2;
  __int16 v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void __s1[3];

  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v96 = type metadata accessor for CP_KeyValue(0);
  uint64_t v4 = MEMORY[0x1F4188790](v96);
  uint64_t v6 = (void *)((char *)v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  uint64_t v9 = (void *)((char *)v90 - v8);
  __int16 v97 = a1;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || v97 == a2) {
      return 1;
    }
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v95 = *(void *)(v7 + 72);
    uint64_t v93 = a2;
    while (2)
    {
      outlined init with copy of CP_KeyValue(v97 + v11, (uint64_t)v9, type metadata accessor for CP_KeyValue);
      outlined init with copy of CP_KeyValue(a2 + v11, (uint64_t)v6, type metadata accessor for CP_KeyValue);
      uint64_t v12 = *v9 == *v6 && v9[1] == v6[1];
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        unint64_t v13 = v9[2];
        uint64_t v14 = v9[3];
        unint64_t v15 = v6[2];
        uint64_t v16 = v6[3];
        uint64_t v17 = 0;
        switch(v14 >> 62)
        {
          case 1uLL:
            LODWORD(v17) = HIDWORD(v13) - v13;
            if (!__OFSUB__(HIDWORD(v13), v13))
            {
              uint64_t v17 = (int)v17;
LABEL_15:
              uint64_t v21 = v16 >> 62;
              switch(v16 >> 62)
              {
                case 1uLL:
                  LODWORD(v22) = HIDWORD(v15) - v15;
                  if (__OFSUB__(HIDWORD(v15), v15)) {
                    goto LABEL_128;
                  }
                  uint64_t v22 = (int)v22;
LABEL_20:
                  if (v17 != v22) {
                    goto LABEL_124;
                  }
                  if (v17 < 1) {
                    goto LABEL_121;
                  }
                  break;
                case 2uLL:
                  uint64_t v24 = *(void *)(v15 + 16);
                  uint64_t v23 = *(void *)(v15 + 24);
                  unint64_t v20 = __OFSUB__(v23, v24);
                  uint64_t v22 = v23 - v24;
                  if (!v20) {
                    goto LABEL_20;
                  }
                  goto LABEL_129;
                case 3uLL:
                  if (v17) {
                    goto LABEL_124;
                  }
                  goto LABEL_121;
                default:
                  uint64_t v22 = BYTE6(v16);
                  goto LABEL_20;
              }
              uint64_t v94 = v6[2];
              switch(v14 >> 62)
              {
                case 1uLL:
                  uint64_t v92 = v16;
                  if ((int)v13 > v13 >> 32) {
                    goto LABEL_130;
                  }
                  outlined copy of Data._Representation(v13, v14);
                  uint64_t v32 = (char *)__DataStorage._bytes.getter();
                  if (!v32) {
                    goto LABEL_36;
                  }
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v13, v33)) {
                    goto LABEL_132;
                  }
                  v32 += (int)v13 - v33;
LABEL_36:
                  a2 = v93;
                  __DataStorage._length.getter();
                  if (v21)
                  {
                    uint64_t v91 = v32;
                    if (v21 == 1)
                    {
                      uint64_t v34 = (int)v94;
                      uint64_t v35 = (v94 >> 32) - (int)v94;
                      if (v94 >> 32 < (int)v94) {
                        goto LABEL_140;
                      }
                      swift_retain();
                      uint64_t v36 = (char *)__DataStorage._bytes.getter();
                      if (v36)
                      {
                        uint64_t v37 = __DataStorage._offset.getter();
                        if (__OFSUB__(v34, v37)) {
                          goto LABEL_148;
                        }
                        v36 += v34 - v37;
                      }
                      a2 = v93;
                      size_t v38 = __DataStorage._length.getter();
                      if (v38 >= v35) {
                        int v39 = v35;
                      }
                      else {
                        int v39 = v38;
                      }
                      if (!v91) {
                        goto LABEL_150;
                      }
                      if (!v36) {
                        goto LABEL_151;
                      }
                      uint64_t v40 = memcmp(v91, v36, v39);
                      outlined consume of Data._Representation(v94, v92);
                    }
                    else
                    {
                      uint64_t v74 = *(void *)(v94 + 16);
                      uint64_t v75 = *(void *)(v94 + 24);
                      swift_retain();
                      swift_retain();
                      uint64_t v76 = __DataStorage._bytes.getter();
                      if (v76)
                      {
                        uint64_t v77 = v76;
                        size_t v78 = __DataStorage._offset.getter();
                        if (__OFSUB__(v74, v78)) {
                          goto LABEL_147;
                        }
                        uint64_t v79 = v74;
                        size_t v80 = (const void *)(v77 + v74 - v78);
                      }
                      else
                      {
                        uint64_t v79 = v74;
                        size_t v80 = 0;
                      }
                      BOOL v86 = v75 - v79;
                      if (__OFSUB__(v75, v79)) {
                        goto LABEL_142;
                      }
                      uint64_t v87 = __DataStorage._length.getter();
                      if (v87 >= v86) {
                        unint64_t v88 = v86;
                      }
                      else {
                        unint64_t v88 = v87;
                      }
                      a2 = v93;
                      if (!v91) {
                        goto LABEL_160;
                      }
                      if (!v80) {
                        goto LABEL_161;
                      }
                      uint64_t v40 = memcmp(v91, v80, v88);
                      swift_release();
                      swift_release();
                    }
                  }
                  else
                  {
                    __s1[0] = v94;
                    LODWORD(__s1[1]) = v92;
                    WORD2(__s1[1]) = WORD2(v92);
                    if (!v32) {
                      goto LABEL_155;
                    }
                    uint64_t v40 = memcmp(v32, __s1, BYTE6(v92));
                  }
                  outlined consume of Data._Representation(v13, v14);
                  if (v40) {
                    goto LABEL_124;
                  }
LABEL_121:
                  type metadata accessor for UnknownStorage();
                  lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
                  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
                    goto LABEL_124;
                  }
                  outlined destroy of CP_KeyValue((uint64_t)v6, type metadata accessor for CP_KeyValue);
                  outlined destroy of CP_KeyValue((uint64_t)v9, type metadata accessor for CP_KeyValue);
                  v11 += v95;
                  if (!--v10) {
                    return 1;
                  }
                  continue;
                case 2uLL:
                  uint64_t v92 = v16;
                  uint64_t v41 = *(void *)(v13 + 16);
                  swift_retain();
                  swift_retain();
                  uint64_t v42 = (char *)__DataStorage._bytes.getter();
                  if (!v42) {
                    goto LABEL_51;
                  }
                  uint64_t v43 = __DataStorage._offset.getter();
                  if (__OFSUB__(v41, v43)) {
                    goto LABEL_131;
                  }
                  v42 += v41 - v43;
LABEL_51:
                  a2 = v93;
                  __DataStorage._length.getter();
                  if (v21)
                  {
                    v90[1] = v14 & 0x3FFFFFFFFFFFFFFFLL;
                    uint64_t v91 = v42;
                    if (v21 == 1)
                    {
                      uint64_t v44 = (int)v94;
                      uint64_t v45 = (v94 >> 32) - (int)v94;
                      if (v94 >> 32 < (int)v94) {
                        goto LABEL_135;
                      }
                      swift_retain();
                      uint64_t v46 = __DataStorage._bytes.getter();
                      if (v46)
                      {
                        uint64_t v47 = v46;
                        unint64_t v48 = __DataStorage._offset.getter();
                        if (__OFSUB__(v44, v48)) {
                          goto LABEL_146;
                        }
                        uint64_t v49 = (const void *)(v47 + v44 - v48);
                      }
                      else
                      {
                        uint64_t v49 = 0;
                      }
                      uint64_t v84 = __DataStorage._length.getter();
                      if (v84 >= v45) {
                        size_t v85 = v45;
                      }
                      else {
                        size_t v85 = v84;
                      }
                      if (!v91) {
                        goto LABEL_162;
                      }
                      if (!v49) {
                        goto LABEL_159;
                      }
                      uint64_t v67 = memcmp(v91, v49, v85);
                      outlined consume of Data._Representation(v94, v92);
                    }
                    else
                    {
                      uint64_t v68 = *(void *)(v94 + 16);
                      uint64_t v69 = *(void *)(v94 + 24);
                      swift_retain();
                      swift_retain();
                      uint64_t v70 = __DataStorage._bytes.getter();
                      if (v70)
                      {
                        uint64_t v71 = v70;
                        uint64_t v72 = __DataStorage._offset.getter();
                        if (__OFSUB__(v68, v72)) {
                          goto LABEL_145;
                        }
                        uint64_t v73 = (const void *)(v71 + v68 - v72);
                      }
                      else
                      {
                        uint64_t v73 = 0;
                      }
                      if (__OFSUB__(v69, v68)) {
                        goto LABEL_141;
                      }
                      size_t v82 = __DataStorage._length.getter();
                      if (v82 >= v69 - v68) {
                        int64_t v83 = v69 - v68;
                      }
                      else {
                        int64_t v83 = v82;
                      }
                      a2 = v93;
                      if (!v91) {
                        goto LABEL_157;
                      }
                      if (!v73) {
                        goto LABEL_158;
                      }
                      uint64_t v67 = memcmp(v91, v73, v83);
                      swift_release();
                      swift_release();
                    }
                  }
                  else
                  {
                    __s1[0] = v94;
                    LODWORD(__s1[1]) = v92;
                    WORD2(__s1[1]) = WORD2(v92);
                    if (!v42) {
                      goto LABEL_154;
                    }
                    uint64_t v67 = memcmp(v42, __s1, BYTE6(v92));
                  }
LABEL_110:
                  swift_release();
                  swift_release();
                  if (v67) {
                    goto LABEL_124;
                  }
                  goto LABEL_121;
                case 3uLL:
                  memset(__s1, 0, 14);
                  if (!v21) {
                    goto LABEL_67;
                  }
                  if (v21 == 1)
                  {
                    uint64_t v50 = (int)v15;
                    unint64_t v26 = (v15 >> 32) - (int)v15;
                    if (v15 >> 32 < (int)v15) {
                      goto LABEL_134;
                    }
                    uint64_t v27 = v16;
                    swift_retain();
                    uint64_t v51 = __DataStorage._bytes.getter();
                    if (!v51) {
                      goto LABEL_152;
                    }
                    uint64_t v29 = v51;
                    uint64_t v52 = __DataStorage._offset.getter();
                    os_log_type_t v31 = v50 - v52;
                    if (__OFSUB__(v50, v52)) {
                      goto LABEL_139;
                    }
LABEL_62:
                    size_t v53 = __DataStorage._length.getter();
                    if (v53 >= v26) {
                      int v54 = v26;
                    }
                    else {
                      int v54 = v53;
                    }
                    uint64_t v55 = memcmp(__s1, (const void *)(v29 + v31), v54);
                    outlined consume of Data._Representation(v94, v27);
                    a2 = v93;
                    if (v55) {
                      goto LABEL_124;
                    }
                    goto LABEL_121;
                  }
                  uint64_t v62 = *(void *)(v15 + 16);
                  uint64_t v63 = *(void *)(v15 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v61 = (char *)__DataStorage._bytes.getter();
                  if (v61)
                  {
                    int64_t v64 = __DataStorage._offset.getter();
                    if (__OFSUB__(v62, v64)) {
                      goto LABEL_144;
                    }
                    v61 += v62 - v64;
                  }
                  unint64_t v20 = __OFSUB__(v63, v62);
                  uint64_t v65 = v63 - v62;
                  if (v20) {
                    goto LABEL_136;
                  }
                  int v66 = __DataStorage._length.getter();
                  a2 = v93;
                  if (!v61) {
                    goto LABEL_153;
                  }
LABEL_91:
                  if (v66 >= v65) {
                    uint64_t v81 = v65;
                  }
                  else {
                    uint64_t v81 = v66;
                  }
                  uint64_t v67 = memcmp(__s1, v61, v81);
                  goto LABEL_110;
                default:
                  __s1[0] = v13;
                  LOWORD(__s1[1]) = v14;
                  BYTE2(__s1[1]) = BYTE2(v14);
                  BYTE3(__s1[1]) = BYTE3(v14);
                  BYTE4(__s1[1]) = BYTE4(v14);
                  BYTE5(__s1[1]) = BYTE5(v14);
                  if (!v21)
                  {
LABEL_67:
                    uint64_t __s2 = v15;
                    char v99 = v16;
                    char v100 = BYTE2(v16);
                    char v101 = BYTE3(v16);
                    os_signpost_id_t v102 = BYTE4(v16);
                    uint64_t v103 = BYTE5(v16);
                    if (memcmp(__s1, &__s2, BYTE6(v16))) {
                      goto LABEL_124;
                    }
                    goto LABEL_121;
                  }
                  if (v21 == 1)
                  {
                    uint64_t v25 = (int)v15;
                    unint64_t v26 = (v15 >> 32) - (int)v15;
                    if (v15 >> 32 < (int)v15) {
                      goto LABEL_133;
                    }
                    uint64_t v27 = v16;
                    swift_retain();
                    uint64_t v28 = __DataStorage._bytes.getter();
                    if (!v28)
                    {
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_150:
                      __break(1u);
LABEL_151:
                      __break(1u);
LABEL_152:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_153:
                      __break(1u);
LABEL_154:
                      __break(1u);
LABEL_155:
                      __break(1u);
LABEL_156:
                      __break(1u);
LABEL_157:
                      __break(1u);
LABEL_158:
                      __break(1u);
LABEL_159:
                      __break(1u);
LABEL_160:
                      __break(1u);
LABEL_161:
                      __break(1u);
LABEL_162:
                      __break(1u);
                      JUMPOUT(0x1B110CA68);
                    }
                    uint64_t v29 = v28;
                    uint64_t v30 = __DataStorage._offset.getter();
                    os_log_type_t v31 = v25 - v30;
                    if (__OFSUB__(v25, v30)) {
                      goto LABEL_138;
                    }
                    goto LABEL_62;
                  }
                  uint64_t v56 = *(void *)(v15 + 16);
                  uint64_t v57 = *(void *)(v15 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v58 = __DataStorage._bytes.getter();
                  if (v58)
                  {
                    uint64_t v59 = v58;
                    uint64_t v60 = __DataStorage._offset.getter();
                    if (__OFSUB__(v56, v60)) {
                      goto LABEL_143;
                    }
                    uint64_t v61 = (char *)(v59 + v56 - v60);
                  }
                  else
                  {
                    uint64_t v61 = 0;
                  }
                  uint64_t v65 = v57 - v56;
                  if (__OFSUB__(v57, v56)) {
                    goto LABEL_137;
                  }
                  int v66 = __DataStorage._length.getter();
                  a2 = v93;
                  if (!v61) {
                    goto LABEL_156;
                  }
                  goto LABEL_91;
              }
            }
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
            return result;
          case 2uLL:
            BOOL v19 = *(void *)(v13 + 16);
            uint64_t v18 = *(void *)(v13 + 24);
            unint64_t v20 = __OFSUB__(v18, v19);
            uint64_t v17 = v18 - v19;
            if (!v20) {
              goto LABEL_15;
            }
            goto LABEL_127;
          case 3uLL:
            goto LABEL_15;
          default:
            uint64_t v17 = BYTE6(v14);
            goto LABEL_15;
        }
      }
      break;
    }
LABEL_124:
    outlined destroy of CP_KeyValue((uint64_t)v6, type metadata accessor for CP_KeyValue);
    outlined destroy of CP_KeyValue((uint64_t)v9, type metadata accessor for CP_KeyValue);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int (**v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  BOOL v68;
  char v69;
  uint64_t *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  void __s1[5];

  void __s1[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for CP_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v83 = (uint64_t *)((char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?));
  MEMORY[0x1F4188790](v7);
  unint64_t v88 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = MEMORY[0x1F4188790](v10);
  unint64_t v15 = (char *)&v72 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v87 = (uint64_t)&v72 - v16;
  uint64_t v89 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  uint64_t v17 = MEMORY[0x1F4188790](v89);
  BOOL v19 = (uint64_t *)((char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  uint64_t v22 = (uint64_t *)((char *)&v72 - v21);
  uint64_t v84 = a1;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23 != *(void *)(a2 + 16)) {
    goto LABEL_56;
  }
  if (!v23 || v84 == a2)
  {
    uint64_t v67 = 1;
    return v67 & 1;
  }
  uint64_t v81 = v4;
  size_t v82 = v15;
  uint64_t v74 = 0;
  uint64_t v75 = v7;
  uint64_t v24 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v77 = *(void *)(v20 + 72);
  size_t v78 = v12;
  uint64_t v25 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  unint64_t v26 = v23 - 1;
  uint64_t v76 = a2;
  uint64_t v79 = v19;
  size_t v80 = (char *)&v72 - v21;
  while (1)
  {
    outlined init with copy of CP_KeyValue(v84 + v24, (uint64_t)v22, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    outlined init with copy of CP_KeyValue(a2 + v24, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    if (*v22 != *v19) {
      goto LABEL_55;
    }
    uint64_t v27 = v19;
    uint64_t v28 = a2;
    size_t v85 = v26;
    BOOL v86 = v24;
    uint64_t v29 = v89;
    uint64_t v30 = v87;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22 + *(int *)(v89 + 24), v87, &demangling cache variable for type metadata for CP_EncryptionID?);
    os_log_type_t v31 = (uint64_t)v82;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v27 + *(int *)(v29 + 24), (uint64_t)v82, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v32 = v88;
    uint64_t v33 = v88 + *(int *)(v7 + 48);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v30, v88, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, v33, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v34 = *v25;
    if ((*v25)(v32, 1, v4) != 1) {
      break;
    }
    outlined destroy of UUID?(v31, &demangling cache variable for type metadata for CP_EncryptionID?);
    outlined destroy of UUID?(v30, &demangling cache variable for type metadata for CP_EncryptionID?);
    if (v34(v33, 1, v4) != 1)
    {
      uint64_t v32 = v88;
      BOOL v19 = v79;
      uint64_t v22 = v80;
      uint64_t v70 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
      goto LABEL_54;
    }
    outlined destroy of UUID?(v88, &demangling cache variable for type metadata for CP_EncryptionID?);
    uint64_t v22 = v80;
    uint64_t v36 = v85;
    uint64_t v35 = v86;
    a2 = v28;
    BOOL v19 = v79;
LABEL_43:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
    uint64_t v67 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CP_KeyValue((uint64_t)v19, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    outlined destroy of CP_KeyValue((uint64_t)v22, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    uint64_t v68 = v36 != 0;
    unint64_t v26 = v36 - 1;
    uint64_t v69 = v68;
    if (v67)
    {
      uint64_t v24 = v35 + v77;
      uint64_t v4 = v81;
      if (v69) {
        continue;
      }
    }
    return v67 & 1;
  }
  uint64_t v37 = v78;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v32, (uint64_t)v78, &demangling cache variable for type metadata for CP_EncryptionID?);
  if (v34(v33, 1, v4) != 1)
  {
    size_t v38 = v33;
    int v39 = v83;
    outlined init with take of CP_EncryptionID(v38, (uint64_t)v83, type metadata accessor for CP_EncryptionID);
    uint64_t v41 = *v37;
    uint64_t v40 = v37[1];
    uint64_t v43 = *v39;
    uint64_t v42 = v39[1];
    BOOL v19 = v79;
    uint64_t v22 = v80;
    uint64_t v44 = 0;
    switch(v40 >> 62)
    {
      case 1uLL:
        LODWORD(v44) = HIDWORD(v41) - v41;
        if (__OFSUB__(HIDWORD(v41), v41))
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
        }
        uint64_t v44 = (int)v44;
LABEL_15:
        switch(v42 >> 62)
        {
          case 1uLL:
            LODWORD(v48) = HIDWORD(v43) - v43;
            if (__OFSUB__(HIDWORD(v43), v43)) {
              goto LABEL_60;
            }
            unint64_t v48 = (int)v48;
LABEL_20:
            if (v44 != v48) {
              goto LABEL_50;
            }
            if (v44 < 1) {
              goto LABEL_42;
            }
            break;
          case 2uLL:
            uint64_t v50 = *(void *)(v43 + 16);
            uint64_t v49 = *(void *)(v43 + 24);
            uint64_t v47 = __OFSUB__(v49, v50);
            unint64_t v48 = v49 - v50;
            if (!v47) {
              goto LABEL_20;
            }
            goto LABEL_61;
          case 3uLL:
            if (v44) {
              goto LABEL_50;
            }
            goto LABEL_42;
          default:
            unint64_t v48 = BYTE6(v42);
            goto LABEL_20;
        }
        break;
      case 2uLL:
        uint64_t v46 = *(void *)(v41 + 16);
        uint64_t v45 = *(void *)(v41 + 24);
        uint64_t v47 = __OFSUB__(v45, v46);
        uint64_t v44 = v45 - v46;
        if (!v47) {
          goto LABEL_15;
        }
        goto LABEL_59;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v44 = BYTE6(v40);
        goto LABEL_15;
    }
    switch(v40 >> 62)
    {
      case 1uLL:
        uint64_t v73 = (v41 >> 32) - (int)v41;
        if (v41 >> 32 < (int)v41) {
          goto LABEL_62;
        }
        outlined copy of Data._Representation(v41, v40);
        uint64_t v51 = __DataStorage._bytes.getter();
        if (v51)
        {
          uint64_t v72 = v51;
          uint64_t v52 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v41, v52)) {
            goto LABEL_64;
          }
          size_t v53 = v72 + (int)v41 - v52;
        }
        else
        {
          size_t v53 = 0;
        }
        __DataStorage._length.getter();
        uint64_t v62 = v53;
        uint64_t v63 = v74;
        closure #1 in static Data.== infix(_:_:)(v62, v43, v42, (char *)__s1);
        uint64_t v74 = v63;
        outlined consume of Data._Representation(v41, v40);
        goto LABEL_41;
      case 2uLL:
        int v54 = *(void *)(v41 + 16);
        uint64_t v73 = *(void *)(v41 + 24);
        swift_retain();
        swift_retain();
        uint64_t v55 = __DataStorage._bytes.getter();
        if (v55)
        {
          uint64_t v56 = v55;
          uint64_t v57 = __DataStorage._offset.getter();
          if (__OFSUB__(v54, v57)) {
            goto LABEL_65;
          }
          uint64_t v58 = v54;
          uint64_t v59 = v56 + v54 - v57;
        }
        else
        {
          uint64_t v58 = v54;
          uint64_t v59 = 0;
        }
        if (__OFSUB__(v73, v58)) {
          goto LABEL_63;
        }
        __DataStorage._length.getter();
        uint64_t v61 = v74;
        closure #1 in static Data.== infix(_:_:)(v59, v43, v42, (char *)__s1);
        uint64_t v74 = v61;
        swift_release();
        swift_release();
LABEL_41:
        if ((__s1[0] & 1) == 0)
        {
LABEL_50:
          outlined destroy of CP_KeyValue((uint64_t)v83, type metadata accessor for CP_EncryptionID);
          uint64_t v70 = &demangling cache variable for type metadata for CP_EncryptionID?;
          goto LABEL_53;
        }
LABEL_42:
        int64_t v64 = (uint64_t)v78;
        uint64_t v65 = (uint64_t)v83;
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        int v66 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CP_KeyValue(v65, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?((uint64_t)v82, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of UUID?(v87, &demangling cache variable for type metadata for CP_EncryptionID?);
        outlined destroy of CP_KeyValue(v64, type metadata accessor for CP_EncryptionID);
        outlined destroy of UUID?(v32, &demangling cache variable for type metadata for CP_EncryptionID?);
        uint64_t v7 = v75;
        a2 = v76;
        uint64_t v36 = v85;
        uint64_t v35 = v86;
        if ((v66 & 1) == 0) {
          goto LABEL_55;
        }
        break;
      case 3uLL:
        memset(__s1, 0, 14);
        goto LABEL_34;
      default:
        __s1[0] = v41;
        LOWORD(__s1[1]) = v40;
        BYTE2(__s1[1]) = BYTE2(v40);
        BYTE3(__s1[1]) = BYTE3(v40);
        BYTE4(__s1[1]) = BYTE4(v40);
        BYTE5(__s1[1]) = BYTE5(v40);
LABEL_34:
        uint64_t v60 = v74;
        closure #1 in static Data.== infix(_:_:)((uint64_t)__s1, v43, v42, &v90);
        uint64_t v74 = v60;
        if ((v90 & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_42;
    }
    goto LABEL_43;
  }
  BOOL v19 = v79;
  uint64_t v22 = v80;
  uint64_t v70 = &demangling cache variable for type metadata for (CP_EncryptionID?, CP_EncryptionID?);
LABEL_53:
  outlined destroy of UUID?((uint64_t)v82, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined destroy of UUID?(v87, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined destroy of CP_KeyValue((uint64_t)v78, type metadata accessor for CP_EncryptionID);
LABEL_54:
  outlined destroy of UUID?(v32, v70);
LABEL_55:
  outlined destroy of CP_KeyValue((uint64_t)v19, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
  outlined destroy of CP_KeyValue((uint64_t)v22, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
LABEL_56:
  uint64_t v67 = 0;
  return v67 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  uint64_t v4 = type metadata accessor for CP_SequenceNumber(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (uint64_t *)((char *)&v14 - v9);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2) {
      return 1;
    }
    uint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    unint64_t v15 = *(void *)(v8 + 72);
    while (1)
    {
      outlined init with copy of CP_KeyValue(a1 + v12, (uint64_t)v10, type metadata accessor for CP_SequenceNumber);
      outlined init with copy of CP_KeyValue(a2 + v12, (uint64_t)v7, type metadata accessor for CP_SequenceNumber);
      if (*v10 != *v7) {
        break;
      }
      if (v10[1] != v7[1]) {
        break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      outlined destroy of CP_KeyValue((uint64_t)v7, type metadata accessor for CP_SequenceNumber);
      outlined destroy of CP_KeyValue((uint64_t)v10, type metadata accessor for CP_SequenceNumber);
      v12 += v15;
      if (!--v11) {
        return 1;
      }
    }
    outlined destroy of CP_KeyValue((uint64_t)v7, type metadata accessor for CP_SequenceNumber);
    outlined destroy of CP_KeyValue((uint64_t)v10, type metadata accessor for CP_SequenceNumber);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void *v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t result;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v4 = type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (uint64_t *)((char *)&v28 - v9);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v11 && a1 != a2)
  {
    uint64_t v12 = 0;
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v29 = a1 + v13;
    uint64_t v14 = a2 + v13;
    unint64_t v15 = *(void *)(v8 + 72);
    while (1)
    {
      outlined init with copy of CP_KeyValue(v29 + v15 * v12, (uint64_t)v10, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
      outlined init with copy of CP_KeyValue(v14 + v15 * v12, (uint64_t)v7, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
      uint64_t v16 = *v10 == *v7 && v10[1] == v7[1];
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v17 = (void *)v10[2];
      uint64_t v18 = (void *)v7[2];
      BOOL v19 = v17[2];
      if (v19 != v18[2]) {
        break;
      }
      if (v19) {
        unint64_t v20 = v17 == v18;
      }
      else {
        unint64_t v20 = 1;
      }
      if (!v20)
      {
        if (v17[4] != v18[4]) {
          break;
        }
        if (v19 != 1)
        {
          if (v17[5] != v18[5]) {
            break;
          }
          uint64_t v22 = v17 + 6;
          uint64_t v23 = v18 + 6;
          uint64_t v24 = v19 - 2;
          while (v24)
          {
            unint64_t v26 = *v22++;
            uint64_t v25 = v26;
            uint64_t v27 = *v23++;
            --v24;
            if (v25 != v27) {
              goto LABEL_24;
            }
          }
        }
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
        break;
      }
      ++v12;
      outlined destroy of CP_KeyValue((uint64_t)v7, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
      outlined destroy of CP_KeyValue((uint64_t)v10, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
      uint64_t result = 1;
      if (v12 == v11) {
        return result;
      }
    }
LABEL_24:
    outlined destroy of CP_KeyValue((uint64_t)v7, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
    outlined destroy of CP_KeyValue((uint64_t)v10, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
    return 0;
  }
  return 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;

  uint64_t v4 = type metadata accessor for CP_TopicSubscribers.TerminateTopic(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (uint64_t *)((char *)&v19 - v9);
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      unint64_t v15 = 1;
    }
    else
    {
      uint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      unint64_t v20 = *(void *)(v8 + 72);
      unint64_t v13 = v11 - 1;
      while (1)
      {
        outlined init with copy of CP_KeyValue(a1 + v12, (uint64_t)v10, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
        outlined init with copy of CP_KeyValue(a2 + v12, (uint64_t)v7, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
        uint64_t v14 = *v10 == *v7 && v10[1] == v7[1];
        if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        unint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CP_KeyValue((uint64_t)v7, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
        outlined destroy of CP_KeyValue((uint64_t)v10, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
        uint64_t v17 = v13-- != 0;
        if (v15)
        {
          v12 += v20;
          if (v17) {
            continue;
          }
        }
        return v15 & 1;
      }
      outlined destroy of CP_KeyValue((uint64_t)v7, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
      outlined destroy of CP_KeyValue((uint64_t)v10, type metadata accessor for CP_TopicSubscribers.TerminateTopic);
      unint64_t v15 = 0;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t vars8;

  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for CP_EncryptionID, type metadata accessor for CP_EncryptionID, type metadata accessor for CP_EncryptionID);
}

BOOL specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (int64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v109 = a4;
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v108 = a3(0);
  uint64_t v8 = MEMORY[0x1F4188790](v108);
  uint64_t v10 = (uint64_t *)((char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  unint64_t v13 = (uint64_t *)((char *)&v101 - v12);
  uint64_t v110 = a1;
  uint64_t v111 = a2;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 == *(void *)(a2 + 16))
  {
    if (v14 && v110 != v111)
    {
      unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v106 = *(void *)(v11 + 72);
      uint64_t v107 = v10;
      uint64_t v16 = v14 - 1;
      uint64_t v103 = a5;
      while (1)
      {
        uint64_t v17 = v109;
        outlined init with copy of CP_KeyValue(v110 + v15, (uint64_t)v13, v109);
        outlined init with copy of CP_KeyValue(v111 + v15, (uint64_t)v10, v17);
        uint64_t v19 = *v13;
        unint64_t v18 = v13[1];
        uint64_t v20 = *v10;
        unint64_t v21 = v10[1];
        uint64_t v22 = 0;
        switch(v18 >> 62)
        {
          case 1uLL:
            LODWORD(v22) = HIDWORD(v19) - v19;
            if (__OFSUB__(HIDWORD(v19), v19))
            {
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
            }
            uint64_t v22 = (int)v22;
LABEL_10:
            unint64_t v26 = v21 >> 62;
            switch(v21 >> 62)
            {
              case 1uLL:
                LODWORD(v27) = HIDWORD(v20) - v20;
                if (__OFSUB__(HIDWORD(v20), v20)) {
                  goto LABEL_131;
                }
                uint64_t v27 = (int)v27;
LABEL_15:
                if (v22 != v27) {
                  goto LABEL_126;
                }
                if (v22 < 1) {
                  goto LABEL_119;
                }
                break;
              case 2uLL:
                uint64_t v29 = *(void *)(v20 + 16);
                uint64_t v28 = *(void *)(v20 + 24);
                BOOL v25 = __OFSUB__(v28, v29);
                uint64_t v27 = v28 - v29;
                if (!v25) {
                  goto LABEL_15;
                }
                goto LABEL_132;
              case 3uLL:
                if (v22) {
                  goto LABEL_126;
                }
                goto LABEL_119;
              default:
                uint64_t v27 = BYTE6(v21);
                goto LABEL_15;
            }
            break;
          case 2uLL:
            uint64_t v24 = *(void *)(v19 + 16);
            uint64_t v23 = *(void *)(v19 + 24);
            BOOL v25 = __OFSUB__(v23, v24);
            uint64_t v22 = v23 - v24;
            if (!v25) {
              goto LABEL_10;
            }
            goto LABEL_130;
          case 3uLL:
            goto LABEL_10;
          default:
            uint64_t v22 = BYTE6(v18);
            goto LABEL_10;
        }
        uint64_t v105 = v20;
        switch(v18 >> 62)
        {
          case 1uLL:
            if ((int)v19 > v19 >> 32) {
              goto LABEL_133;
            }
            outlined copy of Data._Representation(v19, v18);
            uint64_t v36 = (char *)__DataStorage._bytes.getter();
            if (!v36) {
              goto LABEL_31;
            }
            uint64_t v37 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v19, v37)) {
              goto LABEL_135;
            }
            v36 += (int)v19 - v37;
LABEL_31:
            a5 = v103;
            __DataStorage._length.getter();
            if (v26)
            {
              os_log_type_t v104 = v36;
              if (v26 == 1)
              {
                uint64_t v38 = (int)v105;
                uint64_t v39 = (v105 >> 32) - (int)v105;
                if (v105 >> 32 < (int)v105) {
                  goto LABEL_144;
                }
                swift_retain();
                uint64_t v40 = (char *)__DataStorage._bytes.getter();
                if (v40)
                {
                  uint64_t v41 = __DataStorage._offset.getter();
                  if (__OFSUB__(v38, v41)) {
                    goto LABEL_151;
                  }
                  v40 += v38 - v41;
                }
                a5 = v103;
                uint64_t v42 = __DataStorage._length.getter();
                if (v42 >= v39) {
                  size_t v43 = v39;
                }
                else {
                  size_t v43 = v42;
                }
                if (!v104) {
                  goto LABEL_153;
                }
                if (!v40) {
                  goto LABEL_154;
                }
                int v44 = memcmp(v104, v40, v43);
                outlined consume of Data._Representation(v105, v21);
              }
              else
              {
                uint64_t v81 = *(void *)(v105 + 16);
                uint64_t v82 = *(void *)(v105 + 24);
                swift_retain();
                swift_retain();
                uint64_t v83 = __DataStorage._bytes.getter();
                if (v83)
                {
                  uint64_t v84 = v83;
                  uint64_t v85 = __DataStorage._offset.getter();
                  if (__OFSUB__(v81, v85)) {
                    goto LABEL_150;
                  }
                  uint64_t v86 = v81;
                  uint64_t v87 = (const void *)(v84 + v81 - v85);
                  int64_t v88 = v82 - v86;
                  if (__OFSUB__(v82, v86)) {
                    goto LABEL_145;
                  }
                }
                else
                {
                  uint64_t v94 = v81;
                  uint64_t v87 = 0;
                  int64_t v88 = v82 - v94;
                  if (__OFSUB__(v82, v94)) {
                    goto LABEL_145;
                  }
                }
                uint64_t v95 = __DataStorage._length.getter();
                if (v95 >= v88) {
                  size_t v96 = v88;
                }
                else {
                  size_t v96 = v95;
                }
                if (!v104) {
                  goto LABEL_164;
                }
                if (!v87) {
                  goto LABEL_165;
                }
                int v44 = memcmp(v104, v87, v96);
                swift_release();
                swift_release();
              }
            }
            else
            {
              __s1[0] = v105;
              LOWORD(__s1[1]) = v21;
              BYTE2(__s1[1]) = BYTE2(v21);
              BYTE3(__s1[1]) = BYTE3(v21);
              BYTE4(__s1[1]) = BYTE4(v21);
              BYTE5(__s1[1]) = BYTE5(v21);
              if (!v36) {
                goto LABEL_158;
              }
              int v44 = memcmp(v36, __s1, BYTE6(v21));
            }
            uint64_t v60 = v19;
            unint64_t v61 = v18;
            goto LABEL_118;
          case 2uLL:
            uint64_t v45 = (const void *)(v18 & 0x3FFFFFFFFFFFFFFFLL);
            uint64_t v46 = *(void *)(v19 + 16);
            swift_retain();
            swift_retain();
            uint64_t v47 = (char *)__DataStorage._bytes.getter();
            os_log_type_t v104 = v45;
            if (!v47) {
              goto LABEL_46;
            }
            uint64_t v48 = __DataStorage._offset.getter();
            if (__OFSUB__(v46, v48)) {
              goto LABEL_134;
            }
            v47 += v46 - v48;
LABEL_46:
            __DataStorage._length.getter();
            if (v26)
            {
              os_signpost_id_t v102 = v47;
              if (v26 == 1)
              {
                uint64_t v49 = (int)v105;
                uint64_t v50 = (v105 >> 32) - (int)v105;
                if (v105 >> 32 < (int)v105) {
                  goto LABEL_139;
                }
                swift_retain();
                uint64_t v51 = __DataStorage._bytes.getter();
                if (v51)
                {
                  uint64_t v52 = v51;
                  uint64_t v53 = __DataStorage._offset.getter();
                  if (__OFSUB__(v49, v53)) {
                    goto LABEL_149;
                  }
                  int v54 = (const void *)(v52 + v49 - v53);
                }
                else
                {
                  int v54 = 0;
                }
                uint64_t v92 = __DataStorage._length.getter();
                if (v92 >= v50) {
                  size_t v93 = v50;
                }
                else {
                  size_t v93 = v92;
                }
                if (!v102) {
                  goto LABEL_162;
                }
                if (!v54) {
                  goto LABEL_163;
                }
                int v73 = memcmp(v102, v54, v93);
                outlined consume of Data._Representation(v105, v21);
              }
              else
              {
                uint64_t v74 = *(void *)(v105 + 16);
                uint64_t v75 = *(void *)(v105 + 24);
                swift_retain();
                swift_retain();
                uint64_t v76 = __DataStorage._bytes.getter();
                if (v76)
                {
                  uint64_t v77 = v76;
                  uint64_t v78 = __DataStorage._offset.getter();
                  if (__OFSUB__(v74, v78)) {
                    goto LABEL_148;
                  }
                  uint64_t v79 = (const void *)(v77 + v74 - v78);
                  int64_t v80 = v75 - v74;
                  if (__OFSUB__(v75, v74)) {
                    goto LABEL_143;
                  }
                }
                else
                {
                  uint64_t v79 = 0;
                  int64_t v80 = v75 - v74;
                  if (__OFSUB__(v75, v74)) {
                    goto LABEL_143;
                  }
                }
                uint64_t v90 = __DataStorage._length.getter();
                if (v90 >= v80) {
                  size_t v91 = v80;
                }
                else {
                  size_t v91 = v90;
                }
                if (!v102) {
                  goto LABEL_160;
                }
                if (!v79) {
                  goto LABEL_161;
                }
                int v73 = memcmp(v102, v79, v91);
                swift_release();
                swift_release();
              }
            }
            else
            {
              __s1[0] = v105;
              LOWORD(__s1[1]) = v21;
              BYTE2(__s1[1]) = BYTE2(v21);
              BYTE3(__s1[1]) = BYTE3(v21);
              BYTE4(__s1[1]) = BYTE4(v21);
              BYTE5(__s1[1]) = BYTE5(v21);
              if (!v47) {
                goto LABEL_157;
              }
              int v73 = memcmp(v47, __s1, BYTE6(v21));
            }
            goto LABEL_108;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v26) {
              goto LABEL_61;
            }
            if (v26 != 1)
            {
              uint64_t v69 = *(void *)(v20 + 16);
              uint64_t v70 = *(void *)(v20 + 24);
              swift_retain();
              swift_retain();
              uint64_t v67 = (char *)__DataStorage._bytes.getter();
              if (v67)
              {
                uint64_t v71 = __DataStorage._offset.getter();
                if (__OFSUB__(v69, v71)) {
                  goto LABEL_147;
                }
                v67 += v69 - v71;
              }
              BOOL v25 = __OFSUB__(v70, v69);
              int64_t v68 = v70 - v69;
              if (v25) {
                goto LABEL_141;
              }
              uint64_t v72 = __DataStorage._length.getter();
              if (!v67) {
                goto LABEL_156;
              }
LABEL_90:
              if (v72 >= v68) {
                size_t v89 = v68;
              }
              else {
                size_t v89 = v72;
              }
              int v73 = memcmp(__s1, v67, v89);
LABEL_108:
              swift_release();
              swift_release();
              if (v73) {
                goto LABEL_126;
              }
              goto LABEL_119;
            }
            uint64_t v55 = (int)v20;
            uint64_t v31 = (v20 >> 32) - (int)v20;
            if (v20 >> 32 < (int)v20) {
              goto LABEL_137;
            }
            swift_retain();
            uint64_t v56 = __DataStorage._bytes.getter();
            if (!v56) {
              goto LABEL_155;
            }
            uint64_t v33 = v56;
            uint64_t v57 = __DataStorage._offset.getter();
            BOOL v25 = __OFSUB__(v55, v57);
            uint64_t v35 = v55 - v57;
            if (v25) {
              goto LABEL_140;
            }
            break;
          default:
            __s1[0] = v19;
            LOWORD(__s1[1]) = v18;
            BYTE2(__s1[1]) = BYTE2(v18);
            BYTE3(__s1[1]) = BYTE3(v18);
            BYTE4(__s1[1]) = BYTE4(v18);
            BYTE5(__s1[1]) = BYTE5(v18);
            if (!v26)
            {
LABEL_61:
              uint64_t __s2 = v20;
              __int16 v113 = v21;
              char v114 = BYTE2(v21);
              char v115 = BYTE3(v21);
              char v116 = BYTE4(v21);
              char v117 = BYTE5(v21);
              if (memcmp(__s1, &__s2, BYTE6(v21))) {
                goto LABEL_126;
              }
              goto LABEL_119;
            }
            if (v26 != 1)
            {
              uint64_t v62 = *(void *)(v20 + 16);
              uint64_t v63 = *(void *)(v20 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = __DataStorage._bytes.getter();
              if (v64)
              {
                uint64_t v65 = v64;
                uint64_t v66 = __DataStorage._offset.getter();
                if (__OFSUB__(v62, v66)) {
                  goto LABEL_146;
                }
                uint64_t v67 = (char *)(v65 + v62 - v66);
                int64_t v68 = v63 - v62;
                if (__OFSUB__(v63, v62)) {
                  goto LABEL_142;
                }
              }
              else
              {
                uint64_t v67 = 0;
                int64_t v68 = v63 - v62;
                if (__OFSUB__(v63, v62)) {
                  goto LABEL_142;
                }
              }
              uint64_t v72 = __DataStorage._length.getter();
              if (!v67) {
                goto LABEL_159;
              }
              goto LABEL_90;
            }
            uint64_t v30 = (int)v20;
            uint64_t v31 = (v20 >> 32) - (int)v20;
            if (v20 >> 32 < (int)v20) {
              goto LABEL_136;
            }
            swift_retain();
            uint64_t v32 = __DataStorage._bytes.getter();
            if (!v32)
            {
              __DataStorage._length.getter();
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __DataStorage._length.getter();
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
              JUMPOUT(0x1B110E63CLL);
            }
            uint64_t v33 = v32;
            uint64_t v34 = __DataStorage._offset.getter();
            BOOL v25 = __OFSUB__(v30, v34);
            uint64_t v35 = v30 - v34;
            if (v25) {
              goto LABEL_138;
            }
            break;
        }
        uint64_t v58 = __DataStorage._length.getter();
        if (v58 >= v31) {
          size_t v59 = v31;
        }
        else {
          size_t v59 = v58;
        }
        int v44 = memcmp(__s1, (const void *)(v33 + v35), v59);
        uint64_t v60 = v105;
        unint64_t v61 = v21;
LABEL_118:
        outlined consume of Data._Representation(v60, v61);
        if (v44)
        {
LABEL_126:
          outlined destroy of CP_KeyValue((uint64_t)v107, a5);
          outlined destroy of CP_KeyValue((uint64_t)v13, a5);
          goto LABEL_127;
        }
LABEL_119:
        uint64_t v10 = v107;
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage();
        char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CP_KeyValue((uint64_t)v10, a5);
        outlined destroy of CP_KeyValue((uint64_t)v13, a5);
        BOOL v99 = v16-- != 0;
        if (v97)
        {
          v15 += v106;
          if (v99) {
            continue;
          }
        }
        return v97 & 1;
      }
    }
    char v97 = 1;
  }
  else
  {
LABEL_127:
    char v97 = 0;
  }
  return v97 & 1;
}

unint64_t Histogram.indexForValue(_:low:high:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((uint64_t)a3 < a2) {
    return 0;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5 <= a3)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v6 = v4 + 32;
  if (*(void *)(v6 + 8 * a3) <= result) {
    return a3;
  }
  uint64_t v7 = a2 + a3;
  if (__OFADD__(a2, a3)) {
    goto LABEL_25;
  }
  if (v7 >= 0) {
    uint64_t v8 = a2 + a3;
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (v7 >= -1)
  {
    uint64_t v9 = v8 >> 1;
    if (v9 < v5)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10 == result) {
        return v9;
      }
      if (v7 < 2) {
        return Histogram.indexForValue(_:low:high:)();
      }
      unint64_t v11 = *(void *)(v6 + 8 * (v9 - 1));
      if (v10 <= result || v11 > result) {
        return Histogram.indexForValue(_:low:high:)();
      }
      return v9 - 1;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t Histogram.minValue.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore9Histogram_minValue);
}

uint64_t Histogram.maxValue.getter()
{
  return AttachmentDataReport.assetTotalSize.getter(&OBJC_IVAR____TtC14CopresenceCore9Histogram_maxValue);
}

uint64_t Histogram.totalCount.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore9Histogram_totalCount;
  swift_beginAccess();
  return *(void *)v1;
}

Swift::Bool __swiftcall Histogram.recordValue(_:)(Swift::UInt64 a1)
{
  unint64_t v3 = Histogram.indexForValue(_:low:high:)(a1, 0, *(void *)(*(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets) + 16) - 1);
  char v5 = v4;
  if ((v4 & 1) == 0)
  {
    int64_t v6 = v3;
    uint64_t v7 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 144))(v23);
    uint64_t v9 = v8;
    unint64_t v10 = (void *)*v8;
    LOBYTE(v11) = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = (uint64_t)v10;
    if ((v11 & 1) == 0)
    {
      uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      unint64_t v10 = (void *)v11;
      *uint64_t v9 = v11;
    }
    if (v6 >= v10[2])
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = v10[v6 + 4];
      BOOL v13 = __CFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (!v13)
      {
        v10[v6 + 4] = v14;
        v7(v23, 0);
        unint64_t v15 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore9Histogram_totalCount);
        uint64_t v11 = swift_beginAccess();
        if (!__OFADD__(*v15, 1))
        {
          ++*v15;
          Swift::UInt64 v16 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 184))(v11);
          if ((v17 & 1) != 0 || v16 > a1)
          {
            uint64_t v18 = v1 + OBJC_IVAR____TtC14CopresenceCore9Histogram_minValue;
            Swift::UInt64 v16 = swift_beginAccess();
            *(void *)uint64_t v18 = a1;
            *(unsigned char *)(v18 + 8) = 0;
          }
          Swift::UInt64 v19 = (*(uint64_t (**)(Swift::UInt64))(*(void *)v1 + 208))(v16);
          if ((v20 & 1) != 0 || v19 < a1)
          {
            uint64_t v21 = v1 + OBJC_IVAR____TtC14CopresenceCore9Histogram_maxValue;
            swift_beginAccess();
            *(void *)uint64_t v21 = a1;
            *(unsigned char *)(v21 + 8) = 0;
          }
          goto LABEL_13;
        }
LABEL_16:
        __break(1u);
        return v11;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_13:
  LOBYTE(v11) = (v5 & 1) == 0;
  return v11;
}

Swift::Void __swiftcall Histogram.clearCounts()()
{
  uint64_t v1 = specialized Array.init(repeating:count:)(0, *(void *)(*(void *)(v0 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets) + 16));
  (*(void (**)(uint64_t))(*(void *)v0 + 136))(v1);
  uint64_t v2 = (void *)(v0 + OBJC_IVAR____TtC14CopresenceCore9Histogram_totalCount);
  swift_beginAccess();
  *uint64_t v2 = 0;
}

Swift::Void __swiftcall Histogram.clearMaxValue()()
{
}

Swift::Void __swiftcall Histogram.clearMinValue()()
{
}

uint64_t Histogram.clearMaxValue()(void *a1)
{
  uint64_t v2 = v1 + *a1;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  return result;
}

Swift::Void __swiftcall Histogram.reset()()
{
  (*(void (**)(void))(*(void *)v0 + 264))();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore9Histogram_minValue;
  swift_beginAccess();
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
  uint64_t v2 = v0 + OBJC_IVAR____TtC14CopresenceCore9Histogram_maxValue;
  swift_beginAccess();
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
}

uint64_t Histogram.conciseDescription.getter()
{
  return Histogram.conciseDescription.getter();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t Histogram.description.getter()
{
  return Histogram.conciseDescription.getter();
}

Swift::String __swiftcall Histogram.intervalDescription(omitEmptyBins:)(Swift::Bool omitEmptyBins)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
    uint64_t v5 = v2 + 40;
    int64_t v6 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v7 = 4;
    while (1)
    {
      unint64_t v11 = v7 - 4;
      if (omitEmptyBins)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 128))(isUniquelyReferenced_nonNull_native);
        if (v11 >= *(void *)(v12 + 16))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        uint64_t v14 = *(void *)(v12 + 8 * v7);
        uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
        if (!v14) {
          goto LABEL_6;
        }
      }
      if ((uint64_t)v11 >= *(void *)(v2 + 16) - 1)
      {
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._uint64_t countAndFlagsBits = 0x8FB8EFBE99E2202CLL;
        v21._object = (void *)0xAB00000000203A29;
        String.append(_:)(v21);
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v28 + 128))();
        if (v11 >= *(void *)(v12 + 16)) {
          goto LABEL_26;
        }
        swift_bridgeObjectRelease();
        v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_3;
        }
      }
      else
      {
        v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        v16._uint64_t countAndFlagsBits = 8236;
        v16._object = (void *)0xE200000000000000;
        String.append(_:)(v16);
        if ((unint64_t)(v7 - 3) >= *(void *)(v2 + 16)) {
          goto LABEL_24;
        }
        v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._uint64_t countAndFlagsBits = 2112041;
        v18._object = (void *)0xE300000000000000;
        String.append(_:)(v18);
        uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v28 + 128))();
        if (v11 >= *(void *)(v12 + 16)) {
          goto LABEL_25;
        }
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_3;
        }
      }
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      int64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
LABEL_3:
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
        int64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
      }
      v6[2] = v9 + 1;
      unint64_t v10 = &v6[2 * v9];
      v10[4] = 91;
      v10[5] = 0xE100000000000000;
LABEL_6:
      v5 += 8;
      if (++v7 - v3 == 4)
      {
        swift_bridgeObjectRelease();
        if (!v6[2]) {
          goto LABEL_21;
        }
LABEL_19:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
  }
  if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_19;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v23 = 0;
  unint64_t v25 = 0xE000000000000000;
LABEL_22:
  uint64_t v12 = v23;
  BOOL v13 = (void *)v25;
LABEL_27:
  result._object = v13;
  result._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t Histogram.deinit()
{
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore9Histogram_log, &demangling cache variable for type metadata for Logger?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Histogram.__deallocating_deinit()
{
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore9Histogram_log, &demangling cache variable for type metadata for Logger?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Histogram(uint64_t *a1, uint64_t *a2)
{
  return specialized static Histogram.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Histogram()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 304))();
}

uint64_t type metadata accessor for Histogram()
{
  uint64_t result = type metadata singleton initialization cache for Histogram;
  if (!type metadata singleton initialization cache for Histogram) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    int64_t v6 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, (uint64_t)v2);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  return v2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v12) + 16) >= 2uLL)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, [UInt64]>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v31 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= a2) {
        return v9;
      }
      unint64_t v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        unint64_t v16 = v31[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= a2) {
            return v9;
          }
          unint64_t v16 = v31[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= a2) {
              return v9;
            }
            unint64_t v16 = v31[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= a2) {
                  return v9;
                }
                unint64_t v16 = v31[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + v18);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v9 + 48) + v29) = v19;
    *(void *)(*(void *)(v9 + 56) + v29) = v20;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  unint64_t *v33;
  uint64_t v34;

  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v34) {
        return v9;
      }
      unint64_t v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v34) {
          return v9;
        }
        unint64_t v16 = v33[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v34) {
            return v9;
          }
          unint64_t v16 = v33[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v34) {
              return v9;
            }
            unint64_t v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v34) {
                  return v9;
                }
                unint64_t v16 = v33[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void **)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    unint64_t v22 = v21;
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    char v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v29 = v25 == v28;
        if (v25 == v28) {
          char v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t v31 = (void *)(*(void *)(v9 + 48) + 16 * v26);
    *uint64_t v31 = v20;
    v31[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v26) = v22;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v52 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v49 = (char *)&v43 - v12;
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  uint64_t v48 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Date>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v14 = result;
  size_t v43 = a1;
  uint64_t v44 = a2;
  if (a2 < 1) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = *a1;
  }
  uint64_t v16 = 0;
  uint64_t v46 = v50 + 32;
  uint64_t v47 = v50 + 16;
  uint64_t v17 = result + 64;
  uint64_t v18 = v48;
  uint64_t v45 = a4;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v51 = v16;
      unint64_t v20 = v19 | (v16 << 6);
    }
    else
    {
      uint64_t v21 = v16 + 1;
      if (__OFADD__(v16, 1)) {
        goto LABEL_40;
      }
      if (v21 >= v44) {
        return v14;
      }
      unint64_t v22 = v43[v21];
      uint64_t v23 = v16 + 1;
      if (!v22)
      {
        uint64_t v23 = v16 + 2;
        if (v16 + 2 >= v44) {
          return v14;
        }
        unint64_t v22 = v43[v23];
        if (!v22)
        {
          uint64_t v23 = v16 + 3;
          if (v16 + 3 >= v44) {
            return v14;
          }
          unint64_t v22 = v43[v23];
          if (!v22)
          {
            uint64_t v24 = v16 + 4;
            if (v16 + 4 >= v44) {
              return v14;
            }
            unint64_t v22 = v43[v24];
            if (!v22)
            {
              while (1)
              {
                uint64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v23 >= v44) {
                  return v14;
                }
                unint64_t v22 = v43[v23];
                ++v24;
                if (v22) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v23 = v16 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v15 = (v22 - 1) & v22;
      uint64_t v51 = v23;
      unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }
    uint64_t v25 = a4[7];
    unint64_t v26 = (uint64_t *)(a4[6] + 16 * v20);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v49;
    uint64_t v30 = v50;
    uint64_t v31 = *(void *)(v50 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v49, v25 + v31 * v20, v18);
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v32(v52, v29, v18);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v36 = __clz(__rbit64((-1 << v34) & ~*(void *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v18 = v48;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v33) >> 6;
      uint64_t v18 = v48;
      do
      {
        if (++v35 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v39 = v35 == v38;
        if (v35 == v38) {
          unint64_t v35 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v35);
      }
      while (v40 == -1);
      unint64_t v36 = __clz(__rbit64(~v40)) + (v35 << 6);
    }
    *(void *)(v17 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    uint64_t v41 = (void *)(*(void *)(v14 + 48) + 16 * v36);
    *uint64_t v41 = v27;
    v41[1] = v28;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v32)(*(void *)(v14 + 56) + v36 * v31, v52, v18);
    ++*(void *)(v14 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v45;
    uint64_t v16 = v51;
    if (!a3) {
      return v14;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized static Histogram.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!specialized static Array<A>.== infix(_:_:)(*(void **)(a1 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets), *(void **)(a2 + OBJC_IVAR____TtC14CopresenceCore9Histogram_buckets)))return 0; {
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(*(void *)a1 + 128))();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(void))(*(void *)a2 + 128))();
  BOOL v6 = specialized static Array<A>.== infix(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRelease();
  if (!v6) {
    return 0;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(v7);
  char v10 = v9;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a2 + 184))();
  if (v10)
  {
    if ((v12 & 1) == 0) {
      return 0;
    }
    goto LABEL_8;
  }
  uint64_t v13 = result;
  uint64_t result = 0;
  if ((v12 & 1) == 0 && v8 == v13)
  {
LABEL_8:
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(result);
    char v16 = v15;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)a2 + 208))();
    if ((v16 & 1) == 0)
    {
      uint64_t v18 = result;
      uint64_t result = 0;
      if ((v17 & 1) != 0 || v14 != v18) {
        return result;
      }
LABEL_15:
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(result);
      return v19 == (*(uint64_t (**)(void))(*(void *)a2 + 232))();
    }
    if (v17) {
      goto LABEL_15;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1B110FEBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1B110FF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 136);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B110FF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 184))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B110FFB0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC14CopresenceCore9Histogram_minValue);
}

uint64_t sub_1B110FFBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 208))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B1110010(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC14CopresenceCore9Histogram_maxValue);
}

uint64_t keypath_set_2Tm(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  char v6 = *((unsigned char *)a1 + 8);
  uint64_t v7 = *a2 + *a5;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v7 = v5;
  *(unsigned char *)(v7 + 8) = v6;
  return result;
}

uint64_t sub_1B1110078@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 232))();
  *a2 = result;
  return result;
}

uint64_t sub_1B11100C4(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC14CopresenceCore9Histogram_totalCount);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t ObjC metadata update function for Histogram()
{
  return type metadata accessor for Histogram();
}

void type metadata completion function for Histogram()
{
  type metadata accessor for Logger?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for Histogram(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Histogram);
}

uint64_t dispatch thunk of Histogram.bucketCounts.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of Histogram.bucketCounts.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of Histogram.bucketCounts.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of Histogram.__allocating_init(buckets:log:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of Histogram.minValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of Histogram.maxValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of Histogram.totalCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of Histogram.recordValue(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of Histogram.clearCounts()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of Histogram.clearMaxValue()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of Histogram.clearMinValue()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of Histogram.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of Histogram.conciseDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of Histogram.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of Histogram.intervalDescription(omitEmptyBins:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

void type metadata accessor for Logger?()
{
  if (!lazy cache variable for type metadata for Logger?)
  {
    type metadata accessor for Logger();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Logger?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnknownStorage and conformance UnknownStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage;
  if (!lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage)
  {
    type metadata accessor for UnknownStorage();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage);
  }
  return result;
}

uint64_t outlined destroy of CP_KeyValue(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of CP_EncryptionID(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of CP_KeyValue(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t DarwinNotification.__allocating_init(name:queue:)(char a1, void *a2)
{
  if (a1) {
    uint64_t v3 = 0xD000000000000056;
  }
  else {
    uint64_t v3 = 0xD00000000000003ALL;
  }
  if (a1) {
    uint64_t v4 = 0x80000001B115A6C0;
  }
  else {
    uint64_t v4 = 0x80000001B115A680;
  }
  uint64_t v5 = swift_allocObject();
  DarwinNotification.init(name:queue:)(v3, v4, a2);
  return v5;
}

uint64_t DarwinNotification.state.getter()
{
  state64[4] = *MEMORY[0x1E4F143B8];
  state64[0] = 0;
  swift_beginAccess();
  if (!notify_get_state(*(_DWORD *)(v0 + 32), state64)) {
    return state64[0];
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B0DF7000, v2, v3, "Could not get current state.", v4, 2u);
    MEMORY[0x1B3EA39E0](v4, -1, -1);
  }

  return 0;
}

uint64_t DarwinNotification.state.setter(uint64_t a1)
{
  swift_beginAccess();
  return notify_set_state(*(_DWORD *)(v1 + 32), a1);
}

Swift::Void __swiftcall DarwinNotification.post()()
{
  uint64_t v0 = String.utf8CString.getter();
  notify_post((const char *)(v0 + 32));
  swift_release();
}

uint64_t DarwinNotification.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void (*DarwinNotification.state.modify(void *a1))(uint64_t a1)
{
  os_log_type_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 3;
  v3[4] = 0;
  uint64_t v5 = v3 + 4;
  v3[5] = v1;
  swift_beginAccess();
  if (notify_get_state(*(_DWORD *)(v1 + 32), v5))
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      char v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v9 = 0;
      _os_log_impl(&dword_1B0DF7000, v7, v8, "Could not get current state.", v9, 2u);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }

    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *v5;
  }
  *uint64_t v4 = v10;
  return DarwinNotification.state.modify;
}

void DarwinNotification.state.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  notify_set_state(*(_DWORD *)(*(void *)(*(void *)a1 + 40) + 32), *(void *)(*(void *)a1 + 24));
  free(v1);
}

uint64_t DarwinNotification.__allocating_init(name:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  DarwinNotification.init(name:queue:)(a1, a2, a3);
  return v6;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int32) -> ()(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t DarwinNotification.deinit()
{
  swift_beginAccess();
  notify_cancel(*(_DWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DarwinNotification.__deallocating_deinit()
{
  swift_beginAccess();
  notify_cancel(*(_DWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1110BF4()
{
  swift_unownedRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in DarwinNotification.init(name:queue:)()
{
  swift_unownedRetainStrong();
  DarwinNotification.handleNotification()();
  return swift_release();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t sub_1B1110C74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DarwinNotification.state.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B1110CA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  return notify_set_state(*(_DWORD *)(v3 + 32), v2);
}

uint64_t method lookup function for DarwinNotification(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DarwinNotification);
}

uint64_t dispatch thunk of DarwinNotification.__allocating_init(name:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t PeoplePickerHostConnection.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for PeoplePickerHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t PeoplePickerHostConnection.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + direct field offset for PeoplePickerHostConnection.delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PeoplePickerHostConnection.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for PeoplePickerHostConnection.delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

Swift::Void __swiftcall PeoplePickerHostConnection.handleHostConnectionInvalidated()()
{
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v2;

    _os_log_impl(&dword_1B0DF7000, v3, v4, "handleHostConnectionInvalidated: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
  }
  os_log_type_t v8 = &v2[direct field offset for PeoplePickerHostConnection.delegate];
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v8))
  {
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
    swift_unknownObjectRelease();
  }
}

char *PeoplePickerHostConnection.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[direct field offset for PeoplePickerHostConnection.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

char *PeoplePickerHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  *(void *)(v2 + direct field offset for PeoplePickerHostConnection.delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t PeoplePickerHostConnection.__ivar_destroyer()
{
  return outlined destroy of weak ActivitySessionManagerProtocol?(v0 + direct field offset for PeoplePickerHostConnection.delegate);
}

id PeoplePickerHostConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PeoplePickerHostConnection.__ivar_destroyer(uint64_t a1)
{
  return outlined destroy of weak ActivitySessionManagerProtocol?(a1 + direct field offset for PeoplePickerHostConnection.delegate);
}

uint64_t PeoplePickerHostConnection.checkIn(_:reply:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = v2 + direct field offset for PeoplePickerHostConnection.delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v5))
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, ObjectType, v6);
    swift_unknownObjectRelease();
  }
  return a2(1);
}

uint64_t PeoplePickerHostConnection.updateActivity(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for PeoplePickerHostConnection.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B11115B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for PeoplePickerHostConnection.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1B111160C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + direct field offset for PeoplePickerHostConnection.delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of PeoplePickerHostConnectionDelegate.handleHostConnectionInvalidated()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PeoplePickerHostConnectionDelegate.checkIn(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PeoplePickerHostConnectionDelegate.updateActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for PeoplePickerHostConnection()
{
  uint64_t result = type metadata singleton initialization cache for PeoplePickerHostConnection;
  if (!type metadata singleton initialization cache for PeoplePickerHostConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PeoplePickerHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PeoplePickerHostConnection()
{
  return type metadata accessor for PeoplePickerHostConnection();
}

uint64_t specialized PeoplePickerHostConnection.checkIn(_:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + direct field offset for PeoplePickerHostConnection.delegate;
  swift_beginAccess();
  if (MEMORY[0x1B3EA3B30](v5))
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, ObjectType, v6);
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.otherParticipants.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v4 = (void *)MEMORY[0x1E4FBC868];
LABEL_17:
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  uint64_t v3 = (uint64_t *)(v1 + 32);
  swift_bridgeObjectRetain();
  os_log_type_t v4 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    uint64_t v6 = *v3++;
    uint64_t v5 = v6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    uint64_t v10 = v4[2];
    BOOL v11 = (v8 & 1) == 0;
    uint64_t v12 = v10 + v11;
    if (__OFADD__(v10, v11)) {
      break;
    }
    char v13 = v8;
    if (v4[3] >= v12)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v8) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v13) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v13 & 1) != (v15 & 1)) {
        goto LABEL_20;
      }
      unint64_t v9 = v14;
      if (v13)
      {
LABEL_3:
        *(void *)(v4[7] + 8 * v9) = v5;
        goto LABEL_4;
      }
    }
    v4[(v9 >> 6) + 8] |= 1 << v9;
    uint64_t v16 = 8 * v9;
    *(void *)(v4[6] + v16) = v5;
    *(void *)(v4[7] + v16) = v5;
    uint64_t v17 = v4[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_19;
    }
    v4[2] = v19;
LABEL_4:
    swift_bridgeObjectRelease();
    if (!--v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.uploadStatus.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v8 = (char *)&v23 - v7;
  uint64_t v9 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  char v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (uint64_t *)((char *)&v23 - v15);
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    switch(*(void *)(v1 + 16))
    {
      case 1:
        *a1 = 0;
        a1[1] = 0;
        unint64_t v18 = 0xF000000000000000;
        goto LABEL_8;
      case 2:
        uint64_t v19 = v1
            + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0)
                     + 28);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v19, (uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
        if (v24(v8, 1, v9) == 1)
        {
          uint64_t *v16 = 0;
          v16[1] = 0;
          void v16[2] = 0xC000000000000000;
          UnknownStorage.init()();
          outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        }
        else
        {
          outlined init with take of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v8, (uint64_t)v16, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        }
        uint64_t v20 = *v16;
        _s14CopresenceCore29AttachmentLedger_MMCSMetadataV8BlobDataVWOhTm_0((uint64_t)v16, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v19, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        if (v24(v6, 1, v9) == 1)
        {
          void *v13 = 0;
          v13[1] = 0;
          void v13[2] = 0xC000000000000000;
          UnknownStorage.init()();
          outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        }
        else
        {
          outlined init with take of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, (uint64_t)v13, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        }
        uint64_t v21 = v13[1];
        unint64_t v22 = v13[2];
        outlined copy of Data._Representation(v21, v22);
        uint64_t result = _s14CopresenceCore29AttachmentLedger_MMCSMetadataV8BlobDataVWOhTm_0((uint64_t)v13, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        *a1 = v20;
        a1[1] = v21;
        a1[2] = v22;
        return result;
      case 3:
        *a1 = 0;
        a1[1] = 0;
        unint64_t v18 = 0xB000000000000000;
LABEL_8:
        a1[2] = v18;
        break;
      default:
        goto LABEL_3;
    }
  }
  else
  {
LABEL_3:
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *uint64_t v17 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t AttachmentLedger_AttachmentMetadata.uploadStatus.getter@<X0>(void *a1@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v44 - v5;
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v50 = (uint64_t *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v44 - v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v18 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v19);
  uint64_t v25 = (char *)&v44 - v24;
  if (*(unsigned char *)(v1 + 32) == 1)
  {
    switch(*(void *)(v1 + 24))
    {
      case 1:
        uint64_t v27 = v53;
        *uint64_t v53 = 0;
        v27[1] = 0;
        unint64_t v28 = 0xF000000000000000;
        goto LABEL_8;
      case 2:
        uint64_t v48 = v7;
        uint64_t v29 = v23;
        uint64_t v46 = v1 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) + 36);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
        uint64_t v49 = v29 + 48;
        uint64_t v47 = v30;
        unsigned int v31 = v30(v17, 1, v18);
        uint64_t v32 = v48;
        uint64_t v33 = v52;
        if (v31 == 1)
        {
          *(void *)uint64_t v25 = 0;
          *((void *)v25 + 1) = 0xE000000000000000;
          *((void *)v25 + 2) = 0;
          *((void *)v25 + 3) = 0xE000000000000000;
          *((_OWORD *)v25 + 2) = xmmword_1B113B700;
          *((_OWORD *)v25 + 3) = xmmword_1B113B700;
          UnknownStorage.init()();
          unint64_t v34 = &v25[*(int *)(v18 + 36)];
          uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
          v45(v34, 1, 1, v32);
          v45(&v25[*(int *)(v18 + 40)], 1, 1, v32);
          uint64_t v33 = v52;
          outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        }
        else
        {
          outlined init with take of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, (uint64_t)v25, type metadata accessor for AttachmentLedger_MMCSMetadata);
        }
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v25[*(int *)(v18 + 40)], (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        unint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
        if (v35(v6, 1, v32) == 1)
        {
          uint64_t *v11 = 0;
          v11[1] = 0;
          v11[2] = 0xC000000000000000;
          UnknownStorage.init()();
          outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        }
        else
        {
          outlined init with take of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        }
        _s14CopresenceCore29AttachmentLedger_MMCSMetadataV8BlobDataVWOhTm_0((uint64_t)v25, type metadata accessor for AttachmentLedger_MMCSMetadata);
        uint64_t v36 = *v11;
        _s14CopresenceCore29AttachmentLedger_MMCSMetadataV8BlobDataVWOhTm_0((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, (uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        if (v47(v15, 1, v18) == 1)
        {
          *(void *)uint64_t v21 = 0;
          *((void *)v21 + 1) = 0xE000000000000000;
          *((void *)v21 + 2) = 0;
          *((void *)v21 + 3) = 0xE000000000000000;
          *((_OWORD *)v21 + 2) = xmmword_1B113B700;
          *((_OWORD *)v21 + 3) = xmmword_1B113B700;
          UnknownStorage.init()();
          char v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
          v37(&v21[*(int *)(v18 + 36)], 1, 1, v32);
          v37(&v21[*(int *)(v18 + 40)], 1, 1, v32);
          outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        }
        else
        {
          outlined init with take of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v15, (uint64_t)v21, type metadata accessor for AttachmentLedger_MMCSMetadata);
        }
        uint64_t v38 = v51;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v21[*(int *)(v18 + 40)], v51, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        unsigned int v39 = v35((char *)v38, 1, v32);
        uint64_t v40 = v50;
        if (v39 == 1)
        {
          void *v50 = 0;
          v40[1] = 0;
          uint64_t v40[2] = 0xC000000000000000;
          UnknownStorage.init()();
          outlined destroy of UUID?(v38, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        }
        else
        {
          outlined init with take of AttachmentLedger_MMCSMetadata.BlobData(v38, (uint64_t)v50, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        }
        _s14CopresenceCore29AttachmentLedger_MMCSMetadataV8BlobDataVWOhTm_0((uint64_t)v21, type metadata accessor for AttachmentLedger_MMCSMetadata);
        uint64_t v41 = v40[1];
        unint64_t v42 = v40[2];
        outlined copy of Data._Representation(v41, v42);
        uint64_t result = _s14CopresenceCore29AttachmentLedger_MMCSMetadataV8BlobDataVWOhTm_0((uint64_t)v40, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        size_t v43 = v53;
        *uint64_t v53 = v36;
        v43[1] = v41;
        v43[2] = v42;
        return result;
      case 3:
        uint64_t v27 = v53;
        *uint64_t v53 = 0;
        v27[1] = 0;
        unint64_t v28 = 0xB000000000000000;
LABEL_8:
        v27[2] = v28;
        break;
      default:
        goto LABEL_3;
    }
  }
  else
  {
LABEL_3:
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *unint64_t v26 = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t _s14CopresenceCore29AttachmentLedger_MMCSMetadataV8BlobDataVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void thunk for @escaping @callee_guaranteed (@guaranteed PresenceSessionConnectionInfo?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t BackgroundSessionManagerXPCClient.begin(request:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](BackgroundSessionManagerXPCClient.begin(request:), 0, 0);
}

uint64_t BackgroundSessionManagerXPCClient.begin(request:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = BackgroundSessionManagerXPCClient.begin(request:);
  uint64_t v4 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4188160](v3, 0, 0, 0x6572286E69676562, 0xEF293A7473657571, partial apply for closure #1 in BackgroundSessionManagerXPCClient.begin(request:), v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = BackgroundSessionManagerXPCClient.begin(request:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = SKPresenceDataSource.releasePresence();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in BackgroundSessionManagerXPCClient.begin(request:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.begin(request:);
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  void aBlock[3] = &block_descriptor_26_3;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = a3;
  swift_release();
  objc_msgSend(a2, sel_beginWithRequest_completion_, v12, v11);
  _Block_release(v11);
}

void partial apply for closure #1 in BackgroundSessionManagerXPCClient.begin(request:)(uint64_t a1)
{
  closure #1 in BackgroundSessionManagerXPCClient.begin(request:)(a1, *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerXPCClient.begin(request:)(void *a1, void *a2)
{
  if (a1)
  {
    id v4 = a1;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    id v6 = a2;
    id v7 = a1;
    id v8 = v6;
    id v9 = a1;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v30 = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      type metadata accessor for BackgroundSessionCreationRequest();
      id v14 = v8;
      uint64_t v15 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      id v17 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v18 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v10, v11, "Failed to begin activity: %s with error %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v13, -1, -1);
      MEMORY[0x1B3EA39E0](v12, -1, -1);
    }
    else
    {
    }
    uint64_t v30 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.default);
    id v21 = a2;
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v30 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      type metadata accessor for BackgroundSessionCreationRequest();
      id v26 = v21;
      uint64_t v27 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v22, v23, "Successfully began activity: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t BackgroundSessionManagerXPCClient.leave(identifier:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](BackgroundSessionManagerXPCClient.leave(identifier:), 0, 0);
}

uint64_t BackgroundSessionManagerXPCClient.leave(identifier:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  uint64_t v4 = MEMORY[0x1E4FBC848];
  v3[1] = BackgroundSessionManagerXPCClient.leave(identifier:);
  return MEMORY[0x1F4188160](v3, 0, 0, 0xD000000000000012, 0x80000001B1163450, partial apply for closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:), v2, v4 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = BackgroundSessionManagerXPCClient.leave(identifier:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = BackgroundSessionManagerXPCClient.leave(identifier:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

void closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:)(uint64_t a1, void *a2, uint64_t a3)
{
  id v20 = a2;
  uint64_t v18 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  uint64_t v11 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v4);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (v9 + *(unsigned __int8 *)(v5 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  void aBlock[3] = &block_descriptor_20_1;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  Class v16 = isa;
  objc_msgSend(v20, sel_leaveWithIdentifier_completion_, isa, v15);
  _Block_release(v15);
}

void partial apply for closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:)(uint64_t a1)
{
  closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:)(a1, *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](BackgroundSessionManagerXPCClient.updateMembers(identifier:members:), 0, 0);
}

uint64_t BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  uint64_t v4 = MEMORY[0x1E4FBC848];
  v3[1] = BackgroundSessionManagerXPCClient.updateMembers(identifier:members:);
  return MEMORY[0x1F4188160](v3, 0, 0, 0xD000000000000022, 0x80000001B1163470, partial apply for closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:), v1, v4 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    long long v2 = BackgroundSessionManagerXPCClient.updateMembers(identifier:members:);
  }
  else
  {
    swift_task_dealloc();
    long long v2 = SKPresenceDataSource.releasePresence();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(uint64_t a1, void *a2, uint64_t a3, objc_class *a4)
{
  uint64_t v20 = a1;
  Class v21 = a4;
  id v23 = a2;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v5 = *(void *)(v19 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v19);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  Class v21 = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  uint64_t v11 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v19);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (v9 + *(unsigned __int8 *)(v5 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  void aBlock[3] = &block_descriptor_14;
  uint64_t v15 = _Block_copy(aBlock);
  swift_release();
  Class v16 = isa;
  Class v17 = v21;
  objc_msgSend(v23, sel_updateMembersWithIdentifier_members_completion_, isa, v21, v15);
  _Block_release(v15);
}

void partial apply for closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(uint64_t a1)
{
  closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(a1, *(void **)(v1 + 24), *(void *)(v1 + 32), *(objc_class **)(v1 + 40));
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:)(void *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  Class v16 = (char *)&v39 - v15;
  if (a1)
  {
    id v17 = a1;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
    id v19 = a1;
    id v20 = a1;
    Class v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      unsigned int v39 = a4;
      uint64_t v25 = v24;
      uint64_t v42 = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v40 = a3;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v41 = (uint64_t)a1;
      id v28 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v29 = String.init<A>(reflecting:)();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v21, v22, v39, (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v25, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
    uint64_t v42 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, a2, v10);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v42 = v35;
      unsigned int v39 = a5;
      uint64_t v40 = a3;
      *(_DWORD *)unint64_t v34 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      _os_log_impl(&dword_1B0DF7000, v32, v33, v39, v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v35, -1, -1);
      MEMORY[0x1B3EA39E0](v34, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t BackgroundSessionManagerXPCClient.createPresenceSession(with:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return MEMORY[0x1F4188298](BackgroundSessionManagerXPCClient.createPresenceSession(with:), 0, 0);
}

uint64_t BackgroundSessionManagerXPCClient.createPresenceSession(with:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = type metadata accessor for PresenceSessionConnectionInfo();
  *uint64_t v3 = v0;
  v3[1] = BackgroundSessionManagerXPCClient.createPresenceSession(with:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD00000000000001CLL, 0x80000001B11634A0, partial apply for closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:), v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = BackgroundSessionManagerXPCClient.updateMembers(identifier:members:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = BackgroundSessionManagerXPCClient.createPresenceSession(with:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

void closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:);
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed PresenceSessionConnectionInfo?, @guaranteed Error?) -> ();
  void aBlock[3] = &block_descriptor_40;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = a3;
  swift_release();
  objc_msgSend(a2, sel_createPresenceSessionWith_completion_, v12, v11);
  _Block_release(v11);
}

void partial apply for closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:)(uint64_t a1)
{
  closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:)(a1, *(void **)(v1 + 24), *(void **)(v1 + 32));
}

void closure #1 in closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:)(void *a1, id a2, void *a3)
{
  if (a2)
  {
    id v5 = a2;
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    id v7 = a3;
    id v8 = a2;
    id v9 = v7;
    id v10 = a2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v37 = v35;
      *(_DWORD *)uint64_t v13 = 138412546;
      id v15 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v14 = v9;

      *(_WORD *)(v13 + 12) = 2080;
      id v16 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v17 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v11, v12, "Failed to create presence session with request: %@ with error: %s", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v35, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }
    else
    {
    }
    uint64_t v37 = (uint64_t)a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.default);
    id v21 = a1;
    id v22 = a3;
    id v23 = v21;
    id v24 = v22;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      id v28 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = v36;
      *(_DWORD *)uint64_t v27 = 138412546;
      id v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v24;

      *(_WORD *)(v27 + 12) = 2080;
      if (a1)
      {
        type metadata accessor for PresenceSessionConnectionInfo();
        id v30 = v23;
        uint64_t v31 = String.init<A>(reflecting:)();
        unint64_t v33 = v32;
      }
      else
      {
        unint64_t v33 = 0xE300000000000000;
        uint64_t v31 = 7104878;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v25, v26, "Successfully created presence session with request: %@, connectionInfo: %s", (uint8_t *)v27, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v28, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v36, -1, -1);
      MEMORY[0x1B3EA39E0](v27, -1, -1);
    }
    else
    {
    }
    if (a1)
    {
      uint64_t v37 = (uint64_t)v23;
      id v34 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      __break(1u);
    }
  }
}

void static BackgroundSessionManagerInterface.identity.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

id static BackgroundSessionManagerInterface.hostObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (void **)&static BackgroundSessionManagerInterface.hostObjectInterface);
}

id one-time initialization function for clientObjectInterface()
{
  id result = closure #1 in variable initialization expression of static BackgroundSessionManagerInterface.clientObjectInterface();
  static BackgroundSessionManagerInterface.clientObjectInterface = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static BackgroundSessionManagerInterface.clientObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09D01B0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  *(void *)(inited + 40) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updateWithActivitySessions_, 0, 0);
  swift_setDeallocating();
  uint64_t v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B1138A70;
  *(void *)(v2 + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(v2 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, (uint64_t)sel_sessionDidReceiveUpdatedUnknownParticipantListWithSessionID_unknownParticipants_, 1, 0);
  swift_setDeallocating();
  return v0;
}

id static BackgroundSessionManagerInterface.clientObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (void **)&static BackgroundSessionManagerInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance BackgroundSessionManagerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for hostObjectInterface, (void **)&static BackgroundSessionManagerInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance BackgroundSessionManagerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for clientObjectInterface, (void **)&static BackgroundSessionManagerInterface.clientObjectInterface);
}

ValueMetadata *type metadata accessor for BackgroundSessionManagerInterface()
{
  return &type metadata for BackgroundSessionManagerInterface;
}

uint64_t sub_1B1114A8C()
{
  return objectdestroyTm_10(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
}

void partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
  id v5 = *(void **)(v2 + 16);
  closure #1 in closure #1 in BackgroundSessionManagerXPCClient.createPresenceSession(with:)(a1, a2, v5);
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(a1, "Failed to update members on identifier: %s with error: %s", "Successfully updated members on identifier: %s");
}

uint64_t objectdestroy_10Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return MEMORY[0x1F4186498](v0, v10, v11);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(a1, "Failed to leave identifier: %s with error: %s", "Successfully left identifier: %s");
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.updateMembers(identifier:members:)(void *a1, const char *a2, const char *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                  - 8);
  return closure #1 in closure #1 in BackgroundSessionManagerXPCClient.leave(identifier:)(a1, v3 + v8, v3 + ((v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), a2, a3);
}

uint64_t sub_1B1114D90()
{
  return objectdestroyTm_10(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t objectdestroyTm_10(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return MEMORY[0x1F4186498](v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerXPCClient.begin(request:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v3 = *(void **)(v1 + 16);
  return closure #1 in closure #1 in BackgroundSessionManagerXPCClient.begin(request:)(a1, v3);
}

BOOL static TopicDecryptionError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TopicDecryptionError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TopicDecryptionError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t TopicCryptorProvider.validEncryptionID(data:)()
{
  return 1;
}

unint64_t lazy protocol witness table accessor for type TopicDecryptionError and conformance TopicDecryptionError()
{
  unint64_t result = lazy protocol witness table cache variable for type TopicDecryptionError and conformance TopicDecryptionError;
  if (!lazy protocol witness table cache variable for type TopicDecryptionError and conformance TopicDecryptionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicDecryptionError and conformance TopicDecryptionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TopicDecryptionError and conformance TopicDecryptionError;
  if (!lazy protocol witness table cache variable for type TopicDecryptionError and conformance TopicDecryptionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicDecryptionError and conformance TopicDecryptionError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TopicDecryptionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B11150B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TopicDecryptionError()
{
  return &type metadata for TopicDecryptionError;
}

uint64_t dispatch thunk of TopicCryptorProvider.encryptionID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TopicCryptorProvider.encryptionIDPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TopicCryptorProvider.decryptionIDSet.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TopicCryptorProvider.decryptionIDSetPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TopicCryptorProvider.validEncryptionID(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of TopicCryptorProvider.refresh(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of TopicCryptorProvider.encrypt(data:seqNum:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of TopicCryptorProvider.decrypt(data:encryptionID:seqNum:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of TopicCryptorProvider.refreshEncryptionIDSet(participantIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

void PubSubClient.TopicCategory.init(activity:)(void *a1@<X0>, char *a2@<X8>)
{
  if (a1)
  {
    if (objc_msgSend(a1, sel_isSystemActivity))
    {

      char v4 = 2;
    }
    else
    {
      unsigned int v5 = objc_msgSend(a1, sel_isScreenSharingActivity);

      if (v5) {
        char v4 = 3;
      }
      else {
        char v4 = 1;
      }
    }
  }
  else
  {
    char v4 = 0;
  }
  *a2 = v4;
}

uint64_t static PubSubClientError.== infix(_:_:)()
{
  return 1;
}

void PubSubClientError.hash(into:)()
{
}

Swift::Int PubSubClientError.hashValue.getter()
{
  return Hasher._finalize()();
}

CopresenceCore::PubSubClient::TopicCategory_optional __swiftcall PubSubClient.TopicCategory.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  char v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PubSubClient.TopicCategory.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 5;
  if (v5 < 5) {
    char v7 = v5;
  }
  *char v4 = v7;
  return result;
}

uint64_t PubSubClient.TopicCategory.rawValue.getter()
{
  uint64_t result = 0x6E776F6E6B6E75;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7368801;
      break;
    case 2:
      uint64_t result = 0x6D6574737973;
      break;
    case 3:
      uint64_t result = 0x68536E6565726373;
      break;
    case 4:
      uint64_t result = 0x636E795374736166;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubClient.TopicCategory(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PubSubClient.TopicCategory()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PubSubClient.TopicCategory()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PubSubClient.TopicCategory()
{
  return Hasher._finalize()();
}

CopresenceCore::PubSubClient::TopicCategory_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PubSubClient.TopicCategory(Swift::String *a1)
{
  return PubSubClient.TopicCategory.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PubSubClient.TopicCategory(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6E776F6E6B6E75;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 7368801;
      goto LABEL_3;
    case 2:
      *a1 = 0x6D6574737973;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x68536E6565726373;
      a1[1] = 0xEB00000000657261;
      break;
    case 4:
      *a1 = 0x636E795374736166;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t PubSubClient.serviceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 16, a1);
}

double PubSubClient.createTopicRpcRetryIntervalSeconds.getter()
{
  return *(double *)(v0 + 56);
}

uint64_t PubSubClient.createTopicMaxAttempts.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t PubSubClient.reporter.getter()
{
  return swift_retain();
}

uint64_t PubSubClient.reporterTag.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PubSubClient.__allocating_init(serviceProvider:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBC870];
  *(void *)(v12 + 96) = MEMORY[0x1E4FBC868];
  *(void *)(v12 + 104) = v13;
  outlined init with take of BackgroundSessionManagerDataSource(a1, v12 + 16);
  *(double *)(v12 + 56) = a6;
  *(void *)(v12 + 64) = a2;
  *(void *)(v12 + 72) = a3;
  *(void *)(v12 + 80) = a4;
  *(void *)(v12 + 88) = a5;
  return v12;
}

uint64_t PubSubClient.init(serviceProvider:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12 = MEMORY[0x1E4FBC870];
  *(void *)(v6 + 96) = MEMORY[0x1E4FBC868];
  *(void *)(v6 + 104) = v12;
  outlined init with take of BackgroundSessionManagerDataSource(a1, v6 + 16);
  *(double *)(v6 + 56) = a6;
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 72) = a3;
  *(void *)(v6 + 80) = a4;
  *(void *)(v6 + 88) = a5;
  return v6;
}

uint64_t PubSubClient.__allocating_init(pluginClient:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v13 = type metadata accessor for PluginPubSubServiceProvider();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  void v16[3] = v13;
  v16[4] = &protocol witness table for PluginPubSubServiceProvider;
  v16[0] = v14;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, double))(v6 + 184))(v16, a2, a3, a4, a5, a6);
}

uint64_t PubSubClient.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 104) = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PubSubClient.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 104) = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall PubSubClient.close()()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t PubSubClient.updateVirtualParticipant(_:localParticipantID:)(void *a1, uint64_t a2)
{
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  return (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t))(v6 + 32))(objc_msgSend(a1, sel_identifier), a2, v5, v6);
}

uint64_t PubSubClient.localParticipantID.getter()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v36 = a8;
  uint64_t v30 = a7;
  uint64_t v33 = a4;
  uint64_t v31 = a3;
  uint64_t v34 = a2;
  uint64_t v32 = a1;
  uint64_t v35 = a9;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  id v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  unint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *a5;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(a6, (uint64_t)v44, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  uint64_t v21 = v11[5];
  uint64_t v20 = v11[6];
  __swift_project_boxed_opaque_existential_1(v11 + 2, v21);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v21, v20);
  outlined init with copy of UserNotificationCenter(v30, (uint64_t)v43);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v31;
  *(void *)(v22 + 16) = v11;
  *(void *)(v22 + 24) = v23;
  uint64_t v24 = v32;
  *(void *)(v22 + 32) = v33;
  *(void *)(v22 + 40) = v24;
  *(void *)(v22 + 48) = v34;
  *(unsigned char *)(v22 + 56) = v19;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v44, v22 + 64, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  outlined init with take of BackgroundSessionManagerDataSource(v43, v22 + 136);
  uint64_t v25 = v35;
  *(void *)(v22 + 176) = v36;
  *(void *)(v22 + 184) = v25;
  *(void *)(v22 + 192) = a10;
  aBlock[4] = partial apply for closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:);
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_41;
  os_log_type_t v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v41 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v27 = (void *)v37;
  MEMORY[0x1B3EA2200](0, v18, v16, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v39);
  return swift_release();
}

uint64_t closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void), uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t TopicRequest = type metadata accessor for CP_CreateTopicRequest(0);
  MEMORY[0x1F4188790](TopicRequest);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v34 = a1;
  uint64_t v21 = *(void *)(a1[12] + 16);
  int v35 = a6;
  if (v21)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v22)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OS_dispatch_queue.sync<A>(execute:)();
      if (v36)
      {
        uint64_t v23 = swift_retain();
        a4(v23, 0);
        return swift_release_n();
      }
      uint64_t v28 = a8;
      uint64_t v29 = a7;
      uint64_t v25 = a2;
      uint64_t v30 = a4;
      uint64_t v31 = a5;
      swift_release();
    }
    else
    {
      uint64_t v28 = a8;
      uint64_t v29 = a7;
      uint64_t v25 = a2;
      uint64_t v30 = a4;
      uint64_t v31 = a5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v28 = a8;
    uint64_t v29 = a7;
    uint64_t v25 = a2;
    uint64_t v30 = a4;
    uint64_t v31 = a5;
  }
  uint64_t v32 = a9;
  uint64_t TopicRequest = a11;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0;
  MEMORY[0x1F4188790](v26);
  unsigned __int8 v27 = v35;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6(&lazy protocol witness table cache variable for type CP_CreateTopicRequest and conformance CP_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicRequest);
  static Message.with(_:)();
  createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(v34, (uint64_t)v20, v26, (uint64_t)v30, v31, v25, a3, v29, v27, v28, v32, a10, TopicRequest);
  outlined destroy of CP_CreateTopicRequest((uint64_t)v20, type metadata accessor for CP_CreateTopicRequest);
  return swift_release();
}

uint64_t closure #1 in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

uint64_t PubSubClient.TopicCategory.asProto.getter()
{
  return *v0;
}

uint64_t createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v49 = a7;
  uint64_t v50 = a5;
  uint64_t v42 = a6;
  uint64_t v43 = a3;
  uint64_t v51 = a4;
  uint64_t v47 = a12;
  uint64_t v48 = a13;
  int v44 = a9;
  uint64_t v45 = a8;
  uint64_t v46 = a11;
  uint64_t v41 = a10;
  uint64_t TopicRequest = type metadata accessor for CP_CreateTopicRequest(0);
  uint64_t v17 = *(void *)(TopicRequest - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](TopicRequest - 8);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1[5];
  uint64_t v21 = a1[6];
  uint64_t v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1 + 2, v20);
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 64))(a2, v20, v21);
  _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(a2, (uint64_t)v19, type metadata accessor for CP_CreateTopicRequest);
  outlined init with copy of UserNotificationCenter(a10, (uint64_t)v52);
  unint64_t v22 = (*(unsigned __int8 *)(v17 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v23 = (v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 73) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a3;
  void v26[3] = a1;
  uint64_t v27 = v50;
  v26[4] = v51;
  v26[5] = v27;
  uint64_t v28 = v42;
  uint64_t v29 = v49;
  v26[6] = v42;
  v26[7] = v29;
  outlined init with take of CP_CreateTopicRequest((uint64_t)v19, (uint64_t)v26 + v22, type metadata accessor for CP_CreateTopicRequest);
  uint64_t v30 = v45;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v45, (uint64_t)v26 + v23, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  LOBYTE(a1) = v44;
  *((unsigned char *)v26 + v23 + 65) = v44;
  outlined init with take of BackgroundSessionManagerDataSource(v52, (uint64_t)v26 + v24);
  uint64_t v31 = (void *)((char *)v26 + v25);
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  *uint64_t v31 = v46;
  v31[1] = v33;
  uint64_t v34 = v48;
  *(void *)((char *)v26 + ((v25 + 23) & 0xFFFFFFFFFFFFFFF8)) = v48;
  outlined init with copy of UserNotificationCenter(v41, (uint64_t)v52);
  uint64_t v35 = swift_allocObject();
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v30, v35 + 16, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  uint64_t v36 = v49;
  *(void *)(v35 + 88) = v28;
  *(void *)(v35 + 96) = v36;
  *(unsigned char *)(v35 + 104) = (_BYTE)a1;
  *(void *)(v35 + 112) = v40;
  outlined init with take of BackgroundSessionManagerDataSource(v52, v35 + 120);
  *(void *)(v35 + 160) = v32;
  *(void *)(v35 + 168) = v33;
  uint64_t v37 = v51;
  *(void *)(v35 + 176) = v34;
  *(void *)(v35 + 184) = v37;
  *(void *)(v35 + 192) = v50;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_unknownObjectRetain_n();
  swift_retain_n();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_CreateTopicResponse, PluginRpcError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_CreateTopicResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_CreateTopicResponse, PluginRpcError>);
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v103 = a7;
  unint64_t v104 = a8;
  uint64_t v102 = a6;
  uint64_t v105 = a5;
  uint64_t v106 = a4;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginConnectError?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v98 = (uint64_t)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v99 = (uint64_t)&v85 - v20;
  uint64_t v21 = type metadata accessor for PluginConnectError();
  uint64_t v96 = *(void *)(v21 - 8);
  uint64_t v97 = v21;
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t v94 = (uint64_t)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v95 = (uint64_t)&v85 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v100 = (uint64_t)&v85 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v85 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v101 = (char *)&v85 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v34 = (char *)&v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for PluginRpcError();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v85 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v85 - v40;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v34, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1) {
    return outlined destroy of UUID?((uint64_t)v34, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  }
  outlined init with take of CP_CreateTopicRequest((uint64_t)v34, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  swift_beginAccess();
  uint64_t v43 = (uint64_t)v41;
  if (*(void *)(a2 + 16) == *(void *)(a3 + 64))
  {
    type metadata accessor for PubSubTopicError(0);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6(&lazy protocol witness table cache variable for type PubSubTopicError and conformance PubSubTopicError, (void (*)(uint64_t))type metadata accessor for PubSubTopicError);
    int v44 = (void *)swift_allocError();
    _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0((uint64_t)v41, v45, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    swift_storeEnumTagMultiPayload();
    v106(v44, 1);
  }
  else
  {
    uint64_t v46 = (void (*)(void, void))a3;
    uint64_t v92 = a14;
    uint64_t v93 = a2;
    uint64_t v47 = a13;
    unsigned __int8 v48 = a10;
    uint64_t v49 = a9;
    _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(v43, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v91 = a9;
      uint64_t v50 = (char *)*((void *)v39 + 1);
      if (*v39 == 14)
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        __swift_project_value_buffer(v51, (uint64_t)log);
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          int v54 = (uint8_t *)swift_slowAlloc();
          uint64_t v101 = v50;
          uint64_t v55 = v46;
          uint64_t v56 = v54;
          *(_WORD *)int v54 = 0;
          _os_log_impl(&dword_1B0DF7000, v52, v53, "[CreateTopic] Failed, server bouncing", v54, 2u);
          uint64_t v57 = v56;
          uint64_t v46 = v55;
          uint64_t v47 = a13;
          uint64_t v50 = v101;
          MEMORY[0x1B3EA39E0](v57, -1, -1);
        }

        retry #1 () in closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(v93, v46, v102, v103, v104, (uint64_t)v106, v105, v91, a10, a11, a12, v47, v92);
      }
      else
      {
        type metadata accessor for PubSubTopicError(0);
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6(&lazy protocol witness table cache variable for type PubSubTopicError and conformance PubSubTopicError, (void (*)(uint64_t))type metadata accessor for PubSubTopicError);
        uint64_t v66 = (void *)swift_allocError();
        _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(v43, v67, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
        swift_storeEnumTagMultiPayload();
        v106(v66, 1);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v90 = a13;
      uint64_t v58 = (uint64_t)v101;
      outlined init with take of CP_CreateTopicRequest((uint64_t)v39, (uint64_t)v101, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(v58, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      uint64_t v59 = type metadata accessor for NWError();
      int v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v30, 3, v59);
      outlined destroy of CP_CreateTopicRequest((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      if (v60 == 3)
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v61 = type metadata accessor for Logger();
        __swift_project_value_buffer(v61, (uint64_t)log);
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v64 = 0;
          _os_log_impl(&dword_1B0DF7000, v62, v63, "[CreateTopic] Failed, service-provider client closed", v64, 2u);
          MEMORY[0x1B3EA39E0](v64, -1, -1);
        }

        lazy protocol witness table accessor for type PubSubClientError and conformance PubSubClientError();
        uint64_t v65 = (void *)swift_allocError();
        v106(v65, 1);
      }
      else
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v68 = type metadata accessor for Logger();
        __swift_project_value_buffer(v68, (uint64_t)log);
        uint64_t v69 = v100;
        _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(v58, v100, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        uint64_t v70 = Logger.logObject.getter();
        int v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, (os_log_type_t)v71))
        {
          int v87 = v71;
          os_log_t v88 = v70;
          uint64_t v91 = a9;
          uint64_t v72 = (uint8_t *)swift_slowAlloc();
          uint64_t v86 = swift_slowAlloc();
          uint64_t v108 = v86;
          *(_DWORD *)uint64_t v72 = 136315138;
          uint64_t v73 = v99;
          _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(v69, v99, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
          uint64_t v75 = v96;
          uint64_t v74 = v97;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v73, 0, 1, v97);
          uint64_t v76 = v73;
          uint64_t v77 = v98;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v76, v98, &demangling cache variable for type metadata for PluginConnectError?);
          int v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v77, 1, v74);
          int v89 = a10;
          if (v78 == 1)
          {
            unint64_t v79 = 0xE300000000000000;
            uint64_t v80 = 7104878;
          }
          else
          {
            uint64_t v81 = v95;
            outlined init with take of CP_CreateTopicRequest(v77, v95, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
            _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(v81, v94, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
            uint64_t v80 = String.init<A>(reflecting:)();
            unint64_t v79 = v82;
            outlined destroy of CP_CreateTopicRequest(v81, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
          }
          outlined destroy of UUID?(v99, &demangling cache variable for type metadata for PluginConnectError?);
          uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v79, &v108);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of CP_CreateTopicRequest(v100, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
          os_log_t v83 = v88;
          _os_log_impl(&dword_1B0DF7000, v88, (os_log_type_t)v87, "[CreateTopic] Failed with connection error, error=%s", v72, 0xCu);
          uint64_t v84 = v86;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v84, -1, -1);
          MEMORY[0x1B3EA39E0](v72, -1, -1);

          uint64_t v49 = v91;
          unsigned __int8 v48 = v89;
        }
        else
        {
          outlined destroy of CP_CreateTopicRequest(v69, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        }
        retry #1 () in closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(v93, v46, v102, v103, v104, (uint64_t)v106, v105, v49, v48, a11, a12, v90, v92);
      }
      outlined destroy of CP_CreateTopicRequest(v58, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    }
  }
  return outlined destroy of CP_CreateTopicRequest(v43, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
}

uint64_t retry #1 () in closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, void (*a2)(void, void), uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v86 = a8;
  uint64_t v85 = a6;
  unint64_t v84 = a5;
  unint64_t v91 = a4;
  uint64_t v88 = a3;
  int v89 = a2;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v87 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicRequest = type metadata accessor for CP_CreateTopicRequest(0);
  uint64_t v81 = *(void *)(TopicRequest - 8);
  MEMORY[0x1F4188790](TopicRequest - 8);
  uint64_t v82 = v24;
  uint64_t v83 = (uint64_t)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for DispatchTime();
  uint64_t v93 = *(void *)(v90 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v90);
  uint64_t v27 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v92 = (char *)&v67 - v28;
  swift_beginAccess();
  uint64_t v29 = *(void *)(a1 + 16);
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = a1;
    uint64_t v75 = a7;
    uint64_t v80 = v16;
    uint64_t v70 = a10;
    *(void *)(a1 + 16) = v31;
    if (one-time initialization token for log == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v76 = v22;
  uint64_t v77 = v20;
  int v78 = v18;
  uint64_t v79 = v19;
  uint64_t v73 = a13;
  uint64_t v72 = a12;
  uint64_t v74 = a11;
  int v71 = a9;
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)log);
  uint64_t v33 = v89;
  swift_retain_n();
  swift_retain_n();
  unint64_t v34 = v91;
  swift_bridgeObjectRetain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v69 = v13;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    aBlock[0] = v39;
    *(_DWORD *)uint64_t v38 = 134218498;
    *(void *)&long long v96 = *((void *)v33 + 7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    *(_WORD *)(v38 + 12) = 2048;
    swift_beginAccess();
    uint64_t v40 = *(void *)(v13 + 16);
    swift_release();
    *(void *)&long long v96 = v40;
    uint64_t v33 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v38 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v35, v36, "[CreateTopic] Retrying stream in %f seconds, attempt=#%ld topic=%s", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v39, -1, -1);
    MEMORY[0x1B3EA39E0](v38, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  static DispatchTime.now()();
  MEMORY[0x1B3EA17C0](v27, *((double *)v33 + 7));
  uint64_t v41 = *(void (**)(void, void))(v93 + 8);
  v93 += 8;
  int v89 = v41;
  v41(v27, v90);
  uint64_t v42 = *((void *)v33 + 5);
  uint64_t v43 = *((void *)v33 + 6);
  __swift_project_boxed_opaque_existential_1((void *)v33 + 2, v42);
  uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
  uint64_t v67 = type metadata accessor for CP_CreateTopicRequest;
  uint64_t v44 = v83;
  _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(v84, v83, type metadata accessor for CP_CreateTopicRequest);
  outlined init with copy of UserNotificationCenter(v70, (uint64_t)&v96);
  unint64_t v45 = (*(unsigned __int8 *)(v81 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
  unint64_t v46 = (v82 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v50 = (v49 + 73) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v51 = (v50 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v84 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v33;
  outlined init with take of CP_CreateTopicRequest(v44, v52 + v45, v67);
  *(void *)(v52 + v46) = v69;
  os_log_type_t v53 = (void *)(v52 + v47);
  uint64_t v54 = v75;
  *os_log_type_t v53 = v85;
  v53[1] = v54;
  uint64_t v55 = (void *)(v52 + v48);
  uint64_t v56 = v52 + v49;
  unint64_t v57 = v91;
  *uint64_t v55 = v88;
  v55[1] = v57;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v86, v56, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  *(unsigned char *)(v56 + 65) = v71;
  outlined init with take of BackgroundSessionManagerDataSource(&v96, v52 + v50);
  uint64_t v58 = (void *)(v52 + v51);
  uint64_t v59 = v72;
  *uint64_t v58 = v74;
  v58[1] = v59;
  *(void *)(v52 + v84) = v73;
  aBlock[4] = (uint64_t)partial apply for closure #1 in retry #1 () in closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:);
  aBlock[5] = v52;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = (uint64_t)&block_descriptor_34_0;
  int v60 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v61 = v76;
  static DispatchQoS.unspecified.getter();
  uint64_t v94 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v62 = v78;
  uint64_t v63 = v80;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v64 = v92;
  uint64_t v65 = (void *)v68;
  MEMORY[0x1B3EA2180](v92, v61, v62, v60);
  _Block_release(v60);

  (*(void (**)(char *, uint64_t))(v87 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v61, v79);
  v89(v64, v90);
  return swift_release();
}

void closure #2 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint8_t *a9, uint64_t a10, void (*a11)(uint64_t, uint64_t), uint64_t a12)
{
  uint64_t v78 = a7;
  uint64_t v79 = a8;
  uint64_t v80 = a6;
  uint64_t v81 = a4;
  uint64_t v75 = a5;
  uint64_t v82 = a3;
  uint64_t v87 = a12;
  uint64_t v88 = a11;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(a2, (uint64_t)v98, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  uint64_t v14 = v98[2];
  uint64_t v85 = v98[3];
  uint64_t v86 = v98[1];
  double v15 = *(double *)&v98[4];
  uint64_t v83 = v98[0];
  uint64_t v84 = v98[5];
  double v16 = *(double *)&v98[6];
  double v17 = *(double *)&v98[7];
  uint64_t Topic = type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v19 = *(void *)(Topic - 8);
  uint64_t v20 = MEMORY[0x1F4188790](Topic);
  uint64_t v77 = (uint64_t)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v71 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v76 = (_OWORD *)((char *)&v71 - v25);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v71 - v30;
  uint64_t v32 = *(void *)a1;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    switch(v32)
    {
      case 1:
      case 8:
        uint64_t v73 = a9;
        uint64_t v74 = a10;
        outlined init with take of PluginClientMetrics.ConnectionEstablishment?(a2, (uint64_t)v101, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
        if (v102)
        {
          double v16 = 10.0;
          double v15 = 1.0;
          uint64_t v84 = 3;
          uint64_t v85 = 2;
          uint64_t v86 = 1000;
          uint64_t v83 = 0x10000;
          uint64_t v14 = 1000;
          double v17 = 1.0;
        }
        uint64_t v71 = a1 + *(int *)(type metadata accessor for CP_CreateTopicResponse(0) + 28);
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v71, (uint64_t)v31, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        uint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
        int v33 = v72(v31, 1, Topic);
        outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
        if (v33 == 1)
        {
          unint64_t v34 = v81;
          uint64_t v36 = v83;
          uint64_t v35 = v84;
          uint64_t v38 = v85;
          uint64_t v37 = v86;
        }
        else
        {
          outlined init with take of PluginClientMetrics.ConnectionEstablishment?(a2, (uint64_t)v99, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
          unint64_t v34 = v81;
          uint64_t v36 = v83;
          uint64_t v35 = v84;
          uint64_t v38 = v85;
          uint64_t v37 = v86;
          if (v100 == 1)
          {
            outlined init with copy of ActivitySession.DomainAssertionWrapper?(v71, (uint64_t)v29, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
            if (v72(v29, 1, Topic) == 1)
            {
              unint64_t v49 = v76;
              *(_OWORD *)((char *)v76 + 28) = 0u;
              *unint64_t v49 = 0u;
              v49[1] = 0u;
              UnknownStorage.init()();
              outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for CP_CreateTopicResponse.ClientTopicConfig?);
            }
            else
            {
              unint64_t v49 = v76;
              outlined init with take of CP_CreateTopicRequest((uint64_t)v29, (uint64_t)v76, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
            }
            if (one-time initialization token for log != -1) {
              swift_once();
            }
            uint64_t v50 = type metadata accessor for Logger();
            __swift_project_value_buffer(v50, (uint64_t)log);
            _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0((uint64_t)v49, (uint64_t)v24, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
            swift_bridgeObjectRetain_n();
            unint64_t v51 = Logger.logObject.getter();
            os_log_type_t v52 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v51, v52))
            {
              uint64_t v53 = swift_slowAlloc();
              uint64_t v86 = swift_slowAlloc();
              *(void *)&long long v91 = v86;
              *(_DWORD *)uint64_t v53 = 136315650;
              _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6(&lazy protocol witness table cache variable for type CP_CreateTopicResponse.ClientTopicConfig and conformance CP_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
              uint64_t v54 = Message.debugDescription.getter();
              v90[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)&v91);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined destroy of CP_CreateTopicRequest((uint64_t)v24, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
              *(_WORD *)(v53 + 12) = 2080;
              swift_bridgeObjectRetain();
              v90[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, (unint64_t)v34, (uint64_t *)&v91);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v53 + 22) = 2080;
              unint64_t v56 = 0xE700000000000000;
              uint64_t v57 = 0x6E776F6E6B6E75;
              switch((char)v75)
              {
                case 1:
                  unint64_t v56 = 0xE300000000000000;
                  uint64_t v57 = 7368801;
                  break;
                case 2:
                  unint64_t v56 = 0xE600000000000000;
                  uint64_t v57 = 0x6D6574737973;
                  break;
                case 3:
                  unint64_t v56 = 0xEB00000000657261;
                  uint64_t v57 = 0x68536E6565726373;
                  break;
                case 4:
                  unint64_t v56 = 0xE800000000000000;
                  uint64_t v57 = 0x636E795374736166;
                  break;
                default:
                  break;
              }
              v90[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v56, (uint64_t *)&v91);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B0DF7000, v51, v52, "[CreateTopic] Using server-specified topic-config, config=%s topic=%s, category=%s", (uint8_t *)v53, 0x20u);
              uint64_t v58 = v86;
              swift_arrayDestroy();
              MEMORY[0x1B3EA39E0](v58, -1, -1);
              MEMORY[0x1B3EA39E0](v53, -1, -1);
            }
            else
            {
              outlined destroy of CP_CreateTopicRequest((uint64_t)v24, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);

              swift_bridgeObjectRelease_n();
            }
            uint64_t v59 = v77;
            _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0((uint64_t)v49, v77, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
            PubSubTopic.Configuration.init(proto:)(v59, (uint64_t)&v91);
            outlined destroy of CP_CreateTopicRequest((uint64_t)v49, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
            uint64_t v37 = *((void *)&v91 + 1);
            uint64_t v36 = v91;
            uint64_t v14 = v92;
            uint64_t v38 = v93;
            double v15 = v94;
            uint64_t v35 = v95;
            double v16 = v96;
            double v17 = v97;
          }
        }
        *(void *)&long long v91 = v36;
        *((void *)&v91 + 1) = v37;
        uint64_t v92 = v14;
        uint64_t v93 = v38;
        double v94 = v15;
        uint64_t v95 = v35;
        int v60 = v80;
        double v96 = v16;
        double v97 = v17;
        outlined init with copy of UserNotificationCenter((uint64_t)(v80 + 2), (uint64_t)v90);
        outlined init with copy of UserNotificationCenter(v78, (uint64_t)v89);
        uint64_t v61 = v60[9];
        uint64_t v62 = v60[10];
        uint64_t v63 = v60[11];
        type metadata accessor for PubSubTopic(0);
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v64 = v79;
        swift_unknownObjectRetain();
        uint64_t v65 = v74;
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v70 = v62;
        uint64_t v66 = v82;
        uint64_t v67 = specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(v82, v34, &v91, (uint64_t)v90, (uint64_t)v89, v64, v73, v65, v61, v70, v63);
        swift_unknownObjectRelease();
        swift_release();
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v90[0] = v60[12];
        v60[12] = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v67, v66, (uint64_t)v34, isUniquelyReferenced_nonNull_native);
        v60[12] = v90[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v69 = swift_retain();
        v88(v69, 0);
        swift_release_n();
        break;
      case 2:
        uint64_t v32 = 3;
        goto LABEL_13;
      case 3:
        uint64_t v32 = 4;
        goto LABEL_13;
      case 4:
        uint64_t v32 = 5;
        goto LABEL_13;
      case 5:
        uint64_t v32 = 6;
        goto LABEL_13;
      case 6:
        uint64_t v32 = 7;
        goto LABEL_13;
      case 7:
        uint64_t v32 = 8;
        goto LABEL_13;
      default:
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    uint64_t v40 = *(void *)(a1 + 16);
    unint64_t v39 = *(void *)(a1 + 24);
    uint64_t v41 = one-time initialization token for log;
    swift_bridgeObjectRetain();
    if (v41 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)log);
    swift_bridgeObjectRetain();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      v101[0] = v46;
      *(_DWORD *)uint64_t v45 = 134218242;
      v99[0] = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 12) = 2080;
      swift_bridgeObjectRetain();
      v99[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v43, v44, "[CreateTopic] Failed, unexpected response-status, code=%ld error=%s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v46, -1, -1);
      MEMORY[0x1B3EA39E0](v45, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for PubSubTopicError(0);
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_6(&lazy protocol witness table cache variable for type PubSubTopicError and conformance PubSubTopicError, (void (*)(uint64_t))type metadata accessor for PubSubTopicError);
    unint64_t v47 = (void *)swift_allocError();
    *unint64_t v48 = 0xD000000000000017;
    v48[1] = 0x80000001B115C390;
    swift_storeEnumTagMultiPayload();
    v88((uint64_t)v47, 1);
  }
}

uint64_t PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(a3, (uint64_t)v20, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  char v16 = *a4;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a5, (uint64_t)v19, &demangling cache variable for type metadata for TopicCryptorProvider?);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v8;
  *(void *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a2;
  *(unsigned char *)(v17 + 40) = v16;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v20, v17 + 48, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v19, v17 + 120, &demangling cache variable for type metadata for TopicCryptorProvider?);
  *(void *)(v17 + 160) = a6;
  *(void *)(v17 + 168) = a7;
  *(void *)(v17 + 176) = a8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubTopic, Error>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return Future.init(_:)();
}

uint64_t closure #1 in PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v16 = a6;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  if (v16 == 5) {
    char v18 = 0;
  }
  else {
    char v18 = a6;
  }
  v28[0] = v18;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(a7, (uint64_t)v27, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a8, (uint64_t)&v24, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (v25)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v24, (uint64_t)v26);
    swift_retain();
  }
  else
  {
    uint64_t v19 = type metadata accessor for TransparentTopicCryptorProvider();
    uint64_t v20 = swift_allocObject();
    void v26[3] = v19;
    v26[4] = &protocol witness table for TransparentTopicCryptorProvider;
    v26[0] = v20;
    swift_retain();
    outlined destroy of UUID?((uint64_t)&v24, &demangling cache variable for type metadata for TopicCryptorProvider?);
  }
  PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<PluginAttachmentLedgerTopic, Error>) -> (), v17, a4, a5, v28, (uint64_t)v27, (uint64_t)v26, a9, a10, a11);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
}

uint64_t sub_1B11188F4()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 144)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 120);
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 184, 7);
}

uint64_t partial apply for closure #1 in PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), v2 + 48, v2 + 120, *(void *)(v2 + 160), *(void *)(v2 + 168), *(void *)(v2 + 176));
}

unint64_t lazy protocol witness table accessor for type PubSubClientError and conformance PubSubClientError()
{
  unint64_t result = lazy protocol witness table cache variable for type PubSubClientError and conformance PubSubClientError;
  if (!lazy protocol witness table cache variable for type PubSubClientError and conformance PubSubClientError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubClientError and conformance PubSubClientError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PubSubClientError and conformance PubSubClientError;
  if (!lazy protocol witness table cache variable for type PubSubClientError and conformance PubSubClientError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubClientError and conformance PubSubClientError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PubSubClient.TopicCategory and conformance PubSubClient.TopicCategory()
{
  unint64_t result = lazy protocol witness table cache variable for type PubSubClient.TopicCategory and conformance PubSubClient.TopicCategory;
  if (!lazy protocol witness table cache variable for type PubSubClient.TopicCategory and conformance PubSubClient.TopicCategory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubClient.TopicCategory and conformance PubSubClient.TopicCategory);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PubSubClientError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B1118AE4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubClientError()
{
  return &type metadata for PubSubClientError;
}

uint64_t type metadata accessor for PubSubClient()
{
  return self;
}

uint64_t method lookup function for PubSubClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PubSubClient);
}

uint64_t dispatch thunk of PubSubClient.__allocating_init(serviceProvider:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of PubSubClient.__allocating_init(pluginClient:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of PubSubClient.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PubSubClient.updateVirtualParticipant(_:localParticipantID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PubSubClient.localParticipantID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

unsigned char *storeEnumTagSinglePayload for PubSubClient.TopicCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B1118CFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubClient.TopicCategory()
{
  return &type metadata for PubSubClient.TopicCategory;
}

uint64_t sub_1B1118D34()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 200, 7);
}

uint64_t partial apply for closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)()
{
  return closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(uint64_t, void))(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), v0 + 64, v0 + 136, *(void *)(v0 + 176), *(void *)(v0 + 184), *(void *)(v0 + 192));
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t sub_1B1118DE4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1)
{
  return closure #1 in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t _s14CopresenceCore11PubSubTopicC11isAvailableSbvgSbyXEfU_TA_0@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in PubSubTopic.isAvailable.getter(v1, a1);
}

uint64_t sub_1B1118E30()
{
  uint64_t v1 = (int *)(type metadata accessor for CP_CreateTopicRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 73) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, ((((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t partial apply for closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CP_CreateTopicRequest(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 73) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void *, uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), v1 + v4, v1 + v5, *(unsigned char *)(v1 + v5 + 65), v1 + v6, *(void *)(v1 + ((v6 + 47) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1B1119078()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 120);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 200, 7);
}

void partial apply for closure #2 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1)
{
  closure #2 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(a1, v1 + 16, *(void *)(v1 + 88), *(void **)(v1 + 96), *(unsigned __int8 *)(v1 + 104), *(void **)(v1 + 112), v1 + 120, *(void *)(v1 + 160), *(uint8_t **)(v1 + 168), *(void *)(v1 + 176), *(void (**)(uint64_t, uint64_t))(v1 + 184), *(void *)(v1 + 192));
}

uint64_t outlined init with take of CP_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s14CopresenceCore21CP_CreateTopicRequestVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CP_CreateTopicRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B11192A4()
{
  uint64_t v1 = (int *)(type metadata accessor for CP_CreateTopicRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v8 = v2 | 7;
  unint64_t v4 = (((((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 73) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[10];
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, ((((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v8);
}

uint64_t partial apply for closure #1 in retry #1 () in closure #1 in createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for CP_CreateTopicRequest(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return createTopicHelper #1 () in closure #1 in PubSubClient.getOrCreateTopic(promise:name:category:topicConfig:dataCryptorProvider:delegate:seqNumWatermark:)(*(void *)(v0 + 16), v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1B1119530()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t dispatch thunk of MemberProvider.members.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MemberProvider.membersPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t TopicInfo.id.getter()
{
  outlined init with take of TopicInfo(v0, (uint64_t)&v3);
  uint64_t v1 = v3;
  swift_bridgeObjectRetain();
  return v1;
}

Swift::Void __swiftcall PubSubTopicsObserver.TopicTermination.complete()()
{
  v0();
}

uint64_t PubSubTopicsObserver.__allocating_init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v10 = specialized PubSubTopicsObserver.__allocating_init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(v9, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v10;
}

uint64_t TopicInfo.description.getter()
{
  outlined init with take of TopicInfo(v0, (uint64_t)v2);
  outlined init with take of TopicInfo(v0, (uint64_t)&v3);
  if (v4)
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return String.init<A>(describing:)();
}

uint64_t protocol witness for IDProviding.id.getter in conformance TopicInfo@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TopicInfo()
{
  if (*(unsigned char *)(v0 + 32))
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return String.init<A>(describing:)();
}

uint64_t PubSubTopicsObserver.TopicSubscribers.topicName.getter(uint64_t a1)
{
  return a1;
}

uint64_t PubSubTopicsObserver.TopicSubscribers.subscriberIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopicsObserver.TopicTermination.topicName.getter(uint64_t a1)
{
  return a1;
}

uint64_t PubSubTopicsObserver.serviceProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 16, a1);
}

uint64_t PubSubTopicsObserver.rpcMaxAttempts.getter()
{
  return *(void *)(v0 + 56);
}

double PubSubTopicsObserver.rpcRetryIntervalSeconds.getter()
{
  return *(double *)(v0 + 64);
}

uint64_t PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)((uint64_t)v11, a2, v3, v7, v8, a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v13;
}

uint64_t PubSubTopicsObserver.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_retain();
  PassthroughSubject.receive<A>(subscriber:)();
  uint64_t result = swift_release();
  if (!*(void *)(v1 + 88))
  {
    *(void *)(v1 + 88) = PubSubTopicsObserver.createListenTopicSubscription()();
    return swift_release();
  }
  return result;
}

uint64_t PubSubTopicsObserver.createListenTopicSubscription()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<CP_TopicSubscribers, PluginRpcError>, [TopicInfo]>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v31 = v1;
  uint64_t v32 = v2;
  MEMORY[0x1F4188790](v1);
  uint64_t v30 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v4 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_TopicSubscribersRequest, Never>>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v27 = v11;
  uint64_t v28 = v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_TopicSubscribersRequest, Never>);
  swift_allocObject();
  uint64_t v15 = PassthroughSubject.init()();
  v0[9] = v15;
  uint64_t v16 = v15;
  uint64_t v29 = v15;
  swift_retain();
  swift_release();
  uint64_t v33 = v16;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4F1A900], v7);
  uint64_t v17 = v26;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F1A918], v26);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<CP_TopicSubscribersRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<CP_TopicSubscribersRequest, Never>);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<PassthroughSubject<CP_TopicSubscribersRequest, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_TopicSubscribersRequest, Never>>);
  uint64_t v18 = v27;
  uint64_t v19 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v18);
  uint64_t v20 = v0[5];
  uint64_t v21 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v20);
  uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 88))(v19, v20, v21);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_TopicSubscribers, PluginRpcError>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [TopicInfo]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_TopicSubscribers, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_TopicSubscribers, PluginRpcError>);
  uint64_t v22 = v30;
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<CP_TopicSubscribers, PluginRpcError>, [TopicInfo]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<CP_TopicSubscribers, PluginRpcError>, [TopicInfo]>);
  uint64_t v23 = v31;
  uint64_t v24 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v23);
  return v24;
}

uint64_t closure #1 in PubSubTopicsObserver.createListenTopicSubscription()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (void *)((char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *a1;
  int64_t v11 = *(void *)(*a1 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    v37[1] = a1;
    v37[2] = a2;
    uint64_t v38 = a3;
    uint64_t v46 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = 0;
    uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
    v37[0] = v10;
    uint64_t v42 = v10 + ((v14 + 32) & ~v14);
    uint64_t v15 = *(void *)(v7 + 72);
    uint64_t v40 = v9;
    uint64_t v41 = v15;
    int64_t v39 = v11;
    while (1)
    {
      _s14CopresenceCore14PluginRpcErrorOWOcTm_1(v42 + v41 * v13, (uint64_t)v9, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
      uint64_t v16 = *v9;
      uint64_t v17 = v9[2];
      uint64_t v44 = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = Set.init(minimumCapacity:)();
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)(v17 + 16);
      if (v20) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_16:
      uint64_t v30 = v44;
      outlined destroy of CP_TopicSubscribersRequest((uint64_t)v9, type metadata accessor for CP_TopicSubscribers.TopicSubscribersInfo);
      uint64_t v12 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v46;
      }
      unint64_t v32 = *(void *)(v12 + 16);
      unint64_t v31 = *(void *)(v12 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
        uint64_t v12 = v46;
      }
      ++v13;
      *(void *)(v12 + 16) = v32 + 1;
      uint64_t v33 = v12 + 40 * v32;
      *(void *)(v33 + 32) = v16;
      *(void *)(v33 + 40) = v30;
      *(void *)(v33 + 48) = v19;
      *(void *)(v33 + 56) = 0;
      *(unsigned char *)(v33 + 64) = 0;
      if (v13 == v11)
      {
        swift_bridgeObjectRelease();
        a3 = v38;
        goto LABEL_22;
      }
    }
    uint64_t v43 = v16;
    uint64_t v21 = 0;
    uint64_t v22 = v18 + 56;
    while (1)
    {
      uint64_t v23 = *(void *)(v17 + 32 + 8 * v21++);
      uint64_t v24 = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v19 + 32);
      unint64_t v26 = v24 & ~v25;
      if (((*(void *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
        goto LABEL_12;
      }
      uint64_t v27 = *(void *)(v19 + 48);
      if (*(void *)(v27 + 8 * v26) == v23)
      {
LABEL_5:
        if (v21 == v20) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v28 = ~v25;
        while (1)
        {
          unint64_t v26 = (v26 + 1) & v28;
          if (((*(void *)(v22 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
            break;
          }
          if (*(void *)(v27 + 8 * v26) == v23) {
            goto LABEL_5;
          }
        }
LABEL_12:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v45 = v19;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v23, v26, isUniquelyReferenced_nonNull_native);
        uint64_t v19 = v45;
        swift_bridgeObjectRelease();
        if (v21 == v20)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          int64_t v11 = v39;
          uint64_t v9 = v40;
          uint64_t v16 = v43;
          goto LABEL_16;
        }
        uint64_t v22 = v19 + 56;
      }
    }
  }
LABEL_22:
  swift_retain();
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14CopresenceCore19CP_TopicSubscribersV09TerminateG0VG_AF0G4InfoOs5NeverOTg504_s14d41Core20PubSubTopicsObserverC29createListeng84Subscription33_B8497B8F5916E698C6A327A070E3F3BCLL7Combine14AnyCancellableCyFSayAA0I4j6OGAA03f4_I11h10VcfU_AjM09I9I0VXEfU0_AF0nopQ0CTf1cn_nTf4ng_n(v34);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v46 = v12;
  uint64_t result = specialized Array.append<A>(contentsOf:)(v35);
  *a3 = v46;
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in PubSubTopicsObserver.createListenTopicSubscription()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CP_TopicSubscribersRequest(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    MEMORY[0x1F4188790](result);
    *(&v13 - 4) = a1;
    *(&v13 - 3) = a2;
    *(&v13 - 2) = a3;
    *(&v13 - 1) = a4;
    lazy protocol witness table accessor for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
    static Message.with(_:)();
    if (*(void *)(v12 + 72))
    {
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_release();
    }
    outlined destroy of CP_TopicSubscribersRequest((uint64_t)v10, type metadata accessor for CP_TopicSubscribersRequest);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in PubSubTopicsObserver.createListenTopicSubscription()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PluginRpcError();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  int64_t v11 = &v14[-v10];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    if (*(void *)(result + 72))
    {
      v14[7] = 1;
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
    }
    *(void *)(v13 + 72) = 0;
    swift_release();
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v11, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, 1, 1, v2);
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
      swift_release();
      return outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    }
    else
    {
      _s14CopresenceCore14PluginRpcErrorOWObTm_0((uint64_t)v11, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      PubSubTopicsObserver.handleSubscriptionError(_:)((uint64_t)v5);
      swift_release();
      return outlined destroy of CP_TopicSubscribersRequest((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    }
  }
  return result;
}

uint64_t closure #3 in PubSubTopicsObserver.createListenTopicSubscription()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + 96) = 0;
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PubSubTopicsObserver.complete(topicInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck(0);
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  lazy protocol witness table accessor for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminatedAck and conformance CP_TopicSubscribersRequest.TopicTerminatedAck, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminatedAck);
  static Message.with(_:)();
  uint64_t v13 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
  return outlined assign with take of CP_TopicSubscribersRequest.OneOf_Operation?((uint64_t)v12, a1);
}

uint64_t PubSubTopicsObserver.handleSubscriptionError(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v94 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v89 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v97 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginConnectError?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v93 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v96 = (uint64_t)&v89 - v14;
  uint64_t v95 = type metadata accessor for PluginConnectError();
  uint64_t v92 = *(void *)(v95 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v95);
  uint64_t v90 = (uint64_t)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v91 = (uint64_t)&v89 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v89 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v89 - v22;
  uint64_t v24 = type metadata accessor for PluginRpcError();
  uint64_t v98 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  uint64_t v30 = (char *)&v89 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v33 = (char *)&v89 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = (uint64_t *)((char *)&v89 - v34);
  uint64_t v36 = *(void *)(v2 + 96);
  uint64_t v99 = v2;
  if (v36 >= *(void *)(v2 + 56))
  {
    uint64_t v95 = a1;
    uint64_t v96 = v24;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)log);
    uint64_t v47 = v95;
    _s14CopresenceCore14PluginRpcErrorOWOcTm_1(v95, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      v100[0] = v93;
      *(_DWORD *)uint64_t v50 = 136315138;
      _s14CopresenceCore14PluginRpcErrorOWOcTm_1((uint64_t)v33, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      uint64_t v51 = v98;
      uint64_t v52 = v96;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v8, 0, 1, v96);
      uint64_t v53 = v94;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, v94, &demangling cache variable for type metadata for PluginRpcError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v53, 1, v52) == 1)
      {
        uint64_t v54 = 7104878;
        unint64_t v55 = 0xE300000000000000;
      }
      else
      {
        _s14CopresenceCore14PluginRpcErrorOWObTm_0(v53, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
        _s14CopresenceCore14PluginRpcErrorOWOcTm_1((uint64_t)v30, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
        uint64_t v54 = String.init<A>(reflecting:)();
        unint64_t v55 = v82;
        outlined destroy of CP_TopicSubscribersRequest((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      }
      outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for PluginRpcError?);
      uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of CP_TopicSubscribersRequest((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
      _os_log_impl(&dword_1B0DF7000, v48, v49, "[ListenTopicSubscribers] Retries exhausted, error=%s", v50, 0xCu);
      uint64_t v83 = v93;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v83, -1, -1);
      MEMORY[0x1B3EA39E0](v50, -1, -1);

      uint64_t v47 = v95;
    }
    else
    {
      outlined destroy of CP_TopicSubscribersRequest((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    }
    uint64_t v84 = v99;
    uint64_t v85 = v97;
    _s14CopresenceCore14PluginRpcErrorOWOcTm_1(v47, v97, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v85, 0, 1, v96);
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    outlined destroy of UUID?(v85, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<[TopicInfo], PluginRpcError>);
    swift_allocObject();
    *(void *)(v84 + 80) = PassthroughSubject.init()();
    swift_release();
    *(void *)(v84 + 88) = 0;
    return swift_release();
  }
  else
  {
    uint64_t v37 = a1;
    _s14CopresenceCore14PluginRpcErrorOWOcTm_1(a1, (uint64_t)&v89 - v34, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v38 = *(unsigned __int8 *)v35;
      int64_t v39 = (void *)v35[1];
      uint64_t v40 = v35[3];
      if (v38 == 14)
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        __swift_project_value_buffer(v41, (uint64_t)log);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl(&dword_1B0DF7000, v42, v43, "[ListenTopicSubscribers] Failed, server bouncing", v44, 2u);
          MEMORY[0x1B3EA39E0](v44, -1, -1);
        }

        retry #1 () in PubSubTopicsObserver.handleSubscriptionError(_:)(v99);
        return swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v69 = v35[2];
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v70 = type metadata accessor for Logger();
        __swift_project_value_buffer(v70, (uint64_t)log);
        id v71 = v39;
        swift_bridgeObjectRetain();
        id v72 = v39;
        swift_bridgeObjectRetain();
        uint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v73, v74))
        {
          uint64_t v75 = (uint8_t *)swift_slowAlloc();
          uint64_t v76 = swift_slowAlloc();
          uint64_t v77 = v69;
          uint64_t v78 = v76;
          uint64_t v96 = v24;
          *(_DWORD *)uint64_t v75 = 136315138;
          v100[3] = v40;
          uint64_t v101 = v76;
          LOBYTE(v100[0]) = v38;
          v100[1] = (uint64_t)v39;
          v100[2] = v77;
          id v79 = v39;
          swift_bridgeObjectRetain();
          uint64_t v80 = String.init<A>(reflecting:)();
          v100[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v101);
          uint64_t v24 = v96;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v73, v74, "[ListenTopicSuscribers] Failed, unexpected status=%s", v75, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v78, -1, -1);
          MEMORY[0x1B3EA39E0](v75, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v88 = v97;
        _s14CopresenceCore14PluginRpcErrorOWOcTm_1(v37, v97, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v88, 0, 1, v24);
        swift_retain();
        PassthroughSubject.send(completion:)();
        swift_release();

        swift_bridgeObjectRelease();
        return outlined destroy of UUID?(v88, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
      }
    }
    else
    {
      _s14CopresenceCore14PluginRpcErrorOWObTm_0((uint64_t)v35, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      __swift_project_value_buffer(v56, (uint64_t)log);
      _s14CopresenceCore14PluginRpcErrorOWOcTm_1((uint64_t)v23, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      BOOL v59 = os_log_type_enabled(v57, v58);
      uint64_t v60 = v95;
      if (v59)
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        v100[0] = v62;
        *(_DWORD *)uint64_t v61 = 136315138;
        uint64_t v63 = v96;
        _s14CopresenceCore14PluginRpcErrorOWOcTm_1((uint64_t)v21, v96, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        uint64_t v64 = v92;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v63, 0, 1, v60);
        uint64_t v65 = v63;
        uint64_t v66 = v93;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v65, v93, &demangling cache variable for type metadata for PluginConnectError?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v66, 1, v60) == 1)
        {
          uint64_t v67 = 7104878;
          unint64_t v68 = 0xE300000000000000;
        }
        else
        {
          uint64_t v86 = v91;
          _s14CopresenceCore14PluginRpcErrorOWObTm_0(v66, v91, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
          _s14CopresenceCore14PluginRpcErrorOWOcTm_1(v86, v90, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
          uint64_t v67 = String.init<A>(reflecting:)();
          unint64_t v68 = v87;
          outlined destroy of CP_TopicSubscribersRequest(v86, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        }
        outlined destroy of UUID?(v96, &demangling cache variable for type metadata for PluginConnectError?);
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of CP_TopicSubscribersRequest((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
        _os_log_impl(&dword_1B0DF7000, v57, v58, "[ListenTopicSubscribers] Failed with connection error, error=%s", v61, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v62, -1, -1);
        MEMORY[0x1B3EA39E0](v61, -1, -1);
      }
      else
      {
        outlined destroy of CP_TopicSubscribersRequest((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
      }

      retry #1 () in PubSubTopicsObserver.handleSubscriptionError(_:)(v99);
      return outlined destroy of CP_TopicSubscribersRequest((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PluginConnectError);
    }
  }
}

uint64_t retry #1 () in PubSubTopicsObserver.handleSubscriptionError(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = *(void *)(a1 + 96);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = (char *)&v33 - v16;
    uint64_t v38 = v2;
    uint64_t v39 = v15;
    *(void *)(a1 + 96) = v19;
    if (one-time initialization token for log == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v35 = v7;
  uint64_t v37 = v3;
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)log);
  swift_retain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v36 = v6;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 134218240;
    aBlock[0] = *(void *)(a1 + 64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2048;
    aBlock[0] = *(void *)(a1 + 96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B0DF7000, v21, v22, "[ListenTopicSubscribers] Retrying stream in %f seconds, attempt=#%ld", (uint8_t *)v24, 0x16u);
    MEMORY[0x1B3EA39E0](v24, -1, -1);
  }
  else
  {

    swift_release();
  }
  static DispatchTime.now()();
  uint64_t v25 = v34;
  MEMORY[0x1B3EA17C0](v14, *(double *)(a1 + 64));
  uint64_t v33 = *(void (**)(char *, uint64_t))(v11 + 8);
  v33(v14, v39);
  uint64_t v26 = *(void *)(a1 + 40);
  uint64_t v27 = *(void *)(a1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(a1 + 16), v26);
  uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in retry #1 () in PubSubTopicsObserver.handleSubscriptionError(_:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_42;
  uint64_t v30 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v31 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2180](v25, v9, v5, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v31);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  v33(v25, v39);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in retry #1 () in PubSubTopicsObserver.handleSubscriptionError(_:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + 88) = PubSubTopicsObserver.createListenTopicSubscription()();
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PubSubTopicsObserver.requestTopicTermination(topic:)(Swift::String topic)
{
  uint64_t v2 = v1;
  object = topic._object;
  uint64_t countAndFlagsBits = topic._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for CP_TopicSubscribersRequest(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v16[0] = v2;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v17 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    v16[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "[ListenTopicSubscribers] Requesting topic termination, topic=%s, reason=.initiatorLeft", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v13, -1, -1);
    uint64_t v14 = v12;
    uint64_t v2 = v16[0];
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
  else
  {

    uint64_t v15 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1F4188790](v15);
  v16[-2] = countAndFlagsBits;
  v16[-1] = object;
  lazy protocol witness table accessor for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest);
  static Message.with(_:)();
  if (*(void *)(v2 + 72))
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
  }
  outlined destroy of CP_TopicSubscribersRequest((uint64_t)v7, type metadata accessor for CP_TopicSubscribersRequest);
}

uint64_t closure #1 in PubSubTopicsObserver.requestTopicTermination(topic:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest(0);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  lazy protocol witness table accessor for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest(&lazy protocol witness table cache variable for type CP_TopicSubscribersRequest.TopicTerminationRequest and conformance CP_TopicSubscribersRequest.TopicTerminationRequest, (void (*)(uint64_t))type metadata accessor for CP_TopicSubscribersRequest.TopicTerminationRequest);
  static Message.with(_:)();
  uint64_t v9 = type metadata accessor for CP_TopicSubscribersRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return outlined assign with take of CP_TopicSubscribersRequest.OneOf_Operation?((uint64_t)v8, a1);
}

uint64_t PubSubTopicsObserver.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t PubSubTopicsObserver.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance PubSubTopicsObserver()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t specialized PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  *(void *)(a3 + 72) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<[TopicInfo], PluginRpcError>);
  swift_allocObject();
  uint64_t v12 = PassthroughSubject.init()();
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 80) = v12;
  outlined init with take of BackgroundSessionManagerDataSource(&v14, a3 + 16);
  *(void *)(a3 + 56) = a2;
  *(double *)(a3 + 64) = a6;
  return a3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14CopresenceCore19CP_TopicSubscribersV09TerminateG0VG_AF0G4InfoOs5NeverOTg504_s14d41Core20PubSubTopicsObserverC29createListeng84Subscription33_B8497B8F5916E698C6A327A070E3F3BCLL7Combine14AnyCancellableCyFSayAA0I4j6OGAA03f4_I11h10VcfU_AjM09I9I0VXEfU0_AF0nopQ0CTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = *(void *)(type metadata accessor for CP_TopicSubscribers.TerminateTopic(0) - 8);
    uint64_t v5 = *(void *)(v4 + 72);
    uint64_t v6 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + a1 + 8);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      uint64_t v9 = swift_allocObject();
      swift_weakInit();
      uint64_t v2 = v14;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v2 = v14;
      }
      unint64_t v11 = *(void *)(v2 + 16);
      unint64_t v10 = *(void *)(v2 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v2 = v14;
      }
      uint64_t v6 = (uint64_t *)((char *)v6 + v5);
      *(void *)(v2 + 16) = v11 + 1;
      uint64_t v12 = v2 + 40 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v8;
      *(void *)(v12 + 48) = partial apply for closure #1 in closure #2 in closure #1 in PubSubTopicsObserver.createListenTopicSubscription();
      *(void *)(v12 + 56) = v9;
      *(unsigned char *)(v12 + 64) = 1;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized PubSubTopicsObserver.__allocating_init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PubSubTopicsObserver();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  return specialized PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)((uint64_t)v13, a2, v14, a5, a6, a3);
}

uint64_t partial apply for closure #1 in PubSubTopicsObserver.requestTopicTermination(topic:)(uint64_t a1)
{
  return closure #1 in PubSubTopicsObserver.requestTopicTermination(topic:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t associated type witness table accessor for IDProviding.ID : Hashable in TopicInfo()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in PubSubTopicsObserver()
{
  return lazy protocol witness table accessor for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (void (*)(uint64_t))type metadata accessor for PluginRpcError);
}

uint64_t destroy for TopicInfo(uint64_t a1)
{
  return outlined consume of TopicInfo(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for TopicInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of TopicInfo(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for TopicInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of TopicInfo(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of TopicInfo(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for TopicInfo(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of TopicInfo(v4, v6, v5, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for TopicInfo()
{
  return &type metadata for TopicInfo;
}

uint64_t type metadata accessor for PubSubTopicsObserver()
{
  return self;
}

uint64_t method lookup function for PubSubTopicsObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PubSubTopicsObserver);
}

uint64_t dispatch thunk of PubSubTopicsObserver.__allocating_init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of PubSubTopicsObserver.receive<A>(subscriber:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PubSubTopicsObserver.requestTopicTermination(topic:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

ValueMetadata *type metadata accessor for PubSubTopicsObserver.TopicSubscribers()
{
  return &type metadata for PubSubTopicsObserver.TopicSubscribers;
}

uint64_t destroy for PubSubTopicsObserver.TopicTermination()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for PubSubTopicsObserver.TopicTermination(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PubSubTopicsObserver.TopicTermination(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PubSubTopicsObserver.TopicTermination(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PubSubTopicsObserver.TopicTermination()
{
  return &type metadata for PubSubTopicsObserver.TopicTermination;
}

uint64_t _s14CopresenceCore14PluginRpcErrorOWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B111C960()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in retry #1 () in PubSubTopicsObserver.handleSubscriptionError(_:)()
{
  return closure #1 in retry #1 () in PubSubTopicsObserver.handleSubscriptionError(_:)();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #1 in PubSubTopicsObserver.requestTopicTermination(topic:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t outlined assign with take of CP_TopicSubscribersRequest.OneOf_Operation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_TopicSubscribersRequest.OneOf_Operation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PubSubTopicsObserver.createListenTopicSubscription()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in PubSubTopicsObserver.createListenTopicSubscription()(a1, v2, a2);
}

uint64_t partial apply for closure #2 in PubSubTopicsObserver.createListenTopicSubscription()(uint64_t a1)
{
  return closure #2 in PubSubTopicsObserver.createListenTopicSubscription()(a1);
}

uint64_t partial apply for closure #3 in PubSubTopicsObserver.createListenTopicSubscription()()
{
  return closure #3 in PubSubTopicsObserver.createListenTopicSubscription()();
}

uint64_t _s14CopresenceCore14PluginRpcErrorOWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CP_TopicSubscribersRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in PubSubTopicsObserver.createListenTopicSubscription()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in closure #2 in closure #1 in PubSubTopicsObserver.createListenTopicSubscription()(a1, a2, a3, a4);
}

uint64_t partial apply for closure #1 in PubSubTopicsObserver.complete(topicInfo:)(uint64_t a1)
{
  return closure #1 in PubSubTopicsObserver.complete(topicInfo:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t lazy protocol witness table accessor for type CP_TopicSubscribersRequest and conformance CP_TopicSubscribersRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Dictionary.unwrappedValue(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = a6;
  uint64_t v25 = *(void *)(a3 - 8);
  uint64_t v26 = v6;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v27 = a1;
  uint64_t v28 = a5;
  MEMORY[0x1B3EA1A00](a1, a2, a3, a4, a5);
  uint64_t v18 = *(void *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v24, v17, a4);
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v13, v27, a3);
  uint64_t v19 = String.init<A>(describing:)();
  uint64_t v21 = v20;
  type metadata accessor for Dictionary.Errors();
  swift_getWitnessTable();
  swift_allocError();
  *(void *)uint64_t v22 = v19;
  *(void *)(v22 + 8) = v21;
  *(unsigned char *)(v22 + 16) = 0;
  return swift_willThrow();
}

uint64_t type metadata accessor for Dictionary.Errors()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Dictionary.unwrappedValue<A>(for:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v53 = a5;
  uint64_t v49 = *(void *)(a3 - 8);
  uint64_t v50 = a2;
  MEMORY[0x1F4188790](a1);
  uint64_t v47 = v10;
  unint64_t v48 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v45 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v51 = (char *)&v42 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v15);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v52 = (char *)&v42 - v22;
  MEMORY[0x1B3EA1A00](a1, v50, a3, a4);
  uint64_t v50 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, a1, a3);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v25 = v24;
    type metadata accessor for Dictionary.Errors();
    swift_getWitnessTable();
    swift_allocError();
    *(void *)uint64_t v26 = v23;
    *(void *)(v26 + 8) = v25;
    *(unsigned char *)(v26 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v43 = a3;
    uint64_t v28 = v48;
    uint64_t v29 = v49;
    uint64_t v30 = v50;
    uint64_t v31 = v52;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v52, v17, a4);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v21, v31, a4);
    uint64_t v32 = v47;
    char v33 = swift_dynamicCast();
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
    if (v33)
    {
      uint64_t v35 = *(void *)(v32 - 8);
      uint64_t v36 = v51;
      v34(v51, 0, 1, v32);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v52, a4);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v46, v36, v32);
    }
    else
    {
      uint64_t v37 = v51;
      v34(v51, 1, 1, v32);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v37, v45);
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, a1, v43);
      uint64_t v38 = String.init<A>(describing:)();
      uint64_t v40 = v39;
      type metadata accessor for Dictionary.Errors();
      swift_getWitnessTable();
      swift_allocError();
      *(void *)uint64_t v41 = v38;
      *(void *)(v41 + 8) = v40;
      *(unsigned char *)(v41 + 16) = 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v52, a4);
    }
  }
}

uint64_t CPSystemStateObserver.carplayObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CPSystemStateObserver.displayCloneStateObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CPSystemStateObserver.managedConfigObserver.getter()
{
  return swift_unknownObjectRetain();
}

void *CPSystemStateObserver.conversationManager.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPSystemStateObserver_conversationManager);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void CPSystemStateObserver.conversationManager.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___CPSystemStateObserver_conversationManager);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*CPSystemStateObserver.conversationManager.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t CPSystemStateObserver.lock.getter()
{
  return swift_retain();
}

uint64_t CPSystemStateObserver.observers.getter()
{
  return swift_retain();
}

uint64_t CPSystemStateObserver.observers.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR___CPSystemStateObserver_observers);
  swift_beginAccess();
  *id v3 = a1;
  return swift_release();
}

uint64_t (*CPSystemStateObserver.observers.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t CPSystemStateObserver.carPlayConnected.didset(uint64_t a1, const char *a2)
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)&v2[OBJC_IVAR___CPSystemStateObserver_lock] + 16));
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  uint64_t v5 = v2;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    char v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)char v8 = 136315138;
    uint64_t v13 = v9;
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v6, v7, a2, v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  return CPSystemStateObserver.recomputeAllowedStates()();
}

uint64_t CPSystemStateObserver.screenTimeAllowed.getter()
{
  uint64_t v1 = OBJC_IVAR___CPSystemStateObserver____lazy_storage___screenTimeAllowed;
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage___screenTimeAllowed);
  if (v2 == 2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR___CPSystemStateObserver_managedConfigObserver + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    *(unsigned char *)(v0 + v1) = v5 & 1;
  }
  else
  {
    char v5 = v2 & 1;
  }
  return v5 & 1;
}

uint64_t CPSystemStateObserver.screenTimeAllowed.didset(void (*a1)(void), const char *a2)
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)&v2[OBJC_IVAR___CPSystemStateObserver_lock] + 16));
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  uint64_t v6 = v2;
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    a1();
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, a2, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  return CPSystemStateObserver.recomputeAllowedStates()();
}

uint64_t CPSystemStateObserver.isDisplayCloned.getter()
{
  uint64_t v1 = OBJC_IVAR___CPSystemStateObserver____lazy_storage___isDisplayCloned;
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage___isDisplayCloned);
  if (v2 == 2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR___CPSystemStateObserver_displayCloneStateObserver + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    *(unsigned char *)(v0 + v1) = v5 & 1;
  }
  else
  {
    char v5 = v2 & 1;
  }
  return v5 & 1;
}

Swift::Bool __swiftcall CPSystemStateObserver.computeSharePlayAllowed()()
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)&v0[OBJC_IVAR___CPSystemStateObserver_lock] + 16));
  if ((v0[OBJC_IVAR___CPSystemStateObserver_carPlayConnected] & 1) != 0
    || (CPSystemStateObserver.screenTimeAllowed.getter() & 1) == 0
    || (v0[OBJC_IVAR___CPSystemStateObserver_isLockdownModeEnabled] & 1) != 0)
  {
    char v1 = 0;
  }
  else
  {
    char v1 = v0[OBJC_IVAR___CPSystemStateObserver_isScreening] ^ 1;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = v0;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v6 = 136316162;
    uint64_t v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2080;
    CPSystemStateObserver.screenTimeAllowed.getter();
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 32) = 2080;
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 42) = 2080;
    uint64_t v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v4, v5, "CPSystemStateObserver computeSharePlayAllowed result %s carPlayConnected:%s && screenTimeAllowed:%s, && lockdownModeEnabled:%s, && isScreening %s", (uint8_t *)v6, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  return v1 & 1;
}

Swift::Bool __swiftcall CPSystemStateObserver.computeScreenSharingAllowed()()
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)&v0[OBJC_IVAR___CPSystemStateObserver_lock] + 16));
  if ((v0[OBJC_IVAR___CPSystemStateObserver_carPlayConnected] & 1) == 0
    && (CPSystemStateObserver.screenTimeAllowed.getter() & 1) != 0
    && objc_msgSend(*(id *)&v0[OBJC_IVAR___CPSystemStateObserver_audioRoutePolicyManager], sel_sharePlaySupported))
  {
    char v1 = v0[OBJC_IVAR___CPSystemStateObserver_isLockdownModeEnabled] ^ 1;
  }
  else
  {
    char v1 = 0;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = v0;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v19 = v18;
    *(_DWORD *)uint64_t v6 = 136316162;
    uint64_t v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 22) = 2080;
    CPSystemStateObserver.screenTimeAllowed.getter();
    uint64_t v11 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 32) = 2080;
    objc_msgSend(*(id *)&v3[OBJC_IVAR___CPSystemStateObserver_audioRoutePolicyManager], sel_sharePlaySupported);
    uint64_t v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 42) = 2080;
    uint64_t v15 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v4, v5, "CPSystemStateObserver computeScreenSharingAllowed result %s carPlayConnected:%s && screenTimeAllowed:%s && routeSupportsSharePlay:%s, && lockdownModeEnabled:%s", (uint8_t *)v6, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
  }
  return v1 & 1;
}

Swift::Bool __swiftcall CPSystemStateObserver.computeScreenSharingInitiationAllowed()()
{
  uint64_t v1 = *(void *)((char *)v0 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v1 + 16));
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v1 + 16));
  LOBYTE(v1) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
  char v2 = CPSystemStateObserver._allowScreenSharing.getter();
  uint64_t v3 = OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharing;
  *((unsigned char *)v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharing) = v1 & 1;
  CPSystemStateObserver._allowScreenSharing.didset(v2 & 1);
  if (*((unsigned char *)v0 + v3)) {
    int v4 = CPSystemStateObserver.isDisplayCloned.getter() ^ 1;
  }
  else {
    LOBYTE(v4) = 0;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  uint64_t v6 = v0;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = v17;
    *(_DWORD *)uint64_t v9 = 136315650;
    uint64_t v10 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2080;
    CPSystemStateObserver.isDisplayCloned.getter();
    uint64_t v14 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "CPSystemStateObserver computeScreenSharingInitiationAllowed result %s allowScreenSharing:%s && displayIsCloned:%s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
  }
  return v4 & 1;
}

uint64_t CPSystemStateObserver._allowSharePlay.didset(char a1)
{
  int v2 = a1 & 1;
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)&v1[OBJC_IVAR___CPSystemStateObserver_lock] + 16));
  uint64_t result = CPSystemStateObserver._allowSharePlay.getter();
  if ((result & 1) != v2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    uint64_t v5 = v1;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = v9;
      *(_DWORD *)os_log_type_t v8 = 136315138;
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v6, v7, "CPSystemStateObserver allowSharePlay changed to %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v5) + 0xE0))(v12, v13);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v5;
    unint64_t v16 = *(void (**)(id (*)(void *), uint64_t))(*(void *)v14 + 152);
    uint64_t v17 = v5;
    v16(partial apply for closure #1 in CPSystemStateObserver._allowSharePlay.didset, v15);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t CPSystemStateObserver._allowSharePlay.getter()
{
  uint64_t v1 = OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowSharePlay;
  int v2 = *((unsigned __int8 *)v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowSharePlay);
  if (v2 == 2)
  {
    char v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
    *((unsigned char *)v0 + v1) = v3 & 1;
  }
  else
  {
    char v3 = v2 & 1;
  }
  return v3 & 1;
}

uint64_t CPSystemStateObserver._allowScreenSharing.didset(char a1)
{
  int v2 = a1 & 1;
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)&v1[OBJC_IVAR___CPSystemStateObserver_lock] + 16));
  uint64_t result = CPSystemStateObserver._allowScreenSharing.getter();
  if ((result & 1) != v2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    uint64_t v5 = v1;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = v9;
      *(_DWORD *)os_log_type_t v8 = 136315138;
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v6, v7, "CPSystemStateObserver allowScreenSharing changed to %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v5) + 0xE0))(v12, v13);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v5;
    unint64_t v16 = *(void (**)(uint64_t (*)(void *), uint64_t))(*(void *)v14 + 152);
    uint64_t v17 = v5;
    v16(partial apply for closure #1 in CPSystemStateObserver._allowScreenSharing.didset, v15);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t CPSystemStateObserver._allowScreenSharing.getter()
{
  uint64_t v1 = OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharing;
  int v2 = *((unsigned __int8 *)v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharing);
  if (v2 == 2)
  {
    char v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
    *((unsigned char *)v0 + v1) = v3 & 1;
  }
  else
  {
    char v3 = v2 & 1;
  }
  return v3 & 1;
}

uint64_t CPSystemStateObserver._allowScreenSharingInitiation.didset(char a1)
{
  int v2 = a1 & 1;
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(void *)&v1[OBJC_IVAR___CPSystemStateObserver_lock] + 16));
  uint64_t result = CPSystemStateObserver._allowScreenSharingInitiation.getter();
  if ((result & 1) != v2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    uint64_t v5 = v1;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = v9;
      *(_DWORD *)os_log_type_t v8 = 136315138;
      uint64_t v10 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v6, v7, "CPSystemStateObserver allowScreenSharingInitiation changed to %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v5) + 0xE0))(v12, v13);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v5;
    unint64_t v16 = *(void (**)(uint64_t (*)(void *), uint64_t))(*(void *)v14 + 152);
    uint64_t v17 = v5;
    v16(partial apply for closure #1 in CPSystemStateObserver._allowScreenSharingInitiation.didset, v15);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in CPSystemStateObserver._allowScreenSharing.didset(void *a1, uint64_t a2, SEL *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_respondsToSelector_, *a3);
  if (result)
  {
    uint64_t v9 = swift_unknownObjectRetain();
    objc_msgSend(a1, *a3, a2, a4(v9) & 1);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CPSystemStateObserver._allowScreenSharingInitiation.getter()
{
  uint64_t v1 = OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharingInitiation;
  int v2 = *((unsigned __int8 *)v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharingInitiation);
  if (v2 == 2)
  {
    char v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
    *((unsigned char *)v0 + v1) = v3 & 1;
  }
  else
  {
    char v3 = v2 & 1;
  }
  return v3 & 1;
}

uint64_t CPSystemStateObserver.recomputeAllowedStates()()
{
  uint64_t v1 = *(void *)((char *)v0 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v1 + 16));
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v1 + 16));
  int v2 = (void *)MEMORY[0x1E4FBC8C8];
  char v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
  char v4 = CPSystemStateObserver._allowSharePlay.getter();
  *((unsigned char *)v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowSharePlay) = v3 & 1;
  CPSystemStateObserver._allowSharePlay.didset(v4 & 1);
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v1 + 16));
  char v5 = (*(uint64_t (**)(void))((*v2 & *v0) + 0x178))();
  char v6 = CPSystemStateObserver._allowScreenSharing.getter();
  *((unsigned char *)v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharing) = v5 & 1;
  CPSystemStateObserver._allowScreenSharing.didset(v6 & 1);
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v1 + 16));
  char v7 = (*(uint64_t (**)(void))((*v2 & *v0) + 0x180))();
  char v8 = CPSystemStateObserver._allowScreenSharingInitiation.getter();
  *((unsigned char *)v0 + OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharingInitiation) = v7 & 1;
  char v9 = v8 & 1;
  return CPSystemStateObserver._allowScreenSharingInitiation.didset(v9);
}

uint64_t CPSystemStateObserver.allowSharePlay.getter()
{
  return CPSystemStateObserver.allowSharePlay.getter(CPSystemStateObserver._allowSharePlay.getter);
}

uint64_t CPSystemStateObserver.allowScreenSharing.getter()
{
  return CPSystemStateObserver.allowSharePlay.getter(CPSystemStateObserver._allowScreenSharing.getter);
}

uint64_t @objc CPSystemStateObserver.allowSharePlay.getter(char *a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)&a1[OBJC_IVAR___CPSystemStateObserver_lock];
  char v5 = *(os_unfair_lock_s **)(v4 + 16);
  char v6 = a1;
  os_unfair_lock_lock(v5);
  LOBYTE(a3) = a3();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 16));

  return a3 & 1;
}

uint64_t CPSystemStateObserver.allowScreenSharingInitiation.getter()
{
  return CPSystemStateObserver.allowSharePlay.getter(CPSystemStateObserver._allowScreenSharingInitiation.getter);
}

uint64_t CPSystemStateObserver.allowSharePlay.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  LOBYTE(a1) = a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
  return a1 & 1;
}

uint64_t CPSystemStateObserver.__allocating_init(queue:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CPSystemStateObserver.init(queue:)(a1);
}

uint64_t CPSystemStateObserver.init(queue:)(void *a1)
{
  objc_allocWithZone((Class)type metadata accessor for CPCarPlayObserver());
  id v3 = v1;
  id v4 = a1;
  id v5 = CPCarPlayObserver.init(queue:)(v4);
  id v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CPManagedConfigurationObserver()), sel_init);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  char v7 = (void *)static CPAudioRoutePolicyManager.shared;
  id v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CPDisplayCloneStateObserver()), sel_init);
  uint64_t ObjectType = swift_getObjectType();

  id v10 = v5;
  id v11 = v6;
  id v12 = v7;
  id v13 = v8;
  char v16 = TULockdownModeEnabled();
  uint64_t v14 = (*(uint64_t (**)(id, id, _UNKNOWN **, id, _UNKNOWN **, id, id, _UNKNOWN **, char))(ObjectType + 520))(v4, v10, &protocol witness table for CPCarPlayObserver, v11, &protocol witness table for CPManagedConfigurationObserver, v12, v13, &protocol witness table for CPDisplayCloneStateObserver, v16);

  swift_deallocPartialClassInstance();
  return v14;
}

char *CPSystemStateObserver.__allocating_init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v18 = objc_allocWithZone(v9);
  return CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

char *CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)&v9[OBJC_IVAR___CPSystemStateObserver_conversationManager] = 0;
  uint64_t v14 = OBJC_IVAR___CPSystemStateObserver_lock;
  type metadata accessor for Lock();
  uint64_t v15 = swift_allocObject();
  char v16 = v9;
  uint64_t v17 = (_DWORD *)swift_slowAlloc();
  *(void *)(v15 + 16) = v17;
  *uint64_t v17 = 0;
  *(void *)&v9[v14] = v15;
  uint64_t v18 = OBJC_IVAR___CPSystemStateObserver_observers;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DelegatesManager<CPSystemStateObserverObserver>);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = (_DWORD *)swift_slowAlloc();
  *(void *)(v20 + 16) = v21;
  _DWORD *v21 = 0;
  *(void *)(v19 + 24) = v20;
  *(void *)&v16[v18] = v19;
  v16[OBJC_IVAR___CPSystemStateObserver____lazy_storage___screenTimeAllowed] = 2;
  v16[OBJC_IVAR___CPSystemStateObserver____lazy_storage___isDisplayCloned] = 2;
  v16[OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowSharePlay] = 2;
  v16[OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharing] = 2;
  v16[OBJC_IVAR___CPSystemStateObserver____lazy_storage____allowScreenSharingInitiation] = 2;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.default);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_1B0DF7000, v23, v24, "CPSystemStateObserver init", v25, 2u);
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }

  uint64_t v26 = &v16[OBJC_IVAR___CPSystemStateObserver_carplayObserver];
  *(void *)uint64_t v26 = a2;
  *((void *)v26 + 1) = a3;
  uint64_t v27 = &v16[OBJC_IVAR___CPSystemStateObserver_managedConfigObserver];
  *(void *)uint64_t v27 = a4;
  *((void *)v27 + 1) = a5;
  v16[OBJC_IVAR___CPSystemStateObserver_carPlayConnected] = 0;
  *(void *)&v16[OBJC_IVAR___CPSystemStateObserver_audioRoutePolicyManager] = a6;
  uint64_t v28 = &v16[OBJC_IVAR___CPSystemStateObserver_displayCloneStateObserver];
  *(void *)uint64_t v28 = a7;
  *((void *)v28 + 1) = a8;
  v16[OBJC_IVAR___CPSystemStateObserver_isLockdownModeEnabled] = a9 & 1;
  v16[OBJC_IVAR___CPSystemStateObserver_isScreening] = 0;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  v55.receiver = v16;
  v55.super_class = (Class)type metadata accessor for CPSystemStateObserver();
  uint64_t v29 = (char *)objc_msgSendSuper2(&v55, sel_init);
  uint64_t v30 = *(void *)&v29[OBJC_IVAR___CPSystemStateObserver_carplayObserver + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v32 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v30 + 24);
  char v33 = v29;
  swift_unknownObjectRetain();
  v32(v29, &protocol witness table for CPSystemStateObserver, ObjectType, v30);
  swift_unknownObjectRelease();
  uint64_t v34 = *(void *)&v33[OBJC_IVAR___CPSystemStateObserver_managedConfigObserver + 8];
  uint64_t v35 = swift_getObjectType();
  uint64_t v36 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v34 + 24);
  uint64_t v37 = v33;
  swift_unknownObjectRetain();
  v36(v29, &protocol witness table for CPSystemStateObserver, v35, v34);
  swift_unknownObjectRelease();
  objc_msgSend(*(id *)&v37[OBJC_IVAR___CPSystemStateObserver_audioRoutePolicyManager], sel_addObserver_withQueue_, v37, a1);
  uint64_t v38 = *(void *)&v37[OBJC_IVAR___CPSystemStateObserver_displayCloneStateObserver + 8];
  uint64_t v39 = swift_getObjectType();
  uint64_t v40 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v38 + 24);
  uint64_t v41 = v37;
  swift_unknownObjectRetain();
  v40(v29, &protocol witness table for CPSystemStateObserver, v39, v38);
  swift_unknownObjectRelease();
  id v42 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v43 = *MEMORY[0x1E4FADEB0];
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v41;
  *(void *)(v44 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:);
  aBlock[5] = v44;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  void aBlock[3] = &block_descriptor_43;
  uint64_t v45 = _Block_copy(aBlock);
  uint64_t v46 = v41;
  id v47 = a1;
  swift_release();
  id v48 = objc_msgSend(v42, sel_addObserverForName_object_queue_usingBlock_, v43, 0, 0, v45);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  _Block_release(v45);
  swift_unknownObjectRelease();

  return v46;
}

void closure #1 in CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)(uint64_t a1, void *a2, uint64_t a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl(&dword_1B0DF7000, v6, v7, "CPSystemStateObserver added a conversation manager from notification", v8, 2u);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB78]), sel_init);
  id v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (*(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *a2) + 0xD0))(v9);
  id v12 = (void *)(*(uint64_t (**)(uint64_t))((*v10 & *a2) + 0xC8))(v11);
  if (v12)
  {
    id v13 = v12;
    objc_msgSend(v12, sel_addDelegate_queue_, a2, a3);
    objc_msgSend(v13, sel_registerWithCompletionHandler_, 0);
  }
}

uint64_t CPSystemStateObserver.addObserver(_:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xE0))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 160))(a1, a2);
  return swift_release();
}

id CPSystemStateObserver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CPSystemStateObserver.init()()
{
}

id CPSystemStateObserver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPSystemStateObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall CPSystemStateObserver.carPlayDidConnect()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B0DF7000, v3, v4, "CPSystemStateObserver got carplay connected callback", v5, 2u);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 16));
  *(unsigned char *)(v1 + OBJC_IVAR___CPSystemStateObserver_carPlayConnected) = 1;
  CPSystemStateObserver.carPlayConnected.didset((uint64_t)&OBJC_IVAR___CPSystemStateObserver_carPlayConnected, "CPSystemStateObserver carPlayConnected change to %s");
  os_log_type_t v7 = *(os_unfair_lock_s **)(v6 + 16);
  os_unfair_lock_unlock(v7);
}

Swift::Void __swiftcall CPSystemStateObserver.carPlayDidDisconnect()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B0DF7000, v3, v4, "CPSystemStateObserver got carplay disconnected callback", v5, 2u);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 16));
  *(unsigned char *)(v1 + OBJC_IVAR___CPSystemStateObserver_carPlayConnected) = 0;
  CPSystemStateObserver.carPlayConnected.didset((uint64_t)&OBJC_IVAR___CPSystemStateObserver_carPlayConnected, "CPSystemStateObserver carPlayConnected change to %s");
  os_log_type_t v7 = *(os_unfair_lock_s **)(v6 + 16);
  os_unfair_lock_unlock(v7);
}

Swift::Void __swiftcall CPSystemStateObserver.allowedStateChanged(allowed:)(Swift::Bool allowed)
{
}

Swift::Void __swiftcall CPSystemStateObserver.audioPolicyManager(_:sharePlayAllowedStateChanged:)(CPAudioRoutePolicyManager *_, Swift::Bool sharePlayAllowedStateChanged)
{
}

void CPSystemStateObserver.conversationManager(_:screeningChangedFor:)(uint64_t a1, void *a2)
{
}

void CPSystemStateObserver.conversationManager(_:stateChangedFor:)(uint64_t a1, void *a2)
{
}

Swift::Void __swiftcall CPSystemStateObserver.clonedStateChanged(isCloned:)(Swift::Bool isCloned)
{
}

void CPSystemStateObserver.allowedStateChanged(allowed:)(char a1, const char *a2, void *a3, void (*a4)(void), const char *a5)
{
  uint64_t v10 = v5;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v13, v14, a2, v15, 8u);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }

  uint64_t v16 = *(void *)(v10 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 16));
  *(unsigned char *)(v10 + *a3) = a1 & 1;
  CPSystemStateObserver.screenTimeAllowed.didset(a4, a5);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 16));
}

uint64_t type metadata accessor for CPSystemStateObserver()
{
  return self;
}

uint64_t sub_1B1120440()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)(uint64_t a1)
{
  closure #1 in CPSystemStateObserver.init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

void specialized CPSystemStateObserver.audioPolicyManager(_:sharePlayAllowedStateChanged:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "CPSystemStateObserver got notification from CPAudioPolicyManager that allowed transitioned to %{BOOL}d", v5, 8u);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v1 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 16));
  CPSystemStateObserver.recomputeAllowedStates()();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 16));
}

void specialized CPSystemStateObserver.conversationManager(_:screeningChangedFor:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)id v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v5;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "CPSystemStateObserver We got a callback from our conversation manager %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  if (objc_msgSend(v5, sel_isScreening))
  {
    *(unsigned char *)(v2 + OBJC_IVAR___CPSystemStateObserver_isScreening) = 1;
    CPSystemStateObserver.carPlayConnected.didset((uint64_t)&OBJC_IVAR___CPSystemStateObserver_isScreening, "CPSystemStateObserver isScreening changed to %s");
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
}

void specialized CPSystemStateObserver.conversationManager(_:stateChangedFor:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)id v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v9 = v5;

    _os_log_impl(&dword_1B0DF7000, v6, v7, "CPSystemStateObserver We got a callback from our conversation manager %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR___CPSystemStateObserver_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  if (objc_msgSend(v5, sel_state) == (id)4)
  {
    *(unsigned char *)(v2 + OBJC_IVAR___CPSystemStateObserver_isScreening) = 0;
    CPSystemStateObserver.carPlayConnected.didset((uint64_t)&OBJC_IVAR___CPSystemStateObserver_isScreening, "CPSystemStateObserver isScreening changed to %s");
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
}

uint64_t sub_1B11209C0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t sub_1B1120A1C(id *a1, void **a2)
{
  id v2 = *a1;
  id v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xD0);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B1120A84@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t sub_1B1120AE0(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for CPSystemStateObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPSystemStateObserver);
}

uint64_t dispatch thunk of CPSystemStateObserver.conversationManager.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CPSystemStateObserver.conversationManager.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CPSystemStateObserver.conversationManager.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CPSystemStateObserver.observers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CPSystemStateObserver.observers.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CPSystemStateObserver.observers.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CPSystemStateObserver.computeSharePlayAllowed()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CPSystemStateObserver.computeScreenSharingAllowed()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CPSystemStateObserver.computeScreenSharingInitiationAllowed()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CPSystemStateObserver.allowSharePlay.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CPSystemStateObserver.allowScreenSharing.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CPSystemStateObserver.allowScreenSharingInitiation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CPSystemStateObserver.__allocating_init(queue:carplayObserver:managedConfigObserver:audioRoutePolicyManager:displayCloneStateObserver:isLockdownModeEnabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t dispatch thunk of CPSystemStateObserver.addObserver(_:queue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t sub_1B1120E54()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in CPSystemStateObserver._allowScreenSharingInitiation.didset(void *a1)
{
  return closure #1 in CPSystemStateObserver._allowScreenSharing.didset(a1, *(void *)(v1 + 16), (SEL *)&selRef_systemStateObserver_screenSharingInitiationAllowedStateChanged_, (uint64_t (*)(uint64_t))CPSystemStateObserver._allowScreenSharingInitiation.getter);
}

id partial apply for closure #1 in CPSystemStateObserver._allowSharePlay.didset(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = CPSystemStateObserver._allowSharePlay.getter() & 1;
  return objc_msgSend(a1, sel_systemStateObserver_sharePlayAllowedStateChanged_, v3, v4);
}

uint64_t partial apply for closure #1 in CPSystemStateObserver._allowScreenSharing.didset(void *a1)
{
  return closure #1 in CPSystemStateObserver._allowScreenSharing.didset(a1, *(void *)(v1 + 16), (SEL *)&selRef_systemStateObserver_screenSharingAllowedStateChanged_, (uint64_t (*)(uint64_t))CPSystemStateObserver._allowScreenSharing.getter);
}

uint64_t ApplicationLaunchBehavior.shouldThrowOnLaunchTimeout.getter()
{
  return 1;
}

uint64_t dispatch thunk of ApplicationLaunchProviding.launchApp(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  id v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *id v9 = v4;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 16) + **(int **)(a5 + 16));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  id v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *id v9 = v4;
  v9[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ApplicationLaunchBehavior.shouldThrowOnLaunchTimeout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

id GroupSessionDataCryptorProvider.dataCryptor.willset(void *a1)
{
  id v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v64 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v64 - v15;
  id v17 = objc_msgSend(a1, sel_encryptionKeyID);
  if (!v17)
  {
    id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_23;
  }
  uint64_t v18 = v17;
  id v69 = a1;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v19(v6, v14, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (result == 1)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v21 = ((uint64_t (*)(char *, char *, uint64_t))v19)(v16, v6, v7);
  uint64_t v22 = *(void (**)(uint64_t))(*v2 + 152);
  v22(v21);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v70 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v71 = v8 + 8;
  uint64_t v24 = v70(v14, v7);
  unint64_t v25 = 0x1E9B54000uLL;
  if ((v23 & 1) == 0)
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)log);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      unint64_t v68 = v16;
      uint64_t v31 = v30;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v67 = v32;
      uint64_t v73 = v32;
      *(_DWORD *)uint64_t v31 = 136315650;
      uint64_t v64 = v31 + 4;
      os_log_t v66 = v27;
      v22(v32);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      int v65 = v29;
      unint64_t v35 = v34;
      uint64_t v36 = (void (*)(char *, uint64_t))v70;
      v70(v14, v7);
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v36(v11, v7);
      *(_WORD *)(v31 + 22) = 2080;
      uint64_t v39 = v2[2];
      unint64_t v40 = v2[3];
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      unint64_t v25 = 0x1E9B54000;
      swift_bridgeObjectRelease();
      os_log_t v41 = v66;
      _os_log_impl(&dword_1B0DF7000, v66, (os_log_type_t)v65, "[DataCryptor] Local encryptionID rotated, invoking delegate, from=%s to=%s topic=%s", (uint8_t *)v31, 0x20u);
      uint64_t v42 = v67;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v42, -1, -1);
      uint64_t v43 = v31;
      uint64_t v16 = v68;
      MEMORY[0x1B3EA39E0](v43, -1, -1);
    }
    else
    {
      swift_release_n();
      v70(v11, v7);

      uint64_t v24 = swift_release_n();
    }
  }
  uint64_t v44 = (*(uint64_t (**)(uint64_t))(*v2 + 192))(v24);
  uint64_t v45 = specialized Set.init<A>(_:)(v44);
  swift_bridgeObjectRelease();
  id result = objc_msgSend(v69, sel_decryptionKeyIDSet);
  if (!result) {
    goto LABEL_24;
  }
  uint64_t v46 = result;
  uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v48 = specialized Set.init<A>(_:)(v47);
  swift_bridgeObjectRelease();
  if (*(void *)(v45 + 16) <= *(void *)(v48 + 16) >> 3)
  {
    uint64_t v73 = v48;
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v45);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized _NativeSet.subtracting<A>(_:)(v45, v48);
  }
  if (*(void *)(v48 + 16) <= *(void *)(v45 + 16) >> 3)
  {
    uint64_t v73 = v45;
    specialized Set._subtract<A>(_:)(v48);
  }
  else
  {
    specialized _NativeSet.subtracting<A>(_:)(v48, v45);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v25 + 3640) != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  int v52 = v51;
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v53 = swift_slowAlloc();
    id v69 = (id)swift_slowAlloc();
    uint64_t v73 = (uint64_t)v69;
    *(_DWORD *)uint64_t v53 = 136315650;
    LODWORD(v67) = v52;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    unint64_t v68 = v16;
    swift_bridgeObjectRetain();
    uint64_t v54 = Set.description.getter();
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v57 = Set.description.getter();
    unint64_t v59 = v58;
    swift_bridgeObjectRelease();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 22) = 2080;
    uint64_t v60 = v2[2];
    unint64_t v61 = v2[3];
    swift_bridgeObjectRetain();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v50, (os_log_type_t)v67, "[DataCryptor] Updated cryptor, added-encryptionIDs=%s removed-encryptionIDs=%s topic=%s", (uint8_t *)v53, 0x20u);
    id v62 = v69;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v62, -1, -1);
    MEMORY[0x1B3EA39E0](v53, -1, -1);

    uint64_t v63 = v68;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();

    uint64_t v63 = v16;
  }
  return (id)v70(v63, v7);
}

id GroupSessionDataCryptorProvider.dataCryptor.didset()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(v0[4], sel_encryptionKeyID);
  if (!v8)
  {
    id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
    goto LABEL_6;
  }
  uint64_t v9 = v8;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v4, v1);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
  id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1);
  if (result == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  (*((void (**)(char *))*v0 + 20))(v7);
  id result = objc_msgSend(v0[4], sel_decryptionKeyIDSet);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)(*((uint64_t (**)(uint64_t))*v0 + 25))(v12);
  }
LABEL_7:
  __break(1u);
  return result;
}

void *GroupSessionDataCryptorProvider.__allocating_init(topic:dataCryptor:refreshEncryptionKeysHandler:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  swift_allocObject();
  uint64_t v10 = specialized GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)(a1, a2, a3, a4, a5);
  swift_unknownObjectRelease();
  swift_release();
  return v10;
}

void *GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = specialized GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)(a1, a2, a3, a4, a5);
  swift_unknownObjectRelease();
  swift_release();
  return v5;
}

uint64_t GroupSessionDataCryptorProvider.encryptionID.setter(char *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, a1, v2);
  swift_retain();
  CurrentValueSubject.send(_:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  v6(a1, v2);
  return swift_release();
}

uint64_t GroupSessionDataCryptorProvider.decryptionIDSet.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for GroupSessionDataCryptorProvider.encryptionID : GroupSessionDataCryptorProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 160))(v6);
}

uint64_t GroupSessionDataCryptorProvider.encryptionID.getter()
{
  return swift_release();
}

void (*GroupSessionDataCryptorProvider.encryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[3] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[4] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[5] = malloc(v6);
  v3[6] = malloc(v6);
  swift_beginAccess();
  v3[7] = *(void *)(v1 + 56);
  swift_retain();
  CurrentValueSubject.value.getter();
  return GroupSessionDataCryptorProvider.encryptionID.modify;
}

void GroupSessionDataCryptorProvider.encryptionID.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v5 + 16))(*(void *)(*(void *)a1 + 40), v3, v6);
    CurrentValueSubject.send(_:)();
    uint64_t v7 = *(void (**)(void *, uint64_t))(v5 + 8);
    v7(v4, v6);
    swift_release();
    v7(v3, v6);
  }
  else
  {
    CurrentValueSubject.send(_:)();
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
    swift_release();
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t GroupSessionDataCryptorProvider.$encryptionID.getter()
{
  return swift_retain();
}

uint64_t GroupSessionDataCryptorProvider.encryptionIDPublisher.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<UUID, Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 176))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UUID, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<UUID, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<UUID, Never>);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  Publisher<>.removeDuplicates()();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<UUID, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<UUID, Never>>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t GroupSessionDataCryptorProvider.decryptionIDSet.getter()
{
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

void (*GroupSessionDataCryptorProvider.decryptionIDSet.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  swift_beginAccess();
  v3[5] = *(void *)(v1 + 64);
  swift_retain();
  CurrentValueSubject.value.getter();
  return PluginAttachmentLedgerTopic.attachments.modify;
}

uint64_t GroupSessionDataCryptorProvider.$decryptionIDSet.getter()
{
  return swift_retain();
}

uint64_t GroupSessionDataCryptorProvider.decryptionIDSetPublisher.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<[UUID], Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 216))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[UUID], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[UUID], Never>);
  lazy protocol witness table accessor for type [UUID] and conformance <A> [A]();
  Publisher<>.removeDuplicates()();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<[UUID], Never>> and conformance Publishers.RemoveDuplicates<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<[UUID], Never>>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

BOOL GroupSessionDataCryptorProvider.validEncryptionID(data:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Data._Representation(a1, a2);
  UUID.init(data:)(a1, a2, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for UUID();
  BOOL v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) != 1;
  outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  return v8;
}

uint64_t GroupSessionDataCryptorProvider.encrypt(data:seqNum:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v26[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)v4[4];
  swift_unknownObjectRetain();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v26[0] = 0;
  id v8 = objc_msgSend(v6, sel_encryptData_seqNum_error_, isa, a3, v26);
  swift_unknownObjectRelease();

  id v9 = v26[0];
  if (v8)
  {
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v11 = v9;
    uint64_t v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)log);
    id v14 = v12;
    swift_retain();
    id v15 = v12;
    swift_retain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      v26[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      id v20 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v21 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v23 = v4[2];
      unint64_t v24 = v4[3];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v16, v17, "Encryption failure error=%s topic=%s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      MEMORY[0x1B3EA39E0](v18, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
  return v10;
}

uint64_t GroupSessionDataCryptorProvider.decrypt(data:encryptionID:seqNum:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v172 = a4;
  v174[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v166 = *(void *)(v6 - 8);
  uint64_t v167 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  char v169 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  os_log_t v165 = (os_log_t)((char *)&v160 - v10);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unsigned int v164 = (char *)&v160 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v163 = (char *)&v160 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  os_log_type_t v17 = (char *)&v160 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  id v20 = (char *)&v160 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v160 - v22;
  MEMORY[0x1F4188790](v21);
  unint64_t v25 = (char *)&v160 - v24;
  unint64_t v170 = v4;
  Class isa = v4[4].isa;
  swift_unknownObjectRetain();
  Class v27 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v168 = a3;
  Class v28 = UUID._bridgeToObjectiveC()().super.isa;
  v174[0] = 0;
  id v29 = [(objc_class *)isa decryptData:v27 keyID:v28 seqNum:v172 error:v174];
  swift_unknownObjectRelease();

  id v30 = v174[0];
  if (!v29)
  {
    uint64_t v32 = v30;
    char v160 = v25;
    char v161 = v23;
    uint64_t v33 = v20;
    uint64_t v162 = v17;
    uint64_t v35 = v168;
    unint64_t v34 = v169;
    uint64_t v36 = v167;
    uint64_t v37 = v170;
    unint64_t v38 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v174[0] = v38;
    id v172 = v38;
    id v39 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      uint64_t v31 = v173;
      lazy protocol witness table accessor for type TopicDecryptionError and conformance TopicDecryptionError();
      swift_allocError();
      unsigned char *v40 = v31;
      swift_willThrow();
    }
    else
    {
      id v171 = (id)_convertErrorToNSError(_:)();
      id v41 = objc_msgSend(v171, sel_domain);
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v43;

      if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v44 == v45)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v46 = v37;
      }
      else
      {
        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v46 = v37;
        if ((v47 & 1) == 0)
        {
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v63 = type metadata accessor for Logger();
          __swift_project_value_buffer(v63, (uint64_t)log);
          uint64_t v64 = v166;
          (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v34, v35, v36);
          id v65 = v172;
          id v66 = v172;
          swift_retain();
          id v67 = v171;
          id v68 = v65;
          swift_retain();
          uint64_t v31 = (uint64_t)v67;
          id v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.error.getter();
          int v71 = v70;
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v72 = swift_slowAlloc();
            id v171 = (id)swift_slowAlloc();
            v174[0] = v171;
            *(_DWORD *)uint64_t v72 = 136315906;
            LODWORD(v168) = v71;
            id v73 = objc_msgSend((id)v31, sel_domain);
            uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            os_log_t v165 = v69;
            uint64_t v75 = v64;
            id v76 = v172;
            unint64_t v78 = v77;

            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v78, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v72 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v79 = Error.localizedDescription.getter();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            *(_WORD *)(v72 + 22) = 2080;
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            unint64_t v81 = v169;
            uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v75 + 8))(v81, v36);
            *(_WORD *)(v72 + 32) = 2080;
            uint64_t v84 = (uint64_t)v170[2].isa;
            unint64_t v85 = (unint64_t)v170[3].isa;
            swift_bridgeObjectRetain();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            os_log_t v86 = v165;
            _os_log_impl(&dword_1B0DF7000, v165, (os_log_type_t)v168, "[DataCryptor] Unexpected failure, domain=%s error=%s encryptionID=%s topic=%s", (uint8_t *)v72, 0x2Au);
            id v87 = v171;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v87, -1, -1);
            MEMORY[0x1B3EA39E0](v72, -1, -1);
          }
          else
          {

            id v88 = v172;
            (*(void (**)(char *, uint64_t))(v64 + 8))(v34, v36);

            swift_release_n();
          }
          lazy protocol witness table accessor for type TopicDecryptionError and conformance TopicDecryptionError();
          swift_allocError();
          unsigned char *v89 = 1;
          swift_willThrow();

          goto LABEL_57;
        }
      }
      id v48 = v171;
      id v49 = objc_msgSend(v171, sel_code);
      uint64_t v50 = v35;
      switch((unint64_t)v49)
      {
        case 0uLL:
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v51 = type metadata accessor for Logger();
          __swift_project_value_buffer(v51, (uint64_t)log);
          uint64_t v52 = v166;
          uint64_t v53 = v160;
          (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v160, v35, v36);
          swift_retain_n();
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled((os_log_t)v31, v54))
          {
            uint64_t v55 = swift_slowAlloc();
            unint64_t v170 = swift_slowAlloc();
            v174[0] = v170;
            *(_DWORD *)uint64_t v55 = 136315394;
            char v169 = (char *)(v55 + 4);
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v36);
            *(_WORD *)(v55 + 12) = 2080;
            uint64_t v58 = (uint64_t)v46[2].isa;
            unint64_t v59 = (unint64_t)v46[3].isa;
            swift_bridgeObjectRetain();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)v174);
            id v60 = v171;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, (os_log_t)v31, v54, "[DataCryptor] Unexpected failure, no-error set, encryptionID=%s topic=%s", (uint8_t *)v55, 0x16u);
            unint64_t v61 = v170;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v61, -1, -1);
            uint64_t v62 = v55;
            id v48 = v60;
            goto LABEL_45;
          }
          (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v36);
          goto LABEL_54;
        case 1uLL:
          uint64_t v90 = v36;
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v91 = type metadata accessor for Logger();
          __swift_project_value_buffer(v91, (uint64_t)log);
          uint64_t v92 = v166;
          uint64_t v93 = v161;
          (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v161, v50, v36);
          swift_retain_n();
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v94 = static os_log_type_t.default.getter();
          if (os_log_type_enabled((os_log_t)v31, v94))
          {
            uint64_t v95 = swift_slowAlloc();
            unint64_t v170 = swift_slowAlloc();
            v174[0] = v170;
            *(_DWORD *)uint64_t v95 = 136315394;
            char v169 = (char *)(v95 + 4);
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v90);
            *(_WORD *)(v95 + 12) = 2080;
            uint64_t v98 = (uint64_t)v46[2].isa;
            unint64_t v99 = (unint64_t)v46[3].isa;
            swift_bridgeObjectRetain();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, (uint64_t *)v174);
            id v100 = v171;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, (os_log_t)v31, v94, "[DataCryptor] Unknown keyID, encryptionID=%s topic=%s", (uint8_t *)v95, 0x16u);
            uint64_t v101 = v170;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v101, -1, -1);
            uint64_t v102 = v95;
            id v48 = v100;
            MEMORY[0x1B3EA39E0](v102, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v90);

            swift_release_n();
          }
          lazy protocol witness table accessor for type TopicDecryptionError and conformance TopicDecryptionError();
          swift_allocError();
          *uint64_t v155 = 0;
          goto LABEL_56;
        case 2uLL:
          id v103 = v48;
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v104 = type metadata accessor for Logger();
          __swift_project_value_buffer(v104, (uint64_t)log);
          uint64_t v105 = v166;
          (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v33, v35, v36);
          swift_retain_n();
          uint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.fault.getter();
          int v108 = v107;
          if (os_log_type_enabled(v106, v107))
          {
            uint64_t v109 = swift_slowAlloc();
            unint64_t v170 = swift_slowAlloc();
            v174[0] = v170;
            *(_DWORD *)uint64_t v109 = 136315394;
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            LODWORD(v169) = v108;
            uint64_t v110 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v105[1].isa)(v33, v36);
            *(_WORD *)(v109 + 12) = 2080;
            uint64_t v113 = (uint64_t)v46[2].isa;
            unint64_t v112 = (unint64_t)v46[3].isa;
            swift_bridgeObjectRetain();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v112, (uint64_t *)v174);
            id v114 = v171;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, v106, (os_log_type_t)v169, "[DataCryptor] CommonCryptorError, encryptionID=%s topic=%s", (uint8_t *)v109, 0x16u);
            uint64_t v31 = (uint64_t)v170;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v31, -1, -1);
            MEMORY[0x1B3EA39E0](v109, -1, -1);
          }
          else
          {
            uint64_t v156 = (void (*)(char *, uint64_t))v105[1].isa;
            uint64_t v31 = (uint64_t)&v105[1];
            v156(v33, v36);

            swift_release_n();
            id v114 = v103;
          }
          lazy protocol witness table accessor for type TopicDecryptionError and conformance TopicDecryptionError();
          swift_allocError();
          *unint64_t v157 = 1;
          swift_willThrow();

          break;
        case 3uLL:
          uint64_t v115 = v36;
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v116 = type metadata accessor for Logger();
          __swift_project_value_buffer(v116, (uint64_t)log);
          uint64_t v117 = v166;
          uint64_t v118 = v162;
          (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v162, v50, v36);
          swift_retain_n();
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v119 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled((os_log_t)v31, v119))
          {
            uint64_t v120 = swift_slowAlloc();
            unint64_t v170 = swift_slowAlloc();
            v174[0] = v170;
            *(_DWORD *)uint64_t v120 = 136315394;
            char v169 = (char *)(v120 + 4);
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v115);
            *(_WORD *)(v120 + 12) = 2080;
            uint64_t v123 = (uint64_t)v46[2].isa;
            unint64_t v124 = (unint64_t)v46[3].isa;
            swift_bridgeObjectRetain();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            id v48 = v171;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, (os_log_t)v31, v119, "[DataCryptor] Authentication failed, encryptionID=%s topic=%s", (uint8_t *)v120, 0x16u);
            uint64_t v125 = v170;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v125, -1, -1);
            uint64_t v62 = v120;
            goto LABEL_45;
          }
          (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v115);
          goto LABEL_54;
        case 4uLL:
          uint64_t v126 = v36;
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v127 = type metadata accessor for Logger();
          __swift_project_value_buffer(v127, (uint64_t)log);
          uint64_t v128 = v166;
          id v129 = v163;
          (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v163, v50, v126);
          swift_retain_n();
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v130 = static os_log_type_t.fault.getter();
          if (!os_log_type_enabled((os_log_t)v31, v130)) {
            goto LABEL_46;
          }
          uint64_t v131 = swift_slowAlloc();
          unint64_t v170 = swift_slowAlloc();
          v174[0] = v170;
          *(_DWORD *)uint64_t v131 = 136315394;
          char v169 = (char *)(v131 + 4);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
          uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, (uint64_t *)v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v126);
          *(_WORD *)(v131 + 12) = 2080;
          uint64_t v134 = (uint64_t)v46[2].isa;
          unint64_t v135 = (unint64_t)v46[3].isa;
          swift_bridgeObjectRetain();
          uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, (uint64_t *)v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          uint64_t v136 = "[DataCryptor] Insufficient size, encryptionID=%s topic=%s";
          goto LABEL_44;
        case 6uLL:
          uint64_t v126 = v36;
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v149 = type metadata accessor for Logger();
          __swift_project_value_buffer(v149, (uint64_t)log);
          uint64_t v128 = v166;
          id v129 = v164;
          (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v164, v50, v126);
          swift_retain_n();
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v130 = static os_log_type_t.fault.getter();
          if (!os_log_type_enabled((os_log_t)v31, v130))
          {
LABEL_46:
            (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v126);
            goto LABEL_54;
          }
          uint64_t v131 = swift_slowAlloc();
          unint64_t v170 = swift_slowAlloc();
          v174[0] = v170;
          *(_DWORD *)uint64_t v131 = 136315394;
          char v169 = (char *)(v131 + 4);
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
          uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v150, v151, (uint64_t *)v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v126);
          *(_WORD *)(v131 + 12) = 2080;
          uint64_t v152 = (uint64_t)v46[2].isa;
          unint64_t v153 = (unint64_t)v46[3].isa;
          swift_bridgeObjectRetain();
          uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v153, (uint64_t *)v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          uint64_t v136 = "[DataCryptor] Unknown version, encryptionID=%s topic=%s";
LABEL_44:
          _os_log_impl(&dword_1B0DF7000, (os_log_t)v31, v130, v136, (uint8_t *)v131, 0x16u);
          uint64_t v154 = v170;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v154, -1, -1);
          uint64_t v62 = v131;
          id v48 = v171;
          goto LABEL_45;
        default:
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v137 = type metadata accessor for Logger();
          __swift_project_value_buffer(v137, (uint64_t)log);
          os_log_t v139 = v165;
          uint64_t v138 = v166;
          (*(void (**)(os_log_t, uint64_t, uint64_t))(v166 + 16))(v165, v50, v36);
          swift_retain_n();
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v140 = static os_log_type_t.fault.getter();
          int v141 = v140;
          if (os_log_type_enabled((os_log_t)v31, v140))
          {
            uint64_t v142 = swift_slowAlloc();
            unint64_t v170 = swift_slowAlloc();
            uint64_t v173 = (uint64_t)v49;
            v174[0] = v170;
            *(_DWORD *)uint64_t v142 = 134218498;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v142 + 12) = 2080;
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            LODWORD(v169) = v141;
            uint64_t v143 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(os_log_t, uint64_t))(v138 + 8))(v139, v36);
            *(_WORD *)(v142 + 22) = 2080;
            id v145 = v171;
            uint64_t v146 = (uint64_t)v46[2].isa;
            unint64_t v147 = (unint64_t)v46[3].isa;
            swift_bridgeObjectRetain();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v147, (uint64_t *)v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B0DF7000, (os_log_t)v31, (os_log_type_t)v169, "[DataCryptor] Unexpected error-code, code=%ld encryptionID=%s topic=%s", (uint8_t *)v142, 0x20u);
            unint64_t v148 = v170;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v148, -1, -1);
            uint64_t v62 = v142;
            id v48 = v145;
LABEL_45:
            MEMORY[0x1B3EA39E0](v62, -1, -1);
          }
          else
          {
            (*(void (**)(os_log_t, uint64_t))(v138 + 8))(v139, v36);
LABEL_54:

            swift_release_n();
          }
          lazy protocol witness table accessor for type TopicDecryptionError and conformance TopicDecryptionError();
          swift_allocError();
          *uint64_t v158 = 1;
LABEL_56:
          swift_willThrow();

          break;
      }
    }
LABEL_57:

    return v31;
  }
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v31;
}

void GroupSessionDataCryptorProvider.refresh(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of Any(a1, (uint64_t)v26);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CPDataCryptor);
  if (swift_dynamicCast())
  {
    if ((objc_msgSend(v24[0], sel_isEqual_, *(void *)(v2 + 32)) & 1) == 0)
    {
      GroupSessionDataCryptorProvider.dataCryptor.willset(v24[0]);
      *(id *)(v2 + 32) = v24[0];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      GroupSessionDataCryptorProvider.dataCryptor.didset();
      swift_unknownObjectRelease();
      return;
    }
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)log);
    swift_retain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6))
    {

      swift_unknownObjectRelease();
      swift_release();
      return;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v26[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = *(void *)(v2 + 16);
    unint64_t v10 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    v24[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v5, v6, "[DataCryptor] Not refreshing cryptor since it's equal to the current cryptor, topic=%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)log);
    outlined init with copy of Any(a1, (uint64_t)v26);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v5, v12))
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);

      swift_release_n();
      return;
    }
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v25 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    outlined init with copy of Any((uint64_t)v26, (uint64_t)v24);
    outlined init with copy of Any?((uint64_t)v24, (uint64_t)&v22);
    if (v23)
    {
      outlined init with take of Any(&v22, v21);
      outlined init with copy of Any((uint64_t)v21, (uint64_t)&v20);
      uint64_t v15 = String.init<A>(reflecting:)();
      unint64_t v17 = v16;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    outlined destroy of UUID?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v24[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v18 = *(void *)(v2 + 16);
    unint64_t v19 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    v24[0] = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v14, -1, -1);
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
}

Swift::Void __swiftcall GroupSessionDataCryptorProvider.refreshEncryptionIDSet(participantIDs:)(Swift::OpaquePointer_optional participantIDs)
{
  uint64_t v2 = v1;
  rawValue = participantIDs.value._rawValue;
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    if (rawValue)
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
      uint64_t v9 = String.init<A>(reflecting:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v12 = *(void *)(v2 + 16);
    unint64_t v13 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v5, v6, "[DataCryptor] refresh-requested, participantIDs=%s topic=%s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(void *))(v2 + 40))(rawValue);
}

uint64_t GroupSessionDataCryptorProvider.deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t GroupSessionDataCryptorProvider.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for TopicCryptorProvider.encryptionID.getter in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for TopicCryptorProvider.encryptionIDPublisher.getter in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for TopicCryptorProvider.decryptionIDSet.getter in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t protocol witness for TopicCryptorProvider.decryptionIDSetPublisher.getter in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t protocol witness for TopicCryptorProvider.validEncryptionID(data:) in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))() & 1;
}

uint64_t protocol witness for TopicCryptorProvider.refresh(with:) in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t protocol witness for TopicCryptorProvider.encrypt(data:seqNum:) in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t protocol witness for TopicCryptorProvider.decrypt(data:encryptionID:seqNum:) in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t protocol witness for TopicCryptorProvider.refreshEncryptionIDSet(participantIDs:) in conformance GroupSessionDataCryptorProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))();
}

void *specialized GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v6 = v5;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v31 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v30 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v21 = a3;
  void v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  swift_unknownObjectRetain();
  swift_retain();
  id v22 = objc_msgSend(a3, sel_encryptionKeyID);
  if (!v22)
  {
    id result = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, 1, 1, v12);
    goto LABEL_6;
  }
  uint64_t v23 = v22;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v17, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
  id result = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v20, 1, v12);
  if (result == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_beginAccess();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v25(v17, v20, v12);
  v25(v31, v17, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<UUID, Never>);
  swift_allocObject();
  uint64_t v26 = CurrentValueSubject.init(_:)();
  Class v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v17, v12);
  v6[7] = v26;
  v27(v20, v12);
  swift_endAccess();
  id result = objc_msgSend(v21, sel_decryptionKeyIDSet);
  if (result)
  {
    Class v28 = result;
    uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    uint64_t v32 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID], Never>);
    swift_allocObject();
    v6[8] = CurrentValueSubject.init(_:)();
    swift_endAccess();
    return v6;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [UUID] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UUID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UUID] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [UUID]);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A]);
  }
  return result;
}

uint64_t sub_1B11252B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 152))();
}

uint64_t sub_1B1125300@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_1B112534C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 200);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for GroupSessionDataCryptorProvider()
{
  return self;
}

uint64_t method lookup function for GroupSessionDataCryptorProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSessionDataCryptorProvider);
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.__allocating_init(topic:dataCryptor:refreshEncryptionKeysHandler:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.encryptionID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.encryptionID.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.encryptionID.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.$encryptionID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.encryptionIDPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.decryptionIDSet.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.decryptionIDSet.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.decryptionIDSet.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.$decryptionIDSet.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.decryptionIDSetPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.validEncryptionID(data:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.encrypt(data:seqNum:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.decrypt(data:encryptionID:seqNum:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.refresh(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of GroupSessionDataCryptorProvider.refreshEncryptionIDSet(participantIDs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

id DisplayLayoutAppVisibilityMonitor.appPolicyManager.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t DisplayLayoutAppVisibilityMonitor.applicationController.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 24, a1);
}

uint64_t DisplayLayoutAppVisibilityMonitor.__allocating_init(appPolicyManager:applicationController:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  DisplayLayoutAppVisibilityMonitor.init(appPolicyManager:applicationController:)(a1, a2);
  return v4;
}

void *DisplayLayoutAppVisibilityMonitor.init(appPolicyManager:applicationController:)(void *a1, uint64_t a2)
{
  unsigned char v2[8] = MEMORY[0x1E4FBC870];
  v2[9] = 0;
  v2[2] = a1;
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)(v2 + 3));
  uint64_t v5 = self;
  id v6 = a1;
  id v7 = objc_msgSend(v5, sel_configurationForDefaultMainDisplayMonitor);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  void v13[4] = partial apply for closure #1 in DisplayLayoutAppVisibilityMonitor.init(appPolicyManager:applicationController:);
  v13[5] = v8;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  void v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSDisplayLayoutMonitor, @guaranteed FBSDisplayLayout?, @guaranteed FBSDisplayLayoutTransitionContext?) -> ();
  v13[3] = &block_descriptor_44;
  uint64_t v9 = _Block_copy(v13);
  swift_release();
  objc_msgSend(v7, sel_setTransitionHandler_, v9);
  _Block_release(v9);
  id v10 = objc_msgSend(self, sel_monitorWithConfiguration_, v7);

  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  unint64_t v11 = (void *)v2[9];
  v2[9] = v10;

  return v2;
}

uint64_t sub_1B1125814()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t closure #1 in DisplayLayoutAppVisibilityMonitor.init(appPolicyManager:applicationController:)(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DisplayLayoutAppVisibilityMonitor.handleDisplayLayout(_:)(a2);
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in DisplayLayoutAppVisibilityMonitor.init(appPolicyManager:applicationController:)(uint64_t a1, void *a2)
{
  return closure #1 in DisplayLayoutAppVisibilityMonitor.init(appPolicyManager:applicationController:)(a1, a2);
}

void DisplayLayoutAppVisibilityMonitor.handleDisplayLayout(_:)(void *a1)
{
  if (a1)
  {
    uint64_t v2 = v1;
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_elements);
    type metadata accessor for FBSDisplayLayoutElement();
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_retain();
    id v6 = specialized Sequence.compactMap<A>(_:)(v5);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v7 = specialized Set.init<A>(_:)((uint64_t)v6);
    swift_bridgeObjectRelease();
    unint64_t v8 = *(void *)(v7 + 16);
    unint64_t v9 = *(void *)(v2[8] + 16);
    if (v8)
    {
      if (v9 > v8 >> 3)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = swift_bridgeObjectRetain();
        uint64_t v11 = specialized _NativeSet.subtracting<A>(_:)(v10, v7);
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v20 = v2[8];
        if (*(void *)(v7 + 16) <= *(void *)(v20 + 16) >> 3)
        {
          uint64_t v30 = v2[8];
          swift_bridgeObjectRetain();
          specialized Set._subtract<A>(_:)(v7);
          uint64_t v21 = v30;
          if (*(void *)(v11 + 16)) {
            goto LABEL_17;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = specialized _NativeSet.subtracting<A>(_:)(v7, v20);
          if (*(void *)(v11 + 16))
          {
LABEL_17:
            swift_bridgeObjectRelease();
            swift_retain();
            specialized Sequence.forEach(_:)(v11, v2);
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_24;
          }
        }
        uint64_t v22 = *(void *)(v21 + 16);
        swift_bridgeObjectRelease();
        if (v22)
        {
          uint64_t v23 = *(void *)(v21 + 16);
          swift_bridgeObjectRelease();
          if (!v23 || (uint64_t v24 = specialized Collection.first.getter(v7), !v25))
          {
LABEL_24:
            unsigned char v2[8] = v7;

            swift_bridgeObjectRelease();
            return;
          }
          uint64_t v26 = v24;
          uint64_t v27 = v25;
          uint64_t v28 = specialized AppVisibilityMonitor.applicationType(forBundleIdentifier:)();
          specialized AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(v26, v27, v28);
        }
LABEL_23:
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    else if (v9)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;
      uint64_t v18 = specialized AppVisibilityMonitor.applicationType(forBundleIdentifier:)();
      specialized AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(v15, v17, v18);
      goto LABEL_23;
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v11 = v7;
    goto LABEL_15;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  oslog = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1B0DF7000, oslog, v13, "DisplayLayoutAppVisibilityMonitor: Skipping since no display layout was provided", v14, 2u);
    MEMORY[0x1B3EA39E0](v14, -1, -1);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed FBSDisplayLayoutMonitor, @guaranteed FBSDisplayLayout?, @guaranteed FBSDisplayLayoutTransitionContext?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

void *DisplayLayoutAppVisibilityMonitor.deinit()
{
  uint64_t result = *(void **)(v0 + 72);
  if (result)
  {
    objc_msgSend(result, sel_invalidate);

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
    swift_bridgeObjectRelease();

    return (void *)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall DisplayLayoutAppVisibilityMonitor.invalidate()()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1) {
    objc_msgSend(v1, sel_invalidate);
  }
  else {
    __break(1u);
  }
}

void *DisplayLayoutAppVisibilityMonitor.__deallocating_deinit()
{
  uint64_t result = *(void **)(v0 + 72);
  if (result)
  {
    objc_msgSend(result, sel_invalidate);

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
    swift_bridgeObjectRelease();

    return (void *)swift_deallocClassInstance();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for AppVisibilityMonitor.applicationController.getter in conformance DisplayLayoutAppVisibilityMonitor@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 24, a1);
}

id protocol witness for AppVisibilityMonitor.invalidate() in conformance DisplayLayoutAppVisibilityMonitor()
{
  id result = *(id *)(v0 + 72);
  if (result) {
    return objc_msgSend(result, sel_invalidate);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DisplayLayoutAppVisibilityMonitor()
{
  return self;
}

uint64_t method lookup function for DisplayLayoutAppVisibilityMonitor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DisplayLayoutAppVisibilityMonitor);
}

uint64_t dispatch thunk of DisplayLayoutAppVisibilityMonitor.__allocating_init(appPolicyManager:applicationController:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t type metadata accessor for FBSDisplayLayoutElement()
{
  unint64_t result = lazy cache variable for type metadata for FBSDisplayLayoutElement;
  if (!lazy cache variable for type metadata for FBSDisplayLayoutElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for FBSDisplayLayoutElement);
  }
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      return;
    }
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for AddressableMember();
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
      Set.Iterator.init(_cocoa:)();
      a1 = v20;
      uint64_t v18 = v21;
      uint64_t v3 = v22;
      uint64_t v4 = v23;
      unint64_t v5 = v24;
    }
    else
    {
      uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v18 = a1 + 56;
      uint64_t v3 = ~v6;
      uint64_t v7 = -v6;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      unint64_t v5 = v8 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
    }
    int64_t v9 = (unint64_t)(v3 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_14;
    }
    while (1)
    {
      if (v5)
      {
        uint64_t v10 = (v5 - 1) & v5;
        unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
        uint64_t v12 = v4;
      }
      else
      {
        int64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v9) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v14);
        uint64_t v12 = v4 + 1;
        if (!v15)
        {
          uint64_t v12 = v4 + 2;
          if (v4 + 2 >= v9) {
            goto LABEL_36;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 3;
            if (v4 + 3 >= v9) {
              goto LABEL_36;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v12 = v4 + 4;
              if (v4 + 4 >= v9) {
                goto LABEL_36;
              }
              unint64_t v15 = *(void *)(v18 + 8 * v12);
              if (!v15)
              {
                uint64_t v12 = v4 + 5;
                if (v4 + 5 >= v9) {
                  goto LABEL_36;
                }
                unint64_t v15 = *(void *)(v18 + 8 * v12);
                if (!v15)
                {
                  uint64_t v16 = v4 + 6;
                  while (v9 != v16)
                  {
                    unint64_t v15 = *(void *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      uint64_t v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_36:
                  outlined consume of [String : ()].Iterator._Variant();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
      if (!v13) {
        goto LABEL_36;
      }
      while (1)
      {
        uint64_t v17 = (void *)specialized Set._Variant.remove(_:)(v13);

        uint64_t v4 = v12;
        unint64_t v5 = v10;
        if ((a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_14:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for AddressableMember();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v13 = v19;
          swift_unknownObjectRelease();
          uint64_t v12 = v4;
          uint64_t v10 = v5;
          if (v19) {
            continue;
          }
        }
        goto LABEL_36;
      }
    }
  }
  if (*(void *)(*(void *)v1 + 16)) {
    goto LABEL_5;
  }
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v8);
  id v13 = (char *)&v24 - v12;
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v27 = v4 + 16;
  uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  int64_t v25 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v26 = v4 + 48;
  uint64_t v29 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v17) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v13, *(void *)(v29 + 48) + *(void *)(v4 + 72) * i, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
    specialized Set._Variant.remove(_:)((uint64_t)v6, (uint64_t)v10);
    outlined destroy of UUID?((uint64_t)v10);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v17) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v18);
        if (!v22)
        {
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_25;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v18);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v17 = (v22 - 1) & v22;
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*v28)(v13, 1, 1, v3);
    return swift_release();
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    int64_t v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    unint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t vars8;

  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    unint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:
  return swift_release();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for AddressableMember();
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v46;
    uint64_t v4 = v47;
    uint64_t v6 = v48;
    int64_t v5 = v49;
    unint64_t v7 = v50;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v43 = v6;
  int64_t v44 = v5;
  unint64_t v45 = v7;
  uint64_t v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v12 = (v7 - 1) & v7;
        unint64_t v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        int64_t v14 = *(void **)(*(void *)(v3 + 48) + 8 * v13);
        id v15 = v14;
        goto LABEL_15;
      }
      int64_t v25 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      int64_t v26 = (unint64_t)(v6 + 64) >> 6;
      if (v25 >= v26)
      {
        int64_t v14 = 0;
        uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v25);
      if (v27)
      {
LABEL_28:
        uint64_t v12 = (v27 - 1) & v27;
        unint64_t v13 = __clz(__rbit64(v27)) + (v25 << 6);
        int64_t v5 = v25;
        goto LABEL_14;
      }
      int64_t v28 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_44;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v28);
      if (v27)
      {
LABEL_32:
        int64_t v25 = v28;
        goto LABEL_28;
      }
      if (v5 + 3 < v26)
      {
        unint64_t v27 = *(void *)(v42 + 8 * (v5 + 3));
        if (v27)
        {
          int64_t v25 = v5 + 3;
          goto LABEL_28;
        }
        int64_t v28 = v5 + 4;
        if (v5 + 4 >= v26)
        {
          int64_t v14 = 0;
          uint64_t v12 = 0;
          v5 += 3;
LABEL_15:
          int64_t v44 = v5;
          unint64_t v45 = v12;
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_19;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v28);
        if (v27) {
          goto LABEL_32;
        }
        int64_t v25 = v5 + 5;
        if (v5 + 5 < v26)
        {
          unint64_t v27 = *(void *)(v42 + 8 * v25);
          if (v27) {
            goto LABEL_28;
          }
          int64_t v25 = v26 - 1;
          int64_t v29 = v5 + 6;
          while (v26 != v29)
          {
            unint64_t v27 = *(void *)(v42 + 8 * v29++);
            if (v27)
            {
              int64_t v25 = v29 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          int64_t v14 = 0;
          uint64_t v12 = 0;
          int64_t v5 = v25;
          goto LABEL_15;
        }
      }
      int64_t v14 = 0;
      uint64_t v12 = 0;
      int64_t v5 = v28;
      goto LABEL_15;
    }
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16
      || (uint64_t v39 = v16,
          type metadata accessor for AddressableMember(),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          int64_t v14 = v40,
          swift_unknownObjectRelease(),
          !v40))
    {
LABEL_53:
      outlined consume of [String : ()].Iterator._Variant();
      return v2;
    }
LABEL_19:
    Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_10;
    }
    type metadata accessor for AddressableMember();
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
    char v21 = static NSObject.== infix(_:_:)();

    if (v21) {
      break;
    }
    uint64_t v22 = ~v18;
    while (1)
    {
      unint64_t v19 = (v19 + 1) & v22;
      if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        break;
      }
      id v23 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24) {
        goto LABEL_47;
      }
    }
LABEL_10:

    uint64_t v3 = v41;
    uint64_t v6 = v43;
    int64_t v5 = v44;
    unint64_t v7 = v45;
  }
LABEL_47:

  char v31 = *(unsigned char *)(v2 + 32);
  unint64_t v32 = (unint64_t)((1 << v31) + 63) >> 6;
  size_t v33 = 8 * v32;
  if ((v31 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    memcpy((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v33);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v2, v19, &v41);
    uint64_t v35 = v34;
    swift_release();
    outlined consume of [String : ()].Iterator._Variant();
  }
  else
  {
    uint64_t v36 = (void *)swift_slowAlloc();
    memcpy(v36, (const void *)(v2 + 56), v33);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v36, v32, v2, v19, &v41);
    uint64_t v35 = v37;
    swift_release();
    outlined consume of [String : ()].Iterator._Variant();
    MEMORY[0x1B3EA39E0](v36, -1, -1);
  }
  return v35;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(char *, uint64_t);
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (**v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  unsigned int (**v53)(uint64_t, uint64_t, uint64_t);
  void (**v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  id v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  unint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  int64_t v14 = ~v13;
  id v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    Swift::Int v17 = ~(-1 << v16);
  }
  else {
    Swift::Int v17 = -1;
  }
  uint64_t v18 = v17 & *(void *)(a1 + 56);
  id v60 = a1;
  unint64_t v61 = a1 + 56;
  os_log_type_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  uint64_t v64 = v18;
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  unint64_t v57 = v8 + 16;
  uint64_t v58 = (char *)(a2 + 56);
  unint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  id v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  unint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  char v21 = (v18 - 1) & v18;
  uint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  id v23 = v20;
LABEL_7:
  char v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  int64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  int64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  unint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    id v60 = a1;
    unint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    uint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      outlined consume of [String : ()].Iterator._Variant();
      outlined destroy of UUID?(v26);
      return v52;
    }
    (*v51)(v59, v26, v7);
    char v31 = v52;
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    size_t v33 = -1 << *(unsigned char *)(v31 + 32);
    uint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    unint64_t v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    id v20 = v63;
    uint64_t v18 = v64;
    a1 = v60;
    id v15 = v61;
    int64_t v14 = v62;
    unint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    id v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    int64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    int64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    int64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    id v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      int64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        id v23 = v20;
LABEL_11:
        char v21 = (v29 - 1) & v29;
        uint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        char v21 = 0;
        unint64_t v27 = 1;
        id v23 = v20;
        goto LABEL_27;
      }
      int64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      id v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        int64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          id v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      char v21 = 0;
      unint64_t v27 = 1;
      goto LABEL_27;
    }
    char v21 = 0;
    unint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    int64_t v26 = (uint64_t)v55;
  }
  unint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  unint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    uint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  uint64_t v42 = *(unsigned char *)(v35 + 32);
  uint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  int64_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    unint64_t v45 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    outlined consume of [String : ()].Iterator._Variant();
    return v45;
  }
  else
  {
    uint64_t v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    outlined consume of [String : ()].Iterator._Variant();
    MEMORY[0x1B3EA39E0](v47, -1, -1);
    return v48;
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  BOOL v24;
  uint64_t v25;
  void *v26;
  BOOL v27;
  uint64_t isStackAllocationSafe;
  char v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;

  uint64_t v2 = a2;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    int64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    uint64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        uint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        uint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        uint64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                id v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  outlined consume of [String : ()].Iterator._Variant();
                  return v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        uint64_t v9 = v14;
      }
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      Swift::Int v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      unint64_t v19 = Hasher._finalize()();
      id v20 = -1 << *(unsigned char *)(v2 + 32);
      char v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    id v23 = (void *)(v22 + 16 * v21);
    char v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      unint64_t v38 = a1;
      uint64_t v39 = v37;
      unint64_t v40 = v35;
      uint64_t v41 = v9;
      uint64_t v42 = v7;
    }
    else
    {
      int64_t v25 = ~v20;
      do
      {
        char v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        int64_t v26 = (void *)(v22 + 16 * v21);
        unint64_t v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      unint64_t v38 = a1;
      uint64_t v39 = v37;
      unint64_t v40 = v35;
      uint64_t v41 = v9;
      uint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    int64_t v29 = *(unsigned char *)(v2 + 32);
    uint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    char v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      MEMORY[0x1F4188790](isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      unint64_t v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : ()].Iterator._Variant();
    }
    else
    {
      size_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      unint64_t v32 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v33, v30, v2, v21, &v38);
      swift_release();
      outlined consume of [String : ()].Iterator._Variant();
      MEMORY[0x1B3EA39E0](v33, -1, -1);
    }
    return v32;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  int64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v38 = a3 + 56;
  while (2)
  {
    uint64_t v35 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            unint64_t v13 = *(void **)(*(void *)(*v5 + 48) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }
          int64_t v27 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_47;
          }
          int64_t v28 = (unint64_t)(v5[2] + 64) >> 6;
          if (v27 >= v28)
          {
            unint64_t v13 = 0;
            uint64_t v11 = 0;
            goto LABEL_8;
          }
          uint64_t v29 = v5[1];
          unint64_t v30 = *(void *)(v29 + 8 * v27);
          if (v30)
          {
LABEL_22:
            uint64_t v11 = (v30 - 1) & v30;
            unint64_t v12 = __clz(__rbit64(v30)) + (v27 << 6);
            int64_t v10 = v27;
            goto LABEL_7;
          }
          if (v10 + 2 < v28)
          {
            unint64_t v30 = *(void *)(v29 + 8 * (v10 + 2));
            if (v30)
            {
              int64_t v27 = v10 + 2;
              goto LABEL_22;
            }
            if (v10 + 3 >= v28)
            {
              unint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 2;
              goto LABEL_8;
            }
            unint64_t v30 = *(void *)(v29 + 8 * (v10 + 3));
            if (v30)
            {
              int64_t v27 = v10 + 3;
              goto LABEL_22;
            }
            int64_t v27 = v10 + 4;
            if (v10 + 4 >= v28)
            {
              unint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              uint64_t v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }
            unint64_t v30 = *(void *)(v29 + 8 * v27);
            if (v30) {
              goto LABEL_22;
            }
            int64_t v27 = v28 - 1;
            int64_t v33 = v10 + 5;
            while (v28 != v33)
            {
              unint64_t v30 = *(void *)(v29 + 8 * v33++);
              if (v30)
              {
                int64_t v27 = v33 - 1;
                goto LABEL_22;
              }
            }
          }
          unint64_t v13 = 0;
          uint64_t v11 = 0;
          int64_t v10 = v27;
          goto LABEL_8;
        }
        if (!__CocoaSet.Iterator.next()()
          || (type metadata accessor for AddressableMember(),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              unint64_t v13 = v39,
              swift_unknownObjectRelease(),
              !v39))
        {
LABEL_45:
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(a1, a2, v35, a3, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
          return;
        }
LABEL_12:
        Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        uint64_t v16 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v17 = v15 & ~v16;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = 1 << v17;
        if (((1 << v17) & *(void *)(v38 + 8 * (v17 >> 6))) == 0) {
          goto LABEL_3;
        }
        type metadata accessor for AddressableMember();
        id v20 = *(id *)(*(void *)(a3 + 48) + 8 * v17);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          break;
        }
        uint64_t v22 = ~v16;
        for (unint64_t i = v17 + 1; ; unint64_t i = v24 + 1)
        {
          unint64_t v24 = i & v22;
          if (((*(void *)(v38 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0) {
            break;
          }
          id v25 = *(id *)(*(void *)(a3 + 48) + 8 * v24);
          char v26 = static NSObject.== infix(_:_:)();

          if (v26)
          {

            unint64_t v18 = v24 >> 6;
            uint64_t v19 = 1 << v24;
            goto LABEL_25;
          }
        }
LABEL_3:

        int64_t v5 = a5;
      }

LABEL_25:
      unint64_t v31 = a1[v18];
      a1[v18] = v31 & ~v19;
      BOOL v32 = (v19 & v31) == 0;
      int64_t v5 = a5;
    }
    while (v32);
    uint64_t v8 = v35 - 1;
    if (__OFSUB__(v35, 1))
    {
LABEL_47:
      __break(1u);
      return;
    }
    if (v35 != 1) {
      continue;
    }
    break;
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  Swift::Int v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v13);
  id v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  os_log_type_t v54 = a1;
  uint64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  unint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  unint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          int64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          outlined destroy of UUID?((uint64_t)v11);
          uint64_t v51 = v64;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v54, v52, v53, v51);
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        id v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      uint64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v15, *(void *)(v64 + 48) + v41 * v39, v12);
        _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v25 = *v24;
        (*v24)(v15, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v53 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v39 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return specialized _NativeSet.extractSubset(using:count:)(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        int64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  int64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  BOOL v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<ActivitySession>);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;

  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v8;
  }
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    int64_t v9 = 0;
  }
  else {
    int64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    unint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      uint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        unint64_t v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0;
        }
        v24 |= v26;
        char v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      uint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  unint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v10 + 40);
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(*(void *)(v10 + 48) + 8 * v24) = v20;
    ++*(void *)(v10 + 16);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v29 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v30 = a2 + 3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v11 >= v29) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v28 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v29) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v28 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v29) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v28 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 3;
          if (v11 + 3 >= v29) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v28 + 8 * v7);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_24:
    unint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = a2[6];
    uint64_t v18 = a2[7];
    __swift_project_boxed_opaque_existential_1(v30, v17);
    Swift::Int v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8);
    swift_bridgeObjectRetain();
    if ((v19(v16, v15, v17, v18) & 1) == 0)
    {
      uint64_t v8 = 2;
      goto LABEL_5;
    }
    id v20 = (void *)a2[2];
    uint64_t v21 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v20) + 0x98);
    unint64_t v22 = v20;
    uint64_t v23 = v21();

    if (*(void *)(v23 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
      if (v25)
      {
        id v26 = *(id *)(*(void *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned int v27 = objc_msgSend(v26, sel_BOOLValue);

        uint64_t v8 = v27;
        goto LABEL_5;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
LABEL_5:
    specialized AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(v16, v15, v8);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v29) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v29) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v28 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      unint64_t v27 = v1 & 0xC000000000000001;
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v4 = 4;
      while (1)
      {
        if (v27) {
          id v5 = (id)MEMORY[0x1B3EA25C0](v4 - 4, v1);
        }
        else {
          id v5 = *(id *)(v1 + 8 * v4);
        }
        uint64_t v6 = v5;
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
        {
          __break(1u);
          goto LABEL_23;
        }
        id v8 = objc_msgSend(v5, sel_bundleIdentifier);
        if (!v8) {
          goto LABEL_18;
        }
        unint64_t v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        if ((specialized AppVisibilityMonitor.shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(v10, v12) & 1) == 0) {
          break;
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        }
        unint64_t v14 = v3[2];
        unint64_t v13 = v3[3];
        if (v14 >= v13 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v3);
        }
        v3[2] = v14 + 1;
        uint64_t v15 = &v3[2 * v14];
        void v15[4] = v10;
        v15[5] = v12;
LABEL_5:
        ++v4;
        if (v7 == v2) {
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
LABEL_18:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Log.default);
      id v17 = v6;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        id v26 = v3;
        unint64_t v21 = v1;
        uint64_t v22 = v2;
        uint64_t v23 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 138412290;
        *(void *)(v20 + 4) = v17;
        *uint64_t v23 = v17;
        _os_log_impl(&dword_1B0DF7000, v18, v19, "DisplayLayoutAppVisibilityMonitor: Ignoring visibility update for layout element: %@", (uint8_t *)v20, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        unint64_t v24 = v23;
        uint64_t v2 = v22;
        unint64_t v1 = v21;
        uint64_t v3 = v26;
        MEMORY[0x1B3EA39E0](v24, -1, -1);
        MEMORY[0x1B3EA39E0](v20, -1, -1);
      }
      else
      {
      }
      goto LABEL_5;
    }
  }
  uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
LABEL_25:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x1F4188790](v17);
  os_log_type_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  if (!v20) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v21 = v20;
  unint64_t v27 = v15;
  uint64_t v43 = Array.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v21);
  uint64_t v41 = v19;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    unint64_t v24 = v27;
    while (1)
    {
      char v25 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t StateMachine.Transition.from.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t StateMachine.Transition.to.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t StateMachine.Transition.event.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 56));
}

uint64_t StateMachine.Transition.init(from:to:event:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);
  v11(a6, a1, a4);
  uint64_t v12 = type metadata accessor for StateMachine.Transition();
  v11(a6 + *(int *)(v12 + 52), a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + *(int *)(v12 + 56), a3, a5);
}

uint64_t type metadata accessor for StateMachine.Transition()
{
  return swift_getGenericMetadata();
}

uint64_t StateMachine.Trigger.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for StateMachine.Trigger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t StateMachine.Trigger.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static StateMachine.Trigger.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for StateMachine.Trigger();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

Swift::Int StateMachine.Trigger.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t StateMachine._currentState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t StateMachine._currentState.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 112);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StateMachine<A, B>.Trigger()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StateMachine<A, B>.Trigger()
{
  return static StateMachine.Trigger.== infix(_:_:)();
}

uint64_t StateMachine.__allocating_init(initialState:transitions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_allocObject();
  uint64_t v6 = specialized StateMachine.init(initialState:transitions:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v6;
}

uint64_t StateMachine.init(initialState:transitions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = specialized StateMachine.init(initialState:transitions:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 80) - 8) + 8))(a1);
  return v5;
}

uint64_t closure #1 in StateMachine.init(initialState:transitions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v29 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v28 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v16;
  uint64_t v31 = v17;
  uint64_t v32 = v18;
  uint64_t v33 = v19;
  uint64_t v20 = v19;
  v25[1] = v19;
  type metadata accessor for StateMachine.Trigger();
  uint64_t v27 = a5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  Swift::Int v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21(v15, a1, a2);
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = v20;
  uint64_t v22 = type metadata accessor for StateMachine.Transition();
  uint64_t v23 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v28, a1 + *(int *)(v22 + 56), a3);
  StateMachine.Trigger.init(_:_:)((uint64_t)v15, v23, a2, a3, v26);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v21)(v27, a1 + *(int *)(v22 + 52), a2);
}

void StateMachine.currentState.getter()
{
}

uint64_t StateMachine.execute(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + *(void *)(*(void *)v1 + 128));
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  closure #1 in StateMachine.execute(_:)(v1, a1, (char *)&v5);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 16));
  return v5;
}

uint64_t closure #1 in StateMachine.execute(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 80);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v36 = (char *)&v29 - v8;
  uint64_t v9 = v4[11];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v34 = v4[12];
  uint64_t v33 = v4[13];
  uint64_t v39 = v5;
  uint64_t v40 = v9;
  uint64_t v41 = v34;
  uint64_t v42 = v33;
  uint64_t v13 = type metadata accessor for StateMachine.Trigger();
  uint64_t v35 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v29 = (char *)&v29 - v20;
  uint64_t v21 = *(void *)(a1 + v4[15]);
  StateMachine._currentState.getter((uint64_t)v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v37, v9);
  uint64_t v22 = v36;
  uint64_t v23 = v9;
  uint64_t v24 = v32;
  StateMachine.Trigger.init(_:_:)((uint64_t)v19, (uint64_t)v12, v5, v23, (uint64_t)v16);
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1B3EA1A00](v16, v21, v13, v5, WitnessTable);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v5) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v22, v31);
    char v27 = 0;
  }
  else
  {
    uint64_t v28 = v29;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v29, v22, v5);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v19, v28, v5);
    StateMachine._currentState.setter((uint64_t)v19);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v28, v5);
    char v27 = 1;
  }
  char *v38 = v27;
  return result;
}

uint64_t StateMachine.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t StateMachine.__deallocating_deinit()
{
  StateMachine.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized StateMachine.init(initialState:transitions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 128);
  type metadata accessor for Lock();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *(void *)(v8 + 16) = v9;
  *uint64_t v9 = 0;
  *(void *)(v3 + v7) = v8;
  uint64_t v10 = v6[10];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v3 + *(void *)(*(void *)v3 + 112), a1, v10);
  uint64_t v25 = a2;
  void v17[2] = v10;
  uint64_t v18 = v6[11];
  uint64_t v19 = v6[12];
  uint64_t v20 = v6[13];
  type metadata accessor for StateMachine.Transition();
  uint64_t v11 = type metadata accessor for Array();
  uint64_t v21 = v10;
  uint64_t v22 = v18;
  uint64_t v23 = v19;
  uint64_t v24 = v20;
  type metadata accessor for StateMachine.Trigger();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in StateMachine.init(initialState:transitions:), (uint64_t)v17, v11, TupleTypeMetadata2, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v14);
  swift_bridgeObjectRelease();
  uint64_t v21 = v15;
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  *(void *)(v3 + *(void *)(*(void *)v3 + 120)) = Dictionary.init<A>(uniqueKeysWithValues:)();
  return v3;
}

uint64_t partial apply for closure #1 in StateMachine.currentState.getter@<X0>(uint64_t a1@<X8>)
{
  return StateMachine._currentState.getter(a1);
}

uint64_t type metadata completion function for StateMachine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for StateMachine()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for StateMachine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for StateMachine);
}

uint64_t dispatch thunk of StateMachine.__allocating_init(initialState:transitions:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of StateMachine.currentState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of StateMachine.execute(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t type metadata instantiation function for StateMachine.Transition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t type metadata completion function for StateMachine.Transition()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateMachine.Transition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v8 + v12;
  unint64_t v14 = ((v8 + v12 + ((v8 + v9) & ~v9)) & ~v12) + *(void *)(v11 + 64);
  if ((v12 | v9) > 7 || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + (((v12 | v9) + 16) & ~(v12 | v9)));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v9;
    uint64_t v22 = ~v12;
    uint64_t v23 = v5;
    uint64_t v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    v19(a1, a2, v6);
    unint64_t v20 = ((unint64_t)a2 + v10) & v18;
    v19((uint64_t *)(((unint64_t)v4 + v10) & v18), (uint64_t *)v20, v6);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((((unint64_t)v4 + v10) & v18) + v13) & v22, (v20 + v13) & v22, v23);
  }
  return v4;
}

uint64_t destroy for StateMachine.Transition(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = *(void *)(v5 + 64);
  unint64_t v8 = (v7 + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v6(v8, v4);
  uint64_t v9 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (v8 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return v10(v11);
}

uint64_t initializeWithCopy for StateMachine.Transition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v9 + v10 + a1) & ~v10;
  uint64_t v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((v9 + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v9 + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithCopy for StateMachine.Transition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v9 + v10 + a1) & ~v10;
  uint64_t v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))((v9 + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v9 + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t initializeWithTake for StateMachine.Transition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v9 + v10 + a1) & ~v10;
  uint64_t v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((v9 + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v9 + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithTake for StateMachine.Transition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v9 + v10 + a1) & ~v10;
  uint64_t v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((v9 + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v9 + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachine.Transition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v5) {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = v9 + v10;
  unsigned int v14 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_24;
  }
  uint64_t v15 = ((v9 + v11 + (v13 & ~v10)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v18 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_24:
      if (v12)
      {
        if (v5 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((((unint64_t)a1 + v13) & ~v10) + v9 + v11) & ~v11, v8, v6);
        }
      }
      return 0;
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_24;
  }
LABEL_14:
  int v19 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v19 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v20 = v15;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v12 + (v21 | v19) + 1;
}

void storeEnumTagSinglePayload for StateMachine.Transition(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v14 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v15 = v11 + v12;
  size_t v16 = ((v11 + v13 + ((v11 + v12) & ~v12)) & ~v13) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v17 = a3 >= v14;
  unsigned int v18 = a3 - v14;
  if (v18 != 0 && v17)
  {
    if (v16 <= 3)
    {
      unsigned int v23 = ((v18 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
      if (HIWORD(v23))
      {
        int v19 = 4;
      }
      else if (v23 >= 0x100)
      {
        int v19 = 2;
      }
      else
      {
        int v19 = v23 > 1;
      }
    }
    else
    {
      int v19 = 1;
    }
  }
  else
  {
    int v19 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v20 = ~v14 + a2;
    if (v16 < 4)
    {
      int v21 = (v20 >> (8 * v16)) + 1;
      if (v16)
      {
        int v24 = v20 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v24;
          a1[2] = BYTE2(v24);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v24;
        }
        else
        {
          *a1 = v24;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        a1[v16] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v21;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v21;
        return;
      default:
        return;
    }
  }
  uint64_t v22 = ~v12;
  switch(v19)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1B112B51CLL);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          char v27 = *(void (**)(char *))(v6 + 56);
          v27(a1);
        }
        else
        {
          unint64_t v25 = (((unint64_t)&a1[v15] & v22) + v11 + v13) & ~v13;
          uint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
          v26(v25);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for StateMachine.Trigger()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateMachine.Trigger(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t destroy for StateMachine.Trigger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return v6(v7);
}

uint64_t initializeWithCopy for StateMachine.Trigger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 48) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for StateMachine.Trigger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for StateMachine.Trigger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for StateMachine.Trigger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachine.Trigger(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for StateMachine.Trigger(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1B112BF78);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          int v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          unsigned int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for StateMachine.Trigger()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for Equatable in StateMachine<A, B>.Trigger()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in StateMachine.init(initialState:transitions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in StateMachine.init(initialState:transitions:)(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata.developerMetadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20);
  uint64_t result = outlined consume of Data?(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata()
{
  uint64_t result = type metadata singleton initialization cache for AttachmentLedgerMetadata_AttachmentMetadata;
  if (!type metadata singleton initialization cache for AttachmentLedgerMetadata_AttachmentMetadata) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata.developerMetadata.getter()
{
  unint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *v1;
  }
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t key path setter for AttachmentLedgerMetadata_AttachmentMetadata.developerMetadata : AttachmentLedgerMetadata_AttachmentMetadata(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  outlined copy of Data._Representation(v2, v3);
  uint64_t result = outlined consume of Data?(v5, v6);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t (*AttachmentLedgerMetadata_AttachmentMetadata.developerMetadata.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (v6 >> 60 == 15) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v4;
  }
  unint64_t v8 = 0xC000000000000000;
  if (v6 >> 60 != 15) {
    unint64_t v8 = v6;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return AttachmentLedgerMetadata_AttachmentMetadata.developerMetadata.modify;
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata.developerMetadata.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  if (a2)
  {
    outlined copy of Data._Representation(*(void *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    uint64_t result = outlined consume of Data?(*(void *)v3, *(void *)(v3 + 8));
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

BOOL AttachmentLedgerMetadata_AttachmentMetadata.hasDeveloperMetadata.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall AttachmentLedgerMetadata_AttachmentMetadata.clearDeveloperMetadata()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20);
  outlined consume of Data?(*(void *)v1, *(void *)(v1 + 8));
  *(_OWORD *)uint64_t v1 = xmmword_1B113B080;
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*AttachmentLedgerMetadata_AttachmentMetadata.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double AttachmentLedgerMetadata_AttachmentMetadata.init()@<D0>(uint64_t a1@<X8>)
{
  UnknownStorage.init()();
  uint64_t v2 = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  double result = 0.0;
  *(_OWORD *)(a1 + *(int *)(v2 + 20)) = xmmword_1B113B080;
  return result;
}

void *AttachmentLedgerMetadata_AttachmentMetadata.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedgerMetadata_AttachmentMetadata.protoMessageName;
}

unint64_t static AttachmentLedgerMetadata_AttachmentMetadata.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  if (one-time initialization token for _protobuf_nameMap != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap);
}

uint64_t static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _protobuf_nameMap != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for _NameMap();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    uint64_t v0 = 0;
  }
  return result;
}

uint64_t AttachmentLedgerMetadata_AttachmentMetadata.traverse<A>(visitor:)()
{
  uint64_t result = closure #1 in AttachmentLedgerMetadata_AttachmentMetadata.traverse<A>(visitor:)(v0);
  if (!v1) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedgerMetadata_AttachmentMetadata.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  uint64_t v3 = a1 + *(int *)(result + 20);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    outlined copy of Data._Representation(*(void *)v3, *(void *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

Swift::Int AttachmentLedgerMetadata_AttachmentMetadata.hashValue.getter()
{
  return Hasher._finalize()();
}

double protocol witness for Message.init() in conformance AttachmentLedgerMetadata_AttachmentMetadata@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_1B113B080;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedgerMetadata_AttachmentMetadata()
{
  return AttachmentLedgerMetadata_AttachmentMetadata.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedgerMetadata_AttachmentMetadata()
{
  return AttachmentLedgerMetadata_AttachmentMetadata.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedgerMetadata_AttachmentMetadata@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _protobuf_nameMap != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for _NameMap();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedgerMetadata_AttachmentMetadata()
{
  lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t specialized static AttachmentLedgerMetadata_AttachmentMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  unsigned int v10 = &v21[-v9];
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  size_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
LABEL_8:
    char v18 = 0;
    return v18 & 1;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  int v22 = specialized static Data.== infix(_:_:)(v12, v13, v15, v16);
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v22 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  int v17 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v17(v10, a1, v4);
  v17(v8, a2, v4);
  lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  int v19 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v10, v4);
  return v18 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedgerMetadata_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
}

uint64_t base witness table accessor for Message in AttachmentLedgerMetadata_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
}

uint64_t base witness table accessor for Hashable in AttachmentLedgerMetadata_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
}

uint64_t base witness table accessor for Equatable in AttachmentLedgerMetadata_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
}

uint64_t sub_1B112CE9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v3;
  }
  unint64_t v7 = 0xC000000000000000;
  if (v5 >> 60 != 15) {
    unint64_t v7 = v5;
  }
  *a2 = v6;
  a2[1] = v7;
  return outlined copy of Data?(v4, v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    uint64_t v8 = *v6;
    return outlined consume of Data._Representation(v8, v7);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    return a1;
  }
  uint64_t v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t initializeWithTake for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B112D37C);
}

uint64_t sub_1B112D37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    BOOL v11 = ((4 * v10) & 0xC) == 0;
    unsigned int v12 = ((4 * v10) & 0xC | (v10 >> 2)) ^ 0xF;
    if (v11) {
      return 0;
    }
    else {
      return v12;
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedgerMetadata_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B112D45C);
}

uint64_t sub_1B112D45C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    BOOL v11 = (void *)(a1 + *(int *)(a4 + 20));
    void *v11 = 0;
    v11[1] = (unint64_t)((~a2 >> 2) & 3 | (4 * ~a2)) << 60;
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedgerMetadata_AttachmentMetadata()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id ProtectedAppsObserver.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t ProtectedAppsObserver.delegate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14CopresenceCore21ProtectedAppsObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v1);
}

uint64_t ProtectedAppsObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14CopresenceCore21ProtectedAppsObserver_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ProtectedAppsObserver.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14CopresenceCore21ProtectedAppsObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1B3EA3B30](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

id ProtectedAppsObserver.init()()
{
  *(void *)&v0[OBJC_IVAR____TtC14CopresenceCore21ProtectedAppsObserver_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for ProtectedAppsObserver();
  id v1 = objc_msgSendSuper2(&v6, sel_init);
  uint64_t v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(objc_msgSend(v2, sel_subjectMonitorRegistry), sel_addMonitor_, v3);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v3;
}

uint64_t type metadata accessor for ProtectedAppsObserver()
{
  return self;
}

uint64_t ProtectedAppsObserver.hiddenApps.getter()
{
  id v0 = objc_msgSend(self, sel_hiddenApplications);
  type metadata accessor for APApplication();
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v15;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1B3EA25C0](v4, v1);
      }
      else {
        id v6 = *(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_bundleIdentifier);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      }
      ++v4;
      *(void *)(v15 + 16) = v13 + 1;
      uint64_t v14 = v15 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v5;
  }
  __break(1u);
  return result;
}

id ProtectedAppsObserver.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProtectedAppsObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ProtectedAppsObserverProtocol.delegate.getter in conformance ProtectedAppsObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x58))();
}

uint64_t protocol witness for ProtectedAppsObserverProtocol.delegate.setter in conformance ProtectedAppsObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x60))();
}

void (*protocol witness for ProtectedAppsObserverProtocol.delegate.modify in conformance ProtectedAppsObserver(void *a1))(void *a1)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v1) + 0x68))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for ProtectedAppsObserverProtocol.hiddenApps.getter in conformance ProtectedAppsObserver()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **v0) + 0x78))();
}

uint64_t specialized ProtectedAppsObserver.appProtectionSubjectsChanged(_:for:)(unint64_t a1)
{
  objc_super v2 = v1;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  unint64_t v27 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_19;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      MEMORY[0x1B3EA25C0](i, a1);
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1B3EA1CF0]();
        if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    for (uint64_t j = 0; j != v5; ++j)
    {
      uint64_t v9 = *(void **)(a1 + 8 * j + 32);
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1B3EA1CF0](v9);
        if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
LABEL_19:
  swift_bridgeObjectRelease();
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_21:
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0);
      if ((v10 & 0x8000000000000000) == 0)
      {
        uint64_t v26 = v2;
        uint64_t v11 = 0;
        uint64_t v12 = v4;
        do
        {
          if ((v27 & 0xC000000000000001) != 0) {
            id v13 = (id)MEMORY[0x1B3EA25C0](v11, v27);
          }
          else {
            id v13 = *(id *)(v27 + 8 * v11 + 32);
          }
          uint64_t v14 = v13;
          id v15 = objc_msgSend(v13, sel_bundleIdentifier, v26);
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v18 = v17;

          unint64_t v20 = *(void *)(v12 + 16);
          unint64_t v19 = *(void *)(v12 + 24);
          if (v20 >= v19 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          }
          ++v11;
          *(void *)(v12 + 16) = v20 + 1;
          uint64_t v21 = v12 + 16 * v20;
          *(void *)(v21 + 32) = v16;
          *(void *)(v21 + 40) = v18;
        }
        while (v10 != v11);
        uint64_t v22 = swift_bridgeObjectRelease();
        objc_super v2 = v26;
        goto LABEL_32;
      }
LABEL_40:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_21;
    }
  }
  uint64_t v22 = swift_bridgeObjectRelease();
  uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_32:
  if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x58))(v22))
  {
    uint64_t v24 = v23;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 8))(v12, ObjectType, v24);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B112E10C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x58))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B112E168(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x60);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of ProtectedAppsObserverProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ProtectedAppsObserverProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ProtectedAppsObserverProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ProtectedAppsObserverProtocol.hiddenApps.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ProtectedAppsObserverDelegate.appProtectionsChanged(bundleIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t method lookup function for ProtectedAppsObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ProtectedAppsObserver);
}

uint64_t dispatch thunk of ProtectedAppsObserver.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ProtectedAppsObserver.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ProtectedAppsObserver.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ProtectedAppsObserver.appProtectionSubjectsChanged(_:for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ProtectedAppsObserver.hiddenApps.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.activitySessions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.pluginClientReporter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.pubSubTopicReporter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ActivitySessionContainerProvider.topicCategory(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t SessionSuspensionController.__allocating_init(processIdentifier:suspensionTarget:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96418]), sel_init);
  type metadata accessor for SessionSuspensionController();
  uint64_t v7 = swift_allocObject();
  return specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, a2, a3, (uint64_t)v6, v7);
}

void thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitor, @guaranteed RBSProcessHandle, @guaranteed RBSProcessStateUpdate) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, id, id))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, v8, v9);
  swift_release();
}

uint64_t ProcessMonitorStateUpdate.isRunning.getter(char a1)
{
  return a1 & 1;
}

CopresenceCore::ProcessMonitorStateUpdate __swiftcall ProcessMonitorStateUpdate.init(isRunning:)(Swift::Bool isRunning)
{
  return (CopresenceCore::ProcessMonitorStateUpdate)isRunning;
}

uint64_t static SessionSuspensionController.Errors.== infix(_:_:)()
{
  return 1;
}

void SessionSuspensionController.Errors.hash(into:)()
{
}

Swift::Int SessionSuspensionController.Errors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t SessionSuspensionController.suspensionTarget.getter()
{
  swift_beginAccess();
  return MEMORY[0x1B3EA3B30](v0 + 112);
}

uint64_t SessionSuspensionController.suspensionTarget.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 120) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*SessionSuspensionController.suspensionTarget.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3EA3B30](v1 + 112);
  uint64_t v5 = *(void *)(v1 + 120);
  v3[3] = v4;
  v3[4] = v5;
  return SessionSuspensionController.suspensionTarget.modify;
}

void SessionSuspensionController.suspensionTarget.modify(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 120) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t SessionSuspensionController.processIdentifier.getter()
{
  swift_beginAccess();
  return *(unsigned int *)(v0 + 128);
}

uint64_t SessionSuspensionController.processIdentifier.setter(int a1)
{
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v1 + 128) = a1;
  return result;
}

uint64_t (*SessionSuspensionController.processIdentifier.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t SessionSuspensionController.processMonitor.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 136, a1);
}

uint64_t key path setter for SessionSuspensionController.suspensionAcquireTask : SessionSuspensionController(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 176);
  *(void *)(v3 + 176) = v2;
  swift_retain_n();
  SessionSuspensionController.suspensionAcquireTask.didset(v4);
  swift_release();
  return swift_release();
}

void SessionSuspensionController.suspensionAcquireTask.didset(uint64_t a1)
{
  swift_beginAccess();
  if (*(void *)(v1 + 176))
  {
    uint64_t v3 = one-time initialization token for suspensionController;
    swift_retain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.suspensionController);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v19 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<AnyCancellable, Error>);
      uint64_t v9 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v5, v6, "Tracking suspensionAcquireTask: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v8, -1, -1);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_13;
  }
  if (one-time initialization token for suspensionController != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.suspensionController);
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v12, v13))
  {

LABEL_13:
    swift_release_n();
    return;
  }
  uint64_t v14 = (uint8_t *)swift_slowAlloc();
  uint64_t v15 = swift_slowAlloc();
  uint64_t v19 = v15;
  *(_DWORD *)uint64_t v14 = 136315138;
  if (a1)
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<AnyCancellable, Error>);
    uint64_t v16 = String.init<A>(reflecting:)();
    unint64_t v18 = v17;
  }
  else
  {
    unint64_t v18 = 0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B0DF7000, v12, v13, "No longer tracking suspensionAcquireTask: %s", v14, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B3EA39E0](v15, -1, -1);
  MEMORY[0x1B3EA39E0](v14, -1, -1);
}

uint64_t SessionSuspensionController.suspensionAcquireTask.getter()
{
  return swift_retain();
}

uint64_t SessionSuspensionController.suspensionAcquireTask.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 176);
  *(void *)(v1 + 176) = a1;
  swift_retain();
  SessionSuspensionController.suspensionAcquireTask.didset(v3);
  swift_release();
  return swift_release();
}

void (*SessionSuspensionController.suspensionAcquireTask.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = *(void *)(v1 + 176);
  swift_retain();
  return SessionSuspensionController.suspensionAcquireTask.modify;
}

void SessionSuspensionController.suspensionAcquireTask.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  uint64_t v4 = *(void *)(v3 + 176);
  *(void *)(v3 + 176) = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    swift_retain_n();
    SessionSuspensionController.suspensionAcquireTask.didset(v4);
    swift_release();
  }
  else
  {
    swift_retain();
    SessionSuspensionController.suspensionAcquireTask.didset(v4);
  }
  swift_release();
  swift_release();
  free(v2);
}

uint64_t key path setter for SessionSuspensionController.cancellables : SessionSuspensionController(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 184) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t SessionSuspensionController.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SessionSuspensionController.cancellables.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 184) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SessionSuspensionController.cancellables.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t SessionSuspensionController.__allocating_init(processIdentifier:suspensionTarget:processMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  uint64_t v12 = specialized SessionSuspensionController.__allocating_init(processIdentifier:suspensionTarget:processMonitor:)(a1, a2, a3, v11, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v12;
}

uint64_t type metadata accessor for SessionSuspensionController()
{
  return self;
}

uint64_t SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(a4 + 32);
  uint64_t v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  MEMORY[0x1F4188790](v11);
  os_log_type_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  uint64_t v15 = specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, a2, a3, (uint64_t)v13, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v15;
}

uint64_t closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Iterator);
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:), 0, 0);
}

uint64_t closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>);
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  void *v1 = v0;
  v1[1] = closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:);
  uint64_t v2 = *(void *)(v0 + 56);
  return MEMORY[0x1F4187D58](v0 + 96, 0, 0, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:), 0, 0);
}

{
  uint64_t v0;
  int v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t (*v8)();
  uint64_t (*v9)(void);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 96);
  if (v1 == 2 || (uint64_t Strong = swift_weakLoadStrong(), (*(void *)(v0 + 88) = Strong) == 0))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    uint64_t v3 = Strong;
    if (v1)
    {
      if (one-time initialization token for suspensionController != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Log.suspensionController);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl(&dword_1B0DF7000, v12, v13, "Received notification that application is running.", v14, 2u);
        MEMORY[0x1B3EA39E0](v14, -1, -1);
      }

      uint64_t v8 = closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:);
    }
    else
    {
      if (one-time initialization token for suspensionController != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Log.suspensionController);
      uint64_t v5 = Logger.logObject.getter();
      uint64_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1B0DF7000, v5, v6, "Received notification that application isn't running", v7, 2u);
        MEMORY[0x1B3EA39E0](v7, -1, -1);
      }

      uint64_t v8 = closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:);
    }
    return MEMORY[0x1F4188298](v8, v3, 0);
  }
}

{
  uint64_t v1;

  SessionSuspensionController.releaseAssertionIfNecessary()();
  return MEMORY[0x1F4188298](closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v1;
  void *v1 = v0;
  v1[1] = closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:);
  uint64_t v2 = *(void *)(v0 + 56);
  return MEMORY[0x1F4187D58](v0 + 96, 0, 0, v2);
}

{
  uint64_t v1;

  SessionSuspensionController.acquireAssertionIfNecessary()();
  return MEMORY[0x1F4188298](closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:), 0, 0);
}

void *SessionSuspensionController.deinit()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  __swift_project_boxed_opaque_existential_1(v0 + 17, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  outlined destroy of weak ActivitySessionManagerProtocol?((uint64_t)(v0 + 14));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SessionSuspensionController.__deallocating_deinit()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  __swift_project_boxed_opaque_existential_1(v0 + 17, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  outlined destroy of weak ActivitySessionManagerProtocol?((uint64_t)(v0 + 14));
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

Swift::Void __swiftcall SessionSuspensionController.acquireAssertionIfNecessary()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for suspensionController != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.suspensionController);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v29[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_beginAccess();
    if (*(void *)(v0 + 176))
    {
      uint64_t v28 = *(void *)(v0 + 176);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<AnyCancellable, Error>);
      uint64_t v10 = String.init<A>(reflecting:)();
      unint64_t v12 = v11;
    }
    else
    {
      uint64_t v10 = 7104878;
      unint64_t v12 = 0xE300000000000000;
    }
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v6, v7, "Received request to acquire suspension, current suspensionAcquireTask: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v9, -1, -1);
    MEMORY[0x1B3EA39E0](v8, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  os_log_type_t v13 = (uint64_t *)(v0 + 176);
  swift_beginAccess();
  if (*(void *)(v0 + 176))
  {
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v28 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      if (*v13)
      {
        uint64_t v27 = *v13;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<AnyCancellable, Error>);
        uint64_t v18 = String.init<A>(reflecting:)();
        unint64_t v20 = v19;
      }
      else
      {
        uint64_t v18 = 7104878;
        unint64_t v20 = 0xE300000000000000;
      }
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Not re-requesting assertion since there's already a task trying to grab an assertion %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v17, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    uint64_t v21 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v4, 1, 1, v21);
    unint64_t v22 = lazy protocol witness table accessor for type SessionSuspensionController and conformance SessionSuspensionController();
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = v1;
    void v23[3] = v22;
    v23[4] = v1;
    swift_retain_n();
    uint64_t v24 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC7Combine14AnyCancellableC_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in SessionSuspensionController.acquireAssertionIfNecessary(), (uint64_t)v23);
    uint64_t v25 = *(void *)(v1 + 176);
    *(void *)(v1 + 176) = v24;
    swift_retain();
    SessionSuspensionController.suspensionAcquireTask.didset(v25);
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in SessionSuspensionController.acquireAssertionIfNecessary()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 80) = a4;
  return MEMORY[0x1F4188298](closure #1 in SessionSuspensionController.acquireAssertionIfNecessary(), a4, 0);
}

uint64_t closure #1 in SessionSuspensionController.acquireAssertionIfNecessary()()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[10] + 112;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1B3EA3B30](v1);
  v0[11] = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0[10] + 120);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[12] = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in SessionSuspensionController.acquireAssertionIfNecessary();
    return v19(ObjectType, v3);
  }
  else
  {
    lazy protocol witness table accessor for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors();
    os_log_type_t v7 = (void *)swift_allocError();
    swift_willThrow();
    if (one-time initialization token for suspensionController != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.suspensionController);
    id v9 = v7;
    id v10 = v7;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v20 = v14;
      *(_DWORD *)os_log_type_t v13 = 136315138;
      v0[5] = v7;
      id v15 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v16 = String.init<A>(reflecting:)();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v11, v12, "Failed to grab assertion, reason: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v14, -1, -1);
      MEMORY[0x1B3EA39E0](v13, -1, -1);
    }
    else
    {
    }
    swift_willThrow();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24[2];
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 112);
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = v1;
    swift_release();
    swift_unknownObjectRelease();
    if (one-time initialization token for suspensionController != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.suspensionController);
    uint64_t v4 = v1;
    uint64_t v5 = v1;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      id v9 = swift_slowAlloc();
      v24[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      *(void *)(v0 + 40) = v2;
      id v10 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      unint64_t v11 = String.init<A>(reflecting:)();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v6, v7, "Failed to grab assertion, reason: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v9, -1, -1);
      MEMORY[0x1B3EA39E0](v8, -1, -1);
    }
    else
    {
    }
    swift_willThrow();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (one-time initialization token for suspensionController != -1) {
      swift_once();
    }
    os_log_type_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.suspensionController);
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    id v15 = static os_log_type_t.default.getter();
    uint64_t v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = *(void *)(v0 + 104);
    if (v16)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      unint64_t v19 = swift_slowAlloc();
      v24[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v0 + 56) = v17;
      type metadata accessor for AnyCancellable();
      swift_retain();
      uint64_t v20 = String.init<A>(reflecting:)();
      *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "New assertion: %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v19, -1, -1);
      MEMORY[0x1B3EA39E0](v18, -1, -1);

      swift_unknownObjectRelease();
    }
    else
    {
      swift_release_n();
      swift_unknownObjectRelease();
    }
    **(void **)(v0 + 72) = *(void *)(v0 + 104);
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v22();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  id v15 = v0;
  swift_unknownObjectRelease();
  uint64_t v1 = (void *)v0[14];
  if (one-time initialization token for suspensionController != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.suspensionController);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)os_log_type_t v7 = 136315138;
    v0[5] = v1;
    id v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    id v10 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v5, v6, "Failed to grab assertion, reason: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  os_log_type_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t closure #1 in SessionSuspensionController.acquireAssertionIfNecessary()(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 104) = a1;
  *(void *)(v4 + 112) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 80);
  if (v1) {
    uint64_t v6 = closure #1 in SessionSuspensionController.acquireAssertionIfNecessary();
  }
  else {
    uint64_t v6 = closure #1 in SessionSuspensionController.acquireAssertionIfNecessary();
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

Swift::Void __swiftcall SessionSuspensionController.releaseAssertionIfNecessary()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for suspensionController != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.suspensionController);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v13[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_beginAccess();
    if (*(void *)(v1 + 176))
    {
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<AnyCancellable, Error>);
      uint64_t v7 = String.init<A>(reflecting:)();
      unint64_t v9 = v8;
    }
    else
    {
      unint64_t v9 = 0xE300000000000000;
      uint64_t v7 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Received request to release assertion: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t v10 = *(void *)(v1 + 176);
  if (v10)
  {
    uint64_t v11 = type metadata accessor for AnyCancellable();
    swift_retain();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1B3EA1F30](v10, v11, v12, MEMORY[0x1E4FBC0F0]);
    swift_release();
    uint64_t v10 = *(void *)(v1 + 176);
  }
  *(void *)(v1 + 176) = 0;
  SessionSuspensionController.suspensionAcquireTask.didset(v10);
  swift_release();
}

uint64_t SessionSuspensionController.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for SessionSuspensionControllerProtocol.init(processIdentifier:suspensionTarget:) in conformance SessionSuspensionController@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96418]), sel_init);
  type metadata accessor for SessionSuspensionController();
  uint64_t v9 = swift_allocObject();
  uint64_t result = specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, a2, a3, (uint64_t)v8, v9);
  *a4 = result;
  return result;
}

uint64_t RBSProcessMonitor.listenForUpdates(pid:)(int a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation.BufferingPolicy);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation?);
  uint64_t v7 = swift_allocBox();
  uint64_t v9 = v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v17 = v9;
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBD028], v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v7;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #2 in RBSProcessMonitor.listenForUpdates(pid:);
  *(void *)(v12 + 24) = v11;
  aBlock[4] = _sSo28RBSProcessMonitorConfiguring_pIgg_SoAA_pIegg_TRTA_0;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ();
  void aBlock[3] = &block_descriptor_45;
  os_log_type_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_updateConfiguration_, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in RBSProcessMonitor.listenForUpdates(pid:)(uint64_t a1, uint64_t a2)
{
  outlined destroy of AsyncStream<ProcessMonitorStateUpdate>.Continuation?(a2);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation);
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  return v5(a2, 0, 1, v4);
}

void closure #2 in RBSProcessMonitor.listenForUpdates(pid:)(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = objc_msgSend(self, sel_identifierWithPid_, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B1138AA0;
    *(void *)(inited + 32) = v6;
    aBlock[0] = inited;
    specialized Array._endMutation()();
    if (aBlock[0] >> 62)
    {
      id v10 = v6;
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v11) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v9 = v6;
      if (!v8)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessIdentifier);
        lazy protocol witness table accessor for type RBSProcessIdentifier and conformance NSObject();
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v13 = objc_msgSend(self, sel_predicateMatchingIdentifiers_, isa);

        uint64_t v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = xmmword_1B1138AA0;
        *(void *)(v14 + 32) = v13;
        specialized Array._endMutation()();
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessPredicate);
        id v15 = v13;
        Class v16 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(a1, sel_setPredicates_, v16);

        aBlock[4] = (unint64_t)partial apply for closure #1 in closure #2 in RBSProcessMonitor.listenForUpdates(pid:);
        aBlock[5] = a3;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = (unint64_t)thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitor, @guaranteed RBSProcessHandle, @guaranteed RBSProcessStateUpdate) -> ();
        void aBlock[3] = (unint64_t)&block_descriptor_28;
        uint64_t v17 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(a1, sel_setUpdateHandler_, v17);
        _Block_release(v17);
        id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96448]), sel_init);
        objc_msgSend(v18, sel_setValues_, 1);
        objc_msgSend(a1, sel_setStateDescriptor_, v18);

        return;
      }
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(aBlock[0]);
    goto LABEL_6;
  }
}

uint64_t closure #1 in closure #2 in RBSProcessMonitor.listenForUpdates(pid:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation.YieldResult);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = swift_projectBox();
  swift_beginAccess();
  outlined init with copy of AsyncStream<ProcessMonitorStateUpdate>.Continuation?(v11, (uint64_t)v6);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v12);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    v15[7] = specialized ProcessMonitorStateUpdate.init(_:)(a3) & 1;
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v6, v12);
  }
  return result;
}

uint64_t protocol witness for ProcessMonitorProtocol.listenForUpdates(pid:) in conformance RBSProcessMonitor(int a1)
{
  return RBSProcessMonitor.listenForUpdates(pid:)(a1);
}

uint64_t specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v30 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>);
  uint64_t v11 = *(void *)(v31 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v31);
  uint64_t v14 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  Class v16 = (char *)&v29 - v15;
  long long v34[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessMonitor);
  v34[4] = &protocol witness table for RBSProcessMonitor;
  v34[0] = a4;
  swift_defaultActor_initialize();
  *(void *)(a5 + 120) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = MEMORY[0x1E4FBC870];
  *(_DWORD *)(a5 + 128) = a1;
  swift_beginAccess();
  *(void *)(a5 + 120) = a3;
  swift_unknownObjectWeakAssign();
  outlined init with copy of UserNotificationCenter((uint64_t)v34, a5 + 136);
  uint64_t v18 = *(void *)(a5 + 160);
  uint64_t v17 = *(void *)(a5 + 168);
  __swift_project_boxed_opaque_existential_1((void *)(a5 + 136), v18);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 8);
  uint64_t v20 = v16;
  uint64_t v29 = v16;
  v19(a1, v18, v17);
  uint64_t v21 = type metadata accessor for TaskPriority();
  uint64_t v22 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v30, 1, 1, v21);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = v31;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v20, v31);
  unint64_t v25 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v26 + v25, v14, v24);
  *(void *)(v26 + ((v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v22, (uint64_t)&closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)partial apply, v26);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  uint64_t v27 = AnyCancellable.init(_:)();
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v33, v27);
  swift_endAccess();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v29, v24);
  return a5;
}

uint64_t specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a3;
  uint64_t v38 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v36 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>);
  uint64_t v14 = *(void *)(v37 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](v37);
  uint64_t v17 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v33 - v18;
  v40[3] = a6;
  v40[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v40);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  swift_defaultActor_initialize();
  *(void *)(a5 + 120) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a5 + 176) = 0;
  *(void *)(a5 + 184) = MEMORY[0x1E4FBC870];
  *(_DWORD *)(a5 + 128) = a1;
  swift_beginAccess();
  *(void *)(a5 + 120) = v34;
  swift_unknownObjectWeakAssign();
  outlined init with copy of UserNotificationCenter((uint64_t)v40, a5 + 136);
  uint64_t v22 = *(void *)(a5 + 160);
  uint64_t v21 = *(void *)(a5 + 168);
  __swift_project_boxed_opaque_existential_1((void *)(a5 + 136), v22);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 8);
  uint64_t v24 = v19;
  uint64_t v35 = v19;
  v23(a1, v22, v21);
  uint64_t v25 = type metadata accessor for TaskPriority();
  uint64_t v26 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v36, 1, 1, v25);
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  uint64_t v28 = v37;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v24, v37);
  unint64_t v29 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = 0;
  *(void *)(v30 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v30 + v29, v17, v28);
  *(void *)(v30 + ((v15 + v29 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v26, (uint64_t)&async function pointer to partial apply for closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:), v30);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  uint64_t v31 = AnyCancellable.init(_:)();
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v39, v31);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v35, v28);
  return a5;
}

uint64_t specialized SessionSuspensionController.__allocating_init(processIdentifier:suspensionTarget:processMonitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SessionSuspensionController();
  uint64_t v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, a6);
  return specialized SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, a2, a3, (uint64_t)v15, v16, a6, a7);
}

unint64_t lazy protocol witness table accessor for type SessionSuspensionController and conformance SessionSuspensionController()
{
  unint64_t result = lazy protocol witness table cache variable for type SessionSuspensionController and conformance SessionSuspensionController;
  if (!lazy protocol witness table cache variable for type SessionSuspensionController and conformance SessionSuspensionController)
  {
    type metadata accessor for SessionSuspensionController();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SessionSuspensionController and conformance SessionSuspensionController);
  }
  return result;
}

uint64_t sub_1B1131BDC()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in SessionSuspensionController.acquireAssertionIfNecessary()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v5[9] = a1;
  v5[10] = v4;
  return MEMORY[0x1F4188298](closure #1 in SessionSuspensionController.acquireAssertionIfNecessary(), v4, 0);
}

uint64_t specialized ProcessMonitorStateUpdate.init(_:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_state);
  if (v2)
  {
    uint64_t v3 = v2;
    if (objc_msgSend(v2, sel_taskState) == 4)
    {

      return 1;
    }
    unsigned int v5 = objc_msgSend(v3, sel_taskState);

    if (v5 == 2) {
      return 1;
    }
  }
  else
  {
  }
  return 0;
}

uint64_t partial apply for closure #1 in RBSProcessMonitor.listenForUpdates(pid:)(uint64_t a1)
{
  return closure #1 in RBSProcessMonitor.listenForUpdates(pid:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B1131D70()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #2 in RBSProcessMonitor.listenForUpdates(pid:)(void *a1)
{
  closure #2 in RBSProcessMonitor.listenForUpdates(pid:)(a1, *(unsigned int *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B1131DB4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSo28RBSProcessMonitorConfiguring_pIgg_SoAA_pIegg_TRTA_0(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors;
  if (!lazy protocol witness table cache variable for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors;
  if (!lazy protocol witness table cache variable for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SessionSuspensionController.Errors and conformance SessionSuspensionController.Errors);
  }
  return result;
}

uint64_t sub_1B1131E2C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 112;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1B3EA3B30](v4);
  uint64_t v6 = *(void *)(v3 + 120);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1B1131E88(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 120) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B1131EE4@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 128);
  return result;
}

uint64_t sub_1B1131F2C(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v3 + 128) = v2;
  return result;
}

uint64_t sub_1B1131F70@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 176);
  return swift_retain();
}

uint64_t sub_1B1131FC0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 184);
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of SessionSuspensionControllerTarget.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unsigned int v5 = v2;
  v5[1] = dispatch thunk of ConversationManagerClientProtocol.createActivitySession(with:onConversationWithUUID:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of SessionSuspensionControllerProtocol.init(processIdentifier:suspensionTarget:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

unsigned char *storeEnumTagSinglePayload for ProcessMonitorStateUpdate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B11321E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProcessMonitorStateUpdate()
{
  return &type metadata for ProcessMonitorStateUpdate;
}

uint64_t dispatch thunk of ProcessMonitorProtocol.listenForUpdates(pid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ProcessMonitorProtocol.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t method lookup function for SessionSuspensionController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SessionSuspensionController);
}

uint64_t dispatch thunk of SessionSuspensionController.suspensionTarget.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SessionSuspensionController.suspensionTarget.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SessionSuspensionController.suspensionTarget.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SessionSuspensionController.processIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SessionSuspensionController.processIdentifier.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SessionSuspensionController.processIdentifier.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SessionSuspensionController.suspensionAcquireTask.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SessionSuspensionController.suspensionAcquireTask.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SessionSuspensionController.suspensionAcquireTask.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SessionSuspensionController.cancellables.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SessionSuspensionController.cancellables.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SessionSuspensionController.cancellables.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SessionSuspensionController.__allocating_init(processIdentifier:suspensionTarget:processMonitor:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of SessionSuspensionController.acquireAssertionIfNecessary()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SessionSuspensionController.releaseAssertionIfNecessary()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

unsigned char *storeEnumTagSinglePayload for SessionSuspensionController.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B1132500);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionSuspensionController.Errors()
{
  return &type metadata for SessionSuspensionController.Errors;
}

unint64_t lazy protocol witness table accessor for type RBSProcessIdentifier and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type RBSProcessIdentifier and conformance NSObject;
  if (!lazy protocol witness table cache variable for type RBSProcessIdentifier and conformance NSObject)
  {
    type metadata accessor for TUConversationActivity(255, &lazy cache variable for type metadata for RBSProcessIdentifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RBSProcessIdentifier and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in RBSProcessMonitor.listenForUpdates(pid:)(uint64_t a1, uint64_t a2, void *a3)
{
  return closure #1 in closure #2 in RBSProcessMonitor.listenForUpdates(pid:)(a1, a2, a3);
}

uint64_t outlined init with copy of AsyncStream<ProcessMonitorStateUpdate>.Continuation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AsyncStream<ProcessMonitorStateUpdate>.Continuation?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>.Continuation?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B11326C4()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, v6, v7, v8, v9);
}

uint64_t objectdestroy_35Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<ProcessMonitorStateUpdate>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in SessionSuspensionController.init(processIdentifier:suspensionTarget:processMonitor:)(a1, v6, v7, v8, v9);
}

uint64_t OnceToken.lock.getter()
{
  return swift_retain();
}

uint64_t OnceToken.called.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t OnceToken.called.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 24) = a1;
  return result;
}

uint64_t (*OnceToken.called.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

void OnceToken.execute(callback:)(void (*a1)(void))
{
  uint64_t v3 = v1[2];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  if (((*(uint64_t (**)(void))(*v1 + 96))() & 1) == 0)
  {
    a1();
    (*(void (**)(uint64_t))(*v1 + 104))(1);
  }
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 16);
  os_unfair_lock_unlock(v4);
}

uint64_t OnceToken.deinit()
{
  swift_release();
  return v0;
}

uint64_t OnceToken.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t OnceToken.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for Lock();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = 0;
  *(void *)(v0 + 16) = v1;
  *(unsigned char *)(v0 + 24) = 0;
  return v0;
}

uint64_t OnceToken.init()()
{
  type metadata accessor for Lock();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = 0;
  *(void *)(v0 + 16) = v1;
  *(unsigned char *)(v0 + 24) = 0;
  return v0;
}

uint64_t sub_1B1132CEC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B1132D3C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for OnceToken()
{
  return self;
}

uint64_t method lookup function for OnceToken(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OnceToken);
}

uint64_t dispatch thunk of OnceToken.called.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of OnceToken.called.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of OnceToken.called.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of OnceToken.execute(callback:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of OnceToken.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

objc_class *one-time initialization function for resourceBundle()
{
  type metadata accessor for ResourceBundleClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t result = (objc_class *)objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  resourceBundle.super.Class isa = result;
  return result;
}

uint64_t one-time initialization function for sharePlay()
{
  uint64_t v0 = type metadata accessor for ImageResource();
  __swift_allocate_value_buffer(v0, static ImageResource.sharePlay);
  __swift_project_value_buffer(v0, (uint64_t)static ImageResource.sharePlay);
  if (one-time initialization token for resourceBundle != -1) {
    swift_once();
  }
  return MEMORY[0x1B3EA08B0](0x616C506572616853, 0xE900000000000079, resourceBundle.super.isa);
}

uint64_t ImageResource.sharePlay.unsafeMutableAddressor()
{
  if (one-time initialization token for sharePlay != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for ImageResource();
  return __swift_project_value_buffer(v0, (uint64_t)static ImageResource.sharePlay);
}

uint64_t static ImageResource.sharePlay.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for sharePlay != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for ImageResource();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static ImageResource.sharePlay);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t __getGKLocalPlayerClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getGKDaemonProxyClass_block_invoke_cold_1(v0);
}

uint64_t __getGKDaemonProxyClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return +[CPCrashReporter simulateCrashReportWithReason:pid:code:](v0);
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t DataProtocol.copyBytes(to:count:)()
{
  return MEMORY[0x1F40E3460]();
}

uint64_t DataProtocol.copyBytes(to:)()
{
  return MEMORY[0x1F40E3470]();
}

uint64_t DateInterval.end.getter()
{
  return MEMORY[0x1F40E34D0]();
}

uint64_t DateInterval.end.setter()
{
  return MEMORY[0x1F40E34D8]();
}

uint64_t DateInterval.init(start:duration:)()
{
  return MEMORY[0x1F40E34F0]();
}

uint64_t DateInterval.start.getter()
{
  return MEMORY[0x1F40E34F8]();
}

uint64_t DateInterval.start.setter()
{
  return MEMORY[0x1F40E3500]();
}

uint64_t DateInterval.duration.getter()
{
  return MEMORY[0x1F40E3518]();
}

uint64_t DateInterval.init()()
{
  return MEMORY[0x1F40E3520]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x1F40E3530]();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E3550]();
}

uint64_t type metadata accessor for Notification()
{
  return MEMORY[0x1F40E35A8]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x1F40E37F0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1F40E3B70]();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = MEMORY[0x1F40E3F58](_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return MEMORY[0x1F40E46B8]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x1F40E46D0]();
}

uint64_t _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)()
{
  return MEMORY[0x1F40E4758]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x1F40E48D8]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x1F40E48F8]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x1F40E4B20]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x1F40E4B68]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1F40E4B80]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.description.getter()
{
  return MEMORY[0x1F40E4C30]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x1F40E4CA8]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x1F40E4CD8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1F40E4D48]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t Date.init(timeInterval:since:)()
{
  return MEMORY[0x1F40E5098]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x1F40E50E0]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x1F40E5188]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x1F40E5198]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x1F40E51A8]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x1F40E52B0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E52E0]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x1F40E53A0]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1F40E53B0]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x1F40E53C8]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E53F8]();
}

uint64_t UUID.init(uuid:)()
{
  return MEMORY[0x1F40E5418]();
}

uint64_t UUID.uuid.getter()
{
  return MEMORY[0x1F40E5428]();
}

uint64_t UUID.hashValue.getter()
{
  return MEMORY[0x1F40E5430]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t ImageResource.init(name:bundle:)()
{
  return MEMORY[0x1F40E05E0]();
}

uint64_t type metadata accessor for ImageResource()
{
  return MEMORY[0x1F40E05E8]();
}

uint64_t Google_Protobuf_Empty.init()()
{
  return MEMORY[0x1F4126FC8]();
}

uint64_t type metadata accessor for Google_Protobuf_Empty()
{
  return MEMORY[0x1F4126FD0]();
}

uint64_t type metadata accessor for ProtobufFixed64()
{
  return MEMORY[0x1F4127058]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x1F4127060]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x1F4127078]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x1F4127088]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x1F4127110]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x1F4127118]();
}

uint64_t dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)()
{
  return MEMORY[0x1F4127170]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x1F4127180]();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return MEMORY[0x1F4127190]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return MEMORY[0x1F41271A8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x1F41271C0]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedBytesField(value:)()
{
  return MEMORY[0x1F41271D0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x1F41271F0]();
}

{
  return MEMORY[0x1F4127200]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedStringField(value:)()
{
  return MEMORY[0x1F4127248]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x1F4127280]();
}

{
  return MEMORY[0x1F4127290]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return MEMORY[0x1F41272A0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return MEMORY[0x1F41272B8]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)()
{
  return MEMORY[0x1F41272C0]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x1F41272C8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularFixed64Field(value:)()
{
  return MEMORY[0x1F41272D8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x1F41272E0]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x1F4127340]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x1F4127348]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x1F4127378]();
}

uint64_t static Message.with(_:)()
{
  return MEMORY[0x1F41273A0]();
}

uint64_t dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)()
{
  return MEMORY[0x1F41273C0]();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return MEMORY[0x1F4127410]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1F4127418]();
}

uint64_t dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)()
{
  return MEMORY[0x1F4127428]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)()
{
  return MEMORY[0x1F4127430]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x1F4127458]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)()
{
  return MEMORY[0x1F4127488]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x1F41274A8]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x1F41274B8]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x1F41274C8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1F41274D0]();
}

uint64_t dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)()
{
  return MEMORY[0x1F41274E0]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x1F41274E8]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x1F4127660]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4127678]();
}

uint64_t _NameMap.init()()
{
  return MEMORY[0x1F4127680]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x1F4127690]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1F4188570]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1F4188580]();
}

uint64_t OSSignpostID.init(_:)()
{
  return MEMORY[0x1F4188588]();
}

uint64_t OSSignposter.isEnabled.getter()
{
  return MEMORY[0x1F41885A0]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t static OSLogIntegerFormatting.decimal.getter()
{
  return MEMORY[0x1F4188648]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1F4188680]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return MEMORY[0x1F40D65E8]();
}

uint64_t type metadata accessor for Publishers.SetFailureType()
{
  return MEMORY[0x1F40D66C8]();
}

uint64_t type metadata accessor for Publishers.PrefetchStrategy()
{
  return MEMORY[0x1F40D66E8]();
}

uint64_t type metadata accessor for Publishers.Map()
{
  return MEMORY[0x1F40D6728]();
}

uint64_t type metadata accessor for Publishers.Merge()
{
  return MEMORY[0x1F40D6788]();
}

uint64_t Publishers.Merge.init(_:_:)()
{
  return MEMORY[0x1F40D6790]();
}

uint64_t type metadata accessor for Publishers.Filter()
{
  return MEMORY[0x1F40D67C0]();
}

uint64_t type metadata accessor for Publishers.FlatMap()
{
  return MEMORY[0x1F40D67F8]();
}

uint64_t type metadata accessor for Publishers.Sequence()
{
  return MEMORY[0x1F40D6850]();
}

uint64_t type metadata accessor for Publishers.ReceiveOn()
{
  return MEMORY[0x1F40D68A0]();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)()
{
  return MEMORY[0x1F40D68A8]();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return MEMORY[0x1F40D68B0]();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return MEMORY[0x1F40D68B8]();
}

uint64_t type metadata accessor for Subscribers.Completion()
{
  return MEMORY[0x1F40D68E0]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x1F40D6908]();
}

uint64_t type metadata accessor for AnyPublisher()
{
  return MEMORY[0x1F40D6918]();
}

uint64_t dispatch thunk of Subscription.request(_:)()
{
  return MEMORY[0x1F40D6928]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x1F40D6940]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x1F40D6960]();
}

uint64_t AnyCancellable.init(_:)()
{
  return MEMORY[0x1F40D6988]();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return MEMORY[0x1F40D6990]();
}

uint64_t PassthroughSubject.send(completion:)()
{
  return MEMORY[0x1F40D6A00]();
}

uint64_t PassthroughSubject.send(_:)()
{
  return MEMORY[0x1F40D6A08]();
}

uint64_t PassthroughSubject.receive<A>(subscriber:)()
{
  return MEMORY[0x1F40D6A10]();
}

uint64_t PassthroughSubject.__allocating_init()()
{
  return MEMORY[0x1F40D6A18]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x1F40D6A20]();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return MEMORY[0x1F40D6A28]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x1F40D6A40]();
}

uint64_t CurrentValueSubject.value.getter()
{
  return MEMORY[0x1F40D6A50]();
}

uint64_t CurrentValueSubject.receive<A>(subscriber:)()
{
  return MEMORY[0x1F40D6A60]();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return MEMORY[0x1F40D6A68]();
}

uint64_t CurrentValueSubject.__allocating_init(_:)()
{
  return MEMORY[0x1F40D6A70]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x1F40D6A78]();
}

uint64_t ConnectablePublisher.autoconnect()()
{
  return MEMORY[0x1F40D6A80]();
}

uint64_t Fail.init(error:)()
{
  return MEMORY[0x1F40D6AD8]();
}

uint64_t Just.init(_:)()
{
  return MEMORY[0x1F40D6B18]();
}

uint64_t Future.init(_:)()
{
  return MEMORY[0x1F40D6B48]();
}

uint64_t Subject<>.send()()
{
  return MEMORY[0x1F40D6B68]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x1F40D6B80]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x1F40D6B88]();
}

uint64_t Published.projectedValue.setter()
{
  return MEMORY[0x1F40D6B90]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x1F40D6B98]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x1F40D6BA0]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x1F40D6BA8]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x1F40D6BB8]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x1F40D6BD8]();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return MEMORY[0x1F40D6BE0]();
}

uint64_t Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)()
{
  return MEMORY[0x1F40D6BE8]();
}

uint64_t Publisher.removeDuplicates(by:)()
{
  return MEMORY[0x1F40D6C40]();
}

uint64_t Publisher.map<A>(_:)()
{
  return MEMORY[0x1F40D6C50]();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return MEMORY[0x1F40D6C98]();
}

uint64_t Publisher.catch<A>(_:)()
{
  return MEMORY[0x1F40D6CA0]();
}

uint64_t Publisher.first()()
{
  return MEMORY[0x1F40D6CC0]();
}

uint64_t Publisher.buffer(size:prefetch:whenFull:)()
{
  return MEMORY[0x1F40D6D08]();
}

uint64_t Publisher.filter(_:)()
{
  return MEMORY[0x1F40D6D10]();
}

uint64_t Publisher.flatMap<A>(maxPublishers:_:)()
{
  return MEMORY[0x1F40D6D58]();
}

uint64_t Publisher.flatMap<A, B>(maxPublishers:_:)()
{
  return MEMORY[0x1F40D6D60]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x1F40D6D80]();
}

uint64_t Publisher.mapError<A>(_:)()
{
  return MEMORY[0x1F40D6D98]();
}

uint64_t Publisher.dropFirst(_:)()
{
  return MEMORY[0x1F40D6DB8]();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return MEMORY[0x1F40D6DE0]();
}

uint64_t Publisher<>.removeDuplicates()()
{
  return MEMORY[0x1F40D6DF0]();
}

uint64_t Publisher<>.setFailureType<A>(to:)()
{
  return MEMORY[0x1F40D6E08]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x1F40D6E18]();
}

uint64_t Publisher<>.assign(to:)()
{
  return MEMORY[0x1F40D6E28]();
}

uint64_t Publisher<>.values.getter()
{
  return MEMORY[0x1F40D6E30]();
}

uint64_t Publisher<>.flatMap<A>(maxPublishers:_:)()
{
  return MEMORY[0x1F40D6E38]();
}

uint64_t dispatch thunk of Scheduler.now.getter()
{
  return MEMORY[0x1F40D6E48]();
}

uint64_t Scheduler.schedule(after:interval:_:)()
{
  return MEMORY[0x1F40D6E50]();
}

uint64_t NWEndpoint.debugDescription.getter()
{
  return MEMORY[0x1F40F1EE8]();
}

uint64_t type metadata accessor for NWEndpoint()
{
  return MEMORY[0x1F40F1F58]();
}

uint64_t NWEndpoint.init(_:)()
{
  return MEMORY[0x1F40F1F68]();
}

uint64_t NWConnection.__allocating_init(connection:parameters:)()
{
  return MEMORY[0x1F40F2070]();
}

uint64_t NWConnection.identifier.getter()
{
  return MEMORY[0x1F40F2078]();
}

uint64_t NWConnection.parameters.getter()
{
  return MEMORY[0x1F40F2088]();
}

uint64_t NWConnection.ContentContext.init(identifier:expiration:priority:isFinal:antecedent:metadata:)()
{
  return MEMORY[0x1F40F20A8]();
}

uint64_t static NWConnection.ContentContext.finalMessage.getter()
{
  return MEMORY[0x1F40F20B0]();
}

uint64_t dispatch thunk of NWConnection.ContentContext.protocolMetadata(definition:)()
{
  return MEMORY[0x1F40F20C8]();
}

uint64_t type metadata accessor for NWConnection.ContentContext()
{
  return MEMORY[0x1F40F20E0]();
}

uint64_t type metadata accessor for NWConnection.SendCompletion()
{
  return MEMORY[0x1F40F20F0]();
}

uint64_t NWConnection.receiveMessage(completion:)()
{
  return MEMORY[0x1F40F2100]();
}

uint64_t NWConnection.DataTransferReport.aggregatePathReport.getter()
{
  return MEMORY[0x1F40F2110]();
}

uint64_t NWConnection.DataTransferReport.PathReport.transportMinimumRTT.getter()
{
  return MEMORY[0x1F40F2118]();
}

uint64_t NWConnection.DataTransferReport.PathReport.transportRTTVariance.getter()
{
  return MEMORY[0x1F40F2120]();
}

uint64_t NWConnection.DataTransferReport.PathReport.transportSmoothedRTT.getter()
{
  return MEMORY[0x1F40F2128]();
}

uint64_t NWConnection.DataTransferReport.PathReport.sentTransportByteCount.getter()
{
  return MEMORY[0x1F40F2130]();
}

uint64_t NWConnection.DataTransferReport.PathReport.sentApplicationByteCount.getter()
{
  return MEMORY[0x1F40F2138]();
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedTransportByteCount.getter()
{
  return MEMORY[0x1F40F2140]();
}

uint64_t NWConnection.DataTransferReport.PathReport.receivedApplicationByteCount.getter()
{
  return MEMORY[0x1F40F2148]();
}

uint64_t NWConnection.DataTransferReport.PathReport.retransmittedTransportByteCount.getter()
{
  return MEMORY[0x1F40F2150]();
}

uint64_t type metadata accessor for NWConnection.DataTransferReport.PathReport()
{
  return MEMORY[0x1F40F2158]();
}

uint64_t NWConnection.DataTransferReport.debugDescription.getter()
{
  return MEMORY[0x1F40F2160]();
}

uint64_t NWConnection.DataTransferReport.duration.getter()
{
  return MEMORY[0x1F40F2168]();
}

uint64_t type metadata accessor for NWConnection.DataTransferReport()
{
  return MEMORY[0x1F40F2170]();
}

uint64_t NWConnection.stateUpdateHandler.setter()
{
  return MEMORY[0x1F40F2180]();
}

uint64_t NWConnection.EstablishmentReport.handshakes.getter()
{
  return MEMORY[0x1F40F2188]();
}

uint64_t NWConnection.EstablishmentReport.debugDescription.getter()
{
  return MEMORY[0x1F40F2190]();
}

uint64_t NWConnection.EstablishmentReport.attemptStartedAfterInterval.getter()
{
  return MEMORY[0x1F40F2198]();
}

uint64_t NWConnection.EstablishmentReport.duration.getter()
{
  return MEMORY[0x1F40F21A0]();
}

uint64_t NWConnection.EstablishmentReport.Handshake.definition.getter()
{
  return MEMORY[0x1F40F21A8]();
}

uint64_t NWConnection.EstablishmentReport.Handshake.handshakeRTT.getter()
{
  return MEMORY[0x1F40F21B0]();
}

uint64_t NWConnection.EstablishmentReport.Handshake.handshakeDuration.getter()
{
  return MEMORY[0x1F40F21B8]();
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport.Handshake()
{
  return MEMORY[0x1F40F21C0]();
}

uint64_t type metadata accessor for NWConnection.EstablishmentReport()
{
  return MEMORY[0x1F40F21C8]();
}

uint64_t NWConnection.startDataTransferReport()()
{
  return MEMORY[0x1F40F21E8]();
}

uint64_t dispatch thunk of NWConnection.PendingDataTransferReport.collect(queue:completion:)()
{
  return MEMORY[0x1F40F21F0]();
}

uint64_t NWConnection.requestEstablishmentReport(queue:completion:)()
{
  return MEMORY[0x1F40F21F8]();
}

uint64_t NWConnection.init(to:using:)()
{
  return MEMORY[0x1F40F2218]();
}

uint64_t NWConnection.send(content:contentContext:isComplete:completion:)()
{
  return MEMORY[0x1F40F2230]();
}

uint64_t static NWConnection.State.== infix(_:_:)()
{
  return MEMORY[0x1F40F2248]();
}

uint64_t type metadata accessor for NWConnection.State()
{
  return MEMORY[0x1F40F2250]();
}

uint64_t NWConnection.start(queue:)()
{
  return MEMORY[0x1F40F2260]();
}

uint64_t NWConnection.state.getter()
{
  return MEMORY[0x1F40F2278]();
}

Swift::Void __swiftcall NWConnection.cancel()()
{
}

uint64_t NWConnection.metadata(definition:)()
{
  return MEMORY[0x1F40F22B8]();
}

uint64_t type metadata accessor for NWConnection()
{
  return MEMORY[0x1F40F22C8]();
}

uint64_t dispatch thunk of NWParameters.ProtocolStack.applicationProtocols.setter()
{
  return MEMORY[0x1F40F22F0]();
}

uint64_t NWParameters.defaultProtocolStack.getter()
{
  return MEMORY[0x1F40F2300]();
}

uint64_t type metadata accessor for NWParameters()
{
  return MEMORY[0x1F40F2370]();
}

uint64_t NWParameters.__allocating_init(_:)()
{
  return MEMORY[0x1F40F2380]();
}

uint64_t static NWProtocolQUIC.definition.getter()
{
  return MEMORY[0x1F40F2478]();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.streamIdentifier.getter()
{
  return MEMORY[0x1F40F2490]();
}

uint64_t type metadata accessor for NWProtocolQUIC.Metadata.KeepAliveBehavior()
{
  return MEMORY[0x1F40F2498]();
}

uint64_t dispatch thunk of NWProtocolQUIC.Metadata.keepAlive.setter()
{
  return MEMORY[0x1F40F24A8]();
}

uint64_t type metadata accessor for NWProtocolQUIC.Metadata()
{
  return MEMORY[0x1F40F24B8]();
}

uint64_t type metadata accessor for NWProtocolQUIC()
{
  return MEMORY[0x1F40F24D0]();
}

uint64_t NWProtocolFramer.Definition.init(implementation:)()
{
  return MEMORY[0x1F40F2500]();
}

uint64_t type metadata accessor for NWProtocolFramer.Definition()
{
  return MEMORY[0x1F40F2508]();
}

uint64_t type metadata accessor for NWProtocolFramer.StartResult()
{
  return MEMORY[0x1F40F2510]();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)()
{
  return MEMORY[0x1F40F2518]();
}

uint64_t type metadata accessor for NWProtocolFramer.Message()
{
  return MEMORY[0x1F40F2530]();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.getter()
{
  return MEMORY[0x1F40F2538]();
}

uint64_t dispatch thunk of NWProtocolFramer.Message.subscript.setter()
{
  return MEMORY[0x1F40F2540]();
}

uint64_t NWProtocolFramer.Options.init(definition:)()
{
  return MEMORY[0x1F40F2548]();
}

uint64_t type metadata accessor for NWProtocolFramer.Options()
{
  return MEMORY[0x1F40F2550]();
}

uint64_t dispatch thunk of NWProtocolFramer.Options.subscript.getter()
{
  return MEMORY[0x1F40F2558]();
}

uint64_t NWProtocolFramer.Instance.markFailed(error:)()
{
  return MEMORY[0x1F40F2568]();
}

uint64_t NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)()
{
  return MEMORY[0x1F40F2570]();
}

uint64_t NWProtocolFramer.Instance.writeOutput(data:)()
{
  return MEMORY[0x1F40F2580]();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NWProtocolFramer.Instance.writeOutputNoCopy(length:)(Swift::Int length)
{
}

uint64_t NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)()
{
  return MEMORY[0x1F40F25A0]();
}

uint64_t NWProtocolFramer.Instance.options.getter()
{
  return MEMORY[0x1F40F25B0]();
}

uint64_t NWConnectionGroup.setReceiveHandler(maximumMessageSize:rejectOversizedMessages:handler:)()
{
  return MEMORY[0x1F40F25C0]();
}

uint64_t NWConnectionGroup.stateUpdateHandler.setter()
{
  return MEMORY[0x1F40F25C8]();
}

uint64_t NWConnectionGroup.send(content:to:message:completion:)()
{
  return MEMORY[0x1F40F25E0]();
}

uint64_t NWConnectionGroup.init(with:using:)()
{
  return MEMORY[0x1F40F25E8]();
}

uint64_t type metadata accessor for NWConnectionGroup.State()
{
  return MEMORY[0x1F40F25F8]();
}

uint64_t NWConnectionGroup.start(queue:)()
{
  return MEMORY[0x1F40F2600]();
}

Swift::Void __swiftcall NWConnectionGroup.cancel()()
{
}

uint64_t static NWConnectionGroup.Message.default.getter()
{
  return MEMORY[0x1F40F2630]();
}

uint64_t type metadata accessor for NWConnectionGroup.Message()
{
  return MEMORY[0x1F40F2638]();
}

uint64_t type metadata accessor for NWConnectionGroup()
{
  return MEMORY[0x1F40F2648]();
}

uint64_t NWConnectionGroup.__allocating_init(_:)()
{
  return MEMORY[0x1F40F2650]();
}

uint64_t dispatch thunk of NWGroupDescriptor.members.getter()
{
  return MEMORY[0x1F40F2658]();
}

uint64_t type metadata accessor for NWProtocolMetadata()
{
  return MEMORY[0x1F40F2668]();
}

uint64_t static NWProtocolDefinition.== infix(_:_:)()
{
  return MEMORY[0x1F40F2670]();
}

uint64_t type metadata accessor for NWProtocolDefinition()
{
  return MEMORY[0x1F40F2678]();
}

uint64_t static NWProtocolQUICConnection.definition.getter()
{
  return MEMORY[0x1F40F2680]();
}

uint64_t type metadata accessor for NWProtocolQUICConnection()
{
  return MEMORY[0x1F40F2688]();
}

uint64_t static NWError.== infix(_:_:)()
{
  return MEMORY[0x1F40F2728]();
}

uint64_t type metadata accessor for NWError()
{
  return MEMORY[0x1F40F2730]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x1F4186C60]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return MEMORY[0x1F4186EB0]();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return MEMORY[0x1F4186EC0]();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return MEMORY[0x1F4186EE8]();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return MEMORY[0x1F4186EF8]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x1F4186F08]();
}

{
  return MEMORY[0x1F4186F18]();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return MEMORY[0x1F4186F40]();
}

uint64_t type metadata accessor for CryptoKitError()
{
  return MEMORY[0x1F40DFEA0]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x1F40DFF38]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x1F40DFF40]();
}

uint64_t static HashFunction.hash<A>(data:)()
{
  return MEMORY[0x1F40DFF48]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x1F40DFF58]();
}

uint64_t SHA256Digest.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1F40DFF60]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x1F40DFF70]();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x1F40DFFB0]();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return MEMORY[0x1F40DFFC0]();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return MEMORY[0x1F40DFFD8]();
}

uint64_t static AES.GCM.open(_:using:)()
{
  return MEMORY[0x1F40E0038]();
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)()
{
  return MEMORY[0x1F40E0050]();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return MEMORY[0x1F40E0070]();
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  return MEMORY[0x1F40E0098]();
}

uint64_t AES.GCM.SealedBox.init(combined:)()
{
  return MEMORY[0x1F40E00A0]();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return MEMORY[0x1F40E00A8]();
}

uint64_t dispatch thunk of static Digest.byteCount.getter()
{
  return MEMORY[0x1F40E0470]();
}

uint64_t SHA256.finalize()()
{
  return MEMORY[0x1F40E0490]();
}

uint64_t SHA256.init()()
{
  return MEMORY[0x1F40E04A0]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x1F40E04A8]();
}

uint64_t type metadata accessor for Insecure.MD5()
{
  return MEMORY[0x1F40E0540]();
}

uint64_t type metadata accessor for Insecure.MD5Digest()
{
  return MEMORY[0x1F40E0550]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1F4183270]();
}

uint64_t Array.init()()
{
  return MEMORY[0x1F4183280]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x1F4187BE8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6018]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1F4183318]();
}

uint64_t Dictionary.compactMapValues<A>(_:)()
{
  return MEMORY[0x1F4183348]();
}

uint64_t Dictionary.init<A>(uniqueKeysWithValues:)()
{
  return MEMORY[0x1F4183360]();
}

uint64_t Dictionary.Keys.description.getter()
{
  return MEMORY[0x1F4183370]();
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1F4183500]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x1F4183510]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x1F41835D0]();
}

uint64_t BidirectionalCollection<>.difference<A>(from:)()
{
  return MEMORY[0x1F4183720]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x1F4183740]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x1F4183748]();
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183788]();
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)()
{
  return MEMORY[0x1F4183790]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1F4183880]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183898]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1F4183A68]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x1F4183B40]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x1F4183BB8]();
}

uint64_t Sequence.publisher.getter()
{
  return MEMORY[0x1F40D6E68]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t Sequence.sorted(by:)()
{
  return MEMORY[0x1F4183C70]();
}

uint64_t Sequence.flatMap<A>(_:)()
{
  return MEMORY[0x1F4183C78]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t Sequence<>.contains(_:)()
{
  return MEMORY[0x1F4183CE0]();
}

uint64_t UnsafeRawBufferPointer.regions.getter()
{
  return MEMORY[0x1F40E6330]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183D98]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183E10]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4183E80]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1F40E6338]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1F4183F08]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1F4183F78]();
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6388]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x1F4187C18]();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return MEMORY[0x1F4187C38]();
}

uint64_t static TaskPriority.background.getter()
{
  return MEMORY[0x1F4187CA8]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x1F4187CB0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x1F4187D38]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return MEMORY[0x1F4187D48]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x1F4187D50]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x1F4187D78]();
}

uint64_t static Task.== infix(_:_:)()
{
  return MEMORY[0x1F4187D80]();
}

uint64_t Task.hash(into:)()
{
  return MEMORY[0x1F4187D88]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x1F4187DD8]();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
}

uint64_t type metadata accessor for ThrowingTaskGroup()
{
  return MEMORY[0x1F4187E60]();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return MEMORY[0x1F4187EB8]();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return MEMORY[0x1F4187EC0]();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)()
{
  return MEMORY[0x1F4187F00]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E63C8]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1F40E6430]();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6448]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1F4184100]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1F4184138]();
}

uint64_t Set.Index._asCocoa.modify()
{
  return MEMORY[0x1F4184178]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t Set.hashValue.getter()
{
  return MEMORY[0x1F4184220]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6478]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1F4184338]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1F4184440]();
}

uint64_t RangeReplaceableCollection.removeFirst()()
{
  return MEMORY[0x1F41844A0]();
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)()
{
  return MEMORY[0x1F4184580]();
}

uint64_t NSEnumerator.makeIterator()()
{
  return MEMORY[0x1F40E6560]();
}

uint64_t type metadata accessor for APApplication()
{
  return MEMORY[0x1F4108FF8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1F4188700]();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return MEMORY[0x1F4186FB0]();
}

uint64_t OS_dispatch_group.notify(queue:work:)()
{
  return MEMORY[0x1F4186FB8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x1F4186FF0]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return MEMORY[0x1F4187000]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return MEMORY[0x1F4187040]();
}

uint64_t static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)()
{
  return MEMORY[0x1F4187078]();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride()
{
  return MEMORY[0x1F4187088]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return MEMORY[0x1F41870D8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1F4187100]();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return MEMORY[0x1F4188718]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x1F4187288]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x1F40E6858]();
}

uint64_t NSCoder.decodeObject(of:forKey:)()
{
  return MEMORY[0x1F40E6860]();
}

uint64_t type metadata accessor for NSTimer.TimerPublisher()
{
  return MEMORY[0x1F40E68C8]();
}

uint64_t static NSTimer.publish(every:tolerance:on:in:options:)()
{
  return MEMORY[0x1F40E68D8]();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)MEMORY[0x1F40E68F8](BOOLeanLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F41874A8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x1F41874D0]();
}

uint64_t type metadata accessor for APSubject()
{
  return MEMORY[0x1F4109000]();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return MEMORY[0x1F40E6A98]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1F4188720]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t dispatch thunk of Strideable.advanced(by:)()
{
  return MEMORY[0x1F4184830]();
}

uint64_t StringProtocol.data(using:allowLossyConversion:)()
{
  return MEMORY[0x1F40E6D18]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t dispatch thunk of static BinaryInteger.& infix(_:_:)()
{
  return MEMORY[0x1F41848C8]();
}

uint64_t dispatch thunk of static BinaryInteger.~ prefix(_:)()
{
  return MEMORY[0x1F41848E0]();
}

uint64_t dispatch thunk of static BinaryInteger.&= infix(_:_:)()
{
  return MEMORY[0x1F41848F8]();
}

uint64_t dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)()
{
  return MEMORY[0x1F4184908]();
}

uint64_t dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)()
{
  return MEMORY[0x1F4184910]();
}

uint64_t dispatch thunk of static BinaryInteger.|= infix(_:_:)()
{
  return MEMORY[0x1F4184918]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x1F4184938]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x1F4184940]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x1F4184950]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x1F4184B58]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return MEMORY[0x1F4184B68]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x1F4184B80]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x1F4184B88]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x1F4184BB0]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return MEMORY[0x1F4184BD8]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F4184C18](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1F4184D20]();
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return MEMORY[0x1F4184EA8]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1F4184ED8]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t ContinuousClock.now.getter()
{
  return MEMORY[0x1F4187F30]();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return MEMORY[0x1F4187F60]();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return MEMORY[0x1F4187F70]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x1F4187F78]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x1F4187F80]();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return MEMORY[0x1F4184F98]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1F41850C0]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x1F41850E0]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x1F41851A0](isUnique, capacity);
}

uint64_t _NativeDictionary._insert(at:key:value:)()
{
  return MEMORY[0x1F41851C8]();
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return MEMORY[0x1F41851E0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

uint64_t CollectionDifference.removals.getter()
{
  return MEMORY[0x1F41853D8]();
}

uint64_t dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F41854A0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F41855D8]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185700]();
}

uint64_t KeyedEncodingContainer.init<A>(_:)()
{
  return MEMORY[0x1F4185718]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1F4185740](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t UnkeyedEncodingContainer.encodeConditional<A>(_:)()
{
  return MEMORY[0x1F4185908]();
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)()
{
  return MEMORY[0x1F4185910]();
}

{
  return MEMORY[0x1F4185918]();
}

{
  return MEMORY[0x1F4185920]();
}

{
  return MEMORY[0x1F4185928]();
}

{
  return MEMORY[0x1F4185930]();
}

{
  return MEMORY[0x1F4185938]();
}

{
  return MEMORY[0x1F4185940]();
}

{
  return MEMORY[0x1F4185948]();
}

{
  return MEMORY[0x1F4185950]();
}

{
  return MEMORY[0x1F4185958]();
}

{
  return MEMORY[0x1F4185960]();
}

{
  return MEMORY[0x1F4185968]();
}

{
  return MEMORY[0x1F4185970]();
}

{
  return MEMORY[0x1F4185978]();
}

{
  return MEMORY[0x1F4185980]();
}

{
  return MEMORY[0x1F4185988]();
}

{
  return MEMORY[0x1F4185990]();
}

uint64_t UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185998]();
}

{
  return MEMORY[0x1F41859A0]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x1F41859F0]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t dispatch thunk of CustomDebugStringConvertible.debugDescription.getter()
{
  return MEMORY[0x1F4185A48]();
}

uint64_t SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x1F4185B70]();
}

{
  return MEMORY[0x1F4185B78]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185C88]();
}

{
  return MEMORY[0x1F4185C90]();
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185CB0]();
}

uint64_t KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)()
{
  return MEMORY[0x1F4185CD8]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return MEMORY[0x1F4188170]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1F40E6E30]();
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6E50]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x1F4185EF0]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x1F4185F00]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6EA8]();
}

uint64_t static UInt32._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EB8]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6ED8]();
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EE8]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t dispatch thunk of CodingKey.stringValue.getter()
{
  return MEMORY[0x1F4186288]();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return MEMORY[0x1F4188198]();
}

uint64_t TaskLocal.get()()
{
  return MEMORY[0x1F41881A8]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

void CFRelease(CFTypeRef cf)
{
}

uint64_t CUTWeakLinkSymbol()
{
  return MEMORY[0x1F4112A78]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return MEMORY[0x1F4145DC0]();
}

uint64_t PPSSendTelemetry()
{
  return MEMORY[0x1F4145DD0]();
}

uint64_t SecPolicyCreateAppleSSLPinned()
{
  return MEMORY[0x1F40F7038]();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1F40F7128](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

OSStatus SecTrustEvaluateAsyncWithError(SecTrustRef trust, dispatch_queue_t queue, SecTrustWithErrorCallback result)
{
  return MEMORY[0x1F40F7200](trust, queue, result);
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return MEMORY[0x1F40F7290](trust, policies);
}

uint64_t TUCopyIDSCanonicalAddressForHandle()
{
  return MEMORY[0x1F41639F0]();
}

uint64_t TULockdownModeEnabled()
{
  return MEMORY[0x1F4163A80]();
}

uint64_t TUObjectsAreEqualOrNil()
{
  return MEMORY[0x1F4163A98]();
}

uint64_t TUPreferredFaceTimeBundleIdentifier()
{
  return MEMORY[0x1F4163AB8]();
}

uint64_t TUUnlockDeviceWithPromptFrontBoardOptionsDictionary()
{
  return MEMORY[0x1F4163AF0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFPreferencesSetBackupDisabled()
{
  return MEMORY[0x1F40D8FB8]();
}

uint64_t _CFPreferencesSetFileProtectionClass()
{
  return MEMORY[0x1F40D8FC8]();
}

uint64_t _TUIsInternalInstall()
{
  return MEMORY[0x1F4163B00]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

nw_connection_group_t nw_connection_group_create(nw_group_descriptor_t group_descriptor, nw_parameters_t parameters)
{
  return (nw_connection_group_t)MEMORY[0x1F40F2B68](group_descriptor, parameters);
}

uint64_t nw_connection_group_set_membership_changed_handler()
{
  return MEMORY[0x1F40F2B80]();
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1F40F3418](parameters);
}

uint64_t nw_parameters_create_quic_stream()
{
  return MEMORY[0x1F40F34C8]();
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34E0](configure_dtls, configure_udp);
}

void nw_protocol_stack_clear_application_protocols(nw_protocol_stack_t stack)
{
}

uint64_t nw_quic_connection_copy_sec_protocol_options()
{
  return MEMORY[0x1F40F3CE0]();
}

uint64_t nw_quic_connection_set_initial_max_streams_bidirectional()
{
  return MEMORY[0x1F40F3D30]();
}

uint64_t nw_quic_connection_set_initial_max_streams_unidirectional()
{
  return MEMORY[0x1F40F3D38]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1F40CD5F0](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1F40CDDD8]();
}

void sec_protocol_options_add_tls_application_protocol(sec_protocol_options_t options, const char *application_protocol)
{
}

void sec_protocol_options_set_verify_block(sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
}

SecTrustRef sec_trust_copy_ref(sec_trust_t trust)
{
  return (SecTrustRef)MEMORY[0x1F40F75C0](trust);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1F41881F8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1F4188200]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1F4188208]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1F4188218]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1F4188220]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1F41864B0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getExtendedExistentialTypeMetadata()
{
  return MEMORY[0x1F4186598]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1F4186730]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x1F4186780]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return MEMORY[0x1F4186818]();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return MEMORY[0x1F4186820]();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return MEMORY[0x1F4186828]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1F4186848]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1F4186850]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1F4186870]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1F4186878]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x1F4186880]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x1F4186888]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x1F4186890]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x1F41868A8]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x1F41868B0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x1F41868D0]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x1F41868D8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}