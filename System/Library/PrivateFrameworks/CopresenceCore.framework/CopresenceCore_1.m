uint64_t PluginAttachmentLedgerTopic.participants.getter()
{
  uint64_t v1;

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PluginAttachmentLedgerTopic.participants.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginAttachmentLedgerTopic.participants.modify(uint64_t a1))(void *a1, char a2)
{
  *(void *)(a1 + 16) = *(void *)(v1 + 16);
  swift_retain();
  CurrentValueSubject.value.getter();
  return PersonalPresenceDataSource.presentDevices.modify;
}

uint64_t PluginAttachmentLedgerTopic.$participants.getter()
{
  return swift_retain();
}

uint64_t key path setter for PluginAttachmentLedgerTopic.state : PluginAttachmentLedgerTopic(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  unint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = *a2;
  v11[0] = *a1;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v5;
  v11[5] = v6;
  v11[6] = v7;
  v9 = *(uint64_t (**)(uint64_t *))(*(void *)v8 + 296);
  outlined copy of PluginAttachmentLedgerTopic.State(v11[0], v2, v3, v4, v5, v6);
  return v9(v11);
}

uint64_t PluginAttachmentLedgerTopic.state.getter()
{
  swift_retain();
  CurrentValueSubject.value.getter();
  return swift_release();
}

uint64_t PluginAttachmentLedgerTopic.state.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  unint64_t v6 = a1[5];
  swift_retain();
  CurrentValueSubject.send(_:)();
  outlined consume of PluginAttachmentLedgerTopic.State(v1, v2, v3, v4, v5, v6);
  return swift_release();
}

void (*PluginAttachmentLedgerTopic.state.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[14] = *(void *)(v1 + 24);
  swift_retain();
  CurrentValueSubject.value.getter();
  return PluginAttachmentLedgerTopic.state.modify;
}

void PluginAttachmentLedgerTopic.state.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  v2[7] = v3;
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  unint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  v2[8] = v4;
  v2[9] = v5;
  v2[10] = v6;
  v2[11] = v7;
  v2[12] = v8;
  v2[13] = v9;
  if (a2)
  {
    outlined copy of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
    CurrentValueSubject.send(_:)();
    outlined consume of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
    swift_release();
    outlined consume of PluginAttachmentLedgerTopic.State(*v2, v2[1], v2[2], v2[3], v2[4], v2[5]);
  }
  else
  {
    CurrentValueSubject.send(_:)();
    outlined consume of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
    swift_release();
  }
  free(v2);
}

uint64_t PluginAttachmentLedgerTopic.$state.getter()
{
  return swift_retain();
}

void *PluginAttachmentLedgerTopic.shutdownReason.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

void PluginAttachmentLedgerTopic.shutdownReason.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;
}

uint64_t (*PluginAttachmentLedgerTopic.shutdownReason.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t key path setter for PluginAttachmentLedgerTopic.internalState : PluginAttachmentLedgerTopic(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  unint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = *a2;
  v11[0] = *a1;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v5;
  v11[5] = v6;
  v11[6] = v7;
  uint64_t v9 = *(uint64_t (**)(uint64_t *))(*(void *)v8 + 352);
  outlined copy of PluginAttachmentLedgerTopic.State(v11[0], v2, v3, v4, v5, v6);
  return v9(v11);
}

uint64_t PluginAttachmentLedgerTopic.internalState.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v33[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_retain();
    uint64_t v13 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v15 = v14;
    swift_release();
    *(void *)&long long v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    swift_beginAccess();
    uint64_t v16 = *(void *)(v1 + 88);
    long long v17 = *(_OWORD *)(v1 + 56);
    long long v29 = *(_OWORD *)(v1 + 40);
    long long v30 = v17;
    long long v31 = *(_OWORD *)(v1 + 72);
    uint64_t v32 = v16;
    uint64_t v18 = PluginAttachmentLedgerTopic.State.description.getter();
    *(void *)&long long v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "%s updated state new-state=%s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  unint64_t v20 = *(void *)(v1 + 80);
  if (v20 >> 62 == 1)
  {
    PluginAttachmentLedgerTopic.handleShutdown()();
    unint64_t v20 = *(void *)(v1 + 80);
  }
  uint64_t v21 = *(void *)(v1 + 48);
  uint64_t v22 = *(void *)(v1 + 56);
  uint64_t v23 = *(void *)(v1 + 64);
  uint64_t v24 = *(void *)(v1 + 72);
  uint64_t v25 = *(void *)(v1 + 88);
  *(void *)&long long v29 = *(void *)(v1 + 40);
  *((void *)&v29 + 1) = v21;
  *(void *)&long long v30 = v22;
  *((void *)&v30 + 1) = v23;
  *(void *)&long long v31 = v24;
  *((void *)&v31 + 1) = v20;
  uint64_t v32 = v25;
  v26 = *(uint64_t (**)(long long *))(*(void *)v1 + 296);
  outlined copy of PluginAttachmentLedgerTopic.State(v29, v21, v22, v23, v24, v20);
  return v26(&v29);
}

void PluginAttachmentLedgerTopic.handleShutdown()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v21[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = PluginAttachmentLedgerTopic.description.getter();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "%s handling shutdown", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  LOBYTE(v21[0]) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  *(void *)((char *)v1
            + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = 0;
  uint64_t v15 = swift_release();
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*v1 + 368))(v15);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = type metadata accessor for UploadToken(0);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1B3EA1F30](v17, v18, v19, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  swift_beginAccess();
  v1[12] = 0;
  swift_release();
  PluginAttachmentLedgerTopic.uploadToken.didset();
}

uint64_t PluginAttachmentLedgerTopic.internalState.getter@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = v1[9];
  unint64_t v8 = v1[10];
  uint64_t v9 = v1[11];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return outlined copy of PluginAttachmentLedgerTopic.State(v3, v4, v5, v6, v7, v8);
}

uint64_t PluginAttachmentLedgerTopic.internalState.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[3];
  long long v12 = *((_OWORD *)a1 + 2);
  long long v13 = *(_OWORD *)(a1 + 1);
  uint64_t v4 = a1[6];
  swift_beginAccess();
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = v1[9];
  unint64_t v10 = v1[10];
  v1[5] = v2;
  *((_OWORD *)v1 + 3) = v13;
  v1[8] = v3;
  *(_OWORD *)(v1 + 9) = v12;
  v1[11] = v4;
  outlined consume of PluginAttachmentLedgerTopic.State(v5, v6, v7, v8, v9, v10);
  return PluginAttachmentLedgerTopic.internalState.didset();
}

uint64_t (*PluginAttachmentLedgerTopic.internalState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return PluginAttachmentLedgerTopic.internalState.modify;
}

uint64_t PluginAttachmentLedgerTopic.internalState.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return PluginAttachmentLedgerTopic.internalState.didset();
  }
  return result;
}

uint64_t key path setter for PluginAttachmentLedgerTopic.uploadToken : PluginAttachmentLedgerTopic(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 96) = v2;
  swift_retain_n();
  swift_release();
  PluginAttachmentLedgerTopic.uploadToken.didset();
  return swift_release();
}

void PluginAttachmentLedgerTopic.uploadToken.didset()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = v1;
    uint64_t v18 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = String.init<A>(reflecting:)();
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v15 = *(void *)(v1 + 112);
    unint64_t v16 = *(void *)(v1 + 120);
    swift_bridgeObjectRetain();
    uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "Topic %s name==%s updated its uploadToken task", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t PluginAttachmentLedgerTopic.uploadToken.getter()
{
  return swift_retain();
}

uint64_t PluginAttachmentLedgerTopic.localParticipantID.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t PluginAttachmentLedgerTopic.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 PluginAttachmentLedgerTopic.config.getter@<Q0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 136);
  uint64_t v4 = *(void *)(v1 + 144);
  *(void *)a1 = *(void *)(v1 + 128);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v1 + 152);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.config.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t result = swift_beginAccess();
  v1[16] = v2;
  v1[17] = v3;
  v1[18] = v4;
  v1[19] = v5;
  v1[20] = v6;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.config.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginAttachmentLedgerTopic.service.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 168, a1);
}

uint64_t PluginAttachmentLedgerTopic.dataCryptor.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UserNotificationCenter(v1 + 208, a1);
}

void PluginAttachmentLedgerTopic.subscribeStreamInput.willset(uint64_t a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput) == a1)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v22 = v17;
      *(_DWORD *)unint64_t v16 = 136315138;
      swift_retain();
      uint64_t v18 = PluginAttachmentLedgerTopic.description.getter();
      unint64_t v20 = v19;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "%s trying to update the same value twice.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v17, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = v21;
      *(_DWORD *)uint64_t v5 = 136315650;
      swift_retain();
      uint64_t v6 = PluginAttachmentLedgerTopic.description.getter();
      unint64_t v8 = v7;
      swift_release();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v9 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 22) = 2080;
      uint64_t v11 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v3, v4, "%s updating subscribeStream input from %s to %s", (uint8_t *)v5, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v21, -1, -1);
      MEMORY[0x1B3EA39E0](v5, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    LOBYTE(v22) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
  }
}

uint64_t PluginAttachmentLedgerTopic.pendingAttachments.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t PluginAttachmentLedgerTopic.pendingAttachments.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v7 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_pendingAttachments);
  swift_beginAccess();
  *unint64_t v7 = a1;
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v6 = v8;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCBF0], v3);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) == 0) {
    __break(1u);
  }
  return result;
}

void (*PluginAttachmentLedgerTopic.pendingAttachments.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  v3[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[5] = v5;
  v3[6] = malloc(*(void *)(v5 + 64));
  swift_beginAccess();
  return PluginAttachmentLedgerTopic.pendingAttachments.modify;
}

void PluginAttachmentLedgerTopic.pendingAttachments.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  uint64_t v4 = (void *)v3[6];
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = v3[4];
    uint64_t v6 = v3[5];
    unint64_t v7 = *(void **)(v3[3] + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
    *uint64_t v4 = v7;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v4, *MEMORY[0x1E4FBCBF0], v5);
    id v8 = v7;
    LOBYTE(v7) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
    if ((v7 & 1) == 0)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = (void *)v3[6];
  }
  free(v4);
  free(v3);
}

uint64_t PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentStatusACKHandlers);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginAttachmentLedgerTopic.attachments.getter()
{
  swift_beginAccess();
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PluginAttachmentLedgerTopic.attachments.setter()
{
  return swift_bridgeObjectRelease();
}

void (*PluginAttachmentLedgerTopic.attachments.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic__attachments);
  swift_beginAccess();
  v3[5] = *v4;
  swift_retain();
  CurrentValueSubject.value.getter();
  return PluginAttachmentLedgerTopic.attachments.modify;
}

void PluginAttachmentLedgerTopic.attachments.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)(*(void *)a1 + 32) = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    swift_bridgeObjectRetain();
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    CurrentValueSubject.send(_:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  free(v2);
}

uint64_t PluginAttachmentLedgerTopic.$attachments.getter()
{
  return swift_retain();
}

uint64_t PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, void *a7)
{
  uint64_t v8 = v7;
  v83 = a7;
  unint64_t v75 = a6;
  uint64_t v84 = a4;
  uint64_t v85 = a3;
  uint64_t v74 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v11 - 8);
  v61 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  v62 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>);
  uint64_t v66 = *(void *)(v67 - 8);
  MEMORY[0x1F4188790](v67);
  v65 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation.BufferingPolicy);
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  v78 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  uint64_t v81 = *(void *)(v16 - 8);
  uint64_t v82 = v16;
  MEMORY[0x1F4188790](v16);
  v77 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  v76 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  v70 = (char *)&v60 - v21;
  uint64_t v73 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  v71 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v23);
  v69 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v26 = *a5;
  uint64_t v27 = a5[1];
  uint64_t v28 = a5[2];
  uint64_t v29 = a5[3];
  uint64_t v30 = a5[4];
  uint64_t v31 = MEMORY[0x1E4FBC868];
  *(void *)&long long aBlock = MEMORY[0x1E4FBC868];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UInt64 : PluginAttachmentLedgerTopic.Participant], Never>);
  swift_allocObject();
  *(void *)(v8 + 16) = CurrentValueSubject.init(_:)();
  v90 = 0;
  long long aBlock = 0u;
  long long v89 = 0u;
  long long v91 = xmmword_1B113B6F0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>);
  swift_allocObject();
  *(void *)(v8 + 24) = CurrentValueSubject.init(_:)();
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 80) = 0x8000000000000000;
  uint64_t v32 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>);
  swift_allocObject();
  *(void *)(v8 + v32) = PassthroughSubject.init()();
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamRetryAttempts) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentListeners) = v31;
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_cancellables) = MEMORY[0x1E4FBC870];
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_pendingAttachments) = v31;
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentStatusACKHandlers) = v31;
  v33 = (uint64_t *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic__attachments);
  v68 = (uint64_t *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic__attachments);
  uint64_t v34 = MEMORY[0x1E4FBC860];
  *(void *)&long long aBlock = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  swift_allocObject();
  uint64_t *v33 = CurrentValueSubject.init(_:)();
  *(void *)(v8 + 120) = a2;
  *(void *)(v8 + 128) = v26;
  *(void *)(v8 + 136) = v27;
  *(void *)(v8 + 144) = v28;
  *(void *)(v8 + 152) = v29;
  *(void *)(v8 + 160) = v30;
  uint64_t v35 = v74;
  *(void *)(v8 + 104) = v75;
  *(void *)(v8 + 112) = v35;
  outlined init with copy of UserNotificationCenter(v85, v8 + 168);
  v60 = (void *)(v8 + 208);
  outlined init with copy of UserNotificationCenter(v84, v8 + 208);
  unint64_t v75 = type metadata accessor for OS_dispatch_queue();
  *(void *)&long long aBlock = 0;
  *((void *)&aBlock + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  *(void *)&long long aBlock = 0xD00000000000001CLL;
  *((void *)&aBlock + 1) = 0x80000001B115D9D0;
  v36._countAndFlagsBits = v35;
  v36._object = a2;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  *(void *)&long long aBlock = v34;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v37 = (uint64_t)v70;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v72 + 104))(v71, *MEMORY[0x1E4FBCC58], v73);
  *(void *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v38 = v68;
  swift_beginAccess();
  swift_release();
  id v87 = v83;
  uint64_t v39 = (uint64_t)v76;
  swift_allocObject();
  uint64_t *v38 = CurrentValueSubject.init(_:)();
  swift_endAccess();
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  uint64_t v41 = *(void *)(v40 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v37, 1, 1, v40);
  (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, *MEMORY[0x1E4FBD028], v80);
  uint64_t v86 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
  v42 = v77;
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationStream, v42, v82);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v37, v39, &demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40);
  if (result != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationListener, v39, v40);
    uint64_t v44 = *(void *)(v8 + 232);
    uint64_t v45 = *(void *)(v8 + 240);
    __swift_project_boxed_opaque_existential_1(v60, v44);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 16))(v44, v45);
    uint64_t v47 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
    id v87 = *(id *)(v8 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
    id v48 = v87;
    *(void *)&long long aBlock = v46;
    uint64_t v49 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v50 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v61, 1, 1, v49);
    id v51 = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
    v52 = v62;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v50, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
    v53 = v65;
    uint64_t v54 = v64;
    Publisher.dropFirst(_:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v54);
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>);
    uint64_t v55 = v67;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v55);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    v56 = *(void **)(v8 + v47);
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = partial apply for closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:);
    *(void *)(v57 + 24) = v8;
    v90 = partial apply for thunk for @callee_guaranteed () -> ();
    *(void *)&long long v91 = v57;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v89 = thunk for @escaping @callee_guaranteed () -> ();
    *((void *)&v89 + 1) = &block_descriptor_7;
    v58 = _Block_copy(&aBlock);
    v59 = v56;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v59, v58);
    _Block_release(v58);

    __swift_destroy_boxed_opaque_existential_1Tm(v84);
    __swift_destroy_boxed_opaque_existential_1Tm(v85);
    LOBYTE(v58) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((v58 & 1) == 0)
    {
      outlined destroy of UUID?(v37, &demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
      swift_release();
      return v8;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, uint64_t a2)
{
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation?);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  return v5(a2, 0, 1, v4);
}

uint64_t PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v37 = v34;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v33 = v7;
    swift_retain();
    uint64_t v21 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v23 = v22;
    swift_release();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v37);
    uint64_t v35 = v6;
    uint64_t v36 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v20 + 12) = 2080;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v25 = v33;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v37);
    uint64_t v6 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v25);
    _os_log_impl(&dword_1B0DF7000, v18, v19, "[Cryptor] %s notified of local encryptionID update. encryptionID=%s", (uint8_t *)v20, 0x16u);
    uint64_t v28 = v34;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  uint64_t v29 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v6, 1, 1, v29);
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = v2;
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:), (uint64_t)v30);
  return swift_release();
}

void closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1)
{
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_retain();
    uint64_t v8 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v10 = v9;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2112;
    uint64_t v12 = *(void **)(a1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
    id v11 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v12;
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "%s initialized on queue=%@", (uint8_t *)v5, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  PluginAttachmentLedgerTopic.bootstrap()();
}

void PluginAttachmentLedgerTopic.bootstrap()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_retain();
    uint64_t v13 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v15 = v14;
    swift_release();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = swift_release_n();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 632))(v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Attachment]);
    uint64_t v17 = String.init<A>(reflecting:)();
    uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "Bootstrapping %s with initialAttachments: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  PluginAttachmentLedgerTopic.subscribe()();
}

uint64_t PluginAttachmentLedgerTopic.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_retain();
    uint64_t v7 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v9 = v8;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Deinit %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  LOBYTE(v15) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  *(void *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = 0;
  swift_release();
  swift_release();
  swift_release();

  outlined consume of PluginAttachmentLedgerTopic.State(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 168);
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + 208);
  uint64_t v10 = v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationListener;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationStream;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t PluginAttachmentLedgerTopic.__deallocating_deinit()
{
  PluginAttachmentLedgerTopic.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PluginAttachmentLedgerTopic.unsubscribe()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    uint64_t v6 = aBlock[0];
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_retain();
    uint64_t v7 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v9 = v8;
    swift_release();
    aBlock[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Received request to unsubscribe on %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for closure #1 in PluginAttachmentLedgerTopic.unsubscribe();
  *(void *)(v11 + 24) = v1;
  aBlock[4] = (uint64_t)thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_18_0;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v13 = v10;
  swift_retain();
  swift_release();
  dispatch_sync(v13, v12);

  _Block_release(v12);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v12) {
    __break(1u);
  }
}

void closure #1 in PluginAttachmentLedgerTopic.unsubscribe()(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 344))(&v15);
  uint64_t v1 = v15;
  uint64_t v2 = v18;
  unint64_t v3 = v20;
  if (!(v20 >> 62)) {
    goto LABEL_16;
  }
  if (v20 >> 62 != 1)
  {
    uint64_t v12 = v17 | v16;
    uint64_t v13 = v19 | v21;
    if (v20 != 0x8000000000000000 || (v17 | v16 | v15 | v18 | v19 | v21) != 0)
    {
      outlined consume of PluginAttachmentLedgerTopic.State(v15, v16, v17, v18, v19, v20);
      if (v3 != 0x8000000000000000 || v1 != 1 || v12 | v2 | v13) {
        goto LABEL_4;
      }
LABEL_17:
      PluginAttachmentLedgerTopic.shutdown(reason:)(0);
      return;
    }
LABEL_16:
    outlined consume of PluginAttachmentLedgerTopic.State(v15, v16, v17, v18, v19, v20);
    goto LABEL_17;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v15, v16, v17, v18, v19, v20);
LABEL_4:
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_retain();
    uint64_t v9 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v11 = v10;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v5, v6, "Already shutting down, ignoring request on %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v8, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t PluginAttachmentLedgerTopic.shutdown(reason:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (one-time initialization token for attachmentLedgerTopic != -1) {
LABEL_22:
  }
    swift_once();
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain();
  id v11 = a1;
  swift_retain();
  id v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v39[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v17 = PluginAttachmentLedgerTopic.description.getter();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    if (a1)
    {
      uint64_t v38 = (uint64_t)a1;
      id v19 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v20 = String.init<A>(reflecting:)();
      unint64_t v22 = v21;
    }
    else
    {
      unint64_t v22 = 0xE300000000000000;
      uint64_t v20 = 7104878;
    }
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v13, v14, "%s Processing request to shutdown, reason: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 288))(v39);
  uint64_t v23 = v39[0];
  uint64_t v24 = v40;
  uint64_t v25 = v41;
  if (!((unint64_t)v41 >> 62)) {
    goto LABEL_14;
  }
  if ((unint64_t)v41 >> 62 == 1) {
    return outlined consume of PluginAttachmentLedgerTopic.State(v39[0], v39[1], v39[2], v40, *((uint64_t *)&v40 + 1), v41);
  }
  uint64_t v27 = v39[2] | v39[1];
  uint64_t v28 = *((void *)&v40 + 1) | *((void *)&v41 + 1);
  if ((void)v41 == 0x8000000000000000 && !(v27 | v39[0] | (unint64_t)v40 | v28))
  {
LABEL_14:
    outlined consume of PluginAttachmentLedgerTopic.State(v39[0], v39[1], v39[2], v40, *((uint64_t *)&v40 + 1), v41);
LABEL_15:
    v39[0] = 2;
    *(_OWORD *)&v39[1] = 0u;
    long long v40 = 0u;
    long long v41 = xmmword_1B113B6F0;
    uint64_t v29 = (void (**)(uint64_t *))(*(void *)v2 + 352);
    uint64_t v30 = *v29;
    (*v29)(v39);
    uint64_t v31 = *(uint64_t (**)(void *))(*(void *)v2 + 328);
    id v32 = a1;
    uint64_t v33 = v31(a1);
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 584))(v33);
    uint64_t v35 = specialized _copyCollectionToContiguousArray<A>(_:)(v34);
    uint64_t v36 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v2 + 392))(v39, v36);
    *(void *)&long long v41 = 0x4000000000000005;
    *((void *)&v41 + 1) = v35;
    return ((uint64_t (*)(uint64_t *))v30)(v39);
  }
  uint64_t result = outlined consume of PluginAttachmentLedgerTopic.State(v39[0], v39[1], v39[2], v40, *((uint64_t *)&v40 + 1), v41);
  if (v25 == 0x8000000000000000 && v23 == 1 && !(v27 | v24 | v28)) {
    goto LABEL_15;
  }
  return result;
}

Swift::Void __swiftcall PluginAttachmentLedgerTopic.subscribe()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCBF0], v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1 + 288))(&v23, v8);
  uint64_t v9 = v23;
  uint64_t v10 = v26;
  unint64_t v11 = v28;
  if (!(v28 >> 62)) {
    goto LABEL_10;
  }
  if (v28 >> 62 == 1)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v23, v24, v25, v26, v27, v28);
    goto LABEL_5;
  }
  uint64_t v20 = v25 | v24;
  uint64_t v21 = v27 | v29;
  if (v28 == 0x8000000000000000 && !(v20 | v23 | v26 | v21))
  {
LABEL_10:
    outlined consume of PluginAttachmentLedgerTopic.State(v23, v24, v25, v26, v27, v28);
LABEL_11:
    PluginAttachmentLedgerTopic.setupSubscribeStream()();
    PluginAttachmentLedgerTopic.sendSubscribeRequest()();
    return;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v23, v24, v25, v26, v27, v28);
  if (v11 == 0x8000000000000000 && v9 == 1 && !(v20 | v10 | v21)) {
    goto LABEL_11;
  }
LABEL_5:
  if (one-time initialization token for attachmentLedgerTopic != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_retain();
    uint64_t v17 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v19 = v18;
    swift_release();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Skipping subscribe handling for %s since we're in a terminal state", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {
    swift_release_n();
  }
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation.YieldResult);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = &v8[*(int *)(v6 + 56)];
  outlined init with copy of Attachment.MMCSMetadata(a3, (uint64_t)v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a1, v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 304) = v16;
  *(void *)(v9 + 312) = v8;
  *(_OWORD *)(v9 + 288) = v15;
  *(void *)(v9 + 272) = a7;
  *(void *)(v9 + 280) = a8;
  *(void *)(v9 + 256) = a5;
  *(void *)(v9 + 264) = a6;
  *(void *)(v9 + 240) = a3;
  *(void *)(v9 + 248) = a4;
  *(void *)(v9 + 224) = a1;
  *(void *)(v9 + 232) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  *(void *)(v9 + 320) = swift_task_alloc();
  *(void *)(v9 + 328) = swift_task_alloc();
  *(void *)(v9 + 336) = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  *(void *)(v9 + 344) = swift_task_alloc();
  *(void *)(v9 + 352) = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  *(void *)(v9 + 360) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SymmetricKey();
  *(void *)(v9 + 368) = v10;
  *(void *)(v9 + 376) = *(void *)(v10 - 8);
  *(void *)(v9 + 384) = swift_task_alloc();
  *(void *)(v9 + 392) = swift_task_alloc();
  *(void *)(v9 + 400) = swift_task_alloc();
  *(void *)(v9 + 408) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v9 + 416) = v11;
  *(void *)(v9 + 424) = *(void *)(v11 - 8);
  *(void *)(v9 + 432) = swift_task_alloc();
  *(void *)(v9 + 440) = swift_task_alloc();
  *(void *)(v9 + 448) = type metadata accessor for Attachment.MMCSMetadata(0);
  *(void *)(v9 + 456) = swift_task_alloc();
  *(void *)(v9 + 464) = swift_task_alloc();
  *(void *)(v9 + 472) = type metadata accessor for UploadToken(0);
  *(void *)(v9 + 480) = swift_task_alloc();
  *(void *)(v9 + 488) = type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata();
  *(void *)(v9 + 496) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  *(void *)(v9 + 504) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for AES.GCM.SealedBox();
  *(void *)(v9 + 512) = v12;
  *(void *)(v9 + 520) = *(void *)(v12 - 8);
  *(void *)(v9 + 528) = swift_task_alloc();
  return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:), 0, 0);
}

uint64_t PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)()
{
  uint64_t v93 = v0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v0 + 312) + 288))(&v86);
  uint64_t v1 = v86;
  uint64_t v2 = v89;
  unint64_t v3 = v91;
  if ((v91 & 0x8000000000000000) == 0
    || ((uint64_t v4 = v88 | v87, v5 = v90 | v92, v91 == 0x8000000000000000)
      ? (BOOL v6 = (v88 | v87 | v86 | v89 | v90 | v92) == 0)
      : (BOOL v6 = 0),
        v6))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v86, v87, v88, v89, v90, v91);
LABEL_11:
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 424);
    uint64_t v10 = *(void *)(v0 + 432);
    uint64_t v11 = *(void *)(v0 + 416);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v12, v11);
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v18 = *(void *)(v0 + 424);
    uint64_t v17 = *(void *)(v0 + 432);
    uint64_t v19 = *(void *)(v0 + 416);
    if (v16)
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      uint64_t v86 = v85;
      *(_DWORD *)uint64_t v20 = 136315394;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      *(_WORD *)(v20 + 12) = 2080;
      swift_retain();
      uint64_t v23 = PluginAttachmentLedgerTopic.description.getter();
      unint64_t v25 = v24;
      swift_release();
      *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Dropping request to upload attachment %s because state of PluginAttachmentLedgerTopic is invalid %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v85, -1, -1);
      MEMORY[0x1B3EA39E0](v20, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v18 + 8))(*(void *)(v0 + 432), *(void *)(v0 + 416));
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
    swift_allocError();
    *uint64_t v26 = 3;
    swift_willThrow();
    goto LABEL_17;
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v86, v87, v88, v89, v90, v91);
  if (v3 != 0x8000000000000000 || v1 != 1 || v4 | v2 | v5) {
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(v0 + 504);
  *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 240);
  uint64_t v8 = type metadata accessor for AES.GCM.Nonce();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  lazy protocol witness table accessor for type Data and conformance Data();
  static AES.GCM.seal<A>(_:using:nonce:)();
  outlined destroy of UUID?(*(void *)(v0 + 504), &demangling cache variable for type metadata for AES.GCM.Nonce?);
  uint64_t v29 = AES.GCM.SealedBox.combined.getter();
  unint64_t v31 = v30;
  outlined consume of Data?(v29, v30);
  if (v31 >> 60 == 15)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v32 = *(void *)(v0 + 400);
    uint64_t v34 = *(void *)(v0 + 368);
    uint64_t v33 = *(void *)(v0 + 376);
    uint64_t v35 = *(void *)(v0 + 232);
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v37 = v34;
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
    v38(v32, v35, v37);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = *(void *)(v0 + 400);
    uint64_t v44 = *(void *)(v0 + 368);
    uint64_t v43 = *(void *)(v0 + 376);
    if (v41)
    {
      os_log_type_t v83 = v40;
      uint64_t v45 = *(void *)(v0 + 320);
      uint64_t v46 = *(void *)(v0 + 328);
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t type = swift_slowAlloc();
      uint64_t v86 = type;
      *(_DWORD *)uint64_t v47 = 136315138;
      v38(v46, v42, v44);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v44);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, v45, &demangling cache variable for type metadata for SymmetricKey?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v45, 1, v44) == 1)
      {
        unint64_t v48 = 0xE300000000000000;
        uint64_t v49 = 7104878;
      }
      else
      {
        uint64_t v72 = *(void *)(v0 + 384);
        uint64_t v71 = *(void *)(v0 + 392);
        uint64_t v74 = *(void *)(v0 + 368);
        uint64_t v73 = *(void *)(v0 + 376);
        (*(void (**)(uint64_t, void, uint64_t))(v73 + 32))(v71, *(void *)(v0 + 320), v74);
        v38(v72, v71, v74);
        uint64_t v49 = String.init<A>(reflecting:)();
        unint64_t v48 = v75;
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v74);
      }
      uint64_t v76 = *(void *)(v0 + 400);
      uint64_t v78 = *(void *)(v0 + 368);
      uint64_t v77 = *(void *)(v0 + 376);
      outlined destroy of UUID?(*(void *)(v0 + 328), &demangling cache variable for type metadata for SymmetricKey?);
      *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v48, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
      _os_log_impl(&dword_1B0DF7000, v39, v83, "Failed to fetch the combined representation of the assetSkeleton encrypted w/ SymmetricKey %s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](type, -1, -1);
      MEMORY[0x1B3EA39E0](v47, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v43 + 8))(*(void *)(v0 + 400), *(void *)(v0 + 368));
    }

    uint64_t v79 = *(void *)(v0 + 528);
    uint64_t v80 = *(void *)(v0 + 520);
    uint64_t v81 = *(void *)(v0 + 512);
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *uint64_t v82 = 3;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  uint64_t v50 = *(void *)(v0 + 312);
  uint64_t v51 = *(void *)(v0 + 256);
  uint64_t v52 = *(void *)(v0 + 264);
  uint64_t v53 = swift_task_alloc();
  *(void *)(v53 + 16) = v51;
  *(void *)(v53 + 24) = v52;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedgerMetadata_AttachmentMetadata and conformance AttachmentLedgerMetadata_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  static Message.with(_:)();
  uint64_t v54 = swift_task_dealloc();
  uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 368))(v54);
  *(void *)(v0 + 536) = v55;
  if (!v55)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_1B0DF7000, v63, v64, "UploadToken task was never started", v65, 2u);
      MEMORY[0x1B3EA39E0](v65, -1, -1);
    }
    uint64_t v66 = *(void *)(v0 + 528);
    uint64_t v67 = *(void *)(v0 + 520);
    uint64_t v68 = *(void *)(v0 + 512);
    uint64_t v69 = *(void *)(v0 + 496);

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    unsigned char *v70 = 1;
    swift_willThrow();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v69, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    goto LABEL_17;
  }
  uint64_t v56 = v55;
  uint64_t v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v57;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(void *)(v0 + 552) = v58;
  *uint64_t v57 = v0;
  v57[1] = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  uint64_t v60 = *(void *)(v0 + 472);
  uint64_t v59 = *(void *)(v0 + 480);
  uint64_t v61 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v59, v56, v60, v58, v61);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 560) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  }
  else {
    uint64_t v2 = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  void (*v19)(void *__return_ptr, uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  char isEscapingClosureAtFileLocation;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[2];
  void v71[3];
  long long v72;
  unint64_t v73[3];
  long long v74;
  void *v75;
  uint64_t v76;

  unint64_t v75 = v0;
  v65 = v0[70];
  uint64_t v1 = v0[59];
  uint64_t v2 = v0[60];
  unint64_t v3 = v0[58];
  os_log_type_t v64 = v0[57];
  uint64_t v4 = (int *)v0[56];
  uint64_t v5 = v0[53];
  uint64_t v68 = v0[51];
  uint64_t v69 = v0[55];
  BOOL v6 = v0[47];
  uint64_t v59 = v0[52];
  uint64_t v60 = v0[46];
  uint64_t v7 = (void *)v0[39];
  uint64_t v56 = v0[37];
  uint64_t v57 = v0[38];
  uint64_t v66 = v0[35];
  uint64_t v67 = v0[36];
  uint64_t v54 = v0[34];
  uint64_t v8 = v0[31];
  uint64_t v62 = v0[32];
  uint64_t v63 = v0[33];
  uint64_t v9 = v0[30];
  uint64_t v58 = v0[29];
  uint64_t v55 = v0[28];
  (*(void (**)(uint64_t, void, void))(v0[65] + 16))(v3, v0[66], v0[64]);
  uint64_t v10 = (uint64_t *)(v2 + *(int *)(v1 + 28));
  uint64_t v11 = v10[1];
  uint64_t v53 = *v10;
  uint64_t v12 = v3 + v4[8];
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, v54, v13);
  uint64_t v14 = (uint64_t *)(v3 + v4[5]);
  *uint64_t v14 = v9;
  v14[1] = v8;
  os_log_type_t v15 = (void *)(v3 + v4[6]);
  *os_log_type_t v15 = 0;
  v15[1] = 0;
  v15[2] = 0xF000000000000000;
  BOOL v16 = (void *)(v3 + v4[7]);
  *BOOL v16 = v53;
  v16[1] = v11;
  uint64_t v17 = (uint64_t *)(v3 + v4[9]);
  *uint64_t v17 = v66;
  v17[1] = v67;
  uint64_t v18 = (uint64_t *)(v3 + v4[10]);
  *uint64_t v18 = v56;
  v18[1] = v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v69, v55, v59);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v68, v58, v60);
  outlined init with copy of Attachment.MMCSMetadata(v3, v64, type metadata accessor for Attachment.MMCSMetadata);
  v70[0] = v62;
  v70[1] = v63;
  outlined init with copy of UserNotificationCenter((uint64_t)(v7 + 26), (uint64_t)(v0 + 14));
  uint64_t v61 = v7[13];
  uint64_t v19 = *(void (**)(void *__return_ptr, uint64_t))(*v7 + 392);
  outlined copy of Data._Representation(v9, v8);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v66, v67);
  outlined copy of Data._Representation(v56, v57);
  uint64_t v20 = outlined copy of Data?(v62, v63);
  v19(v71, v20);
  v73[0] = v71[0];
  v73[1] = v71[1];
  v73[2] = v71[2];
  uint64_t v74 = v72;
  type metadata accessor for Attachment(0);
  swift_allocObject();
  uint64_t v21 = Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(v69, v68, v64, v70, v0 + 14, v61, v73);
  v0[71] = v21;
  if (v65)
  {
    unint64_t v22 = v0[66];
    uint64_t v23 = v0[65];
    unint64_t v24 = v0[64];
    unint64_t v25 = v0[62];
    uint64_t v26 = v0[60];
    uint64_t v27 = v0[58];
    swift_release();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, type metadata accessor for Attachment.MMCSMetadata);
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v26, type metadata accessor for UploadToken);
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v25, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
  else
  {
    unint64_t v28 = v21;
    uint64_t v29 = v0[39];
    unint64_t v30 = swift_task_alloc();
    *(void *)(v30 + 16) = v29;
    *(void *)(v30 + 24) = v28;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    static Message.with(_:)();
    uint64_t v33 = v0[39];
    swift_task_dealloc();
    uint64_t v34 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
    v0[72] = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
    uint64_t v35 = *(void **)(v33 + v34);
    uint64_t v36 = swift_allocObject();
    v0[73] = v36;
    *(void *)(v36 + 16) = v33;
    *(void *)(v36 + 24) = v28;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
    *(void *)(v37 + 24) = v36;
    v0[6] = thunk for @callee_guaranteed () -> ()partial apply;
    v0[7] = v37;
    v0[2] = MEMORY[0x1E4F143A8];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed () -> ();
    v0[5] = &block_descriptor_29;
    uint64_t v38 = _Block_copy(v0 + 2);
    uint64_t v39 = v35;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v39, v38);

    _Block_release(v38);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    BOOL v41 = swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      uint64_t v49 = v0[45];
      uint64_t v50 = v0[39];
      uint64_t v51 = swift_task_alloc();
      v0[74] = v51;
      *(void *)(v51 + 16) = v50;
      *(void *)(v51 + 24) = v49;
      uint64_t v52 = (void *)swift_task_alloc();
      v0[75] = v52;
      char *v52 = v0;
      v52[1] = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
      unint64_t v48 = v0[42];
      BOOL v41 = v0[43];
      uint64_t v45 = 0x80000001B115D9F0;
      uint64_t v46 = partial apply for closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:);
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0xD000000000000018;
      uint64_t v47 = v51;
    }
    return MEMORY[0x1F4188160](v41, v42, v43, v44, v45, v46, v47, v48);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 608) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 344);
    swift_task_dealloc();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v4, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    unint64_t v3 = PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[66];
  uint64_t v2 = v0[65];
  unint64_t v3 = v0[64];
  uint64_t v4 = v0[62];
  uint64_t v5 = v0[60];
  BOOL v6 = v0[58];
  uint64_t v7 = v0[45];
  swift_release();
  swift_release();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v6, type metadata accessor for Attachment.MMCSMetadata);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v5, type metadata accessor for UploadToken);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v4, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[66];
  uint64_t v2 = v0[65];
  unint64_t v3 = v0[64];
  uint64_t v4 = v0[62];
  swift_release();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v4, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];
  void *v36;
  uint64_t v37;

  uint64_t v36 = v0;
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  unint64_t v3 = v0[39];
  swift_task_dealloc();
  uint64_t v4 = *(void **)(v3 + v1);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v2;
  BOOL v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:);
  *(void *)(v6 + 24) = v5;
  v0[12] = thunk for @callee_guaranteed () -> ()partial apply;
  v0[13] = v6;
  v0[8] = MEMORY[0x1E4F143A8];
  v0[9] = 1107296256;
  v0[10] = thunk for @escaping @callee_guaranteed () -> ();
  v0[11] = &block_descriptor_40;
  uint64_t v7 = _Block_copy(v0 + 8);
  swift_retain();
  swift_retain();
  uint64_t v8 = v4;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v7);

  _Block_release(v7);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8)
  {
    __break(1u);
  }
  else if (one-time initialization token for attachmentLedgerTopic == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v9 = (void *)v0[76];
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain();
  swift_retain();
  uint64_t v11 = v9;
  swift_retain();
  swift_retain();
  uint64_t v12 = v9;
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.error.getter();
  os_log_type_t v15 = os_log_type_enabled(v13, v14);
  BOOL v16 = (void *)v0[76];
  if (v15)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v35[0] = v34;
    *(_DWORD *)uint64_t v17 = 136315650;
    uint64_t v18 = PluginAttachmentLedgerTopic.description.getter();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v17 + 12) = 2080;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v17 + 22) = 2080;
    v0[26] = v16;
    unint64_t v22 = v16;
    uint64_t v23 = String.init<A>(reflecting:)();
    v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v13, v14, "%s Failed to upload attachment %s, reason: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v34, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
  }
  uint64_t v33 = v0[66];
  unint64_t v25 = v0[65];
  uint64_t v26 = v0[64];
  uint64_t v27 = v0[62];
  unint64_t v28 = v0[60];
  uint64_t v29 = v0[58];
  unint64_t v30 = v0[45];
  swift_willThrow();
  swift_release();
  swift_release();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v29, type metadata accessor for Attachment.MMCSMetadata);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v28, type metadata accessor for UploadToken);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t (*)(void))type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v33, v26);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

uint64_t closure #1 in Attachment.Metadata.sealedMetadata(with:)(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, unint64_t))
{
  if (a3 >> 60 != 15)
  {
    uint64_t v7 = (uint64_t *)(result + *(int *)(type metadata accessor for AttachmentLedgerMetadata_AttachmentMetadata() + 20));
    uint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    a4(a2, a3);
    uint64_t result = outlined consume of Data?(v8, v9);
    *uint64_t v7 = a2;
    v7[1] = a3;
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  uint64_t result = static Message.with(_:)();
  if (!v3)
  {
    uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v9, 0, 1, updated);
    return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v9, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  return result;
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v10;
  a1[1] = v9;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t result = static Message.with(_:)();
  if (!v2)
  {
    uint64_t v12 = (uint64_t)a1
        + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0) + 24);
    outlined destroy of UUID?(v12, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v8, v12, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v5);
  }
  return result;
}

uint64_t closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v4 = *(uint64_t (**)(unsigned char *))(*(void *)a1 + 600);
  swift_retain();
  uint64_t v5 = (uint64_t (*)(unsigned char *, void))v4(v11);
  uint64_t v7 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v3, isUniquelyReferenced_nonNull_native);
  *uint64_t v7 = v10;
  swift_bridgeObjectRelease();
  return v5(v11, 0);
}

uint64_t closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v3 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 600))(v5);
  specialized Dictionary._Variant.removeValue(forKey:)(v2);
  swift_release();
  return v3(v5, 0);
}

uint64_t PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  *(void *)(v3 + 40) = swift_task_alloc();
  *(void *)(v3 + 48) = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  *(void *)(v3 + 56) = swift_task_alloc();
  *(void *)(v3 + 64) = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  *(_OWORD *)(v3 + 88) = *(_OWORD *)a2;
  *(void *)(v3 + 104) = *(void *)(a2 + 16);
  return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.updateStatus(id:status:), 0, 0);
}

uint64_t PluginAttachmentLedgerTopic.updateStatus(id:status:)()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v5 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v6 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  uint64_t v7 = (void *)swift_task_alloc();
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v3;
  v7[5] = v2;
  v7[6] = v1;
  id v8 = v6;
  OS_dispatch_queue.sync<A>(execute:)();

  swift_task_dealloc();
  uint64_t v9 = v0[9];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[3];
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v0[10], v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  *(void *)(swift_task_alloc() + 16) = v9;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  static Message.with(_:)();
  swift_task_dealloc();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  uint64_t v12 = swift_task_alloc();
  v0[14] = v12;
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v10;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[15] = v13;
  *uint64_t v13 = v0;
  v13[1] = PluginAttachmentLedgerTopic.updateStatus(id:status:);
  uint64_t v15 = v0[6];
  uint64_t v14 = v0[7];
  return MEMORY[0x1F4188160](v14, 0, 0, 0xD000000000000018, 0x80000001B115D9F0, closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)partial apply, v12, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = PluginAttachmentLedgerTopic.updateStatus(id:status:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 56);
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v5, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v4, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    uint64_t v3 = PluginAttachmentLedgerTopic.updateStatus(id:status:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 40);
  swift_task_dealloc();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v99 = a4;
  uint64_t v97 = a3;
  uint64_t v92 = a6;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  MEMORY[0x1F4188790](v89);
  uint64_t v90 = (uint64_t *)((char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v103 = type metadata accessor for UUID();
  uint64_t v10 = *(void **)(v103 - 8);
  uint64_t v11 = v10[8];
  uint64_t v12 = MEMORY[0x1F4188790](v103);
  uint64_t v93 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v94 = (char *)&v88 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v88 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v88 - v19;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 584))(v18);
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v102 = a2;
  if (v22 && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v24 & 1) != 0))
  {
    unint64_t v25 = *(NSObject **)(*(void *)(v21 + 56) + 8 * v23);
    swift_retain();
  }
  else
  {
    unint64_t v25 = 0;
  }
  swift_bridgeObjectRelease();
  v96 = (uint64_t (*)(char *, uint64_t, uint64_t))v10[2];
  uint64_t v26 = v96(v20, v102, v103);
  v95 = v10;
  if (v25)
  {
    os_log_t v101 = v25;
    uint64_t v27 = (void (*)(char *, uint64_t))v10[1];
    v27(v20, v103);
    goto LABEL_9;
  }
  unint64_t v98 = a5;
  unint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(v26);
  MEMORY[0x1F4188790](v28);
  *(&v88 - 2) = (uint64_t)v20;
  uint64_t v29 = v100;
  unint64_t v30 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), (uint64_t)(&v88 - 4), v28);
  v100 = v29;
  swift_bridgeObjectRelease();
  uint64_t v27 = (void (*)(char *, uint64_t))v10[1];
  v27(v20, v103);
  os_log_t v101 = v30;
  if (v30)
  {
    a5 = v98;
LABEL_9:
    if (a5 >> 60 == 15)
    {
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      *unint64_t v31 = 1;
      swift_willThrow();
      return swift_release();
    }
    else
    {
      unint64_t v91 = (void (*)(uint64_t, uint64_t))v27;
      unint64_t v98 = a5;
      uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
      MEMORY[0x1F4188790](updated);
      os_log_t v34 = v101;
      if (a5 >> 60 == 11)
      {
        *(&v88 - 2) = a1;
        *(&v88 - 1) = (uint64_t)v34;
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
        uint64_t v35 = v100;
        uint64_t v36 = static Message.with(_:)();
        uint64_t v37 = v35;
      }
      else
      {
        *(&v88 - 6) = a1;
        *(&v88 - 5) = (uint64_t)v34;
        uint64_t v39 = v97;
        unint64_t v38 = v98;
        uint64_t v40 = v99;
        *(&v88 - 4) = v97;
        *(&v88 - 3) = v40;
        *(&v88 - 2) = v38;
        outlined copy of Data._Representation(v40, v38);
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
        BOOL v41 = v100;
        static Message.with(_:)();
        uint64_t v37 = v41;
        uint64_t v36 = outlined consume of Attachment.MMCSMetadata.UploadStatus(v39, v40, v38);
      }
      uint64_t v42 = v93;
      uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 608))(v36);
      if (*(void *)(v43 + 16) && (unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v102), (v45 & 1) != 0))
      {
        uint64_t v46 = *(void (**)(uint64_t))(*(void *)(v43 + 56) + 16 * v44);
        swift_retain();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
        uint64_t v47 = swift_allocError();
        *unint64_t v48 = 5;
        uint64_t v49 = (uint64_t)v90;
        *uint64_t v90 = v47;
        swift_storeEnumTagMultiPayload();
        v46(v49);
        if (v37)
        {
          swift_release();

          outlined destroy of UUID?(v49, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
          v100 = 0;
        }
        else
        {
          v100 = 0;
          outlined destroy of UUID?(v49, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
          swift_release();
        }
      }
      else
      {
        v100 = v37;
        swift_bridgeObjectRelease();
      }
      uint64_t v50 = (uint64_t)v94;
      uint64_t v51 = v102;
      uint64_t v52 = v103;
      uint64_t v53 = (void (*)(char *, uint64_t, uint64_t))v96;
      v96(v94, v102, v103);
      uint64_t v54 = swift_allocObject();
      swift_weakInit();
      v53(v42, v51, v52);
      uint64_t v55 = v95;
      unint64_t v56 = (*((unsigned __int8 *)v95 + 80) + 24) & ~(unint64_t)*((unsigned __int8 *)v95 + 80);
      unint64_t v57 = (v11 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v54;
      ((void (*)(unint64_t, char *, uint64_t))v55[4])(v58 + v56, v42, v52);
      uint64_t v59 = (void *)(v58 + v57);
      uint64_t v60 = v97;
      unint64_t v61 = v98;
      uint64_t v62 = v99;
      void *v59 = v97;
      v59[1] = v62;
      v59[2] = v61;
      uint64_t v63 = *(uint64_t (**)(void *))(*(void *)a1 + 624);
      outlined copy of Attachment.MMCSMetadata.UploadStatus(v60, v62, v61);
      swift_retain();
      os_log_type_t v64 = (void (*)(void *, void))v63(v104);
      uint64_t v66 = v65;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v105 = *v66;
      *uint64_t v66 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), v58, v50, isUniquelyReferenced_nonNull_native);
      *uint64_t v66 = v105;
      swift_bridgeObjectRelease();
      v91(v50, v52);
      v64(v104, 0);
      swift_release();
      return swift_release();
    }
  }
  unint64_t v91 = (void (*)(uint64_t, uint64_t))v27;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v68 = type metadata accessor for Logger();
  __swift_project_value_buffer(v68, (uint64_t)static Log.attachmentLedgerTopic);
  v96(v17, v102, v103);
  swift_retain();
  uint64_t v69 = v97;
  unint64_t v70 = v98;
  uint64_t v71 = v99;
  outlined copy of Attachment.MMCSMetadata.UploadStatus(v97, v99, v98);
  swift_retain();
  outlined copy of Attachment.MMCSMetadata.UploadStatus(v69, v71, v70);
  uint64_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.error.getter();
  int v74 = v73;
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v75 = v69;
    uint64_t v76 = swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    uint64_t v105 = v102;
    *(_DWORD *)uint64_t v76 = 136315650;
    os_log_t v101 = v72;
    uint64_t v77 = PluginAttachmentLedgerTopic.description.getter();
    v104[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v105);
    LODWORD(v100) = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 12) = 2080;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v79 = v103;
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
    v104[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v91((uint64_t)v17, v79);
    *(_WORD *)(v76 + 22) = 2080;
    uint64_t v82 = v99;
    v104[0] = v75;
    v104[1] = v99;
    v104[2] = v70;
    outlined copy of Attachment.MMCSMetadata.UploadStatus(v75, v99, v70);
    uint64_t v83 = String.init<A>(reflecting:)();
    v104[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v75, v82, v70);
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v75, v82, v70);
    os_log_t v85 = v101;
    _os_log_impl(&dword_1B0DF7000, v101, (os_log_type_t)v100, "%s Couldn't find attachment %s when trying to update its status to %s", (uint8_t *)v76, 0x20u);
    uint64_t v86 = v102;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v86, -1, -1);
    MEMORY[0x1B3EA39E0](v76, -1, -1);
  }
  else
  {
    swift_release_n();
    v91((uint64_t)v17, v103);
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v69, v71, v70);
    outlined consume of Attachment.MMCSMetadata.UploadStatus(v69, v71, v70);
  }
  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
  swift_allocError();
  *uint64_t v87 = 4;
  return swift_willThrow();
}

uint64_t closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v12 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v15;
  a1[1] = v16;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = v20;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  static Message.with(_:)();
  uint64_t v17 = (uint64_t)a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0) + 24);
  outlined destroy of UUID?(v17, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v14, v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, updated);
}

uint64_t closure #1 in closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = UUID.uuid.getter();
  char v23 = v8;
  char v24 = v9;
  char v25 = v10;
  char v26 = v11;
  char v27 = v12;
  char v28 = v13;
  char v29 = v14;
  char v30 = v15;
  uint64_t v16 = specialized Data.init<A>(_:)((uint64_t)&v22, (uint64_t)&v31);
  uint64_t v18 = v17;
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v19 = *(void *)(a1 + 32);
  unint64_t v20 = *(void *)(a1 + 40);
  outlined copy of Data._Representation(a4, a5);
  uint64_t result = outlined consume of Data._Representation(v19, v20);
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  return result;
}

uint64_t closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(void *a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v5 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v9;
  a1[1] = v8;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  static Message.with(_:)();
  uint64_t v10 = (uint64_t)a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0) + 24);
  outlined destroy of UUID?(v10, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v7, v10, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, updated);
}

uint64_t closure #1 in closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = UUID.uuid.getter();
  char v15 = v2;
  char v16 = v3;
  char v17 = v4;
  char v18 = v5;
  char v19 = v6;
  char v20 = v7;
  char v21 = v8;
  char v22 = v9;
  uint64_t v10 = specialized Data.init<A>(_:)((uint64_t)&v14, (uint64_t)&v23);
  uint64_t v12 = v11;
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = 3;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v97 = a6;
  uint64_t v98 = a3;
  uint64_t v90 = a4;
  uint64_t v91 = a5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v95 = *(void *)(v7 - 8);
  uint64_t v96 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v94 = (char *)v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void **)((char *)v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v89 - v13;
  uint64_t v92 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  uint64_t v15 = MEMORY[0x1F4188790](v92);
  uint64_t v93 = (uint64_t)v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v19 = (char *)v89 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v99 = (uint64_t)v89 - v20;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  char v24 = (void *)((char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  v100 = (void *)Strong;
  char v26 = *(void **)(Strong + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *char v24 = v26;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x1E4FBCBF0], v21);
  id v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  char v29 = *(void (**)(void *, uint64_t))(v22 + 8);
  uint64_t v28 = v22 + 8;
  v29(v24, v21);
  if ((v26 & 1) == 0)
  {
    __break(1u);
LABEL_51:
    swift_once();
LABEL_10:
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v42 = __swift_project_value_buffer(v41, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of Attachment.MMCSMetadata(v28, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    v89[1] = v42;
    if (v45)
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315138;
      uint64_t v105 = v47;
      char v48 = v19[24];
      uint64_t v102 = *((void *)v19 + 2);
      LOBYTE(v103) = v48;
      uint64_t v49 = String.init<A>(reflecting:)();
      uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v105);
      uint64_t v28 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      _os_log_impl(&dword_1B0DF7000, v43, v44, "Received message ACK. Updating status to %s", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v47, -1, -1);
      MEMORY[0x1B3EA39E0](v46, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    }

    uint64_t v51 = v98;
    uint64_t v52 = (uint64_t (**)(void))(*v100 + 632);
    uint64_t v53 = *v52;
    unint64_t v54 = (*v52)();
    MEMORY[0x1F4188790](v54);
    v89[-2] = v51;
    unint64_t v55 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), (uint64_t)&v89[-4], v54);
    uint64_t v57 = v56;
    uint64_t v58 = swift_bridgeObjectRelease();
    if (v57)
    {
      uint64_t v62 = v94;
      uint64_t v61 = v95;
      uint64_t v63 = v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v94, v51, v96);
      os_log_type_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = v62;
        uint64_t v68 = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 136315138;
        os_log_t v101 = v66 + 4;
        uint64_t v102 = v68;
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v67, v63);
        _os_log_impl(&dword_1B0DF7000, v64, v65, "Can't find attachment with id: %s", v66, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v68, -1, -1);
        uint64_t v71 = v66;
        uint64_t v28 = v99;
        MEMORY[0x1B3EA39E0](v71, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
      }

      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      char v74 = 4;
      goto LABEL_30;
    }
    uint64_t v59 = *(void *)(v28 + 16);
    unint64_t v60 = v97;
    if (*(unsigned char *)(v28 + 24) == 1 && v59 == 1)
    {
      if (v97 >> 60 == 15) {
        goto LABEL_31;
      }
      goto LABEL_35;
    }
    unint64_t v72 = v97 & 0xF000000000000000;
    if (v97 >> 60 == 15)
    {
      if (v59 == 1)
      {
LABEL_25:
        if (*(unsigned char *)(v28 + 24))
        {
          switch(v59)
          {
            case 0:
              break;
            case 1:
              goto LABEL_31;
            case 2:
              if (v97 >> 60 == 15 || v72 == 0xB000000000000000) {
                goto LABEL_31;
              }
              uint64_t v57 = *(void *)(v28 + 32);
              uint64_t v82 = v91;
              outlined copy of Data._Representation(v91, v97);
              uint64_t v83 = outlined copy of Data._Representation(v82, v60);
              uint64_t v84 = ((uint64_t (*)(uint64_t))v53)(v83);
              uint64_t v85 = v84;
              if ((v84 & 0xC000000000000001) != 0) {
                goto LABEL_55;
              }
              if ((v55 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v55 < *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                swift_retain();
LABEL_44:
                swift_bridgeObjectRelease();
                uint64_t v102 = v57;
                uint64_t v86 = v91;
                uint64_t v103 = v91;
                unint64_t v104 = v60;
                Attachment.update(_:)();
                swift_release();
                swift_release();
                uint64_t v87 = v90;
                outlined consume of Attachment.MMCSMetadata.UploadStatus(v90, v86, v60);
                outlined consume of Attachment.MMCSMetadata.UploadStatus(v87, v86, v60);
                goto LABEL_32;
              }
              __break(1u);
              JUMPOUT(0x1B0EA2324);
            case 3:
              uint64_t v88 = ((uint64_t (*)(uint64_t))v53)(v58);
              uint64_t v85 = v88;
              if ((v88 & 0xC000000000000001) == 0)
              {
                if ((v55 & 0x8000000000000000) != 0)
                {
                  __break(1u);
                }
                else if (v55 < *(void *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  swift_retain();
LABEL_49:
                  swift_bridgeObjectRelease();
                  uint64_t v102 = 0;
                  uint64_t v103 = 0;
                  unint64_t v104 = 0xB000000000000000;
                  Attachment.update(_:)();
                  swift_release();
                  goto LABEL_31;
                }
                __break(1u);
LABEL_55:
                MEMORY[0x1B3EA25C0](v55, v85);
                goto LABEL_44;
              }
              MEMORY[0x1B3EA25C0](v55, v88);
              goto LABEL_49;
            default:
              JUMPOUT(0);
          }
        }
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
        swift_allocError();
        char v74 = 1;
LABEL_30:
        *os_log_type_t v73 = v74;
        swift_willThrow();
        goto LABEL_31;
      }
    }
    else if (v72 == 0xB000000000000000 || v59 == 2)
    {
      goto LABEL_25;
    }
LABEL_35:
    uint64_t v75 = v93;
    outlined init with copy of Attachment.MMCSMetadata(v28, v93, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v76, v77))
    {
      swift_release();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v75, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);

      goto LABEL_32;
    }
    unint64_t v78 = (uint8_t *)swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    *(_DWORD *)unint64_t v78 = 136315138;
    os_log_t v101 = v78 + 4;
    uint64_t v102 = v79;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    uint64_t v80 = Message.debugDescription.getter();
    uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v75, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    _os_log_impl(&dword_1B0DF7000, v76, v77, "Dropping ack response %s", v78, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v79, -1, -1);
    MEMORY[0x1B3EA39E0](v78, -1, -1);

LABEL_31:
    swift_release();
LABEL_32:
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v28, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    return;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v14, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v28 = v99;
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v14, v99, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v30 = *v12;
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.attachmentLedgerTopic);
    id v32 = v30;
    id v33 = v30;
    os_log_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v102 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v105 = (uint64_t)v30;
      id v38 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v39 = String.init<A>(reflecting:)();
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v34, v35, "ACK message wasn't received for reason: %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v37, -1, -1);
      MEMORY[0x1B3EA39E0](v36, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
    swift_release();
  }
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = MEMORY[0x1B3EA25C0](v7, a3);
      }
      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7 + 32);
        swift_retain();
      }
      uint64_t v12 = v8;
      char v9 = a1(&v12);
      swift_release();
      if (v3 || (v9 & 1) != 0) {
        break;
      }
      uint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        ++v7;
        if (v10 == v6) {
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1, uint64_t a2)
{
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with copy of Attachment.MMCSMetadata(a2, a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(a1, 0, 1, updated);
}

uint64_t PluginAttachmentLedgerTopic.remove(id:)(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v2[10] = swift_task_alloc();
  v2[11] = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  v2[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.remove(id:), 0, 0);
}

uint64_t PluginAttachmentLedgerTopic.remove(id:)()
{
  uint64_t v44 = v0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v0 + 40) + 288))(&v37);
  uint64_t v1 = v37;
  uint64_t v2 = v40;
  unint64_t v3 = v42;
  if ((v42 & 0x8000000000000000) == 0
    || ((uint64_t v4 = v39 | v38, v5 = v41 | v43, v42 == 0x8000000000000000)
      ? (BOOL v6 = (v39 | v38 | v37 | v40 | v41 | v43) == 0)
      : (BOOL v6 = 0),
        v6))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v37, v38, v39, v40, v41, v42);
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v37, v38, v39, v40, v41, v42);
    if (v3 == 0x8000000000000000 && v1 == 1 && !(v4 | v2 | v5))
    {
      uint64_t v7 = *(void *)(v0 + 96);
      uint64_t v8 = *(void *)(v0 + 32);
      uint64_t v9 = *(void *)(v0 + 40);
      uint64_t v10 = swift_task_alloc();
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = v8;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
      static Message.with(_:)();
      swift_task_dealloc();
      uint64_t v11 = swift_task_alloc();
      *(void *)(v0 + 104) = v11;
      *(void *)(v11 + 16) = v9;
      *(void *)(v11 + 24) = v7;
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v12;
      *uint64_t v12 = v0;
      v12[1] = PluginAttachmentLedgerTopic.remove(id:);
      uint64_t v14 = *(void *)(v0 + 72);
      uint64_t v13 = *(void *)(v0 + 80);
      return MEMORY[0x1F4188160](v13, 0, 0, 0xD000000000000018, 0x80000001B115D9F0, closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)partial apply, v11, v14);
    }
  }
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 32);
  uint64_t v17 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 48);
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void *)(v0 + 56);
  uint64_t v24 = *(void *)(v0 + 64);
  uint64_t v25 = *(void *)(v0 + 48);
  if (v22)
  {
    os_log_type_t type = v21;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v37 = v35;
    *(_DWORD *)uint64_t v26 = 136315394;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
    *(_WORD *)(v26 + 12) = 2080;
    swift_retain();
    uint64_t v29 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v31 = v30;
    swift_release();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v20, type, "Dropping request to remove attachment %s because state of PluginAttachmentLedgerTopic is invalid %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v23 + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
    swift_release_n();
  }

  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
  swift_allocError();
  *id v32 = 3;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v33 = *(uint64_t (**)(void))(v0 + 8);
  return v33();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = PluginAttachmentLedgerTopic.remove(id:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 80);
    swift_task_dealloc();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v4, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    unint64_t v3 = PluginAttachmentLedgerTopic.remove(id:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(*(void *)(v0 + 96), type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_dealloc();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.remove(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  static Message.with(_:)();
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v8, 0, 1, updated);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.remove(id:)(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 112);
  uint64_t v3 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  uint64_t v17 = UUID.uuid.getter();
  char v18 = v5;
  char v19 = v6;
  char v20 = v7;
  char v21 = v8;
  char v22 = v9;
  char v23 = v10;
  char v24 = v11;
  char v25 = v12;
  uint64_t v13 = specialized Data.init<A>(_:)((uint64_t)&v17, (uint64_t)&v26);
  uint64_t v15 = v14;
  uint64_t result = outlined consume of Data._Representation(a1[2], a1[3]);
  a1[2] = v13;
  a1[3] = v15;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.setupSubscribeStream()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v1 - 8);
  char v48 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>);
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v49 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v42 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v44 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v6 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  char v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>>);
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v43 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue;
  uint64_t v16 = v0;
  uint64_t v17 = *(void **)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v14 = v17;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v17)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>);
    swift_allocObject();
    uint64_t v20 = PassthroughSubject.init()();
    PluginAttachmentLedgerTopic.subscribeStreamInput.willset(v20);
    uint64_t v21 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput;
    *(void *)((char *)v16 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamInput) = v20;
    swift_release();
    uint64_t v54 = *(void *)((char *)v16 + v21);
    uint64_t v22 = *MEMORY[0x1E4F1A900];
    char v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
    uint64_t v41 = v15;
    v23(v8, v22, v52);
    uint64_t v24 = v42;
    char v25 = v44;
    uint64_t v26 = v47;
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v44, *MEMORY[0x1E4F1A918], v47);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<AttachmentLedger_SubscribeRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>);
    swift_retain();
    uint64_t v27 = v43;
    Publisher.buffer(size:prefetch:whenFull:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v52);
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<AttachmentLedger_SubscribeRequest, Never>>);
    uint64_t v28 = v46;
    uint64_t v29 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v28);
    uint64_t v30 = v16[24];
    uint64_t v31 = v16[25];
    id v32 = v16;
    __swift_project_boxed_opaque_existential_1(v16 + 21, v30);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v29, v30, v31);
    id v53 = *(id *)((char *)v16 + v41);
    id v34 = v53;
    uint64_t v54 = v33;
    uint64_t v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v36 = (uint64_t)v48;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v48, 1, 1, v35);
    id v37 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>);
    type metadata accessor for OS_dispatch_queue();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>);
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
    uint64_t v38 = v49;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v36, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    swift_allocObject();
    swift_weakInit();
    swift_allocObject();
    swift_weakInit();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<AttachmentLedger_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>);
    uint64_t v39 = v51;
    uint64_t v40 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v39);
    *(void *)((char *)v32
              + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_subscribeStreamResponseCancellable) = v40;
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(a1);
    return swift_release();
  }
  return result;
}

uint64_t PluginAttachmentLedgerTopic.handleSubscribeStreamClosed(completedWith:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v47 = (uint64_t)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v43 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v45 = (uint64_t)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v46 = (uint64_t)v43 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v43 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (void *)((char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E4FBCBF0], v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if (v21)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v48 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  swift_retain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v50[0] = v44;
    *(_DWORD *)uint64_t v26 = 136315394;
    uint64_t v27 = PluginAttachmentLedgerTopic.description.getter();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v50);
    v43[1] = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v16, (uint64_t)v8, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    uint64_t v29 = v47;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, v47, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v29, 1, v9) == 1)
    {
      unint64_t v30 = 0xE300000000000000;
      uint64_t v31 = 7104878;
    }
    else
    {
      uint64_t v32 = v29;
      uint64_t v33 = v46;
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v32, v46, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, v45, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
      uint64_t v31 = String.init<A>(reflecting:)();
      unint64_t v30 = v34;
      outlined destroy of UUID?(v33, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    }
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>?);
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    _os_log_impl(&dword_1B0DF7000, v24, v25, "%s Subscribe stream closed for reason: %s", (uint8_t *)v26, 0x16u);
    uint64_t v35 = v44;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v35, -1, -1);
    MEMORY[0x1B3EA39E0](v26, -1, -1);
  }
  else
  {
    swift_release_n();
    outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  }

  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 288))(v50);
  unint64_t v36 = v51;
  uint64_t result = outlined consume of PluginAttachmentLedgerTopic.State(v50[0], v50[1], v50[2], v50[3], v50[4], v51);
  if (v36 >> 62 != 1)
  {
    uint64_t v38 = Subscribers.Completion<>.pluginShutdownReason.getter((char *)&v49);
    uint64_t v39 = v49;
    uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 584))(v38);
    uint64_t v41 = specialized _copyCollectionToContiguousArray<A>(_:)(v40);
    uint64_t v42 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v2 + 392))(v50, v42);
    unint64_t v51 = v39 | 0x4000000000000000;
    uint64_t v52 = v41;
    return (*(uint64_t (**)(uint64_t *))(*(void *)v2 + 352))(v50);
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()(NSObject *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v54 = *(void *)(v2 - 8);
  uint64_t v55 = v2;
  MEMORY[0x1F4188790](v2);
  v52[5] = (char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  v52[4] = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  v52[3] = (char *)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for DispatchTime();
  v52[2] = *(void *)(v57 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v57);
  v52[1] = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v56 = (char *)v52 - v7;
  uint64_t v59 = type metadata accessor for AttachmentLedger_SubscribeResponse(0);
  MEMORY[0x1F4188790](v59);
  uint64_t v61 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  uint64_t v9 = MEMORY[0x1F4188790](v58);
  uint64_t v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v52 - v12;
  uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v62 = (char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  os_log_type_t v25 = (char *)v52 - v24;
  os_log_t v60 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    return outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v18, (uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    uint64_t v31 = (uint64_t)v25;
    return outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v28 = Strong;
  outlined init with copy of Attachment.MMCSMetadata((uint64_t)v25, (uint64_t)v23, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v23, (uint64_t)v13, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
      PluginAttachmentLedgerTopic.processAttachmentUpdate(_:)((uint64_t)v13);
      uint64_t v32 = OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo;
      unint64_t v33 = *(void *)(v28 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo);
      if (!v33)
      {
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
        uint64_t v34 = v58;
LABEL_22:
        uint64_t v51 = *(void *)&v13[*(int *)(v34 + 20)];
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v13, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
        *(void *)(v28 + v32) = v51;
        return swift_release();
      }
      uint64_t v34 = v58;
      unint64_t v35 = *(void *)&v13[*(int *)(v58 + 20)];
      BOOL v36 = v35 >= v33;
      unint64_t v37 = v35 - v33;
      if (v36)
      {
        if (v37 == 1) {
          goto LABEL_20;
        }
        if (one-time initialization token for attachmentLedgerTopic == -1)
        {
LABEL_14:
          uint64_t v38 = type metadata accessor for Logger();
          __swift_project_value_buffer(v38, (uint64_t)static Log.attachmentLedgerTopic);
          outlined init with copy of Attachment.MMCSMetadata((uint64_t)v13, (uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
          swift_retain_n();
          uint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.default.getter();
          int v41 = v40;
          if (os_log_type_enabled(v39, v40))
          {
            uint64_t v42 = swift_slowAlloc();
            uint64_t v61 = (char *)swift_slowAlloc();
            long long aBlock = v61;
            *(_DWORD *)uint64_t v42 = 136315394;
            os_log_t v60 = v39;
            swift_retain();
            LODWORD(v59) = v41;
            uint64_t v43 = PluginAttachmentLedgerTopic.description.getter();
            uint64_t v62 = v25;
            unint64_t v45 = v44;
            swift_release();
            uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_release_n();
            *(_WORD *)(v42 + 12) = 2080;
            lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
            uint64_t v46 = Message.debugDescription.getter();
            uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
            os_log_t v48 = v60;
            _os_log_impl(&dword_1B0DF7000, v60, (os_log_type_t)v59, "Detected an out of order sequence number for topic %s on attachment update %s", (uint8_t *)v42, 0x16u);
            uint64_t v49 = v61;
            swift_arrayDestroy();
            MEMORY[0x1B3EA39E0](v49, -1, -1);
            MEMORY[0x1B3EA39E0](v42, -1, -1);

            uint64_t v50 = (uint64_t)v62;
LABEL_21:
            outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v50, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
            goto LABEL_22;
          }

          outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
          swift_release_n();
LABEL_20:
          uint64_t v50 = (uint64_t)v25;
          goto LABEL_21;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once();
      goto LABEL_14;
    }
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    swift_release();
    uint64_t v31 = (uint64_t)v23;
    return outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v30 = (uint64_t)v62;
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v23, (uint64_t)v62, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  PluginAttachmentLedgerTopic.processInitializeAck(_:)(v30);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v25, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  *(void *)(v28 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_currentKnownSeqNo) = 0;
  return swift_release();
}

void PluginAttachmentLedgerTopic.processInitializeAck(_:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v71 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v66 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v7 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  os_log_type_t v65 = (uint64_t *)((char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  uint64_t v9 = MEMORY[0x1F4188790](v69);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v67 = (uint64_t *)((char *)&v62 - v13);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v62 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char **)((char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCBF0], v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if (v20)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v24 = v71;
  outlined init with copy of Attachment.MMCSMetadata(v71, (uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  swift_retain_n();
  uint64_t v70 = v23;
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v63 = v7;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v62 = v11;
    uint64_t v29 = v28;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v68 = v2;
    uint64_t v31 = v30;
    uint64_t v73 = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    uint64_t v32 = Message.debugDescription.getter();
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    *(_WORD *)(v29 + 12) = 2080;
    swift_retain();
    uint64_t v34 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v36 = v35;
    swift_release();
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v73);
    uint64_t v24 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v25, v26, "[Subscribe] Received InitializeAck response=%s, %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    uint64_t v37 = v31;
    uint64_t v3 = v68;
    MEMORY[0x1B3EA39E0](v37, -1, -1);
    uint64_t v38 = v29;
    uint64_t v11 = v62;
    MEMORY[0x1B3EA39E0](v38, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_release_n();
  }

  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 344))(&v73);
  if (v78 >> 62)
  {
    if (v78 >> 62 != 2 || v78 != 0x8000000000000000 || v74 | v73 | v75 | v76 | v77 | v79)
    {
      outlined consume of PluginAttachmentLedgerTopic.State(v73, v74, v75, v76, v77, v78);
      swift_retain_n();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        int v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        uint64_t v80 = v42;
        uint64_t v68 = v3;
        *(_DWORD *)int v41 = 136315138;
        swift_retain();
        uint64_t v43 = PluginAttachmentLedgerTopic.description.getter();
        unint64_t v45 = v44;
        swift_release();
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B0DF7000, v39, v40, "[Subscribe] Ignoring InitializeAck because of invalid state=%s", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v42, -1, -1);
        MEMORY[0x1B3EA39E0](v41, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      return;
    }
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v73, v74, v75, v76, v77, v78);
  }
  if (*(unsigned char *)(v24 + 8) == 1)
  {
    switch(*(void *)v24)
    {
      case 1:
        PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)((void *)v24);
        break;
      case 4:
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
        swift_allocError();
        unsigned char *v61 = 0;
        goto LABEL_25;
      case 5:
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
        swift_allocError();
        char v60 = 1;
        goto LABEL_24;
      case 8:
        PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(v24);
        break;
      default:
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    uint64_t v46 = v67;
    outlined init with copy of Attachment.MMCSMetadata(v24, (uint64_t)v67, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    outlined init with copy of Attachment.MMCSMetadata(v24, (uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_retain_n();
    unint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      uint64_t v73 = v71;
      *(_DWORD *)uint64_t v49 = 134218498;
      uint64_t v50 = *v46;
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v46, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      uint64_t v80 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v49 + 12) = 2080;
      uint64_t v51 = v66;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v11[*(int *)(v69 + 36)], v66, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v51, 1, v64) == 1)
      {
        uint64_t v52 = v65;
        uint64_t *v65 = 0;
        v52[1] = 0xE000000000000000;
        v52[2] = 0;
        v52[3] = 0;
        UnknownStorage.init()();
        outlined destroy of UUID?(v51, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      }
      else
      {
        uint64_t v52 = v65;
        outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v51, (uint64_t)v65, type metadata accessor for AttachmentLedger_ErrorResponse);
      }
      uint64_t v53 = *v52;
      unint64_t v54 = v52[1];
      swift_bridgeObjectRetain();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v52, type metadata accessor for AttachmentLedger_ErrorResponse);
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      *(_WORD *)(v49 + 22) = 2080;
      swift_retain();
      uint64_t v55 = PluginAttachmentLedgerTopic.description.getter();
      unint64_t v57 = v56;
      swift_release();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v47, v48, "[Subscribe] InitializeAck failed, unexpected response-status, code=%ld error=%s, %s", (uint8_t *)v49, 0x20u);
      uint64_t v58 = v71;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v58, -1, -1);
      MEMORY[0x1B3EA39E0](v49, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v46, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
    swift_allocError();
    char v60 = 2;
LABEL_24:
    char *v59 = v60;
LABEL_25:
    swift_willThrow();
  }
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    PluginAttachmentLedgerTopic.sendSubscribeRequest()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PluginAttachmentLedgerTopic.sendSubscribeRequest()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v33 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (void *)((char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
    static Message.with(_:)();
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of Attachment.MMCSMetadata((uint64_t)v7, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest);
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      BOOL v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v33[2] = v1;
      uint64_t v29 = v28;
      v35[0] = v28;
      *(_DWORD *)BOOL v27 = 136315138;
      v33[1] = v27 + 4;
      uint64_t v30 = Message.debugDescription.getter();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest);
      _os_log_impl(&dword_1B0DF7000, v25, v26, "[Subscribe] Sending Initialize requeset=%s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v29, -1, -1);
      MEMORY[0x1B3EA39E0](v27, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest);
    }

    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest);
  }
  else
  {
    __break(1u);
    swift_once();
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v15 = v11;
    uint64_t v16 = v11;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v34 = (uint64_t)v11;
      v35[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      id v21 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v22 = String.init<A>(reflecting:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B0DF7000, v17, v18, "[Subscribe] Failed to create subscribeRequest, reason: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v20, -1, -1);
      MEMORY[0x1B3EA39E0](v19, -1, -1);
    }
    else
    {
    }
    uint64_t v32 = v11;
    PluginAttachmentLedgerTopic.shutdown(reason:)(v11);
  }
}

uint64_t PluginAttachmentLedgerTopic.processAttachmentUpdate(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v34 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v35 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = v1;
  uint64_t v20 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCBF0], v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v16 = *(void *)(a1
                  + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v15, 1, v22) == 1)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_4:
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Log.attachmentLedgerTopic);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v24, v25))
      {
        os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v26 = 0;
        _os_log_impl(&dword_1B0DF7000, v24, v25, "Unknown attachmentUpdate event received", v26, 2u);
        MEMORY[0x1B3EA39E0](v26, -1, -1);
      }

      uint64_t v27 = type metadata accessor for UUID();
      uint64_t v28 = (uint64_t)v35;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v35, 1, 1, v27);
      PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v28, v16);
      return outlined destroy of UUID?(v28, &demangling cache variable for type metadata for UUID?);
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v15, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:)(v9, v16);
      uint64_t result = outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      break;
    case 2u:
      uint64_t v30 = type metadata accessor for UUID();
      uint64_t v31 = (uint64_t)v35;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v35, 1, 1, v30);
      PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v31, v16);
      outlined destroy of UUID?(v31, &demangling cache variable for type metadata for UUID?);
      uint64_t result = outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      break;
    case 3u:
      uint64_t v32 = v34;
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v15, v34, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      PluginAttachmentLedgerTopic.processAttachmentStatusChanged(_:_:)(v32, v16);
      uint64_t result = outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v32, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      break;
    default:
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v15, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      PluginAttachmentLedgerTopic.processAttachmentUpdateAdd(_:_:)((uint64_t)v12, v16);
      uint64_t result = outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      break;
  }
  return result;
}

uint64_t PluginAttachmentLedgerTopic.subscribeRequest.getter()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  uint64_t result = static Message.with(_:)();
  if (!v1)
  {
    outlined destroy of UUID?(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v64 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v61 = *(void *)(v63 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v63);
  uint64_t v62 = (uint64_t)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v60 = (uint64_t)v57 - v10;
  uint64_t v72 = (void (**)(void, void, void, void))type metadata accessor for UUID();
  uint64_t v11 = (uint64_t)*(v72 - 1);
  MEMORY[0x1F4188790](v72);
  uint64_t v69 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v73 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v57 - v17;
  uint64_t v20 = a2[14];
  uint64_t v19 = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v20;
  a1[1] = v19;
  a1[3] = a2[13];
  uint64_t v68 = lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  static Message.with(_:)();
  uint64_t v21 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0) + 40);
  uint64_t v59 = a1;
  uint64_t v22 = (uint64_t)a1 + v21;
  outlined destroy of UUID?((uint64_t)a1 + v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v18, v22, type metadata accessor for AttachmentLedger_EncryptionID);
  uint64_t v70 = v14;
  uint64_t v71 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v13;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
  uint64_t v23 = a2[29];
  uint64_t v24 = a2[30];
  uint64_t v58 = a2;
  __swift_project_boxed_opaque_existential_1(a2 + 26, v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
  int64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v74 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    uint64_t v27 = *(uint64_t (**)(void, void, void))(v11 + 16);
    uint64_t v28 = *(unsigned __int8 *)(v11 + 80);
    v57[1] = v25;
    uint64_t v29 = v25 + ((v28 + 32) & ~v28);
    uint64_t v66 = *(void *)(v11 + 72);
    uint64_t v67 = v27;
    os_log_type_t v65 = (void (**)(void, void))(v11 + 8);
    uint64_t v30 = v11 + 16;
    uint64_t v31 = v69;
    do
    {
      uint64_t v32 = v72;
      uint64_t v33 = v30;
      uint64_t v34 = v67(v31, v29, v72);
      MEMORY[0x1F4188790](v34);
      v57[-2] = v31;
      static Message.with(_:)();
      (*v65)(v31, v32);
      uint64_t v35 = v74;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1);
        uint64_t v35 = v74;
      }
      unint64_t v37 = *(void *)(v35 + 16);
      unint64_t v36 = *(void *)(v35 + 24);
      uint64_t v38 = (uint64_t)v73;
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        uint64_t v38 = (uint64_t)v73;
        uint64_t v35 = v74;
      }
      *(void *)(v35 + 16) = v37 + 1;
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v38, v35+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(void *)(v70 + 72) * v37, type metadata accessor for AttachmentLedger_EncryptionID);
      v29 += v66;
      --v26;
      uint64_t v30 = v33;
    }
    while (v26);
    swift_bridgeObjectRelease();
    uint64_t v3 = v2;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = MEMORY[0x1E4FBC860];
  }
  uint64_t v39 = v59;
  uint64_t v40 = swift_bridgeObjectRelease();
  v39[2] = v35;
  unint64_t v41 = (*(uint64_t (**)(uint64_t))(*v58 + 632))(v40);
  unint64_t v42 = v41;
  if (v41 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    if (v43) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v43 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v43)
    {
LABEL_12:
      uint64_t v72 = (void (**)(void, void, void, void))(v61 + 56);
      uint64_t v73 = (char *)(v42 & 0xC000000000000001);
      unint64_t v44 = MEMORY[0x1E4FBC860];
      uint64_t v71 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
      uint64_t v45 = 4;
      while (1)
      {
        uint64_t v46 = v45 - 4;
        if (v73)
        {
          MEMORY[0x1B3EA25C0](v45 - 4, v42);
          uint64_t v47 = v45 - 3;
          if (__OFADD__(v46, 1)) {
            goto LABEL_28;
          }
        }
        else
        {
          swift_retain();
          uint64_t v47 = v45 - 3;
          if (__OFADD__(v46, 1))
          {
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        unint64_t v48 = v42;
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
        uint64_t v50 = v63;
        uint64_t v49 = (uint64_t)v64;
        static Message.with(_:)();
        if (v3)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        (*v72)(v49, 0, 1, v50);
        swift_release();
        if ((*v71)(v49, 1, v50) == 1)
        {
          outlined destroy of UUID?(v49, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
          unint64_t v42 = v48;
        }
        else
        {
          uint64_t v51 = v49;
          uint64_t v52 = v60;
          outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v51, v60, type metadata accessor for AttachmentLedger_AttachmentMetadata);
          outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v52, v62, type metadata accessor for AttachmentLedger_AttachmentMetadata);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
          }
          unint64_t v42 = v48;
          unint64_t v54 = *(void *)(v44 + 16);
          unint64_t v53 = *(void *)(v44 + 24);
          if (v54 >= v53 >> 1) {
            unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v44);
          }
          *(void *)(v44 + 16) = v54 + 1;
          outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v62, v44+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v54, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        }
        ++v45;
        if (v47 == v43) {
          goto LABEL_31;
        }
      }
    }
  }
  unint64_t v44 = MEMORY[0x1E4FBC860];
LABEL_31:
  swift_bridgeObjectRelease_n();
  unint64_t v56 = v59;
  uint64_t result = swift_bridgeObjectRelease();
  v56[4] = v44;
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = UUID.uuid.getter();
  char v15 = v2;
  char v16 = v3;
  char v17 = v4;
  char v18 = v5;
  char v19 = v6;
  char v20 = v7;
  char v21 = v8;
  char v22 = v9;
  uint64_t v10 = specialized Data.init<A>(_:)((uint64_t)&v14, (uint64_t)&v23);
  uint64_t v12 = v11;
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(void *a1)
{
  char v2 = v1;
  uint64_t v80 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v80);
  uint64_t v74 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v75 = v6;
  uint64_t v76 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v72 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v9 - 8);
  uint64_t v71 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v69 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v79 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v68 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v67 = (uint64_t *)((char *)&v65 - v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v66 = (uint64_t)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  char v19 = (char *)&v65 - v18;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (uint64_t *)((char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, *MEMORY[0x1E4FBCBF0], v20);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*a1 != 1)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_6:
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Log.attachmentLedgerTopic);
      uint64_t v41 = v74;
      outlined init with copy of Attachment.MMCSMetadata((uint64_t)a1, v74, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      unint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v42, v43))
      {
        unint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        uint64_t v81 = v45;
        *(_DWORD *)unint64_t v44 = 136315138;
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
        uint64_t v46 = Message.debugDescription.getter();
        uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v41, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v45, -1, -1);
        MEMORY[0x1B3EA39E0](v44, -1, -1);
      }
      else
      {
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v41, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      }

      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      *uint64_t v51 = 1;
      return swift_willThrow();
    }
LABEL_16:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v26 = AttachmentLedger_SubscribeResponse.InitializeAck.otherParticipants.getter();
  uint64_t v27 = v2[13];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v81 = v26;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v27, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void (**)(uint64_t))(*v2 + 264);
  uint64_t v30 = swift_bridgeObjectRetain();
  v29(v30);
  swift_retain();
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = v73;
  uint64_t v33 = specialized Sequence.compactMap<A>(_:)(v31, v2);
  uint64_t v74 = v32;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*v2 + 640))(v33);
  uint64_t v81 = 1;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = xmmword_1B113B6F0;
  (*(void (**)(uint64_t *))(*v2 + 352))(&v81);
  uint64_t v34 = (uint64_t)a1 + *(int *)(v80 + 40);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v34, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
  LODWORD(v33) = v35(v19, 1, v11);
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if (v33 == 1)
  {
    uint64_t v36 = type metadata accessor for TaskPriority();
    uint64_t v37 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v72, 1, 1, v36);
    uint64_t v38 = swift_allocObject();
    swift_weakInit();
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = 0;
    uint64_t v39[3] = 0;
    v39[4] = v38;
    _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ14CopresenceCore11UploadTokenVSg_Tgm5(v37, (uint64_t)&async function pointer to partial apply for closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), (uint64_t)v39);
    swift_release();
    outlined destroy of UUID?(v37, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    uint64_t v48 = v66;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v34, v66, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    int v49 = v35((char *)v48, 1, v11);
    uint64_t v37 = (uint64_t)v72;
    uint64_t v50 = v67;
    if (v49 == 1)
    {
      *uint64_t v67 = 0;
      v50[1] = 0xE000000000000000;
      v50[2] = 0;
      v50[3] = 0xE000000000000000;
      v50[4] = 0;
      uint64_t v50[5] = 0xE000000000000000;
      v50[6] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?(v48, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    }
    else
    {
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v48, (uint64_t)v67, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    }
    uint64_t v53 = v68;
    outlined init with copy of Attachment.MMCSMetadata((uint64_t)v50, v68, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    unint64_t v54 = (*(unsigned __int8 *)(v79 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
    uint64_t v55 = swift_allocObject();
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v53, v55 + v54, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    uint64_t v56 = (uint64_t)v69;
    UUID.init()();
    PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(v56, (uint64_t)&async function pointer to partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), v55);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v56, v71);
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v50, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  static TaskPriority.userInitiated.getter();
  uint64_t v57 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v37, 0, 1, v57);
  uint64_t v58 = swift_allocObject();
  swift_weakInit();
  uint64_t v60 = v76;
  uint64_t v59 = v77;
  uint64_t v61 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, (uint64_t)v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationStream, v78);
  outlined init with copy of UserNotificationCenter((uint64_t)(v2 + 21), (uint64_t)&v81);
  unint64_t v62 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  unint64_t v63 = (v75 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = 0;
  *(void *)(v64 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v64 + v62, v60, v61);
  *(void *)(v64 + v63) = v58;
  outlined init with take of BackgroundSessionManagerDataSource((long long *)&v81, v64 + ((v63 + 15) & 0xFFFFFFFFFFFFFFF8));
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v37, (uint64_t)&async function pointer to partial apply for closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), v64);
  swift_release();
  return outlined destroy of UUID?(v37, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
}

void PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1)
{
  void (**v64)(long long *__return_ptr);
  void (*v65)(long long *__return_ptr);
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  long long v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  int64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void (*v105)(long long *);
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  long long v119;
  long long v120;
  long long v121;
  uint64_t v122;
  _OWORD v123[2];
  uint64_t v124;
  uint64_t v125;

  char v2 = v1;
  v111 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v111);
  uint64_t v5 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  v110 = (uint64_t)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  v112 = *(uint8_t **)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  v117 = *(void *)(v115 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v115);
  v114 = (uint64_t *)((char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  v113 = (char *)&v106 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (uint64_t *)((char *)&v106 - v15);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)((char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E4FBCBF0], v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_63;
  }
  (*(void (**)(long long *__return_ptr, uint64_t))(*v2 + 344))(&v119, v23);
  uint64_t v25 = *((void *)&v119 + 1);
  uint64_t v24 = v119;
  uint64_t v26 = v2;
  if (!(*((void *)&v121 + 1) >> 62)) {
    goto LABEL_7;
  }
  if (*((void *)&v121 + 1) >> 62 != 2
    || *((void *)&v121 + 1) != 0x8000000000000000
    || *((void *)&v119 + 1) | (unint64_t)v119 | (unint64_t)v120 | *((void *)&v120 + 1) | (unint64_t)v121 | v122)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v119, *((uint64_t *)&v119 + 1), v120, *((uint64_t *)&v120 + 1), v121, *((unint64_t *)&v121 + 1));
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_19:
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain_n();
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        v125 = v41;
        *(_DWORD *)uint64_t v40 = 136315138;
        swift_retain();
        uint64_t v42 = PluginAttachmentLedgerTopic.description.getter();
        unint64_t v44 = v43;
        swift_release();
        v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B0DF7000, v38, v39, "Received & tried processing initializeACK while not in the starting||retrying state. %s", v40, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v41, -1, -1);
        MEMORY[0x1B3EA39E0](v40, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      return;
    }
LABEL_63:
    swift_once();
    goto LABEL_19;
  }
  uint64_t v25 = 0;
  uint64_t v24 = 0;
LABEL_7:
  v109 = v25;
  unint64_t v27 = *(void *)a1;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v27 >= 8) {
      goto LABEL_9;
    }
LABEL_22:
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of Attachment.MMCSMetadata(a1, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(void *)&v119 = v49;
      *(_DWORD *)uint64_t v48 = 136315138;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      uint64_t v50 = Message.debugDescription.getter();
      v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v49, -1, -1);
      MEMORY[0x1B3EA39E0](v48, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    char v53 = 1;
    goto LABEL_48;
  }
  if (v27 != 8) {
    goto LABEL_22;
  }
LABEL_9:
  v111 = v24;
  uint64_t v28 = *(void **)(a1 + 24);
  int64_t v29 = v28[2];
  uint64_t v30 = MEMORY[0x1E4FBC860];
  v108 = v26;
  if (v29)
  {
    *(void *)&v119 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
    unint64_t v31 = (v112[80] + 32) & ~(unint64_t)v112[80];
    v107 = v28;
    uint64_t v32 = (uint64_t)v28 + v31;
    uint64_t v33 = *((void *)v112 + 9);
    uint64_t v34 = v116;
    while (1)
    {
      outlined init with copy of Attachment.MMCSMetadata(v32, (uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      closure #1 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(v10, &v125, v16);
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      if (v34) {
        break;
      }
      uint64_t v30 = v119;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
        uint64_t v34 = 0;
        uint64_t v30 = v119;
      }
      unint64_t v36 = *(void *)(v30 + 16);
      unint64_t v35 = *(void *)(v30 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v30 = v119;
      }
      *(void *)(v30 + 16) = v36 + 1;
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v16, v30+ ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80))+ *(void *)(v117 + 72) * v36, &demangling cache variable for type metadata for (UInt64, UUID));
      v32 += v33;
      if (!--v29)
      {
        v116 = v34;
        swift_bridgeObjectRelease();
        uint64_t v26 = v108;
        goto LABEL_31;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
LABEL_31:
  if (one-time initialization token for attachment != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Log.attachment);
  swift_bridgeObjectRetain_n();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    *(void *)&v119 = v58;
    *(_DWORD *)uint64_t v57 = 136315138;
    v112 = v57 + 4;
    uint64_t v59 = swift_bridgeObjectRetain();
    uint64_t v60 = MEMORY[0x1B3EA1D20](v59, v115);
    unint64_t v62 = v61;
    swift_bridgeObjectRelease();
    v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, (uint64_t *)&v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v55, v56, "[Subscribe] Missing encryptionIDs: %s, performing recovery!", v57, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v58, -1, -1);
    unint64_t v63 = v57;
    uint64_t v26 = v108;
    MEMORY[0x1B3EA39E0](v63, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v64 = (void (**)(long long *__return_ptr))(*v26 + 392);
  uint64_t v65 = *v64;
  (*v64)(&v119);
  if (v111 >= (uint64_t)v120)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v54, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    uint64_t v73 = Logger.logObject.getter();
    uint64_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(void *)&v119 = v76;
      *(_DWORD *)uint64_t v75 = 136315138;
      swift_retain();
      uint64_t v77 = PluginAttachmentLedgerTopic.description.getter();
      uint64_t v79 = v78;
      swift_release();
      v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v73, v74, "Exceeded retry attempts. Failing %s.", v75, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v76, -1, -1);
      MEMORY[0x1B3EA39E0](v75, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    char v53 = 3;
LABEL_48:
    char *v52 = v53;
    swift_willThrow();
LABEL_49:
    swift_release();
    return;
  }
  if (v109)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v54, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    uint64_t v66 = Logger.logObject.getter();
    uint64_t v67 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      *(void *)&v119 = v69;
      *(_DWORD *)uint64_t v68 = 136315138;
      swift_retain();
      uint64_t v70 = PluginAttachmentLedgerTopic.description.getter();
      uint64_t v72 = v71;
      swift_release();
      v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v66, v67, "%s reached invalid state where we have an ongoing task while we receiving back missingEncryptionIDs.", v68, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v69, -1, -1);
      MEMORY[0x1B3EA39E0](v68, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_49;
  }
  v112 = (uint8_t *)(v111 + 1);
  uint64_t v80 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v110, 1, 1, v80);
  uint64_t v81 = swift_allocObject();
  swift_weakInit();
  long long v82 = v26;
  long long v83 = v26 + 26;
  long long v84 = v82[29];
  uint64_t v85 = v82[30];
  __swift_project_boxed_opaque_existential_1(v83, v84);
  uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 24))(v84, v85);
  v65(v123);
  outlined init with copy of UserNotificationCenter((uint64_t)v83, (uint64_t)&v119);
  uint64_t v87 = swift_allocObject();
  *(void *)(v87 + 16) = 0;
  *(void *)(v87 + 24) = 0;
  uint64_t v88 = v123[1];
  *(_OWORD *)(v87 + 32) = v123[0];
  *(_OWORD *)(v87 + 48) = v88;
  *(void *)(v87 + 64) = v124;
  outlined init with take of BackgroundSessionManagerDataSource(&v119, v87 + 72);
  *(void *)(v87 + 112) = v86;
  *(void *)(v87 + 120) = v81;
  uint64_t v89 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(v110, (uint64_t)&async function pointer to partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:), v87);
  outlined init with copy of UserNotificationCenter((uint64_t)v83, (uint64_t)&v119);
  uint64_t v90 = *((void *)&v120 + 1);
  uint64_t v91 = v121;
  uint64_t v92 = __swift_project_boxed_opaque_existential_1(&v119, *((uint64_t *)&v120 + 1));
  uint64_t v93 = *(void *)(v30 + 16);
  if (v93)
  {
    v107 = v92;
    v109 = v91;
    v110 = v90;
    v111 = v89;
    v125 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93, 0);
    uint64_t v94 = v30 + ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80));
    v117 = *(void *)(v117 + 72);
    uint64_t v95 = (uint64_t *)v113;
    do
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v94, (uint64_t)v95, &demangling cache variable for type metadata for (UInt64, UUID));
      uint64_t v96 = *(int *)(v115 + 48);
      unint64_t v97 = (char *)v114 + v96;
      uint64_t v98 = (char *)v95 + v96;
      uint64_t v99 = *v95;
      *v114 = *v95;
      v100 = type metadata accessor for UUID();
      os_log_t v101 = *(void *)(v100 - 8);
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v97, v98, v100);
      (*(void (**)(char *, uint64_t))(v101 + 8))(v97, v100);
      outlined destroy of UUID?((uint64_t)v95, &demangling cache variable for type metadata for (UInt64, UUID));
      uint64_t v102 = v125;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v102 + 16) + 1, 1);
        uint64_t v102 = v125;
      }
      unint64_t v104 = *(void *)(v102 + 16);
      uint64_t v103 = *(void *)(v102 + 24);
      if (v104 >= v103 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1);
        uint64_t v102 = v125;
      }
      *(void *)(v102 + 16) = v104 + 1;
      *(void *)(v102 + 8 * v104 + 32) = v99;
      v94 += v117;
      --v93;
    }
    while (v93);
    swift_bridgeObjectRelease();
    uint64_t v90 = v110;
    uint64_t v89 = v111;
    uint64_t v91 = v109;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v102 = MEMORY[0x1E4FBC860];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 72))(v102, v90, v91);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v119);
  *(void *)&v119 = v112;
  *((void *)&v119 + 1) = v89;
  v120 = 0u;
  v121 = 0u;
  v122 = 0;
  uint64_t v105 = *(void (**)(long long *))(*v108 + 352);
  swift_retain();
  v105(&v119);
  swift_release();
}

uint64_t PluginAttachmentLedgerTopic.Participant.init(participantID:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (void *)((char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (void *)((char *)v48 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v48 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (void *)((char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)v48 - v19;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v48 - v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21) == 1)
  {
    uint64_t v22 = 0;
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v18, (uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined init with copy of Attachment.MMCSMetadata((uint64_t)v14, (uint64_t)v12, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v23 = outlined init with copy of UserNotificationCenter((uint64_t)(a2 + 26), (uint64_t)v56);
      uint64_t v24 = (uint64_t (*)(uint64_t))a2[13];
      (*(void (**)(void *__return_ptr, uint64_t))(*a2 + 392))(v54, v23);
      v52[0] = v54[0];
      v52[1] = v54[1];
      v52[2] = v54[2];
      long long v53 = v55;
      uint64_t v25 = specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(v12, (uint64_t)v56, v24, v52);
      if (v3)
      {
        if (one-time initialization token for attachmentLedgerTopic != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        __swift_project_value_buffer(v26, (uint64_t)static Log.attachmentLedgerTopic);
        outlined init with copy of Attachment.MMCSMetadata((uint64_t)v14, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        id v27 = v3;
        id v28 = v3;
        int64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.fault.getter();
        int v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v51 = swift_slowAlloc();
          v56[0] = v51;
          *(_DWORD *)uint64_t v32 = 136315394;
          v48[1] = v32 + 4;
          uint64_t v34 = *v9;
          unint64_t v33 = v9[1];
          outlined copy of Data._Representation(*v9, v33);
          uint64_t v35 = Data.description.getter();
          os_log_t v49 = v29;
          uint64_t v36 = v35;
          int v50 = v31;
          unint64_t v38 = v37;
          outlined consume of Data._Representation(v34, v33);
          v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
          *(_WORD *)(v32 + 12) = 2080;
          v54[0] = v3;
          id v39 = v3;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          uint64_t v40 = String.init<A>(reflecting:)();
          v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          os_log_t v42 = v49;
          _os_log_impl(&dword_1B0DF7000, v49, (os_log_type_t)v50, "Failed to get attachment %s, reason: %s", (uint8_t *)v32, 0x16u);
          uint64_t v43 = v51;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v43, -1, -1);
          MEMORY[0x1B3EA39E0](v32, -1, -1);
        }
        else
        {

          outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        }

        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v22 = (uint64_t)v25;
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      }
    }
    else
    {
      uint64_t v44 = *v18;
      unint64_t v45 = v18[1];
      unint64_t v46 = (*(uint64_t (**)(void))(*a2 + 632))();
      outlined copy of Data._Representation(v44, v45);
      uint64_t v22 = specialized Sequence.first(where:)(v46, v44, v45);
      outlined consume of Data._Representation(v44, v45);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v44, v45);
    }
  }
  *uint64_t v57 = v22;
  return outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

NSObject *Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t a1), uint64_t *a4)
{
  return specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(a1, a2, a3, a4);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x1F4188298](closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), 0, 0);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  outlined init with copy of Attachment.MMCSMetadata(v0[3], v0[2], type metadata accessor for AttachmentLedger_AuthPutMaterials);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v71 = a3;
  uint64_t v70 = a2;
  uint64_t v87 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v88 = *(void *)(v5 - 8);
  uint64_t v89 = v5;
  uint64_t v6 = *(void *)(v88 + 64);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v86 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v76 = (char *)&v69 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v80 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v84 = *(void *)(v11 - 8);
  uint64_t v85 = v11;
  uint64_t v12 = *(void *)(v84 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v74 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  long long v82 = (char *)&v69 - v14;
  uint64_t v83 = type metadata accessor for ContinuousClock();
  uint64_t v81 = *(void *)(v83 - 8);
  uint64_t v15 = *(void *)(v81 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](v83);
  uint64_t v73 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v78 = (char *)&v69 - v17;
  uint64_t v79 = type metadata accessor for Date();
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v18 = *(void *)(v77 + 64);
  uint64_t v19 = MEMORY[0x1F4188790](v79);
  uint64_t v72 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v75 = (char *)&v69 - v20;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (uint64_t *)((char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = *(void **)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, *MEMORY[0x1E4FBCBF0], v21);
  id v26 = v25;
  char v27 = _dispatchPreconditionTest(_:)();
  uint64_t v28 = (*(uint64_t (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v27 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_7;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*v4 + 288))(&v91, v28);
  uint64_t v29 = v91;
  uint64_t v30 = v94;
  unint64_t v31 = v96;
  if ((v96 & 0x8000000000000000) != 0
    && ((uint64_t v32 = v93 | v92, v33 = v95 | v97, v96 != 0x8000000000000000) || v32 | v91 | v94 | v33))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v91, v92, v93, v94, v95, v96);
    if (v31 == 0x8000000000000000 && v29 == 1 && !(v32 | v30 | v33))
    {
      os_log_type_t v47 = v75;
      static Date.now.getter();
      uint64_t v48 = v78;
      ContinuousClock.init()();
      os_log_t v49 = v82;
      ContinuousClock.now.getter();
      uint64_t v50 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v80, 1, 1, v50);
      uint64_t v51 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v76, v87, v89);
      uint64_t v52 = v84;
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v74, v49, v85);
      uint64_t v53 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v73, v48, v83);
      uint64_t v54 = v77;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v72, v47, v79);
      unint64_t v55 = (*(unsigned __int8 *)(v51 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      uint64_t v87 = (v6 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v56 = (*(unsigned __int8 *)(v52 + 80) + v87 + 8) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      unint64_t v57 = (v12 + *(unsigned __int8 *)(v53 + 80) + v56) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      unint64_t v58 = (v15 + *(unsigned __int8 *)(v54 + 80) + v57) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v59 = (char *)swift_allocObject();
      *((void *)v59 + 2) = 0;
      *((void *)v59 + 3) = 0;
      uint64_t v60 = v71;
      *((void *)v59 + 4) = v70;
      *((void *)v59 + 5) = v60;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v59[v55], v76, v89);
      *(void *)&v59[v87] = v4;
      uint64_t v62 = v84;
      uint64_t v61 = v85;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v59[v56], v74, v85);
      uint64_t v63 = v81;
      uint64_t v64 = v83;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(&v59[v57], v73, v83);
      uint64_t v65 = &v59[v58];
      uint64_t v66 = v77;
      uint64_t v67 = v79;
      (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v65, v72, v79);
      swift_retain();
      swift_retain();
      uint64_t v68 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore11UploadTokenV_Tgm5Tm(v80, (uint64_t)&async function pointer to partial apply for closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:), (uint64_t)v59, (void (*)(void))type metadata accessor for UploadToken);
      swift_beginAccess();
      v4[12] = v68;
      swift_retain();
      swift_release();
      PluginAttachmentLedgerTopic.uploadToken.didset();
      swift_release();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v82, v61);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v78, v64);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v75, v67);
      return;
    }
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v91, v92, v93, v94, v95, v96);
  }
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v35 = v88;
  uint64_t v36 = v86;
  uint64_t v37 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v86, v87, v89);
  swift_retain_n();
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    uint64_t v91 = v87;
    *(_DWORD *)uint64_t v40 = 136315394;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
    *(_WORD *)(v40 + 12) = 2080;
    swift_retain();
    uint64_t v43 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v45 = v44;
    swift_release();
    uint64_t v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v38, v39, "[%s] Received request to refresh uploadToken without being subscribed on %s", (uint8_t *)v40, 0x16u);
    uint64_t v46 = v87;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v46, -1, -1);
    MEMORY[0x1B3EA39E0](v40, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
    swift_release_n();
  }
}

uint64_t closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return MEMORY[0x1F4188298](closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), 0, 0);
}

uint64_t closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[7] = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[8] = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
    v3[3] = v0[5];
    v3[4] = v2;
    return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.requestUploadToken(), 0, 0);
  }
  else
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = type metadata accessor for UploadToken(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  else
  {
    swift_release();
    uint64_t v2 = closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for UploadToken(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PluginAttachmentLedgerTopic.requestUploadToken()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.requestUploadToken(), 0, 0);
}

uint64_t PluginAttachmentLedgerTopic.requestUploadToken()()
{
  id v1 = *(id *)(v0[4] + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<UploadToken, Error>?);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v2 = v0[2];
  v0[5] = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[6] = v3;
    uint64_t v4 = type metadata accessor for UploadToken(0);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *uint64_t v3 = v0;
    v3[1] = PluginAttachmentLedgerTopic.requestUploadToken();
    uint64_t v6 = v0[3];
    uint64_t v7 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v6, v2, v4, v5, v7);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v0[8] = v8;
    uint64_t v9 = type metadata accessor for UploadToken(0);
    *uint64_t v8 = v0;
    v8[1] = PluginAttachmentLedgerTopic.requestUploadToken();
    uint64_t v10 = v0[3];
    uint64_t v11 = v0[4];
    return MEMORY[0x1F4188160](v10, 0, 0, 0xD000000000000014, 0x80000001B115DA10, partial apply for closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken(), v11, v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PluginAttachmentLedgerTopic.requestUploadToken();
  }
  else {
    uint64_t v2 = PluginAttachmentLedgerTopic.requestUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.requestUploadToken(), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ14CopresenceCore11UploadTokenVSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v12 = v11;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = 0;
  uint64_t v12 = 0;
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UploadToken?);
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[12] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v4[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), 0, 0);
}

uint64_t sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  id v1 = (void *)v0[5];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[14] = v4;
  *uint64_t v4 = v0;
  v4[1] = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[3];
  return AttachmentLedgerServiceProvider.updateAttachment(input:)(v5, v6, v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  else {
    uint64_t v2 = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  id v1 = v0[11];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[13] + *(int *)(v0[12] + 24);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  LODWORD(v2) = v5(v1, 1, v2);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v2 == 1)
  {
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v0[13], v0[2], type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[10];
    uint64_t v9 = v0[6];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    uint64_t v10 = v5(v8, 1, v9);
    uint64_t v11 = v0[10];
    uint64_t v12 = (void *)v0[8];
    if (v10 == 1)
    {
      *uint64_t v12 = 0;
      v12[1] = 0xE000000000000000;
      v12[2] = 0;
      v12[3] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?(v11, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    }
    else
    {
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v0[10], (uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
    }
    uint64_t v13 = (void *)swift_task_alloc();
    v0[16] = v13;
    *uint64_t v13 = v0;
    v13[1] = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
    uint64_t v14 = v0[4];
    return AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)(v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  else {
    uint64_t v2 = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  id v1 = v0[9];
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  outlined init with copy of Attachment.MMCSMetadata(v0[8], v1, type metadata accessor for AttachmentLedger_ErrorResponse);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = v4;
  *uint64_t v4 = v0;
  v4[1] = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v8 = v0[3];
  return sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(v7, v8, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v0) {
    uint64_t v3 = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  else {
    uint64_t v3 = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  id v1 = v0[13];
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[8], type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  id v1 = v0[13];
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[8], type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  id v1 = v0[13];
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[8], type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v2[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v2[8] = v4;
  v2[9] = *(void *)(v4 - 8);
  v2[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:), 0, 0);
}

uint64_t AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)()
{
  uint64_t v1 = (uint64_t *)v0[3];
  if (v1[2])
  {
    uint64_t v2 = v0[8];
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[7];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0[2], v4, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
    {
      outlined destroy of UUID?(v0[7], &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      if (v1[2])
      {
LABEL_4:
        unint64_t v5 = *(void *)(v0[3] + 24);
        uint64_t v6 = 1000000000000000 * v5;
        uint64_t v7 = (v5 * (unsigned __int128)0x38D7EA4C68000uLL) >> 64;
        ContinuousClock.init()();
        uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                               + async function pointer to specialized Clock.sleep(for:tolerance:));
        uint64_t v8 = (void *)swift_task_alloc();
        v0[11] = v8;
        *uint64_t v8 = v0;
        v8[1] = AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:);
        return v22(v6, v7, 0, 0, 1);
      }
    }
    else
    {
      uint64_t v13 = v0[10];
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v0[7], v13, type metadata accessor for AttachmentLedger_ErrorResponse);
      uint64_t v14 = *(void *)(v13 + 16);
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v13, type metadata accessor for AttachmentLedger_ErrorResponse);
      if (!v14)
      {
        __break(1u);
        goto LABEL_18;
      }
      v1[2] = v14 - 1;
      if (v14 != 1) {
        goto LABEL_4;
      }
    }
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_11:
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Log.attachmentLedgerTopic);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl(&dword_1B0DF7000, v16, v17, "Exceeded max retry attempts", v18, 2u);
        MEMORY[0x1B3EA39E0](v18, -1, -1);
      }
      uint64_t v19 = (uint64_t *)v0[3];

      uint64_t v20 = *v19;
      uint64_t v10 = v19[1];
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError();
      swift_allocError();
      *uint64_t v12 = v20;
      goto LABEL_14;
    }
LABEL_18:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v11 = *v1;
  uint64_t v10 = v1[1];
  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError();
  swift_allocError();
  *uint64_t v12 = v11;
LABEL_14:
  v12[1] = v10;
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 32);
  unint64_t v5 = *v1;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v6[22] = swift_task_alloc();
  v6[23] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  v6[26] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
  v6[27] = v7;
  v6[28] = *(void *)(v7 - 8);
  v6[29] = swift_task_alloc();
  v6[30] = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)?);
  v6[33] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Iterator);
  v6[34] = v8;
  v6[35] = *(void *)(v8 - 8);
  v6[36] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), 0, 0);
}

uint64_t closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[37] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[34];
  return MEMORY[0x1F4187D58](v2, 0, 0, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v1 = v0[33];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[35] + 8))(v0[36], v0[34]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v6 = v0[28];
    uint64_t v5 = v0[29];
    uint64_t v7 = v0[27];
    uint64_t v8 = v1 + *(int *)(v2 + 48);
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v1, v0[32], type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v8, v7);
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v9 = v0[31];
    uint64_t v10 = v0[32];
    uint64_t v11 = type metadata accessor for Logger();
    v0[38] = __swift_project_value_buffer(v11, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of Attachment.MMCSMetadata(v10, v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v0[16] = v15;
      *(_DWORD *)uint64_t v14 = 136315394;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v0[18] = Strong;
        type metadata accessor for PluginAttachmentLedgerTopic(0);
        os_log_type_t v17 = String.init<A>(reflecting:)();
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v19 = 0xE300000000000000;
        os_log_type_t v17 = 7104878;
      }
      uint64_t v21 = v0[31];
      *(void *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v0 + 16);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
      uint64_t v22 = Message.debugDescription.getter();
      *(void *)(v14 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v0 + 16);
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v21, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
      _os_log_impl(&dword_1B0DF7000, v12, v13, "%s Attempting to drain operation %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v15, -1, -1);
      MEMORY[0x1B3EA39E0](v14, -1, -1);
    }
    else
    {
      uint64_t v20 = v0[31];
      swift_release_n();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v20, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    }

    uint64_t v24 = v0[22];
    uint64_t v25 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
    id v26 = (void *)swift_task_alloc();
    v0[39] = v26;
    *id v26 = v0;
    v26[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
    char v27 = v0[32];
    uint64_t v28 = v0[26];
    uint64_t v30 = v0[21];
    uint64_t v29 = v0[22];
    return sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(v28, v27, v29, v30);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 320) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v0) {
    uint64_t v3 = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  else {
    uint64_t v3 = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  outlined init with copy of Attachment.MMCSMetadata(v0[26], v0[25], type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v0[13] = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v0[15] = Strong;
      type metadata accessor for PluginAttachmentLedgerTopic(0);
      uint64_t v6 = String.init<A>(reflecting:)();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = 0xE300000000000000;
      uint64_t v6 = 7104878;
    }
    uint64_t v10 = v0[25];
    *(void *)(v3 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, v0 + 13);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    uint64_t v11 = Message.debugDescription.getter();
    *(void *)(v3 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v0 + 13);
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v10, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    _os_log_impl(&dword_1B0DF7000, v1, v2, "%s Finished operation: %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v4, -1, -1);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }
  else
  {
    uint64_t v9 = v0[25];
    swift_release_n();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v9, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  }

  uint64_t v13 = v0[32];
  uint64_t v15 = v0[28];
  uint64_t v14 = v0[29];
  os_log_type_t v17 = v0[26];
  uint64_t v16 = v0[27];
  outlined init with copy of Attachment.MMCSMetadata(v17, v0[24], type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  CheckedContinuation.resume(returning:)();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v17, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v13, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[37] = (uint64_t)v18;
  *uint64_t v18 = v0;
  v18[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  uint64_t v19 = v0[33];
  uint64_t v20 = v0[34];
  return MEMORY[0x1F4187D58](v19, 0, 0, v20);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  uint64_t v1 = (void *)v0[40];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v0[14] = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v0[12] = Strong;
      type metadata accessor for PluginAttachmentLedgerTopic(0);
      uint64_t v9 = String.init<A>(reflecting:)();
      uint64_t v11 = v10;
    }
    else
    {
      uint64_t v11 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    uint64_t v13 = (void *)v0[40];
    *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v0 + 14);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v0[11] = v13;
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v15 = String.init<A>(reflecting:)();
    *(void *)(v6 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v0 + 14);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v4, v5, "%s Failed operation, error: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v7, -1, -1);
    MEMORY[0x1B3EA39E0](v6, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[40];
    swift_release_n();
  }
  os_log_type_t v17 = v0[32];
  uint64_t v19 = v0[28];
  uint64_t v18 = v0[29];
  uint64_t v20 = v0[27];
  v0[17] = v0[40];
  CheckedContinuation.resume(throwing:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[37] = v21;
  *uint64_t v21 = v0;
  v21[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  uint64_t v22 = v0[33];
  uint64_t v23 = v0[34];
  return MEMORY[0x1F4187D58](v22, 0, 0, v23);
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v56 = a2;
  uint64_t v59 = a1;
  uint64_t v54 = a3;
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  unint64_t v58 = (uint64_t *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  uint64_t v57 = (uint64_t)&v49 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v52 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v49 - v10;
  uint64_t v12 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v51 = (uint64_t *)((char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v14);
  os_log_type_t v17 = (uint64_t *)((char *)&v49 - v16);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v3;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v59 + *(int *)(v3 + 24), (uint64_t)v11, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v50(v11, 1, v12) == 1)
  {
    *(_OWORD *)os_log_type_t v17 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v11, (uint64_t)v17, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  uint64_t v25 = *v17;
  unint64_t v26 = v17[1];
  outlined copy of Data._Representation(*v17, v26);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, type metadata accessor for AttachmentLedger_EncryptionID);
  UUID.init(data:)(v25, v26, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v28 = v59;
    uint64_t v29 = v57;
    outlined init with copy of Attachment.MMCSMetadata((uint64_t)v59, v57, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    uint64_t v30 = v58;
    outlined init with copy of Attachment.MMCSMetadata((uint64_t)v28, (uint64_t)v58, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    unint64_t v31 = Logger.logObject.getter();
    int v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v32))
    {
      LODWORD(v59) = v32;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v61 = v55;
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v34 = v52;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29 + *(int *)(v53 + 24), v52, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      if (v50((char *)v34, 1, v12) == 1)
      {
        uint64_t v35 = v51;
        *(_OWORD *)uint64_t v51 = xmmword_1B113B700;
        UnknownStorage.init()();
        outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      }
      else
      {
        uint64_t v35 = v51;
        outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v34, (uint64_t)v51, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      uint64_t v40 = *v35;
      unint64_t v41 = v35[1];
      outlined copy of Data._Representation(*v35, v41);
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v35, type metadata accessor for AttachmentLedger_EncryptionID);
      uint64_t v42 = Data.description.getter();
      unint64_t v44 = v43;
      outlined consume of Data._Representation(v40, v41);
      uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v57, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      *(_WORD *)(v33 + 12) = 2048;
      uint64_t v45 = *v58;
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v58, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      uint64_t v60 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v31, (os_log_type_t)v59, "Invalid encryptionID: %s for participant: %llu", (uint8_t *)v33, 0x16u);
      uint64_t v46 = v55;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v46, -1, -1);
      MEMORY[0x1B3EA39E0](v33, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v30, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v29, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    uint64_t v47 = swift_allocError();
    *uint64_t v48 = 1;
    uint64_t result = swift_willThrow();
    uint64_t *v56 = v47;
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v36(v24, v20, v21);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
    unint64_t v38 = (char *)v54 + *(int *)(v37 + 48);
    *uint64_t v54 = *v59;
    return ((uint64_t (*)(char *, char *, uint64_t))v36)(v38, v24, v21);
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[27] = a6;
  v7[28] = a7;
  v7[25] = a4;
  v7[26] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7[29] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:), 0, 0);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  double v9 = *(double *)(v2 + 24);
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v9 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return MEMORY[0x1F4187D90](v4, v5, v6, v7, v8);
  }
  uint64_t v10 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = 1000000000000000000 * (unint64_t)v9;
  uint64_t v13 = ((unint64_t)v9 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64;
  outlined init with copy of UserNotificationCenter(*(void *)(v0 + 208), v0 + 16);
  uint64_t v14 = swift_allocObject();
  outlined init with take of BackgroundSessionManagerDataSource((long long *)(v0 + 16), v14 + 16);
  *(void *)(v14 + 56) = v11;
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized Task<>.init(priority:timeout:operation:)(v10, v12, v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:), v14);
  *(void *)(v0 + 240) = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(void *)(v0 + 256) = v7;
  *uint64_t v16 = v0;
  v16[1] = closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
  uint64_t v8 = MEMORY[0x1E4FBC0F0];
  uint64_t v4 = v0 + 152;
  uint64_t v5 = v15;
  uint64_t v6 = v17;
  return MEMORY[0x1F4187D90](v4, v5, v6, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
  }
  else {
    uint64_t v2 = closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(void);
  id v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  void *v34;
  uint64_t v35;

  uint64_t v34 = v0;
  uint64_t v1 = 0x1E9B54000uLL;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_bridgeObjectRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v32 = v2;
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v33[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = swift_bridgeObjectRetain();
    double v9 = MEMORY[0x1B3EA1D20](v8, v7);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    uint64_t v12 = v9;
    uint64_t v1 = 0x1E9B54000;
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "Received newDecryptionIDs: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    uint64_t v13 = v5;
    uint64_t v2 = v32;
    MEMORY[0x1B3EA39E0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = (void *)v0[33];
  swift_beginAccess();
  if (swift_weakLoadStrong() && (PluginAttachmentLedgerTopic.triggerResubscribe()(), uint64_t v15 = v14, swift_release(), v14))
  {
    if (*(void *)(v1 + 3488) != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v16 = v14;
    swift_retain();
    uint64_t v17 = v14;
    swift_retain();
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v33[0] = v22;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      unint64_t v31 = v22;
      if (Strong)
      {
        v0[18] = Strong;
        type metadata accessor for PluginAttachmentLedgerTopic(0);
        uint64_t v24 = String.init<A>(reflecting:)();
        unint64_t v26 = v25;
      }
      else
      {
        unint64_t v26 = 0xE300000000000000;
        uint64_t v24 = 7104878;
      }
      v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2112;
      uint64_t v28 = v15;
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v29;

      _os_log_impl(&dword_1B0DF7000, v18, v19, "%s Failed to retry, reason: %@", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v21, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v31, -1, -1);
      MEMORY[0x1B3EA39E0](v20, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
  }
  return v27();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20[2];
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[33];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v3 = v1;
  swift_retain();
  uint64_t v4 = v1;
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    v20[0] = v19;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v0[23] = Strong;
      type metadata accessor for PluginAttachmentLedgerTopic(0);
      double v9 = String.init<A>(reflecting:)();
      uint64_t v11 = v10;
    }
    else
    {
      double v9 = 7104878;
      uint64_t v11 = 0xE300000000000000;
    }
    uint64_t v13 = (void *)v0[33];
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[21] = v13;
    uint64_t v14 = v13;
    uint64_t v15 = String.init<A>(reflecting:)();
    v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v5, v6, "%s Failed to see any updated decryptionIDs, error: %s. Retrying anyways", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v19, -1, -1);
    MEMORY[0x1B3EA39E0](v7, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[33];

    swift_release_n();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    PluginAttachmentLedgerTopic.triggerResubscribe()();
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<[UUID], Never>>);
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator);
  v3[15] = v6;
  v3[16] = *(void *)(v6 - 8);
  v3[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:), 0, 0);
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v0[2] = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  uint64_t v8 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  MEMORY[0x1B3EA1110](v7, v8);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v9 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[18] = v10;
  *uint64_t v10 = v0;
  v10[1] = closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
  uint64_t v11 = v0[15];
  return MEMORY[0x1F4187C78](v0 + 3, v11, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
  }
  else {
    uint64_t v2 = closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 160) = *(void *)(v0 + 24);
  return MEMORY[0x1F4188298](closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  int v32 = v0;
  uint64_t v1 = v0[20];
  if (v1)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    uint64_t v30 = v1;
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = v0[8];
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      unint64_t v31 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v8 = swift_bridgeObjectRetain();
      uint64_t v9 = MEMORY[0x1B3EA1D20](v8, v5);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      *(void *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v31);
      uint64_t v1 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B0DF7000, v3, v4, "Saw updated decryptionIDs: %s", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v7, -1, -1);
      MEMORY[0x1B3EA39E0](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v13 = *(void *)(v1 + 16);
    uint64_t v29 = v0[7];
    if (v13 == *(void *)(v29 + 16))
    {
      if (!v13 || v29 == v1)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        uint64_t v23 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator);
        uint64_t v24 = (void *)swift_task_alloc();
        v0[18] = v24;
        *uint64_t v24 = v0;
        v24[1] = closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
        uint64_t v25 = v0[15];
        return MEMORY[0x1F4187C78](v0 + 3, v25, v23);
      }
      uint64_t v14 = v0[9];
      uint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v28 = *(void *)(v14 + 72);
      uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
      while (1)
      {
        uint64_t v18 = v0[10];
        uint64_t v17 = v0[11];
        uint64_t v20 = v0[8];
        uint64_t v19 = v0[9];
        v16(v17, v1 + v15, v20);
        v16(v18, v29 + v15, v20);
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v22(v18, v20);
        v22(v17, v20);
        uint64_t v1 = v30;
        if ((v21 & 1) == 0) {
          break;
        }
        v15 += v28;
        if (!--v13) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v26 = (void *)v0[5];
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    *unint64_t v26 = v1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
  }
  return v12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 32) = *(void *)(v0 + 152);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

void PluginAttachmentLedgerTopic.triggerResubscribe()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_retain();
    uint64_t v7 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v9 = v8;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v3, v4, "%s triggered a resubscribe", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v6, -1, -1);
    MEMORY[0x1B3EA39E0](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  id v10 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  OS_dispatch_queue.sync<A>(execute:)();
}

void closure #1 in PluginAttachmentLedgerTopic.triggerResubscribe()(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 344))(&v13);
  uint64_t v2 = v13;
  unint64_t v3 = v16;
  outlined consume of PluginAttachmentLedgerTopic.State(v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  if (v3 >> 62)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v13 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_retain();
      uint64_t v9 = PluginAttachmentLedgerTopic.description.getter();
      unint64_t v11 = v10;
      swift_release();
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v5, v6, "Not re-subscribing since the state is invalid. %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v8, -1, -1);
      MEMORY[0x1B3EA39E0](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
    swift_allocError();
    *uint64_t v12 = 3;
    swift_willThrow();
  }
  else
  {
    uint64_t v13 = v2;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    (*(void (**)(uint64_t *))(*(void *)a1 + 352))(&v13);
    PluginAttachmentLedgerTopic.sendSubscribeRequest()();
  }
}

void PluginAttachmentLedgerTopic.processAttachmentUpdateAdd(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v150 = a2;
  uint64_t v145 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1F4188790](v145);
  uint64_t v5 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v6 = MEMORY[0x1F4188790](v138);
  uint64_t v147 = (uint64_t)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v151 = (uint64_t *)((char *)&v138 - v9);
  MEMORY[0x1F4188790](v8);
  uint64_t v152 = (uint64_t)&v138 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v155 = *(void *)(v11 - 8);
  uint64_t v156 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  v143 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v141 = (char *)&v138 - v15;
  MEMORY[0x1F4188790](v14);
  v142 = (char *)&v138 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v140 = (uint64_t)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v144 = (uint64_t)&v138 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v139 = (uint64_t)&v138 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v148 = (uint64_t)&v138 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v146 = (uint64_t)&v138 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v138 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v149 = (uint64_t)&v138 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v157 = (uint64_t)&v138 - v33;
  uint64_t v34 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  MEMORY[0x1F4188790](v34 - 8);
  v153 = (uint64_t *)((char *)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v36 - 8);
  unint64_t v38 = (char *)&v138 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchPredicate();
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v42 = (uint64_t *)((char *)&v138 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v154 = v2;
  unint64_t v43 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  void *v42 = v43;
  (*(void (**)(void *, void, uint64_t))(v40 + 104))(v42, *MEMORY[0x1E4FBCBF0], v39);
  id v44 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v40 + 8))(v42, v39);
  if ((v43 & 1) == 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v38, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v45 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v38, 1, v45) != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v68 = v152;
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v38, v152, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v69 = v155;
      if (one-time initialization token for attachmentLedgerTopic != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      uint64_t v71 = __swift_project_value_buffer(v70, (uint64_t)static Log.attachmentLedgerTopic);
      uint64_t v72 = v151;
      outlined init with copy of Attachment.MMCSMetadata(v68, (uint64_t)v151, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v157 = v71;
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        v159[0] = v76;
        *(_DWORD *)uint64_t v75 = 136315138;
        uint64_t v77 = *v72;
        unint64_t v78 = v72[1];
        outlined copy of Data._Representation(v77, v78);
        uint64_t v79 = v144;
        UUID.init(data:)(v77, v78, v144);
        uint64_t v80 = v79;
        uint64_t v81 = v140;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v80, v140, &demangling cache variable for type metadata for UUID?);
        uint64_t v82 = v156;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v81, 1, v156) == 1)
        {
          uint64_t v83 = 7104878;
          unint64_t v84 = 0xE300000000000000;
        }
        else
        {
          os_log_t v101 = v142;
          (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v142, v81, v82);
          (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v141, v101, v82);
          uint64_t v102 = String.init<A>(reflecting:)();
          uint64_t v103 = v69;
          uint64_t v83 = v102;
          unint64_t v84 = v104;
          uint64_t v105 = v101;
          uint64_t v68 = v152;
          (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v82);
        }
        outlined destroy of UUID?(v144, &demangling cache variable for type metadata for UUID?);
        uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v151, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        _os_log_impl(&dword_1B0DF7000, v73, v74, "Notified of new attachments %s", v75, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v76, -1, -1);
        MEMORY[0x1B3EA39E0](v75, -1, -1);

        uint64_t v86 = (void *)v158;
      }
      else
      {
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v72, type metadata accessor for AttachmentLedger_AttachmentMetadata);

        uint64_t v86 = (void *)v158;
      }
      PluginAttachmentLedgerTopic.processAttachmentUpdateAdd(_:_:)(v68, v150);
      uint64_t v106 = v147;
      if (v86)
      {
        outlined init with copy of Attachment.MMCSMetadata(v68, v147, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        id v107 = v86;
        id v108 = v86;
        v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v109, v110))
        {
          uint64_t v111 = swift_slowAlloc();
          v112 = (void *)swift_slowAlloc();
          uint64_t v158 = swift_slowAlloc();
          v159[0] = v158;
          *(_DWORD *)uint64_t v111 = 136315394;
          lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
          uint64_t v113 = Message.debugDescription.getter();
          uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v106, type metadata accessor for AttachmentLedger_AttachmentMetadata);
          *(_WORD *)(v111 + 12) = 2112;
          id v115 = v86;
          uint64_t v116 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v160 = v116;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v112 = v116;
          uint64_t v68 = v152;

          _os_log_impl(&dword_1B0DF7000, v109, v110, "Failed to handle new attachment %s for reason: %@", (uint8_t *)v111, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v112, -1, -1);
          uint64_t v117 = v158;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v117, -1, -1);
          MEMORY[0x1B3EA39E0](v111, -1, -1);
        }
        else
        {
          outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v106, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        }
        swift_willThrow();
      }
      v118 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
      uint64_t v119 = v68;
      goto LABEL_47;
    }
    uint64_t v53 = v153;
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v38, (uint64_t)v153, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    uint64_t v54 = *v53;
    unint64_t v55 = v53[1];
    outlined copy of Data._Representation(v54, v55);
    uint64_t v56 = v157;
    UUID.init(data:)(v54, v55, v157);
    uint64_t v57 = v155;
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    uint64_t v59 = __swift_project_value_buffer(v58, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v60 = v149;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v56, v149, &demangling cache variable for type metadata for UUID?);
    uint64_t v152 = v59;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      v159[0] = v64;
      *(_DWORD *)uint64_t v63 = 136315138;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v60, (uint64_t)v30, &demangling cache variable for type metadata for UUID?);
      uint64_t v65 = v156;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v30, 1, v156) == 1)
      {
        uint64_t v66 = 7104878;
        unint64_t v67 = 0xE300000000000000;
      }
      else
      {
        uint64_t v87 = v142;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v142, v30, v65);
        (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v141, v87, v65);
        uint64_t v66 = String.init<A>(reflecting:)();
        unint64_t v67 = v88;
        uint64_t v89 = v87;
        uint64_t v60 = v149;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v89, v65);
      }
      uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v60, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1B0DF7000, v61, v62, "Received attachmentACK %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v64, -1, -1);
      MEMORY[0x1B3EA39E0](v63, -1, -1);

      uint64_t v85 = v154;
      uint64_t v56 = v157;
    }
    else
    {
      outlined destroy of UUID?(v60, &demangling cache variable for type metadata for UUID?);

      uint64_t v85 = v154;
    }
    uint64_t v90 = v146;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v56, v146, &demangling cache variable for type metadata for UUID?);
    uint64_t v91 = v156;
    v151 = *(uint64_t **)(v57 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v151)(v90, 1, v156) == 1)
    {
      outlined destroy of UUID?(v90, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      uint64_t v92 = (uint64_t)v143;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v143, v90, v91);
      uint64_t v93 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v85 + 600))(v159);
      uint64_t v94 = (void (*)(void, void, void))specialized Dictionary._Variant.removeValue(forKey:)(v92);
      v93(v159, 0);
      if (v94)
      {
        swift_retain_n();
        uint64_t v95 = Logger.logObject.getter();
        os_log_type_t v96 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v95, v96))
        {
          uint64_t v97 = (uint8_t *)swift_slowAlloc();
          uint64_t v98 = swift_slowAlloc();
          v159[0] = v98;
          *(_DWORD *)uint64_t v97 = 136315138;
          uint64_t v160 = (uint64_t)v94;
          type metadata accessor for Attachment(0);
          swift_retain();
          uint64_t v99 = String.init<A>(reflecting:)();
          uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v159);
          uint64_t v91 = v156;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1B0DF7000, v95, v96, "Found attachment %s", v97, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v98, -1, -1);
          MEMORY[0x1B3EA39E0](v97, -1, -1);
        }
        else
        {
          swift_release_n();
        }

        uint64_t v136 = v155;
        v137 = v143;
        PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(v94, v150, 1);
        swift_release();
        (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v91);
LABEL_46:
        outlined destroy of UUID?(v157, &demangling cache variable for type metadata for UUID?);
        v118 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack;
        uint64_t v119 = (uint64_t)v153;
LABEL_47:
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v119, v118);
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v92, v91);
      uint64_t v56 = v157;
    }
    uint64_t v120 = v148;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v56, v148, &demangling cache variable for type metadata for UUID?);
    swift_retain_n();
    v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = swift_slowAlloc();
      uint64_t v158 = swift_slowAlloc();
      v159[0] = v158;
      *(_DWORD *)uint64_t v123 = 136315394;
      uint64_t v124 = PluginAttachmentLedgerTopic.description.getter();
      uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, v159);
      uint64_t v126 = v156;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v123 + 12) = 2080;
      uint64_t v127 = v139;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v120, v139, &demangling cache variable for type metadata for UUID?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v151)(v127, 1, v126) == 1)
      {
        uint64_t v128 = 7104878;
        unint64_t v129 = 0xE300000000000000;
      }
      else
      {
        uint64_t v130 = v155;
        v131 = v142;
        (*(void (**)(char *, uint64_t, uint64_t))(v155 + 32))(v142, v127, v126);
        (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v141, v131, v126);
        uint64_t v128 = String.init<A>(reflecting:)();
        uint64_t v132 = v126;
        unint64_t v129 = v133;
        (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v132);
      }
      uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v148, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1B0DF7000, v121, v122, "%s pendingAttachment with UUID %s not found", (uint8_t *)v123, 0x16u);
      uint64_t v134 = v158;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v134, -1, -1);
      MEMORY[0x1B3EA39E0](v123, -1, -1);
    }
    else
    {
      swift_release_n();
      outlined destroy of UUID?(v120, &demangling cache variable for type metadata for UUID?);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    unsigned char *v135 = 4;
    swift_willThrow();
    goto LABEL_46;
  }
  if (one-time initialization token for attachmentLedgerTopic != -1) {
LABEL_49:
  }
    swift_once();
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of Attachment.MMCSMetadata(a1, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    v159[0] = v50;
    *(_DWORD *)uint64_t v49 = 136315138;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    uint64_t v51 = Message.debugDescription.getter();
    uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    _os_log_impl(&dword_1B0DF7000, v47, v48, "Unknown added event received %s", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v50, -1, -1);
    MEMORY[0x1B3EA39E0](v49, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  }
}

uint64_t PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v84 = a2;
  uint64_t v93 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v83 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v89 = (uint8_t *)&v83 - v6;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v85 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v83 - v11;
  uint64_t v87 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  uint64_t v13 = MEMORY[0x1F4188790](v87);
  uint64_t v86 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v83 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char **)((char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v92 = v2;
  uint64_t v21 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E4FBCBF0], v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if (v21)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = (uint8_t *)__swift_project_value_buffer(v23, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v25 = v93;
  outlined init with copy of Attachment.MMCSMetadata((uint64_t)v93, (uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  unint64_t v88 = v24;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v90 = v12;
  uint64_t v91 = (uint64_t (*)(uint64_t, void))v7;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    v94[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    uint64_t v31 = Message.debugDescription.getter();
    uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v94);
    uint64_t v12 = v90;
    uint64_t v7 = (uint64_t)v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    _os_log_impl(&dword_1B0DF7000, v26, v27, "Notified of attachment being removed %s", v29, 0xCu);
    swift_arrayDestroy();
    uint64_t v33 = v30;
    uint64_t v25 = v93;
    MEMORY[0x1B3EA39E0](v33, -1, -1);
    MEMORY[0x1B3EA39E0](v29, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  }

  uint64_t v34 = *v25;
  unint64_t v35 = v25[1];
  outlined copy of Data._Representation(*v25, v35);
  uint64_t v36 = (uint64_t)v89;
  UUID.init(data:)(v34, v35, (uint64_t)v89);
  if (v8[6](v36, 1, v7) == 1)
  {
    outlined destroy of UUID?(v36, &demangling cache variable for type metadata for UUID?);
    uint64_t v37 = v86;
    outlined init with copy of Attachment.MMCSMetadata((uint64_t)v25, v86, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v94[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      uint64_t v42 = Message.debugDescription.getter();
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v37, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      _os_log_impl(&dword_1B0DF7000, v38, v39, "Failed to process attachmentUUID on remove message: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v41, -1, -1);
      MEMORY[0x1B3EA39E0](v40, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v37, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    unsigned char *v69 = 1;
    return swift_willThrow();
  }
  uint64_t v93 = (uint64_t *)v8;
  uint64_t v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v8[4])(v12, v36, v7);
  uint64_t v45 = v92;
  uint64_t v46 = *(uint64_t (**)(uint64_t))(*(void *)v92 + 632);
  unint64_t v47 = v46(v44);
  if (v47 >> 62) {
    uint64_t v89 = (uint8_t *)_CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v89 = *(uint8_t **)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v48 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v48);
  *(&v83 - 2) = v12;
  uint64_t v49 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v45 + 648))(v94);
  uint64_t v51 = v50;
  uint64_t v52 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:), (uint64_t)(&v83 - 4));
  uint64_t v53 = v52;
  if (!(*v51 >> 62))
  {
    uint64_t v54 = *(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v54 >= v52) {
      goto LABEL_13;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v54 < v53) {
    goto LABEL_30;
  }
LABEL_13:
  specialized Array.replaceSubrange<A>(_:with:)(v53, v54);
  uint64_t v55 = v49(v94, 0);
  uint64_t v53 = v92;
  unint64_t v56 = v46(v55);
  if (!(v56 >> 62))
  {
    uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_15;
  }
LABEL_31:
  uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
LABEL_15:
  uint64_t v58 = (void (*)(void, void))v91;
  uint64_t v59 = v93;
  swift_bridgeObjectRelease();
  if (v89 == (uint8_t *)v57)
  {
    swift_retain_n();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v60, v61))
    {
      os_log_type_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      v94[0] = v63;
      *(_DWORD *)os_log_type_t v62 = 136315138;
      uint64_t v89 = v62 + 4;
      (*(void (**)(void))(*(void *)v53 + 584))();
      type metadata accessor for Attachment(0);
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v64 = Dictionary.Keys.description.getter();
      unint64_t v66 = v65;
      swift_bridgeObjectRelease();
      uint64_t v67 = v64;
      uint64_t v59 = v93;
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v66, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v60, v61, "Failed to remove attachment, attachment not found, pendingAttachments: %s", v62, 0xCu);
      swift_arrayDestroy();
      uint64_t v68 = v63;
      uint64_t v58 = (void (*)(void, void))v91;
      MEMORY[0x1B3EA39E0](v68, -1, -1);
      MEMORY[0x1B3EA39E0](v62, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *uint64_t v80 = 4;
    swift_willThrow();
    return ((uint64_t (*)(char *, void))v59[1])(v90, v58);
  }
  else
  {
    uint64_t v71 = v85;
    uint64_t v93 = (uint64_t *)v59[2];
    ((void (*)(char *, char *, void (*)(void, void)))v93)(v85, v90, v58);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      v94[0] = (uint64_t)v89;
      unint64_t v88 = v74;
      *(_DWORD *)os_log_type_t v74 = 136315138;
      uint64_t v75 = v59;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v91 = (uint64_t (*)(uint64_t, void))v59[1];
      v91((uint64_t)v85, v58);
      unint64_t v78 = v88;
      _os_log_impl(&dword_1B0DF7000, v72, v73, "Successfully removed attachment %s", v88, 0xCu);
      uint64_t v79 = (uint64_t)v89;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v79, -1, -1);
      MEMORY[0x1B3EA39E0](v78, -1, -1);
    }
    else
    {
      uint64_t v75 = v59;
      uint64_t v91 = (uint64_t (*)(uint64_t, void))v59[1];
      v91((uint64_t)v71, v58);
    }

    swift_beginAccess();
    uint64_t v81 = (uint64_t)v90;
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v90);
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v82 = (uint64_t)v83;
    ((void (*)(char *, uint64_t, void (*)(void, void)))v93)(v83, v81, v58);
    ((void (*)(uint64_t, void, uint64_t, void (*)(void, void)))v75[7])(v82, 0, 1, v58);
    PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v82, v84);
    outlined destroy of UUID?(v82, &demangling cache variable for type metadata for UUID?);
    return v91(v81, v58);
  }
}

uint64_t PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for UUID?);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v12, v16 + v14, &demangling cache variable for type metadata for UUID?);
  *(void *)(v16 + v15) = v21;
  *(void *)(v16 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = v2;
  aBlock[4] = partial apply for closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_59;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v13;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v19 = v22;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v8, v5, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v19);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  return swift_release();
}

uint64_t PluginAttachmentLedgerTopic.processAttachmentStatusChanged(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v172 = a2;
  uint64_t v197 = a1;
  uint64_t v187 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1F4188790](v187);
  v192 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v171 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  MEMORY[0x1F4188790](v4 - 8);
  v193 = (uint64_t *)((char *)&v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  MEMORY[0x1F4188790](v173);
  uint64_t v174 = (uint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  v181 = (char *)&v171 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  v190 = (char *)&v171 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  v183 = (char *)&v171 - v14;
  MEMORY[0x1F4188790](v13);
  v184 = (char *)&v171 - v15;
  uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  MEMORY[0x1F4188790](v16 - 8);
  v191 = (uint64_t *)((char *)&v171 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v171 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v175 = (uint64_t)&v171 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v176 = (uint64_t)&v171 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v189 = (uint64_t)&v171 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v180 = (uint64_t)&v171 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v186 = (uint64_t)&v171 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v178 = (uint64_t)&v171 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v182 = (uint64_t)&v171 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v188 = (uint64_t)&v171 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v179 = (uint64_t)&v171 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v185 = (uint64_t)&v171 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v44 = (char *)&v171 - v43;
  MEMORY[0x1F4188790](v42);
  uint64_t v46 = (char *)&v171 - v45;
  uint64_t v47 = type metadata accessor for DispatchPredicate();
  uint64_t v48 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v50 = (uint64_t *)((char *)&v171 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v194 = v2;
  uint64_t v51 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v50 = v51;
  (*(void (**)(void *, void, uint64_t))(v48 + 104))(v50, *MEMORY[0x1E4FBCBF0], v47);
  id v52 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)();
  uint64_t v54 = *(void (**)(void *, uint64_t))(v48 + 8);
  uint64_t v53 = v48 + 8;
  v54(v50, v47);
  if ((v51 & 1) == 0)
  {
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v207 = v7;
  v55(v46, 1, 1, v7);
  uint64_t v7 = v197;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v197, (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v56 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v53 = (uint64_t)v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 48))(v20, 1, v56) != 1)
  {
    uint64_t v195 = v8;
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v177 = v46;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v68 = v191;
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v20, (uint64_t)v191, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      uint64_t v69 = *v68;
      unint64_t v70 = v68[1];
      outlined copy of Data._Representation(v69, v70);
      UUID.init(data:)(v69, v70, (uint64_t)v44);
      outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v44, (uint64_t)v46, &demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for attachmentLedgerTopic != -1) {
        swift_once();
      }
      uint64_t v71 = type metadata accessor for Logger();
      uint64_t v197 = __swift_project_value_buffer(v71, (uint64_t)static Log.attachmentLedgerTopic);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v72, v73))
      {
        os_log_type_t v74 = (uint8_t *)swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        uint64_t v206 = v75;
        *(_DWORD *)os_log_type_t v74 = 136315138;
        swift_beginAccess();
        uint64_t v76 = v185;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v46, v185, &demangling cache variable for type metadata for UUID?);
        uint64_t v77 = v179;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v76, v179, &demangling cache variable for type metadata for UUID?);
        uint64_t v78 = v195;
        uint64_t v79 = v207;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v77, 1, v207) == 1)
        {
          uint64_t v80 = 7104878;
          unint64_t v81 = 0xE300000000000000;
        }
        else
        {
          uint64_t v97 = v184;
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v184, v77, v79);
          (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v183, v97, v79);
          uint64_t v80 = String.init<A>(reflecting:)();
          unint64_t v81 = v98;
          (*(void (**)(char *, uint64_t))(v78 + 8))(v97, v79);
        }
        outlined destroy of UUID?(v185, &demangling cache variable for type metadata for UUID?);
        uint64_t v203 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v206);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v72, v73, "Received attachmentStatusACK %s", v74, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v75, -1, -1);
        MEMORY[0x1B3EA39E0](v74, -1, -1);

        uint64_t v53 = (uint64_t)v177;
      }
      else
      {
      }
      uint64_t v99 = v194;
      swift_beginAccess();
      uint64_t v100 = v188;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v53, v188, &demangling cache variable for type metadata for UUID?);
      uint64_t v101 = v195;
      uint64_t v102 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 48);
      uint64_t v103 = v207;
      int v104 = v102(v100, 1, v207);
      uint64_t v105 = (uint64_t)v190;
      if (v104 == 1)
      {
        outlined destroy of UUID?(v100, &demangling cache variable for type metadata for UUID?);
LABEL_30:
        swift_retain_n();
        uint64_t v116 = Logger.logObject.getter();
        os_log_type_t v117 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v116, v117))
        {
          uint64_t v118 = swift_slowAlloc();
          uint64_t v197 = swift_slowAlloc();
          uint64_t v203 = v197;
          *(_DWORD *)uint64_t v118 = 136315394;
          uint64_t v119 = PluginAttachmentLedgerTopic.description.getter();
          uint64_t v198 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, &v203);
          v196 = &v199;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v118 + 12) = 2080;
          uint64_t v121 = v182;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v53, v182, &demangling cache variable for type metadata for UUID?);
          uint64_t v122 = v178;
          uint64_t v123 = v207;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v121, v178, &demangling cache variable for type metadata for UUID?);
          if (v102(v122, 1, v123) == 1)
          {
            uint64_t v124 = 7104878;
            unint64_t v125 = 0xE300000000000000;
          }
          else
          {
            uint64_t v156 = v195;
            uint64_t v157 = v184;
            (*(void (**)(char *, uint64_t, uint64_t))(v195 + 32))(v184, v122, v123);
            (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v183, v157, v123);
            uint64_t v124 = String.init<A>(reflecting:)();
            uint64_t v158 = v123;
            unint64_t v125 = v159;
            (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v158);
          }
          uint64_t v126 = (uint64_t)v191;
          outlined destroy of UUID?(v182, &demangling cache variable for type metadata for UUID?);
          uint64_t v198 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, &v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B0DF7000, v116, v117, "%s Attachment with UUID %s not found", (uint8_t *)v118, 0x16u);
          uint64_t v160 = v197;
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v160, -1, -1);
          MEMORY[0x1B3EA39E0](v118, -1, -1);

          uint64_t v53 = (uint64_t)v177;
        }
        else
        {
          swift_release_n();

          uint64_t v126 = (uint64_t)v191;
        }
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
        swift_allocError();
        unsigned char *v161 = 4;
        swift_willThrow();
        unint64_t v114 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack;
        uint64_t v115 = v126;
        goto LABEL_56;
      }
      uint64_t v106 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 32))(v190, v100, v103);
      uint64_t v107 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 608))(v106);
      if (!*(void *)(v107 + 16) || (unint64_t v108 = specialized __RawDictionaryStorage.find<A>(_:)(v105), (v109 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v105, v103);
        goto LABEL_30;
      }
      os_log_type_t v110 = *(void (**)(uint64_t))(*(void *)(v107 + 56) + 16 * v108);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v111 = (uint64_t)v191;
      uint64_t v112 = v174;
      outlined init with copy of Attachment.MMCSMetadata((uint64_t)v191, v174, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      swift_storeEnumTagMultiPayload();
      uint64_t v113 = v196;
      v110(v112);
      if (v113)
      {
        swift_release();
        outlined destroy of UUID?(v112, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
        (*(void (**)(char *, uint64_t))(v195 + 8))(v190, v103);
        unint64_t v114 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack;
        uint64_t v115 = v111;
LABEL_56:
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v115, v114);
        return outlined destroy of UUID?(v53, &demangling cache variable for type metadata for UUID?);
      }
      swift_release();
      outlined destroy of UUID?(v112, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
      (*(void (**)(char *, uint64_t))(v195 + 8))(v190, v103);
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v111, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
LABEL_60:
      swift_beginAccess();
      PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v53, v172);
      return outlined destroy of UUID?(v53, &demangling cache variable for type metadata for UUID?);
    }
    uint64_t v83 = v193;
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v20, (uint64_t)v193, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    uint64_t v84 = *v83;
    unint64_t v85 = v83[1];
    outlined copy of Data._Representation(v84, v85);
    UUID.init(data:)(v84, v85, (uint64_t)v44);
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v44, (uint64_t)v46, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    uint64_t v197 = __swift_project_value_buffer(v86, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      uint64_t v90 = swift_slowAlloc();
      uint64_t v206 = v90;
      *(_DWORD *)uint64_t v89 = 136315138;
      swift_beginAccess();
      uint64_t v91 = v186;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v46, v186, &demangling cache variable for type metadata for UUID?);
      uint64_t v92 = v180;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v91, v180, &demangling cache variable for type metadata for UUID?);
      uint64_t v93 = v195;
      uint64_t v94 = v207;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v92, 1, v207) == 1)
      {
        uint64_t v95 = 7104878;
        unint64_t v96 = 0xE300000000000000;
      }
      else
      {
        uint64_t v127 = v184;
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 32))(v184, v92, v94);
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v183, v127, v94);
        uint64_t v95 = String.init<A>(reflecting:)();
        unint64_t v96 = v128;
        (*(void (**)(char *, uint64_t))(v93 + 8))(v127, v94);
      }
      outlined destroy of UUID?(v186, &demangling cache variable for type metadata for UUID?);
      uint64_t v203 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, &v206);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v87, v88, "Received attachmentStatusFullUpdate %s", v89, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v90, -1, -1);
      MEMORY[0x1B3EA39E0](v89, -1, -1);

      uint64_t v53 = (uint64_t)v177;
    }
    else
    {
    }
    uint64_t v129 = v194;
    swift_beginAccess();
    uint64_t v130 = v189;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v53, v189, &demangling cache variable for type metadata for UUID?);
    uint64_t v131 = v195;
    uint64_t v132 = v207;
    v192 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48);
    if (v192(v130, 1, v207) == 1)
    {
      outlined destroy of UUID?(v130, &demangling cache variable for type metadata for UUID?);
LABEL_46:
      swift_retain_n();
      uint64_t v146 = Logger.logObject.getter();
      os_log_type_t v147 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v146, v147))
      {
        uint64_t v148 = swift_slowAlloc();
        uint64_t v197 = swift_slowAlloc();
        uint64_t v203 = v197;
        *(_DWORD *)uint64_t v148 = 136315394;
        uint64_t v149 = PluginAttachmentLedgerTopic.description.getter();
        uint64_t v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v150, &v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v148 + 12) = 2080;
        uint64_t v151 = v176;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v53, v176, &demangling cache variable for type metadata for UUID?);
        uint64_t v152 = v175;
        uint64_t v153 = v207;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v151, v175, &demangling cache variable for type metadata for UUID?);
        if (v192(v152, 1, v153) == 1)
        {
          uint64_t v154 = 7104878;
          unint64_t v155 = 0xE300000000000000;
        }
        else
        {
          uint64_t v162 = v195;
          v163 = v184;
          (*(void (**)(char *, uint64_t, uint64_t))(v195 + 32))(v184, v152, v153);
          (*(void (**)(char *, char *, uint64_t))(v162 + 16))(v183, v163, v153);
          uint64_t v154 = String.init<A>(reflecting:)();
          uint64_t v164 = v153;
          unint64_t v155 = v165;
          (*(void (**)(char *, uint64_t))(v162 + 8))(v163, v164);
        }
        outlined destroy of UUID?(v151, &demangling cache variable for type metadata for UUID?);
        uint64_t v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v155, &v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v146, v147, "%s Attachment with UUID %s not found", (uint8_t *)v148, 0x16u);
        uint64_t v166 = v197;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v166, -1, -1);
        MEMORY[0x1B3EA39E0](v148, -1, -1);

        uint64_t v53 = (uint64_t)v177;
      }
      else
      {
        swift_release_n();
      }
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      unsigned char *v167 = 4;
      swift_willThrow();
      unint64_t v114 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full;
      uint64_t v115 = (uint64_t)v193;
      goto LABEL_56;
    }
    unint64_t v133 = v181;
    uint64_t v134 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v131 + 32))(v181, v130, v132);
    v135 = *(uint64_t (**)(uint64_t))(*(void *)v129 + 632);
    unint64_t v136 = v135(v134);
    MEMORY[0x1F4188790](v136);
    *(&v171 - 2) = (uint64_t)v133;
    v137 = v196;
    unint64_t v138 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), (uint64_t)(&v171 - 4), v136);
    char v140 = v139;
    v196 = v137;
    uint64_t v141 = swift_bridgeObjectRelease();
    if (v140)
    {
      (*(void (**)(char *, uint64_t))(v195 + 8))(v133, v207);
      uint64_t v53 = (uint64_t)v177;
      goto LABEL_46;
    }
    uint64_t result = v135(v141);
    if ((result & 0xC000000000000001) == 0)
    {
      uint64_t v53 = (uint64_t)v177;
      uint64_t v142 = v207;
      uint64_t v143 = (uint64_t)v193;
      uint64_t v144 = v181;
      if ((v138 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v138 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
LABEL_43:
        swift_bridgeObjectRelease();
        uint64_t v145 = v196;
        AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.uploadStatus.getter(&v203);
        if (v145)
        {
          outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v143, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
          swift_release();
          (*(void (**)(char *, uint64_t))(v195 + 8))(v144, v142);
          return outlined destroy of UUID?(v53, &demangling cache variable for type metadata for UUID?);
        }
        uint64_t v168 = v203;
        uint64_t v169 = v204;
        unint64_t v170 = v205;
        uint64_t v200 = v203;
        uint64_t v201 = v204;
        unint64_t v202 = v205;
        Attachment.update(_:)();
        swift_release();
        outlined consume of Attachment.MMCSMetadata.UploadStatus(v168, v169, v170);
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v143, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
        (*(void (**)(char *, uint64_t))(v195 + 8))(v144, v142);
        uint64_t v53 = (uint64_t)v177;
        goto LABEL_60;
      }
      __break(1u);
      return result;
    }
    MEMORY[0x1B3EA25C0](v138, result);
    uint64_t v53 = (uint64_t)v177;
    uint64_t v142 = v207;
    uint64_t v143 = (uint64_t)v193;
    uint64_t v144 = v181;
    goto LABEL_43;
  }
  if (one-time initialization token for attachmentLedgerTopic != -1) {
LABEL_62:
  }
    swift_once();
  uint64_t v57 = type metadata accessor for Logger();
  __swift_project_value_buffer(v57, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v58 = v192;
  outlined init with copy of Attachment.MMCSMetadata(v7, (uint64_t)v192, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v59, v60))
  {
    os_log_type_t v61 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = v53;
    uint64_t v63 = swift_slowAlloc();
    uint64_t v206 = v63;
    *(_DWORD *)os_log_type_t v61 = 136315138;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    uint64_t v64 = Message.debugDescription.getter();
    uint64_t v203 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v206);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v58, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    _os_log_impl(&dword_1B0DF7000, v59, v60, "Unknown added event received %s", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v63, -1, -1);
    MEMORY[0x1B3EA39E0](v61, -1, -1);

    uint64_t v66 = v62;
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v58, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);

    uint64_t v66 = v53;
  }
  return outlined destroy of UUID?(v66, &demangling cache variable for type metadata for UUID?);
}

uint64_t PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(void (*a1)(void, void, void), uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  int v58 = a3;
  uint64_t v57 = a2;
  uint64_t v67 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v56 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v63 = v8;
  uint64_t v64 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>);
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>>);
  uint64_t v61 = *(void *)(v16 - 8);
  uint64_t v62 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void **)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *(void *)uint64_t v22 = v23;
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v22, *MEMORY[0x1E4FBCBF0], v19);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  if (v23)
  {
    uint64_t v25 = *(uint64_t (**)(unsigned char *))(*v4 + 648);
    swift_retain();
    uint64_t v22 = (char *)v25(v69);
    uint64_t v27 = v26;
    MEMORY[0x1B3EA1CF0]();
    if (*(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
  uint64_t v28 = v67;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  ((void (*)(unsigned char *, void))v22)(v69, 0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v29 = v4[13];
  *(void *)(swift_allocObject() + 16) = v29;
  type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  Publisher.compactMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>);
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
  uint64_t v30 = v60;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v30);
  uint64_t v31 = swift_allocObject();
  swift_weakInit();
  uint64_t v32 = (uint64_t)v28 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  uint64_t v34 = v64;
  uint64_t v33 = v65;
  uint64_t v35 = v66;
  uint64_t v67 = *(void (**)(void, void, void))(v65 + 16);
  v67(v64, v32, v66);
  unint64_t v36 = (*(unsigned __int8 *)(v33 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v37 + v36, v34, v35);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>>);
  uint64_t v38 = v62;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v18, v38);
  uint64_t v39 = (void *)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentListeners);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v68 = (void *)*v39;
  uint64_t v41 = v68;
  *uint64_t v39 = 0x8000000000000000;
  unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
  uint64_t v44 = v41[2];
  BOOL v45 = (v42 & 1) == 0;
  uint64_t v46 = v44 + v45;
  if (__OFADD__(v44, v45))
  {
    __break(1u);
    goto LABEL_16;
  }
  LOBYTE(v38) = v42;
  if (v41[3] >= v46)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_8;
    }
LABEL_16:
    specialized _NativeDictionary.copy()();
    uint64_t v41 = v68;
    goto LABEL_8;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, isUniquelyReferenced_nonNull_native);
  uint64_t v41 = v68;
  unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
  if ((v38 & 1) != (v48 & 1))
  {
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v43 = v47;
LABEL_8:
  char v49 = v58;
  *uint64_t v39 = v41;
  swift_bridgeObjectRelease();
  uint64_t v50 = (void *)*v39;
  if ((v38 & 1) == 0)
  {
    uint64_t v51 = (uint64_t)v64;
    v67(v64, v32, v66);
    specialized _NativeDictionary._insert(at:key:value:)(v43, v51, MEMORY[0x1E4FBC870], v50);
  }
  AnyCancellable.store(in:)();
  swift_endAccess();
  uint64_t result = swift_release();
  if ((v49 & 1) == 0)
  {
    uint64_t v53 = (uint64_t)v56;
    uint64_t v54 = v66;
    v67(v56, v32, v66);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v53, 0, 1, v54);
    PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v53, v57);
    return outlined destroy of UUID?(v53, &demangling cache variable for type metadata for UUID?);
  }
  return result;
}

NSObject *PluginAttachmentLedgerTopic.processAttachmentUpdateAdd(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  unint64_t v47 = (uint8_t *)a1;
  uint64_t v40 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v6 = MEMORY[0x1F4188790](v40);
  uint64_t v8 = (void *)((char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v37 - v9;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (void *)((char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void **)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FBCBF0], v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if (v15)
  {
    uint64_t v41 = v8;
    uint64_t v39 = a2;
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of Attachment.MMCSMetadata((uint64_t)v47, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v37[1] = v18;
    uint64_t v23 = v22;
    v46[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v38 = v4;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
    uint64_t v24 = Message.debugDescription.getter();
    v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v46);
    uint64_t v4 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    _os_log_impl(&dword_1B0DF7000, v19, v20, "Notified of new attachment %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    MEMORY[0x1B3EA39E0](v21, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }

  uint64_t v26 = v41;
  outlined init with copy of Attachment.MMCSMetadata((uint64_t)v47, (uint64_t)v41, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v27 = outlined init with copy of UserNotificationCenter((uint64_t)(v4 + 26), (uint64_t)v46);
  uint64_t v28 = (uint64_t (*)(uint64_t))v4[13];
  (*(void (**)(void *__return_ptr, uint64_t))(*v4 + 392))(v44, v27);
  v42[0] = v44[0];
  v42[1] = v44[1];
  v42[2] = v44[2];
  long long v43 = v45;
  uint64_t result = specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(v26, (uint64_t)v46, v28, v42);
  if (!v3)
  {
    uint64_t v30 = result;
    swift_retain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v46[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      unint64_t v47 = v33 + 4;
      v44[0] = v30;
      type metadata accessor for Attachment(0);
      swift_retain();
      uint64_t v35 = String.init<A>(reflecting:)();
      v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v31, v32, "Full received attachment: %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v34, -1, -1);
      MEMORY[0x1B3EA39E0](v33, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(v30, v39, 0);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v16 = *(void *)(v9 - 8);
    outlined init with copy of Attachment.MMCSMetadata(v8 + *(void *)(v16 + 72) * v7, a3, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    uint64_t v11 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v14 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v13 = v14;
    uint64_t v11 = a3;
    uint64_t v12 = 1;
  }
  return v10(v11, v12, 1, v13);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v30 = v5;
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
    outlined init with copy of Attachment.MMCSMetadata(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    int v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v28 = a1;
      uint64_t v18 = v17;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v32 = v27;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v29 = a3;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v32);
      int v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
      *(_WORD *)(v18 + 12) = 2080;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
      uint64_t v21 = Message.debugDescription.getter();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v32);
      a3 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      _os_log_impl(&dword_1B0DF7000, v14, (os_log_type_t)v26, "Local encryptionSlot updated for attachment: %s to %s", (uint8_t *)v18, 0x16u);
      uint64_t v23 = v27;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      uint64_t v24 = v18;
      a1 = v28;
      MEMORY[0x1B3EA39E0](v24, -1, -1);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    }

    PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a3, a1);
    return swift_release();
  }
  return result;
}

uint64_t PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v62 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v58 = v10;
  uint64_t v59 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v49 - v11;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  uint64_t v55 = *(void *)(updated - 8);
  uint64_t v14 = MEMORY[0x1F4188790](updated);
  uint64_t v57 = (uint64_t)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v51 = (uint64_t)v49 - v17;
  uint64_t v56 = v18;
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)v49 - v19;
  uint64_t v61 = v2;
  uint64_t v64 = v2;
  uint64_t v65 = a1;
  uint64_t v66 = a2;
  uint64_t v21 = lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v63 = v20;
  v49[0] = v21;
  v49[1] = updated;
  static Message.with(_:)();
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v54 = v8 + 16;
  v53(v12, a1, v7);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v60 = a1;
  uint64_t v52 = v7;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v50 = v8;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    v68[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v7);
    _os_log_impl(&dword_1B0DF7000, v23, v24, "[Encryption] Updating attachment %s's encryption", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    uint64_t v31 = v27;
    uint64_t v8 = v50;
    MEMORY[0x1B3EA39E0](v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  uint64_t v32 = v51;
  outlined init with copy of Attachment.MMCSMetadata((uint64_t)v63, v51, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    v68[0] = v36;
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v37 = Message.debugDescription.getter();
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v32, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    _os_log_impl(&dword_1B0DF7000, v33, v34, "[Encryption] Encryption update message %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v36, -1, -1);
    MEMORY[0x1B3EA39E0](v35, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v32, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  }

  uint64_t v39 = v52;
  uint64_t v40 = type metadata accessor for TaskPriority();
  uint64_t v41 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v62, 1, 1, v40);
  uint64_t v42 = (uint64_t)v63;
  uint64_t v43 = v57;
  outlined init with copy of Attachment.MMCSMetadata((uint64_t)v63, v57, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  uint64_t v44 = v59;
  v53(v59, v60, v39);
  unint64_t v45 = (*(unsigned __int8 *)(v55 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  unint64_t v46 = (v56 + *(unsigned __int8 *)(v8 + 80) + v45) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v47 = (char *)swift_allocObject();
  *((void *)v47 + 2) = 0;
  *((void *)v47 + 3) = 0;
  *((void *)v47 + 4) = v61;
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v43, (uint64_t)&v47[v45], type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v47[v46], v44, v39);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v41, (uint64_t)&async function pointer to partial apply for closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:), (uint64_t)v47);
  swift_release();
  return outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v42, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t Subscribers.Completion<>.pluginShutdownReason.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PluginRpcError();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (id *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - v12;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    char v15 = 5;
LABEL_6:
    *a1 = v15;
    return result;
  }
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v16 = *(unsigned __int8 *)v11;

    uint64_t result = swift_bridgeObjectRelease();
    if (v16 == 14)
    {
      char v15 = 7;
      goto LABEL_6;
    }
    *a1 = 0;
  }
  else
  {
    *a1 = 6;
    return outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PluginRpcError);
  }
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v21 - v10;
  v21[4] = a1;
  v21[5] = a2;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
  static Message.with(_:)();
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of Attachment.MMCSMetadata((uint64_t)v11, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    v21[1] = a3;
    int v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v22 = v17;
    *(_DWORD *)int v16 = 136315138;
    uint64_t v18 = Message.debugDescription.getter();
    v21[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest);
    _os_log_impl(&dword_1B0DF7000, v13, v14, "[Subscribe] Sending attachmentAck message=%s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v17, -1, -1);
    MEMORY[0x1B3EA39E0](v16, -1, -1);
  }
  else
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest);
  }

  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  return outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  static Message.with(_:)();
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t result = outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1B1138A80;
    uint64_t v25 = UUID.uuid.getter();
    char v26 = v15;
    char v27 = v16;
    char v28 = v17;
    char v29 = v18;
    char v30 = v19;
    char v31 = v20;
    char v32 = v21;
    char v33 = v22;
    *(void *)(v14 + 32) = specialized Data.init<A>(_:)((uint64_t)&v25, (uint64_t)&v34);
    *(void *)(v14 + 40) = v23;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v14;
  }
  a1[1] = a3;
  return result;
}

Swift::Void __swiftcall PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint8_t **)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    char v32 = v4;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
    static Message.with(_:)();
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    char v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v30 = v18;
    char v31 = v7;
    *(_DWORD *)char v17 = 136315138;
    uint64_t v34 = v18;
    char v28 = v17 + 4;
    char v29 = v17;
    uint64_t v19 = v0[29];
    uint64_t v20 = v0[30];
    __swift_project_boxed_opaque_existential_1(v0 + 26, v19);
    char v21 = v32;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    uint64_t v25 = v29;
    _os_log_impl(&dword_1B0DF7000, v15, v16, "[Encryption] Updating localEncryptionID to: %s", v29, 0xCu);
    uint64_t v26 = v30;
    swift_arrayDestroy();
    uint64_t v27 = v26;
    uint64_t v7 = v31;
    MEMORY[0x1B3EA39E0](v27, -1, -1);
    MEMORY[0x1B3EA39E0](v25, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttachmentLedger_EncryptionID(0);
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  static Message.with(_:)();
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v4, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a2[29];
  uint64_t v9 = a2[30];
  __swift_project_boxed_opaque_existential_1(a2 + 26, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t v23 = UUID.uuid.getter();
  char v24 = v10;
  char v25 = v11;
  char v26 = v12;
  char v27 = v13;
  char v28 = v14;
  char v29 = v15;
  char v30 = v16;
  char v31 = v17;
  uint64_t v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t result = outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v20;
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v8 - 8);
  char v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  static Message.with(_:)();
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v10, 0, 1, updated);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v10, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v9 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  char v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *(void *)(a2 + 112);
  uint64_t v12 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v13;
  a1[1] = v12;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  static Message.with(_:)();
  uint64_t v14 = (uint64_t)a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0) + 24);
  outlined destroy of UUID?(v14, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v11, v14, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, updated);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = UUID.uuid.getter();
  char v24 = v9;
  char v25 = v10;
  char v26 = v11;
  char v27 = v12;
  char v28 = v13;
  char v29 = v14;
  char v30 = v15;
  char v31 = v16;
  uint64_t v17 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  uint64_t v19 = v18;
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v19;
  outlined init with copy of Attachment.MMCSMetadata(a3, (uint64_t)v8, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  uint64_t v20 = a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0)
               + 24);
  outlined destroy of UUID?(v20, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate((uint64_t)v8, v20, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  v6[15] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v6[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:), 0, 0);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  return MEMORY[0x1F4188160](v3, 0, 0, 0xD000000000000018, 0x80000001B115D9F0, closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)partial apply, v1, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 128);
    swift_task_dealloc();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v4, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    uint64_t v3 = closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t (*v37)(void);
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  uint64_t v43 = v0;
  swift_task_dealloc();
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[19];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  uint64_t v8 = v1;
  uint64_t v9 = v1;
  char v10 = Logger.logObject.getter();
  char v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v39 = v10;
    char v13 = v0[13];
    char v12 = v0[14];
    char v14 = v7;
    char v15 = v0[9];
    char v16 = v0[10];
    uint64_t v17 = v0[8];
    uint64_t v18 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v42 = v40;
    *(_DWORD *)uint64_t v18 = 136315394;
    v14(v12, v16, v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v17);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v12, v13, &demangling cache variable for type metadata for UUID?);
    uint64_t v41 = v11;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v17) == 1)
    {
      uint64_t v19 = 0xE300000000000000;
      uint64_t v20 = 7104878;
    }
    else
    {
      char v25 = v0[12];
      char v26 = v0[11];
      char v28 = v0[8];
      char v27 = v0[9];
      (*(void (**)(uint64_t, void, uint64_t))(v27 + 32))(v25, v0[13], v28);
      v14(v26, v25, v28);
      uint64_t v20 = String.init<A>(reflecting:)();
      uint64_t v19 = v29;
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v28);
    }
    char v30 = (void *)v0[19];
    char v31 = v0[9];
    uint64_t v32 = v0[10];
    uint64_t v33 = v0[8];
    outlined destroy of UUID?(v0[14], &demangling cache variable for type metadata for UUID?);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    *(_WORD *)(v18 + 12) = 2080;
    v0[3] = v30;
    uint64_t v34 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v35 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v39, v41, "Failed to update encryption material for attachment %s, reason: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v40, -1, -1);
    MEMORY[0x1B3EA39E0](v18, -1, -1);
  }
  else
  {
    char v21 = (void *)v0[19];
    uint64_t v23 = v0[9];
    uint64_t v22 = v0[10];
    char v24 = v0[8];

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

uint64_t PluginAttachmentLedgerTopic.uploadTokenRequest.getter()
{
  return static Message.with(_:)();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.requestUploadToken()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 288))(&v21);
  uint64_t v4 = v21;
  uint64_t v5 = v24;
  unint64_t v6 = v26;
  if ((v26 & 0x8000000000000000) == 0
    || ((uint64_t v7 = v23 | v22, v8 = v25 | v27, v26 == 0x8000000000000000)
      ? (BOOL v9 = (v23 | v22 | v21 | v24 | v25 | v27) == 0)
      : (BOOL v9 = 0),
        v9))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v21, v22, v23, v24, v25, v26);
  }
  else
  {
    uint64_t v10 = outlined consume of PluginAttachmentLedgerTopic.State(v21, v22, v23, v24, v25, v26);
    if (v6 == 0x8000000000000000 && v4 == 1 && !(v7 | v5 | v8))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(v10);
      *a2 = result;
      return result;
    }
  }
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  char v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v21 = v16;
    *(_DWORD *)char v15 = 136315138;
    swift_retain();
    uint64_t v17 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v19 = v18;
    swift_release();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "Requested uploadToken without being subscribed on %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
  swift_allocError();
  *uint64_t v20 = 3;
  return swift_willThrow();
}

uint64_t PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.refreshUploadToken(), 0, 0);
}

uint64_t PluginAttachmentLedgerTopic.refreshUploadToken()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  uint64_t v2 = type metadata accessor for UploadToken(0);
  *uint64_t v1 = v0;
  v1[1] = PluginAttachmentLedgerTopic.refreshUploadToken();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  return MEMORY[0x1F4188160](v3, 0, 0, 0xD000000000000014, 0x80000001B115DA10, partial apply for closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken(), v4, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.refreshUploadToken(), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = *(void **)(a2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_154_0;
  char v15 = _Block_copy(aBlock);
  id v16 = v12;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  uint64_t v17 = v20;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v8, v5, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
  return swift_release();
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  uint64_t v38 = *(void *)(v40 - 8);
  uint64_t v3 = *(void *)(v38 + 64);
  MEMORY[0x1F4188790](v40);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 288))(&v42, v5);
  uint64_t v8 = v42;
  uint64_t v9 = v45;
  unint64_t v10 = v47;
  if ((v47 & 0x8000000000000000) == 0
    || (uint64_t v11 = v44 | v43, v12 = v46 | v48, v47 == 0x8000000000000000) && !(v11 | v42 | v45 | v12))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v42, v43, v44, v45, v46, v47);
LABEL_5:
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v42 = v17;
      *(_DWORD *)id v16 = 136315138;
      swift_retain();
      uint64_t v18 = PluginAttachmentLedgerTopic.description.getter();
      unint64_t v20 = v19;
      swift_release();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B0DF7000, v14, v15, "Requested uploadToken without being subscribed on %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v17, -1, -1);
      MEMORY[0x1B3EA39E0](v16, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
    uint64_t v21 = swift_allocError();
    char v23 = 3;
LABEL_11:
    *uint64_t v22 = v23;
    uint64_t v42 = v21;
    return CheckedContinuation.resume(throwing:)();
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v42, v43, v44, v45, v46, v47);
  if (v10 != 0x8000000000000000 || v8 != 1 || v11 | v9 | v12) {
    goto LABEL_5;
  }
  uint64_t refreshed = PluginAttachmentLedgerTopic._refreshUploadToken()();
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(refreshed);
  if (!v26)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.attachmentLedgerTopic);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_1B0DF7000, v34, v35, "Failed to find task for uploadToken request right after refreshing", v36, 2u);
      MEMORY[0x1B3EA39E0](v36, -1, -1);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    uint64_t v21 = swift_allocError();
    char v23 = 2;
    goto LABEL_11;
  }
  uint64_t v27 = v26;
  uint64_t v28 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v7, 1, 1, v28);
  uint64_t v29 = v38;
  uint64_t v30 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))((char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v39, v40);
  unint64_t v31 = (*(unsigned __int8 *)(v29 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v32 = (char *)swift_allocObject();
  *((void *)v32 + 2) = 0;
  *((void *)v32 + 3) = 0;
  *((void *)v32 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v32[v31], (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken(), (uint64_t)v32);
  return swift_release();
}

uint64_t PluginAttachmentLedgerTopic._refreshUploadToken()()
{
  uint64_t AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  uint64_t v2 = *(void *)(AuthTokenRequest - 8);
  uint64_t v39 = AuthTokenRequest;
  uint64_t v40 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](AuthTokenRequest);
  uint64_t v41 = v4;
  uint64_t v42 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v36 - v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char **)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v0 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E4FBCBF0], v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if (v18)
  {
    UUID.init()();
    if (one-time initialization token for attachmentLedgerTopic == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v37 = v6;
  uint64_t v38 = v0;
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v36 = v13;
  v21(v11, v13, v7);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(void *)&v44[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28(v11, v7);
    _os_log_impl(&dword_1B0DF7000, v22, v23, "Received request to refresh upload token, tokenID: %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v25, -1, -1);
    MEMORY[0x1B3EA39E0](v24, -1, -1);
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28(v11, v7);
  }

  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  uint64_t v30 = (uint64_t)v37;
  uint64_t v29 = v38;
  static Message.with(_:)();
  outlined init with copy of UserNotificationCenter(v29 + 168, (uint64_t)v44);
  uint64_t v31 = v42;
  outlined init with copy of Attachment.MMCSMetadata(v30, v42, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  unint64_t v32 = (*(unsigned __int8 *)(v40 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v33 = swift_allocObject();
  outlined init with take of BackgroundSessionManagerDataSource(v44, v33 + 16);
  outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v31, v33 + v32, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  uint64_t v34 = (uint64_t)v36;
  PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)((uint64_t)v36, (uint64_t)&async function pointer to partial apply for closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken(), v33);
  swift_release();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  return ((uint64_t (*)(uint64_t, uint64_t))v28)(v34, v7);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a5;
  uint64_t v7 = type metadata accessor for UploadToken(0);
  v5[4] = swift_task_alloc();
  uint64_t v8 = swift_task_alloc();
  v5[5] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v5[6] = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *uint64_t v9 = v5;
  v9[1] = closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken();
  uint64_t v11 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v8, a4, v7, v10, v11);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken();
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[5];
  outlined init with copy of Attachment.MMCSMetadata(v1, v0[4], type metadata accessor for UploadToken);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  CheckedContinuation.resume(returning:)();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for UploadToken);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  v0[2] = v0[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[16] = v4;
  v3[17] = *(void *)(v4 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = *(void *)(type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0) - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  v3[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v3[23] = v5;
  v3[24] = *(void *)(v5 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.requestDownloadToken(for:), 0, 0);
}

uint64_t PluginAttachmentLedgerTopic.requestDownloadToken(for:)()
{
  id v1 = *(id *)(v0[15] + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v3 = v0[14];
  uint64_t v2 = (void *)v0[15];

  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  v0[32] = lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  static Message.with(_:)();
  swift_task_dealloc();
  static Date.now.getter();
  uint64_t v6 = v2[24];
  uint64_t v5 = v2[25];
  __swift_project_boxed_opaque_existential_1(v2 + 21, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[33] = v7;
  *uint64_t v7 = v0;
  v7[1] = PluginAttachmentLedgerTopic.requestDownloadToken(for:);
  uint64_t v8 = v0[31];
  uint64_t v9 = v0[22];
  return AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v9, v8, v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PluginAttachmentLedgerTopic.requestDownloadToken(for:);
  }
  else {
    uint64_t v2 = PluginAttachmentLedgerTopic.requestDownloadToken(for:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  const void **v18;
  unsigned char *v19;
  unsigned char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const void *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const void *v84;
  int64_t v85;
  uint64_t v86;
  size_t v87;
  int v88;
  uint64_t v89;
  size_t v90;
  char *v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  unsigned char *v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  id v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(void);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  char *v141;
  void (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  void *v153;
  char *v154;
  void *v155;
  void *v156;
  void *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_type_t type;
  uint64_t typea;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void __s1[3];
  unsigned char v168[14];
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  uint64_t v171 = v0;
  unint64_t v170 = *MEMORY[0x1E4F143B8];
  id v1 = *(void *)(*(void *)(v0 + 176) + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_131:
    uint64_t v7 = 0x1E9B54000uLL;
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_132:
      uint64_t v97 = *(void *)(v0 + 136);
      unint64_t v96 = *(void *)(v0 + 144);
      unint64_t v98 = *(void *)(v0 + 128);
      uint64_t v99 = *(void *)(v0 + 112);
      unint64_t v165 = type metadata accessor for Logger();
      __swift_project_value_buffer(v165, (uint64_t)static Log.attachmentLedgerTopic);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v96, v99, v98);
      swift_retain_n();
      uint64_t v100 = Logger.logObject.getter();
      uint64_t v101 = static os_log_type_t.error.getter();
      uint64_t v102 = os_log_type_enabled(v100, v101);
      uint64_t v103 = *(void *)(v0 + 136);
      int v104 = *(void *)(v0 + 144);
      uint64_t v105 = *(void *)(v0 + 128);
      if (v102)
      {
        uint64_t v106 = swift_slowAlloc();
        uint64_t v164 = swift_slowAlloc();
        *(void *)uint64_t v168 = v164;
        *(_DWORD *)uint64_t v106 = 136315394;
        swift_retain();
        uint64_t v107 = PluginAttachmentLedgerTopic.description.getter();
        os_log_type_t type = v101;
        char v109 = v108;
        swift_release();
        *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, (uint64_t *)v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v106 + 12) = 2080;
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        os_log_type_t v110 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, (uint64_t *)v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v104, v105);
        _os_log_impl(&dword_1B0DF7000, v100, type, "%s failed to get authToken, no token found for ID: %s in server response.", (uint8_t *)v106, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v164, -1, -1);
        uint64_t v112 = v106;
        uint64_t v7 = 0x1E9B54000;
        MEMORY[0x1B3EA39E0](v112, -1, -1);
      }
      else
      {
        swift_release_n();
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v104, v105);
      }

      uint64_t v113 = *(void *)(v0 + 176);
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      unint64_t v114 = (void *)swift_allocError();
      *uint64_t v115 = 4;
      swift_willThrow();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v113, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
      (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 224), *(void *)(v0 + 184));
      if (*(void *)(v7 + 3488) != -1) {
        swift_once();
      }
      uint64_t v116 = *(void *)(v0 + 240);
      os_log_type_t v117 = *(void *)(v0 + 248);
      __swift_project_value_buffer(v165, (uint64_t)static Log.attachmentLedgerTopic);
      outlined init with copy of Attachment.MMCSMetadata(v117, v116, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
      swift_retain();
      uint64_t v118 = v114;
      swift_retain();
      uint64_t v119 = v114;
      unint64_t v120 = Logger.logObject.getter();
      uint64_t v121 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v120, v121))
      {
        unint64_t v155 = *(void **)(v0 + 240);
        uint64_t v122 = swift_slowAlloc();
        uint64_t v166 = swift_slowAlloc();
        *(void *)uint64_t v168 = v166;
        *(_DWORD *)uint64_t v122 = 136315650;
        swift_retain();
        uint64_t v123 = PluginAttachmentLedgerTopic.description.getter();
        unint64_t v125 = v124;
        swift_release();
        *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v125, (uint64_t *)v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v122 + 12) = 2080;
        uint64_t v126 = Message.debugDescription.getter();
        *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, (uint64_t *)v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v155, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
        *(_WORD *)(v122 + 22) = 2080;
        *(void *)(v0 + 56) = v114;
        unint64_t v128 = v114;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v129 = String.init<A>(reflecting:)();
        *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, (uint64_t *)v168);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B0DF7000, v120, v121, "%s failed to get authToken for %s, reason: %s", (uint8_t *)v122, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v166, -1, -1);
        MEMORY[0x1B3EA39E0](v122, -1, -1);
      }
      else
      {
        uint64_t v131 = *(void *)(v0 + 240);
        swift_release_n();
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v131, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
      }
      uint64_t v132 = *(void *)(v0 + 248);
      swift_willThrow();
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v132, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v133 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_143;
    }
LABEL_151:
    swift_once();
    goto LABEL_132;
  }
  uint64_t v3 = (void *)(v0 + 16);
  v163 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v159 = *(void *)(v4 + 72);
  swift_bridgeObjectRetain();
  while (2)
  {
    uint64_t v6 = *(uint64_t **)(v0 + 168);
    outlined init with copy of Attachment.MMCSMetadata(v5, (uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
    uint64_t v7 = *v6;
    uint64_t v8 = *(void *)(v163 + 8);
    outlined copy of Data._Representation(*v6, v8);
    *(void *)(v0 + 280) = UUID.uuid.getter();
    *(unsigned char *)(v0 + 288) = v9;
    *(unsigned char *)(v0 + 289) = v10;
    *(unsigned char *)(v0 + 290) = v11;
    *(unsigned char *)(v0 + 291) = v12;
    *(unsigned char *)(v0 + 292) = v13;
    *(unsigned char *)(v0 + 293) = v14;
    *(unsigned char *)(v0 + 294) = v15;
    *(unsigned char *)(v0 + 295) = v16;
    uint64_t v17 = MEMORY[0x1E4FBB2B8];
    *(void *)(v0 + 40) = MEMORY[0x1E4FBB2B8];
    *(void *)(v0 + 48) = MEMORY[0x1E4F27EF0];
    *(void *)(v0 + 16) = v0 + 280;
    *(void *)(v0 + 24) = v0 + 296;
    uint64_t v18 = (const void **)__swift_project_boxed_opaque_existential_1(v3, v17);
    id v19 = *v18;
    if (*v18 && (uint64_t v20 = v18[1], v21 = v20 - v19, v20 != v19))
    {
      if (v21 <= 14)
      {
        memset(v168, 0, sizeof(v168));
        uint64_t v169 = (_BYTE)v20 - (_BYTE)v19;
        memcpy(v168, v19, v20 - v19);
        uint64_t v22 = *(void *)v168;
        os_log_type_t v23 = *(unsigned int *)&v168[8] | ((unint64_t)v168[12] << 32) | ((unint64_t)v168[13] << 40) | ((unint64_t)v169 << 48);
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v25 = __DataStorage.init(bytes:length:)();
        uint64_t v26 = v25;
        if ((unint64_t)v21 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v22 = swift_allocObject();
          *(void *)(v22 + 16) = 0;
          *(void *)(v22 + 24) = v21;
          os_log_type_t v23 = v26 | 0x8000000000000000;
        }
        else
        {
          uint64_t v22 = v21 << 32;
          os_log_type_t v23 = v25 | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v22 = 0;
      os_log_type_t v23 = 0xC000000000000000;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
    uint64_t v24 = 0;
    switch(v8 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(v7) - v7;
        if (__OFSUB__(HIDWORD(v7), v7))
        {
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        uint64_t v24 = (int)v24;
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v7 + 16);
        unint64_t v27 = *(void *)(v7 + 24);
        uint64_t v29 = __OFSUB__(v27, v28);
        uint64_t v24 = v27 - v28;
        if (!v29) {
          break;
        }
        goto LABEL_147;
      case 3uLL:
        break;
      default:
        uint64_t v24 = BYTE6(v8);
        break;
    }
    uint64_t v30 = v23 >> 62;
    switch(v23 >> 62)
    {
      case 1uLL:
        LODWORD(v31) = HIDWORD(v22) - v22;
        if (__OFSUB__(HIDWORD(v22), v22)) {
          goto LABEL_148;
        }
        uint64_t v31 = (int)v31;
LABEL_22:
        if (v24 != v31)
        {
          outlined consume of Data._Representation(v22, v23);
LABEL_4:
          outlined consume of Data._Representation(v7, v8);
LABEL_5:
          outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(*(void *)(v0 + 168), type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
          uint64_t v3 = (void *)(v0 + 16);
          v5 += v159;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_131;
          }
          continue;
        }
        if (v24 >= 1)
        {
          uint64_t v158 = v23;
          switch(v8 >> 62)
          {
            case 1uLL:
              if ((int)v7 > v7 >> 32) {
                goto LABEL_150;
              }
              outlined copy of Data._Representation(v7, v8);
              uint64_t v39 = __DataStorage._bytes.getter();
              if (v39)
              {
                uint64_t v40 = v39;
                uint64_t v41 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v7, v41)) {
                  goto LABEL_153;
                }
                uint64_t v42 = (const void *)(v40 + (int)v7 - v41);
              }
              else
              {
                uint64_t v42 = 0;
              }
              __DataStorage._length.getter();
              if (!v30)
              {
                *(void *)uint64_t v168 = v22;
                *(_DWORD *)&v168[8] = v158;
                *(_WORD *)&v168[12] = WORD2(v158);
                if (!v42) {
                  goto LABEL_175;
                }
                uint64_t v54 = memcmp(v42, v168, BYTE6(v158));
                uint64_t v78 = v7;
                uint64_t v79 = v8;
                goto LABEL_127;
              }
              uint64_t v156 = (void *)v42;
              if (v30 == 1)
              {
                if (v22 >> 32 < (int)v22) {
                  goto LABEL_162;
                }
                swift_retain();
                uint64_t v58 = __DataStorage._bytes.getter();
                if (v58)
                {
                  uint64_t v59 = v58;
                  uint64_t v60 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v22, v60)) {
                    goto LABEL_169;
                  }
                  uint64_t v61 = (const void *)(v59 + (int)v22 - v60);
                }
                else
                {
                  uint64_t v61 = 0;
                }
                uint64_t v94 = __DataStorage._length.getter();
                if (v94 >= (v22 >> 32) - (int)v22) {
                  uint64_t v95 = (v22 >> 32) - (int)v22;
                }
                else {
                  uint64_t v95 = v94;
                }
                if (!v156) {
                  goto LABEL_182;
                }
                uint64_t v56 = v158;
                if (!v61) {
                  goto LABEL_183;
                }
                uint64_t v54 = memcmp(v156, v61, v95);
                outlined consume of Data._Representation(v22, v158);
                uint64_t v55 = v7;
                uint64_t v57 = v8;
LABEL_125:
                outlined consume of Data._Representation(v55, v57);
                goto LABEL_126;
              }
              uint64_t v80 = *(void *)(v22 + 16);
              uint64_t v154 = *(char **)(v22 + 24);
              swift_retain();
              swift_retain();
              unint64_t v81 = __DataStorage._bytes.getter();
              if (v81)
              {
                uint64_t v82 = v81;
                uint64_t v83 = __DataStorage._offset.getter();
                if (__OFSUB__(v80, v83)) {
                  goto LABEL_168;
                }
                uint64_t v84 = (const void *)(v82 + v80 - v83);
              }
              else
              {
                uint64_t v84 = 0;
              }
              uint64_t v29 = __OFSUB__(v154, v80);
              uint64_t v91 = &v154[-v80];
              if (v29) {
                goto LABEL_163;
              }
              uint64_t v92 = __DataStorage._length.getter();
              if (v92 >= (uint64_t)v91) {
                uint64_t v93 = (size_t)v91;
              }
              else {
                uint64_t v93 = v92;
              }
              if (!v156) {
                goto LABEL_180;
              }
              if (!v84) {
                goto LABEL_181;
              }
              uint64_t v72 = memcmp(v156, v84, v93);
              swift_release();
              swift_release();
              outlined consume of Data._Representation(v7, v8);
LABEL_115:
              outlined consume of Data._Representation(v22, v158);
              goto LABEL_116;
            case 2uLL:
              uint64_t v43 = *(void *)(v7 + 16);
              swift_retain();
              swift_retain();
              uint64_t v44 = (char *)__DataStorage._bytes.getter();
              if (!v44) {
                goto LABEL_42;
              }
              uint64_t v45 = __DataStorage._offset.getter();
              if (__OFSUB__(v43, v45))
              {
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
              }
              v44 += v43 - v45;
LABEL_42:
              __DataStorage._length.getter();
              if (v30)
              {
                uint64_t v153 = v44;
                if (v30 == 1)
                {
                  if (v22 >> 32 < (int)v22) {
                    goto LABEL_156;
                  }
                  swift_retain();
                  uint64_t v46 = __DataStorage._bytes.getter();
                  if (v46)
                  {
                    unint64_t v47 = v46;
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v22, v48)) {
                      goto LABEL_167;
                    }
                    char v49 = (const void *)(v47 + (int)v22 - v48);
                  }
                  else
                  {
                    char v49 = 0;
                  }
                  uint64_t v89 = __DataStorage._length.getter();
                  if (v89 >= (v22 >> 32) - (int)v22) {
                    uint64_t v90 = (v22 >> 32) - (int)v22;
                  }
                  else {
                    uint64_t v90 = v89;
                  }
                  if (!v153) {
                    goto LABEL_178;
                  }
                  uint64_t v56 = v158;
                  if (!v49) {
                    goto LABEL_179;
                  }
                  uint64_t v54 = memcmp(v153, v49, v90);
                  outlined consume of Data._Representation(v22, v158);
                  swift_release();
                  swift_release();
LABEL_126:
                  uint64_t v78 = v22;
                  uint64_t v79 = v56;
LABEL_127:
                  outlined consume of Data._Representation(v78, v79);
LABEL_128:
                  outlined consume of Data._Representation(v7, v8);
                  if (!v54) {
                    goto LABEL_142;
                  }
                }
                else
                {
                  os_log_type_t v73 = *(void *)(v22 + 16);
                  unint64_t v150 = *(void *)(v22 + 24);
                  swift_retain();
                  swift_retain();
                  os_log_type_t v74 = __DataStorage._bytes.getter();
                  if (v74)
                  {
                    uint64_t v75 = v74;
                    uint64_t v76 = __DataStorage._offset.getter();
                    if (__OFSUB__(v73, v76)) {
                      goto LABEL_166;
                    }
                    uint64_t v77 = (const void *)(v75 + v73 - v76);
                  }
                  else
                  {
                    uint64_t v77 = 0;
                  }
                  uint64_t v29 = __OFSUB__(v150, v73);
                  unint64_t v85 = v150 - v73;
                  if (v29) {
                    goto LABEL_161;
                  }
                  uint64_t v86 = __DataStorage._length.getter();
                  if (v86 >= v85) {
                    uint64_t v87 = v85;
                  }
                  else {
                    uint64_t v87 = v86;
                  }
                  if (!v153) {
                    goto LABEL_176;
                  }
                  if (!v77) {
                    goto LABEL_177;
                  }
                  os_log_type_t v88 = memcmp(v153, v77, v87);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  outlined consume of Data._Representation(v22, v158);
                  outlined consume of Data._Representation(v7, v8);
                  if (!v88) {
                    goto LABEL_142;
                  }
                }
              }
              else
              {
                *(void *)uint64_t v168 = v22;
                *(_DWORD *)&v168[8] = v158;
                *(_WORD *)&v168[12] = WORD2(v158);
                if (!v44) {
                  goto LABEL_174;
                }
                uint64_t v72 = memcmp(v44, v168, BYTE6(v158));
                swift_release();
                swift_release();
LABEL_116:
                outlined consume of Data._Representation(v7, v8);
                if (!v72) {
                  goto LABEL_142;
                }
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v30) {
                goto LABEL_58;
              }
              if (v30 == 1)
              {
                uint64_t v34 = (v22 >> 32) - (int)v22;
                if (v22 >> 32 < (int)v22) {
                  goto LABEL_155;
                }
                swift_retain();
                uint64_t v50 = __DataStorage._bytes.getter();
                if (!v50) {
                  goto LABEL_171;
                }
                uint64_t v36 = v50;
                uint64_t v51 = __DataStorage._offset.getter();
                uint64_t v38 = (int)v22 - v51;
                if (__OFSUB__((int)v22, v51)) {
                  goto LABEL_160;
                }
LABEL_53:
                uint64_t v52 = __DataStorage._length.getter();
                if (v52 >= v34) {
                  uint64_t v53 = v34;
                }
                else {
                  uint64_t v53 = v52;
                }
                uint64_t v54 = memcmp(__s1, (const void *)(v36 + v38), v53);
                uint64_t v55 = v22;
                uint64_t v56 = v158;
                uint64_t v57 = v158;
                goto LABEL_125;
              }
              uint64_t v68 = *(void *)(v22 + 16);
              uint64_t v69 = *(void *)(v22 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = (char *)__DataStorage._bytes.getter();
              if (v64)
              {
                unint64_t v70 = __DataStorage._offset.getter();
                if (__OFSUB__(v68, v70)) {
                  goto LABEL_165;
                }
                v64 += v68 - v70;
              }
              uint64_t v29 = __OFSUB__(v69, v68);
              uint64_t v66 = v69 - v68;
              if (v29) {
                goto LABEL_158;
              }
              uint64_t v67 = __DataStorage._length.getter();
              if (!v64) {
                goto LABEL_173;
              }
LABEL_77:
              if (v67 >= v66) {
                uint64_t v71 = v66;
              }
              else {
                uint64_t v71 = v67;
              }
              uint64_t v72 = memcmp(__s1, v64, v71);
              swift_release();
              swift_release();
              goto LABEL_115;
            default:
              __s1[0] = v7;
              LOWORD(__s1[1]) = v8;
              BYTE2(__s1[1]) = BYTE2(v8);
              BYTE3(__s1[1]) = BYTE3(v8);
              BYTE4(__s1[1]) = BYTE4(v8);
              BYTE5(__s1[1]) = BYTE5(v8);
              if (!v30)
              {
LABEL_58:
                *(void *)uint64_t v168 = v22;
                *(_WORD *)&v168[8] = v23;
                v168[10] = BYTE2(v23);
                v168[11] = BYTE3(v23);
                v168[12] = BYTE4(v23);
                v168[13] = BYTE5(v23);
                uint64_t v54 = memcmp(__s1, v168, BYTE6(v23));
                goto LABEL_128;
              }
              if (v30 == 1)
              {
                uint64_t v34 = (v22 >> 32) - (int)v22;
                if (v22 >> 32 < (int)v22) {
                  goto LABEL_154;
                }
                swift_retain();
                os_log_type_t v35 = __DataStorage._bytes.getter();
                if (!v35)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_171:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
                  JUMPOUT(0x1B0EB9F50);
                }
                uint64_t v36 = v35;
                uint64_t v37 = __DataStorage._offset.getter();
                uint64_t v38 = (int)v22 - v37;
                if (__OFSUB__((int)v22, v37)) {
                  goto LABEL_159;
                }
                goto LABEL_53;
              }
              uint64_t v62 = *(void *)(v22 + 16);
              uint64_t v63 = *(void *)(v22 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = (char *)__DataStorage._bytes.getter();
              if (v64)
              {
                uint64_t v65 = __DataStorage._offset.getter();
                if (__OFSUB__(v62, v65)) {
                  goto LABEL_164;
                }
                v64 += v62 - v65;
              }
              uint64_t v29 = __OFSUB__(v63, v62);
              uint64_t v66 = v63 - v62;
              if (v29) {
                goto LABEL_157;
              }
              uint64_t v67 = __DataStorage._length.getter();
              if (!v64) {
                goto LABEL_172;
              }
              goto LABEL_77;
          }
          goto LABEL_5;
        }
LABEL_141:
        outlined consume of Data._Representation(v22, v23);
        outlined consume of Data._Representation(v7, v8);
LABEL_142:
        typea = *(void *)(v0 + 248);
        uint64_t v134 = *(void *)(v0 + 216);
        v135 = *(void *)(v0 + 224);
        unint64_t v136 = *(void *)(v0 + 200);
        uint64_t v151 = *(void *)(v0 + 208);
        unint64_t v138 = *(void *)(v0 + 184);
        v137 = *(void *)(v0 + 192);
        char v139 = *(void *)(v0 + 168);
        uint64_t v160 = *(void *)(v0 + 176);
        uint64_t v157 = (void *)v139;
        char v140 = *(void **)(v0 + 160);
        uint64_t v141 = *(char **)(v0 + 104);
        swift_bridgeObjectRelease();
        outlined init with copy of Attachment.MMCSMetadata(v139, (uint64_t)v140, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
        uint64_t v142 = *(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16);
        v142(v134, v135, v138);
        uint64_t v149 = v140[2];
        os_log_type_t v147 = v140[3];
        v142(v136, v134, v138);
        swift_bridgeObjectRetain();
        Date.init(timeInterval:since:)();
        uint64_t v152 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
        v152(v134, v138);
        uint64_t v143 = v140[5];
        uint64_t v148 = v140[4];
        swift_bridgeObjectRetain();
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v140, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
        *(void *)uint64_t v141 = v149;
        *((void *)v141 + 1) = v147;
        uint64_t v144 = type metadata accessor for DownloadToken(0);
        (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(&v141[*(int *)(v144 + 20)], v151, v138);
        uint64_t v145 = &v141[*(int *)(v144 + 24)];
        *(void *)uint64_t v145 = v148;
        *((void *)v145 + 1) = v143;
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v157, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v160, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
        v152(v135, v138);
        outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(typea, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v133 = *(uint64_t (**)(void))(v0 + 8);
LABEL_143:
        return v133();
      case 2uLL:
        uint64_t v33 = *(void *)(v22 + 16);
        unint64_t v32 = *(void *)(v22 + 24);
        uint64_t v29 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v29) {
          goto LABEL_22;
        }
        goto LABEL_149;
      case 3uLL:
        if (!v24) {
          goto LABEL_141;
        }
        goto LABEL_4;
      default:
        uint64_t v31 = BYTE6(v23);
        goto LABEL_22;
    }
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  v24[1] = *MEMORY[0x1E4F143B8];
  id v1 = (void *)v0[34];
  (*(void (**)(void, void))(v0[24] + 8))(v0[28], v0[23]);
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v3 = v0[30];
  uint64_t v2 = v0[31];
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of Attachment.MMCSMetadata(v2, v3, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  swift_retain();
  uint64_t v5 = v1;
  swift_retain();
  uint64_t v6 = v1;
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v22 = v0[30];
    uint64_t v9 = swift_slowAlloc();
    os_log_type_t v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)uint64_t v9 = 136315650;
    swift_retain();
    uint64_t v10 = PluginAttachmentLedgerTopic.description.getter();
    uint64_t v12 = v11;
    swift_release();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v13 = Message.debugDescription.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v22, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
    *(_WORD *)(v9 + 22) = 2080;
    v0[7] = v1;
    uint64_t v15 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v16 = String.init<A>(reflecting:)();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v7, v8, "%s failed to get authToken for %s, reason: %s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v23, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {
    uint64_t v18 = v0[30];
    swift_release_n();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v18, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  }
  id v19 = v0[31];
  swift_willThrow();
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v19, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 288))(&v17);
  uint64_t v1 = v17;
  uint64_t v2 = v20;
  unint64_t v3 = v22;
  if ((v22 & 0x8000000000000000) == 0
    || ((uint64_t v4 = v19 | v18, v5 = v21 | v23, v22 == 0x8000000000000000)
      ? (BOOL v6 = (v19 | v18 | v17 | v20 | v21 | v23) == 0)
      : (BOOL v6 = 0),
        v6))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v17, v18, v19, v20, v21, v22);
  }
  else
  {
    uint64_t result = outlined consume of PluginAttachmentLedgerTopic.State(v17, v18, v19, v20, v21, v22);
    if (v3 == 0x8000000000000000 && v1 == 1 && !(v4 | v2 | v5)) {
      return result;
    }
  }
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_retain();
    uint64_t v13 = PluginAttachmentLedgerTopic.description.getter();
    unint64_t v15 = v14;
    swift_release();
    uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v9, v10, "Requested downloadToken without being subscribed on %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v12, -1, -1);
    MEMORY[0x1B3EA39E0](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
  swift_allocError();
  *uint64_t v16 = 3;
  return swift_willThrow();
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v4 = *(void *)(a2 + 112);
  uint64_t v3 = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B1138A80;
  uint64_t v16 = UUID.uuid.getter();
  char v17 = v6;
  char v18 = v7;
  char v19 = v8;
  char v20 = v9;
  char v21 = v10;
  char v22 = v11;
  char v23 = v12;
  char v24 = v13;
  *(void *)(v5 + 32) = specialized Data.init<A>(_:)((uint64_t)&v16, (uint64_t)&v25);
  *(void *)(v5 + 40) = v14;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v5;
  return result;
}

uint64_t AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:), 0, 0);
}

uint64_t AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  *uint64_t v3 = v0;
  v3[1] = AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[2];
  uint64_t v9 = v0[3];
  return attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v8, v9, v4, v5, v6, v7);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v0)
  {
    return MEMORY[0x1F4188298](AsyncSerialQueue.performAndWaitFor<A>(_:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v3[5] = swift_task_alloc();
  v3[6] = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  v3[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken(), 0, 0);
}

uint64_t closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken();
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[4];
  return AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v5, v6, v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken();
  }
  else {
    uint64_t v2 = closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[5];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0[7] + *(int *)(v0[6] + 32), v1, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v2 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = v0[5];
  uint64_t v5 = (void *)v0[2];
  if (v3 == 1)
  {
    *uint64_t v5 = 0;
    v5[1] = 0xE000000000000000;
    v5[2] = 0;
    v5[3] = 0xE000000000000000;
    v5[4] = 0;
    v5[5] = 0xE000000000000000;
    v5[6] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?(v4, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  else
  {
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v0[5], (uint64_t)v5, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[7], type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v20;
  v8[11] = v21;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a1;
  v8[5] = a4;
  uint64_t v9 = type metadata accessor for Date();
  v8[12] = v9;
  v8[13] = *(void *)(v9 - 8);
  v8[14] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock();
  v8[15] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[16] = v11;
  v8[17] = *(void *)(v11 + 64);
  v8[18] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  v8[19] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[20] = v13;
  v8[21] = *(void *)(v13 + 64);
  v8[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8[23] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for UUID();
  v8[24] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[25] = v15;
  v8[26] = *(void *)(v15 + 64);
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v8[29] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v8[30] = v17;
  v8[31] = *(void *)(v17 + 64);
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:), 0, 0);
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)()
{
  static Task<>.checkCancellation()();
  uint64_t v4 = (uint64_t (*)(uint64_t))(v0[5] + *(int *)v0[5]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[36] = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  uint64_t v2 = v0[35];
  return v4(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  }
  else {
    uint64_t v2 = closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63[3];
  void *v64;
  uint64_t v65;

  uint64_t v64 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[7];
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.attachmentLedgerTopic);
  uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v62(v3, v6, v4);
  outlined init with copy of Attachment.MMCSMetadata(v2, v1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.default.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[34];
  if (v10)
  {
    uint64_t v57 = v9;
    uint64_t v12 = v0[28];
    uint64_t v14 = v0[24];
    uint64_t v13 = v0[25];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    v63[0] = v59;
    *(_DWORD *)uint64_t v15 = 136315394;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 12) = 2080;
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
    char v18 = Message.debugDescription.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    _os_log_impl(&dword_1B0DF7000, v8, v57, "[%s] Received uploadToken, token: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v59, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[28], v0[24]);
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }

  uint64_t v20 = v0[37];
  static Task<>.checkCancellation()();
  uint64_t v21 = v0[35];
  if (!v20)
  {
    uint64_t v58 = v0[33];
    uint64_t v55 = v0[32];
    uint64_t v46 = v0[31];
    uint64_t v44 = v0[30];
    uint64_t v61 = v0[27];
    unint64_t v47 = v0[25];
    char v22 = v0[23];
    uint64_t v60 = v0[24];
    char v49 = v22;
    char v23 = v0[22];
    uint64_t v42 = v0[21];
    uint64_t v25 = v0[19];
    char v24 = v0[20];
    uint64_t v39 = v25;
    uint64_t v40 = v23;
    uint64_t v56 = v0[18];
    uint64_t v26 = v0[16];
    uint64_t v43 = v0[17];
    unint64_t v27 = v0[15];
    uint64_t v41 = v27;
    uint64_t v53 = v0[14];
    uint64_t v54 = v0[12];
    uint64_t v50 = v0[13];
    uint64_t v51 = v0[11];
    uint64_t v48 = v0[9];
    uint64_t v37 = v0[10];
    uint64_t v38 = v0[7];
    uint64_t v52 = (char *)v0[4];
    uint64_t v28 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v22, 1, 1, v28);
    uint64_t v45 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v48, v25);
    outlined init with copy of Attachment.MMCSMetadata(v21, v58, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v56, v37, v27);
    v62(v61, v38, v60);
    uint64_t v29 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v30 = (v42 + *(unsigned __int8 *)(v44 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    uint64_t v31 = (v46 + *(unsigned __int8 *)(v26 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    unint64_t v32 = (v43 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = (*(unsigned __int8 *)(v47 + 80) + v32 + 8) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = 0;
    *(void *)(v34 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))(v34 + v29, v40, v39);
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v58, v34 + v30, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))(v34 + v31, v56, v41);
    *(void *)(v34 + v32) = v45;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v47 + 32))(v34 + v33, v61, v60);
    _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(v49, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:), v34);
    swift_release();
    outlined destroy of UUID?(v49, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    outlined init with copy of Attachment.MMCSMetadata(v21, v55, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v53, v51, v54);
    UploadToken.init(from:requestTime:)(v55, v53, v52);
  }
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[35], type metadata accessor for AttachmentLedger_AuthPutMaterials);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[16] = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  v8[21] = v9;
  v8[22] = *(void *)(v9 - 8);
  v8[23] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  v8[24] = v10;
  v8[25] = *(void *)(v10 - 8);
  v8[26] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v8[27] = v11;
  v8[28] = *(void *)(v11 - 8);
  v8[29] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  v8[30] = v12;
  v8[31] = *(void *)(v12 - 8);
  v8[32] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:), 0, 0);
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)()
{
  MEMORY[0x1B3EA26B0](1000000000000000 * *(void *)(*(void *)(v0 + 136) + 48), (*(unint64_t *)(*(void *)(v0 + 136) + 48) * (unsigned __int128)0x38D7EA4C68000uLL) >> 64);
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 104) = 1;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v1;
  uint64_t v2 = type metadata accessor for ContinuousClock();
  uint64_t v3 = lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
  *uint64_t v1 = v0;
  v1[1] = closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 144);
  return MEMORY[0x1F4187DE8](v4, v0 + 88, v5, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[31] + 8))(v2[32], v2[30]);
  if (v0) {
    uint64_t v3 = closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  }
  else {
    uint64_t v3 = closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t Strong;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  uint64_t v31 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = v0 + 2;
    uint64_t v29 = Strong;
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v3 = v0[28];
    uint64_t v4 = v0[29];
    uint64_t v5 = v0[27];
    uint64_t v6 = v0[20];
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v6, v5);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.default.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[28];
    uint64_t v12 = v0[29];
    uint64_t v13 = v0[27];
    if (v10)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v30 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v2 = v0 + 2;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
      _os_log_impl(&dword_1B0DF7000, v8, v9, "[%s] Refresh timer finished, uploadToken expired", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v15, -1, -1);
      MEMORY[0x1B3EA39E0](v14, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v11 + 8))(v0[29], v0[27]);
    }

    uint64_t v26 = v0[26];
    unint64_t v27 = v0[25];
    char v18 = v0[23];
    uint64_t v28 = v0[24];
    uint64_t v19 = *(void **)(v29 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
    uint64_t v21 = v0[21];
    uint64_t v20 = v0[22];
    v0[6] = partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
    v0[7] = v29;
    v0[2] = MEMORY[0x1E4F143A8];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed () -> ();
    v0[5] = &block_descriptor_180;
    char v22 = _Block_copy(v2);
    char v23 = v19;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[14] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1B3EA2200](0, v26, v18, v22);
    _Block_release(v22);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t PluginAttachmentLedgerTopic.waitForReadyState()()
{
  v1[11] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>);
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator);
  v1[15] = v3;
  v1[16] = *(void *)(v3 - 8);
  v1[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](PluginAttachmentLedgerTopic.waitForReadyState(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  *(void *)(v0 + 72) = (*(uint64_t (**)(void))(**(void **)(v0 + 88) + 312))();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>);
  uint64_t v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>);
  MEMORY[0x1B3EA1110](v4, v5);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v7;
  *uint64_t v7 = v0;
  v7[1] = PluginAttachmentLedgerTopic.waitForReadyState();
  uint64_t v8 = *(void *)(v0 + 120);
  return MEMORY[0x1F4187C78](v0 + 16, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PluginAttachmentLedgerTopic.waitForReadyState();
  }
  else {
    uint64_t v2 = PluginAttachmentLedgerTopic.waitForReadyState();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  unsigned char *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[2];
  uint64_t v2 = v0[7];
  if (v2 >> 3 == 0xFFFFFFFF)
  {
    (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *uint64_t v3 = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
LABEL_3:
    return v4();
  }
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v9 = v0[5];
  uint64_t v8 = v0[6];
  uint64_t v10 = v0[8];
  if ((v2 & 0x8000000000000000) == 0
    || ((uint64_t v11 = v7 | v6, v12 = v8 | v10, v2 == 0x8000000000000000)
      ? (uint64_t v13 = (v7 | v6 | v1 | v9 | v8 | v10) == 0)
      : (uint64_t v13 = 0),
        v13))
  {
    outlined consume of PluginAttachmentLedgerTopic.State?(v0[2], v6, v7, v0[5], v8, v0[7]);
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State?(v0[2], v6, v7, v0[5], v8, v0[7]);
    if (v2 == 0x8000000000000000 && v1 == 1 && !(v11 | v9 | v12))
    {
      (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v4 = (uint64_t (*)(void))v0[1];
      goto LABEL_3;
    }
  }
  uint64_t v14 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[18] = v15;
  *uint64_t v15 = v0;
  v15[1] = PluginAttachmentLedgerTopic.waitForReadyState();
  uint64_t v16 = v0[15];
  return MEMORY[0x1F4187C78](v0 + 2, v16, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 80) = *(void *)(v0 + 152);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DispatchQoS();
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v4[16] = v7;
  *uint64_t v7 = v4;
  v7[1] = closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:);
  return PluginAttachmentLedgerTopic.waitForReadyState()();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x1F4188298](closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:), 0, 0);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v11 = v0[14];
  uint64_t v12 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v10 = v0[10];
  uint64_t v4 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  uint64_t v5 = v0[11];
  v0[6] = partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:);
  v0[7] = v3;
  v0[2] = MEMORY[0x1E4F143A8];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_264;
  uint64_t v6 = _Block_copy(v0 + 2);
  uint64_t v7 = v4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[8] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v1, v2, v6);
  _Block_release(v6);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v12);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t PluginAttachmentLedgerTopic.Participant.participantID.getter()
{
  return *(void *)v0;
}

uint64_t PluginAttachmentLedgerTopic.Participant.participantID.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.Participant.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t PluginAttachmentLedgerTopic.Participant.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000010;
}

BOOL static PluginAttachmentLedgerTopic.Participant.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginAttachmentLedgerTopic()
{
  return PluginAttachmentLedgerTopic.description.getter();
}

uint64_t PluginAttachmentLedgerTopic.State.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[4];
  unint64_t v5 = v0[5];
  if (v5 >> 62)
  {
    if (v5 >> 62 == 1)
    {
      return 0x6E776F6474756853;
    }
    else
    {
      uint64_t v9 = v4 | v2;
      uint64_t v10 = v6 | v0[6];
      if (v5 != 0x8000000000000000 || v9 | v1 | v3 | v10)
      {
        uint64_t v11 = v9 | v3 | v10;
        BOOL v13 = v1 == 1 && v11 == 0;
        if (v5 == 0x8000000000000000 && v13) {
          return 0x7964616552;
        }
        else {
          return 0x676E697474756853;
        }
      }
      else
      {
        return 0x676E697472617453;
      }
    }
  }
  else
  {
    swift_retain();
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    outlined consume of PluginAttachmentLedgerTopic.State(v1, v2, v4, v3, v6, v5);
    return 0xD000000000000013;
  }
}

uint64_t type metadata accessor for UploadToken(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for UploadToken);
}

uint64_t type metadata accessor for DownloadToken(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DownloadToken);
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors);
  }
  return result;
}

uint64_t outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in Attachment.attachment.getter(uint64_t *a1)
{
  return closure #1 in Attachment.attachment.getter(a1);
}

uint64_t partial apply for closure #1 in Attachment.MMCSMetadata.metadata.getter(void *a1)
{
  return closure #1 in Attachment.MMCSMetadata.metadata.getter(a1, *(void *)(v1 + 16));
}

uint64_t SymmetricKey.data.getter()
{
  SymmetricKey.withUnsafeBytes<A>(_:)();
  return v1;
}

uint64_t closure #1 in SymmetricKey.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x1E4FBB2B8];
  void v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  unint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = specialized Data.InlineData.init(_:)(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v10 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v6[8] = v10;
  v6[9] = *(void *)(v10 - 8);
  v6[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  v6[13] = swift_task_alloc();
  v6[14] = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  uint64_t v11 = swift_task_alloc();
  v6[15] = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  v6[16] = v12;
  *uint64_t v12 = v6;
  v12[1] = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  return AttachmentLedgerServiceProvider.getAuthToken(input:)(v11, a2, a5, a6);
}

uint64_t attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  }
  else {
    uint64_t v2 = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[15] + *(int *)(v0[14] + 28);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  LODWORD(v2) = v5(v1, 1, v2);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v2 == 1)
  {
    outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v0[15], v0[2], type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[12];
    unint64_t v9 = v0[8];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    uint64_t v10 = v5(v8, 1, v9);
    uint64_t v11 = v0[12];
    uint64_t v12 = (void *)v0[10];
    if (v10 == 1)
    {
      *uint64_t v12 = 0;
      v12[1] = 0xE000000000000000;
      v12[2] = 0;
      v12[3] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?(v11, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    }
    else
    {
      outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(v0[12], (uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
    }
    uint64_t v13 = (void *)swift_task_alloc();
    v0[18] = v13;
    *uint64_t v13 = v0;
    v13[1] = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
    uint64_t v14 = v0[4];
    return AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)(v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  }
  else {
    uint64_t v2 = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  outlined init with copy of Attachment.MMCSMetadata(v0[10], v1, type metadata accessor for AttachmentLedger_ErrorResponse);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  *uint64_t v4 = v0;
  v4[1] = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  unint64_t v5 = v0[11];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[5];
  unint64_t v9 = v0[2];
  uint64_t v10 = v0[3];
  return attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v9, v10, v5, v8, v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v0) {
    uint64_t v3 = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  }
  else {
    uint64_t v3 = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[15];
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[10], type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[15];
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[10], type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[15];
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v0[10], type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t closure #1 in static Data.== infix(_:_:)@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      outlined copy of Data._Representation(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1B0EBE43CLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = outlined consume of Data._Representation(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
  dispatch thunk of Clock.now.getter();
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x1E4FBD178]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return MEMORY[0x1F4188178](v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return MEMORY[0x1F4188298](specialized Clock.sleep(for:tolerance:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in Attachment.Metadata.sealedMetadata(with:)(uint64_t a1)
{
  return closure #1 in Attachment.Metadata.sealedMetadata(with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t, unint64_t))outlined copy of Data?);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v4 = (uint64_t *)v2;
  unint64_t v7 = *v2;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized Collection.firstIndex(where:)(a1, a2, v7);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v3) {
    return v8;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*v4 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v26) {
        goto LABEL_6;
      }
    }
    else if (v11 != *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      unint64_t v11 = v8 + 5;
      uint64_t v28 = a2;
      while (1)
      {
        unint64_t v12 = v11 - 4;
        uint64_t v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = MEMORY[0x1B3EA25C0](v11 - 4);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          uint64_t v14 = *(void *)(v13 + 8 * v11);
          swift_retain();
        }
        uint64_t v29 = v14;
        char v15 = a1(&v29);
        swift_release();
        if ((v15 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v23 = v11 - 3;
        if (__OFADD__(v12, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*v4 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v24 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v23 == v24) {
          return v8;
        }
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v16 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        uint64_t v17 = MEMORY[0x1B3EA25C0](v8, *v4);
        uint64_t v16 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v12 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v18 = *(void *)(v16 + 8 * v11);
          swift_retain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v8 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v17 = *(void *)(v16 + 8 * v8 + 32);
        swift_retain();
        if ((v16 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      uint64_t v18 = MEMORY[0x1B3EA25C0](v11 - 4, v16);
      uint64_t v16 = *v4;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v4 = v16;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v16 < 0 || (v16 & 0x4000000000000000) != 0)
      {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        *uint64_t v4 = v16;
      }
      *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v18;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v20 = *v4;
      int v21 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v4 = v20;
      if (!v21 || v20 < 0 || (v20 & 0x4000000000000000) != 0)
      {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
        *uint64_t v4 = v20;
      }
      a2 = v28;
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v12 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v11) = v17;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v8;
  }
  if (!((unint64_t)*v4 >> 62)) {
    return *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t specialized closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v7[3] = a1;
  return MEMORY[0x1F4188298](specialized closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
}

uint64_t specialized closure #1 in Task<>.init(priority:timeout:operation:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized closure #1 in Task<>.init(priority:timeout:operation:);
  return MEMORY[0x1F4188080](v0 + 16);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[10] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)v2[3];
    swift_task_dealloc();
    *uint64_t v3 = v2[2];
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a1;
  unint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v12;
  *unint64_t v12 = v6;
  v12[1] = specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a2, a3, a4, a5, a6);
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)(v4 + 24) = a1;
  unint64_t v7 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 32) = v5;
  *uint64_t v5 = v4;
  v5[1] = _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TQ0_;
  return v7(v4 + 16);
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TQ0_()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (!v0) {
    **(void **)(v2 + 24) = *(void *)(v2 + 16);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v8;
  *uint64_t v8 = v5;
  v8[1] = specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a4, a5);
}

BOOL specialized static PluginAttachmentLedgerTopic.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

uint64_t outlined copy of PluginAttachmentLedgerTopic.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 62 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!(a6 >> 62)) {
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B0EBF4E0()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1)
{
  return closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, v1, (void (*)(uint64_t))PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:));
}

void partial apply for closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)()
{
  closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(v0);
}

uint64_t sub_1B0EBF550()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(a1, v4, v5, v6);
}

void partial apply for closure #1 in PluginAttachmentLedgerTopic.unsubscribe()()
{
  closure #1 in PluginAttachmentLedgerTopic.unsubscribe()(v0);
}

uint64_t sub_1B0EBF628()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors);
  }
  return result;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1)
{
  return closure #1 in Attachment.Metadata.sealedMetadata(with:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (void (*)(uint64_t, unint64_t))outlined copy of Data._Representation);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1)
{
  return closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)()
{
  return closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1B0EBF6E4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_21Tm_0()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)()
{
  return closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1B0EBF748()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  return closure #2 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.remove(id:)(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.remove(id:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1);
}

uint64_t outlined init with copy of Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v58 = a3;
  uint64_t v60 = a2;
  v65[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v43 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v55);
  uint64_t v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v56 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (uint64_t)&v39 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v59 = (uint64_t)&v39 - v17;
  if (a1 >> 62) {
    goto LABEL_34;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    uint64_t v57 = v16;
    uint64_t v39 = v4;
    uint64_t v53 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    unint64_t v54 = a1 & 0xC000000000000001;
    BOOL v19 = (unint64_t *)(v7 + 56);
    BOOL v20 = __OFSUB__(HIDWORD(v60), v60);
    BOOL v42 = v20;
    uint64_t v41 = HIDWORD(v60) - (int)v60;
    uint64_t v52 = BYTE6(v58);
    uint64_t v44 = v65;
    char v49 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    uint64_t v45 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    uint64_t v16 = 4;
    uint64_t v50 = v10;
    unint64_t v51 = v58 >> 62;
    uint64_t v7 = v59;
    uint64_t v47 = v18;
    uint64_t v48 = (void (*)(void, void, void, void))a1;
    uint64_t v46 = v19;
    uint64_t v10 = &demangling cache variable for type metadata for UUID?;
LABEL_10:
    uint64_t v4 = v16 - 4;
    if (v54) {
      break;
    }
    uint64_t v23 = *(void *)(a1 + 8 * v16);
    swift_retain();
    uint64_t v24 = v16 - 3;
    if (!__OFADD__(v4, 1)) {
      goto LABEL_15;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (!v18) {
      goto LABEL_35;
    }
  }
  uint64_t v23 = MEMORY[0x1B3EA25C0](v16 - 4, a1);
  uint64_t v24 = v16 - 3;
  if (__OFADD__(v4, 1)) {
    goto LABEL_31;
  }
LABEL_15:
  uint64_t v61 = v24;
  (*v53)(v7, v23 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id, v6);
  a1 = *v19;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))*v19)(v7, 0, 1, v6);
  uint64_t v4 = v52;
  uint64_t v62 = v23;
  switch(v51)
  {
    case 1uLL:
      uint64_t v4 = v41;
      if (v42) {
        goto LABEL_32;
      }
      goto LABEL_19;
    case 2uLL:
      uint64_t v26 = *(void *)(v60 + 16);
      uint64_t v25 = *(void *)(v60 + 24);
      uint64_t v4 = v25 - v26;
      if (__OFSUB__(v25, v26)) {
        goto LABEL_33;
      }
LABEL_19:
      outlined copy of Data._Representation(v60, v58);
      goto LABEL_20;
    case 3uLL:
      goto LABEL_22;
    default:
LABEL_20:
      if (v4 == 16)
      {
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        uint64_t v27 = v60;
        unint64_t v28 = v58;
        v65[0] = v60;
        v65[1] = v58;
        lazy protocol witness table accessor for type Data and conformance Data();
        DataProtocol.copyBytes(to:)();
        uint64_t v29 = v57;
        UUID.init(uuid:)();
        outlined consume of Data._Representation(v27, v28);
        uint64_t v30 = 0;
      }
      else
      {
LABEL_22:
        outlined consume of Data._Representation(v60, v58);
        uint64_t v30 = 1;
        uint64_t v29 = v57;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a1)(v29, v30, 1, v6);
      uint64_t v31 = (uint64_t)v50;
      uint64_t v32 = (uint64_t)v50 + *(int *)(v55 + 48);
      uint64_t v33 = v59;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v59, (uint64_t)v50, &demangling cache variable for type metadata for UUID?);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29, v32, &demangling cache variable for type metadata for UUID?);
      uint64_t v34 = *v49;
      if ((*v49)(v31, 1, v6) != 1)
      {
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, v56, &demangling cache variable for type metadata for UUID?);
        if (v34(v32, 1, v6) == 1)
        {
          outlined destroy of UUID?(v57, &demangling cache variable for type metadata for UUID?);
          uint64_t v7 = v59;
          outlined destroy of UUID?(v59, &demangling cache variable for type metadata for UUID?);
          (*v45)(v56, v6);
          a1 = (unint64_t)v48;
          goto LABEL_8;
        }
        os_log_type_t v35 = v43;
        (*v40)(v43, v32, v6);
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v37 = *v45;
        (*v45)((uint64_t)v35, v6);
        outlined destroy of UUID?(v57, &demangling cache variable for type metadata for UUID?);
        uint64_t v7 = v59;
        outlined destroy of UUID?(v59, &demangling cache variable for type metadata for UUID?);
        v37(v56, v6);
        outlined destroy of UUID?(v31, &demangling cache variable for type metadata for UUID?);
        a1 = (unint64_t)v48;
        uint64_t v22 = v62;
        if (v36) {
          goto LABEL_30;
        }
LABEL_9:
        swift_release();
        ++v16;
        BOOL v19 = v46;
        if (v61 == v47) {
          goto LABEL_35;
        }
        goto LABEL_10;
      }
      outlined destroy of UUID?(v29, &demangling cache variable for type metadata for UUID?);
      outlined destroy of UUID?(v33, &demangling cache variable for type metadata for UUID?);
      unsigned int v21 = v34(v32, 1, v6);
      a1 = (unint64_t)v48;
      uint64_t v7 = v33;
      uint64_t v22 = v62;
      if (v21 != 1)
      {
LABEL_8:
        outlined destroy of UUID?(v31, &demangling cache variable for type metadata for (UUID?, UUID?));
        goto LABEL_9;
      }
      outlined destroy of UUID?(v31, &demangling cache variable for type metadata for UUID?);
LABEL_30:
      swift_bridgeObjectRelease();
      return v22;
  }
}

NSObject *specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t a1), uint64_t *a4)
{
  uint64_t v50 = a2;
  uint64_t v47 = a3;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v48 = (uint64_t *)((char *)&v45 - v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  BOOL v20 = (char *)&v45 - v19;
  uint64_t v21 = *a4;
  uint64_t v22 = a4[1];
  uint64_t v45 = a4[2];
  uint64_t v46 = v21;
  uint64_t v23 = a4[3];
  uint64_t v24 = a4[4];
  uint64_t v26 = *a1;
  unint64_t v25 = a1[1];
  outlined copy of Data._Representation(*a1, v25);
  UUID.init(data:)(v26, v25, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.attachmentLedgerTopic);
    unint64_t v28 = v48;
    outlined init with copy of Attachment.MMCSMetadata((uint64_t)a1, (uint64_t)v48, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = (uint64_t (*)(uint64_t))swift_slowAlloc();
      v52[0] = (uint64_t)v47;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v46 = (uint64_t)(v31 + 4);
      uint64_t v32 = *v28;
      unint64_t v33 = v28[1];
      outlined copy of Data._Representation(*v28, v33);
      uint64_t v34 = Data.description.getter();
      char v49 = a1;
      os_log_type_t v35 = v28;
      uint64_t v36 = v34;
      unint64_t v38 = v37;
      outlined consume of Data._Representation(v32, v33);
      v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = (uint64_t)v35;
      a1 = v49;
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v39, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      _os_log_impl(&dword_1B0DF7000, v29, v30, "Invalid attachmentUUID received %s", v31, 0xCu);
      uint64_t v40 = v47;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v40, -1, -1);
      MEMORY[0x1B3EA39E0](v31, -1, -1);
    }
    else
    {
      outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v28, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    }

    uint64_t v42 = v50;
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *uint64_t v43 = 1;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v42);
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
    outlined init with copy of Attachment.MMCSMetadata((uint64_t)a1, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    uint64_t v41 = v50;
    outlined init with copy of UserNotificationCenter(v50, (uint64_t)v52);
    v51[0] = v46;
    v51[1] = v22;
    v51[2] = v45;
    v51[3] = v23;
    v51[4] = v24;
    type metadata accessor for Attachment(0);
    swift_allocObject();
    uint64_t v29 = Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)((uint64_t)v18, (uint64_t)v9, (uint64_t)v52, v47, v51);
    __swift_destroy_boxed_opaque_existential_1Tm(v41);
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  }
  return v29;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.requestUploadToken()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PluginAttachmentLedgerTopic.requestUploadToken()(v1, a1);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError);
  }
  return result;
}

uint64_t sub_1B0EC0500()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();
  return MEMORY[0x1F4186498](v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v0 + v2, v4, v5);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B0EC0700()
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(updated - 8) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v48 = *(void *)(*(void *)(updated - 8) + 64);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v47 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v7 = v0 + v3;
  uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v0 + v3, 1, v8))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        uint64_t v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        uint64_t v14 = v7 + *(int *)(v13 + 20);
        uint64_t v15 = type metadata accessor for UnknownStorage();
        uint64_t v44 = *(void (**)(uint64_t))(*(void *)(v15 - 8) + 8);
        uint64_t v45 = v15;
        v44(v14);
        uint64_t v16 = v7 + *(int *)(v13 + 24);
        uint64_t v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
        {
          outlined consume of Data._Representation(*(void *)v16, *(void *)(v16 + 8));
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(void *)(v16 + 40), *(void *)(v16 + 48));
          ((void (*)(uint64_t, uint64_t))v44)(v16 + *(int *)(v17 + 32), v45);
          uint64_t v18 = v16 + *(int *)(v17 + 36);
          uint64_t v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v19 - 1) + 48))(v18, 1, v19))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(void *)(v18 + 32), *(void *)(v18 + 40));
            outlined consume of Data._Representation(*(void *)(v18 + 48), *(void *)(v18 + 56));
            ((void (*)(uint64_t, uint64_t))v44)(v18 + v19[8], v45);
            uint64_t v42 = v18 + v19[9];
            uint64_t v20 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 48);
            uint64_t v43 = v20;
            if (!v41(v42, 1))
            {
              outlined consume of Data._Representation(*(void *)(v42 + 8), *(void *)(v42 + 16));
              ((void (*)(uint64_t, uint64_t))v44)(v42 + *(int *)(v43 + 24), v45);
            }
            uint64_t v21 = v18 + v19[10];
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41)(v21, 1, v43))
            {
              outlined consume of Data._Representation(*(void *)(v21 + 8), *(void *)(v21 + 16));
              uint64_t v22 = v21 + *(int *)(v43 + 24);
              uint64_t v23 = v45;
              goto LABEL_20;
            }
          }
        }
        break;
      case 1u:
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(void *)(v7 + 16), *(void *)(v7 + 24));
        uint64_t v24 = v7
            + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        uint64_t v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v24, v25);
        break;
      case 2u:
        swift_bridgeObjectRelease();
        uint64_t v26 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        uint64_t v27 = v7 + *(int *)(v26 + 20);
        uint64_t v28 = type metadata accessor for UnknownStorage();
        uint64_t v44 = *(void (**)(uint64_t))(*(void *)(v28 - 8) + 8);
        uint64_t v46 = v28;
        v44(v27);
        uint64_t v29 = v7 + *(int *)(v26 + 24);
        uint64_t v30 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
        {
          outlined consume of Data._Representation(*(void *)v29, *(void *)(v29 + 8));
          ((void (*)(uint64_t, uint64_t))v44)(v29 + *(int *)(v30 + 20), v46);
          uint64_t v31 = v29 + *(int *)(v30 + 24);
          uint64_t v32 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32))
          {
            outlined consume of Data._Representation(*(void *)v31, *(void *)(v31 + 8));
            ((void (*)(uint64_t, uint64_t))v44)(v31 + *(int *)(v32 + 24), v46);
            uint64_t v33 = v31 + *(int *)(v32 + 28);
            uint64_t v34 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v33, 1, v34))
            {
              outlined consume of Data._Representation(*(void *)v33, *(void *)(v33 + 8));
              uint64_t v35 = *(int *)(v34 + 20);
              goto LABEL_19;
            }
          }
        }
        break;
      case 3u:
        swift_bridgeObjectRelease();
        uint64_t v36 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        uint64_t v37 = v7 + *(int *)(v36 + 20);
        uint64_t v38 = type metadata accessor for UnknownStorage();
        uint64_t v44 = *(void (**)(uint64_t))(*(void *)(v38 - 8) + 8);
        uint64_t v46 = v38;
        v44(v37);
        uint64_t v33 = v7 + *(int *)(v36 + 24);
        uint64_t v39 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v33, 1, v39))
        {
          outlined consume of Data._Representation(*(void *)v33, *(void *)(v33 + 8));
          outlined consume of Data._Representation(*(void *)(v33 + 32), *(void *)(v33 + 40));
          uint64_t v35 = *(int *)(v39 + 28);
LABEL_19:
          uint64_t v22 = v33 + v35;
          uint64_t v23 = v46;
LABEL_20:
          ((void (*)(uint64_t, uint64_t))v44)(v22, v23);
        }
        break;
      default:
        break;
    }
  }
  uint64_t v9 = v2 | v6 | 7;
  uint64_t v10 = (v3 + v48 + v6) & ~v6;
  uint64_t v11 = v7 + *(int *)(updated + 20);
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v10, v4);
  return MEMORY[0x1F4186498](v0, v10 + v47, v9);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, v10, v11, v12, v13, v14);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(a1);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.uploadTokenRequest.getter(uint64_t a1)
{
  return partial apply for closure #1 in PluginAttachmentLedgerTopic.uploadTokenRequest.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 120);
  swift_bridgeObjectRetain();
  unint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  return result;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)()
{
  return closure #1 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(v0);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1)
{
  return closure #2 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined consume of PluginAttachmentLedgerTopic.State?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 3 != 0xFFFFFFFF) {
    return outlined consume of PluginAttachmentLedgerTopic.State(a1, a2, a3, a4, a5, a6);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State);
  }
  return result;
}

uint64_t sub_1B0EC1160@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 256))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EC11B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 264);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

double sub_1B0EC1210@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 288))(v6);
  uint64_t v3 = v8;
  long long v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a2 + 32) = v7;
  *(void *)(a2 + 48) = v3;
  return result;
}

uint64_t sub_1B0EC1288@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EC12DC(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 328);
  id v4 = *a1;
  return v3(v2);
}

double sub_1B0EC1340@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)a1 + 344))(v6);
  uint64_t v3 = v8;
  long long v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a2 + 32) = v7;
  *(void *)(a2 + 48) = v3;
  return result;
}

uint64_t sub_1B0EC13B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 368))();
  *a2 = result;
  return result;
}

double sub_1B0EC1410@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 392))(v6);
  uint64_t v3 = v6[1];
  uint64_t v4 = v6[2];
  *(void *)a2 = v6[0];
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t sub_1B0EC148C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *a2;
  v6[0] = *(void *)a1;
  v6[1] = v2;
  _OWORD v6[2] = v3;
  long long v7 = *(_OWORD *)(a1 + 24);
  return (*(uint64_t (**)(void *))(*(void *)v4 + 400))(v6);
}

uint64_t sub_1B0EC1504@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 584))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EC1558(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 592);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0EC15B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 608))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EC1608(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 616);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0EC1664@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 632))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EC16B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 640);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of Token.token.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Token.expirationDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Token.accountID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for UploadToken(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)v4 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for UploadToken(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for UploadToken(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for UploadToken(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for UploadToken(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithTake for UploadToken(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UploadToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0EC1D84);
}

uint64_t sub_1B0EC1D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for UploadToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0EC1EC4);
}

uint64_t sub_1B0EC1EC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 24);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata completion function for UploadToken()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DownloadToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DownloadToken(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DownloadToken(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DownloadToken(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for DownloadToken(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for DownloadToken(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0EC2550);
}

uint64_t sub_1B0EC2550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DownloadToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0EC2614);
}

uint64_t sub_1B0EC2614(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for DownloadToken()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PluginAttachmentLedgerTopic()
{
  return type metadata accessor for PluginAttachmentLedgerTopic(0);
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PluginAttachmentLedgerTopic);
}

void type metadata completion function for PluginAttachmentLedgerTopic()
{
  type metadata accessor for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation(319, &lazy cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation, MEMORY[0x1E4FBD038]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation(319, &lazy cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>, MEMORY[0x1E4FBD060]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PluginAttachmentLedgerTopic(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginAttachmentLedgerTopic);
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.participants.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.participants.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.$participants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.$state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.shutdownReason.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.shutdownReason.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.shutdownReason.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.internalState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.internalState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.internalState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.uploadToken.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.config.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.config.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.config.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.pendingAttachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.pendingAttachments.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.pendingAttachments.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachments.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachments.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.$attachments.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.__allocating_init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)()
{
  return (*(uint64_t (**)(void))(v0 + 664))();
}

void type metadata accessor for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.RetryErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0EC2F38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.RetryErrors()
{
  return &type metadata for PluginAttachmentLedgerTopic.RetryErrors;
}

unsigned char *storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0EC303CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.Errors()
{
  return &type metadata for PluginAttachmentLedgerTopic.Errors;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.ServerError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.ServerError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.ServerError()
{
  return &type metadata for PluginAttachmentLedgerTopic.ServerError;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.Configuration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.Configuration()
{
  return &type metadata for PluginAttachmentLedgerTopic.Configuration;
}

uint64_t destroy for PluginAttachmentLedgerTopic.State(uint64_t a1)
{
  return outlined consume of PluginAttachmentLedgerTopic.State(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t *initializeWithCopy for PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  outlined copy of PluginAttachmentLedgerTopic.State(*a2, v4, v5, v6, v7, v8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  outlined copy of PluginAttachmentLedgerTopic.State(*a2, v4, v5, v6, v7, v8);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  outlined consume of PluginAttachmentLedgerTopic.State(v10, v11, v12, v13, v14, v15);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v10;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = v3;
  outlined consume of PluginAttachmentLedgerTopic.State(v4, v6, v5, v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 40) >> 3;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 8 * -a2;
      *(void *)(a1 + 48) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for PluginAttachmentLedgerTopic.State(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for PluginAttachmentLedgerTopic.State(uint64_t result)
{
  *(void *)(result + 40) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for PluginAttachmentLedgerTopic.State(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    *(void *)(result + 40) = *(void *)(result + 40) & 7 | (a2 << 62);
  }
  else
  {
    *(void *)double result = (a2 - 2);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = xmmword_1B113B6F0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State()
{
  return &type metadata for PluginAttachmentLedgerTopic.State;
}

uint64_t destroy for PluginAttachmentLedgerTopic.State.ShutdownInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo()
{
  return &type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *double result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0EC373CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason()
{
  return &type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason;
}

void *initializeBufferWithCopyOfBuffer for PluginAttachmentLedgerTopic.State.RetryInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for PluginAttachmentLedgerTopic.State.RetryInfo()
{
  return swift_release();
}

void *assignWithCopy for PluginAttachmentLedgerTopic.State.RetryInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for PluginAttachmentLedgerTopic.State.RetryInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.RetryInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.RetryInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)double result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State.RetryInfo()
{
  return &type metadata for PluginAttachmentLedgerTopic.State.RetryInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedgerTopicError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        long long v10 = (void *)a2[1];
        id v11 = v10;
        uint64_t v13 = a2[2];
        uint64_t v12 = a2[3];
        a1[1] = (uint64_t)v10;
        a1[2] = v13;
        a1[3] = v12;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v14 = type metadata accessor for NWError();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(a2, 3, v14))
        {
          uint64_t v16 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(a1, a2, v14);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 3, v14);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for AttachmentLedgerTopicError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  type metadata accessor for PluginRpcError();
  if (swift_getEnumCaseMultiPayload() == 1)
  {

LABEL_6:
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = type metadata accessor for NWError();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 3, v3);
  if (!result)
  {
    int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AttachmentLedgerTopicError(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for PluginRpcError();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v8 = (void *)a2[1];
      id v9 = v8;
      uint64_t v11 = a2[2];
      uint64_t v10 = a2[3];
      a1[1] = v8;
      a1[2] = v11;
      a1[3] = v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v12 = type metadata accessor for NWError();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 3, v12))
      {
        uint64_t v14 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 3, v12);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for AttachmentLedgerTopicError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for AttachmentLedgerTopicError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v7 = (void *)a2[1];
        id v8 = v7;
        a1[1] = v7;
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v9 = type metadata accessor for NWError();
        uint64_t v10 = *(void *)(v9 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 3, v9))
        {
          uint64_t v11 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, void *, uint64_t))(v10 + 16))(a1, a2, v9);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 3, v9);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for AttachmentLedgerTopicError(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedgerTopicError);
}

void *initializeWithTake for AttachmentLedgerTopicError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for PluginRpcError();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for NWError();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
      {
        uint64_t v9 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AttachmentLedgerTopicError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)a1, type metadata accessor for AttachmentLedgerTopicError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v7 = type metadata accessor for NWError();
        uint64_t v8 = *(void *)(v7 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
        {
          uint64_t v9 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedgerTopicError()
{
  uint64_t result = type metadata accessor for PluginRpcError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.Participant()
{
  return &type metadata for PluginAttachmentLedgerTopic.Participant;
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(void *a1)
{
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1)
{
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t *a1)
{
  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B0EC450C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>)
                 - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(v2, v3);
}

uint64_t sub_1B0EC4644()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(a1, v5, v6, v7, v8);
}

uint64_t sub_1B0EC4874()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[9];
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v0 + v3 + v1[10];
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AuthToken - 8) + 48))(v8, 1, AuthToken))v7(v8 + *(int *)(AuthToken + 24), v6); {
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
  }
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0) - 8);
  uint64_t v5 = v1 + 16;
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()(a1, v5, v6);
}

uint64_t sub_1B0EC4AD0()
{
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v22 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v19 = (v2 + 48) & ~v2;
  unint64_t v18 = (*(void *)(v1 + 64) + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v3 = *(void *)(v21 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = (v18 + v4 + 8) & ~v4;
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v20 = type metadata accessor for ContinuousClock();
  uint64_t v6 = *(void *)(v20 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v15 + v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v17 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v8 + v9 + v11) & ~v11;
  uint64_t v16 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v4 | v7 | v11 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v19, v22);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v15, v21);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v20);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v17);
  return MEMORY[0x1F4186498](v0, v16, v13);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  type metadata accessor for ContinuousClock();
  type metadata accessor for Date();
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = v1[4];
  uint64_t v11 = v1[5];
  uint64_t v12 = *(void *)((char *)v1 + v5);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(a1, v8, v9, v10, v11, (uint64_t)v1 + v4, v12, (uint64_t)v1 + v7);
}

uint64_t sub_1B0EC4FA4()
{
  uint64_t v21 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v1 = *(void *)(v21 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v17 = (v2 + 32) & ~v2;
  uint64_t v3 = *(void *)(v1 + 64);
  unint64_t v4 = (int *)(type metadata accessor for AttachmentLedger_AuthPutMaterials(0) - 8);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v6 = (v17 + v3 + v5) & ~v5;
  uint64_t v7 = *(void *)(*(void *)v4 + 64);
  uint64_t v23 = type metadata accessor for ContinuousClock();
  uint64_t v8 = *(void *)(v23 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v19 = (v6 + v7 + v9) & ~v9;
  unint64_t v18 = (*(void *)(v8 + 64) + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v22 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v18 + v11 + 8) & ~v11;
  uint64_t v20 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v5 | v9 | v11 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v17, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v0 + v6 + v4[10];
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v19, v23);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v22);
  return MEMORY[0x1F4186498](v0, v20, v13);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ContinuousClock.Instant() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for AttachmentLedger_AuthPutMaterials(0) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for ContinuousClock() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID() - 8) + 80);
  uint64_t v14 = v12 + v13 + 8;
  uint64_t v15 = *(void *)(v1 + 16);
  uint64_t v16 = *(void *)(v1 + 24);
  uint64_t v17 = v1 + v5;
  uint64_t v18 = v1 + v8;
  uint64_t v19 = v1 + v11;
  uint64_t v20 = *(void *)(v1 + v12);
  uint64_t v21 = v1 + (v14 & ~v13);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v22;
  *uint64_t v22 = v2;
  v22[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(a1, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(void *a1)
{
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1, v1);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  return closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.remove(id:)(void *a1)
{
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.remove(id:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined copy of Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15 && (a3 & 0xF000000000000000) != 0xB000000000000000) {
    return outlined copy of Data._Representation(a2, a3);
  }
  return result;
}

uint64_t outlined consume of Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15 && (a3 & 0xF000000000000000) != 0xB000000000000000) {
    return outlined consume of Data._Representation(a2, a3);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(void *a1)
{
  return closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B0EC5568()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  unint64_t v6 = *(void *)(v0 + v5 + 16);
  if (v6 >> 60 != 15 && (v6 & 0xF000000000000000) != 0xB000000000000000) {
    outlined consume of Data._Representation(*(void *)(v0 + v5 + 8), v6);
  }
  return MEMORY[0x1F4186498](v0, v5 + 24, v3 | 7);
}

void partial apply for closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(void *)(v1 + 16), v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v5 + 8), *(void *)(v1 + v5 + 16));
}

uint64_t partial apply for closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(void *a1)
{
  return closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  return closure #1 in closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  return closure #1 in closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1);
}

uint64_t partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(void *a1)
{
  return closure #1 in closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.setupSubscribeStream()(uint64_t a1)
{
  return closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, v1, (void (*)(uint64_t))PluginAttachmentLedgerTopic.handleSubscribeStreamClosed(completedWith:));
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()(NSObject *a1)
{
  return closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()(a1);
}

uint64_t partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()()
{
  return closure #1 in closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = *(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0)
                   - 8);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v9 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v10 = closure #1 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(v8, a2, &v11);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v11)
      {
        MEMORY[0x1B3EA1CF0](v10);
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += v9;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t objectdestroy_9Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v5[5] = a1;
  v5[6] = v4;
  return MEMORY[0x1F4188298](closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), 0, 0);
}

uint64_t sub_1B0EC5A30()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v6);
  return MEMORY[0x1F4186498](v0, v6 + 40, v5);
}

uint64_t partial apply for closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1B0EC5C64()
{
  uint64_t v1 = (int *)(type metadata accessor for AttachmentLedger_AuthPutMaterials(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AttachmentLedger_AuthPutMaterials(0) - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  _OWORD v6[2] = a1;
  void v6[3] = v5;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return MEMORY[0x1F4188298](closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), 0, 0);
}

uint64_t sub_1B0EC5E50()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 128, 7);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = (uint64_t)(v1 + 9);
  uint64_t v9 = v1[14];
  uint64_t v8 = v1[15];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B0EC5F78()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1)
{
  uint64_t v4 = v1 + 16;
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(a1, v4, v5);
}

void partial apply for closure #1 in PluginAttachmentLedgerTopic.triggerResubscribe()()
{
  closure #1 in PluginAttachmentLedgerTopic.triggerResubscribe()(v0);
}

uint64_t sub_1B0EC6084()
{
  return objectdestroy_229Tm(64);
}

uint64_t partial apply for specialized closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in Task<>.init(priority:timeout:operation:)
                                                                                              + async function pointer to specialized closure #1 in Task<>.init(priority:timeout:operation:));
  return v11(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)
                                                                                     + async function pointer to specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:));
  return v11(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1B0EC6248()
{
  return objectdestroy_229Tm(48);
}

uint64_t objectdestroy_229Tm(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5Tu
                                                                + _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5Tu);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1B0EC6368()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)
                                                                           + async function pointer to specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:));
  return v9(a1, v4, v5, v7, v6);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return v5(v3, v2, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  else {
    uint64_t v5 = specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  lazy protocol witness table accessor for type TaskError and conformance TaskError();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1B0EC67EC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1B0EC6804()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #2 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(a1, v4, v5);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.MMCSMetadata.metadata.getter(uint64_t a1)
{
  return closure #1 in closure #1 in Attachment.MMCSMetadata.metadata.getter(a1, *(void *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in Attachment.MMCSMetadata.metadata.getter(void *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  unint64_t v5 = v1[4];
  *a1 = v3;
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  outlined copy of Data._Representation(v4, v5);
  uint64_t result = outlined consume of Data._Representation(v6, v7);
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t partial apply for closure #1 in Attachment.unencryptedAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Attachment.unencryptedAttachment.getter(a1);
}

uint64_t outlined init with take of AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in Attachment.MMCSMetadata.metadata.getterpartial apply(void *a1)
{
  return partial apply for closure #1 in Attachment.MMCSMetadata.metadata.getter(a1);
}

uint64_t partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)()
{
  return partial apply for closure #1 in PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:)() & 1;
}

uint64_t SKPresentDevice.context<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v17[-v10];
  id v12 = objc_msgSend(v4, sel_presencePayloadDictionary);
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(v13, a1, a2);
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = v4;
  uint64_t v21 = a1;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SKPresentDevice.context<A>(as:), (uint64_t)v17, MEMORY[0x1E4FBC248], ExtendedExistentialTypeMetadata, v15, a3);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t PresentDevice.withoutContext()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPresentDevice<EmptyPresenceContext>);
  a3[3] = v7;
  a3[4] = lazy protocol witness table accessor for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  v6(a1, a2);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  uint64_t v11 = v10;
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  uint64_t v14 = (uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v7 + 28));
  *uint64_t v14 = v9;
  v14[1] = v11;
  *((unsigned char *)boxed_opaque_existential_1 + *(int *)(v7 + 32)) = v12 & 1;
  return result;
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t AnyPresentDevice.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t AnyPresentDevice.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*AnyPresentDevice.id.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.handleValue.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AnyPresentDevice.handleValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AnyPresentDevice.handleValue.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.isCurrentDevice.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t AnyPresentDevice.isCurrentDevice.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 32)) = result;
  return result;
}

uint64_t (*AnyPresentDevice.isCurrentDevice.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.timestamp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AnyPresentDevice.timestamp.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AnyPresentDevice.timestamp.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.context.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t AnyPresentDevice.context.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*AnyPresentDevice.context.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.init(id:handleValue:isCurrentDevice:timestamp:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a8, a1, v16);
  uint64_t v17 = (int *)type metadata accessor for AnyPresentDevice();
  uint64_t v18 = (void *)(a8 + v17[7]);
  *uint64_t v18 = a2;
  v18[1] = a3;
  *(unsigned char *)(a8 + v17[8]) = a4;
  uint64_t v19 = a8 + v17[9];
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a5, v20);
  uint64_t v21 = a8 + v17[10];
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32);
  return v22(v21, a6, a7);
}

uint64_t protocol witness for PresentDevice.id.getter in conformance AnyPresentDevice<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t protocol witness for PresentDevice.isCurrentDevice.getter in conformance AnyPresentDevice<A>(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t protocol witness for PresentDevice.timestamp.getter in conformance AnyPresentDevice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for PresentDevice.context.getter in conformance AnyPresentDevice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t AnyPresentDevice<A>.init(id:handleValue:isCurrentDevice:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  uint64_t v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPresentDevice<EmptyPresenceContext>);
  uint64_t v14 = (void *)(a6 + v13[7]);
  *uint64_t v14 = a2;
  v14[1] = a3;
  *(unsigned char *)(a6 + v13[8]) = a4;
  uint64_t v15 = a6 + v13[9];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
  return v17(v15, a5, v16);
}

uint64_t SKPresentDevice.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v45 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v46 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = MEMORY[0x1F4188790](v46);
  uint64_t v43 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = &v38[-v8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v12 = objc_msgSend(v1, sel_deviceIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v14 + 32))(a1, v11, v13);
  }
  outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for host != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  id v16 = v1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.fault.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v40 = v21;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v47 = (uint64_t)v16;
    uint64_t v48 = v41;
    *(_DWORD *)uint64_t v20 = 138412546;
    uint64_t v42 = a1;
    id v22 = v16;
    int v39 = v19;
    id v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v16;

    *(_WORD *)(v20 + 12) = 2080;
    id v24 = objc_msgSend(v23, sel_deviceIdentifier);
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v17, (os_log_type_t)v39, "Failed to create UUID from SKPresentDevice's deviceIdentifier %@ deviceIdentifier: %s.", (uint8_t *)v20, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v28 = v40;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v28, -1, -1);
    uint64_t v29 = v41;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v29, -1, -1);
    MEMORY[0x1B3EA39E0](v20, -1, -1);
  }
  else
  {
  }
  uint64_t v31 = v44;
  Date.init()();
  uint64_t v32 = type metadata accessor for TaskPriority();
  uint64_t v33 = (uint64_t)v45;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v45, 1, 1, v32);
  uint64_t v34 = v43;
  uint64_t v35 = v46;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v43, v31, v46);
  unint64_t v36 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = 0;
  *(void *)(v37 + 24) = 0;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v37 + v36, v34, v35);
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v33, (uint64_t)&async function pointer to partial apply for closure #1 in SKPresentDevice.id.getter, v37);
  swift_release();
  outlined destroy of UUID?(v33, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  UUID.init()();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v31, v35);
}

uint64_t closure #1 in SKPresentDevice.id.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  uint64_t v5 = type metadata accessor for Date();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SKPresentDevice.id.getter, 0, 0);
}

uint64_t closure #1 in SKPresentDevice.id.getter()
{
  uint64_t v48 = v0;
  type metadata accessor for ABCReporter();
  uint64_t inited = swift_initStackObject();
  v0[19] = inited;
  *(void *)(inited + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA8AF0]), sel_init);
  *(void *)(inited + 24) = 0x636E795374736146;
  *(void *)(inited + 32) = 0xE800000000000000;
  *(void *)(inited + 40) = 0x694B737574617453;
  *(void *)(inited + 48) = 0xE900000000000074;
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_mainBundle);
  id v4 = objc_msgSend(v3, sel_bundleIdentifier);

  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    v8._countAndFlagsBits = 0xD000000000000019;
    v8._object = (void *)0x80000001B115DC80;
    v9._countAndFlagsBits = 0x5564696C61766E49;
    v9._object = (void *)0xEB00000000444955;
    v10._countAndFlagsBits = v5;
    v10._object = v7;
    unint64_t v11 = (unint64_t)ABCReporter.signature(subType:context:process:)(v8, v9, v10);
    v0[20] = v11;
    swift_bridgeObjectRelease();
    if (v11)
    {
      if (one-time initialization token for abcReporter != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Log.abcReporter);
      swift_bridgeObjectRetain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v47 = v16;
        *(_DWORD *)uint64_t v15 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v17 = Dictionary.description.getter();
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
        v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B0DF7000, v13, v14, "Reporting signature %s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v16, -1, -1);
        MEMORY[0x1B3EA39E0](v15, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v36 = v0[17];
      uint64_t v35 = v0[18];
      uint64_t v37 = v0[16];
      Date.init()();
      Date.timeIntervalSince(_:)();
      double v39 = v38;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      uint64_t v40 = swift_task_alloc();
      v0[21] = v40;
      *(void *)(v40 + 16) = inited;
      *(void *)(v40 + 24) = v11;
      *(double *)(v40 + 32) = v39 + 300.0;
      uint64_t v41 = (void *)swift_task_alloc();
      v0[22] = v41;
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
      *uint64_t v41 = v0;
      v41[1] = closure #1 in SKPresentDevice.id.getter;
      return MEMORY[0x1F41880D8](v0 + 13, 0, 0, 0xD000000000000016, 0x80000001B115DCA0, partial apply for closure #1 in ABCReporter.report(with:duration:), v40, v42);
    }
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.abcReporter);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1B0DF7000, v21, v33, "Failed to convert signature payload", v34, 2u);
      MEMORY[0x1B3EA39E0](v34, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for abcReporter != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.abcReporter);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v45 = v22;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v47 = v46;
      *(_DWORD *)uint64_t v23 = 136315394;
      v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(25705, 0xE200000000000000, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      id v24 = objc_msgSend(v2, sel_mainBundle);
      id v25 = objc_msgSend(v24, sel_bundleIdentifier);

      if (v25)
      {
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        v0[9] = v26;
        v0[10] = v28;
        uint64_t v29 = String.init<A>(reflecting:)();
        unint64_t v31 = v30;
      }
      else
      {
        unint64_t v31 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
      v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v21, v45, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v46, -1, -1);
      MEMORY[0x1B3EA39E0](v23, -1, -1);
      swift_release();
      goto LABEL_23;
    }
  }
  swift_setDeallocating();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_23:

  swift_task_dealloc();
  uint64_t v43 = (uint64_t (*)(void))v0[1];
  return v43();
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in SKPresentDevice.id.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 152);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t SKPresentDevice.handleValue.getter()
{
  id v1 = objc_msgSend(v0, sel_handle);
  id v2 = objc_msgSend(v1, sel_handleString);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

id SKPresentDevice.isCurrentDevice.getter()
{
  return objc_msgSend(v0, sel_isSelfDevice);
}

id SKPresentDevice.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  id result = objc_msgSend(v2, sel_respondsToSelector_, sel_assertionTime);
  if (result)
  {
    id result = objc_msgSend(v2, sel_performSelector_, sel_assertionTime);
    if (result)
    {
      self;
      if (swift_dynamicCastObjCClass())
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
        return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
      }
      else
      {
        return (id)swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

uint64_t SKPresentDevice.context.getter()
{
  id v1 = objc_msgSend(v0, sel_presencePayloadDictionary);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for PresentDevice.id.getter in conformance SKPresentDevice@<X0>(uint64_t a1@<X8>)
{
  return SKPresentDevice.id.getter(a1);
}

uint64_t protocol witness for PresentDevice.handleValue.getter in conformance SKPresentDevice()
{
  id v1 = objc_msgSend(*v0, sel_handle);
  id v2 = objc_msgSend(v1, sel_handleString);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

id protocol witness for PresentDevice.isCurrentDevice.getter in conformance SKPresentDevice()
{
  return objc_msgSend(*v0, sel_isSelfDevice);
}

id protocol witness for PresentDevice.timestamp.getter in conformance SKPresentDevice@<X0>(uint64_t a1@<X8>)
{
  return SKPresentDevice.timestamp.getter(a1);
}

void protocol witness for PresentDevice.context.getter in conformance SKPresentDevice(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_presencePayloadDictionary);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v4;
}

uint64_t closure #1 in SKPresentDevice.context<A>(as:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v24 = a1;
  id v25 = a4;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::String v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v12 - 8);
  os_log_type_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  SKPresentDevice.id.getter((uint64_t)v14);
  id v15 = objc_msgSend(a2, sel_handle);
  id v16 = objc_msgSend(v15, sel_handleString);

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  LOBYTE(v16) = objc_msgSend(a2, sel_isSelfDevice);
  SKPresentDevice.timestamp.getter((uint64_t)v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v24, a3);
  uint64_t v20 = type metadata accessor for AnyPresentDevice();
  uint64_t v21 = v25;
  v25[3] = v20;
  v21[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  return AnyPresentDevice.init(id:handleValue:isCurrentDevice:timestamp:context:)((uint64_t)v14, v17, v19, (char)v16, (uint64_t)v11, (uint64_t)v8, a3, (uint64_t)boxed_opaque_existential_1);
}

uint64_t partial apply for closure #1 in SKPresentDevice.context<A>(as:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SKPresentDevice.context<A>(as:)(a1, *(void **)(v2 + 32), *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>;
  if (!lazy protocol witness table cache variable for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPresentDevice<EmptyPresenceContext>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>);
  }
  return result;
}

uint64_t type metadata accessor for AnyPresentDevice()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B0EC8C8C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in SKPresentDevice.id.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  Swift::String v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *Swift::String v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in SKPresentDevice.id.getter(a1, v5, v6, v7);
}

uint64_t dispatch thunk of PresentDevice.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PresentDevice.handleValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PresentDevice.isCurrentDevice.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PresentDevice.timestamp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PresentDevice.context.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata instantiation function for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for AnyPresentDevice()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyPresentDevice(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  unsigned int v17 = v15 | *(_DWORD *)(v7 + 80) & 0xF8 | v11;
  if (((v12 + v15 + ((v11 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v11)) & ~v15) + *(void *)(v14 + 64) > 0x18
    || ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v17 > 7)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + (((v17 | 7) + 16) & ~(unint64_t)(v17 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v21 = ~v11;
    uint64_t v29 = v9;
    uint64_t v30 = ~v15;
    uint64_t v31 = v13;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    unint64_t v22 = ((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = *(void *)(v23 + 8);
    *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
    uint64_t v24 = v23 + v11;
    uint64_t v25 = (v22 + v11 + 17) & ~v11;
    uint64_t v26 = (v24 + 17) & v21;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain();
    v27(v25, v26, v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))((v25 + v16) & v30, (v26 + v16) & v30, v31);
  }
  return a1;
}

uint64_t destroy for AnyPresentDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  unint64_t v6 = (a1 + *(void *)(v5 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + *(unsigned __int8 *)(v8 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (v10 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return v12(v13);
}

uint64_t initializeWithCopy for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 48) + 7;
  unint64_t v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  uint64_t v14 = v12 + 16;
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 17 + v9) & ~v15;
  uint64_t v17 = (v15 + 17 + v10) & ~v15;
  swift_bridgeObjectRetain();
  v13(v16, v17, v11);
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 16))((*(void *)(v14 + 48) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(void *)(v14 + 48) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t assignWithCopy for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 40) + 7;
  unint64_t v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 17 + v9) & ~v14;
  uint64_t v16 = (v14 + 17 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v15, v16, v11);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 24))((*(void *)(v13 + 40) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v13 + 40) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t initializeWithTake for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 32) + 7;
  unint64_t v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 17 + v9) & ~v14;
  uint64_t v16 = (v14 + 17 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v16, v11);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))((*(void *)(v13 + 32) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v13 + 32) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithTake for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 24) + 7;
  unint64_t v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 17 + v9) & ~v14;
  uint64_t v16 = (v14 + 17 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v15, v16, v11);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 40))((*(void *)(v13 + 24) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v13 + 24) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPresentDevice(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  if (v8 <= v11) {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v14 = v8;
  }
  uint64_t v15 = *(unsigned int *)(v13 + 84);
  uint64_t v16 = *(void *)(v7 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v20 = *(void *)(v13 + 64);
  if (v14 <= v15) {
    unsigned int v21 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v21 = v14;
  }
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v22 = 0x7FFFFFFF;
  }
  else {
    unsigned int v22 = v21;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v22) {
    goto LABEL_31;
  }
  uint64_t v23 = ((v18 + v19 + ((v17 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v17)) & ~v19) + v20;
  char v24 = 8 * v23;
  if (v23 > 3) {
    goto LABEL_13;
  }
  unsigned int v27 = ((a2 - v22 + ~(-1 << v24)) >> v24) + 1;
  if (HIWORD(v27))
  {
    int v25 = *(_DWORD *)((char *)a1 + v23);
    if (v25) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v27 <= 0xFF)
    {
      if (v27 < 2) {
        goto LABEL_31;
      }
LABEL_13:
      int v25 = *((unsigned __int8 *)a1 + v23);
      if (!*((unsigned char *)a1 + v23)) {
        goto LABEL_31;
      }
LABEL_21:
      int v28 = (v25 - 1) << v24;
      if (v23 > 3) {
        int v28 = 0;
      }
      if (v23)
      {
        if (v23 <= 3) {
          int v29 = ((v18 + v19 + ((v17 + ((v16 + 7) & 0xFFFFFFF8) + 17) & ~v17)) & ~v19) + v20;
        }
        else {
          int v29 = 4;
        }
        switch(v29)
        {
          case 2:
            int v30 = *a1;
            break;
          case 3:
            int v30 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v30 = *(_DWORD *)a1;
            break;
          default:
            int v30 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v30 = 0;
      }
      return v22 + (v30 | v28) + 1;
    }
    int v25 = *(unsigned __int16 *)((char *)a1 + v23);
    if (*(unsigned __int16 *)((char *)a1 + v23)) {
      goto LABEL_21;
    }
  }
LABEL_31:
  if (v8 == v22)
  {
    uint64_t v31 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v32 = a1;
    uint64_t v33 = v8;
    uint64_t v12 = v6;
LABEL_33:
    return v31(v32, v33, v12);
  }
  unint64_t v34 = ((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v21 & 0x80000000) != 0)
  {
    uint64_t v36 = (v34 + v17 + 17) & ~v17;
    if (v11 != v22)
    {
      uint64_t v32 = (unsigned __int16 *)((v36 + v18 + v19) & ~v19);
      uint64_t v31 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8)
                                                                           + 48);
      uint64_t v33 = v15;
      goto LABEL_33;
    }
    uint64_t v37 = *(uint64_t (**)(uint64_t))(v10 + 48);
    return v37(v36);
  }
  else
  {
    unint64_t v35 = *(void *)(v34 + 8);
    if (v35 >= 0xFFFFFFFF) {
      LODWORD(v35) = -1;
    }
    return (v35 + 1);
  }
}

void storeEnumTagSinglePayload for AnyPresentDevice(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v10 <= v13) {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v14 = v10;
  }
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = *(void *)(*(void *)(v11 - 8) + 64);
  uint64_t v21 = *(unsigned __int8 *)(v16 + 80);
  if (v14 <= v17) {
    unsigned int v14 = *(_DWORD *)(v16 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v22 = 0x7FFFFFFF;
  }
  else {
    unsigned int v22 = v14;
  }
  size_t v23 = ((v20 + v21 + ((v19 + ((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v19)) & ~v21) + *(void *)(v16 + 64);
  if (a3 <= v22)
  {
    int v24 = 0;
  }
  else if (v23 <= 3)
  {
    unsigned int v27 = ((a3 - v22 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v27))
    {
      int v24 = 4;
    }
    else if (v27 >= 0x100)
    {
      int v24 = 2;
    }
    else
    {
      int v24 = v27 > 1;
    }
  }
  else
  {
    int v24 = 1;
  }
  if (v22 < a2)
  {
    unsigned int v25 = ~v22 + a2;
    if (v23 < 4)
    {
      int v26 = (v25 >> (8 * v23)) + 1;
      if (v23)
      {
        int v28 = v25 & ~(-1 << (8 * v23));
        bzero(a1, v23);
        if (v23 == 3)
        {
          *(_WORD *)a1 = v28;
          a1[2] = BYTE2(v28);
        }
        else if (v23 == 2)
        {
          *(_WORD *)a1 = v28;
        }
        else
        {
          *a1 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v23);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v24)
    {
      case 1:
        a1[v23] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v23] = v26;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&a1[v23] = v26;
        return;
      default:
        return;
    }
  }
  switch(v24)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x1B0EC9FCCLL);
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_28;
    default:
LABEL_28:
      if (!a2) {
        return;
      }
LABEL_29:
      if (v10 == v22)
      {
        int v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        int v30 = a1;
        uint64_t v31 = a2;
        uint64_t v32 = v10;
        uint64_t v15 = v8;
LABEL_31:
        v29(v30, v31, v32, v15);
        return;
      }
      uint64_t v33 = (void *)((unint64_t)&a1[v18 + 7] & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0)
        {
          void *v33 = a2 ^ 0x80000000;
          v33[1] = 0;
        }
        else
        {
          v33[1] = (a2 - 1);
        }
        return;
      }
      uint64_t v34 = ((unint64_t)v33 + v19 + 17) & ~v19;
      if (v13 != v22)
      {
        int v30 = (unsigned char *)((v34 + v20 + v21) & ~v21);
        int v29 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        uint64_t v31 = a2;
        uint64_t v32 = v17;
        goto LABEL_31;
      }
      unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v12 + 56);
      v35(v34, a2);
      return;
  }
}

uint64_t sub_1B0EC9FF4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in ABCReporter.report(with:duration:)(uint64_t a1)
{
  closure #1 in ABCReporter.report(with:duration:)(a1, *(void *)(v1 + 16), *(double *)(v1 + 32));
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = specialized tryLog<A>(_:_:function:line:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))implicit closure #2 in CPApplicationController.lookupBundleIdentifierSupported(_:));
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t tryLog<A>(_:_:function:line:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  a1();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
  return v4(a2, 0, 1, a3);
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return 0;
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  a10(&v11, a7, a8, a9);
  return v11;
}

CopresenceCore::AuthorizationRequestOverrides::PromptCondition_optional __swiftcall AuthorizationRequestOverrides.PromptCondition.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (CopresenceCore::AuthorizationRequestOverrides::PromptCondition_optional)rawValue;
}

uint64_t AuthorizationRequestOverrides.PromptCondition.rawValue.getter()
{
  return *v0;
}

CopresenceCore::AuthorizationRequestOverrides::PromptCondition_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AuthorizationRequestOverrides.PromptCondition(Swift::Int *a1)
{
  return AuthorizationRequestOverrides.PromptCondition.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AuthorizationRequestOverrides.PromptCondition(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t AuthorizationRequestOverrides.title.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_title);
}

uint64_t AuthorizationRequestOverrides.message.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_message);
}

uint64_t AuthorizationRequestOverrides.startForEveryone.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone);
}

uint64_t AuthorizationRequestOverrides.startForMe.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe);
}

uint64_t AuthorizationRequestOverrides.title.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

void AuthorizationRequestOverrides.promptCondition.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition);
}

uint64_t AuthorizationRequestOverrides.confirmReplacement.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement);
}

id AuthorizationRequestOverrides.__allocating_init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char a10)
{
  uint64_t v18 = objc_allocWithZone(v10);
  char v19 = *a9;
  uint64_t v20 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_title];
  *uint64_t v20 = a1;
  v20[1] = a2;
  uint64_t v21 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_message];
  *uint64_t v21 = a3;
  v21[1] = a4;
  unsigned int v22 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone];
  *unsigned int v22 = a5;
  v22[1] = a6;
  size_t v23 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe];
  *size_t v23 = a7;
  v23[1] = a8;
  v18[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition] = v19;
  v18[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement] = a10;
  v26.receiver = v18;
  v26.super_class = v10;
  return objc_msgSendSuper2(&v26, sel_init);
}

id AuthorizationRequestOverrides.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char a10)
{
  char v11 = *a9;
  uint64_t v12 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_title];
  *uint64_t v12 = a1;
  v12[1] = a2;
  unsigned int v13 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_message];
  *unsigned int v13 = a3;
  v13[1] = a4;
  unsigned int v14 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone];
  *unsigned int v14 = a5;
  v14[1] = a6;
  uint64_t v15 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe];
  *uint64_t v15 = a7;
  v15[1] = a8;
  v10[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition] = v11;
  v10[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement] = a10;
  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for AuthorizationRequestOverrides();
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t type metadata accessor for AuthorizationRequestOverrides()
{
  return self;
}

uint64_t AuthorizationRequestOverrides.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v17);
  if (!v18)
  {
    outlined destroy of Any?((uint64_t)v17);
    goto LABEL_39;
  }
  type metadata accessor for AuthorizationRequestOverrides();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_39:
    char v14 = 0;
    return v14 & 1;
  }
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8);
  uint64_t v3 = *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8];
  if (v2)
  {
    if (!v3) {
      goto LABEL_38;
    }
    BOOL v4 = *(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title) == *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_title]
      && v2 == v3;
    if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_38;
    }
  }
  else if (v3)
  {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8);
  uint64_t v6 = *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8];
  if (v5)
  {
    if (!v6) {
      goto LABEL_38;
    }
    BOOL v7 = *(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message) == *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_message]
      && v5 == v6;
    if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_38;
    }
  }
  else if (v6)
  {
    goto LABEL_38;
  }
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8);
  uint64_t v9 = *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8];
  if (v8)
  {
    if (!v9
      || (*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone) != *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone]
       || v8 != v9)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_38;
    }
  }
  else if (v9)
  {
    goto LABEL_38;
  }
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8);
  uint64_t v11 = *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8];
  if (!v10)
  {
    if (!v11) {
      goto LABEL_36;
    }
LABEL_38:

    goto LABEL_39;
  }
  if (!v11
    || (*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe) != *(void *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe]
     || v10 != v11)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_38;
  }
LABEL_36:
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) != v16[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition]) {
    goto LABEL_38;
  }
  char v12 = *(unsigned char *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement);
  char v13 = v16[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement];

  char v14 = v12 ^ v13 ^ 1;
  return v14 & 1;
}

BOOL AuthorizationRequestOverrides.alwaysPrompt.getter()
{
  return *(unsigned char *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) == 1;
}

Swift::Int AuthorizationRequestOverrides.hash.getter()
{
  Hasher.init()();
  if (*(void *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition));
  Hasher._combine(_:)(*(unsigned char *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement));
  return Hasher.finalize()();
}

uint64_t static AuthorizationRequestOverrides.supportsSecureCoding.getter()
{
  return 1;
}

id AuthorizationRequestOverrides.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized AuthorizationRequestOverrides.init(coder:)(a1);

  return v4;
}

id AuthorizationRequestOverrides.init(coder:)(void *a1)
{
  id v2 = specialized AuthorizationRequestOverrides.init(coder:)(a1);

  return v2;
}

Swift::Void __swiftcall AuthorizationRequestOverrides.encode(with:)(NSCoder with)
{
  if (*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8)) {
    uint64_t v3 = MEMORY[0x1B3EA1B00](*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title));
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (void *)MEMORY[0x1B3EA1B00](0x656C746974, 0xE500000000000000);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8)) {
    uint64_t v5 = MEMORY[0x1B3EA1B00](*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message));
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)MEMORY[0x1B3EA1B00](0x6567617373656DLL, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8)) {
    uint64_t v7 = MEMORY[0x1B3EA1B00](*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone));
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000010, 0x80000001B115DD30);
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  swift_unknownObjectRelease();

  if (*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8)) {
    uint64_t v9 = MEMORY[0x1B3EA1B00](*(void *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe));
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (void *)MEMORY[0x1B3EA1B00](0x726F467472617473, 0xEA0000000000654DLL);
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
  swift_unknownObjectRelease();

  uint64_t v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition);
  char v12 = (void *)MEMORY[0x1B3EA1B00](0x6F4374706D6F7270, 0xEF6E6F697469646ELL);
  [(objc_class *)with.super.isa encodeInteger:v11 forKey:v12];

  uint64_t v13 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement);
  id v14 = (id)MEMORY[0x1B3EA1B00](0xD000000000000012, 0x80000001B115DD50);
  [(objc_class *)with.super.isa encodeBool:v13 forKey:v14];
}

id AuthorizationRequestOverrides.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AuthorizationRequestOverrides.init()()
{
}

id AuthorizationRequestOverrides.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AuthorizationRequestOverrides();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized AuthorizationRequestOverrides.init(coder:)(void *a1)
{
  objc_super v2 = v1;
  type metadata accessor for NSString();
  id v4 = v2;
  uint64_t v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_title];
  *uint64_t v10 = v7;
  v10[1] = v9;
  uint64_t v11 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v11)
  {
    char v12 = (void *)v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_message];
  *uint64_t v16 = v13;
  v16[1] = v15;
  uint64_t v17 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  unsigned int v22 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone];
  *unsigned int v22 = v19;
  v22[1] = v21;
  uint64_t v23 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v23)
  {
    int v24 = (void *)v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0;
  }
  int v28 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe];
  *int v28 = v25;
  v28[1] = v27;
  int v29 = (void *)MEMORY[0x1B3EA1B00](0x6F4374706D6F7270, 0xEF6E6F697469646ELL);
  id v30 = objc_msgSend(a1, sel_decodeIntegerForKey_, v29);

  char v31 = v30 == (id)1;
  if (v30 == (id)2) {
    char v31 = 2;
  }
  v4[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition] = v31;
  uint64_t v32 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000012, 0x80000001B115DD50);
  unsigned __int8 v33 = objc_msgSend(a1, sel_decodeBoolForKey_, v32);

  v4[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement] = v33;
  v35.receiver = v4;
  v35.super_class = (Class)type metadata accessor for AuthorizationRequestOverrides();
  return objc_msgSendSuper2(&v35, sel_init);
}

unint64_t lazy protocol witness table accessor for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition()
{
  unint64_t result = lazy protocol witness table cache variable for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition;
  if (!lazy protocol witness table cache variable for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition);
  }
  return result;
}

uint64_t method lookup function for AuthorizationRequestOverrides(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AuthorizationRequestOverrides);
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.__allocating_init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.alwaysPrompt.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

unsigned char *storeEnumTagSinglePayload for AuthorizationRequestOverrides.PromptCondition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0ECBA58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationRequestOverrides.PromptCondition()
{
  return &type metadata for AuthorizationRequestOverrides.PromptCondition;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

id CPAudioRoutePolicyManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id static CPAudioRoutePolicyManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static CPAudioRoutePolicyManager.shared;
  return v0;
}

uint64_t CPAudioRoutePolicyManager.observers.getter()
{
  return swift_retain();
}

uint64_t CPAudioRoutePolicyManager.observers.setter(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR___CPAudioRoutePolicyManager_observers);
  swift_beginAccess();
  *int v3 = a1;
  return swift_release();
}

uint64_t (*CPAudioRoutePolicyManager.observers.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t CPAudioRoutePolicyManager._pickedRoute.getter()
{
  return swift_retain();
}

void *CPAudioRoutePolicyManager.pickedRoute.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR___CPAudioRoutePolicyManager__pickedRoute);
  objc_super v2 = (void **)&v1[4];
  int v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  closure #1 in CPAudioRoutePolicyManager.pickedRoute.getter(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void CPAudioRoutePolicyManager.pickedRoute.setter(void *a1)
{
  objc_super v2 = v1;
  unsigned int v4 = *(os_unfair_lock_s **)((char *)v1 + OBJC_IVAR___CPAudioRoutePolicyManager__pickedRoute);
  uint64_t v5 = (id *)&v4[4];
  unsigned int v6 = v4 + 6;
  os_unfair_lock_lock(v4 + 6);
  partial apply for closure #1 in CPAudioRoutePolicyManager.pickedRoute.setter(v5, &v11);
  os_unfair_lock_unlock(v6);
  if (v11 == 1)
  {
    uint64_t v7 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68))();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v2;
    uint64_t v9 = *(void (**)(id (*)(void *), uint64_t))(*(void *)v7 + 152);
    id v10 = v2;
    v9(partial apply for closure #2 in CPAudioRoutePolicyManager.pickedRoute.setter, v8);
    swift_release();
    swift_release();
  }
}

id closure #1 in CPAudioRoutePolicyManager.pickedRoute.getter@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  objc_super v2 = *a1;
  *a2 = *a1;
  return v2;
}

void closure #1 in CPAudioRoutePolicyManager.pickedRoute.setter(id *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  id v6 = *a1;
  if (*a1)
  {
    if (!a2
      || (type metadata accessor for TURoute(),
          id v6 = v6,
          id v7 = a2,
          char v8 = static NSObject.== infix(_:_:)(),
          v6,
          v7,
          (v8 & 1) == 0))
    {

LABEL_6:
      *a1 = a2;
      *a3 = 1;
      id v9 = a2;
      return;
    }
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  *a3 = 0;
}

void partial apply for closure #1 in CPAudioRoutePolicyManager.pickedRoute.setter(id *a1@<X0>, unsigned char *a2@<X8>)
{
  closure #1 in CPAudioRoutePolicyManager.pickedRoute.setter(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1B0ECC078()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id partial apply for closure #2 in CPAudioRoutePolicyManager.pickedRoute.setter(void *a1)
{
  int v3 = *(void **)(v1 + 16);
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x98))() & 1;
  return objc_msgSend(a1, sel_audioPolicyManager_sharePlayAllowedStateChanged_, v3, v4);
}

void (*CPAudioRoutePolicyManager.pickedRoute.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  int v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR___CPAudioRoutePolicyManager__pickedRoute);
  uint64_t v4 = (void **)&v3[4];
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  closure #1 in CPAudioRoutePolicyManager.pickedRoute.getter(v4, &v7);
  os_unfair_lock_unlock(v5);
  *a1 = v7;
  return CPAudioRoutePolicyManager.pickedRoute.modify;
}

void CPAudioRoutePolicyManager.pickedRoute.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    CPAudioRoutePolicyManager.pickedRoute.setter(v2);
  }
  else
  {
    CPAudioRoutePolicyManager.pickedRoute.setter(*a1);
  }
}

uint64_t CPAudioRoutePolicyManager.sharePlaySupported.getter()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
  if (!v1) {
    return 1;
  }
  uint64_t v2 = v1;
  if (objc_msgSend(v1, sel_supportsSharePlay))
  {
    unsigned int v3 = objc_msgSend(v2, sel_isCarKitRoute);

    return v3 ^ 1;
  }
  else
  {

    return 0;
  }
}

char *CPAudioRoutePolicyManager.init()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[0] = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v27[0] - 8);
  MEMORY[0x1F4188790](v27[0]);
  id v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR___CPAudioRoutePolicyManager_observers;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DelegatesManager<CPAudioPolicyStateObserver>);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = MEMORY[0x1E4FBC860];
  type metadata accessor for Lock();
  uint64_t v10 = swift_allocObject();
  char v11 = v0;
  char v12 = (_DWORD *)swift_slowAlloc();
  *(void *)(v10 + 16) = v12;
  *char v12 = 0;
  *(void *)(v9 + 24) = v10;
  *(void *)&v0[v8] = v9;
  uint64_t v13 = OBJC_IVAR___CPAudioRoutePolicyManager__pickedRoute;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<TURoute?, os_unfair_lock_s>);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 24) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)&v11[v13] = v14;
  uint64_t v15 = self;
  id v16 = objc_msgSend(v15, sel_sharedInstance);
  id v17 = objc_msgSend(v16, sel_routeController);

  *(void *)&v11[OBJC_IVAR___CPAudioRoutePolicyManager_routeController] = v17;
  uint64_t v18 = (objc_class *)type metadata accessor for CPAudioRoutePolicyManager();
  v29.receiver = v11;
  v29.super_class = v18;
  id v19 = objc_msgSendSuper2(&v29, sel_init);
  id v20 = objc_msgSend(v15, sel_sharedInstance);
  id v21 = objc_msgSend(v20, sel_queue);

  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v19;
  aBlock[4] = partial apply for closure #1 in CPAudioRoutePolicyManager.init();
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8;
  uint64_t v23 = _Block_copy(aBlock);
  int v24 = (char *)v19;
  static DispatchQoS.unspecified.getter();
  v27[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v7, v4, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, void))(v5 + 8))(v7, v27[0]);
  swift_release();
  id v25 = *(id *)&v24[OBJC_IVAR___CPAudioRoutePolicyManager_routeController];
  objc_msgSend(v25, sel_addDelegate_, v24);

  return v24;
}

void closure #1 in CPAudioRoutePolicyManager.init()(void *a1)
{
  id v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)a1
                                                             + OBJC_IVAR___CPAudioRoutePolicyManager_routeController), sel_pickedRoute));
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void (**)(id))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x88);
    id v5 = v2;
    v4(v3);
  }
}

Swift::Void __swiftcall CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x1F4188790](v3);
  id v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v18 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v17 - v11;
  id v13 = objc_msgSend(self, sel_sharedInstance);
  id v14 = objc_msgSend(v13, sel_queue);

  static DispatchTime.now()();
  MEMORY[0x1B3EA17C0](v10, 0.5);
  id v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v10, v6);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary();
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_9_0;
  id v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2180](v12, v5, v2, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
  v17(v12, v18);
  swift_release();
  swift_release();
}

void closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  id v2 = (char *)MEMORY[0x1B3EA3B30](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)v2) + 0x98))() & 1) == 0)
    {
      uint64_t v4 = OBJC_IVAR___CPAudioRoutePolicyManager_routeController;
      id v5 = objc_msgSend(*(id *)&v3[OBJC_IVAR___CPAudioRoutePolicyManager_routeController], sel_speakerRoute);
      if (v5)
      {
        uint64_t v6 = v5;
        id v7 = *(id *)&v3[v4];
        objc_msgSend(v7, sel_pickRoute_, v6);
      }
    }
  }
}

uint64_t CPAudioRoutePolicyManager.addObserver(_:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x68))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 160))(a1, a2);
  return swift_release();
}

id CPAudioRoutePolicyManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPAudioRoutePolicyManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CPAudioRoutePolicyManager.routesChanged(for:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_pickedRoute);
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88);
  return v3(v2);
}

uint64_t type metadata accessor for CPAudioRoutePolicyManager()
{
  return self;
}

void partial apply for closure #1 in CPAudioRoutePolicyManager.init()()
{
  closure #1 in CPAudioRoutePolicyManager.init()(*(void **)(v0 + 16));
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1B0ECD044()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()()
{
  closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()(v0);
}

uint64_t sub_1B0ECD084@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0ECD0E0(uint64_t a1, void **a2)
{
  id v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0ECD144@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0ECD1A0(id *a1, void **a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x88);
  id v4 = *a1;
  return v3(v2);
}

uint64_t method lookup function for CPAudioRoutePolicyManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPAudioRoutePolicyManager);
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.observers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.observers.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.observers.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.pickedRoute.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.pickedRoute.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.pickedRoute.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.sharePlaySupported.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.addObserver(_:queue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

unint64_t type metadata accessor for TURoute()
{
  unint64_t result = lazy cache variable for type metadata for TURoute;
  if (!lazy cache variable for type metadata for TURoute)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TURoute);
  }
  return result;
}

uint64_t static ActivitySessionInterface.identity.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static ActivitySessionInterface.identity;
  return result;
}

uint64_t static ActivitySessionInterface.identity.setter(char *a1)
{
  char v1 = *a1;
  uint64_t result = swift_beginAccess();
  static ActivitySessionInterface.identity = v1;
  return result;
}

uint64_t (*static ActivitySessionInterface.identity.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

id one-time initialization function for hostObjectInterface()
{
  id result = closure #1 in variable initialization expression of static ActivitySessionInterface.hostObjectInterface();
  static ActivitySessionInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

{
  id result;

  id result = closure #1 in variable initialization expression of static ConversationManagerInterface.hostObjectInterface();
  static ConversationManagerInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivitySessionInterface.hostObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09D04D0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  CPDataCryptorClass();
  *(void *)(inited + 32) = swift_getObjCClassMetadata();
  *(void *)(inited + 40) = type metadata accessor for SimulatedDataCryptor();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_joinWithAudioSessionID_completion_, 0, 1);
  swift_setDeallocating();
  uint64_t v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B1138A70;
  *(void *)(v2 + 32) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  uint64_t v3 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(void *)(v2 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, (uint64_t)sel_requestEncryptionKeysFor_, 0, 0);
  swift_setDeallocating();
  uint64_t v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  uint64_t v5 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v4, (uint64_t)sel_requestParticipantsFor_completion_, 0, 0);
  swift_setDeallocating();
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B1138A70;
  *(void *)(v6 + 32) = v5;
  *(void *)(v6 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, (uint64_t)sel_requestParticipantsFor_completion_, 0, 1);
  swift_setDeallocating();
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B1138A70;
  *(void *)(v7 + 32) = v5;
  *(void *)(v7 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v7, (uint64_t)sel_sendResourceAtURL_to_metadata_completion_, 1, 0);
  swift_setDeallocating();
  return v0;
}

id static ActivitySessionInterface.hostObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (void **)&static ActivitySessionInterface.hostObjectInterface);
}

void static ActivitySessionInterface.hostObjectInterface.setter(void *a1)
{
}

uint64_t (*static ActivitySessionInterface.hostObjectInterface.modify())()
{
  if (one-time initialization token for hostObjectInterface != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t one-time initialization function for clientObjectInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09D3FC8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  CPDataCryptorClass();
  *(void *)(inited + 32) = swift_getObjCClassMetadata();
  *(void *)(inited + 40) = type metadata accessor for SimulatedDataCryptor();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_setDataCryptor_, 0, 0);
  uint64_t result = swift_setDeallocating();
  static ActivitySessionInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

{
  id v0;
  uint64_t inited;
  uint64_t result;

  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09CFFA0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B113A080;
  *(void *)(inited + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSDictionary);
  *(void *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  *(void *)(inited + 48) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updateConversationContainersWithConversationContainersByGroupUUID_, 0, 0);
  uint64_t result = swift_setDeallocating();
  static ConversationManagerInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

{
  id v0;
  uint64_t inited;
  uint64_t result;

  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F09D4148);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B1138A70;
  *(void *)(inited + 32) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  *(void *)(inited + 40) = type metadata accessor for PresenceSessionParticipant();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updatePresentDevicesWithDevices_, 0, 0);
  uint64_t result = swift_setDeallocating();
  static PresenceSessionInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

id static ActivitySessionInterface.clientObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (void **)&static ActivitySessionInterface.clientObjectInterface);
}

id static ActivitySessionInterface.hostObjectInterface.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = *a2;
  return v3;
}

void static ActivitySessionInterface.clientObjectInterface.setter(void *a1)
{
}

void static ActivitySessionInterface.hostObjectInterface.setter(void *a1, void *a2, void **a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *a3;
  *a3 = a1;
}

uint64_t (*static ActivitySessionInterface.clientObjectInterface.modify())()
{
  if (one-time initialization token for clientObjectInterface != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance ActivitySessionInterface@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static ActivitySessionInterface.identity;
  return result;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for hostObjectInterface, (void **)&static ActivitySessionInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance ActivitySessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for clientObjectInterface, (void **)&static ActivitySessionInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *a4;
  return v5;
}

ValueMetadata *type metadata accessor for ActivitySessionInterface()
{
  return &type metadata for ActivitySessionInterface;
}

uint64_t BackgroundSessionCreationRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

id BackgroundSessionCreationRequest.activitySessionRequest.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest);
}

uint64_t BackgroundSessionCreationRequest.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BackgroundSessionCreationRequest.localMember.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t BackgroundSessionCreationRequest.isCrossAccount.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount);
}

id BackgroundSessionCreationRequest.__allocating_init(id:activitySessionRequest:members:localMember:isCrossAccount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v12 = objc_allocWithZone(v6);
  id v13 = &v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_id];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  *(void *)&v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest] = a2;
  *(void *)&v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_members] = a3;
  id v16 = &v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  *id v16 = a4;
  v16[1] = a5;
  v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount] = a6;
  v20.receiver = v12;
  v20.super_class = v6;
  id v17 = objc_msgSendSuper2(&v20, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v17;
}

id BackgroundSessionCreationRequest.init(id:activitySessionRequest:members:localMember:isCrossAccount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  id v13 = &v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_id];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  *(void *)&v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest] = a2;
  *(void *)&v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_members] = a3;
  id v16 = &v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  *id v16 = a4;
  v16[1] = a5;
  v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount] = a6;
  v19.receiver = v6;
  v19.super_class = (Class)type metadata accessor for BackgroundSessionCreationRequest();
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v17;
}

uint64_t type metadata accessor for BackgroundSessionCreationRequest()
{
  uint64_t result = type metadata singleton initialization cache for BackgroundSessionCreationRequest;
  if (!type metadata singleton initialization cache for BackgroundSessionCreationRequest) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BackgroundSessionCreationRequest.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of Any?(a1, (uint64_t)v12);
  if (!v13)
  {
    outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  type metadata accessor for BackgroundSessionCreationRequest();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    char v9 = 0;
    return v9 & 1;
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    goto LABEL_9;
  }
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  id v3 = *(id *)&v11[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest];
  char v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) == 0
    || (uint64_t v5 = *(void *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_members),
        uint64_t v6 = *(void *)&v11[OBJC_IVAR___CPBackgroundSessionCreationRequest_members],
        swift_bridgeObjectRetain(),
        LOBYTE(v5) = specialized static Set.== infix(_:_:)(v5, v6),
        swift_bridgeObjectRelease(),
        (v5 & 1) == 0)
    || (TUObjectsAreEqualOrNil() & 1) == 0)
  {
LABEL_9:

    goto LABEL_10;
  }
  char v7 = *(unsigned char *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount);
  char v8 = v11[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount];

  char v9 = v7 ^ v8 ^ 1;
  return v9 & 1;
}

Swift::Int BackgroundSessionCreationRequest.hash.getter()
{
  Hasher.init()();
  Swift::UInt v1 = UUID.hashValue.getter();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(*(id *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest), sel_hash));
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  Swift::UInt v2 = Set.hashValue.getter();
  Hasher._combine(_:)(v2);
  id v3 = *(void **)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember);
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_hash);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((Swift::UInt)v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned char *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount));
  return Hasher.finalize()();
}

uint64_t static BackgroundSessionCreationRequest.supportsSecureCoding.getter()
{
  return 1;
}

id BackgroundSessionCreationRequest.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return BackgroundSessionCreationRequest.init(coder:)(a1);
}

id BackgroundSessionCreationRequest.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  char v8 = (char *)&v38 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  uint64_t v13 = v1;
  uint64_t v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_6;
  }
  uint64_t v15 = (void *)v14;
  uint64_t v40 = v12;
  uint64_t v41 = v13;
  id v16 = a1;
  id v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v17(v6, 1, 1, v9);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v6, 1, v9) == 1)
  {
    v17(v8, 1, 1, v9);
    a1 = v16;
    uint64_t v13 = v41;
LABEL_6:

    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
LABEL_7:
    type metadata accessor for BackgroundSessionCreationRequest();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v39 = v10;
  objc_super v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v6, v9);
  v17(v8, 0, 1, v9);
  unsigned int v20 = v18(v8, 1, v9);
  a1 = v16;
  uint64_t v13 = v41;
  if (v20 == 1) {
    goto LABEL_6;
  }
  uint64_t v23 = v40;
  v19(v40, v8, v9);
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivityCreateSessionRequest);
  uint64_t v24 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v24) {
    goto LABEL_17;
  }
  id v25 = (void *)v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v26 = swift_allocObject();
  long long v38 = xmmword_1B1138A70;
  *(_OWORD *)(v26 + 16) = xmmword_1B1138A70;
  *(void *)(v26 + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(v26 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v46)
  {

    outlined destroy of UUID?((uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_18:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v9);
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>);
  if ((swift_dynamicCast() & 1) == 0)
  {

LABEL_17:
    goto LABEL_18;
  }
  uint64_t v27 = v42;
  uint64_t v28 = v39;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(&v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_id], v23, v9);
  *(void *)&v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest] = v25;
  *(void *)&v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_members] = v27;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v38;
  *(void *)(v29 + 32) = type metadata accessor for AccountMember();
  *(void *)(v29 + 40) = type metadata accessor for AddressableMember();
  id v30 = v25;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v46)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
    int v31 = swift_dynamicCast();
    uint64_t v32 = v42;
    uint64_t v33 = v43;
    if (!v31)
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v34 = &v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  *(void *)uint64_t v34 = v32;
  *((void *)v34 + 1) = v33;
  objc_super v35 = (void *)MEMORY[0x1B3EA1B00](0x4173736F72437369, 0xEE00746E756F6363);
  unsigned __int8 v36 = objc_msgSend(a1, sel_decodeBoolForKey_, v35);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v9);
  v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount] = v36;

  uint64_t v37 = (objc_class *)type metadata accessor for BackgroundSessionCreationRequest();
  v44.receiver = v13;
  v44.super_class = v37;
  id v21 = objc_msgSendSuper2(&v44, sel_init);

  return v21;
}

Swift::Void __swiftcall BackgroundSessionCreationRequest.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = (void *)MEMORY[0x1B3EA1B00](25705, 0xE200000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v5];

  uint64_t v6 = *(void *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest);
  uint64_t v7 = (void *)MEMORY[0x1B3EA1B00](0xD000000000000016, 0x80000001B115DEB0);
  [(objc_class *)with.super.isa encodeObject:v6 forKey:v7];

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  Class v8 = Set._bridgeToObjectiveC()().super.isa;
  uint64_t v9 = (void *)MEMORY[0x1B3EA1B00](0x737265626D656DLL, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeObject:v8 forKey:v9];

  uint64_t v10 = *(void *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember);
  swift_unknownObjectRetain();
  uint64_t v11 = (void *)MEMORY[0x1B3EA1B00](0x6D654D6C61636F6CLL, 0xEB00000000726562);
  [(objc_class *)with.super.isa encodeObject:v10 forKey:v11];
  swift_unknownObjectRelease();

  uint64_t v12 = *(unsigned __int8 *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount);
  id v13 = (id)MEMORY[0x1B3EA1B00](0x4173736F72437369, 0xEE00746E756F6363);
  [(objc_class *)with.super.isa encodeBool:v12 forKey:v13];
}

uint64_t BackgroundSessionCreationRequest.description.getter()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x203A666C657320;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 1029990688;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD000000000000018;
  v23._object = (void *)0x80000001B115DED0;
  id v7 = *(id *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest);
  id v8 = objc_msgSend(v7, sel_description);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);

  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000018;
  v13._object = (void *)0x80000001B115DED0;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  strcpy((char *)&v23, " members=");
  WORD1(v23._object) = 0;
  HIDWORD(v23._object) = -385875968;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  strcpy((char *)&v23, " localHandle=");
  HIWORD(v23._object) = -4864;
  if (*(void *)(v1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember))
  {
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
    uint64_t v15 = String.init<A>(reflecting:)();
    unint64_t v17 = v16;
  }
  else
  {
    unint64_t v17 = 0xE300000000000000;
    uint64_t v15 = 7104878;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000010;
  v20._object = (void *)0x80000001B115D6A0;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return v24;
}

id BackgroundSessionCreationRequest.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void BackgroundSessionCreationRequest.init()()
{
}

id BackgroundSessionCreationRequest.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundSessionCreationRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for BackgroundSessionCreationRequest()
{
  return type metadata accessor for BackgroundSessionCreationRequest();
}

uint64_t type metadata completion function for BackgroundSessionCreationRequest()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for BackgroundSessionCreationRequest(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundSessionCreationRequest);
}

uint64_t dispatch thunk of BackgroundSessionCreationRequest.__allocating_init(id:activitySessionRequest:members:localMember:isCrossAccount:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of BackgroundSessionCreationRequest.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of BackgroundSessionCreationRequest.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 8;
      UInt64._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  long long v8;
  uint64_t v9;

  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      Swift::String v6 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  long long v8;
  uint64_t v9;

  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      v4 += 8;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      Swift::String v6 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      uint64_t v3 = v12;
      do
      {
        MEMORY[0x1B3EA25C0](v5, a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v12;
        }
        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
      while (v2 != v5);
    }
    else
    {
      unint64_t v8 = a1 + 32;
      uint64_t v3 = v12;
      do
      {
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v12;
        }
        unint64_t v10 = *(void *)(v3 + 16);
        unint64_t v9 = *(void *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
          uint64_t v3 = v12;
        }
        *(void *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

void NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  specialized _arrayForceCast<A, B>(_:)(a1);
  id v9 = objc_allocWithZone(MEMORY[0x1E4F1CAD0]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v9, sel_initWithArray_, isa);

  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  Class v12 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setClasses_forSelector_argumentIndex_ofReply_, v12, a2, a3, a4 & 1);
}

uint64_t one-time initialization function for foregroundApplicationChanged()
{
  uint64_t result = MEMORY[0x1B3EA1B00](0xD00000000000002ALL, 0x80000001B115E050);
  static NSNotificationName.foregroundApplicationChanged = result;
  return result;
}

id static NSNotificationName.foregroundApplicationChanged.getter()
{
  if (one-time initialization token for foregroundApplicationChanged != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSNotificationName.foregroundApplicationChanged;
  return v0;
}

uint64_t CPForegroundApplication.bundleIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CPForegroundApplication_bundleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CPForegroundApplication.applicationType.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CPForegroundApplication_applicationType);
}

id CPForegroundApplication.featureFlags.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___CPForegroundApplication_featureFlags);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void CPForegroundApplication.featureFlags.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR___CPForegroundApplication_featureFlags);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*CPForegroundApplication.featureFlags.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t CPForegroundApplication.localizedApplicationName.getter()
{
  id v0 = CPForegroundApplication.applicationRecord.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = objc_msgSend(v0, sel_localizedName);

    uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v2 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    v10._object = (void *)0xE000000000000000;
    v5._object = (void *)0x80000001B115DF70;
    v5._uint64_t countAndFlagsBits = 0xD000000000000010;
    v6.value._uint64_t countAndFlagsBits = 0x6E65736572706F43;
    v6.value._object = (void *)0xEE0065726F436563;
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v10._uint64_t countAndFlagsBits = 0;
    uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v2, v7, v10)._countAndFlagsBits;
  }
  uint64_t v8 = countAndFlagsBits;

  return v8;
}

id CPForegroundApplication.applicationRecord.getter()
{
  uint64_t v2 = *(void *)&v0[OBJC_IVAR___CPForegroundApplication_bundleIdentifier];
  unint64_t v1 = *(void *)&v0[OBJC_IVAR___CPForegroundApplication_bundleIdentifier + 8];
  id v3 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();
  id result = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v2, v1, 1);
  if (!result)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    Swift::String_optional v6 = v0;
    Swift::String v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = v10;
      *(_DWORD *)id v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v7, v8, "Unable to get application record for bundle identifier: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v10, -1, -1);
      MEMORY[0x1B3EA39E0](v9, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  return result;
}

uint64_t CPForegroundApplication.isGameCenterApplication.getter()
{
  unint64_t v1 = (id *)(v0 + OBJC_IVAR___CPForegroundApplication_featureFlags);
  swift_beginAccess();
  if (objc_msgSend(*v1, sel_gameCenterSharePlayIntegration))
  {
    id v2 = CPForegroundApplication.applicationRecord.getter();
    id v3 = v2;
    if (v2)
    {
      id v4 = objc_msgSend(v2, sel_entitlements);

      LOBYTE(v3) = LSPropertyList.containsAnyGameCenterEntitlements()();
    }
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

id CPForegroundApplication.__allocating_init(bundleIdentifier:applicationType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = OBJC_IVAR___CPForegroundApplication_featureFlags;
  id v9 = objc_allocWithZone((Class)CPFeatureFlags);
  uint64_t v10 = v7;
  *(void *)&v7[v8] = objc_msgSend(v9, sel_init);
  uint64_t v11 = &v10[OBJC_IVAR___CPForegroundApplication_bundleIdentifier];
  *(void *)uint64_t v11 = a1;
  *((void *)v11 + 1) = a2;
  *(void *)&v10[OBJC_IVAR___CPForegroundApplication_applicationType] = a3;

  v13.receiver = v10;
  v13.super_class = v3;
  return objc_msgSendSuper2(&v13, sel_init);
}

id CPForegroundApplication.init(bundleIdentifier:applicationType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = OBJC_IVAR___CPForegroundApplication_featureFlags;
  id v9 = objc_allocWithZone((Class)CPFeatureFlags);
  uint64_t v10 = v3;
  *(void *)&v3[v8] = objc_msgSend(v9, sel_init);
  uint64_t v11 = &v10[OBJC_IVAR___CPForegroundApplication_bundleIdentifier];
  *(void *)uint64_t v11 = a1;
  *((void *)v11 + 1) = a2;
  *(void *)&v10[OBJC_IVAR___CPForegroundApplication_applicationType] = a3;

  v13.receiver = v10;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

id CPForegroundApplication.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CPForegroundApplication.init()()
{
}

id CPForegroundApplication.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CPForegroundApplication()
{
  return self;
}

uint64_t method lookup function for CPForegroundApplication(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CPForegroundApplication);
}

uint64_t dispatch thunk of CPForegroundApplication.__allocating_init(bundleIdentifier:applicationType:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t Cache.WrappedKey.key.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1)
                                                                            + 0x50)
                                                                - 8)
                                                    + 16))(a1, &v1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x68)]);
}

uint64_t Cache.WrappedKey.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = specialized Cache.WrappedKey.__allocating_init(_:)(a1, (uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

id Cache.WrappedKey.init(_:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  id v4 = specialized Cache.WrappedKey.init(_:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t @objc Cache.WrappedKey.hash.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = Cache.WrappedKey.hash.getter();

  return v2;
}

uint64_t Cache.WrappedKey.hash.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t Cache.WrappedKey.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v4);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)v4);
    goto LABEL_5;
  }
  type metadata accessor for Cache.WrappedKey();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v1 = 0;
    return v1 & 1;
  }
  char v1 = dispatch thunk of static Equatable.== infix(_:_:)();

  return v1 & 1;
}

uint64_t @objc Cache.WrappedKey.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    id v5 = a1;
  }
  char v6 = Cache.WrappedKey.isEqual(_:)((uint64_t)v8);

  outlined destroy of Any?((uint64_t)v8);
  return v6 & 1;
}

id Cache.WrappedKey.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

uint64_t Cache.WrappedKey.init()()
{
  return Cache.WrappedKey.init()((uint64_t (*)(void, void, void))specialized Cache.WrappedKey.init());
}

uint64_t @objc Cache.WrappedKey.init()(void *a1, uint64_t a2)
{
  return @objc Cache.WrappedKey.init()(a1, a2, (uint64_t (*)(void, void, void))specialized Cache.WrappedKey.init());
}

id Cache.WrappedKey.__deallocating_deinit()
{
  return Cache.WrappedKey.__deallocating_deinit((uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedKey);
}

uint64_t @objc Cache.WrappedKey.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x68)]);
}

uint64_t Cache.WrappedValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1)
                                                                            + 0x58)
                                                                - 8)
                                                    + 16))(a1, &v1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x68)]);
}

uint64_t Cache.WrappedValue.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = specialized Cache.WrappedKey.__allocating_init(_:)(a1, (uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedValue, (uint64_t (*)(uint64_t))specialized Cache.WrappedValue.init(_:));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 88) - 8) + 8))(a1);
  return v3;
}

id Cache.WrappedValue.init(_:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  id v4 = specialized Cache.WrappedValue.init(_:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 88) - 8) + 8))(a1);
  return v4;
}

uint64_t Cache.WrappedValue.init()()
{
  return Cache.WrappedKey.init()((uint64_t (*)(void, void, void))specialized Cache.WrappedValue.init());
}

uint64_t Cache.WrappedKey.init()(uint64_t (*a1)(void, void, void))
{
  return a1(*(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50), *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58), *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60));
}

uint64_t @objc Cache.WrappedValue.init()(void *a1, uint64_t a2)
{
  return @objc Cache.WrappedKey.init()(a1, a2, (uint64_t (*)(void, void, void))specialized Cache.WrappedValue.init());
}

uint64_t @objc Cache.WrappedKey.init()(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void))
{
  return a3(*(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x50), *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x58), *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60));
}

id Cache.WrappedValue.__deallocating_deinit()
{
  return Cache.WrappedKey.__deallocating_deinit((uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedValue);
}

id Cache.WrappedKey.__deallocating_deinit(uint64_t (*a1)(void, void, void, void))
{
  uint64_t v2 = (objc_class *)a1(0, *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50), *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58), *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60));
  v4.receiver = v1;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t @objc Cache.WrappedValue.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x58)
                                                       - 8)
                                           + 8))(&a1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x68)]);
}

id Cache.init(countLimit:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCache);
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id result = objc_msgSend(v4, sel_setCountLimit_, a1);
  *a2 = v4;
  return result;
}

uint64_t Cache.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *v3;
  uint64_t v7 = *(void *)(a2 + 24);
  type metadata accessor for Cache.WrappedKey();
  uint64_t v8 = (void *)specialized Cache.WrappedKey.__allocating_init(_:)(a1, (uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
  id v9 = (char *)objc_msgSend(v6, sel_objectForKey_, v8);

  if (v9)
  {
    uint64_t v14 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a3, &v9[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v9) + 0x68)], v7);

    uint64_t v10 = v14;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(v7 - 8);
    uint64_t v11 = 1;
  }
  Class v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  return v12(a3, v11, 1, v7);
}

uint64_t key path getter for Cache.subscript(_:) : <A, B>Cache<A, B>AB@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Cache();
  return Cache.subscript.getter(a1, v4, a2);
}

uint64_t key path setter for Cache.subscript(_:) : <A, B>Cache<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v17 - v10;
  MEMORY[0x1F4188790](v9);
  objc_super v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - v12, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v15 = type metadata accessor for Cache();
  return Cache.subscript.setter((uint64_t)v11, (uint64_t)v13, v15);
}

uint64_t Cache.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    unint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v12, v8);
    id v17 = *v3;
    uint64_t v18 = *(void *)(a3 + 16);
    type metadata accessor for Cache.WrappedKey();
    Swift::String v19 = (void *)specialized Cache.WrappedKey.__allocating_init(_:)(a2, (uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
    objc_msgSend(v17, sel_removeObjectForKey_, v19);

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a2, v18);
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v7);
    id v25 = *v3;
    uint64_t v26 = a1;
    uint64_t v21 = *(void *)(a3 + 16);
    type metadata accessor for Cache.WrappedValue();
    uint64_t v22 = a2;
    Swift::String v23 = (void *)specialized Cache.WrappedKey.__allocating_init(_:)((uint64_t)v15, (uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedValue, (uint64_t (*)(uint64_t))specialized Cache.WrappedValue.init(_:));
    type metadata accessor for Cache.WrappedKey();
    uint64_t v24 = (void *)specialized Cache.WrappedKey.__allocating_init(_:)(v22, (uint64_t (*)(void, void, void, void))type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
    objc_msgSend(v25, sel_setObject_forKey_, v23, v24);

    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v22, v21);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v26, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v7);
  }
}

void (*Cache.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = type metadata accessor for Optional();
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *(void *)(a3 + 16);
  v7[5] = v11;
  v7[6] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13;
  v7[7] = v13;
  size_t v15 = *(void *)(v13 + 64);
  v7[8] = malloc(v15);
  v7[9] = malloc(v15);
  (*(void (**)(void))(v14 + 16))();
  Cache.subscript.getter(a2, a3, (uint64_t)v11);
  return Cache.subscript.modify;
}

void Cache.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[8];
  uint64_t v4 = (void *)(*a1)[9];
  if (a2)
  {
    uint64_t v5 = v2[7];
    uint64_t v11 = v2[6];
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    uint64_t v8 = v2[2];
    uint64_t v9 = v2[3];
    uint64_t v10 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    Cache.subscript.setter((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    Cache.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

Swift::Void __swiftcall Cache.removeAllObjects()()
{
  objc_msgSend(*v0, sel_removeAllObjects);
}

id specialized Cache.WrappedKey.init(_:)(uint64_t a1)
{
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1)
                                                                          + 0x50)
                                                              - 8)
                                                  + 16))(&v1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x68)], a1, *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x50));
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for Cache.WrappedKey();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for Cache.WrappedKey()
{
  return __swift_instantiateGenericMetadata();
}

void specialized Cache.WrappedKey.init()()
{
}

id specialized Cache.WrappedValue.init(_:)(uint64_t a1)
{
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1)
                                                                          + 0x58)
                                                              - 8)
                                                  + 16))(&v1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x68)], a1, *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x58));
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for Cache.WrappedValue();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t specialized Cache.WrappedKey.__allocating_init(_:)(uint64_t a1, uint64_t (*a2)(void, void, void, void), uint64_t (*a3)(uint64_t))
{
  id v6 = objc_allocWithZone((Class)a2(0, v3[10], v3[11], v3[12]));
  return a3(a1);
}

void specialized Cache.WrappedValue.init()()
{
}

uint64_t type metadata accessor for Cache.WrappedValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B0ED1804()
{
  return 24;
}

__n128 sub_1B0ED1810(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for Cache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Cache.WrappedKey()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Cache.WrappedKey(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Cache.WrappedKey);
}

uint64_t dispatch thunk of Cache.WrappedKey.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for Cache.WrappedValue()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for Cache.WrappedValue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Cache.WrappedValue);
}

uint64_t dispatch thunk of Cache.WrappedValue.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t Notification.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000056;
  }
  else {
    return 0xD00000000000003ALL;
  }
}

CopresenceCore::Notification_optional __swiftcall Notification.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Notification.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = CopresenceCore_Notification_conversationManagerHostShouldConnectIfCanBypassSharePlayRestriction;
  }
  else {
    v4.value = CopresenceCore_Notification_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Notification(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type Notification and conformance Notification()
{
  unint64_t result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Notification()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Notification()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Notification()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Notification@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Notification.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Notification(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000056;
  }
  else {
    unint64_t v2 = 0xD00000000000003ALL;
  }
  unint64_t v3 = 0x80000001B115A680;
  if (*v1) {
    unint64_t v3 = 0x80000001B115A6C0;
  }
  *a1 = v2;
  a1[1] = v3;
}

unsigned char *storeEnumTagSinglePayload for Notification(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0ED1CA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Notification()
{
  return &type metadata for Notification;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v19 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v9 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v7 << 6))
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a1 + 56) + 8 * i) + 144);
    swift_bridgeObjectRetain();
    uint64_t v15 = swift_retain();
    uint64_t v16 = v14(v15);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      uint64_t v8 = (void *)result;
    }
    unint64_t v18 = v8[2];
    unint64_t v17 = v8[3];
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v8);
      uint64_t v8 = (void *)result;
    }
    _OWORD v8[2] = v18 + 1;
    v8[v18 + 4] = v16;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v5) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v19 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v5) {
        goto LABEL_27;
      }
      unint64_t v12 = *(void *)(v19 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v5) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v19 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 3;
          if (v11 + 3 >= v5) {
            goto LABEL_27;
          }
          unint64_t v12 = *(void *)(v19 + 8 * v7);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v5)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v8;
  }
  unint64_t v12 = *(void *)(v19 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v19 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;

  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    unint64_t v1 = v27;
    uint64_t v26 = v28;
    unint64_t v4 = v29;
    uint64_t v3 = v30;
    int64_t v5 = v31;
  }
  else
  {
    unsigned int v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    unint64_t v4 = ~v6;
    int64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    int64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  id v25 = (unint64_t)(v4 + 64) >> 6;
  unint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      int64_t v11 = __clz(__rbit64(v5)) | (v3 << 6);
      unint64_t v12 = v3;
      goto LABEL_29;
    }
    uint64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v14 >= v25) {
      goto LABEL_36;
    }
    uint64_t v15 = *(void *)(v26 + 8 * v14);
    unint64_t v12 = v3 + 1;
    if (!v15)
    {
      unint64_t v12 = v3 + 2;
      if (v3 + 2 >= v25) {
        goto LABEL_36;
      }
      uint64_t v15 = *(void *)(v26 + 8 * v12);
      if (!v15)
      {
        unint64_t v12 = v3 + 3;
        if (v3 + 3 >= v25) {
          goto LABEL_36;
        }
        uint64_t v15 = *(void *)(v26 + 8 * v12);
        if (!v15)
        {
          unint64_t v12 = v3 + 4;
          if (v3 + 4 >= v25) {
            goto LABEL_36;
          }
          uint64_t v15 = *(void *)(v26 + 8 * v12);
          if (!v15)
          {
            unint64_t v12 = v3 + 5;
            if (v3 + 5 >= v25) {
              goto LABEL_36;
            }
            uint64_t v15 = *(void *)(v26 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v3 + 6;
              while (v25 != v16)
              {
                uint64_t v15 = *(void *)(v26 + 8 * v16++);
                if (v15)
                {
                  unint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              outlined consume of [String : ()].Iterator._Variant();
              return (uint64_t)v9;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    int64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    int64_t v13 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_36;
    }
    while (1)
    {
      unint64_t v17 = objc_msgSend(v13, sel_handle);
      unint64_t v18 = objc_msgSend(v17, sel_value);

      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        unint64_t v9 = (void *)result;
      }
      Swift::String v23 = v9[2];
      uint64_t v22 = v9[3];
      if (v23 >= v22 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v9);
        unint64_t v9 = (void *)result;
      }
      v9[2] = v23 + 1;
      uint64_t v24 = &v9[2 * v23];
      v24[4] = v19;
      v24[5] = v21;
      uint64_t v3 = v12;
      int64_t v5 = v10;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        int64_t v13 = v32;
        swift_unknownObjectRelease();
        unint64_t v12 = v3;
        uint64_t v10 = v5;
        if (v32) {
          continue;
        }
      }
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  id v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;

  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, 255, (void (*)(uint64_t))type metadata accessor for AddressableMember);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v21;
    uint64_t v19 = v22;
    int64_t v5 = v23;
    unsigned int v6 = v24;
    int64_t v7 = v25;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    int64_t v5 = ~v8;
    unint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    int64_t v7 = v10 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    unsigned int v6 = 0;
  }
  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_37;
  }
  type metadata accessor for AddressableMember();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v12 = v20;
  swift_unknownObjectRelease();
  int64_t v13 = v6;
  uint64_t v14 = v7;
  if (!v20) {
    goto LABEL_37;
  }
  while (1)
  {
    AddressableMember.idsDestination.getter();

    if (v2)
    {
      outlined consume of [String : ()].Iterator._Variant();
      return swift_bridgeObjectRelease();
    }
    MEMORY[0x1B3EA1CF0]();
    if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized Array._endMutation()();
    unsigned int v6 = v13;
    int64_t v7 = v14;
    if (v3 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v7) {
      break;
    }
    uint64_t v14 = (v7 - 1) & v7;
    uint64_t v15 = __clz(__rbit64(v7)) | (v6 << 6);
    int64_t v13 = v6;
LABEL_24:
    unint64_t v12 = *(id *)(*(void *)(v3 + 48) + 8 * v15);
    if (!v12) {
      goto LABEL_37;
    }
  }
  int64_t v13 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    return result;
  }
  if (v13 >= v11) {
    goto LABEL_37;
  }
  uint64_t v16 = *(void *)(v19 + 8 * v13);
  if (v16)
  {
LABEL_23:
    uint64_t v14 = (v16 - 1) & v16;
    uint64_t v15 = __clz(__rbit64(v16)) + (v13 << 6);
    goto LABEL_24;
  }
  unint64_t v17 = v6 + 2;
  if (v6 + 2 >= v11) {
    goto LABEL_37;
  }
  uint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16) {
    goto LABEL_22;
  }
  unint64_t v17 = v6 + 3;
  if (v6 + 3 >= v11) {
    goto LABEL_37;
  }
  uint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16) {
    goto LABEL_22;
  }
  unint64_t v17 = v6 + 4;
  if (v6 + 4 >= v11) {
    goto LABEL_37;
  }
  uint64_t v16 = *(void *)(v19 + 8 * v17);
  if (v16)
  {
LABEL_22:
    int64_t v13 = v17;
    goto LABEL_23;
  }
  int64_t v13 = v6 + 5;
  if (v6 + 5 >= v11) {
    goto LABEL_37;
  }
  uint64_t v16 = *(void *)(v19 + 8 * v13);
  if (v16) {
    goto LABEL_23;
  }
  unint64_t v18 = v6 + 6;
  while (v11 != v18)
  {
    uint64_t v16 = *(void *)(v19 + 8 * v18++);
    if (v16)
    {
      int64_t v13 = v18 - 1;
      goto LABEL_23;
    }
  }
LABEL_37:
  outlined consume of [String : ()].Iterator._Variant();
  return v26;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  objc_super v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  unint64_t v1 = a1;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    unint64_t v1 = v22;
    uint64_t v19 = v23;
    uint64_t v3 = v24;
    unint64_t v4 = v25;
    int64_t v5 = v26;
  }
  else
  {
    unsigned int v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v3 = ~v6;
    int64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    int64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v4 = 0;
  }
  unint64_t v18 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = (v5 - 1) & v5;
      uint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
      int64_t v11 = v4;
      goto LABEL_29;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v13 >= v18) {
      goto LABEL_34;
    }
    uint64_t v14 = *(void *)(v19 + 8 * v13);
    int64_t v11 = v4 + 1;
    if (!v14)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v18) {
        goto LABEL_34;
      }
      uint64_t v14 = *(void *)(v19 + 8 * v11);
      if (!v14)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v18) {
          goto LABEL_34;
        }
        uint64_t v14 = *(void *)(v19 + 8 * v11);
        if (!v14)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v18) {
            goto LABEL_34;
          }
          uint64_t v14 = *(void *)(v19 + 8 * v11);
          if (!v14)
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v18) {
              goto LABEL_34;
            }
            uint64_t v14 = *(void *)(v19 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v18 != v15)
              {
                uint64_t v14 = *(void *)(v19 + 8 * v15++);
                if (v14)
                {
                  int64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              return v27;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v9 = (v14 - 1) & v14;
    uint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    unint64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v16 = (objc_class *)type metadata accessor for AddressableMember();
      unint64_t v17 = (char *)objc_allocWithZone(v16);
      *(void *)&v17[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v12;
      v21.receiver = v17;
      v21.super_class = v16;
      objc_msgSendSuper2(&v21, sel_init);
      MEMORY[0x1B3EA1CF0]();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      unint64_t v4 = v11;
      int64_t v5 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUHandle();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t v12 = v20;
        swift_unknownObjectRelease();
        int64_t v11 = v4;
        unint64_t v9 = v5;
        if (v20) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  objc_super v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  unint64_t v1 = a1;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUHandle();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUHandle);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    unint64_t v1 = v22;
    uint64_t v19 = v23;
    uint64_t v3 = v24;
    unint64_t v4 = v25;
    int64_t v5 = v26;
  }
  else
  {
    unsigned int v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v3 = ~v6;
    int64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    int64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v4 = 0;
  }
  unint64_t v18 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = (v5 - 1) & v5;
      uint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
      int64_t v11 = v4;
      goto LABEL_29;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v13 >= v18) {
      goto LABEL_34;
    }
    uint64_t v14 = *(void *)(v19 + 8 * v13);
    int64_t v11 = v4 + 1;
    if (!v14)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v18) {
        goto LABEL_34;
      }
      uint64_t v14 = *(void *)(v19 + 8 * v11);
      if (!v14)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v18) {
          goto LABEL_34;
        }
        uint64_t v14 = *(void *)(v19 + 8 * v11);
        if (!v14)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v18) {
            goto LABEL_34;
          }
          uint64_t v14 = *(void *)(v19 + 8 * v11);
          if (!v14)
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v18) {
              goto LABEL_34;
            }
            uint64_t v14 = *(void *)(v19 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v18 != v15)
              {
                uint64_t v14 = *(void *)(v19 + 8 * v15++);
                if (v14)
                {
                  int64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              return v27;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v9 = (v14 - 1) & v14;
    uint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    unint64_t v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t v16 = (objc_class *)type metadata accessor for AddressableMember();
      unint64_t v17 = (char *)objc_allocWithZone(v16);
      *(void *)&v17[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v12;
      v21.receiver = v17;
      v21.super_class = v16;
      objc_msgSendSuper2(&v21, sel_init);
      MEMORY[0x1B3EA1CF0]();
      if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
      unint64_t v4 = v11;
      int64_t v5 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUHandle();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t v12 = v20;
        swift_unknownObjectRelease();
        int64_t v11 = v4;
        unint64_t v9 = v5;
        if (v20) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

void *PubSubTopicReporter.__allocating_init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBC868];
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = v7;
  return result;
}

id PubSubTopicReporter.queue.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t PubSubTopicReporter.reportReadyCallback.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

void *PubSubTopicReporter.init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MEMORY[0x1E4FBC868];
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v3[5] = v4;
  return v3;
}

uint64_t PubSubTopicReporter.getOrCreateConversationReport(tag:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (void *)v3[2];
  *unint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCBF0], v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    int64_t v13 = *(uint64_t (**)(uint64_t))(*v3 + 104);
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = v13(v14);
    if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v17 & 1) != 0))
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      swift_retain();
    }
    else
    {
      type metadata accessor for PubSubTopicReporter.ConversationReport();
      uint64_t v18 = swift_allocObject();
      swift_bridgeObjectRetain();
      PubSubTopicReporter.ConversationReport.init(coversationUUID:)(a1, a2);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(uint64_t (**)(unsigned char *))(*v3 + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    Swift::String v20 = (void (*)(unsigned char *, void))v19(v26);
    uint64_t v22 = v21;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v22;
    *uint64_t v22 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v22 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20(v26, 0);
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopicReporter.ConversationReport.__allocating_init(coversationUUID:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  PubSubTopicReporter.ConversationReport.init(coversationUUID:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(Swift::UInt64 latencyMillis, Swift::String withTag, Swift::String forTopic)
{
}

uint64_t closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = PubSubTopicReporter.getOrCreateConversationReport(tag:)(a2, a3);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v12 + 120))(a4, a5);
    uint64_t v14 = swift_release();
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 112))(v14);
    if (v15)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 256))(a6))
      {
        swift_release();
      }
      else
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)log);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          os_log_type_t type = v18;
          uint64_t v19 = swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          uint64_t v22 = v21;
          *(_DWORD *)uint64_t v19 = 136315394;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v19 + 12) = 2080;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v17, type, "[Reporter] InitializeAckOk latency omitted, topic=%s tag=%s", (uint8_t *)v19, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v21, -1, -1);
          MEMORY[0x1B3EA39E0](v19, -1, -1);

          swift_release();
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
    }
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)(Swift::UInt64 latencyMillis, Swift::String withTag, Swift::String forTopic)
{
}

uint64_t closure #1 in PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = PubSubTopicReporter.getOrCreateConversationReport(tag:)(a2, a3);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v12 + 120))(a4, a5);
    swift_release();
    uint64_t v14 = *(void *)(v13 + 48);
    if (v14)
    {
      uint64_t v21 = a2;
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 256);
      swift_retain();
      if (v15(a6))
      {
        swift_release();
        swift_release();
      }
      else
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)log);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = swift_slowAlloc();
          uint64_t v22 = swift_slowAlloc();
          uint64_t v20 = v22;
          *(_DWORD *)uint64_t v19 = 136315394;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v19 + 12) = 2080;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, a3, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v17, v18, "[Reporter] Publish-ack latency omitted, topic=%s tag=%s", (uint8_t *)v19, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v20, -1, -1);
          MEMORY[0x1B3EA39E0](v19, -1, -1);
          swift_release();

          swift_release();
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
        }
      }
    }
    else
    {
      swift_release();
    }
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)(Swift::UInt64 latencyMillis, Swift::String withTag, Swift::String forTopic)
{
}

uint64_t PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v26 = a1;
  uint64_t v27 = a4;
  uint64_t v25 = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  char v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v8 + 16);
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = v25;
  v19[2] = v18;
  v19[3] = v20;
  uint64_t v21 = v27;
  v19[4] = a3;
  v19[5] = v21;
  uint64_t v22 = v26;
  v19[6] = a5;
  v19[7] = v22;
  aBlock[4] = v28;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v29;
  Swift::String v23 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1B3EA2200](0, v17, v14, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v31);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = PubSubTopicReporter.getOrCreateConversationReport(tag:)(a2, a3);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v12 + 120))(a4, a5);
    swift_release();
    uint64_t v14 = *(void *)(v13 + 40);
    if (v14)
    {
      uint64_t v21 = a2;
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 256);
      swift_retain();
      if (v15(a6))
      {
        swift_release();
        swift_release();
      }
      else
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)log);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        char v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = swift_slowAlloc();
          uint64_t v22 = swift_slowAlloc();
          uint64_t v20 = v22;
          *(_DWORD *)uint64_t v19 = 136315394;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v19 + 12) = 2080;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, a3, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v17, v18, "[Reporter] End-to-end record latency omitted, topic=%s tag=%s", (uint8_t *)v19, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v20, -1, -1);
          MEMORY[0x1B3EA39E0](v19, -1, -1);
          swift_release();

          swift_release();
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release();
        }
      }
    }
    else
    {
      swift_release();
    }
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall PubSubTopicReporter.emitAndRemoveReport(forTag:)(Swift::String forTag)
{
  uint64_t v2 = v1;
  object = forTag._object;
  uint64_t countAndFlagsBits = forTag._countAndFlagsBits;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (void *)v2[2];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBF0], v5);
  id v10 = v9;
  uint64_t v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*v2 + 104);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = v12(v13);
  if (!*(void *)(v14 + 16)
    || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object), (v16 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 128))(v18);
  if (one-time initialization token for log != -1) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    HIDWORD(v33) = v22;
    uint64_t v24 = v23;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v36 = v34;
    *(_DWORD *)uint64_t v24 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2048;
    uint64_t v25 = *(void *)(v11 + 16);
    swift_bridgeObjectRelease();
    uint64_t v35 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v20, BYTE4(v33), "[Reporter] Generating ConversationReport for tag=%s rtcReport-count=%ld", (uint8_t *)v24, 0x16u);
    uint64_t v26 = v34;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v26, -1, -1);
    MEMORY[0x1B3EA39E0](v24, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  PubSubTopicReporter.dumpReportSnapshot()();
  uint64_t v28 = *(void *)(v11 + 16);
  if (v28)
  {
    uint64_t v29 = (void (*)(uint64_t, void *, uint64_t))v2[3];
    uint64_t v30 = (uint64_t *)(v11 + 32);
    do
    {
      uint64_t v31 = *v30++;
      swift_bridgeObjectRetain();
      v29(countAndFlagsBits, object, v31);
      swift_bridgeObjectRelease();
      --v28;
    }
    while (v28);
  }
  swift_bridgeObjectRelease();
  BOOL v27 = PubSubTopicReporter.removeReport(forTag:)(countAndFlagsBits, (unint64_t)object);
  swift_release();
  return v27;
}

BOOL PubSubTopicReporter.removeReport(forTag:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (void *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v9 = (void *)v2[2];
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCBF0], v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v11 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*v2 + 120))(v19);
  uint64_t v5 = specialized Dictionary._Variant.removeValue(forKey:)(a1, a2);
  v11(v19, 0);
  swift_release();
  if (!v5) {
    return v5 != 0;
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v19[0] = v16;
    *(_DWORD *)unint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    v18[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v13, v14, "[Reporter] Removing ConversationReport for tag=%s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v16, -1, -1);
    MEMORY[0x1B3EA39E0](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v5 != 0;
}

void PubSubTopicReporter.dumpReportSnapshot()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 104))();
  int64_t v2 = 0;
  uint64_t v40 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v41 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v42 = v1;
  unint64_t v6 = 0x1E9B54000uLL;
  while (1)
  {
    if (v5)
    {
      uint64_t v43 = (v5 - 1) & v5;
      int64_t v44 = v2;
      unint64_t v7 = __clz(__rbit64(v5)) | (v2 << 6);
      goto LABEL_22;
    }
    int64_t v8 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_53;
    }
    if (v8 >= v41) {
      break;
    }
    unint64_t v9 = *(void *)(v40 + 8 * v8);
    int64_t v10 = v2 + 1;
    if (!v9)
    {
      int64_t v10 = v2 + 2;
      if (v2 + 2 >= v41) {
        break;
      }
      unint64_t v9 = *(void *)(v40 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v2 + 3;
        if (v2 + 3 >= v41) {
          break;
        }
        unint64_t v9 = *(void *)(v40 + 8 * v10);
        if (!v9)
        {
          uint64_t v11 = v2 + 4;
          if (v2 + 4 >= v41) {
            break;
          }
          unint64_t v9 = *(void *)(v40 + 8 * v11);
          if (!v9)
          {
            while (1)
            {
              int64_t v10 = v11 + 1;
              if (__OFADD__(v11, 1)) {
                goto LABEL_54;
              }
              if (v10 >= v41) {
                goto LABEL_48;
              }
              unint64_t v9 = *(void *)(v40 + 8 * v10);
              ++v11;
              if (v9) {
                goto LABEL_21;
              }
            }
          }
          int64_t v10 = v2 + 4;
        }
      }
    }
LABEL_21:
    uint64_t v43 = (v9 - 1) & v9;
    int64_t v44 = v10;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_22:
    uint64_t v12 = (uint64_t *)(*(void *)(v42 + 48) + 16 * v7);
    unint64_t v13 = v12[1];
    uint64_t v45 = *v12;
    os_log_type_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v42 + 56) + 8 * v7) + 88);
    swift_bridgeObjectRetain();
    uint64_t v15 = swift_retain();
    uint64_t v16 = v14(v15);
    int64_t v17 = 0;
    uint64_t v18 = *(void *)(v16 + 64);
    uint64_t v46 = v16 + 64;
    uint64_t v19 = 1 << *(unsigned char *)(v16 + 32);
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v21 = v20 & v18;
    int64_t v47 = (unint64_t)(v19 + 63) >> 6;
    if ((v20 & v18) != 0)
    {
      do
      {
        while (1)
        {
          unint64_t v22 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
          unint64_t v23 = v22 | (v17 << 6);
LABEL_43:
          uint64_t v27 = *(void *)(*(void *)(v16 + 56) + 8 * v23);
          uint64_t v28 = *(void *)(v6 + 2168);
          swift_retain();
          if (v28 != -1) {
            swift_once();
          }
          uint64_t v29 = type metadata accessor for Logger();
          __swift_project_value_buffer(v29, (uint64_t)log);
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v30, v31)) {
            break;
          }

          swift_bridgeObjectRelease_n();
          swift_release_n();
          if (!v21) {
            goto LABEL_29;
          }
        }
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = v16;
        uint64_t v34 = swift_slowAlloc();
        uint64_t v48 = v34;
        *(_DWORD *)uint64_t v32 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v32 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v13, &v48);
        uint64_t v35 = swift_bridgeObjectRelease_n();
        *(_WORD *)(v32 + 12) = 2080;
        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 152))(v35);
        *(void *)(v32 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v48);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v30, v31, "[Reporter] PubSubTopicReporter tag=%s report=%s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        uint64_t v38 = v34;
        uint64_t v16 = v33;
        MEMORY[0x1B3EA39E0](v38, -1, -1);
        uint64_t v39 = v32;
        unint64_t v6 = 0x1E9B54000;
        MEMORY[0x1B3EA39E0](v39, -1, -1);
        swift_release();
      }
      while (v21);
    }
LABEL_29:
    int64_t v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v24 < v47)
    {
      unint64_t v25 = *(void *)(v46 + 8 * v24);
      ++v17;
      if (v25) {
        goto LABEL_42;
      }
      int64_t v17 = v24 + 1;
      if (v24 + 1 < v47)
      {
        unint64_t v25 = *(void *)(v46 + 8 * v17);
        if (v25) {
          goto LABEL_42;
        }
        int64_t v17 = v24 + 2;
        if (v24 + 2 < v47)
        {
          unint64_t v25 = *(void *)(v46 + 8 * v17);
          if (v25) {
            goto LABEL_42;
          }
          int64_t v26 = v24 + 3;
          if (v26 < v47)
          {
            unint64_t v25 = *(void *)(v46 + 8 * v26);
            if (v25)
            {
              int64_t v17 = v26;
LABEL_42:
              unint64_t v21 = (v25 - 1) & v25;
              unint64_t v23 = __clz(__rbit64(v25)) + (v17 << 6);
              goto LABEL_43;
            }
            while (1)
            {
              int64_t v17 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                break;
              }
              if (v17 >= v47) {
                goto LABEL_5;
              }
              unint64_t v25 = *(void *)(v46 + 8 * v17);
              ++v26;
              if (v25) {
                goto LABEL_42;
              }
            }
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            return;
          }
        }
      }
    }
LABEL_5:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v5 = v43;
    int64_t v2 = v44;
  }
LABEL_48:
  swift_release();
}

uint64_t PubSubTopicReporter.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PubSubTopicReporter.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t PubSubTopicReporter.ConversationReport.topicReports.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopicReporter.ConversationReport.topicReports.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PubSubTopicReporter.ConversationReport.topicReports.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopicReporter.ConversationReport.init(coversationUUID:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC868];
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)log);
  swift_bridgeObjectRetain();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = v10;
    *(_DWORD *)unint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "[Reporter] Creating ConversationReport for conversationUUID=%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v3;
}

uint64_t sub_1B0ED3F3C()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)()
{
  return partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:));
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)()
{
  return partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(closure #1 in PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:));
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)()
{
  return partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(closure #1 in PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:));
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t PubSubTopicReporter.ConversationReport.getOrCreateTopicReport(topic:)(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = v5(v6);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
    swift_retain();
  }
  else
  {
    type metadata accessor for PubSubTopicReporter.PubSubTopicReport();
    uint64_t v10 = swift_allocObject();
    swift_bridgeObjectRetain();
    PubSubTopicReporter.PubSubTopicReport.init(name:)(a1, a2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(uint64_t (**)(unsigned char *))(*(void *)v2 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = (void (*)(unsigned char *, void))v11(v18);
  os_log_type_t v14 = v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v14;
  *os_log_type_t v14 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a1, a2, isUniquelyReferenced_nonNull_native);
  *os_log_type_t v14 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(v18, 0);
  return v10;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.__allocating_init(name:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  PubSubTopicReporter.PubSubTopicReport.init(name:)(a1, a2);
  return v4;
}

uint64_t PubSubTopicReporter.ConversationReport.rtcReports.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 88))();
  uint64_t v2 = specialized Sequence.compactMap<A>(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static PubSubTopicReporter.ConversationReport.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)a1 + 88))();
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)a2 + 88))();
  char v5 = specialized static Dictionary<>.== infix(_:_:)(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t PubSubTopicReporter.ConversationReport.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PubSubTopicReporter.ConversationReport.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopicReporter.ConversationReport(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 88))();
  char v5 = specialized static Dictionary<>.== infix(_:_:)(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.getter()
{
  return swift_retain();
}

uint64_t PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.endToEndRecordLatency.getter()
{
  return swift_retain();
}

uint64_t PubSubTopicReporter.PubSubTopicReport.publishAckLatency.getter()
{
  return swift_retain();
}

void *PubSubTopicReporter.PubSubTopicReport.init(name:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for defaultPubSubInitializeAckLatencyBuckets != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  type metadata accessor for Histogram();
  swift_allocObject();
  uint64_t v11 = (void *)swift_bridgeObjectRetain();
  v2[4] = Histogram.init(buckets:log:)(v11, (uint64_t)v8);
  if (one-time initialization token for defaultAVCLatencyBuckets != -1) {
    swift_once();
  }
  v10(v8, 1, 1, v9);
  swift_allocObject();
  uint64_t v12 = (void *)swift_bridgeObjectRetain();
  v2[5] = Histogram.init(buckets:log:)(v12, (uint64_t)v8);
  v10(v8, 1, 1, v9);
  swift_allocObject();
  unint64_t v13 = (void *)swift_bridgeObjectRetain();
  v2[6] = Histogram.init(buckets:log:)(v13, (uint64_t)v8);
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v14 = one-time initialization token for log;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v9, (uint64_t)log);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B0DF7000, v15, v16, "[Reporter] Creating PubSubTopicReport for topic=%s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v18, -1, -1);
    MEMORY[0x1B3EA39E0](v17, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v3;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.rtcReport.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v21 = MEMORY[0x1E4FBC868];
  uint64_t v3 = (*(uint64_t (**)(void))(*v0 + 112))();
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  if (v3)
  {
    uint64_t v5 = Histogram.rtcRepresentation.getter();
    uint64_t v7 = v6;
    swift_release();
    uint64_t v20 = v4;
    *(void *)&long long v19 = v5;
    *((void *)&v19 + 1) = v7;
    outlined init with take of Any(&v19, v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0xD000000000000020, 0x80000001B115A9E0, isUniquelyReferenced_nonNull_native);
    uint64_t v21 = v2;
    swift_bridgeObjectRelease();
    if (v0[5]) {
      goto LABEL_3;
    }
LABEL_6:
    specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001FLL, 0x80000001B115AA10, &v19);
    outlined destroy of Any?((uint64_t)&v19);
    if (v0[6]) {
      goto LABEL_4;
    }
LABEL_7:
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000020, 0x80000001B115AA30, &v19);
    outlined destroy of Any?((uint64_t)&v19);
    return v21;
  }
  specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000020, 0x80000001B115A9E0, &v19);
  outlined destroy of Any?((uint64_t)&v19);
  if (!v0[5]) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v9 = Histogram.rtcRepresentation.getter();
  uint64_t v20 = v4;
  *(void *)&long long v19 = v9;
  *((void *)&v19 + 1) = v10;
  outlined init with take of Any(&v19, v18);
  uint64_t v11 = v21;
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0xD00000000000001FLL, 0x80000001B115AA10, v12);
  uint64_t v21 = v11;
  swift_bridgeObjectRelease();
  if (!v1[6]) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v13 = Histogram.rtcRepresentation.getter();
  uint64_t v20 = v4;
  *(void *)&long long v19 = v13;
  *((void *)&v19 + 1) = v14;
  outlined init with take of Any(&v19, v18);
  uint64_t v15 = v21;
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0xD000000000000020, 0x80000001B115AA30, v16);
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t PubSubTopicReporter.PubSubTopicReport.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = 7104878;
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(27);
  uint64_t v6 = swift_bridgeObjectRelease();
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*v0 + 112))(v6);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 296))(v7);
    swift_release();
    uint64_t v8 = String.init<A>(reflecting:)();
    unint64_t v10 = v9;
  }
  else
  {
    unint64_t v10 = 0xE300000000000000;
    uint64_t v8 = 7104878;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  uint64_t v12 = swift_bridgeObjectRelease();
  uint64_t v13 = v0[5];
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 296))(v12);
    uint64_t v14 = String.init<A>(reflecting:)();
    unint64_t v16 = v15;
  }
  else
  {
    unint64_t v16 = 0xE300000000000000;
    uint64_t v14 = 7104878;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(22);
  uint64_t v18 = swift_bridgeObjectRelease();
  uint64_t v19 = v1[6];
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 296))(v18);
    uint64_t v2 = String.init<A>(reflecting:)();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v21 = (void *)0xE300000000000000;
  }
  v22._uint64_t countAndFlagsBits = v2;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0x3D656D616ELL;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = 0xD000000000000019;
  v25._object = (void *)0x80000001B115E0E0;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0xD000000000000018;
  v27._object = (void *)0x80000001B115E100;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 32;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0xD000000000000014;
  v29._object = (void *)0x80000001B115E120;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopicReporter.PubSubTopicReport(void **a1, void **a2)
{
  return specialized static PubSubTopicReporter.PubSubTopicReport.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PubSubTopicReporter.PubSubTopicReport()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t type metadata accessor for PubSubTopicReporter.PubSubTopicReport()
{
  return self;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    *a3 = *(_OWORD *)(*(void *)(v11 + 56) + 16 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = xmmword_1B113B080;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    char v9 = v12;
  }
  swift_bridgeObjectRelease();
  unint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v1;
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  char v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t), void (*a4)(void))
{
  uint64_t v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v7;
  uint64_t v16 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    uint64_t v13 = v16;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(v13 + 56) + 16 * v10);
  a3(v10, v13);
  *uint64_t v7 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  unint64_t v10 = v6;
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v10;
    uint64_t v19 = *v10;
    *unint64_t v10 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v17 = v19;
    }
    swift_bridgeObjectRelease();
    a3(*(void *)(v17 + 56) + 40 * v14, a6);
    a4(v14, v17);
    *unint64_t v10 = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a6 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return result;
}

uint64_t specialized static PubSubTopicReporter.PubSubTopicReport.== infix(_:_:)(void *a1, void *a2)
{
  if (a1[2] != a2[2] || a1[3] != a2[3])
  {
    LOBYTE(v5) = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v5 & 1;
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void))(*a1 + 112))();
  uint64_t v7 = (*(uint64_t (**)(void))(*a2 + 112))();
  uint64_t v8 = v7;
  if (v6)
  {
    if (!v7)
    {
      LOBYTE(v5) = 0;
      goto LABEL_19;
    }
    uint64_t v9 = swift_retain();
    char v10 = specialized static Histogram.== infix(_:_:)(v9, v8);
    swift_release_n();
    swift_release();
    if ((v10 & 1) == 0) {
      goto LABEL_21;
    }
  }
  else if (v7)
  {
    LOBYTE(v5) = 0;
LABEL_19:
    swift_release();
    return v5 & 1;
  }
  uint64_t v5 = a2[5];
  if (a1[5])
  {
    if (!v5) {
      return v5 & 1;
    }
    swift_retain();
    uint64_t v11 = swift_retain();
    char v12 = specialized static Histogram.== infix(_:_:)(v11, v5);
    swift_release();
    swift_release();
    if (v12) {
      goto LABEL_15;
    }
LABEL_21:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  if (v5) {
    goto LABEL_21;
  }
LABEL_15:
  uint64_t v13 = a1[6];
  uint64_t v14 = a2[6];
  LOBYTE(v5) = (v13 | v14) == 0;
  if (v13 && v14)
  {
    swift_retain();
    uint64_t v15 = swift_retain();
    LOBYTE(v5) = specialized static Histogram.== infix(_:_:)(v15, v14);
    swift_release();
    goto LABEL_19;
  }
  return v5 & 1;
}

uint64_t sub_1B0ED597C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0ED59C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 112);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0ED5A1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0ED5A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0ED5ABC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0ED5B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 120);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for PubSubTopicReporter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PubSubTopicReporter);
}

uint64_t dispatch thunk of PubSubTopicReporter.conversationReportsByTag.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PubSubTopicReporter.conversationReportsByTag.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PubSubTopicReporter.conversationReportsByTag.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PubSubTopicReporter.__allocating_init(queue:reportReadyCallback:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PubSubTopicReporter.emitAndRemoveReport(forTag:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t type metadata accessor for PubSubTopicReporter.ConversationReport()
{
  return self;
}

uint64_t method lookup function for PubSubTopicReporter.ConversationReport(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PubSubTopicReporter.ConversationReport);
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.topicReports.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.topicReports.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.topicReports.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.__allocating_init(coversationUUID:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.getOrCreateTopicReport(topic:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.rtcReports.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t method lookup function for PubSubTopicReporter.PubSubTopicReport(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PubSubTopicReporter.PubSubTopicReport);
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.__allocating_init(name:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.rtcReport.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.debugDescription.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

void specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v25[1];
    uint64_t v23 = v25[2];
    uint64_t v7 = v25[3];
    int64_t v8 = v25[4];
    unint64_t v9 = v25[5];
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    uint64_t v17 = __CocoaSet.Iterator.next()();
    if (!v17) {
      goto LABEL_39;
    }
    uint64_t v24 = v17;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v18 = (id)v25[0];
    swift_unknownObjectRelease();
    int64_t v16 = v8;
    uint64_t v14 = v9;
    if (!v18) {
      goto LABEL_39;
    }
LABEL_28:
    v25[0] = v18;
    a1(&v24, v25);

    if (v4)
    {
      outlined consume of [String : ()].Iterator._Variant();
      swift_bridgeObjectRelease();
      return;
    }
    if (v24)
    {
      MEMORY[0x1B3EA1CF0]();
      if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    int64_t v8 = v16;
    unint64_t v9 = v14;
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v16 = v8;
LABEL_27:
    id v18 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    if (!v18) {
      goto LABEL_39;
    }
    goto LABEL_28;
  }
  int64_t v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v22) {
      goto LABEL_39;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v16);
    if (!v19)
    {
      int64_t v20 = v8 + 2;
      if (v8 + 2 >= v22) {
        goto LABEL_39;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19) {
        goto LABEL_25;
      }
      int64_t v20 = v8 + 3;
      if (v8 + 3 >= v22) {
        goto LABEL_39;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19) {
        goto LABEL_25;
      }
      int64_t v20 = v8 + 4;
      if (v8 + 4 >= v22) {
        goto LABEL_39;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19)
      {
LABEL_25:
        int64_t v16 = v20;
      }
      else
      {
        int64_t v16 = v8 + 5;
        if (v8 + 5 >= v22) {
          goto LABEL_39;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v16);
        if (!v19)
        {
          int64_t v21 = v8 + 6;
          while (v22 != v21)
          {
            unint64_t v19 = *(void *)(v23 + 8 * v21++);
            if (v19)
            {
              int64_t v16 = v21 - 1;
              goto LABEL_26;
            }
          }
LABEL_39:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    uint64_t v14 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1F4188790](v6 - 8);
  int64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NWEndpoint();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  Swift::String v29 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v26 = (char *)&v23 - v13;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v23 = v12;
  Swift::String v27 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  Swift::String v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  unint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  do
  {
    uint64_t v31 = *(void *)(a3 + 8 * v15 + 32);
    a1(&v31);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*v28)(v8, 1, v9) == 1)
    {
      outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for NWEndpoint?);
    }
    else
    {
      uint64_t v17 = v14;
      id v18 = v26;
      unint64_t v19 = *v27;
      (*v27)(v26, v8, v9);
      v19(v29, v18, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
      }
      unint64_t v21 = *(void *)(v16 + 16);
      unint64_t v20 = *(void *)(v16 + 24);
      if (v21 >= v20 >> 1) {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v16);
      }
      *(void *)(v16 + 16) = v21 + 1;
      v19((char *)(v16+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v21), v29, v9);
      a1 = v24;
      a3 = v25;
      uint64_t v14 = v17;
    }
    ++v15;
  }
  while (v14 != v15);
  swift_bridgeObjectRelease();
  return v16;
}

id BiomeSessionDonator.queue.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPBiomeSessionDonator_queue);
}

id BiomeSessionDonator.biomeStream.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPBiomeSessionDonator_biomeStream);
}

uint64_t key path getter for BiomeSessionDonator.biomeStreamSender : BiomeSessionDonator@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x68))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for BiomeSessionDonator.biomeStreamSender : BiomeSessionDonator(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x70);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t BiomeSessionDonator.biomeStreamSender.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(*v1);
  return v2;
}

uint64_t BiomeSessionDonator.biomeStreamSender.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v6);
}

uint64_t (*BiomeSessionDonator.biomeStreamSender.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

char *BiomeSessionDonator.__allocating_init(dataSource:parentQueue:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return BiomeSessionDonator.init(dataSource:parentQueue:)(a1, a2);
}

char *BiomeSessionDonator.init(dataSource:parentQueue:)(void *a1, void *a2)
{
  id v25 = a1;
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v9 = OBJC_IVAR___CPBiomeSessionDonator_biomeStream;
  id v10 = objc_allocWithZone(MEMORY[0x1E4F50338]);
  uint64_t v11 = v2;
  *(void *)&v2[v9] = objc_msgSend(v10, sel_init);
  uint64_t v12 = &v11[OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender];
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  id v24 = a2;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCC58], v23);
  *(void *)&v11[OBJC_IVAR___CPBiomeSessionDonator_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  uint64_t v13 = (objc_class *)type metadata accessor for BiomeSessionDonator();
  v27.receiver = v11;
  v27.super_class = v13;
  uint64_t v14 = (char *)objc_msgSendSuper2(&v27, sel_init);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v16 = (uint64_t *)&v14[OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender];
  swift_beginAccess();
  uint64_t v17 = *v16;
  *unint64_t v16 = (uint64_t)partial apply for closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:);
  v16[1] = v15;
  id v18 = v14;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v17);
  unint64_t v19 = *(void **)&v18[OBJC_IVAR___CPBiomeSessionDonator_queue];
  unint64_t v20 = v18;
  id v21 = v19;
  objc_msgSend(v25, sel_addObserver_queue_, v20, v21);

  swift_unknownObjectRelease();
  return v20;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for BiomeSessionDonator()
{
  return self;
}

uint64_t sub_1B0ED6F94()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1B3EA3B30](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = *(id *)(v4 + OBJC_IVAR___CPBiomeSessionDonator_biomeStream);

    id v7 = objc_msgSend(v6, sel_source);
    objc_msgSend(v7, sel_sendEvent_, a1);
  }
}

void partial apply for closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:)(uint64_t a1)
{
  closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:)(a1, v1);
}

uint64_t BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:), (uint64_t)v25, a1);
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_12;
    }
  }
  id v7 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v24) + 0x68);
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x1B3EA25C0](i, v4);
    }
    else {
      id v9 = *(id *)(v4 + 8 * i + 32);
    }
    id v10 = v9;
    uint64_t v11 = (void (*)(void *))v7(v9);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      v11(v10);
      _sxRi_zRi0_zlyytIseghHr_SgWOe(v12);
    }
  }
LABEL_12:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Sequence.compactMap<A>(_:)(a1, a3);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = self;
  uint64_t v16 = v13 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of Any(v16, (uint64_t)v30);
    id v17 = objc_msgSend(v15, sel_sharedInstance);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B1138A80;
    outlined init with copy of Any((uint64_t)v30, v18 + 32);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v30, (uint64_t)v29);
    uint64_t v20 = swift_allocObject();
    outlined init with take of Any(v29, (_OWORD *)(v20 + 16));
    aBlock[4] = partial apply for closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:);
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_10;
    id v21 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v17, sel_recordInteractions_completionHandler_, isa, v21);
    _Block_release(v21);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
    v16 += 32;
    --v14;
  }
  while (v14);
  return swift_bridgeObjectRelease_n();
}

id closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v69 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v70 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v57 - v13;
  id v15 = *a1;
  id v16 = objc_msgSend(*a1, sel_activity);
  id v17 = objc_msgSend(v16, sel_bundleIdentifier);

  if (v17)
  {
    uint64_t v66 = a4;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v63 = v19;
    uint64_t v64 = v18;

    id v20 = objc_msgSend(v15, sel_activity);
    id v21 = objc_msgSend(v20, sel_metadata);

    uint64_t v67 = v4;
    uint64_t v65 = v9;
    if (v21)
    {
      id v22 = objc_msgSend(v21, sel_context);

      id v23 = objc_msgSend(v22, sel_typedIdentifier);
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v61 = v25;
      uint64_t v62 = v24;
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Log.default);
      id v28 = v15;
      Swift::String v29 = Logger.logObject.getter();
      int v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, (os_log_type_t)v30))
      {
        LODWORD(v62) = v30;
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        uint64_t v73 = v61;
        *(_DWORD *)uint64_t v31 = 136315138;
        id v32 = objc_msgSend(v28, sel_activity);
        id v33 = objc_msgSend(v32, sel_metadata);

        if (v33)
        {
          uint64_t v72 = (uint64_t)v33;
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivityMetadata);
          uint64_t v34 = String.init<A>(reflecting:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B0DF7000, v29, (os_log_type_t)v62, "Experience type for activity session is nil: %s", v31, 0xCu);
        uint64_t v37 = v61;
        swift_arrayDestroy();
        MEMORY[0x1B3EA39E0](v37, -1, -1);
        MEMORY[0x1B3EA39E0](v31, -1, -1);
      }
      else
      {
      }
      uint64_t v61 = 0;
      uint64_t v62 = 0;
    }
    id v60 = objc_msgSend(v15, sel_state);
    id v38 = objc_msgSend(v15, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v39 = UUID.uuidString.getter();
    uint64_t v58 = v40;
    uint64_t v59 = v39;
    uint64_t v41 = v68;
    uint64_t v42 = *(void (**)(char *, uint64_t))(v68 + 8);
    uint64_t v43 = v65;
    v42(v14, v65);
    id v44 = objc_msgSend(v15, sel_activity);
    id v45 = objc_msgSend(v44, sel_UUID);

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = UUID.uuidString.getter();
    uint64_t v48 = v47;
    v42(v12, v43);
    uint64_t v49 = v70;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v69, v70, &demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v49, 1, v43) == 1)
    {
      outlined destroy of UUID?(v49, &demangling cache variable for type metadata for UUID?);
      uint64_t v50 = 0;
      uint64_t v51 = 0;
    }
    else
    {
      uint64_t v50 = UUID.uuidString.getter();
      uint64_t v51 = v52;
      v42((char *)v49, v43);
    }
    if (v61) {
      uint64_t v53 = v62;
    }
    else {
      uint64_t v53 = 0;
    }
    if (v61) {
      uint64_t v54 = v61;
    }
    else {
      uint64_t v54 = 0xE000000000000000;
    }
    char v55 = v60 == (id)1;
    objc_allocWithZone(MEMORY[0x1E4F50330]);
    uint64_t v56 = swift_bridgeObjectRetain();
    id result = @nonobjc BMGroupActivitySessionEvent.init(isActive:sourceBundleID:activitySessionID:activityID:messagesChatGuid:participantHandles:memberHandles:experienceType:)(v55, v64, v63, v59, v58, v46, v48, v50, v51, 0, v56, v53, v54);
    a4 = v66;
  }
  else
  {
    id result = 0;
  }
  *a4 = result;
  return result;
}

id partial apply for closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void closure #3 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = *a1;
  id v11 = objc_msgSend(*a1, sel_activity);
  id v12 = objc_msgSend(v11, sel_bundleIdentifier);

  if (v12)
  {
    uint64_t v48 = v3;
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5B3D8]), sel_init);
    objc_msgSend(v13, sel_setBundleId_, v12);

    objc_msgSend(v13, sel_setTargetBundleId_, *MEMORY[0x1E4FADD00]);
    objc_msgSend(v13, sel_setDirection_, 2);
    objc_msgSend(v13, sel_setMechanism_, 19);
    id v14 = objc_msgSend(v10, sel_activity);
    id v15 = objc_msgSend(v14, sel_UUID);

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v19 = (void *)MEMORY[0x1B3EA1B00](v16, v18);
    swift_bridgeObjectRelease();
    id v49 = v13;
    objc_msgSend(v13, sel_setUuid_, v19);

    id v20 = objc_msgSend(v10, sel_activity);
    id v21 = objc_msgSend(v20, sel_originator);

    if (v21)
    {
      id v22 = TUHandle.cdContact.getter();
    }
    else
    {
      id v22 = 0;
    }
    objc_msgSend(v49, sel_setSender_, v22);

    uint64_t v54 = MEMORY[0x1E4FBC860];
    uint64_t v23 = v50;
    uint64_t v24 = *(void *)(v50 + 16);
    if (v24)
    {
      uint64_t v25 = self;
      swift_bridgeObjectRetain();
      uint64_t v26 = (uint64_t *)(v23 + 40);
      uint64_t v27 = &selRef_isScreenEnabled;
      uint64_t v51 = v25;
      uint64_t v52 = a3;
      do
      {
        uint64_t v29 = *(v26 - 1);
        uint64_t v28 = *v26;
        swift_bridgeObjectRetain();
        int v30 = (void *)MEMORY[0x1B3EA1B00](v29, v28);
        id v31 = objc_msgSend(v25, v27[388], v30);

        if (v31)
        {
          id v32 = objc_msgSend(v31, sel_type);
          if (v32 == (id)3) {
            uint64_t v33 = 2;
          }
          else {
            uint64_t v33 = v32 == (id)2;
          }
          if (v33)
          {
            id v34 = objc_msgSend(v31, sel_normalizedValue);
            if (!v34) {
              id v34 = objc_msgSend(v31, sel_value);
            }
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v36 = v35;

            uint64_t v37 = self;
            id v38 = objc_msgSend(v37, sel_typeAsCNContactPropertyKey_, v33);
            if (v38)
            {
              uint64_t v39 = v38;
              uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v42 = v41;
            }
            else
            {
              uint64_t v40 = 0;
              uint64_t v42 = 0;
            }
            uint64_t v43 = (void *)MEMORY[0x1B3EA1B00](v53, v36);
            swift_bridgeObjectRelease();
            if (v42)
            {
              id v44 = (void *)MEMORY[0x1B3EA1B00](v40, v42);
              swift_bridgeObjectRelease();
            }
            else
            {
              id v44 = 0;
            }
            uint64_t v25 = v51;
            uint64_t v27 = &selRef_isScreenEnabled;
            id v45 = objc_msgSend(v37, sel_contactWithIdentifier_identifierType_, v43, v44);
            swift_bridgeObjectRelease();

            a3 = v52;
            if (v45)
            {
              MEMORY[0x1B3EA1CF0]();
              if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v26 += 2;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
    }
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for _CDContact);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v47 = v49;
    objc_msgSend(v49, sel_setRecipients_, isa);

    *(void *)(a3 + 24) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for _CDInteraction);
    *(void *)a3 = v47;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

id TUHandle.cdContact.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_type);
  if (v2 == (id)3) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = v2 == (id)2;
  }
  if (!v3) {
    return 0;
  }
  id v4 = objc_msgSend(v1, sel_normalizedValue);
  if (!v4) {
    id v4 = objc_msgSend(v1, sel_value);
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v8 = self;
  id v9 = objc_msgSend(v8, sel_typeAsCNContactPropertyKey_, v3);
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  id v15 = (void *)MEMORY[0x1B3EA1B00](v5, v7);
  swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v16 = (void *)MEMORY[0x1B3EA1B00](v11, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
  }
  id v14 = objc_msgSend(v8, sel_contactWithIdentifier_identifierType_, v15, v16);

  return v14;
}

void closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(char a1, void *a2, uint64_t a3)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  outlined init with copy of Any(a3, (uint64_t)v34);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v27 = a2;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    outlined init with copy of Any((uint64_t)v34, (uint64_t)v32);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32, (uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v31)
    {
      outlined init with take of Any(&v30, v29);
      outlined init with copy of Any((uint64_t)v29, (uint64_t)v28);
      uint64_t v11 = String.init<A>(reflecting:)();
      unint64_t v13 = v12;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }
    else
    {
      uint64_t v11 = 7104878;
      unint64_t v13 = 0xE300000000000000;
    }
    outlined destroy of UUID?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    *(_WORD *)(v9 + 12) = 1024;
    LODWORD(v32[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B0DF7000, v7, v8, "Recorded interaction %s status: %{BOOL}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v10, -1, -1);
    MEMORY[0x1B3EA39E0](v9, -1, -1);

    a2 = v27;
    if (a1) {
      return;
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);

    if (a1) {
      return;
    }
  }
  outlined init with copy of Any(a3, (uint64_t)v34);
  id v14 = a2;
  id v15 = a2;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = 7104878;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    outlined init with copy of Any((uint64_t)v34, (uint64_t)v32);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32, (uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v31)
    {
      outlined init with take of Any(&v30, v29);
      outlined init with copy of Any((uint64_t)v29, (uint64_t)v28);
      uint64_t v21 = String.init<A>(reflecting:)();
      unint64_t v23 = v22;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }
    else
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v21 = 7104878;
    }
    outlined destroy of UUID?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    *(_WORD *)(v19 + 12) = 2080;
    if (a2)
    {
      v32[0] = a2;
      id v24 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v18 = String.init<A>(reflecting:)();
      unint64_t v26 = v25;
    }
    else
    {
      unint64_t v26 = 0xE300000000000000;
    }
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B0DF7000, v16, v17, "Failed to record interaction %s reason: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v20, -1, -1);
    MEMORY[0x1B3EA39E0](v19, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
  }
}

uint64_t BiomeSessionDonator.conversationManager(_:conversationChanged:)(uint64_t a1, void *a2)
{
  return specialized BiomeSessionDonator.conversationManager(_:conversationChanged:)(a2);
}

id BiomeSessionDonator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void BiomeSessionDonator.init()()
{
}

id BiomeSessionDonator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BiomeSessionDonator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t TUHandleType.cdContactType.getter(uint64_t a1)
{
  if (a1 == 3) {
    return 2;
  }
  else {
    return a1 == 2;
  }
}

id @nonobjc BMGroupActivitySessionEvent.init(isActive:sourceBundleID:activitySessionID:activityID:messagesChatGuid:participantHandles:memberHandles:experienceType:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = (void *)MEMORY[0x1B3EA1B00](a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)MEMORY[0x1B3EA1B00](a4, a5);
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)MEMORY[0x1B3EA1B00](a6, a7);
  swift_bridgeObjectRelease();
  if (a9)
  {
    unint64_t v22 = (void *)MEMORY[0x1B3EA1B00](a8, a9);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v22 = 0;
  }
  if (!a10)
  {
    v23.super.Class isa = 0;
    if (a11) {
      goto LABEL_6;
    }
LABEL_8:
    v24.super.Class isa = 0;
    goto LABEL_9;
  }
  v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!a11) {
    goto LABEL_8;
  }
LABEL_6:
  v24.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_9:
  unint64_t v25 = (void *)MEMORY[0x1B3EA1B00](a12, a13);
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(v28, sel_initWithIsActive_sourceBundleID_activitySessionID_activityID_messagesChatGuid_participantHandles_memberHandles_experienceType_, a1 & 1, v19, v20, v21, v22, v23.super.isa, v24.super.isa, v25);

  return v26;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v30;
    uint64_t v24 = v31;
    uint64_t v6 = v32;
    int64_t v7 = v33;
    unint64_t v8 = v34;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  unint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  int64_t v23 = (unint64_t)(v6 + 64) >> 6;
  uint64_t v26 = v4;
  if ((v4 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v13 = __CocoaSet.Iterator.next()();
  if (v13)
  {
    *(void *)&long long v27 = v13;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = *(id *)&v29[0];
    swift_unknownObjectRelease();
    int64_t v15 = v7;
    uint64_t v16 = v8;
    uint64_t v4 = v26;
    while (v14)
    {
      id v35 = v14;
      closure #3 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(&v35, a2, (uint64_t)&v27);
      if (v3)
      {

        outlined consume of [String : ()].Iterator._Variant();
        swift_bridgeObjectRelease();
        return (uint64_t)v12;
      }

      if (v28)
      {
        outlined init with take of Any(&v27, v29);
        outlined init with take of Any(v29, &v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        unint64_t v21 = v12[2];
        unint64_t v20 = v12[3];
        if (v21 >= v20 >> 1) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v12);
        }
        v12[2] = v21 + 1;
        uint64_t result = (uint64_t)outlined init with take of Any(&v27, &v12[4 * v21 + 4]);
        int64_t v7 = v15;
        unint64_t v8 = v16;
        uint64_t v4 = v26;
        if (v26 < 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t result = outlined destroy of UUID?((uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
        int64_t v7 = v15;
        unint64_t v8 = v16;
        if (v4 < 0) {
          goto LABEL_8;
        }
      }
LABEL_11:
      if (v8)
      {
        uint64_t v16 = (v8 - 1) & v8;
        unint64_t v17 = __clz(__rbit64(v8)) | (v7 << 6);
        int64_t v15 = v7;
      }
      else
      {
        int64_t v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          return result;
        }
        if (v15 >= v23) {
          break;
        }
        unint64_t v18 = *(void *)(v24 + 8 * v15);
        if (!v18)
        {
          int64_t v19 = v7 + 2;
          if (v7 + 2 >= v23) {
            break;
          }
          unint64_t v18 = *(void *)(v24 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v7 + 3;
          if (v7 + 3 >= v23) {
            break;
          }
          unint64_t v18 = *(void *)(v24 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v7 + 4;
          if (v7 + 4 >= v23) {
            break;
          }
          unint64_t v18 = *(void *)(v24 + 8 * v19);
          if (v18)
          {
LABEL_22:
            int64_t v15 = v19;
          }
          else
          {
            int64_t v15 = v7 + 5;
            if (v7 + 5 >= v23) {
              break;
            }
            unint64_t v18 = *(void *)(v24 + 8 * v15);
            if (!v18)
            {
              int64_t v22 = v7 + 6;
              while (v23 != v22)
              {
                unint64_t v18 = *(void *)(v24 + 8 * v22++);
                if (v18)
                {
                  int64_t v15 = v22 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v16 = (v18 - 1) & v18;
        unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      id v14 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    }
  }
  outlined consume of [String : ()].Iterator._Variant();
  return (uint64_t)v12;
}

uint64_t sub_1B0ED8C98()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(char a1, void *a2)
{
  closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(a1, a2, v2 + 16);
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t specialized BiomeSessionDonator.conversationManager(_:conversationChanged:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(a1, sel_remoteMembers);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v7);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(a1, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v11 = objc_msgSend(a1, sel_messagesGroupUUID);
  if (v11)
  {
    unint64_t v12 = v11;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 0, 1, v13);
  }
  else
  {
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v5, 1, 1, v14);
  }
  (*(void (**)(uint64_t, char *, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88))(v10, v5, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
}

uint64_t method lookup function for BiomeSessionDonator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BiomeSessionDonator);
}

uint64_t dispatch thunk of BiomeSessionDonator.biomeStreamSender.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of BiomeSessionDonator.biomeStreamSender.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of BiomeSessionDonator.biomeStreamSender.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of BiomeSessionDonator.__allocating_init(dataSource:parentQueue:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of BiomeSessionDonator.conversationManager(_:conversationChanged:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of BiomeSessionDonator.conversationManager(_:activityAuthorizationChangedForBundleIdentifier:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_1B0ED90F8()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t DatagramChannelGroupState.rawValue.getter(char a1)
{
  uint64_t result = 0x6C616974696E69;
  switch(a1)
  {
    case 1:
    case 2:
      uint64_t result = 0x73696C6261747365;
      break;
    case 3:
      uint64_t result = 0x6465736F6C63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DatagramChannelGroupState(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x6C616974696E69;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x6C616974696E69;
  switch(v3)
  {
    case 1:
      uint64_t v5 = 0x73696C6261747365;
      unint64_t v4 = 0xEC000000676E6968;
      break;
    case 2:
      uint64_t v5 = 0x73696C6261747365;
      unint64_t v4 = 0xEB00000000646568;
      break;
    case 3:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x6465736F6C63;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xEC000000676E6968;
      if (v5 == 0x73696C6261747365) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x73696C6261747365;
      unint64_t v6 = 0xEB00000000646568;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x6465736F6C63) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DatagramChannelGroupState()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DatagramChannelGroupState()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DatagramChannelGroupState()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DatagramChannelGroupState@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized DatagramChannelGroupState.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DatagramChannelGroupState(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6C616974696E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC000000676E6968;
      uint64_t v3 = 0x73696C6261747365;
      goto LABEL_3;
    case 2:
      *a1 = 0x73696C6261747365;
      a1[1] = 0xEB00000000646568;
      break;
    case 3:
      *a1 = 0x6465736F6C63;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

id DatagramChannelStream.queue.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t DatagramChannelStream.topic.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DatagramChannelStream.input.getter()
{
  return swift_retain();
}

uint64_t DatagramChannelStream.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  unint64_t v5 = *(void *)(v1 + 72);
  char v6 = *(unsigned char *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 104);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 56) = v7;
  return outlined copy of DatagramEndpoint(v2, v3, v4, v5, v6);
}

uint64_t DatagramChannelStream.inputBufferMaxQueueSize.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t DatagramChannelStream.traceId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + direct field offset for DatagramChannelStream.traceId, a1, &demangling cache variable for type metadata for UUID?);
}

uint64_t key path getter for DatagramChannelStream.channelGroupState : <A, B>DatagramChannelStream<A, B>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240))();
  *a2 = result;
  return result;
}

uint64_t key path setter for DatagramChannelStream.channelGroupState : <A, B>DatagramChannelStream<A, B>(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 248))(*a1);
}

uint64_t DatagramChannelStream.channelGroupState.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DatagramChannelStream.channelGroupState.setter()
{
  return static Published.subscript.setter();
}

void (*DatagramChannelStream.channelGroupState.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t key path setter for DatagramChannelStream.$channelGroupState : <A, B>DatagramChannelStream<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 272))(v6);
}

uint64_t DatagramChannelStream.$channelGroupState.getter()
{
  return swift_endAccess();
}

uint64_t DatagramChannelStream.$channelGroupState.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*DatagramChannelStream.$channelGroupState.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  DatagramChannelStream.$channelGroupState.getter();
  return DatagramChannelStream.$channelGroupState.modify;
}

void DatagramChannelStream.$channelGroupState.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    DatagramChannelStream.$channelGroupState.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    DatagramChannelStream.$channelGroupState.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t DatagramChannelStream.channelGroupStatePublisher.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)v0 + 264))(v3);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<DatagramChannelGroupState>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t DatagramChannelStream.output.getter()
{
  return swift_retain();
}

uint64_t DatagramChannelStream.sendQueue.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t DatagramChannelStream.sendQueue.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for DatagramChannelStream.sendQueue);
}

uint64_t (*DatagramChannelStream.sendQueue.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.participantUnicastEndpoints.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t DatagramChannelStream.participantUnicastEndpoints.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for DatagramChannelStream.participantUnicastEndpoints);
}

uint64_t DatagramChannelStream.sendQueue.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DatagramChannelStream.participantUnicastEndpoints.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.cancellable.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t DatagramChannelStream.cancellable.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for DatagramChannelStream.cancellable);
}

uint64_t (*DatagramChannelStream.cancellable.modify())()
{
  return ActivitySession.audioSessionID.modify;
}

uint64_t DatagramChannelStream.channelGroup.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t DatagramChannelStream.channelGroup.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for DatagramChannelStream.channelGroup);
}

uint64_t (*DatagramChannelStream.channelGroup.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.inputSubscriptionCancellable.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t DatagramChannelStream.inputSubscriptionCancellable.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for DatagramChannelStream.inputSubscriptionCancellable);
}

uint64_t (*DatagramChannelStream.inputSubscriptionCancellable.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.ingressDeserializationFailedCount.getter()
{
  uint64_t v1 = v0 + direct field offset for DatagramChannelStream.ingressDeserializationFailedCount;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t DatagramChannelStream.ingressDeserializationFailedCount.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for DatagramChannelStream.ingressDeserializationFailedCount);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*DatagramChannelStream.ingressDeserializationFailedCount.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for DatagramChannelStream.channelTerminatedHandler : <A, B>DatagramChannelStream<A, B>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 440))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DatagramChannelError) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for DatagramChannelStream.channelTerminatedHandler : <A, B>DatagramChannelStream<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DatagramChannelError) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(void **)a2 + 448);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t DatagramChannelStream.channelTerminatedHandler.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for DatagramChannelStream.channelTerminatedHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(*v1);
  return v2;
}

uint64_t DatagramChannelStream.channelTerminatedHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + direct field offset for DatagramChannelStream.channelTerminatedHandler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v6);
}

uint64_t (*DatagramChannelStream.channelTerminatedHandler.modify())()
{
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.__allocating_init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v15 = swift_allocObject();
  DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)(v15, a2, a3, a4, a5, a6, a7, a8);
  return v15;
}

uint64_t DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v57 = a7;
  uint64_t v58 = a8;
  uint64_t v55 = a2;
  uint64_t v56 = a6;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EgressMessage();
  uint64_t v14 = type metadata accessor for AnyPublisher();
  unint64_t v15 = type metadata accessor for OS_dispatch_queue();
  unint64_t v51 = v15;
  uint64_t v52 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = WitnessTable;
  uint64_t v49 = lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (void (*)(uint64_t))type metadata accessor for OS_dispatch_queue);
  uint64_t v61 = v14;
  unint64_t v62 = v15;
  uint64_t v63 = WitnessTable;
  uint64_t v64 = v49;
  uint64_t v17 = type metadata accessor for Publishers.ReceiveOn();
  uint64_t v59 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  int64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int64_t v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v48 = *a5;
  uint64_t v47 = *((void *)a5 + 2);
  uint64_t v46 = *((void *)a5 + 3);
  int v45 = *((unsigned __int8 *)a5 + 32);
  uint64_t v44 = *((void *)a5 + 5);
  uint64_t v43 = *((void *)a5 + 6);
  uint64_t v24 = *((void *)a5 + 7);
  uint64_t v25 = v9 + direct field offset for DatagramChannelStream._channelGroupState;
  LOBYTE(v61) = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v25, v23, v20);
  uint64_t v26 = direct field offset for DatagramChannelStream.output;
  type metadata accessor for DatagramChannelError(255);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
  type metadata accessor for PassthroughSubject();
  *(void *)(v9 + v26) = PassthroughSubject.__allocating_init()();
  uint64_t v27 = direct field offset for DatagramChannelStream.sendQueue;
  *(void *)(v9 + v27) = Array.init()();
  *(void *)(v9 + direct field offset for DatagramChannelStream.participantUnicastEndpoints) = MEMORY[0x1E4FBC868];
  *(void *)(v9 + direct field offset for DatagramChannelStream.cancellable) = 0;
  *(void *)(v9 + direct field offset for DatagramChannelStream.channelGroup) = 0;
  *(void *)(v9 + direct field offset for DatagramChannelStream.inputSubscriptionCancellable) = 0;
  *(void *)(v9 + direct field offset for DatagramChannelStream.ingressDeserializationFailedCount) = 0;
  uint64_t v28 = (void *)(v9 + direct field offset for DatagramChannelStream.channelTerminatedHandler);
  *uint64_t v28 = 0;
  v28[1] = 0;
  uint64_t v29 = v54;
  *(void *)(v9 + 32) = v53;
  *(void *)(v9 + 40) = v29;
  *(_OWORD *)(v9 + 48) = v48;
  uint64_t v30 = v46;
  *(void *)(v9 + 64) = v47;
  *(void *)(v9 + 72) = v30;
  *(unsigned char *)(v9 + 80) = v45;
  uint64_t v31 = v43;
  *(void *)(v9 + 88) = v44;
  *(void *)(v9 + 96) = v31;
  *(void *)(v9 + 104) = v24;
  uint64_t v32 = v57;
  *(void *)(v9 + 112) = v56;
  uint64_t v33 = v55;
  *(void *)(v9 + 16) = v32;
  *(void *)(v9 + 24) = v33;
  uint64_t v34 = v58;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v58, v9 + direct field offset for DatagramChannelStream.traceId, &demangling cache variable for type metadata for UUID?);
  id v60 = *(id *)(v9 + 16);
  id v35 = v60;
  uint64_t v61 = v29;
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v13, 1, 1, v36);
  swift_retain();
  id v37 = v32;
  id v38 = v35;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_retain_n();
  swift_getWitnessTable();
  uint64_t v39 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();

  swift_release_n();
  outlined destroy of UUID?(v34, &demangling cache variable for type metadata for UUID?);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v17);
  uint64_t v40 = (uint64_t *)(v9 + direct field offset for DatagramChannelStream.inputSubscriptionCancellable);
  swift_beginAccess();
  *uint64_t v40 = v39;
  swift_release();
  return v9;
}

void closure #1 in DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)()
{
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)log);
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v5 = DatagramChannelStream.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v1, v2, "DatagramChannelStream: input egress-stream completed %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v4, -1, -1);
    MEMORY[0x1B3EA39E0](v3, -1, -1);
  }
  else
  {

    swift_release();
  }
}

uint64_t DatagramChannelStream.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)(v0 + direct field offset for DatagramChannelStream.inputSubscriptionCancellable);
  swift_beginAccess();
  if (*v5)
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  default argument 0 of DatagramChannelStream.close(error:)();
  (*(void (**)(char *))(*(void *)v0 + 480))(v4);
  outlined destroy of DatagramChannelError((uint64_t)v4);

  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of DatagramEndpoint(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  outlined destroy of UUID?(v0 + direct field offset for DatagramChannelStream.traceId, &demangling cache variable for type metadata for UUID?);
  uint64_t v6 = v0 + direct field offset for DatagramChannelStream._channelGroupState;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(void *)(v1 + direct field offset for DatagramChannelStream.channelTerminatedHandler));
  return v1;
}

uint64_t DatagramChannelStream.__deallocating_deinit()
{
  DatagramChannelStream.deinit();
  return swift_deallocClassInstance();
}

uint64_t DatagramChannelStream.start(channelGroup:)()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = (void *)v0[2];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = *(void (**)(uint64_t))(*v0 + 376);
    uint64_t v9 = swift_retain();
    v8(v9);
    return DatagramChannelStream.sendNextEgressMessage()();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DatagramChannelStream.terminate(error:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(*(void *)v1 + 80);
  uint64_t v6 = *(void *)(*(void *)v1 + 96);
  uint64_t v7 = type metadata accessor for EgressMessage();
  uint64_t v99 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v99 + 64);
  MEMORY[0x1F4188790](v7);
  unint64_t v96 = (char *)v85 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v95 = (uint64_t)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v91 = (uint64_t)v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v92 = (uint64_t)v85 - v15;
  uint64_t v98 = type metadata accessor for DatagramChannelError(0);
  uint64_t v16 = *(void *)(v98 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v98);
  uint64_t v90 = (uint64_t)v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v93 = (uint8_t *)v85 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  int64_t v23 = (char *)v85 - v22;
  switch((*(unsigned __int8 (**)(uint64_t))(v4 + 240))(v21))
  {
    case 3u:
      return swift_bridgeObjectRelease();
    default:
      uint64_t v94 = v23;
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if (v24) {
        return result;
      }
      uint64_t v97 = a1;
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 416))(result);
      uint64_t v27 = (uint64_t)v94;
      uint64_t v105 = 0;
      unint64_t v106 = 0xE000000000000000;
      if (v26 < 1)
      {
        v33._uint64_t countAndFlagsBits = 0x206C656E6E616843;
        v33._object = (void *)0xE800000000000000;
        String.append(_:)(v33);
        uint64_t v34 = *(void *)(v4 + 88);
        uint64_t v35 = *(void *)(v4 + 104);
        uint64_t v100 = v5;
        uint64_t v101 = v34;
        uint64_t v102 = v6;
        uint64_t v103 = v35;
        uint64_t v104 = v1;
        type metadata accessor for DatagramChannelStream();
        swift_getWitnessTable();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
      }
      else
      {
        v28._uint64_t countAndFlagsBits = 0x206C656E6E616843;
        v28._object = (void *)0xE800000000000000;
        String.append(_:)(v28);
        uint64_t v29 = *(void *)(v4 + 88);
        uint64_t v30 = *(void *)(v4 + 104);
        uint64_t v100 = v5;
        uint64_t v101 = v29;
        uint64_t v102 = v6;
        uint64_t v103 = v30;
        uint64_t v104 = v1;
        type metadata accessor for DatagramChannelStream();
        swift_getWitnessTable();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v31._uint64_t countAndFlagsBits = 32;
        v31._object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        v32._uint64_t countAndFlagsBits = DatagramChannelStream.deserializationFailedDescription.getter();
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
      }
      uint64_t v36 = v105;
      unint64_t v37 = v106;
      swift_storeEnumTagMultiPayload();
      char v38 = specialized static DatagramChannelError.== infix(_:_:)(v27, v97);
      outlined destroy of DatagramChannelError(v27);
      uint64_t v89 = v8;
      if (v38)
      {
        uint64_t v39 = v36;
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        __swift_project_value_buffer(v40, (uint64_t)log);
        swift_bridgeObjectRetain();
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          uint64_t v44 = swift_slowAlloc();
          uint64_t v100 = v44;
          *(_DWORD *)uint64_t v43 = 136315138;
          uint64_t v93 = v43 + 4;
          swift_bridgeObjectRetain();
          uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v37, &v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B0DF7000, v41, v42, "%s closed by client", v43, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B3EA39E0](v44, -1, -1);
          int v45 = v43;
          uint64_t v27 = (uint64_t)v94;
          MEMORY[0x1B3EA39E0](v45, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v46 = v98;
        goto LABEL_22;
      }
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)log);
      uint64_t v48 = (uint64_t)v93;
      outlined init with copy of DatagramChannelError(v97, (uint64_t)v93);
      swift_bridgeObjectRetain();
      uint64_t v49 = Logger.logObject.getter();
      int v50 = static os_log_type_t.error.getter();
      BOOL v51 = os_log_type_enabled(v49, (os_log_type_t)v50);
      uint64_t v46 = v98;
      if (!v51)
      {
        swift_bridgeObjectRelease_n();
        outlined destroy of DatagramChannelError(v48);

LABEL_22:
        uint64_t v57 = v97;
        goto LABEL_25;
      }
      int v87 = v50;
      os_log_t v88 = v49;
      uint64_t v52 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      uint64_t v100 = v86;
      *(_DWORD *)uint64_t v52 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v100);
      v85[1] = &v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v53 = v92;
      outlined init with copy of DatagramChannelError(v48, v92);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v53, 0, 1, v46);
      uint64_t v54 = v91;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v53, v91, &demangling cache variable for type metadata for DatagramChannelError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v54, 1, v46) == 1)
      {
        unint64_t v55 = 0xE300000000000000;
        uint64_t v56 = 7104878;
      }
      else
      {
        outlined init with take of DatagramChannelError(v54, v27);
        outlined init with copy of DatagramChannelError(v27, v90);
        uint64_t v56 = String.init<A>(reflecting:)();
        unint64_t v55 = v58;
        outlined destroy of DatagramChannelError(v27);
      }
      uint64_t v57 = v97;
      outlined destroy of UUID?(v53, &demangling cache variable for type metadata for DatagramChannelError?);
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v55, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of DatagramChannelError((uint64_t)v93);
      os_log_t v59 = v88;
      _os_log_impl(&dword_1B0DF7000, v88, (os_log_type_t)v87, "%s terminating reason: %s", (uint8_t *)v52, 0x16u);
      uint64_t v60 = v86;
      swift_arrayDestroy();
      MEMORY[0x1B3EA39E0](v60, -1, -1);
      MEMORY[0x1B3EA39E0](v52, -1, -1);

      uint64_t v27 = (uint64_t)v94;
LABEL_25:
      (*(void (**)(uint64_t))(*(void *)v2 + 248))(3);
      swift_storeEnumTagMultiPayload();
      char v61 = specialized static DatagramChannelError.== infix(_:_:)(v57, v27);
      outlined destroy of DatagramChannelError(v27);
      if (v61)
      {
        uint64_t v62 = 1;
        uint64_t v63 = v95;
      }
      else
      {
        uint64_t v63 = v95;
        outlined init with copy of DatagramChannelError(v57, v95);
        uint64_t v62 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v63, v62, 1, v46);
      PassthroughSubject.send(completion:)();
      uint64_t v64 = outlined destroy of UUID?(v63, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
      uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v64);
      if (v65)
      {
        AnyCancellable.cancel()();
        uint64_t v65 = swift_release();
      }
      uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 368))(v65);
      uint64_t v67 = v96;
      if (v66)
      {
        NWConnectionGroup.cancel()();
        uint64_t v66 = swift_release();
      }
      uint64_t v68 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 296);
      uint64_t v95 = v2;
      uint64_t v69 = v68(v66);
      if (MEMORY[0x1B3EA1DC0](v69, v7))
      {
        uint64_t v70 = 0;
        uint64_t v71 = (uint64_t *)&v67[*(int *)(v7 + 40)];
        uint64_t v72 = (void (**)(char *, uint64_t *, uint64_t))(v99 + 16);
        uint64_t v73 = (void (**)(char *, uint64_t))(v99 + 8);
        do
        {
          Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)();
          if (IsNativeType)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v99 + 16))(v67, v69+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(void *)(v99 + 72) * v70, v7);
            uint64_t v75 = v70 + 1;
            if (__OFADD__(v70, 1)) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v80 = _ArrayBuffer._getElementSlowPath(_:)();
            if (v89 != 8)
            {
              __break(1u);
              JUMPOUT(0x1B0EDBFFCLL);
            }
            uint64_t v100 = v80;
            (*v72)(v67, &v100, v7);
            swift_unknownObjectRelease();
            uint64_t v75 = v70 + 1;
            if (__OFADD__(v70, 1))
            {
LABEL_42:
              __break(1u);
              break;
            }
          }
          uint64_t v76 = (void (*)(uint64_t))*v71;
          outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(*v71);
          (*v73)(v67, v7);
          if (v76)
          {
            lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
            uint64_t v77 = swift_allocError();
            outlined init with copy of DatagramChannelError(v97, v78);
            v76(v77);
            _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v76);
            uint64_t v79 = (void *)v77;
            uint64_t v67 = v96;
          }
          ++v70;
        }
        while (v75 != MEMORY[0x1B3EA1DC0](v69, v7));
      }
      swift_bridgeObjectRelease();
      uint64_t v81 = v95;
      uint64_t v82 = (uint64_t (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v95 + 312))(&v100);
      type metadata accessor for Array();
      Array.removeAll(keepingCapacity:)(0);
      uint64_t v83 = v82(&v100, 0);
      uint64_t v84 = (void (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)v81 + 440))(v83);
      uint64_t result = v97;
      if (v84)
      {
        v84(v97);
        return _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v84);
      }
      return result;
  }
}

unint64_t DatagramChannelStream.deserializationFailedDescription.getter()
{
  _StringGuts.grow(_:)(31);
  uint64_t v1 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)v0 + 416))(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

void DatagramChannelStream.enqueueEgressMessage(_:)(uint64_t a1)
{
  Swift::String v2 = v1;
  uint64_t v4 = type metadata accessor for EgressMessage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v34 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (void *)v2[2];
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    JUMPOUT(0x1B0EDC658);
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t))(*v2 + 240);
  switch(v15(v14))
  {
    case 3u:
      swift_bridgeObjectRelease();
      goto LABEL_9;
    default:
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v17 = swift_bridgeObjectRelease();
      if (v16)
      {
LABEL_9:
        uint64_t v26 = *(void (**)(uint64_t))(a1 + *(int *)(v4 + 40));
        if (!v26) {
          return;
        }
        type metadata accessor for DatagramChannelError(0);
        lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
        uint64_t v27 = swift_allocError();
        swift_storeEnumTagMultiPayload();
        v26(v27);
        uint64_t v25 = (void *)v27;
        goto LABEL_11;
      }
      uint64_t v34 = 0x6465736F6C63;
      uint64_t v35 = v5;
      uint64_t v18 = (void (**)(uint64_t))(*v2 + 296);
      uint64_t v19 = *v18;
      (*v18)(v17);
      uint64_t v20 = MEMORY[0x1B3EA1DA0]();
      uint64_t v21 = swift_bridgeObjectRelease();
      if (__OFADD__(v20, 1)) {
        goto LABEL_23;
      }
      if (v2[14] < v20 + 1)
      {
        uint64_t v22 = *(void (**)(void))(a1 + *(int *)(v4 + 40));
        if (!v22) {
          return;
        }
        lazy protocol witness table accessor for type EgressMessageError and conformance EgressMessageError();
        uint64_t v23 = swift_allocError();
        *char v24 = 0;
        v22();
        uint64_t v25 = (void *)v23;
LABEL_11:

        return;
      }
      v19(v21);
      uint64_t v28 = MEMORY[0x1B3EA1DA0]();
      uint64_t v29 = swift_bridgeObjectRelease();
      if (v28)
      {
        char v30 = 0;
        uint64_t v31 = v35;
      }
      else
      {
        char v32 = v15(v29);
        char v30 = 1;
        uint64_t v31 = v35;
        switch(v32)
        {
          case 1:
            uint64_t v34 = 0x73696C6261747365;
            goto LABEL_18;
          case 2:
            goto LABEL_19;
          case 3:
            goto LABEL_18;
          default:
            uint64_t v34 = 0x6C616974696E69;
LABEL_18:
            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_19:
            swift_bridgeObjectRelease();
            break;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v7, a1, v4);
      Swift::String v33 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*v2 + 312))(v36);
      type metadata accessor for Array();
      Array.append(_:)();
      v33(v36, 0);
      if (v30) {
        DatagramChannelStream.sendNextEgressMessage()();
      }
      return;
  }
}

void DatagramChannelStream.ingressDatagramReceived(message:data:isComplete:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v56 = *v4;
  uint64_t v8 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v8 - 8);
  os_log_t v55 = (os_log_t)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void *)(v56 + 88);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v53 = *(void *)(v11 - 8);
  uint64_t v54 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v47 - v19;
  if ((a4 & 1) == 0)
  {
    uint64_t v51 = v15;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)log);
    swift_retain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      unint64_t v50 = a3;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v49 = a2;
      uint64_t v27 = v26;
      *(void *)&v58[0] = v26;
      uint64_t v52 = v18;
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v28 = DatagramChannelStream.description.getter();
      uint64_t v48 = v20;
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)v58);
      uint64_t v18 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v20 = v48;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v22, v23, "DatagramChannelStream: received message is incomplete %s", v25, 0xCu);
      swift_arrayDestroy();
      uint64_t v30 = v27;
      a2 = v49;
      MEMORY[0x1B3EA39E0](v30, -1, -1);
      uint64_t v31 = v25;
      a3 = v50;
      MEMORY[0x1B3EA39E0](v31, -1, -1);
    }
    else
    {

      swift_release();
    }
    uint64_t v15 = v51;
  }
  if (a3 >> 60 != 15)
  {
    uint64_t v52 = v18;
    uint64_t v59 = 0;
    memset(v58, 0, sizeof(v58));
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a2, a3);
    BinaryDecodingOptions.init()();
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v14, v10);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)log);
    Swift::String v33 = v52;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v20, v10);
    swift_retain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    LODWORD(v56) = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v48 = v20;
      uint64_t v37 = v36;
      uint64_t v38 = swift_slowAlloc();
      uint64_t v49 = a2;
      unint64_t v50 = a3;
      uint64_t v39 = v38;
      *(void *)&v58[0] = v38;
      *(_DWORD *)uint64_t v37 = 136315395;
      os_log_t v55 = v34;
      uint64_t v40 = DatagramChannelStream.description.getter();
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2081;
      uint64_t v42 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = *(void (**)(char *, uint64_t))(v15 + 8);
      v44(v33, v10);
      uint64_t v34 = v55;
      _os_log_impl(&dword_1B0DF7000, v55, (os_log_type_t)v56, "Channel %s received datagram %{private}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      uint64_t v45 = v39;
      a2 = v49;
      a3 = v50;
      MEMORY[0x1B3EA39E0](v45, -1, -1);
      uint64_t v46 = v37;
      uint64_t v20 = v48;
      MEMORY[0x1B3EA39E0](v46, -1, -1);
    }
    else
    {
      swift_release();
      uint64_t v44 = *(void (**)(char *, uint64_t))(v15 + 8);
      v44(v33, v10);
    }

    PassthroughSubject.send(_:)();
    outlined consume of Data?(a2, a3);
    v44(v20, v10);
  }
}

uint64_t DatagramChannelStream.sendNextEgressMessage()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v114 = v2;
  uint64_t v117 = type metadata accessor for DatagramChannelError(0);
  unint64_t v106 = *(void *)(v117 - 8);
  MEMORY[0x1F4188790](v117);
  unint64_t v116 = (unint64_t)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v115 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v112 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  os_log_type_t v110 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for DispatchQoS();
  uint64_t v109 = *(void *)(v111 - 8);
  MEMORY[0x1F4188790](v111);
  unint64_t v108 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v2 + 80);
  uint64_t v118 = *(void *)(v2 + 96);
  uint64_t v119 = v9;
  uint64_t v10 = type metadata accessor for EgressMessage();
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = v11[8];
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v113 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v98 - v15;
  MEMORY[0x1F4188790](v14);
  unint64_t v120 = (char *)&v98 - v17;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (uint64_t *)((char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = (void *)v1[2];
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4FBCBF0], v18);
  id v107 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  if (v22)
  {
    switch((*(unsigned __int8 (**)(uint64_t))(*v1 + 240))(v23))
    {
      case 3u:
        return swift_bridgeObjectRelease();
      default:
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if (v24) {
          return result;
        }
        aBlock[0] = (*(uint64_t (**)(uint64_t))(*v1 + 296))(result);
        type metadata accessor for Array();
        swift_getWitnessTable();
        char v26 = Collection.isEmpty.getter();
        uint64_t result = swift_bridgeObjectRelease();
        if (v26) {
          return result;
        }
        uint64_t v101 = v6;
        uint64_t v27 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*v1 + 312))(aBlock);
        swift_getWitnessTable();
        uint64_t v6 = (uint64_t)v120;
        RangeReplaceableCollection.removeFirst()();
        v27(aBlock, 0);
        if (one-time initialization token for log == -1) {
          goto LABEL_6;
        }
        goto LABEL_37;
    }
  }
  __break(1u);
LABEL_37:
  swift_once();
LABEL_6:
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)log);
  uint64_t v102 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  v102(v16, v6, v10);
  swift_retain();
  uint64_t v104 = v29;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  int v32 = v31;
  BOOL v33 = os_log_type_enabled(v30, v31);
  uint64_t v105 = v11;
  uint64_t v103 = v11 + 2;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    aBlock[0] = v100;
    *(_DWORD *)uint64_t v34 = 136315395;
    os_log_t v99 = v30;
    uint64_t v35 = DatagramChannelStream.description.getter();
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, aBlock);
    LODWORD(v98) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2081;
    uint64_t v37 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, aBlock);
    uint64_t v39 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = v11[1];
    uint64_t v41 = v10;
    ((void (*)(char *, uint64_t))v40)(v16, v10);
    uint64_t v30 = v99;
    _os_log_impl(&dword_1B0DF7000, v99, (os_log_type_t)v98, "Channel %s sending datagram %{private}s", (uint8_t *)v34, 0x16u);
    uint64_t v42 = v100;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v42, -1, -1);
    MEMORY[0x1B3EA39E0](v34, -1, -1);
  }
  else
  {
    uint64_t v39 = (char *)v6;
    swift_release();
    uint64_t v40 = v11[1];
    uint64_t v41 = v10;
    ((void (*)(char *, uint64_t))v40)(v16, v10);
  }

  uint64_t v43 = (*(uint64_t (**)(void))(*v1 + 368))();
  if (v43)
  {
    uint64_t v104 = v43;
    uint64_t v44 = v119;
    uint64_t v45 = Message.serializedData(partial:)();
    uint64_t v47 = v41;
    uint64_t v54 = 0;
    switch(v46 >> 62)
    {
      case 1uLL:
        LODWORD(v54) = HIDWORD(v45) - v45;
        if (__OFSUB__(HIDWORD(v45), v45))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          JUMPOUT(0x1B0EDE068);
        }
        uint64_t v54 = (int)v54;
LABEL_20:
        if (v54 >= v1[11])
        {
          uint64_t v73 = v45;
          unint64_t v74 = v46;
          uint64_t v75 = *(void (**)(void *))&v39[*(int *)(v41 + 40)];
          if (v75)
          {
            lazy protocol witness table accessor for type EgressMessageError and conformance EgressMessageError();
            uint64_t v76 = (void *)swift_allocError();
            unsigned char *v77 = 1;
            swift_retain();
            v75(v76);
            _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v75);
          }
          DatagramChannelStream.sendNextEgressMessage()(v45);
          swift_release();
          outlined consume of Data._Representation(v73, v74);
        }
        else
        {
          uint64_t v100 = v45;
          unint64_t v116 = v46;
          uint64_t v60 = *(void *)&v39[*(int *)(v41 + 36)];
          if (v60 && *(void *)(v60 + 16))
          {
            os_log_t v99 = v40;
            swift_bridgeObjectRetain();
            unint64_t v61 = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #1 in DatagramChannelStream.sendNextEgressMessage(), (uint64_t)v1, v60);
            swift_bridgeObjectRelease();
            dispatch_group_t v62 = dispatch_group_create();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
            uint64_t v115 = (char *)swift_allocBox();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v63, 1, 1, v117);
            unint64_t v106 = v61;
            uint64_t v64 = *(void *)(v61 + 16);
            if (v64)
            {
              uint64_t v98 = v41;
              uint64_t v65 = *(void *)(type metadata accessor for NWEndpoint() - 8);
              uint64_t v66 = v106 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
              uint64_t v117 = *(void *)(v65 + 72);
              swift_bridgeObjectRetain();
              uint64_t v67 = v104;
              uint64_t v68 = v100;
              uint64_t v69 = v62;
              uint64_t v71 = (uint64_t)v115;
              uint64_t v70 = v116;
              do
              {
                closure #2 in DatagramChannelStream.sendNextEgressMessage()(v66, v69, v67, v68, v70, v71, v1);
                v66 += v117;
                --v64;
              }
              while (v64);
              swift_bridgeObjectRelease_n();
              uint64_t v72 = v105;
              uint64_t v39 = v120;
              dispatch_group_t v62 = v69;
              uint64_t v47 = v98;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v72 = v105;
            }
            os_log_t v88 = v113;
            v102(v113, (uint64_t)v39, v47);
            unint64_t v89 = (*((unsigned __int8 *)v72 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v72 + 80);
            unint64_t v90 = (v12 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v91 = (char *)swift_allocObject();
            *((void *)v91 + 2) = v119;
            uint64_t v92 = v114;
            uint64_t v93 = v118;
            *((void *)v91 + 3) = *(void *)(v114 + 88);
            *((void *)v91 + 4) = v93;
            *((void *)v91 + 5) = *(void *)(v92 + 104);
            ((void (*)(char *, char *, uint64_t))v72[4])(&v91[v89], v88, v47);
            *(void *)&v91[v90] = v115;
            *(void *)&v91[(v90 + 15) & 0xFFFFFFFFFFFFFFF8] = v1;
            aBlock[4] = (uint64_t)partial apply for closure #3 in DatagramChannelStream.sendNextEgressMessage();
            aBlock[5] = (uint64_t)v91;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = (uint64_t)&block_descriptor_11;
            uint64_t v94 = _Block_copy(aBlock);
            swift_retain();
            swift_retain();
            uint64_t v95 = v108;
            static DispatchQoS.unspecified.getter();
            uint64_t v122 = MEMORY[0x1E4FBC860];
            lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            unint64_t v96 = v110;
            uint64_t v97 = v101;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_group.notify(qos:flags:queue:execute:)();
            swift_release();

            _Block_release(v94);
            outlined consume of Data._Representation(v100, v116);
            (*(void (**)(char *, uint64_t))(v112 + 8))(v96, v97);
            (*(void (**)(char *, uint64_t))(v109 + 8))(v95, v111);
            ((void (*)(char *, uint64_t))v99)(v120, v47);
            swift_release();
            return swift_release();
          }
          uint64_t v78 = type metadata accessor for NWEndpoint();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v115, 1, 1, v78);
          type metadata accessor for NWConnectionGroup.Message();
          outlined copy of Data._Representation(v100, v116);
          uint64_t v117 = static NWConnectionGroup.Message.default.getter();
          uint64_t v79 = v113;
          v102(v113, (uint64_t)v39, v47);
          uint64_t v80 = v105;
          unint64_t v81 = (*((unsigned __int8 *)v105 + 80) + 56) & ~(unint64_t)*((unsigned __int8 *)v105 + 80);
          uint64_t v82 = (char *)swift_allocObject();
          *((void *)v82 + 2) = v44;
          uint64_t v83 = v114;
          uint64_t v84 = v118;
          *((void *)v82 + 3) = *(void *)(v114 + 88);
          *((void *)v82 + 4) = v84;
          *((void *)v82 + 5) = *(void *)(v83 + 104);
          *((void *)v82 + 6) = v1;
          ((void (*)(char *, char *, uint64_t))v80[4])(&v82[v81], v79, v47);
          swift_retain();
          uint64_t v85 = v100;
          uint64_t v86 = (uint64_t)v115;
          unint64_t v87 = v116;
          NWConnectionGroup.send(content:to:message:completion:)();
          swift_release();
          swift_release();
          swift_release();
          outlined consume of Data._Representation(v85, v87);
          outlined consume of Data._Representation(v85, v87);
          outlined destroy of UUID?(v86, &demangling cache variable for type metadata for NWEndpoint?);
        }
        os_log_t v55 = v39;
        uint64_t v56 = v47;
        return ((uint64_t (*)(char *, uint64_t))v40)(v55, v56);
      case 2uLL:
        uint64_t v58 = *(void *)(v45 + 16);
        uint64_t v57 = *(void *)(v45 + 24);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v54 = v57 - v58;
        if (!v59) {
          goto LABEL_20;
        }
        goto LABEL_39;
      case 3uLL:
        goto LABEL_20;
      default:
        uint64_t v54 = BYTE6(v46);
        goto LABEL_20;
    }
  }
  swift_retain();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    unint64_t v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    aBlock[0] = v51;
    *(_DWORD *)unint64_t v50 = 136315138;
    uint64_t v52 = DatagramChannelStream.description.getter();
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v48, v49, "DatagramChannelStream.sendNextEgressMessage: channel not yet started %s", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v51, -1, -1);
    MEMORY[0x1B3EA39E0](v50, -1, -1);

    return ((uint64_t (*)(char *, uint64_t))v40)(v120, v41);
  }
  else
  {
    swift_release();

    os_log_t v55 = v39;
    uint64_t v56 = v41;
    return ((uint64_t (*)(char *, uint64_t))v40)(v55, v56);
  }
}

uint64_t closure #1 in DatagramChannelStream.sendNextEgressMessage()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v69 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v64 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v65 = (char *)&v56 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v13 = type metadata accessor for NWEndpoint();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v63 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v20 = *a1;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(v17);
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v66 = v20;
  if (v22 && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20), (v24 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v12, *(void *)(v21 + 56) + *(void *)(v14 + 72) * v23, v13);
    uint64_t v25 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    char v26 = v12;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v25 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    char v26 = v12;
    uint64_t v27 = 1;
  }
  uint64_t v67 = v25;
  v25(v26, v27, 1, v13);
  swift_bridgeObjectRelease();
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v28(v12, 1, v13) == 1)
  {
    uint64_t v62 = v3;
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for NWEndpoint?);
    if (*(unsigned char *)(a2 + 80))
    {
      uint64_t v29 = *(void *)(a2 + 24);
      uint64_t v30 = *(void *)(a2 + 32);
      uint64_t v57 = v28;
      uint64_t v58 = v29;
      uint64_t v32 = *(void *)(a2 + 64);
      unint64_t v31 = *(void *)(a2 + 72);
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(a2 + 56);
      uint64_t v60 = *(void *)(a2 + 48);
      uint64_t v33 = v60;
      unint64_t v61 = v34;
      outlined copy of DatagramEndpoint(v60, (uint64_t)v34, v32, v31, 1);
      outlined copy of Data?(v32, v31);
      uint64_t v59 = MEMORY[0x1B3EA1B00](v33, v34);
      uint64_t v58 = MEMORY[0x1B3EA1B00](v58, v30);
      if (v31 >> 60 == 15) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v32;
      }
      if (v31 >> 60 == 15) {
        unint64_t v36 = 0xC000000000000000;
      }
      else {
        unint64_t v36 = v31;
      }
      id v56 = self;
      outlined copy of Data?(v32, v31);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v35, v36);
      unint64_t v38 = (void *)v58;
      uint64_t v39 = (void *)v59;
      id v56 = objc_msgSend(v56, sel_createEndpointForSessionIDAlias_topic_participantIDAlias_salt_, v59, v58, v66, isa);

      uint64_t v40 = v65;
      NWEndpoint.init(_:)();
      outlined consume of Data?(v32, v31);
      unint64_t v41 = v31;
      uint64_t v42 = (uint64_t)v40;
      outlined consume of DatagramEndpoint(v60, (uint64_t)v61, v32, v41, 1);
      int v43 = v57(v40, 1, v13);
      uint64_t v44 = v67;
      if (v43 != 1)
      {
        unint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
        uint64_t v45 = v63;
        v61(v63, v42, v13);
        uint64_t v46 = (uint64_t)v64;
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v64, v45, v13);
        v44((char *)v46, 0, 1, v13);
        uint64_t v47 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)a2 + 336))(v68);
        specialized Dictionary.subscript.setter(v46, v66);
        v47(v68, 0);
        uint64_t v48 = v69;
        v61(v69, (uint64_t)v45, v13);
        return v44(v48, 0, 1, v13);
      }
    }
    else
    {
      uint64_t v42 = (uint64_t)v65;
      uint64_t v44 = v67;
      v67(v65, 1, 1, v13);
    }
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for NWEndpoint?);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)log);
    unint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      os_log_t v55 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_t v55 = 134217984;
      v68[0] = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B0DF7000, v53, v54, "Could not create an endpoint for participant: %llu", v55, 0xCu);
      MEMORY[0x1B3EA39E0](v55, -1, -1);
    }

    return v44(v69, 1, 1, v13);
  }
  else
  {
    unint64_t v50 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v50(v19, v12, v13);
    uint64_t v51 = v69;
    v50(v69, v19, v13);
    return v67(v51, 0, 1, v13);
  }
}

uint64_t closure #2 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v34 = a6;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a3;
  uint64_t v29 = a2;
  uint64_t v9 = *a7;
  unint64_t v31 = a7;
  uint64_t v32 = v9;
  uint64_t v33 = v9;
  uint64_t v10 = type metadata accessor for NWEndpoint();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v16;
  dispatch_group_enter(a2);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17(v16, a1, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  type metadata accessor for NWConnectionGroup.Message();
  uint64_t v28 = static NWConnectionGroup.Message.default.getter();
  v17(v13, a1, v10);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v19 = (v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v31;
  uint64_t v22 = v32;
  *(void *)(v20 + 16) = *(void *)(v32 + 80);
  uint64_t v23 = v34;
  *(_OWORD *)(v20 + 24) = *(_OWORD *)(v33 + 88);
  char v24 = v29;
  *(void *)(v20 + 40) = *(void *)(v22 + 104);
  *(void *)(v20 + 48) = v24;
  *(void *)(v20 + 56) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v20 + v18, v13, v10);
  *(void *)(v20 + v19) = v21;
  uint64_t v25 = v24;
  swift_retain();
  swift_retain();
  uint64_t v26 = (uint64_t)v30;
  NWConnectionGroup.send(content:to:message:completion:)();
  swift_release();
  swift_release();
  return outlined destroy of UUID?(v26, &demangling cache variable for type metadata for NWEndpoint?);
}

uint64_t closure #1 in closure #2 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, NSObject *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v48 = a5;
  uint64_t v44 = a4;
  uint64_t v47 = type metadata accessor for NWEndpoint();
  uint64_t v45 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v46 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for NWError();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_projectBox();
  dispatch_group_leave(a2);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v16, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1) {
    return outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for NWError?);
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v13, v20, v17);
  uint64_t v23 = type metadata accessor for DatagramChannelError(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v41 = *(void *)(v23 - 8);
  uint64_t v42 = v23;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v13, 0, 1, v23);
  swift_beginAccess();
  uint64_t v43 = v21;
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, v21, &demangling cache variable for type metadata for DatagramChannelError?);
  if (one-time initialization token for log != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)log);
  uint64_t v25 = v45;
  uint64_t v26 = v47;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v8, v44, v47);
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v44 = v20;
    uint64_t v30 = v29;
    uint64_t v40 = swift_slowAlloc();
    v50[0] = v40;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v31 = NWEndpoint.debugDescription.getter();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v47);
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v33 = DatagramChannelStream.description.getter();
    unint64_t v35 = v34;
    swift_release();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B0DF7000, v27, v28, "Failed to send egress message to endpoint: %s %s", (uint8_t *)v30, 0x16u);
    uint64_t v36 = v40;
    swift_arrayDestroy();
    MEMORY[0x1B3EA39E0](v36, -1, -1);
    uint64_t v37 = v30;
    uint64_t v20 = v44;
    MEMORY[0x1B3EA39E0](v37, -1, -1);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v26);

    swift_release();
  }
  uint64_t v38 = (uint64_t)v46;
  uint64_t v39 = v43;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v39, v38, &demangling cache variable for type metadata for DatagramChannelError?);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v38, 1, v42);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    DatagramChannelStream.terminate(error:)(v38);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return outlined destroy of DatagramChannelError(v38);
  }
  return result;
}

uint64_t closure #3 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EgressMessage();
  uint64_t v6 = *(void (**)(void *))(a1 + *(int *)(v5 + 40));
  if (v6)
  {
    uint64_t v7 = swift_projectBox();
    swift_beginAccess();
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v7, (uint64_t)v4, &demangling cache variable for type metadata for DatagramChannelError?);
    uint64_t v8 = type metadata accessor for DatagramChannelError(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
    {
      swift_retain();
      outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for DatagramChannelError?);
      uint64_t v9 = 0;
    }
    else
    {
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
      uint64_t v9 = (void *)swift_allocError();
      outlined init with take of DatagramChannelError((uint64_t)v4, v10);
      swift_retain();
    }
    v6(v9);

    uint64_t v5 = _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v6);
  }
  return DatagramChannelStream.sendNextEgressMessage()(v5);
}

uint64_t closure #4 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NWError();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v10, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for NWError?);
    uint64_t v15 = type metadata accessor for EgressMessage();
    uint64_t v16 = *(uint64_t (**)(void))(v34 + *(int *)(v15 + 40));
    if (v16) {
      uint64_t v15 = v16(0);
    }
    return DatagramChannelStream.sendNextEgressMessage()(v15);
  }
  else
  {
    uint64_t v33 = v4;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)log);
    swift_retain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v31 = v14;
      uint64_t v23 = v22;
      uint64_t v36 = v22;
      uint64_t v32 = v5;
      *(_DWORD *)uint64_t v21 = 136315138;
      v30[1] = v21 + 4;
      uint64_t v24 = DatagramChannelStream.description.getter();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B0DF7000, v19, v20, "Failed to multicast egress message %s", v21, 0xCu);
      swift_arrayDestroy();
      uint64_t v26 = v23;
      uint64_t v14 = v31;
      MEMORY[0x1B3EA39E0](v26, -1, -1);
      MEMORY[0x1B3EA39E0](v21, -1, -1);
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v7, v14, v11);
    swift_storeEnumTagMultiPayload();
    DatagramChannelStream.terminate(error:)((uint64_t)v7);
    uint64_t v27 = *(void (**)(void *))(v34 + *(int *)(type metadata accessor for EgressMessage() + 40));
    if (v27)
    {
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
      os_log_type_t v28 = (void *)swift_allocError();
      outlined init with copy of DatagramChannelError((uint64_t)v7, v29);
      v27(v28);
    }
    outlined destroy of DatagramChannelError((uint64_t)v7);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t protocol witness for AnyDatagramChannelStream.topic.getter in conformance DatagramChannelStream<A, B>()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for AnyDatagramChannelStream.channelGroupState.getter in conformance DatagramChannelStream<A, B>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t protocol witness for AnyDatagramChannelStream.channelGroupState.setter in conformance DatagramChannelStream<A, B>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

void (*protocol witness for AnyDatagramChannelStream.channelGroupState.modify in conformance DatagramChannelStream<A, B>(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 256))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for AnyDatagramChannelStream.channelGroupStatePublisher.getter in conformance DatagramChannelStream<A, B>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t protocol witness for AnyDatagramChannelStream.start(channelGroup:) in conformance DatagramChannelStream<A, B>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t protocol witness for AnyDatagramChannelStream.ingressDatagramReceived(message:data:isComplete:) in conformance DatagramChannelStream<A, B>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t protocol witness for AnyDatagramChannelStream.close(error:) in conformance DatagramChannelStream<A, B>()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t DatagramChannelStream.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = *(_OWORD *)(*(void *)v3 + 96);
  long long v12 = *(_OWORD *)(*(void *)v3 + 80);
  uint64_t v13 = v7;
  uint64_t v8 = type metadata accessor for DatagramChannelStream.OutputSubscription();
  swift_allocObject();
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized DatagramChannelStream.OutputSubscription.init<A>(channelStream:subscriber:)(v9, a1, a2, a3);
  uint64_t v14 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v12 = v10;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v12);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance DatagramChannelStream<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DatagramChannelStream.receive<A>(subscriber:)(a1, a2, a3);
}

uint64_t DatagramChannelStream.description.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  long long v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = 0;
  unint64_t v29 = 0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0x3D666C6573;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
  uint64_t v27 = v0;
  _print_unlocked<A, B>(_:_:)();
  uint64_t v9 = v28;
  unint64_t v10 = v29;
  uint64_t v28 = 0x3D6369706F74;
  unint64_t v29 = 0xE600000000000000;
  uint64_t v11 = *(void *)(v0 + 24);
  long long v12 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = v28;
  uint64_t v14 = (void *)v29;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + direct field offset for DatagramChannelStream.traceId, (uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    uint64_t v28 = v9;
    unint64_t v29 = v10;
    v16._uint64_t countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    uint64_t v17 = v15;
    unint64_t v18 = (unint64_t)v14;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    uint64_t v28 = 0x3D64496563617274;
    unint64_t v29 = 0xE800000000000000;
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = v28;
    unint64_t v21 = v29;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v28 = v9;
    unint64_t v29 = v10;
    v22._uint64_t countAndFlagsBits = 32;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = v15;
    v23._object = v14;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 32;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    uint64_t v17 = v20;
    unint64_t v18 = v21;
  }
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DatagramChannelStream<A, B>()
{
  return DatagramChannelStream.description.getter();
}

unint64_t specialized DatagramChannelGroupState.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DatagramChannelGroupState.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t outlined copy of DatagramEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    return outlined copy of Data?(a3, a4);
  }
  else
  {
    swift_unknownObjectRetain();
    return swift_retain();
  }
}

uint64_t sub_1B0EDFCA8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 240))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EDFCF4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 248))(*a1);
}

uint64_t sub_1B0EDFD3C()
{
  return 32;
}

__n128 sub_1B0EDFD48(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void partial apply for closure #1 in DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)()
{
}

uint64_t outlined destroy of DatagramChannelError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DatagramChannelError(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of DatagramEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (a5)
  {
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a3, a4);
  }
  else
  {
    swift_unknownObjectRelease();
    return swift_release();
  }
}

uint64_t type metadata accessor for DatagramChannelStream.OutputSubscription()
{
  return swift_getGenericMetadata();
}

uint64_t specialized DatagramChannelStream.OutputSubscription.init<A>(channelStream:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  long long v7 = *(void **)v4;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  uint64_t v35 = v4 + 24;
  *(void *)(v4 + 16) = v10;
  uint64_t v12 = *(void *)(v10 + direct field offset for DatagramChannelStream.output);
  uint64_t v32 = v10;
  uint64_t v33 = v12;
  v36[0] = v12;
  uint64_t v30 = *(void (**)(char *))(v8 + 16);
  v30(v11);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = (v13 + 64) & ~v13;
  uint64_t v25 = v14;
  uint64_t v28 = v13 | 7;
  uint64_t v29 = v14 + v9;
  uint64_t v15 = (char *)swift_allocObject();
  uint64_t v34 = v4;
  uint64_t v27 = v7[10];
  *((void *)v15 + 2) = v27;
  uint64_t v26 = v7[11];
  *((void *)v15 + 3) = v26;
  *((void *)v15 + 4) = a3;
  uint64_t v16 = v7[12];
  *((void *)v15 + 5) = v16;
  uint64_t v17 = v7[13];
  *((void *)v15 + 6) = v17;
  *((void *)v15 + 7) = a4;
  unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v18(&v15[v14], v11, a3);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v11, v31, a3);
  Swift::String v19 = (void *)swift_allocObject();
  uint64_t v20 = v26;
  v19[2] = v27;
  v19[3] = v20;
  uint64_t v19[4] = a3;
  v19[5] = v16;
  unint64_t v21 = (char *)v19 + v25;
  v19[6] = v17;
  v19[7] = a4;
  v18(v21, v11, a3);
  type metadata accessor for DatagramChannelError(255);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
  type metadata accessor for PassthroughSubject();
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v22 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  v36[3] = type metadata accessor for AnyCancellable();
  v36[4] = MEMORY[0x1E4F1AB08];
  swift_release();
  v36[0] = v22;
  uint64_t v23 = v35;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v36, v23, &demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  return v34;
}

unint64_t lazy protocol witness table accessor for type DatagramChannelGroupState and conformance DatagramChannelGroupState()
{
  unint64_t result = lazy protocol witness table cache variable for type DatagramChannelGroupState and conformance DatagramChannelGroupState;
  if (!lazy protocol witness table cache variable for type DatagramChannelGroupState and conformance DatagramChannelGroupState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatagramChannelGroupState and conformance DatagramChannelGroupState);
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in DatagramChannelStream<A, B>()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, (void (*)(uint64_t))type metadata accessor for DatagramChannelError);
}

uint64_t sub_1B0EE0234()
{
  return 32;
}

__n128 sub_1B0EE0240(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE024C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 264))();
}

uint64_t sub_1B0EE029C()
{
  return 32;
}

__n128 sub_1B0EE02A8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE02B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EE0308(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 304);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0EE0364()
{
  return 32;
}

__n128 sub_1B0EE0370(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE037C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EE03D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 328);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B0EE042C()
{
  return 32;
}

__n128 sub_1B0EE0438(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE0444@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EE0498(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 352);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0EE04F4()
{
  return 32;
}

__n128 sub_1B0EE0500(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE050C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 368))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EE0560(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 376);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0EE05BC()
{
  return 32;
}

__n128 sub_1B0EE05C8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE05D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 392))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EE0628(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 400);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B0EE0684()
{
  return 32;
}

__n128 sub_1B0EE0690(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE069C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 416))();
  *a2 = result;
  return result;
}

uint64_t sub_1B0EE06F0(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 424))(*a1);
}

uint64_t sub_1B0EE0740()
{
  return 32;
}

__n128 sub_1B0EE074C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B0EE0760()
{
  return 32;
}

__n128 sub_1B0EE076C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t dispatch thunk of AnyDatagramChannelStream.topic.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupState.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupState.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupStatePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.start(channelGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.ingressDatagramReceived(message:data:isComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.close(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

unsigned char *storeEnumTagSinglePayload for DatagramChannelGroupState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0EE08E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DatagramChannelGroupState()
{
  return &type metadata for DatagramChannelGroupState;
}

void type metadata completion function for DatagramChannelStream()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<DatagramChannelGroupState>();
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for DatagramChannelStream()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for DatagramChannelStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DatagramChannelStream);
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of DatagramChannelStream.$channelGroupState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of DatagramChannelStream.$channelGroupState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of DatagramChannelStream.$channelGroupState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupStatePublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of DatagramChannelStream.sendQueue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of DatagramChannelStream.sendQueue.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of DatagramChannelStream.sendQueue.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of DatagramChannelStream.participantUnicastEndpoints.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of DatagramChannelStream.participantUnicastEndpoints.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of DatagramChannelStream.participantUnicastEndpoints.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of DatagramChannelStream.cancellable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of DatagramChannelStream.cancellable.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of DatagramChannelStream.cancellable.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroup.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroup.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroup.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of DatagramChannelStream.inputSubscriptionCancellable.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of DatagramChannelStream.inputSubscriptionCancellable.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of DatagramChannelStream.inputSubscriptionCancellable.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDeserializationFailedCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDeserializationFailedCount.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDeserializationFailedCount.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 432))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelTerminatedHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelTerminatedHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelTerminatedHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of DatagramChannelStream.__allocating_init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)()
{
  return (*(uint64_t (**)(void))(v0 + 464))();
}

uint64_t dispatch thunk of DatagramChannelStream.start(channelGroup:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of DatagramChannelStream.close(error:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDatagramReceived(message:data:isComplete:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

void type metadata accessor for Published<DatagramChannelGroupState>()
{
  if (!lazy cache variable for type metadata for Published<DatagramChannelGroupState>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<DatagramChannelGroupState>);
    }
  }
}

uint64_t type metadata completion function for DatagramChannelStream.OutputSubscription()
{
  return swift_initClassMetadata2();
}

uint64_t base witness table accessor for Cancellable in DatagramChannelStream<A, B>.OutputSubscription()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in DatagramChannelStream<A, B>.OutputSubscription()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type EgressMessageError and conformance EgressMessageError()
{
  unint64_t result = lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError;
  if (!lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError;
  if (!lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError);
  }
  return result;
}

uint64_t sub_1B0EE1128()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DatagramChannelError) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed DatagramChannelError) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with copy of DatagramChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatagramChannelError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DatagramChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatagramChannelError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B0EE1280()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for EgressMessage() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(*(void *)v2 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v4 + v2[12])) {
    swift_release();
  }
  return MEMORY[0x1F4186498](v0, v4 + v5, v3 | 7);
}

uint64_t partial apply for closure #4 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for EgressMessage() - 8);
  uint64_t v4 = *(uint64_t **)(v1 + 48);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return closure #4 in DatagramChannelStream.sendNextEgressMessage()(a1, v4, v5);
}

uint64_t partial apply for closure #1 in DatagramChannelStream.sendNextEgressMessage()@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return closure #1 in DatagramChannelStream.sendNextEgressMessage()(a1, v2, a2);
}

uint64_t sub_1B0EE142C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for EgressMessage() - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(*(void *)v2 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v4 + v2[12])) {
    swift_release();
  }
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t partial apply for closure #3 in DatagramChannelStream.sendNextEgressMessage()()
{
  uint64_t v1 = *(void *)(type metadata accessor for EgressMessage() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #3 in DatagramChannelStream.sendNextEgressMessage()(v2);
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B0EE1654()
{
  uint64_t v1 = type metadata accessor for NWEndpoint();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in closure #2 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for NWEndpoint() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(NSObject **)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #2 in DatagramChannelStream.sendNextEgressMessage()(a1, v5, v6, (char *)(v1 + v4), v7);
}

uint64_t static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)()
{
  return Dictionary.compactMapValues<A>(_:)();
}

uint64_t closure #1 in static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8);
  uint64_t v11 = swift_bridgeObjectRetain();
  v10(v11, a1, a2);
  uint64_t v12 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v9, a1);
    uint64_t v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, v13, 1, a1);
}

uint64_t partial apply for closure #1 in static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *CPAppPolicy.GlobalAutoSharePlayToggle.UserDefaultsKey.unsafeMutableAddressor()
{
  return &static CPAppPolicy.GlobalAutoSharePlayToggle.UserDefaultsKey;
}

unint64_t static CPAppPolicy.GlobalAutoSharePlayToggle.UserDefaultsKey.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t CPAppPolicy.GlobalAutoSharePlayToggle.enabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t CPAppPolicy.GlobalAutoSharePlayToggle.enabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CPAppPolicy.GlobalAutoSharePlayToggle.enabled.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t CPAppPolicy.GlobalAutoSharePlayToggle.description.getter(char a1)
{
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000029;
}

CopresenceCore::CPAppPolicy::GlobalAutoSharePlayToggle __swiftcall CPAppPolicy.GlobalAutoSharePlayToggle.init(enabled:)(Swift::Bool enabled)
{
  return (CopresenceCore::CPAppPolicy::GlobalAutoSharePlayToggle)enabled;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CPAppPolicy.GlobalAutoSharePlayToggle()
{
  return CPAppPolicy.GlobalAutoSharePlayToggle.description.getter(*v0);
}

CopresenceCore::CPAppPolicy::AuthorizedBundles::SchemaVersion_optional __swiftcall CPAppPolicy.AuthorizedBundles.SchemaVersion.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    v1.value = CopresenceCore_CPAppPolicy_AuthorizedBundles_SchemaVersion_one;
  }
  else {
    v1.value = CopresenceCore_CPAppPolicy_AuthorizedBundles_SchemaVersion_unknownDefault;
  }
  if (rawValue == -1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t CPAppPolicy.AuthorizedBundles.SchemaVersion.rawValue.getter(char a1)
{
  if (a1) {
    return 1;
  }
  else {
    return -1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 1;
  }
  else {
    Swift::UInt v2 = -1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  if (*v0) {
    Swift::UInt v1 = 1;
  }
  else {
    Swift::UInt v1 = -1;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 1;
  }
  else {
    Swift::UInt v2 = -1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == -1) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1;
  if (!*v1) {
    uint64_t v2 = -1;
  }
  *a1 = v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t CPAppPolicy.AuthorizedBundles.version.getter()
{
  return *v0;
}

uint64_t CPAppPolicy.AuthorizedBundles.version.setter(uint64_t result)
{
  *int v1 = result;
  return result;
}

uint64_t (*CPAppPolicy.AuthorizedBundles.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CPAppPolicy.AuthorizedBundles.bundleIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CPAppPolicy.AuthorizedBundles.authorized.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t CPAppPolicy.AuthorizedBundles.authorized.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*CPAppPolicy.AuthorizedBundles.authorized.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CPAppPolicy.AuthorizedBundles.allowedHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CPAppPolicy.AuthorizedBundles.allowedHandles.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CPAppPolicy.AuthorizedBundles.allowedHandles.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CPAppPolicy.AuthorizedBundles.description.getter()
{
  _StringGuts.grow(_:)(83);
  v1._uint64_t countAndFlagsBits = 0xD000000000000030;
  v1._object = (void *)0x80000001B115E540;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x69726F6874756120;
  v5._object = (void *)0xEC0000003D64657ALL;
  String.append(_:)(v5);
  if (*(unsigned char *)(v0 + 24)) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 24)) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001B115E580;
  v9._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  type metadata accessor for Date();
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t default argument 3 of CPAppPolicy.AuthorizedBundles.init(version:bundleIdentifier:authorized:allowedHandles:)()
{
  return MEMORY[0x1E4FBC868];
}

uint64_t CPAppPolicy.AuthorizedBundles.init(version:bundleIdentifier:authorized:allowedHandles:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

void *CPAppPolicy.ContactsChangeHistoryToken.UserDefaultsKey.unsafeMutableAddressor()
{
  return &static CPAppPolicy.ContactsChangeHistoryToken.UserDefaultsKey;
}

unint64_t static CPAppPolicy.ContactsChangeHistoryToken.UserDefaultsKey.getter()
{
  return 0xD000000000000026;
}

uint64_t CPAppPolicy.ContactsChangeHistoryToken.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

unint64_t CPAppPolicy.ContactsChangeHistoryToken.description.getter()
{
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v1 = [(objc_class *)isa tu_URLSafeBase64EncodedString];

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v2 = String.init<A>(reflecting:)();
    unint64_t v4 = v3;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v2 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD00000000000002DLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CPAppPolicy.ContactsChangeHistoryToken()
{
  return CPAppPolicy.ContactsChangeHistoryToken.description.getter();
}

uint64_t CPAppPolicy.ContactHandles.contactIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t CPAppPolicy.ContactHandles.normalizedHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CPAppPolicy.ContactHandles.description.getter(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v7 = (unint64_t *)(a3 + 40);
    unint64_t v8 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      unint64_t v9 = *(v7 - 1);
      unint64_t v10 = *v7;
      swift_bridgeObjectRetain_n();
      uint64_t v11 = specialized Data.init<A>(_:)(v9, v10);
      unint64_t v13 = v12;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v11, v13);
      id v15 = [(objc_class *)isa tu_URLSafeBase64EncodedString];

      if (v15)
      {
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        }
        unint64_t v20 = v8[2];
        unint64_t v19 = v8[3];
        if (v20 >= v19 >> 1) {
          unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v8);
        }
        _OWORD v8[2] = v20 + 1;
        unint64_t v21 = &v8[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
    uint64_t v4 = a1;
    unint64_t v3 = a2;
  }
  else
  {
    unint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  }
  _StringGuts.grow(_:)(70);
  v22._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v22._object = (void *)0x80000001B115E5D0;
  String.append(_:)(v22);
  swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = v4;
  v23._object = v3;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._object = (void *)0x80000001B115E600;
  v24._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = MEMORY[0x1B3EA1D20](v8, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 62;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CPAppPolicy.ContactHandles()
{
  return CPAppPolicy.ContactHandles.description.getter(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t CPAppPolicy.AuthorizedBundles.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(a1, v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles?);
}

uint64_t CPAppPolicy.AuthorizedBundles.dictionaryRepresentation.getter()
{
  uint64_t v1 = v0;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v0, (uint64_t)&v15, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion?);
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)&v15, (uint64_t)&v16, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion?);
  uint64_t v2 = MEMORY[0x1E4FBC868];
  if (v16 != 2)
  {
    uint64_t v14 = &type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion;
    LOBYTE(v13) = v16 & 1;
    outlined init with take of Any(&v13, v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v14 = (ValueMetadata *)MEMORY[0x1E4FBB1A0];
  *(void *)&long long v13 = v4;
  *((void *)&v13 + 1) = v5;
  outlined init with take of Any(&v13, v12);
  swift_bridgeObjectRetain();
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000010, 0x80000001B115DFC0, v6);
  swift_bridgeObjectRelease();
  char v7 = *(unsigned char *)(v1 + 24);
  uint64_t v14 = (ValueMetadata *)MEMORY[0x1E4FBB390];
  LOBYTE(v13) = v7;
  outlined init with take of Any(&v13, v12);
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x7A69726F68747561, 0xEA00000000006465, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v1 + 32);
  uint64_t v14 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
  *(void *)&long long v13 = v9;
  outlined init with take of Any(&v13, v12);
  swift_bridgeObjectRetain();
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x486465776F6C6C61, 0xEE0073656C646E61, v10);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance CPAppPolicy.AuthorizedBundles@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(a1, v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles?);
}

uint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance CPAppPolicy.AuthorizedBundles()
{
  return CPAppPolicy.AuthorizedBundles.dictionaryRepresentation.getter();
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance CPAppPolicy.AuthorizedBundles(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t CPAppPolicy.ContactHandles.dictionaryRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v9 = a1;
  *((void *)&v9 + 1) = a2;
  outlined init with take of Any(&v9, v8);
  swift_bridgeObjectRetain();
  uint64_t v4 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 0xD000000000000011, 0x80000001B115E620, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)&long long v9 = a3;
  outlined init with take of Any(&v9, v8);
  swift_bridgeObjectRetain();
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 0xD000000000000011, 0x80000001B115E640, v6);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance CPAppPolicy.ContactHandles@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized CPAppPolicy.ContactHandles.init(dictionary:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance CPAppPolicy.ContactHandles()
{
  return CPAppPolicy.ContactHandles.dictionaryRepresentation.getter(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance CPAppPolicy.ContactHandles(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance EmptyPresenceContext(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance ActivityListPresenceContext(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_18;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6F6973726576, 0xE700000000000000);
  if ((v5 & 1) != 0
    && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v20), swift_dynamicCast()))
  {
    uint64_t v6 = v18;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v6 = 2;
    if (!*(void *)(a1 + 16))
    {
LABEL_18:
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001B115DFC0);
  if ((v8 & 1) == 0) {
    goto LABEL_18;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v20);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v9 = v19;
  if (!*(void *)(a1 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v10 = v18;
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x7A69726F68747561, 0xEA00000000006465);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v20);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  uint64_t v13 = v18;
  if (*(void *)(a1 + 16)
    && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x486465776F6C6C61, 0xEE0073656C646E61), (v15 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v14, (uint64_t)&v20);
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v21 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v20);
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
  if (swift_dynamicCast())
  {
    uint64_t v17 = v18;
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t result = swift_bridgeObjectRelease_n();
LABEL_19:
  uint64_t v6 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  uint64_t v13 = 0;
  uint64_t v17 = 0;
LABEL_20:
  *a2 = v6;
  a2[1] = v10;
  a2[2] = v9;
  a2[3] = v13;
  a2[4] = v17;
  return result;
}

uint64_t specialized CPAppPolicy.ContactHandles.init(dictionary:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_7;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000001B115E620);
  if ((v3 & 1) == 0) {
    goto LABEL_7;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v9);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v4 = v8;
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000001B115E640);
    if (v6)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v10 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v9);
LABEL_7:
    swift_bridgeObjectRelease();
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return v4;
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

unint64_t lazy protocol witness table accessor for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  unint64_t result = lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion;
  if (!lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion;
  if (!lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion);
  }
  return result;
}

uint64_t dispatch thunk of DictionaryConvertible.init(dictionary:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of DictionaryConvertible.dictionaryRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for CPAppPolicy()
{
  return &type metadata for CPAppPolicy;
}

uint64_t getEnumTagSinglePayload for CPAppPolicy.GlobalAutoSharePlayToggle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CPAppPolicy.GlobalAutoSharePlayToggle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0EE2E8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.GlobalAutoSharePlayToggle()
{
  return &type metadata for CPAppPolicy.GlobalAutoSharePlayToggle;
}

uint64_t initializeWithCopy for CPAppPolicy.AuthorizedBundles(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CPAppPolicy.AuthorizedBundles(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CPAppPolicy.AuthorizedBundles(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CPAppPolicy.AuthorizedBundles()
{
  return &type metadata for CPAppPolicy.AuthorizedBundles;
}

unsigned char *storeEnumTagSinglePayload for CPAppPolicy.AuthorizedBundles.SchemaVersion(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B0EE30C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  return &type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion;
}

uint64_t *initializeBufferWithCopyOfBuffer for CPAppPolicy.ContactsChangeHistoryToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for CPAppPolicy.ContactsChangeHistoryToken(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for CPAppPolicy.ContactsChangeHistoryToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for CPAppPolicy.ContactsChangeHistoryToken(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CPAppPolicy.ContactsChangeHistoryToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CPAppPolicy.ContactsChangeHistoryToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.ContactsChangeHistoryToken()
{
  return &type metadata for CPAppPolicy.ContactsChangeHistoryToken;
}

uint64_t destroy for CPAppPolicy.ContactHandles()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for CPAppPolicy.ContactHandles(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CPAppPolicy.ContactHandles(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CPAppPolicy.ContactHandles(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CPAppPolicy.ContactHandles(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CPAppPolicy.ContactHandles(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.ContactHandles()
{
  return &type metadata for CPAppPolicy.ContactHandles;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v37 = a1 + 64;
  uint64_t v35 = MEMORY[0x1E4FBC868];
  uint64_t v45 = MEMORY[0x1E4FBC868];
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & v2;
  int64_t v36 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v38 = 0;
  uint64_t v34 = result;
  while (1)
  {
    if (v5)
    {
      uint64_t v39 = (v5 - 1) & v5;
      unint64_t v7 = __clz(__rbit64(v5)) | (v38 << 6);
      goto LABEL_6;
    }
    int64_t v17 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v17 >= v36) {
      goto LABEL_39;
    }
    unint64_t v18 = *(void *)(v37 + 8 * v17);
    int64_t v19 = v38 + 1;
    if (!v18)
    {
      int64_t v19 = v38 + 2;
      if (v38 + 2 >= v36) {
        goto LABEL_39;
      }
      unint64_t v18 = *(void *)(v37 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v38 + 3;
        if (v38 + 3 >= v36) {
          goto LABEL_39;
        }
        unint64_t v18 = *(void *)(v37 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v38 + 4;
          if (v38 + 4 >= v36) {
            goto LABEL_39;
          }
          unint64_t v18 = *(void *)(v37 + 8 * v19);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_25:
    int64_t v38 = v19;
    uint64_t v39 = (v18 - 1) & v18;
    unint64_t v7 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_6:
    int v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = *(void *)(*(void *)(v1 + 56) + 8 * v7);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(v11, v40);
    char v13 = v40[0];
    uint64_t v12 = v40[1];
    uint64_t v15 = v40[2];
    char v14 = v41;
    uint64_t v16 = v42;
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v40, (uint64_t)v43, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles?);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    uint64_t v21 = v35;
    unint64_t v22 = *(void *)(v35 + 16);
    if (*(void *)(v35 + 24) <= v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22 + 1, 1);
      uint64_t v21 = v45;
    }
    uint64_t v35 = v21;
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = v35 + 64;
    uint64_t v24 = -1 << *(unsigned char *)(v35 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v35 + 64 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      uint64_t v1 = v34;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v23 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_38;
        }
      }
      goto LABEL_41;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v35 + 64 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v1 = v34;
LABEL_38:
    *(void *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v35 + 48) + 16 * v27);
    *uint64_t v32 = v9;
    v32[1] = v10;
    uint64_t v33 = *(void *)(v35 + 56) + 40 * v27;
    *(unsigned char *)uint64_t v33 = v13;
    *(void *)(v33 + 8) = v12;
    *(void *)(v33 + 16) = v15;
    *(unsigned char *)(v33 + 24) = v14 & 1;
    *(void *)(v33 + 32) = v16;
    ++*(void *)(v35 + 16);
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v5 = v39;
  }
  int64_t v20 = v38 + 5;
  if (v38 + 5 >= v36)
  {
LABEL_39:
    outlined consume of [String : ()].Iterator._Variant();
    return v35;
  }
  unint64_t v18 = *(void *)(v37 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v38 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v36) {
      goto LABEL_39;
    }
    unint64_t v18 = *(void *)(v37 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;

  uint64_t v2 = a1 + 64;
  uint64_t v37 = MEMORY[0x1E4FBC868];
  uint64_t v40 = MEMORY[0x1E4FBC868];
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v38 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v39 = 0;
  int64_t v36 = v2;
  if (!v5) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  int v8 = v7 | (v39 << 6);
  while (1)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    char v13 = specialized CPAppPolicy.ContactHandles.init(dictionary:)(v12);
    if (v14)
    {
      int64_t v20 = v13;
      uint64_t v21 = v14;
      unint64_t v22 = v15;
      uint64_t v23 = v37;
      uint64_t v24 = *(void *)(v37 + 16);
      if (*(void *)(v37 + 24) <= v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24 + 1, 1);
        uint64_t v23 = v40;
      }
      uint64_t v37 = v23;
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = v37 + 64;
      unint64_t v26 = -1 << *(unsigned char *)(v37 + 32);
      unint64_t v27 = result & ~v26;
      char v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v37 + 64 + 8 * (v27 >> 6))) == 0)
      {
        BOOL v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v26) >> 6;
        uint64_t v2 = v36;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          uint64_t v32 = v28 == v31;
          if (v28 == v31) {
            char v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v25 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_34;
          }
        }
        goto LABEL_38;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v37 + 64 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v2 = v36;
LABEL_34:
      *(void *)(v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t v34 = (void *)(*(void *)(v37 + 48) + 16 * v29);
      *uint64_t v34 = v11;
      v34[1] = v10;
      uint64_t v35 = (uint64_t *)(*(void *)(v37 + 56) + 24 * v29);
      *uint64_t v35 = v20;
      v35[1] = v21;
      uint64_t v35[2] = v22;
      ++*(void *)(v37 + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_5;
      }
    }
LABEL_8:
    uint64_t v16 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v38) {
      goto LABEL_36;
    }
    int64_t v17 = *(void *)(v2 + 8 * v16);
    unint64_t v18 = v39 + 1;
    if (!v17)
    {
      unint64_t v18 = v39 + 2;
      if (v39 + 2 >= v38) {
        goto LABEL_36;
      }
      int64_t v17 = *(void *)(v2 + 8 * v18);
      if (!v17)
      {
        unint64_t v18 = v39 + 3;
        if (v39 + 3 >= v38) {
          goto LABEL_36;
        }
        int64_t v17 = *(void *)(v2 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v17 - 1) & v17;
    int v8 = __clz(__rbit64(v17)) + (v18 << 6);
    uint64_t v39 = v18;
  }
  int64_t v19 = v39 + 4;
  if (v39 + 4 >= v38)
  {
LABEL_36:
    outlined consume of [String : ()].Iterator._Variant();
    return v37;
  }
  int64_t v17 = *(void *)(v2 + 8 * v19);
  if (v17)
  {
    unint64_t v18 = v39 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v38) {
      goto LABEL_36;
    }
    int64_t v17 = *(void *)(v2 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v3 = a1 + 64;
  uint64_t v31 = MEMORY[0x1E4FBC868];
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    unint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    unint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  unint64_t v7 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  uint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8 * v11) + 16))
    {
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      int64_t v17 = v16[1];
      BOOL v30 = *v16;
      unint64_t v18 = *(void *)(v2 + 16);
      if (*(void *)(v2 + 24) <= v18)
      {
        int64_t v19 = v18 + 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, 1);
        uint64_t v2 = v31;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      int64_t v20 = v2 + 64;
      uint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v2 + 64 + 8 * (v22 >> 6))) == 0)
      {
        unint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          unint64_t v27 = v23 == v26;
          if (v23 == v26) {
            uint64_t v23 = 0;
          }
          v25 |= v27;
          char v28 = *(void *)(v20 + 8 * v23);
          if (v28 != -1)
          {
            uint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_35;
          }
        }
        goto LABEL_39;
      }
      uint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v2 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_35:
      *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      unint64_t v29 = (void *)(*(void *)(v2 + 48) + 16 * v24);
      *unint64_t v29 = v30;
      v29[1] = v17;
      ++*(void *)(v2 + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_5;
      }
    }
LABEL_8:
    uint64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v12 >= v7) {
      goto LABEL_37;
    }
    char v13 = *(void *)(v3 + 8 * v12);
    char v14 = v9 + 1;
    if (!v13)
    {
      char v14 = v9 + 2;
      if (v9 + 2 >= v7) {
        goto LABEL_37;
      }
      char v13 = *(void *)(v3 + 8 * v14);
      if (!v13)
      {
        char v14 = v9 + 3;
        if (v9 + 3 >= v7) {
          goto LABEL_37;
        }
        char v13 = *(void *)(v3 + 8 * v14);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    uint64_t v9 = v14;
  }
  uint64_t v15 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_37:
    outlined consume of [String : ()].Iterator._Variant();
    return v2;
  }
  char v13 = *(void *)(v3 + 8 * v15);
  if (v13)
  {
    char v14 = v9 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    char v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v7) {
      goto LABEL_37;
    }
    char v13 = *(void *)(v3 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;

  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v3 = a1 + 64;
  uint64_t v34 = MEMORY[0x1E4FBC868];
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    unint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    unint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  uint64_t v33 = (unint64_t)(63 - v4) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int v8 = 0;
  uint64_t v32 = v3;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  uint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    char v13 = *v11;
    uint64_t v12 = v11[1];
    char v14 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v15 = specialized ActivityListPresenceContext.init(dictionary:)(v14);
    if (v15)
    {
      int64_t v20 = v15;
      uint64_t v21 = *(void *)(v2 + 16);
      if (*(void *)(v2 + 24) <= v21)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21 + 1, 1);
        uint64_t v2 = v34;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v22 = v2 + 64;
      uint64_t v23 = -1 << *(unsigned char *)(v2 + 32);
      uint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6))) == 0)
      {
        unint64_t v27 = 0;
        char v28 = (unint64_t)(63 - v23) >> 6;
        uint64_t v3 = v32;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          unint64_t v29 = v25 == v28;
          if (v25 == v28) {
            unint64_t v25 = 0;
          }
          v27 |= v29;
          BOOL v30 = *(void *)(v22 + 8 * v25);
          if (v30 != -1)
          {
            unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_34;
          }
        }
        goto LABEL_38;
      }
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v2 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v3 = v32;
LABEL_34:
      *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      uint64_t v31 = (void *)(*(void *)(v2 + 48) + 16 * v26);
      *uint64_t v31 = v13;
      v31[1] = v12;
      *(void *)(*(void *)(v2 + 56) + 8 * v26) = v20;
      ++*(void *)(v2 + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_5;
      }
    }
LABEL_8:
    uint64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v33) {
      goto LABEL_36;
    }
    int64_t v17 = *(void *)(v3 + 8 * v16);
    unint64_t v18 = v8 + 1;
    if (!v17)
    {
      unint64_t v18 = v8 + 2;
      if (v8 + 2 >= v33) {
        goto LABEL_36;
      }
      int64_t v17 = *(void *)(v3 + 8 * v18);
      if (!v17)
      {
        unint64_t v18 = v8 + 3;
        if (v8 + 3 >= v33) {
          goto LABEL_36;
        }
        int64_t v17 = *(void *)(v3 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v17 - 1) & v17;
    uint64_t v10 = __clz(__rbit64(v17)) + (v18 << 6);
    int v8 = v18;
  }
  int64_t v19 = v8 + 4;
  if (v8 + 4 >= v33)
  {
LABEL_36:
    outlined consume of [String : ()].Iterator._Variant();
    return v2;
  }
  int64_t v17 = *(void *)(v3 + 8 * v19);
  if (v17)
  {
    unint64_t v18 = v8 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v33) {
      goto LABEL_36;
    }
    int64_t v17 = *(void *)(v3 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  char v43[16];
  uint64_t v44;
  uint64_t v45;

  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v37 = a1 + 64;
  uint64_t v35 = MEMORY[0x1E4FBC868];
  uint64_t v45 = MEMORY[0x1E4FBC868];
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & v2;
  int64_t v36 = (unint64_t)(63 - v3) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v38 = 0;
  uint64_t v34 = result;
  while (1)
  {
    if (v5)
    {
      uint64_t v39 = (v5 - 1) & v5;
      unint64_t v7 = __clz(__rbit64(v5)) | (v38 << 6);
      goto LABEL_6;
    }
    int64_t v17 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v17 >= v36) {
      goto LABEL_39;
    }
    unint64_t v18 = *(void *)(v37 + 8 * v17);
    int64_t v19 = v38 + 1;
    if (!v18)
    {
      int64_t v19 = v38 + 2;
      if (v38 + 2 >= v36) {
        goto LABEL_39;
      }
      unint64_t v18 = *(void *)(v37 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v38 + 3;
        if (v38 + 3 >= v36) {
          goto LABEL_39;
        }
        unint64_t v18 = *(void *)(v37 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v38 + 4;
          if (v38 + 4 >= v36) {
            goto LABEL_39;
          }
          unint64_t v18 = *(void *)(v37 + 8 * v19);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_25:
    int64_t v38 = v19;
    uint64_t v39 = (v18 - 1) & v18;
    unint64_t v7 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_6:
    int v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v7);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    uint64_t v11 = *(void *)(*(void *)(v1 + 56) + 8 * v7);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(v11, v40);
    char v13 = v40[0];
    uint64_t v12 = v40[1];
    uint64_t v15 = v40[2];
    char v14 = v41;
    uint64_t v16 = v42;
    outlined init with take of CPAppPolicy.AuthorizedBundles?((uint64_t)v40, (uint64_t)v43);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    uint64_t v21 = v35;
    unint64_t v22 = *(void *)(v35 + 16);
    if (*(void *)(v35 + 24) <= v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22 + 1, 1);
      uint64_t v21 = v45;
    }
    uint64_t v35 = v21;
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = v35 + 64;
    uint64_t v24 = -1 << *(unsigned char *)(v35 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v35 + 64 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      uint64_t v1 = v34;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v23 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_38;
        }
      }
      goto LABEL_41;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v35 + 64 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v1 = v34;
LABEL_38:
    *(void *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v35 + 48) + 16 * v27);
    *uint64_t v32 = v10;
    v32[1] = v9;
    uint64_t v33 = *(void *)(v35 + 56) + 40 * v27;
    *(unsigned char *)uint64_t v33 = v13;
    *(void *)(v33 + 8) = v12;
    *(void *)(v33 + 16) = v15;
    *(unsigned char *)(v33 + 24) = v14 & 1;
    *(void *)(v33 + 32) = v16;
    ++*(void *)(v35 + 16);
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v5 = v39;
  }
  int64_t v20 = v38 + 5;
  if (v38 + 5 >= v36)
  {
LABEL_39:
    outlined consume of [String : ()].Iterator._Variant();
    return v35;
  }
  unint64_t v18 = *(void *)(v37 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v38 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v36) {
      goto LABEL_39;
    }
    unint64_t v18 = *(void *)(v37 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2) {
    a1 = qword_1B1141658[a1];
  }
  if (a4) {
    a3 = qword_1B1141658[a3];
  }
  return a1 == a3;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD00000000000002CLL;
  unint64_t v3 = 0x80000001B115A740;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD00000000000002CLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000032;
      unint64_t v6 = "com.apple.group-activities.conversationmanagerhost";
      goto LABEL_5;
    case 2:
      unint64_t v5 = 0xD000000000000027;
      unint64_t v6 = "com.apple.SharePlay.GroupSessionService";
      goto LABEL_5;
    case 3:
      unint64_t v6 = "com.apple.SharePlay.NearbyInvitationsService";
LABEL_5:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x80000001B115A740;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xD000000000000032;
      int v8 = "com.apple.group-activities.conversationmanagerhost";
      goto LABEL_10;
    case 2:
      unint64_t v2 = 0xD000000000000027;
      int v8 = "com.apple.SharePlay.GroupSessionService";
      goto LABEL_10;
    case 3:
      int v8 = "com.apple.SharePlay.NearbyInvitationsService";
LABEL_10:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  unint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 7368801;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x6D6574737973;
      break;
    case 3:
      unint64_t v5 = 0x68536E6565726373;
      unint64_t v3 = 0xEB00000000657261;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x636E795374736166;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 7368801) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x6D6574737973) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0x68536E6565726373;
      unint64_t v6 = 0xEB00000000657261;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x636E795374736166) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        unint64_t v7 = 1;
      }
      else {
LABEL_16:
      }
        unint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000056;
  }
  else {
    unint64_t v3 = 0xD00000000000003ALL;
  }
  if (v2) {
    unint64_t v4 = 0x80000001B115A680;
  }
  else {
    unint64_t v4 = 0x80000001B115A6C0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000056;
  }
  else {
    unint64_t v5 = 0xD00000000000003ALL;
  }
  if (a2) {
    unint64_t v6 = 0x80000001B115A6C0;
  }
  else {
    unint64_t v6 = 0x80000001B115A680;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)()
{
  unint64_t v0 = Entitlement.rawValue.getter();
  uint64_t v2 = v1;
  if (v0 == Entitlement.rawValue.getter() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t type metadata accessor for AttachmentLedger_CreateTopicResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_CreateTopicResponse);
}

uint64_t type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t AttachmentLedger_CreateTopicResponse.topicConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(TopicResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(Topic - 8) + 48))(v5, 1, Topic) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?, type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t AttachmentLedger_MMCSMetadata.baseBlob.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t AttachmentLedger_MMCSMetadata.progressBlob.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.progressBlob.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.progressBlob.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t AttachmentLedger_SubscribeRequest.initialize.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.error.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.error.getter@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentResponse.error.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, a1);
}

BOOL AttachmentLedger_UpdateAttachmentResponse.hasError.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  *a1 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

BOOL AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter()
{
  return AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.authPutMaterials.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AuthTokenResponse + 32), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.error.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AuthTokenResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

BOOL AttachmentLedger_GetAuthTokenResponse.hasError.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

BOOL AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

uint64_t AttachmentLedger_ResponseStatus.init()()
{
  return 0;
}

uint64_t AttachmentLedger_ResponseStatus.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized AttachmentLedger_ResponseStatus.init(rawValue:));
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus((uint64_t (*)(void))specialized AttachmentLedger_ResponseStatus.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, (uint64_t (*)(void))specialized AttachmentLedger_ResponseStatus.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_ResponseStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
  return MEMORY[0x1F4127160](a1, a2, v4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_ResponseStatus(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void one-time initialization function for allCases()
{
  static AttachmentLedger_ResponseStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_CapabilityFlag.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_AttachmentStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_GetAuthTokenRequest.Action.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_ResponseStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_CreateTopicRequest.TopicCategory.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *AttachmentLedger_ResponseStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AttachmentLedger_ResponseStatus.allCases;
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_ResponseStatus.allCases);
}

uint64_t (*static AttachmentLedger_ResponseStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_ResponseStatus.allCases, a1);
}

uint64_t AttachmentLedger_CapabilityFlag.init()()
{
  return 0;
}

uint64_t AttachmentLedger_CapabilityFlag.rawValue.getter(uint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_CapabilityFlag@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result == 0;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AttachmentLedger_CapabilityFlag()
{
  if (v0[8]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_CapabilityFlag@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0;
  *(void *)a2 = *result;
  char v3 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttachmentLedger_CapabilityFlag(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8)) {
    *a1 = 0;
  }
  else {
    *a1 = *(void *)v1;
  }
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CapabilityFlag(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag();
  return MEMORY[0x1F4127160](a1, a2, v4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_CapabilityFlag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a1[1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v2 = 0;
  }
  return v3 == v2;
}

uint64_t *AttachmentLedger_CapabilityFlag.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AttachmentLedger_CapabilityFlag.allCases;
}

uint64_t static AttachmentLedger_CapabilityFlag.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_CapabilityFlag.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_CapabilityFlag.allCases);
}

uint64_t (*static AttachmentLedger_CapabilityFlag.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_CapabilityFlag@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_CapabilityFlag.allCases, a1);
}

uint64_t AttachmentLedger_AttachmentStatus.init()()
{
  return 0;
}

uint64_t AttachmentLedger_AttachmentStatus.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized AttachmentLedger_AttachmentStatus.init(rawValue:));
}

void protocol witness for Enum.init() in conformance AttachmentLedger_AttachmentStatus(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_AttachmentStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus((uint64_t (*)(void))specialized AttachmentLedger_AttachmentStatus.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_AttachmentStatus@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, (uint64_t (*)(void))specialized AttachmentLedger_AttachmentStatus.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t *AttachmentLedger_AttachmentStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AttachmentLedger_AttachmentStatus.allCases;
}

uint64_t static AttachmentLedger_AttachmentStatus.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_AttachmentStatus.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_AttachmentStatus.allCases);
}

uint64_t (*static AttachmentLedger_AttachmentStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_AttachmentStatus@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_AttachmentStatus.allCases, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.baseBlob.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path getter for AttachmentLedger_MMCSMetadata.baseBlob : AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path setter for AttachmentLedger_MMCSMetadata.baseBlob : AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_MMCSMetadata(0) + 36);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_MMCSMetadata.baseBlob.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_MMCSMetadata(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  return AttachmentLedger_MMCSMetadata.baseBlob.modify;
}

void AttachmentLedger_MMCSMetadata.baseBlob.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_MMCSMetadata.hasBaseBlob.getter()
{
  return AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Void __swiftcall AttachmentLedger_MMCSMetadata.clearBaseBlob()()
{
}

uint64_t AttachmentLedger_MMCSMetadata.progressBlob.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path getter for AttachmentLedger_MMCSMetadata.progressBlob : AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path setter for AttachmentLedger_MMCSMetadata.progressBlob : AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_MMCSMetadata(0) + 40);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AttachmentLedger_MMCSMetadata.progressBlob.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_MMCSMetadata(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  return AttachmentLedger_MMCSMetadata.baseBlob.modify;
}

BOOL AttachmentLedger_MMCSMetadata.hasProgressBlob.getter()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_MMCSMetadata.clearProgressBlob()()
{
}

uint64_t (*AttachmentLedger_MMCSMetadata.ownerID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_MMCSMetadata.originalAuthURL.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_MMCSMetadata.fileHash.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.referenceSignature.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t AttachmentLedger_MMCSMetadata.referenceSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 48), *(void *)(v2 + 56));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*AttachmentLedger_MMCSMetadata.referenceSignature.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_MMCSMetadata, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t (*AttachmentLedger_MMCSMetadata.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.version.getter()
{
  return *(void *)v0;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.version.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AttachmentLedger_MMCSMetadata.BlobData.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.body.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AttachmentLedger_MMCSMetadata.BlobData.body.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t (*AttachmentLedger_MMCSMetadata.BlobData.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(_OWORD *)(a1 + 32) = xmmword_1B113B700;
  *(_OWORD *)(a1 + 48) = xmmword_1B113B700;
  uint64_t v2 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  uint64_t v4 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v7)((void *)(v4 - 8), v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(v2 + 40);
  return v7(v5, 1, 1, v4);
}

uint64_t (*AttachmentLedger_AttachmentMetadata.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.encryptionSlots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_AttachmentMetadata.encryptionSlots.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentMetadata.encryptionSlots.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.mmcsMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_MMCSMetadata);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(_OWORD *)(a1 + 32) = xmmword_1B113B700;
  *(_OWORD *)(a1 + 48) = xmmword_1B113B700;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 36);
  uint64_t v9 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(a1 + *(int *)(v7 + 40), 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
}

uint64_t key path getter for AttachmentLedger_AttachmentMetadata.mmcsMetadata : AttachmentLedger_AttachmentMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_MMCSMetadata);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(_OWORD *)(a2 + 32) = xmmword_1B113B700;
  *(_OWORD *)(a2 + 48) = xmmword_1B113B700;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 36);
  uint64_t v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v11(a2 + *(int *)(v8 + 40), 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
}

uint64_t key path setter for AttachmentLedger_AttachmentMetadata.mmcsMetadata : AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_MMCSMetadata);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) + 36);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_MMCSMetadata);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AttachmentLedger_AttachmentMetadata.mmcsMetadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    *((_OWORD *)v10 + 2) = xmmword_1B113B700;
    *((_OWORD *)v10 + 3) = xmmword_1B113B700;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 36);
    uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    v14(v12, 1, 1, v13);
    v14((char *)v10 + *(int *)(v6 + 40), 1, 1, v13);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_MMCSMetadata);
  }
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.modify;
}

void AttachmentLedger_AttachmentMetadata.mmcsMetadata.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_AttachmentMetadata.hasMmcsMetadata.getter()
{
  return AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

BOOL AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 36), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_AttachmentMetadata.clearMmcsMetadata()()
{
}

uint64_t AttachmentLedger_MMCSMetadata.clearBaseBlob()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 36);
  outlined destroy of UUID?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t AttachmentLedger_AttachmentMetadata.status.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AttachmentLedger_AttachmentMetadata.status.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentMetadata.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.metadata.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t AttachmentLedger_AttachmentMetadata.metadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 40), *(void *)(v2 + 48));
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentMetadata.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_AttachmentMetadata, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AttachmentLedger_AttachmentMetadata.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AttachmentLedger_AttachmentMetadata.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = xmmword_1B113B700;
  uint64_t v2 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  uint64_t v4 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t (*AttachmentLedger_AuthPutMaterials.signedAuthToken.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_AuthPutMaterials.accountID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_AuthPutMaterials.requestURL.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_AuthPutMaterials.tokenTtlInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AuthPutMaterials.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_AuthPutMaterials, a1);
}

uint64_t AttachmentLedger_AuthPutMaterials.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t (*AttachmentLedger_AuthPutMaterials.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AuthPutMaterials.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.signedAuthToken.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.signedAuthToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.signedAuthToken.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.accountID.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.accountID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.accountID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.tokenTtlInMilliseconds.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.tokenTtlInMilliseconds.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.tokenTtlInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, a1);
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_EncryptionID.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_EncryptionID, a1);
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t (*AttachmentLedger_EncryptionID.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_EncryptionID.init()@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_EncryptionID.init()((void (*)(void))type metadata accessor for AttachmentLedger_EncryptionID, a1);
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  *a1 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t key path getter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) + 28);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_AttachmentEncryption, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID);
}

void (*AttachmentLedger_AttachmentEncryption.encryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  return AttachmentLedger_AttachmentEncryption.encryptionID.modify;
}

void AttachmentLedger_AttachmentEncryption.encryptionID.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_AttachmentEncryption.hasEncryptionID.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Void __swiftcall AttachmentLedger_AttachmentEncryption.clearEncryptionID()()
{
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionMaterial.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionMaterial.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentEncryption.encryptionMaterial.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentEncryption.version.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AttachmentLedger_AttachmentEncryption.version.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentEncryption.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentEncryption.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_AttachmentEncryption, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AttachmentLedger_AttachmentEncryption.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AttachmentLedger_AttachmentEncryption.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentEncryption.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_AttachmentEncryption.init()(type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_EncryptionID, a1);
}

uint64_t (*AttachmentLedger_ErrorResponse.errorMessage.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_ErrorResponse.maxRetries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_ErrorResponse.retryIntervalInMilliseconds.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AttachmentLedger_ErrorResponse.retryIntervalInMilliseconds.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*AttachmentLedger_ErrorResponse.retryIntervalInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_ErrorResponse, a1);
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t (*AttachmentLedger_ErrorResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_ErrorResponse.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  type metadata accessor for AttachmentLedger_ErrorResponse(0);
  a1[2] = 0;
  a1[3] = 0;
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_CreateTopicRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_CreateTopicRequest.participantIdsalt.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_CreateTopicRequest, a1);
}

uint64_t AttachmentLedger_CreateTopicRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicRequest);
}

uint64_t (*AttachmentLedger_CreateTopicRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicRequest.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_CreateTopicResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.error.getter@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentResponse.error.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse, a1);
}

uint64_t key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_ErrorResponse);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_CreateTopicResponse(0) + 24);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_ErrorResponse);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_CreateTopicResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

void (*AttachmentLedger_CreateTopicResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_CreateTopicResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

void AttachmentLedger_CreateTopicResponse.error.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_CreateTopicResponse.hasError.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

BOOL AttachmentLedger_UpdateAttachmentResponse.hasError.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_CreateTopicResponse.clearError()()
{
}

uint64_t key path getter for AttachmentLedger_CreateTopicResponse.topicConfig : AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(Topic - 8) + 48))(v6, 1, Topic) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t key path setter for AttachmentLedger_CreateTopicResponse.topicConfig : AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v5 = *(void *)(Topic - 8);
  MEMORY[0x1F4188790](Topic);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_CreateTopicResponse(0) + 28);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, Topic);
}

uint64_t AttachmentLedger_CreateTopicResponse.topicConfig.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AttachmentLedger_AttachmentMetadata(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AttachmentMetadata);
}

uint64_t outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AttachmentLedger_MMCSMetadata(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_MMCSMetadata);
}

uint64_t type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t type metadata accessor for AttachmentLedger_EncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_EncryptionID);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t type metadata accessor for AttachmentLedger_ErrorResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_ErrorResponse);
}

uint64_t type metadata accessor for AttachmentLedger_AuthPutMaterials(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AuthPutMaterials);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t type metadata accessor for AttachmentLedger_AttachmentEncryption(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AttachmentEncryption);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_GetAuthTokenResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAuthTokenResponse);
}

void (*AttachmentLedger_CreateTopicResponse.topicConfig.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v3[2] = Topic;
  uint64_t v7 = *(void *)(Topic - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_CreateTopicResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, Topic) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    *((_DWORD *)v10 + 4) = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  }
  return AttachmentLedger_CreateTopicResponse.topicConfig.modify;
}

void AttachmentLedger_CreateTopicResponse.topicConfig.modify(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall AttachmentLedger_CreateTopicResponse.clearTopicConfig()()
{
}

uint64_t AttachmentLedger_AttachmentEncryption.clearEncryptionID()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of UUID?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t AttachmentLedger_CreateTopicResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse, a1);
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AttachmentLedger_CreateTopicResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AttachmentLedger_CreateTopicResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxSubscribeRpcStreamTries.getter()
{
  return *v0;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxSubscribeRpcStreamTries.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxSubscribeRpcStreamTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.retrySubscribeRpcStreamIntervalMillis.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.retrySubscribeRpcStreamIntervalMillis.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.retrySubscribeRpcStreamIntervalMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.getter()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.init()(type metadata accessor for AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t AttachmentLedger_SubscribeRequest.operation.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t (*AttachmentLedger_SubscribeRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.initialize.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    uint64_t v8 = MEMORY[0x1E4FBC860];
    a1[2] = MEMORY[0x1E4FBC860];
    a1[3] = 0;
    a1[4] = v8;
    a1[5] = 0;
    uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    UnknownStorage.init()();
    uint64_t v10 = (char *)a1 + *(int *)(v9 + 40);
    uint64_t v11 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  a1[2] = MEMORY[0x1E4FBC860];
  a1[3] = 0;
  a1[4] = v2;
  a1[5] = 0;
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  UnknownStorage.init()();
  uint64_t v4 = (char *)a1 + *(int *)(v3 + 40);
  uint64_t v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

void (*AttachmentLedger_SubscribeRequest.initialize.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      return AttachmentLedger_SubscribeRequest.initialize.modify;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  v9[2] = MEMORY[0x1E4FBC860];
  v9[3] = 0;
  v9[4] = v12;
  v9[5] = 0;
  UnknownStorage.init()();
  uint64_t v13 = (char *)v9 + *(int *)(v7 + 40);
  uint64_t v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return AttachmentLedger_SubscribeRequest.initialize.modify;
}

void AttachmentLedger_SubscribeRequest.initialize.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeRequest.updateEncryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_EncryptionID);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *a1 = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_EncryptionID(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeRequest.updateEncryptionID : AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_EncryptionID);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *a2 = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_EncryptionID(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeRequest.updateEncryptionID : AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_EncryptionID);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_EncryptionID);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeRequest.updateEncryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

void (*AttachmentLedger_SubscribeRequest.updateEncryptionID.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_EncryptionID(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_6:
    *uint64_t v8 = xmmword_1B113B700;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeRequest.updateEncryptionID.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_EncryptionID);
  return AttachmentLedger_SubscribeRequest.updateEncryptionID.modify;
}

void AttachmentLedger_SubscribeRequest.updateEncryptionID.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_EncryptionID);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_EncryptionID);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_EncryptionID);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeRequest.attachmentAck.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = 0;
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeRequest.attachmentAck : AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *a2 = MEMORY[0x1E4FBC860];
  a2[1] = 0;
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeRequest.attachmentAck : AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeRequest.attachmentAck.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = 0;
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeRequest.attachmentAck.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_6:
    *uint64_t v8 = MEMORY[0x1E4FBC860];
    v8[1] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeRequest.attachmentAck.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return AttachmentLedger_SubscribeRequest.attachmentAck.modify;
}

void AttachmentLedger_SubscribeRequest.attachmentAck.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeRequest, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t (*AttachmentLedger_SubscribeRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_EncryptionID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_EncryptionID) & 1;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  *a1 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t key path getter for AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID : AttachmentLedger_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t key path setter for AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID : AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0) + 40);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  return AttachmentLedger_AttachmentEncryption.encryptionID.modify;
}

BOOL AttachmentLedger_SubscribeRequest.Initialize.hasLocalEncryptionID.getter()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeRequest.Initialize.clearLocalEncryptionID()()
{
}

uint64_t AttachmentLedger_MMCSMetadata.clearProgressBlob()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 40);
  outlined destroy of UUID?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.knownEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.knownAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.knownAttachments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.knownAttachments.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.capabilities.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.capabilities.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.capabilities.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.uuids.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.uuids.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.AttachmentAck.uuids.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.sequenceNumber.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.sequenceNumber.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.AttachmentAck.sequenceNumber.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t (*AttachmentLedger_SubscribeRequest.AttachmentAck.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeRequest, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

uint64_t AttachmentLedger_SubscribeResponse.operation.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.initializeAck.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_5:
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t v8 = MEMORY[0x1E4FBC860];
    *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
    UnknownStorage.init()();
    uint64_t v10 = a1 + *(int *)(v9 + 36);
    uint64_t v11 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    uint64_t v12 = a1 + *(int *)(v9 + 40);
    uint64_t v13 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.initializeAck : AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.initializeAck.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v2;
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  UnknownStorage.init()();
  uint64_t v4 = a1 + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 40);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

void (*AttachmentLedger_SubscribeResponse.initializeAck.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      return AttachmentLedger_SubscribeResponse.initializeAck.modify;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  *(void *)uint64_t v9 = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  v9[8] = 1;
  *((void *)v9 + 2) = v12;
  *((void *)v9 + 3) = v12;
  *((void *)v9 + 4) = v12;
  UnknownStorage.init()();
  uint64_t v13 = &v9[*(int *)(v7 + 36)];
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = &v9[*(int *)(v7 + 40)];
  uint64_t v16 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return AttachmentLedger_SubscribeResponse.initializeAck.modify;
}

void AttachmentLedger_SubscribeResponse.initializeAck.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.attachmentUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  *(void *)(a1 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)) = 0;
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.attachmentUpdate : AttachmentLedger_SubscribeResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  *(void *)(a2 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)) = 0;
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.attachmentUpdate : AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.attachmentUpdate.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  *(void *)(a1 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)) = 0;
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.attachmentUpdate.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
    *(void *)&v9[*(int *)(v7 + 20)] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.attachmentUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return AttachmentLedger_SubscribeResponse.attachmentUpdate.modify;
}

void AttachmentLedger_SubscribeResponse.attachmentUpdate.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.topicUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.topicUpdate : AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.topicUpdate.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.init()((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, a1);
}

void (*AttachmentLedger_SubscribeResponse.topicUpdate.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    *(void *)uint64_t v8 = 0;
    v8[8] = 1;
    *((void *)v8 + 2) = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.topicUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return AttachmentLedger_SubscribeResponse.topicUpdate.modify;
}

void AttachmentLedger_SubscribeResponse.topicUpdate.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse);
}

uint64_t (*AttachmentLedger_SubscribeResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.error : AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.InitializeAck.error : AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_ErrorResponse);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0) + 36);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_ErrorResponse);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.error.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 36);
  outlined destroy of UUID?(v10, a3);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0) + 36);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.hasError.getter()
{
  return AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_ErrorResponse);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.InitializeAck.clearError()()
{
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.missingEncryptionIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.missingEncryptionIds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.missingEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.attachments.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials : AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = 0;
  a2[5] = 0xE000000000000000;
  a2[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials : AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0) + 40);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.progressBlob.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_MMCSMetadata.progressBlob.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 40);
  outlined destroy of UUID?(v10, a3);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0) + 40);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    v10[4] = 0;
    v10[5] = 0xE000000000000000;
    v10[6] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  return AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify;
}

void AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify(uint64_t a1, char a2)
{
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.InitializeAck.clearAuthPutMaterials()()
{
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.getter()
{
  return *(void *)v0;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
  uint64_t v8 = a2
     + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0) + 24);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_EncryptionID);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0)
               + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  return AttachmentLedger_AttachmentEncryption.encryptionID.modify;
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()()
{
}

uint64_t AttachmentLedger_CreateTopicResponse.clearError()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 24);
  outlined destroy of UUID?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.content.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.content.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.content.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v3, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    return 0;
  }
  return *(void *)v3;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid : AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot@<X0>(uint64_t a1@<X0>, long long *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (long long *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    uint64_t result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  }
  else
  {
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result != 1)
    {
      long long v9 = *v6;
      goto LABEL_7;
    }
    uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  }
  long long v9 = xmmword_1B113B700;
LABEL_7:
  *a2 = v9;
  return result;
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid : AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  outlined copy of Data._Representation(*a1, v4);
  outlined destroy of UUID?((uint64_t)a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  *a2 = v3;
  a2[1] = v4;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = *(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(a2, 0, 1, v5);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.setter(uint64_t a1, uint64_t a2)
{
  outlined destroy of UUID?((uint64_t)v2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  *uint64_t v2 = a1;
  v2[1] = a2;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v2, 0, 1, v5);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  unint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v6 = (long long *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[3] = v6;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v4[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v4[5] = v8;
  if ((*(unsigned int (**)(long long *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v9 = *v6;
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  }
  long long v9 = xmmword_1B113B700;
LABEL_7:
  *(_OWORD *)unint64_t v4 = v9;
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.modify;
}

void AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  unint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (uint64_t *)(*a1)[2];
  uint64_t v7 = (void *)(*a1)[3];
  if (a2)
  {
    outlined copy of Data._Representation(**a1, v3);
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    *uint64_t v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
    outlined consume of Data._Representation(*v2, v2[1]);
  }
  else
  {
    outlined destroy of UUID?((*a1)[2], &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    *uint64_t v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
  }
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  }
  long long v12 = xmmword_1B113B700;
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = v12;
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  UnknownStorage.init()();
  uint64_t v10 = a1 + *(int *)(v9 + 36);
  uint64_t v11 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata : AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
LABEL_6:
    *(_OWORD *)uint64_t v9 = xmmword_1B113B700;
    *((void *)v9 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *((void *)v9 + 3) = 0;
    v9[32] = 1;
    *(_OWORD *)(v9 + 40) = xmmword_1B113B700;
    UnknownStorage.init()();
    long long v12 = &v9[*(int *)(v7 + 36)];
    uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify;
}

void AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.init()@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a3, 1, 1, v5);
  a2(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_SubscribeResponse.TopicUpdate.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.TopicUpdate.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t (*AttachmentLedger_SubscribeResponse.TopicUpdate.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.init()()
{
  return 0;
}

BOOL AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.rawValue.getter(BOOL result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent(uint64_t a1, uint64_t a2)
{
  unint64_t updated = lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent();
  return MEMORY[0x1F4127160](a1, a2, updated);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.event.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.event.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_5:
    uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.added : AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_5:
    uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 1, 1, v8);
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.added : AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  UnknownStorage.init()();
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  *a1 = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed : AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  *a2 = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed : AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.init()@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_EncryptionID.init()((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, a1);
}

uint64_t AttachmentLedger_EncryptionID.init()@<X0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1B113B700;
  a1(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_6:
    *uint64_t v8 = xmmword_1B113B700;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated : AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated : AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_6:
    uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged : AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged : AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_6:
    uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.sequenceNumber.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20));
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.sequenceNumber.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  *(void *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.sequenceNumber.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed) & 1;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.content.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.content.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.content.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
LABEL_5:
    long long v12 = xmmword_1B113B700;
    *(_OWORD *)a1 = xmmword_1B113B700;
    *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 1;
    *(_OWORD *)(a1 + 40) = v12;
    uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    UnknownStorage.init()();
    uint64_t v9 = a1 + *(int *)(v8 + 36);
    uint64_t v10 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full : AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  }
  *(_OWORD *)uint64_t v9 = xmmword_1B113B700;
  *((void *)v9 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *((void *)v9 + 3) = 0;
  v9[32] = 1;
  *(_OWORD *)(v9 + 40) = xmmword_1B113B700;
  UnknownStorage.init()();
  long long v12 = &v9[*(int *)(v7 + 36)];
  uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  }
  *a1 = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack : AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  }
  *a2 = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack : AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.init()@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_EncryptionID.init()((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
LABEL_6:
    *uint64_t v8 = xmmword_1B113B700;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack) & 1;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.type.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.type.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.type.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
LABEL_5:
    *(_OWORD *)a1 = xmmword_1B113B700;
    *(void *)(a1 + 16) = 0;
    uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    UnknownStorage.init()();
    uint64_t v9 = a1 + *(int *)(v8 + 28);
    uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full : AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_AttachmentEncryption.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_AttachmentEncryption, a1);
}

uint64_t AttachmentLedger_AttachmentEncryption.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_1B113B700;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = a1(0);
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(v5 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  }
  *(_OWORD *)uint64_t v9 = xmmword_1B113B700;
  v9[2] = 0;
  UnknownStorage.init()();
  uint64_t v12 = (char *)v9 + *(int *)(v7 + 28);
  uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  }
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack : AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
LABEL_6:
    *(_OWORD *)uint64_t v8 = xmmword_1B113B700;
    _OWORD v8[2] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.attachmentEncryptionVersion.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial : AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial : AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  uint64_t v8 = a2
     + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0)
              + 28);
  outlined destroy of UUID?(v8, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0)
               + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v10 = xmmword_1B113B700;
    v10[2] = 0;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 28);
    uint64_t v13 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.hasEncryptionMaterial.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.clearEncryptionMaterial()()
{
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.content.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.content.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.content.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
LABEL_5:
    *(_OWORD *)a1 = xmmword_1B113B700;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
    uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    UnknownStorage.init()();
    uint64_t v9 = a1 + *(int *)(v8 + 28);
    uint64_t v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full : AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  size_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  }
  *(_OWORD *)uint64_t v9 = xmmword_1B113B700;
  v9[2] = 0;
  *((unsigned char *)v9 + 24) = 1;
  UnknownStorage.init()();
  uint64_t v12 = (char *)v9 + *(int *)(v7 + 28);
  uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  }
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack : AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
LABEL_6:
    *(_OWORD *)uint64_t v8 = xmmword_1B113B700;
    _OWORD v8[2] = 0;
    *((unsigned char *)v8 + 24) = 1;
    v8[4] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.progressBlobVersion.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.progressBlobVersion.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.progressBlobVersion.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, a1);
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.setter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob : AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob : AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  uint64_t v8 = a2
     + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0)
              + 28);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0)
               + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  return AttachmentLedger_MMCSMetadata.baseBlob.modify;
}

BOOL AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.hasProgressBlob.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.clearProgressBlob()()
{
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse, a1);
}

uint64_t *AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases;
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases);
}

uint64_t (*static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.operation.setter(uint64_t a1)
{
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.add.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
    UnknownStorage.init()();
    size_t v9 = (char *)a1 + *(int *)(v8 + 24);
    uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.add : AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  MEMORY[0x1F4188790](updated - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  uint64_t v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.add.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_AttachmentMetadata, a1);
}

void (*AttachmentLedger_UpdateAttachmentRequest.add.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  size_t v8 = *(void *)(*(void *)(updated - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
      return AttachmentLedger_UpdateAttachmentRequest.add.modify;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v12 = (char *)v9 + *(int *)(updated + 24);
  uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_UpdateAttachmentRequest.add.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.add.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.remove.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  return UnknownStorage.init()();
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.remove : AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(a2, 0, 1, updated);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.remove.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, a1);
}

void (*AttachmentLedger_UpdateAttachmentRequest.remove.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0)
                             - 8)
                 + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v4[4] = updated;
  uint64_t v10 = *(void *)(updated - 8);
  uint64_t v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_6:
    *uint64_t v8 = 0;
    v8[1] = 0xE000000000000000;
    *((_OWORD *)v8 + 1) = xmmword_1B113B700;
    UnknownStorage.init()();
    return AttachmentLedger_UpdateAttachmentRequest.remove.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return AttachmentLedger_UpdateAttachmentRequest.remove.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.remove.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateEncryption.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v9 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  UnknownStorage.init()();
  uint64_t v10 = (char *)a1 + *(int *)(v9 + 24);
  uint64_t v11 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.updateEncryption : AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  MEMORY[0x1F4188790](updated - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  uint64_t v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateEncryption.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.init()@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  uint64_t v5 = a1(0);
  UnknownStorage.init()();
  uint64_t v6 = (char *)a3 + *(int *)(v5 + 24);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

void (*AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  size_t v8 = *(void *)(*(void *)(updated - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_6:
    *uint64_t v9 = 0;
    v9[1] = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(updated + 24);
    uint64_t v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateStatus.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v9 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  UnknownStorage.init()();
  uint64_t v10 = (char *)a1 + *(int *)(v9 + 24);
  uint64_t v11 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.updateStatus : AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  MEMORY[0x1F4188790](updated - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  outlined destroy of UUID?(a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  uint64_t v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 0, 1, v7);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateStatus.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeRequest.initialize.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  outlined destroy of UUID?(v4, a2);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(a1, v4, a3);
  uint64_t v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v4, 0, 1, v8);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.init()@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, a1);
}

void (*AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  size_t v8 = *(void *)(*(void *)(updated - 8) + 64);
  v4[2] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v4[4] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_6:
    *uint64_t v9 = 0;
    v9[1] = 0xE000000000000000;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v9 + *(int *)(updated + 24);
    uint64_t v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((*a1)[3], (uint64_t)v5, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  }
  else
  {
    outlined destroy of UUID?(**a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove) & 1;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  long long v11 = xmmword_1B113B700;
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = v11;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 36);
  uint64_t v9 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata : AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  long long v12 = xmmword_1B113B700;
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = v12;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 36);
  uint64_t v10 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata : AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0) + 24);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v10 = xmmword_1B113B700;
    *((void *)v10 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *((void *)v10 + 3) = 0;
    v10[32] = 1;
    *(_OWORD *)(v10 + 40) = xmmword_1B113B700;
    UnknownStorage.init()();
    long long v12 = &v10[*(int *)(v6 + 36)];
    uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.hasMetadata.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.clearMetadata()()
{
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  }
  *a1 = xmmword_1B113B700;
  UnknownStorage.init()();
  uint64_t v8 = (char *)a1 + *(int *)(v7 + 24);
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container : AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  }
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  uint64_t v9 = (char *)a2 + *(int *)(v8 + 24);
  uint64_t v10 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container : AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v5 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  uint64_t v8 = a2
     + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0) + 24);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, updated);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1B113B700;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(updated + 24);
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v3[2] = updated;
  uint64_t v7 = *(void *)(updated - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, updated) == 1)
  {
    *uint64_t v10 = xmmword_1B113B700;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(updated + 24);
    uint64_t v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.hasContainer.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.clearContainer()()
{
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 28);
  uint64_t v9 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption : AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 28);
  uint64_t v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption : AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  uint64_t v8 = a2
     + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0)
              + 24);
  outlined destroy of UUID?(v8, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0)
               + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v10 = xmmword_1B113B700;
    v10[2] = 0;
    UnknownStorage.init()();
    uint64_t v12 = (char *)v10 + *(int *)(v6 + 28);
    uint64_t v13 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify;
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.hasEncryption.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.clearEncryption()()
{
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  }
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container : AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  }
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = xmmword_1B113B700;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container : AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v5 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  uint64_t v8 = a2
     + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0) + 24);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, updated);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1B113B700;
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v3[2] = updated;
  uint64_t v7 = *(void *)(updated - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, updated) == 1)
  {
    *(_OWORD *)uint64_t v10 = xmmword_1B113B700;
    v10[2] = 0;
    *((unsigned char *)v10 + 24) = 1;
    *((_OWORD *)v10 + 2) = xmmword_1B113B700;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.hasContainer.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.clearContainer()()
{
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.status.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.status.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.progressBlob.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.progressBlob.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.progressBlob.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, (void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, a1);
}

uint64_t (*AttachmentLedger_UpdateAttachmentResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path setter for AttachmentLedger_UpdateAttachmentResponse.error : AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_ErrorResponse);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0) + 24);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_ErrorResponse);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

void (*AttachmentLedger_UpdateAttachmentResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentResponse.clearError()()
{
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t (*AttachmentLedger_UpdateAttachmentResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(updated + 24);
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.action.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.attachmentUuids.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.testOption.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AuthToken - 8) + 48))(v5, 1, AuthToken) != 1)return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption); {
  *(void *)a1 = 0;
  }
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
}

uint64_t key path getter for AttachmentLedger_GetAuthTokenRequest.testOption : AttachmentLedger_GetAuthTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AuthToken - 8) + 48))(v6, 1, AuthToken) != 1)return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption); {
  *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
}

uint64_t key path setter for AttachmentLedger_GetAuthTokenRequest.testOption : AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v5 = *(void *)(AuthToken - 8);
  MEMORY[0x1F4188790](AuthToken);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0) + 32);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, AuthToken);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.testOption.setter(uint64_t a1)
{
  return AttachmentLedger_GetAuthTokenRequest.testOption.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.init()((void (*)(void))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.init()@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  a1(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_GetAuthTokenRequest.testOption.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v3[2] = AuthToken;
  uint64_t v7 = *(void *)(AuthToken - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, AuthToken) == 1)
  {
    *(void *)uint64_t v10 = 0;
    v10[8] = 1;
    *((void *)v10 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  }
  return AttachmentLedger_GetAuthTokenRequest.testOption.modify;
}

void AttachmentLedger_GetAuthTokenRequest.testOption.modify(uint64_t a1, char a2)
{
}

BOOL AttachmentLedger_GetAuthTokenRequest.hasTestOption.getter()
{
  return AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

BOOL AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  uint64_t v11 = a3(0);
  BOOL v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_GetAuthTokenRequest.clearTestOption()()
{
}

uint64_t AttachmentLedger_GetAuthTokenRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAuthTokenRequest, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.Action.init()()
{
  return 0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest.Action(uint64_t a1, uint64_t a2)
{
  unint64_t AuthToken = lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action();
  return MEMORY[0x1F4127160](a1, a2, AuthToken);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init()()
{
  return 0;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, specialized AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:));
}

uint64_t AttachmentLedger_ResponseStatus.init(rawValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(specialized AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, (uint64_t (*)(void))specialized AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttachmentLedger_ResponseStatus()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment(uint64_t a1, uint64_t a2)
{
  unint64_t AuthToken = lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment();
  return MEMORY[0x1F4127160](a1, a2, AuthToken);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttachmentLedger_ResponseStatus()
{
  return Hasher._finalize()();
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.TestOption.environment.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.TestOption.overrideTtlInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.TestOption.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  uint64_t AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(AuthTokenRequest + 32);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AuthToken - 8) + 56);
  return v5(v3, 1, 1, AuthToken);
}

uint64_t *AttachmentLedger_GetAuthTokenRequest.Action.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AttachmentLedger_GetAuthTokenRequest.Action.allCases;
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.Action.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.Action.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.Action.allCases);
}

uint64_t (*static AttachmentLedger_GetAuthTokenRequest.Action.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_GetAuthTokenRequest.Action@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.Action.allCases, a1);
}

uint64_t *AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  return &static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases;
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases);
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.setter(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t (*AttachmentLedger_GetAuthTokenResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_GetAuthTokenResponse.error : AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t key path setter for AttachmentLedger_GetAuthTokenResponse.error : AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_ErrorResponse);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0) + 28);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_ErrorResponse);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

void (*AttachmentLedger_GetAuthTokenResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

Swift::Void __swiftcall AttachmentLedger_GetAuthTokenResponse.clearError()()
{
}

uint64_t key path getter for AttachmentLedger_GetAuthTokenResponse.authPutMaterials : AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 32), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = 0;
  a2[5] = 0xE000000000000000;
  a2[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t key path setter for AttachmentLedger_GetAuthTokenResponse.authPutMaterials : AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0) + 32);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.authPutMaterials.setter(uint64_t a1)
{
  return AttachmentLedger_GetAuthTokenRequest.testOption.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.testOption.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 32);
  outlined destroy of UUID?(v10, a3);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(a1, v10, a4);
  uint64_t v11 = a5(0);
  BOOL v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AttachmentLedger_GetAuthTokenResponse.authPutMaterials.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0xE000000000000000;
    v10[4] = 0;
    v10[5] = 0xE000000000000000;
    v10[6] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  return AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify;
}

Swift::Void __swiftcall AttachmentLedger_GetAuthTokenResponse.clearAuthPutMaterials()()
{
}

uint64_t AttachmentLedger_GetAuthTokenRequest.clearTestOption()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *(int *)(a1(0) + 32);
  outlined destroy of UUID?(v6, a2);
  uint64_t v7 = a3(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t (*AttachmentLedger_GetAuthTokenResponse.signedAuthGetTokens.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAuthTokenResponse, a1);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t (*AttachmentLedger_GetAuthTokenResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  UnknownStorage.init()();
  uint64_t v3 = a1 + *(int *)(AuthTokenResponse + 28);
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = a1 + *(int *)(AuthTokenResponse + 32);
  uint64_t v6 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.topic.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.topic.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.attachmentUuid.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.attachmentUuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of Data._Representation(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataRequest.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, a1);
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataRequest.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()((void (*)(void))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(_OWORD *)(a2 + 16) = xmmword_1B113B700;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.status.getter()
{
  return *(void *)v0;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.status.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.error.getter@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentResponse.error.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.error.getter@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v9 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)a2, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v9 + 24), (uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v10 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v8, (uint64_t)a3, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = 0;
  a3[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t key path setter for AttachmentLedger_GetAttachmentMetadataResponse.error : AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_ErrorResponse);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0) + 24);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_ErrorResponse);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 24);
  outlined destroy of UUID?(v10, a3);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(a1, v10, a4);
  uint64_t v11 = a5(0);
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AttachmentLedger_GetAttachmentMetadataResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

BOOL AttachmentLedger_GetAttachmentMetadataResponse.hasError.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

Swift::Void __swiftcall AttachmentLedger_GetAttachmentMetadataResponse.clearError()()
{
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AttachmentMetadataResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  long long v11 = xmmword_1B113B700;
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = v11;
  UnknownStorage.init()();
  uint64_t v8 = a1 + *(int *)(v7 + 36);
  uint64_t v9 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t key path getter for AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata : AttachmentLedger_GetAttachmentMetadataResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AttachmentMetadataResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  long long v12 = xmmword_1B113B700;
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = v12;
  UnknownStorage.init()();
  uint64_t v9 = a2 + *(int *)(v8 + 36);
  uint64_t v10 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t key path setter for AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata : AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0) + 28);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionID.setter(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v10 = v5 + *(int *)(a2(0) + 28);
  outlined destroy of UUID?(v10, a3);
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(a1, v10, a4);
  uint64_t v11 = a5(0);
  long long v12 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  return v12(v10, 0, 1, v11);
}

void (*AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v11, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)uint64_t v10 = xmmword_1B113B700;
    *((void *)v10 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *((void *)v10 + 3) = 0;
    v10[32] = 1;
    *(_OWORD *)(v10 + 40) = xmmword_1B113B700;
    UnknownStorage.init()();
    long long v12 = &v10[*(int *)(v6 + 36)];
    uint64_t v13 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v5, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify;
}

void AttachmentLedger_MMCSMetadata.baseBlob.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    outlined destroy of UUID?(v15, a3);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, a6);
  }
  else
  {
    outlined destroy of UUID?(**(void **)a1 + v9, a3);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);
  free(v8);
}

BOOL AttachmentLedger_GetAttachmentMetadataResponse.hasAttachmentMetadata.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Void __swiftcall AttachmentLedger_GetAttachmentMetadataResponse.clearAttachmentMetadata()()
{
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, a1);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataResponse.unknownFields.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.init()(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_AttachmentMetadata, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.init()@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  uint64_t v5 = a1(0);
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(v5 + 24);
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a3 + *(int *)(v5 + 28);
  uint64_t v9 = a2(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_ResponseStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1B113C9F0;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "UNKNOWN";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "OK";
  *(void *)(v9 + 8) = 2;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 2;
  *(void *)uint64_t v11 = "IGNORED";
  *((void *)v11 + 1) = 7;
  unsigned char v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "PLUGIN_BOUNCING";
  *((void *)v13 + 1) = 15;
  unsigned char v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)uint64_t v15 = "UNKNOWN_TOPIC";
  *((void *)v15 + 1) = 13;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  int64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)int64_t v17 = "INVALID_REQUEST";
  *((void *)v17 + 1) = 15;
  unsigned char v17[16] = 2;
  v8();
  unint64_t v18 = (void *)(v4 + 6 * v2);
  int64_t v19 = (char *)v18 + v1[14];
  *unint64_t v18 = 6;
  *(void *)int64_t v19 = "NOT_AUTHORIZED";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  int64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *int64_t v20 = 7;
  *(void *)uint64_t v21 = "QUOTA_EXCEEDED";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)uint64_t v22 = "MISSING_ENCRYPTION_IDS";
  *(void *)(v22 + 8) = 22;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)uint64_t v6 = "Unspecified";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)uint64_t v10 = "Initial";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SimulcastUploadInProgress";
  *((void *)v12 + 1) = 25;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SimulcastUploadSucceeded";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_MMCSMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A070;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "baseBlob";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "progressBlob";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ownerID";
  *((void *)v12 + 1) = 7;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "originalAuthURL";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "fileHash";
  *((void *)v16 + 1) = 8;
  unsigned char v16[16] = 2;
  v9();
  int64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *int64_t v17 = 6;
  *(void *)unint64_t v18 = "referenceSignature";
  *((void *)v18 + 1) = 18;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "body";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113CA00;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "uuid";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "encryptionSlots";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "mmcsMetadata";
  *((void *)v12 + 1) = 12;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "status";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "metadata";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AuthPutMaterials._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "signedAuthToken";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "accountID";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "requestURL";
  *((void *)v12 + 1) = 10;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "tokenTtlInMilliseconds";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "uuid";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "signedAuthToken";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "accountID";
  *((void *)v12 + 1) = 9;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "tokenTtlInMilliseconds";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentEncryption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "encryptionID";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "encryptionMaterial";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "version";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_ErrorResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "errorMessage";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "maxRetries";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "retryIntervalInMilliseconds";
  *(void *)(v11 + 8) = 27;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_CreateTopicRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "participantIDSalt";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_CreateTopicResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "topicConfig";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113CA00;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "maxSubscribeRpcStreamTries";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "retrySubscribeRpcStreamIntervalMillis";
  *(void *)(v10 + 8) = 37;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "maxRefreshDataCryptorTries";
  *((void *)v12 + 1) = 26;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "refreshDataCryptorIntervalSeconds";
  *((void *)v14 + 1) = 33;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "gracefulShutdownWindowSeconds";
  *(void *)(v15 + 8) = 29;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "initialize";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "updateEncryptionID";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "attachmentAck";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A070;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "localEncryptionID";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "knownEncryptionIDs";
  *((void *)v12 + 1) = 18;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "saltVerifiedSubscriberParticipantID";
  *((void *)v14 + 1) = 35;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "knownAttachments";
  *((void *)v16 + 1) = 16;
  unsigned char v16[16] = 2;
  v9();
  int64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *int64_t v17 = 6;
  *(void *)unint64_t v18 = "capabilities";
  *((void *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "uuids";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sequenceNumber";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "initializeAck";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "attachmentUpdate";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "topicUpdate";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A070;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "otherSubscriberParticipantIDs";
  *((void *)v12 + 1) = 29;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "missingEncryptionIDs";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "attachments";
  *((void *)v16 + 1) = 11;
  unsigned char v16[16] = 2;
  v9();
  int64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *int64_t v17 = 6;
  *(void *)unint64_t v18 = "authPutMaterials";
  *((void *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "participantID";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "encryptionID";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "unchangedAttachmentMetadataUUID";
  *(void *)(v6 + 8) = 31;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "attachmentMetadata";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "event";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "participantID";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)uint64_t v6 = "SubscriberAdded";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "SubscriberRemoved";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113CA00;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "added";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "removed";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "encryptionUpdated";
  *((void *)v12 + 1) = 17;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "statusChanged";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 10;
  *(void *)uint64_t v15 = "sequenceNumber";
  *(void *)(v15 + 8) = 14;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "full";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "ack";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "full";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "ack";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "attachmentUUID";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "attachmentEncryptionVersion";
  *((void *)v10 + 1) = 27;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "attachmentUUID";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "participantID";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "encryptionMaterial";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "full";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "ack";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "attachmentUUID";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "status";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "progressBlobVersion";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "attachmentUUID";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "status";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "progressBlob";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "add";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "remove";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "updateEncryption";
  *((void *)v12 + 1) = 16;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "updateStatus";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "metadata";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "uuid";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "container";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "uuid";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "encryption";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "container";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "uuid";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "status";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "progressBlob";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "action";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "topic";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "attachmentUUIDs";
  *((void *)v12 + 1) = 15;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "testOption";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)uint64_t v6 = "NewUploadToken";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "NewDownloadToken";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)uint64_t v6 = "Unspecified";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)uint64_t v10 = "iCloud3";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "iCloud2";
  *((void *)v12 + 1) = 7;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "Production";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "environment";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "overrideTtlInMilliseconds";
  *((void *)v10 + 1) = 25;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "authPutMaterials";
  *((void *)v12 + 1) = 16;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "signedAuthGetTokens";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "attachmentUUID";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "attachmentMetadata";
  *(void *)(v11 + 8) = 18;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_ResponseStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_ResponseStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1B113C9F0;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "UNKNOWN";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "IGNORED";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "PLUGIN_BOUNCING";
  *((void *)v11 + 1) = 15;
  unsigned char v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "UNKNOWN_TOPIC";
  *((void *)v13 + 1) = 13;
  unsigned char v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)uint64_t v15 = "INVALID_REQUEST";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  int64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)int64_t v17 = "NOT_AUTHORIZED";
  *((void *)v17 + 1) = 14;
  unsigned char v17[16] = 2;
  v8();
  unint64_t v18 = (void *)(v4 + 6 * v2);
  int64_t v19 = (char *)v18 + v1[14];
  *unint64_t v18 = 7;
  *(void *)int64_t v19 = "QUOTA_EXCEEDED";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  int64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *int64_t v20 = 8;
  *(void *)uint64_t v21 = "MISSING_ENCRYPTION_IDS";
  *((void *)v21 + 1) = 22;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 1000;
  *(void *)uint64_t v22 = "OK";
  *(void *)(v22 + 8) = 2;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_Record._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_Record._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A070;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "data";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "seqNum";
  *((void *)v12 + 1) = 6;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "destinationParticipantIDs";
  *((void *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "encryptionID";
  *((void *)v16 + 1) = 12;
  unsigned char v16[16] = 2;
  v9();
  int64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *int64_t v17 = 6;
  *(void *)unint64_t v18 = "sentEpochMillis";
  *((void *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_KeyValue._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_KeyValue._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "key";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "dataValue";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SequenceNumber._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SequenceNumber._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "publisherParticipantID";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "seqNum";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribersRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topicTerminationAck";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "topicTerminationRequest";
  *((void *)v10 + 1) = 23;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topicName";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "reason";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)uint64_t v6 = "REASON_UNSPECIFIED";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "INITIATOR_LEFT";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribers._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "terminateTopic";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "subscriberParticipantIDs";
  *((void *)v10 + 1) = 24;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SystemEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SystemEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topicCreated";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "topicDestroyed";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "initialize";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "recordAck";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A070;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "knownSeqNums";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "localEncryptionID";
  *((void *)v12 + 1) = 17;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "knownEncryptionIDs";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "subscriberParticipantID";
  *((void *)v16 + 1) = 23;
  unsigned char v16[16] = 2;
  v9();
  int64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *int64_t v17 = 6;
  *(void *)unint64_t v18 = "saltVerifiedSubscriberParticipantID";
  *((void *)v18 + 1) = 35;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "initializeAck";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "record";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "topicUpdate";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1142A10;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "otherSubscriberParticipantIDs";
  *((void *)v12 + 1) = 29;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "metadata";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "topicCatchupSummary";
  *((void *)v16 + 1) = 19;
  unsigned char v16[16] = 2;
  v9();
  int64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *int64_t v17 = 6;
  *(void *)unint64_t v18 = "missingEncryptionIDs";
  *((void *)v18 + 1) = 20;
  v18[16] = 2;
  v9();
  int64_t v19 = (void *)(v5 + 6 * v2);
  int64_t v20 = (char *)v19 + v1[14];
  *int64_t v19 = 7;
  *(void *)int64_t v20 = "subscriberSeqNum";
  *((void *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v5 + 7 * v2);
  uint64_t v22 = (char *)v21 + v1[14];
  *uint64_t v21 = 8;
  *(void *)uint64_t v22 = "otherSaltVerifiedSubscriberParticipantIDs";
  *((void *)v22 + 1) = 41;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "participantID";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "seqNums";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "participantID";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "encryptionID";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "event";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "metadata";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "participantID";
  *((void *)v12 + 1) = 13;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "isSaltVerifiedID";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)uint64_t v6 = "SubscriberAdded";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "SubscriberRemoved";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "MetadataChanged";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_PublishRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_PublishRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "record";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "updatedEncryptionID";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "encryptionID";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_PublishResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_PublishResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "seqNumAck";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_UpsertTopicMetadataRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "metadata";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_UpsertTopicMetadataResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "topic";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "metadata";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "participantIDSalt";
  *((void *)v12 + 1) = 17;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "topicCategory";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113CA00;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)uint64_t v6 = "UNKNOWN";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)uint64_t v10 = "App";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "System";
  *((void *)v12 + 1) = 6;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "ScreenShare";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "FastSync";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "topicConfig";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  char *v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1142A10;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "maxRecordDataSizeBytes";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "maxPublishQueueSize";
  *(void *)(v10 + 8) = 19;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "maxDecryptionQueueSize";
  *((void *)v12 + 1) = 22;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "maxPrimaryRpcStreamTries";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "retryPrimaryRpcStreamIntervalMillis";
  *((void *)v16 + 1) = 35;
  unsigned char v16[16] = 2;
  v9();
  int64_t v17 = (void *)(v5 + 5 * v2);
  unint64_t v18 = (char *)v17 + v1[14];
  *int64_t v17 = 6;
  *(void *)unint64_t v18 = "maxRefreshDataCryptorTries";
  *((void *)v18 + 1) = 26;
  v18[16] = 2;
  v9();
  int64_t v19 = (void *)(v5 + 6 * v2);
  int64_t v20 = (char *)v19 + v1[14];
  *int64_t v19 = 7;
  *(void *)int64_t v20 = "refreshDataCryptorIntervalSeconds";
  *((void *)v20 + 1) = 33;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v5 + 7 * v2);
  uint64_t v22 = (char *)v21 + v1[14];
  *uint64_t v21 = 8;
  *(void *)uint64_t v22 = "gracefulShutdownWindowSeconds";
  *((void *)v22 + 1) = 29;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_FetchTopicsRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap);
  return _NameMap.init()();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_FetchTopicsResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B113A080;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "error";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "topics";
  *(void *)(v11 + 8) = 6;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DG_Datagram._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DG_Datagram._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A90;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)uint64_t v6 = "data";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)uint64_t v10 = "seqNum";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "EncryptionID";
  *((void *)v12 + 1) = 12;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "sentEpochMillis";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DG_SequenceNumber._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DG_SequenceNumber._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B1138A70;
  unint64_t v5 = (void *)(v4 + v3);
  uint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)uint64_t v6 = "senderParticipantID";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "seqNum";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DG_EncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DG_EncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B1138A80;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)unint64_t v4 = "uuid";
  *(void *)(v4 + 8) = 4;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B1138A80;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)unint64_t v4 = "developerMetadata";
  *(void *)(v4 + 8) = 17;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap);
}

uint64_t static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_CapabilityFlag._protobuf_nameMap, 0, (uint64_t)"UNSET", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_EncryptionID._protobuf_nameMap, 1, (uint64_t)"uuid", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap, 1, (uint64_t)"attachmentUUID", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap, 1, (uint64_t)"attachmentUUID", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_EncryptionID._protobuf_nameMap, (uint64_t)"uuid", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap, (uint64_t)"topicName", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap, (uint64_t)"topicName", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_SubscribeRequest.RecordAck._protobuf_nameMap, (uint64_t)"seqNumsAck", 10);
}

uint64_t AttachmentLedger_CapabilityFlag._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CapabilityFlag._protobuf_nameMap);
}

uint64_t static AttachmentLedger_CapabilityFlag._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CapabilityFlag._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CapabilityFlag@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CapabilityFlag._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AttachmentStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap, a1);
}

void *AttachmentLedger_MMCSMetadata.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_MMCSMetadata.protoMessageName;
}

unint64_t static AttachmentLedger_MMCSMetadata.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t AttachmentLedger_MMCSMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap);
}

uint64_t static AttachmentLedger_MMCSMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    unint64_t v9 = v3[1];
    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = *v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v10) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    unint64_t v11 = v3[3];
    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v12 = v3[2] & 0xFFFFFFFFFFFFLL;
    }
    if (v12) {
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    }
    uint64_t v13 = v3[4];
    unint64_t v14 = v3[5];
    switch(v14 >> 62)
    {
      case 1uLL:
        uint64_t v15 = (int)v13;
        uint64_t v16 = v13 >> 32;
        goto LABEL_17;
      case 2uLL:
        uint64_t v15 = *(void *)(v13 + 16);
        uint64_t v16 = *(void *)(v13 + 24);
LABEL_17:
        if (v15 != v16) {
          goto LABEL_18;
        }
        goto LABEL_19;
      case 3uLL:
        goto LABEL_19;
      default:
        if ((v14 & 0xFF000000000000) == 0) {
          goto LABEL_19;
        }
LABEL_18:
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
LABEL_19:
        uint64_t v17 = v3[6];
        unint64_t v18 = v3[7];
        switch(v18 >> 62)
        {
          case 1uLL:
            uint64_t v19 = (int)v17;
            uint64_t v20 = v17 >> 32;
            goto LABEL_24;
          case 2uLL:
            uint64_t v19 = *(void *)(v17 + 16);
            uint64_t v20 = *(void *)(v17 + 24);
LABEL_24:
            if (v19 != v20) {
              goto LABEL_25;
            }
            goto LABEL_26;
          case 3uLL:
            goto LABEL_26;
          default:
            if ((v18 & 0xFF000000000000) == 0) {
              goto LABEL_26;
            }
LABEL_25:
            dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
LABEL_26:
            type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            uint64_t result = UnknownStorage.traverse<A>(visitor:)();
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t closure #2 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Int AttachmentLedger_MMCSMetadata.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_MMCSMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(_OWORD *)(a2 + 32) = xmmword_1B113B700;
  *(_OWORD *)(a2 + 48) = xmmword_1B113B700;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 40);
  return v8(v6, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance AttachmentLedger_MMCSMetadata()
{
  return MEMORY[0x1F4127330]();
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_MMCSMetadata())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_MMCSMetadata()
{
  return AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.hash(into:) in conformance AttachmentLedger_MMCSMetadata()
{
  return MEMORY[0x1F4127398]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance AttachmentLedger_MMCSMetadata()
{
  return MEMORY[0x1F4127138]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_MMCSMetadata()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void one-time initialization function for protoMessageName()
{
  v0._uint64_t countAndFlagsBits = 0x746144626F6C422ELL;
  v0._object = (void *)0xE900000000000061;
  String.append(_:)(v0);
  static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName = 0xD00000000000001DLL;
  *(void *)algn_1E9B74468 = 0x80000001B115E660;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B115EEA0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName = 0xD000000000000024;
  unk_1E9B74550 = 0x80000001B115E7B0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEB00000000657A69;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName = 0xD000000000000021;
  unk_1E9B74590 = 0x80000001B115E7E0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x6D6863617474412ELL;
  v0._object = (void *)0xEE006B6341746E65;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName = 0xD000000000000021;
  *(void *)algn_1E9B745B8 = 0x80000001B115E7E0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEE006B6341657A69;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName = 0xD000000000000022;
  *(void *)algn_1E9B745F8 = 0x80000001B115E810;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName;
  char v2 = *(void *)algn_1E9B745F8;
  swift_bridgeObjectRetain();
  v0._object = (void *)0x80000001B115EC80;
  v0._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName = v1;
  unk_1E9B74620 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName;
  char v2 = *(void *)algn_1E9B745F8;
  swift_bridgeObjectRetain();
  v0._object = (void *)0x80000001B115EC50;
  v0._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName = v1;
  *(void *)algn_1E9B74648 = v2;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x70556369706F542ELL;
  v0._object = (void *)0xEC00000065746164;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName = 0xD000000000000022;
  unk_1E9B74670 = 0x80000001B115E810;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B115EBF0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName = 0xD000000000000022;
  unk_1E9B746B0 = 0x80000001B115E810;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  char v2 = unk_1E9B746B0;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x64656464412ELL;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName = v1;
  *(void *)algn_1E9B746D8 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName;
  char v2 = *(void *)algn_1E9B746D8;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 1801666862;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName = v1;
  unk_1E9B74700 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  char v2 = unk_1E9B746B0;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x6465766F6D65522ELL;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName = v1;
  *(void *)algn_1E9B74728 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  char v2 = unk_1E9B746B0;
  swift_bridgeObjectRetain();
  v0._object = (void *)0x80000001B115EB90;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName = v1;
  unk_1E9B74750 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName;
  char v2 = unk_1E9B74750;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 1801666862;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName = v1;
  *(void *)algn_1E9B74778 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName;
  char v2 = unk_1E9B74750;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x6C6C75462ELL;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName = v1;
  unk_1E9B747A0 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  char v2 = unk_1E9B746B0;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x437375746174532ELL;
  v0._object = (void *)0xEE006465676E6168;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName = v1;
  *(void *)algn_1E9B747C8 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName;
  char v2 = *(void *)algn_1E9B747C8;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 1801666862;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName = v1;
  unk_1E9B747F0 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName;
  char v2 = *(void *)algn_1E9B747C8;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x6C6C75462ELL;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName = v1;
  *(void *)algn_1E9B74818 = v2;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x6D6863617474412ELL;
  v0._object = (void *)0xEE00646441746E65;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName = 0xD000000000000028;
  *(void *)algn_1E9B74858 = 0x80000001B115E840;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B115EAE0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName = 0xD000000000000028;
  unk_1E9B74880 = 0x80000001B115E840;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B115EAC0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName = 0xD000000000000028;
  *(void *)algn_1E9B748A8 = 0x80000001B115E840;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName;
  char v2 = *(void *)algn_1E9B748A8;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x6E6961746E6F432ELL;
  v0._object = (void *)0xEA00000000007265;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName = v1;
  unk_1E9B748D0 = v2;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B115EA90;
  v0._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName = 0xD000000000000028;
  *(void *)algn_1E9B748F8 = 0x80000001B115E840;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  uint64_t v1 = static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName;
  char v2 = *(void *)algn_1E9B748F8;
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x6E6961746E6F432ELL;
  v0._object = (void *)0xEA00000000007265;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName = v1;
  unk_1E9B74920 = v2;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x74704F747365542ELL;
  v0._object = (void *)0xEB000000006E6F69;
  String.append(_:)(v0);
  static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName = 0xD000000000000024;
  *(void *)algn_1E9B749A8 = 0x80000001B115E8A0;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B1160970;
  v0._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName = 0xD00000000000001ALL;
  unk_1E9B74BA0 = 0x80000001B1160490;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B1160950;
  v0._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v0);
  static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName = 0xD00000000000001ALL;
  *(void *)algn_1E9B74BC8 = 0x80000001B1160490;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0xD000000000000015;
  v0._object = (void *)0x80000001B11608F0;
  String.append(_:)(v0);
  static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName = 0xD000000000000013;
  unk_1E9B74C20 = 0x80000001B11604B0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x616E696D7265542ELL;
  v0._object = (void *)0xEF6369706F546574;
  String.append(_:)(v0);
  static CP_TopicSubscribers.TerminateTopic.protoMessageName = 0xD000000000000013;
  *(void *)algn_1E9B74C48 = 0x80000001B11604B0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEB00000000657A69;
  String.append(_:)(v0);
  static CP_SubscribeRequest.Initialize.protoMessageName = 0xD000000000000013;
  unk_1E9B74CA0 = 0x80000001B11604D0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x4164726F6365522ELL;
  v0._object = (void *)0xEA00000000006B63;
  String.append(_:)(v0);
  static CP_SubscribeRequest.RecordAck.protoMessageName = 0xD000000000000013;
  *(void *)algn_1E9B74CC8 = 0x80000001B11604D0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEE006B6341657A69;
  String.append(_:)(v0);
  static CP_SubscribeResponse.InitializeAck.protoMessageName = 0xD000000000000014;
  *(void *)algn_1E9B74D08 = 0x80000001B11604F0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0x70556369706F542ELL;
  v0._object = (void *)0xEC00000065746164;
  String.append(_:)(v0);
  static CP_SubscribeResponse.TopicUpdate.protoMessageName = 0xD000000000000014;
  unk_1E9B74D80 = 0x80000001B11604F0;
}

{
  Swift::String v0;

  v0._uint64_t countAndFlagsBits = 0xD000000000000014;
  v0._object = (void *)0x80000001B1160710;
  String.append(_:)(v0);
  static CP_PublishRequest.UpdatedEncryptionID.protoMessageName = 0xD000000000000011;
  *(void *)algn_1E9B74DD8 = 0x80000001B1160510;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001B115EEA0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName = 0xD000000000000016;
  unk_1E9B74E90 = 0x80000001B11605B0;
}

uint64_t *AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName;
}

uint64_t static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap);
}

uint64_t static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    uint64_t v3 = v0[1];
    unint64_t v4 = v0[2];
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v1)
        {
LABEL_10:
          type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        }
        break;
    }
  }
  return result;
}

Swift::Int AttachmentLedger_MMCSMetadata.BlobData.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_MMCSMetadata.BlobData@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_MMCSMetadata.BlobData())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  return AttachmentLedger_MMCSMetadata.BlobData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  return AttachmentLedger_MMCSMetadata.BlobData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_MMCSMetadata.BlobData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_AttachmentMetadata.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AttachmentMetadata.protoMessageName;
}

unint64_t static AttachmentLedger_AttachmentMetadata.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t AttachmentLedger_AttachmentMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          closure #2 in AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          closure #3 in AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

uint64_t closure #3 in AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        if (!*(void *)(v3[2] + 16)
          || (type metadata accessor for ProtobufFixed64(),
              type metadata accessor for AttachmentLedger_AttachmentEncryption(0),
              lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption), lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption), uint64_t result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v4))
        {
          uint64_t result = closure #1 in AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
          if (!v4)
          {
            if (v3[3])
            {
              lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
              dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
            }
            uint64_t v11 = v3[5];
            unint64_t v12 = v3[6];
            switch(v12 >> 62)
            {
              case 1uLL:
                if ((int)v11 != v11 >> 32) {
                  goto LABEL_19;
                }
                break;
              case 2uLL:
                if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
                  goto LABEL_19;
                }
                break;
              case 3uLL:
                break;
              default:
                if ((v12 & 0xFF000000000000) != 0) {
LABEL_19:
                }
                  dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
                break;
            }
            type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
      return result;
  }
}

uint64_t closure #1 in AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

Swift::Int AttachmentLedger_AttachmentMetadata.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_AttachmentMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = xmmword_1B113B700;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AttachmentMetadata()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AttachmentMetadata()
{
  return AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AttachmentMetadata()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_AuthPutMaterials.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AuthPutMaterials.protoMessageName;
}

unint64_t static AttachmentLedger_AuthPutMaterials.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t AttachmentLedger_AuthPutMaterials._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AuthPutMaterials._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70F10]);
}

uint64_t AttachmentLedger_AuthPutMaterials.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = v0[5];
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!v0[6] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_AuthPutMaterials.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_AuthPutMaterials, &lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AuthPutMaterials@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AuthPutMaterials()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AuthPutMaterials()
{
  return AttachmentLedger_AuthPutMaterials.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AuthPutMaterials@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AuthPutMaterials()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_AttachmentAuthGetToken.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AttachmentAuthGetToken.protoMessageName;
}

unint64_t static AttachmentLedger_AttachmentAuthGetToken.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70EB8]);
}

uint64_t AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          a4(v4, a2, a3);
          break;
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        unint64_t v5 = v0[3];
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          unint64_t v7 = v0[5];
          uint64_t v8 = HIBYTE(v7) & 0xF;
          if ((v7 & 0x2000000000000000) == 0) {
            uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
          }
          if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            if (!v0[6] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
      return result;
  }
}

Swift::Int AttachmentLedger_AttachmentAuthGetToken.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentAuthGetToken@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  return 0xD000000000000027;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AttachmentAuthGetToken.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  return AttachmentLedger_AttachmentAuthGetToken.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentAuthGetToken@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_EncryptionID.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_EncryptionID.protoMessageName;
}

unint64_t static AttachmentLedger_EncryptionID.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t AttachmentLedger_EncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_EncryptionID._protobuf_nameMap);
}

uint64_t static AttachmentLedger_EncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_EncryptionID._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
  }
  return result;
}

uint64_t AttachmentLedger_EncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_EncryptionID.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Int AttachmentLedger_EncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_EncryptionID, &lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_EncryptionID@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1B113B700;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_EncryptionID()
{
  return 0xD00000000000001DLL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_EncryptionID())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_EncryptionID()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_EncryptionID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_EncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_EncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_EncryptionID()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_EncryptionID) & 1;
}

void *AttachmentLedger_AttachmentEncryption.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AttachmentEncryption.protoMessageName;
}

unint64_t static AttachmentLedger_AttachmentEncryption.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t AttachmentLedger_AttachmentEncryption._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentEncryption._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 1:
          closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = closure #1 in AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v6 = *v3;
    unint64_t v7 = v3[1];
    switch(v7 >> 62)
    {
      case 1uLL:
        if ((int)v6 != v6 >> 32) {
          goto LABEL_8;
        }
        break;
      case 2uLL:
        if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
          goto LABEL_8;
        }
        break;
      case 3uLL:
        break;
      default:
        if ((v7 & 0xFF000000000000) != 0) {
LABEL_8:
        }
          dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        break;
    }
    if (v3[2]) {
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    }
    type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Int AttachmentLedger_AttachmentEncryption.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_AttachmentEncryption, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption(a1, type metadata accessor for AttachmentLedger_EncryptionID, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AttachmentEncryption()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AttachmentEncryption()
{
  return AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AttachmentEncryption()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_ErrorResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_ErrorResponse.protoMessageName;
}

unint64_t static AttachmentLedger_ErrorResponse.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t AttachmentLedger_ErrorResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_ErrorResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_ErrorResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_ErrorResponse.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[3] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for AttachmentLedger_ErrorResponse(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_ErrorResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_ErrorResponse, &lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_ErrorResponse@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_ErrorResponse()
{
  return 0xD00000000000001ELL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_ErrorResponse())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_ErrorResponse()
{
  return AttachmentLedger_ErrorResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_ErrorResponse()
{
  return AttachmentLedger_ErrorResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ErrorResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_ErrorResponse()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_CreateTopicRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_CreateTopicRequest.protoMessageName;
}

unint64_t static AttachmentLedger_CreateTopicRequest.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t AttachmentLedger_CreateTopicRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_CreateTopicRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70F10]);
}

uint64_t AttachmentLedger_CreateTopicRequest.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AttachmentLedger_CreateTopicRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_CreateTopicRequest, &lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicRequest@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_CreateTopicRequest()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_CreateTopicRequest()
{
  return AttachmentLedger_CreateTopicRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CreateTopicRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_CreateTopicRequest()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_CreateTopicResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_CreateTopicResponse.protoMessageName;
}

unint64_t static AttachmentLedger_CreateTopicResponse.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t AttachmentLedger_CreateTopicResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_CreateTopicResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:));
}

uint64_t closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:), (void (*)(void *, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:), (void (*)(void))type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t closure #1 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v9 = *(void *)(Topic - 8);
  MEMORY[0x1F4188790](Topic);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Topic) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

Swift::Int AttachmentLedger_CreateTopicResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_CreateTopicResponse, &lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_CreateTopicResponse()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_CreateTopicResponse()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName;
}

uint64_t static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
}

uint64_t static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
      {
        if (!v0[3] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!v0[4] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_CreateTopicResponse.ClientTopicConfig.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, &lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_SubscribeRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_SubscribeRequest.protoMessageName;
}

unint64_t static AttachmentLedger_SubscribeRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t AttachmentLedger_SubscribeRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_EncryptionID);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_EncryptionID);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_EncryptionID);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_EncryptionID);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #3 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_8;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      closure #2 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(v0);
    }
    else {
      closure #3 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(v0);
    }
  }
  else
  {
    closure #1 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for AttachmentLedger_SubscribeRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeRequest, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeRequest()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeRequest()
{
  return AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeRequest()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeRequest.Initialize.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_6;
        case 2:
          uint64_t v4 = v3;
          closure #2 in AttachmentLedger_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)();
          goto LABEL_6;
        case 3:
          type metadata accessor for AttachmentLedger_EncryptionID(0);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          goto LABEL_6;
        case 5:
          type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      if (*(void *)(v3[2] + 16))
      {
        type metadata accessor for AttachmentLedger_EncryptionID(0);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      if (v3[3]) {
        dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
      }
      if (*(void *)(v3[4] + 16))
      {
        type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      if (v3[5]) {
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      }
      type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Int AttachmentLedger_SubscribeRequest.Initialize.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  a2[2] = MEMORY[0x1E4FBC860];
  a2[3] = 0;
  a2[4] = v4;
  a2[5] = 0;
  UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 40);
  uint64_t v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, 1, 1, v6);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeRequest.Initialize()
{
  return AttachmentLedger_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AttachmentLedger_SubscribeRequest.AttachmentAck.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest.AttachmentAck@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return AttachmentLedger_SubscribeRequest.AttachmentAck.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return AttachmentLedger_SubscribeRequest.AttachmentAck.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeRequest.AttachmentAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_SubscribeResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_SubscribeResponse.protoMessageName;
}

unint64_t static AttachmentLedger_SubscribeResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t AttachmentLedger_SubscribeResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:));
}

uint64_t AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = v6;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v7 || (v16 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        a6(v11, a1, a2, a3);
        break;
      case 2:
        a5(v11, a1, a2, a3);
        break;
      case 1:
        a4(v11, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_8;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1) {
      closure #2 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(v0);
    }
    else {
      closure #3 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(v0);
    }
  }
  else
  {
    closure #1 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for AttachmentLedger_SubscribeResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation, a1);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse()
{
  return AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_6;
        case 2:
          uint64_t v4 = v3;
          closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
          goto LABEL_6;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
          goto LABEL_5;
        case 5:
          type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 6:
          uint64_t v4 = v3;
          closure #6 in AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #6 in AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    uint64_t result = closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      if (*(void *)(v3[2] + 16)) {
        dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)();
      }
      if (*(void *)(v3[3] + 16))
      {
        type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      if (*(void *)(v3[4] + 16))
      {
        type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

Swift::Int AttachmentLedger_SubscribeResponse.InitializeAck.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v4;
  UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 36);
  uint64_t v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = a2 + *(int *)(a1 + 40);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  return v9(v7, 1, 1, v8);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v4))
  {
    uint64_t result = closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Int AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)((uint64_t)v5, a1, a2, a3);
    }
    else if (result == 1)
    {
      closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(a1, v5);
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v15 = xmmword_1B113B080;
  uint64_t result = dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  long long v8 = v15;
  if (v2) {
    return outlined consume of Data?(v15, *((unint64_t *)&v15 + 1));
  }
  if (*((void *)&v15 + 1) >> 60 != 15)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
    uint64_t v14 = *(void *)(v9 - 8);
    char v10 = *(uint64_t (**)(char *, uint64_t))(v14 + 48);
    uint64_t v16 = v9;
    int v11 = v10(v6, 1);
    outlined copy of Data._Representation(v8, *((unint64_t *)&v8 + 1));
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    if (v11 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined consume of Data?(v8, *((unint64_t *)&v8 + 1));
    outlined destroy of UUID?((uint64_t)a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    *a2 = v8;
    uint64_t v12 = v16;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(long long *, void, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v12);
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_2;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(v0);
    uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    if (!v1)
    {
LABEL_2:
      type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  else
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    uint64_t result = closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(v0);
    if (!v1) {
      goto LABEL_2;
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v7 = *v4;
    unint64_t v6 = v4[1];
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data._Representation(v7, v6);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, (uint64_t)&type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, MEMORY[0x1E4F70F40]);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, (uint64_t)&type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, MEMORY[0x1E4F70FA8], (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

Swift::Int AttachmentLedger_SubscribeResponse.TopicUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 3:
        closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 4:
        closure #4 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 10:
        type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #4 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1) {
    goto LABEL_13;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(v0);
      break;
    case 2u:
      closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(v0);
      break;
    case 3u:
      closure #4 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(v0);
      break;
    default:
      closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(v0);
      break;
  }
  uint64_t v2 = v1;
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  if (!v1)
  {
LABEL_13:
    if (!*(void *)(v0
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)))
      return UnknownStorage.traverse<A>(visitor:)();
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    if (!v2) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

uint64_t closure #4 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  *(void *)(a2 + *(int *)(a1 + 20)) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.decodeMessage<A>(decoder:)()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_EncryptionID.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t AttachmentLedger_EncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v7 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v5)
      {
LABEL_8:
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
      return result;
  }
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack) & 1;
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
              - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B1138A80;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = a3;
  *(void *)unint64_t v13 = a4;
  *(void *)(v13 + 8) = a5;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *MEMORY[0x1E4F70FB8];
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.decodeMessage<A>(decoder:)()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_EncryptionID.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed) & 1;
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:));
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      a5(v9, a1, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!v0[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.decodeMessage<A>(decoder:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        if (!v3[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v4))
        {
          uint64_t result = closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
          if (!v4)
          {
            type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
      return result;
  }
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption(a1, type metadata accessor for AttachmentLedger_AttachmentEncryption, a2);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_1B113B700;
  *(void *)(a3 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(v0);
  }
  else {
    closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(v0);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!v0[2]
          || (lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          if (!v0[4] || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
      return result;
  }
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.decodeMessage<A>(decoder:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        if (!v3[2]
          || (lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v4))
        {
          uint64_t result = closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
          if (!v4)
          {
            type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
      return result;
  }
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_1B113B700;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_UpdateAttachmentRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_UpdateAttachmentRequest.protoMessageName;
}

unint64_t static AttachmentLedger_UpdateAttachmentRequest.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 2:
        closure #2 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 3:
        closure #3 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      case 4:
        closure #4 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
        break;
      default:
        continue;
    }
  }
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  uint64_t v6 = *(void *)(updated - 8);
  uint64_t v7 = MEMORY[0x1F4188790](updated);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = updated;
  uint64_t v26 = updated;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      uint64_t v30 = v46;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(updated - 8);
  uint64_t v15 = MEMORY[0x1F4188790](updated);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, updated);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    uint64_t v29 = updated;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    uint64_t v29 = updated;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #3 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  uint64_t v6 = *(void *)(updated - 8);
  uint64_t v7 = MEMORY[0x1F4188790](updated);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = updated;
  uint64_t v26 = updated;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t closure #4 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  uint64_t v6 = *(void *)(updated - 8);
  uint64_t v7 = MEMORY[0x1F4188790](updated);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = updated;
  uint64_t v26 = updated;
  unint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    uint64_t v29 = v13;
  }
  else
  {
    int64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, v30, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  }
  uint64_t v34 = v42;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, v42, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
    return outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  }
  else
  {
    uint64_t v35 = v41;
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v34, v41, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
    uint64_t v36 = v40;
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, v36, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v4, 1, updated) == 1) {
    goto LABEL_8;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      closure #2 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(v0);
      break;
    case 2u:
      closure #3 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(v0);
      break;
    case 3u:
      closure #4 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(v0);
      break;
    default:
      closure #1 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(v0);
      break;
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  MEMORY[0x1F4188790](updated);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v4, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  MEMORY[0x1F4188790](updated);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #4 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  MEMORY[0x1F4188790](updated);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  }
  uint64_t result = outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  return 0xD000000000000028;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  return AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70F10], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:));
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:), (void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70EB8]);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAttachmentMetadataRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(char *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove) & 1;
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70F10], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.decodeMessage<A>(decoder:));
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:), (void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v9 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, updated) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, a2);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v6 = (char *)a3 + *(int *)(a1 + 24);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70EB8], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.decodeMessage<A>(decoder:));
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v4)
      {
LABEL_8:
        uint64_t result = closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1B113B700;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70F10], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.decodeMessage<A>(decoder:));
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      a5(a1, v9, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a2, a3);
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:), (void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t), void (*a5)(void))
{
  unint64_t v12 = v5[1];
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v6))
  {
    uint64_t result = a4(v5, a1, a2, a3);
    if (!v6)
    {
      a5(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v9 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, updated) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!v0[2]
          || (lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          uint64_t v5 = v0[4];
          unint64_t v6 = v0[5];
          switch(v6 >> 62)
          {
            case 1uLL:
              if ((int)v5 != v5 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v6 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
              if (!v1)
              {
LABEL_17:
                type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
                uint64_t result = UnknownStorage.traverse<A>(visitor:)();
              }
              break;
          }
        }
      }
      return result;
  }
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B113B700;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1B113B700;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_UpdateAttachmentResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_UpdateAttachmentResponse.protoMessageName;
}

unint64_t static AttachmentLedger_UpdateAttachmentResponse.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in AttachmentLedger_UpdateAttachmentResponse.decodeMessage<A>(decoder:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    uint64_t result = closure #1 in AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

Swift::Int AttachmentLedger_UpdateAttachmentResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentResponse()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentResponse()
{
  return AttachmentLedger_UpdateAttachmentResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentResponse()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_GetAuthTokenRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAuthTokenRequest.protoMessageName;
}

unint64_t static AttachmentLedger_GetAuthTokenRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          closure #4 in AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*v5
    || (lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    unint64_t v10 = v5[3];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      if (!*(void *)(v5[4] + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v4))
      {
        uint64_t result = closure #1 in AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v9 = *(void *)(AuthToken - 8);
  MEMORY[0x1F4188790](AuthToken);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, AuthToken) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

Swift::Int AttachmentLedger_GetAuthTokenRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_GetAuthTokenRequest, &lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_GetAuthTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 32);
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AuthToken - 8) + 56);
  return v6(v4, 1, 1, AuthToken);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAuthTokenRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_ErrorResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAuthTokenRequest()
{
  return AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAuthTokenRequest()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest.Action@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap, a1);
}

uint64_t *AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1) {
    swift_once();
  }
  return &static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName;
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName);
}

uint64_t static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, (uint64_t)&type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, MEMORY[0x1E4F70F30]);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v7)
  {
    while ((v13 & 1) == 0)
    {
      if (result == 2)
      {
        a6(v6 + 16, a2, a3);
      }
      else if (result == 1)
      {
        a4();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, (uint64_t)&type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, MEMORY[0x1E4F70FA0], (void (*)(void))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a7)(void))
{
  if (!*v7 || (a4(a1, a2), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v8))
  {
    uint64_t v14 = v7[2];
    if (!v14 || (uint64_t result = a6(v14, 2, a2, a3), !v8))
    {
      a7(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AttachmentLedger_GetAuthTokenRequest.TestOption.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, &lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenRequest.TestOption.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenRequest.TestOption.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest.TestOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_GetAuthTokenResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAuthTokenResponse.protoMessageName;
}

unint64_t static AttachmentLedger_GetAuthTokenResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          closure #2 in AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          closure #3 in AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    uint64_t result = closure #1 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      if (*(void *)(v3[2] + 16))
      {
        type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 32), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

Swift::Int AttachmentLedger_GetAuthTokenResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAuthTokenResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAuthTokenResponse()
{
  return AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAuthTokenResponse()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

void *AttachmentLedger_GetAttachmentMetadataRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAttachmentMetadataRequest.protoMessageName;
}

unint64_t static AttachmentLedger_GetAttachmentMetadataRequest.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3, MEMORY[0x1E4F70EB8]);
}

uint64_t AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        a4(v4 + 16, a2, a3);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    uint64_t v10 = v4[2];
    unint64_t v11 = v4[3];
    switch(v11 >> 62)
    {
      case 1uLL:
        if ((int)v10 != v10 >> 32) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 2uLL:
        if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_12;
      default:
        if ((v11 & 0xFF000000000000) == 0) {
          goto LABEL_12;
        }
LABEL_11:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v5)
        {
LABEL_12:
          a4(0);
          uint64_t result = UnknownStorage.traverse<A>(visitor:)();
        }
        break;
    }
  }
  return result;
}

uint64_t static AttachmentLedger_GetAttachmentMetadataRequest.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest) & 1;
}

Swift::Int AttachmentLedger_GetAttachmentMetadataRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, &lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1B113B700;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAttachmentMetadataRequest()
{
  return 0xD00000000000002DLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_MMCSMetadata.BlobData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAttachmentMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAttachmentMetadataRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAttachmentMetadataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAttachmentMetadataRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAttachmentMetadataRequest()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAttachmentMetadataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_GetAttachmentMetadataRequest(char *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest) & 1;
}

void *AttachmentLedger_GetAttachmentMetadataResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAttachmentMetadataResponse.protoMessageName;
}

unint64_t static AttachmentLedger_GetAttachmentMetadataResponse.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap);
}

uint64_t AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap, a1);
}

uint64_t static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:));
}

uint64_t AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v5;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v15 = v6;
  if (!v6)
  {
    while (1)
    {
      if (v14) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v16 = v15;
        a4(a1, v9, a2, a3);
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
        uint64_t v16 = v15;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v16 = v15;
    a5(a1, v9, a2, a3);
LABEL_5:
    uint64_t v15 = v16;
    goto LABEL_6;
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:), (void (*)(void *, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:), (void (*)(void))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t, uint64_t), void (*a5)(void *, uint64_t, uint64_t, uint64_t), void (*a6)(void))
{
  if (!*v6
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v7))
  {
    uint64_t result = a4(v6, a1, a2, a3);
    if (!v7)
    {
      a5(v6, a1, a2, a3);
      a6(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AttachmentMetadataResponse + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AttachmentMetadataResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Int AttachmentLedger_GetAttachmentMetadataResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter((void (*)(void))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

Swift::Int AttachmentLedger_MMCSMetadata.hashValue.getter(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_GetAttachmentMetadataResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata, a2);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  UnknownStorage.init()();
  uint64_t v6 = a3 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a3 + *(int *)(a1 + 28);
  uint64_t v9 = a2(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAttachmentMetadataResponse()
{
  return 0xD00000000000002ELL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_EncryptionID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
  return MEMORY[0x1F4127150](a1, a2, v4);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAttachmentMetadataResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAttachmentMetadataResponse()
{
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttachmentLedger_MMCSMetadata()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
  return MEMORY[0x1F4127398](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttachmentLedger_MMCSMetadata()
{
  return Hasher._finalize()();
}

uint64_t specialized static AttachmentLedger_GetAuthTokenResponse.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v80 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v70 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v68 = (char *)&v65 - v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v75 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v71 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?));
  MEMORY[0x1F4188790](v73);
  uint64_t v77 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v72 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v78 = (uint64_t)&v65 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v74 = (uint64_t)&v65 - v15;
  uint64_t v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v65 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v65 - v30;
  uint64_t v79 = a1;
  uint64_t v32 = *a1;
  uint64_t v33 = v80;
  uint64_t v34 = *v80;
  if (*((unsigned char *)v80 + 8) == 1)
  {
    switch(v34)
    {
      case 1:
        if (v32 != 1) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 2:
        if (v32 != 2) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 3:
        if (v32 != 3) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 4:
        if (v32 != 4) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 5:
        if (v32 != 5) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 6:
        if (v32 != 6) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 7:
        if (v32 != 7) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 8:
        if (v32 != 8) {
          goto LABEL_20;
        }
        goto LABEL_6;
      default:
        if (!v32) {
          goto LABEL_6;
        }
        goto LABEL_20;
    }
  }
  if (v32 != v34) {
    goto LABEL_20;
  }
LABEL_6:
  uint64_t v65 = v3;
  uint64_t v66 = v19;
  uint64_t AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v79 + *(int *)(AuthTokenResponse + 28), (uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v67 = AuthTokenResponse;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v33 + *(int *)(AuthTokenResponse + 28), (uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v36 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v29, v36, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v37((uint64_t)v22, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v37(v36, 1, v16) == 1)
    {
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      goto LABEL_13;
    }
LABEL_11:
    int64_t v38 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
    uint64_t v39 = (uint64_t)v22;
LABEL_19:
    outlined destroy of UUID?(v39, v38);
    goto LABEL_20;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v37(v36, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_11;
  }
  uint64_t v40 = v66;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v36, (uint64_t)v66, type metadata accessor for AttachmentLedger_ErrorResponse);
  char v41 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v26, v40);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v40, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((v41 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v42 = v67;
  uint64_t v43 = v33;
  uint64_t v44 = (char *)v79;
  uint64_t v45 = v74;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v79 + *(int *)(v67 + 32), v74, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v46 = v43;
  uint64_t v47 = v78;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v43 + *(int *)(v42 + 32), v78, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v48 = v77;
  uint64_t v49 = v77 + *(int *)(v73 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v45, v77, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v47, v49, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v50 = v76;
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  if (v51(v48, 1, v76) != 1)
  {
    uint64_t v52 = v72;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v48, (uint64_t)v72, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    if (v51(v49, 1, v50) != 1)
    {
      os_log_t v55 = v71;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v49, (uint64_t)v71, type metadata accessor for AttachmentLedger_AuthPutMaterials);
      char v56 = specialized static AttachmentLedger_AuthPutMaterials.== infix(_:_:)(v52, v55);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v55, type metadata accessor for AttachmentLedger_AuthPutMaterials);
      outlined destroy of UUID?(v78, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v52, type metadata accessor for AttachmentLedger_AuthPutMaterials);
      outlined destroy of UUID?(v48, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      if ((v56 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_39;
    }
    outlined destroy of UUID?(v78, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v52, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_18;
  }
  outlined destroy of UUID?(v47, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if (v51(v49, 1, v50) != 1)
  {
LABEL_18:
    int64_t v38 = &demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?);
    uint64_t v39 = v48;
    goto LABEL_19;
  }
  outlined destroy of UUID?(v48, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
LABEL_39:
  uint64_t v57 = (char *)v46;
  if (specialized static Array<A>.== infix(_:_:)(*((void *)v44 + 2), v46[2]))
  {
    uint64_t v59 = v67;
    uint64_t v58 = v68;
    uint64_t v60 = v70;
    unint64_t v61 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
    uint64_t v62 = v65;
    v61(v68, &v44[*(int *)(v67 + 24)], v65);
    uint64_t v63 = v69;
    v61(v69, &v57[*(int *)(v59 + 24)], v62);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v64 = *(void (**)(char *, uint64_t))(v60 + 8);
    v64(v63, v62);
    v64(v58, v62);
    return v53 & 1;
  }
LABEL_20:
  char v53 = 0;
  return v53 & 1;
}

uint64_t specialized static AttachmentLedger_GetAuthTokenRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v45 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v44 = (char *)&v40 - v7;
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v47 = *(void *)(AuthToken - 8);
  MEMORY[0x1F4188790](AuthToken);
  uint64_t v10 = (uint64_t *)((char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_GetAuthTokenRequest.TestOption?, AttachmentLedger_GetAuthTokenRequest.TestOption?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v40 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v23 = *a1;
  uint64_t v24 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v23 = *a1 != 0;
  }
  if (*((unsigned char *)a2 + 8) == 1)
  {
    if (v24)
    {
      if (v23 != 1) {
        goto LABEL_20;
      }
    }
    else if (v23)
    {
      goto LABEL_20;
    }
  }
  else if (v23 != v24)
  {
    goto LABEL_20;
  }
  uint64_t v43 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]))
    {
      uint64_t AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      uint64_t v41 = AuthTokenRequest;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(AuthTokenRequest + 32), (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      uint64_t v42 = v27;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
      if (v28((uint64_t)v13, 1, AuthToken) == 1)
      {
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        if (v28(v42, 1, AuthToken) == 1)
        {
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
LABEL_23:
          uint64_t v31 = v41;
          uint64_t v32 = (uint64_t)a1 + *(int *)(v41 + 28);
          uint64_t v33 = v46;
          uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
          uint64_t v35 = v43;
          uint64_t v36 = v44;
          v34(v44, v32, v43);
          uint64_t v37 = (uint64_t)a2 + *(int *)(v31 + 28);
          int64_t v38 = v45;
          v34(v45, v37, v35);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
          v39(v38, v35);
          v39(v36, v35);
          return v25 & 1;
        }
        goto LABEL_19;
      }
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      if (v28(v42, 1, AuthToken) == 1)
      {
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
LABEL_19:
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_GetAuthTokenRequest.TestOption?, AttachmentLedger_GetAuthTokenRequest.TestOption?));
        goto LABEL_20;
      }
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v42, (uint64_t)v10, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
      char v30 = specialized static AttachmentLedger_GetAuthTokenRequest.TestOption.== infix(_:_:)(v17, v10);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v10, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      if (v30) {
        goto LABEL_23;
      }
    }
LABEL_20:
    char v25 = 0;
  }
  return v25 & 1;
}

uint64_t specialized static AttachmentLedger_GetAuthTokenRequest.TestOption.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_12;
        }
        goto LABEL_14;
      case 2:
        if (v11 == 2) {
          goto LABEL_12;
        }
        goto LABEL_14;
      case 3:
        if (v11 == 3) {
          goto LABEL_12;
        }
        goto LABEL_14;
      default:
        if (!v11) {
          goto LABEL_12;
        }
        goto LABEL_14;
    }
  }
  if (v11 != v12) {
    goto LABEL_14;
  }
LABEL_12:
  if (*((void *)a1 + 2) != a2[2])
  {
LABEL_14:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, &a1[*(int *)(AuthToken + 24)], v4);
  v14(v8, (char *)a2 + *(int *)(AuthToken + 24), v4);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_CreateTopicResponse.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v75 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v65 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v64 = (char *)&v60 - v6;
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v71 = *(void *)(Topic - 8);
  uint64_t v72 = Topic;
  MEMORY[0x1F4188790](Topic);
  uint64_t v63 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, AttachmentLedger_CreateTopicResponse.ClientTopicConfig?));
  MEMORY[0x1F4188790](v68);
  uint64_t v73 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v67 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v69 = (uint64_t)&v60 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v70 = (uint64_t)&v60 - v15;
  uint64_t v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v60 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v60 - v30;
  uint64_t v74 = a1;
  uint64_t v32 = *(void *)a1;
  uint64_t v33 = *v75;
  if (*((unsigned char *)v75 + 8) == 1)
  {
    switch(v33)
    {
      case 1:
        if (v32 != 1) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 2:
        if (v32 != 2) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 3:
        if (v32 != 3) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 4:
        if (v32 != 4) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 5:
        if (v32 != 5) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 6:
        if (v32 != 6) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 7:
        if (v32 != 7) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 8:
        if (v32 != 8) {
          goto LABEL_20;
        }
        goto LABEL_6;
      default:
        if (!v32) {
          goto LABEL_6;
        }
        goto LABEL_20;
    }
  }
  if (v32 != v33) {
    goto LABEL_20;
  }
LABEL_6:
  uint64_t v61 = v3;
  uint64_t TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(TopicResponse + 24)], (uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v62 = TopicResponse;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v75 + *(int *)(TopicResponse + 24), (uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v35 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v29, v35, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v36((uint64_t)v22, 1, v16) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v36(v35, 1, v16) != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, (uint64_t)v19, type metadata accessor for AttachmentLedger_ErrorResponse);
      char v39 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v26, v19);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v19, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      if ((v39 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_11:
    uint64_t v37 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
    uint64_t v38 = (uint64_t)v22;
LABEL_19:
    outlined destroy of UUID?(v38, v37);
    goto LABEL_20;
  }
  outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v36(v35, 1, v16) != 1) {
    goto LABEL_11;
  }
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
LABEL_13:
  uint64_t v40 = v62;
  uint64_t v41 = v70;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(v62 + 28)], v70, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v42 = v69;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v75 + *(int *)(v40 + 28), v69, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v43 = v73;
  uint64_t v44 = v73 + *(int *)(v68 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, v73, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, v44, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  uint64_t v45 = v72;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  if (v46(v43, 1, v72) == 1)
  {
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    if (v46(v44, 1, v45) == 1)
    {
      outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
LABEL_39:
      uint64_t v52 = v61;
      uint64_t v53 = v62;
      uint64_t v54 = v66;
      os_log_t v55 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
      char v56 = v64;
      v55(v64, &v74[*(int *)(v62 + 20)], v61);
      uint64_t v57 = (char *)v75 + *(int *)(v53 + 20);
      uint64_t v58 = v65;
      v55(v65, v57, v52);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v59 = *(void (**)(char *, uint64_t))(v54 + 8);
      v59(v58, v52);
      v59(v56, v52);
      return v48 & 1;
    }
    goto LABEL_18;
  }
  uint64_t v47 = v67;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v43, (uint64_t)v67, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if (v46(v44, 1, v45) == 1)
  {
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v47, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
LABEL_18:
    uint64_t v37 = &demangling cache variable for type metadata for (AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    uint64_t v38 = v43;
    goto LABEL_19;
  }
  uint64_t v50 = v63;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v44, (uint64_t)v63, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  char v51 = specialized static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(v47, v50);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v50, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v47, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if (v51) {
    goto LABEL_39;
  }
LABEL_20:
  char v48 = 0;
  return v48 & 1;
}

uint64_t specialized static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
    && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3)
    && *((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4))
  {
    uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(Topic + 36)], v4);
    v12(v8, &a2[*(int *)(Topic + 36)], v4);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AttachmentLedger_CreateTopicRequest.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      uint64_t TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, &a1[*(int *)(TopicRequest + 24)], v4);
      v15(v8, &a2[*(int *)(TopicRequest + 24)], v4);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation?, AttachmentLedger_SubscribeResponse.OneOf_Operation?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v38, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      char v27 = specialized static AttachmentLedger_SubscribeResponse.OneOf_Operation.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation?, AttachmentLedger_SubscribeResponse.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1F4188790](v3 - 8);
  char v34 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v34 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (uint64_t **)((char *)&v34 - v18);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation, AttachmentLedger_SubscribeResponse.OneOf_Operation));
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v23, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(v35, v24, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v23, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
        char v26 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.== infix(_:_:)((uint64_t)v17, (uint64_t)v7);
        char v27 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate;
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
        uint64_t v28 = (uint64_t)v17;
LABEL_9:
        uint64_t v32 = v27;
LABEL_14:
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v28, v32);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v23, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
        return v26 & 1;
      }
      uint64_t v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate;
      uint64_t v30 = (uint64_t)v17;
    }
    else
    {
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v23, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v31 = v34;
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, (uint64_t)v34, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
        char v26 = specialized static AttachmentLedger_SubscribeResponse.TopicUpdate.== infix(_:_:)(v14, v31);
        char v27 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate;
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v31, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
        uint64_t v28 = (uint64_t)v14;
        goto LABEL_9;
      }
      uint64_t v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate;
      uint64_t v30 = (uint64_t)v14;
    }
  }
  else
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v23, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, (uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      char v26 = specialized static AttachmentLedger_SubscribeResponse.InitializeAck.== infix(_:_:)(v19, v10);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      uint64_t v28 = (uint64_t)v19;
      uint64_t v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck;
      goto LABEL_14;
    }
    uint64_t v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck;
    uint64_t v30 = (uint64_t)v19;
  }
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v30, v29);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation, AttachmentLedger_SubscribeResponse.OneOf_Operation));
  char v26 = 0;
  return v26 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v69 = (char *)&v66 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v68 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?));
  MEMORY[0x1F4188790](v72);
  uint64_t v76 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v71 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v79 = (uint64_t)&v66 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v73 = (uint64_t)&v66 - v16;
  uint64_t v17 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  char v27 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  uint64_t v30 = (char *)&v66 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v66 - v31;
  uint64_t v80 = a1;
  unint64_t v81 = a2;
  uint64_t v33 = *a1;
  uint64_t v34 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v34)
    {
      case 1:
        if (v33 != 1) {
          goto LABEL_35;
        }
        goto LABEL_6;
      case 2:
        if (v33 != 2) {
          goto LABEL_35;
        }
        goto LABEL_6;
      case 3:
        if (v33 != 3) {
          goto LABEL_35;
        }
        goto LABEL_6;
      case 4:
        if (v33 != 4) {
          goto LABEL_35;
        }
        goto LABEL_6;
      case 5:
        if (v33 != 5) {
          goto LABEL_35;
        }
        goto LABEL_6;
      case 6:
        if (v33 != 6) {
          goto LABEL_35;
        }
        goto LABEL_6;
      case 7:
        if (v33 != 7) {
          goto LABEL_35;
        }
        goto LABEL_6;
      case 8:
        if (v33 != 8) {
          goto LABEL_35;
        }
        goto LABEL_6;
      default:
        if (!v33) {
          goto LABEL_6;
        }
        goto LABEL_35;
    }
  }
  if (v33 != v34) {
    goto LABEL_35;
  }
LABEL_6:
  uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v80 + *(int *)(v35 + 36), (uint64_t)v32, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v67 = v35;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v81 + *(int *)(v35 + 36), (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v36 = (uint64_t)&v23[*(int *)(v21 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32, (uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, v36, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v37((uint64_t)v23, 1, v17) == 1)
  {
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v32, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v37(v36, 1, v17) == 1)
    {
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      goto LABEL_14;
    }
LABEL_11:
    uint64_t v38 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
    uint64_t v39 = (uint64_t)v23;
LABEL_12:
    outlined destroy of UUID?(v39, v38);
    goto LABEL_35;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v27, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v37(v36, 1, v17) == 1)
  {
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v32, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v27, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_11;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v36, (uint64_t)v20, type metadata accessor for AttachmentLedger_ErrorResponse);
  char v40 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v27, v20);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v20, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v32, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v27, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((v40 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_14:
  uint64_t v41 = v80;
  uint64_t v42 = v81;
  if (!specialized static Array<A>.== infix(_:_:)((void *)v80[2], (void *)v81[2])
    || (specialized static Array<A>.== infix(_:_:)(v41[3], v42[3]) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v41[4], v42[4]) & 1) == 0)
  {
    goto LABEL_35;
  }
  uint64_t v43 = v67;
  uint64_t v44 = v73;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v41 + *(int *)(v67 + 40), v73, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v45 = v79;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v42 + *(int *)(v43 + 40), v79, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v46 = v76;
  uint64_t v47 = v76 + *(int *)(v72 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v44, v76, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v45, v47, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v48 = v75;
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (v49(v46, 1, v75) == 1)
  {
    outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    int v50 = v49(v47, 1, v48);
    uint64_t v52 = v77;
    uint64_t v51 = v78;
    if (v50 == 1)
    {
      outlined destroy of UUID?(v46, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
LABEL_41:
      uint64_t v59 = v67;
      uint64_t v60 = (uint64_t)v41 + *(int *)(v67 + 32);
      uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
      uint64_t v62 = v69;
      v61(v69, v60, v51);
      uint64_t v63 = (uint64_t)v42 + *(int *)(v59 + 32);
      uint64_t v64 = v70;
      v61(v70, v63, v51);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v65 = *(void (**)(char *, uint64_t))(v52 + 8);
      v65(v64, v51);
      v65(v62, v51);
      return v53 & 1;
    }
    goto LABEL_39;
  }
  os_log_t v55 = v71;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, (uint64_t)v71, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  int v56 = v49(v47, 1, v48);
  uint64_t v52 = v77;
  uint64_t v51 = v78;
  if (v56 == 1)
  {
    outlined destroy of UUID?(v79, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v55, type metadata accessor for AttachmentLedger_AuthPutMaterials);
LABEL_39:
    uint64_t v38 = &demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?);
    uint64_t v39 = v46;
    goto LABEL_12;
  }
  uint64_t v57 = v68;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v47, (uint64_t)v68, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  char v58 = specialized static AttachmentLedger_AuthPutMaterials.== infix(_:_:)(v55, v57);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v57, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  outlined destroy of UUID?(v79, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v55, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  outlined destroy of UUID?(v46, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if (v58) {
    goto LABEL_41;
  }
LABEL_35:
  char v53 = 0;
  return v53 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int v50 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  uint64_t v54 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v45 - v22;
  if (*(void *)a1 != *(void *)a2) {
    goto LABEL_13;
  }
  uint64_t v46 = v12;
  uint64_t v48 = v8;
  uint64_t v49 = v21;
  uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  uint64_t v25 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&a1[*(int *)(v24 + 24)], (uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v26 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&a2[*(int *)(v24 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v28 = v53;
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  int v30 = v29(v15, 1, v53);
  uint64_t v47 = v26;
  if (v30 != 1)
  {
    uint64_t v33 = v49;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, v49, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    if (v29((char *)v27, 1, v28) != 1)
    {
      uint64_t v31 = v24;
      uint64_t v36 = (uint64_t)v46;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t)v46, type metadata accessor for AttachmentLedger_EncryptionID);
      if (specialized static Data.== infix(_:_:)(*(void *)v33, *(void *)(v33 + 8), *(void *)v36, *(void *)(v36 + 8)))
      {
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        uint64_t v32 = v52;
        char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v36, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v49, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        if (v37) {
          goto LABEL_10;
        }
LABEL_13:
        char v42 = 0;
        return v42 & 1;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v36, type metadata accessor for AttachmentLedger_EncryptionID);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v33, type metadata accessor for AttachmentLedger_EncryptionID);
      uint64_t v35 = (uint64_t)v15;
      uint64_t v34 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
LABEL_12:
      outlined destroy of UUID?(v35, v34);
      goto LABEL_13;
    }
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v33, type metadata accessor for AttachmentLedger_EncryptionID);
LABEL_7:
    uint64_t v34 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
    uint64_t v35 = (uint64_t)v15;
    goto LABEL_12;
  }
  outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if (v29((char *)v27, 1, v28) != 1) {
    goto LABEL_7;
  }
  uint64_t v31 = v24;
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v32 = v52;
LABEL_10:
  uint64_t v38 = v51;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  char v40 = v48;
  v39(v48, &v25[*(int *)(v31 + 20)], v32);
  uint64_t v41 = v50;
  v39(v50, &v47[*(int *)(v31 + 20)], v32);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v41, v32);
  v43(v40, v32);
  return v42 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v38, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      char v27 = specialized static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (uint64_t *)((char *)&v24 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content));
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t *)&v16[*(int *)(v14 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a2, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v16, (uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig((uint64_t)v17, (uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      char v18 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v10, (uint64_t)v6);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_9:
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      return v18 & 1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  else
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v16, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    uint64_t v19 = *v12;
    unint64_t v20 = v12[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v21 = *v17;
      unint64_t v22 = v17[1];
      char v18 = specialized static Data.== infix(_:_:)(v19, v20, v21, v22);
      outlined consume of Data._Representation(v21, v22);
      outlined consume of Data._Representation(v19, v20);
      goto LABEL_9;
    }
    outlined consume of Data._Representation(v19, v20);
  }
  outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content));
  char v18 = 0;
  return v18 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.TopicUpdate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v11 = *a1 != 0;
  }
  if (*((unsigned char *)a2 + 8) != 1)
  {
    if (v11 == v12) {
      goto LABEL_10;
    }
LABEL_12:
    char v15 = 0;
    return v15 & 1;
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (v11 != 1) {
    goto LABEL_12;
  }
LABEL_10:
  if (a1[2] != a2[2]) {
    goto LABEL_12;
  }
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, (char *)a1 + *(int *)(v13 + 24), v4);
  v14(v8, (char *)a2 + *(int *)(v13 + 24), v4);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v40 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v45 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v40 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v46 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v40 - v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v47 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    if (v25(v24, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  if (v25(v24, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?));
LABEL_10:
    char v37 = 0;
    return v37 & 1;
  }
  uint64_t v26 = v45;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v45, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  char v27 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event.== infix(_:_:)((uint64_t)v18, v26);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  if ((v27 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  uint64_t v29 = v47;
  if (*(void *)(v46 + *(int *)(v28 + 20)) != *(void *)(v47 + *(int *)(v28 + 20))) {
    goto LABEL_10;
  }
  uint64_t v30 = v28;
  uint64_t v32 = v43;
  uint64_t v31 = v44;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  char v34 = v41;
  v33(v41, v46 + *(int *)(v28 + 24), v44);
  uint64_t v35 = v29 + *(int *)(v30 + 24);
  uint64_t v36 = v42;
  v33(v42, v35, v31);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v36, v31);
  v38(v34, v31);
  return v37 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v38, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      char v27 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) != 0 && a1[2] == a2[2])
  {
    uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 24), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v58 = *(void *)(v4 - 8);
  uint64_t v59 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v60 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v61 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v50 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v50 - v22;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    goto LABEL_9;
  }
  os_log_t v55 = v21;
  int v56 = v23;
  uint64_t v53 = v8;
  uint64_t v54 = v18;
  uint64_t v52 = v11;
  uint64_t v57 = v14;
  uint64_t v24 = v61;
  if (a1[2] != a2[2]) {
    goto LABEL_9;
  }
  uint64_t v25 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  uint64_t v26 = (uint64_t)v56;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v25 + 28), (uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v51 = v25;
  uint64_t v27 = (uint64_t)v55;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v25 + 28), (uint64_t)v55, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v28 = *(int *)(v12 + 48);
  uint64_t v29 = (uint64_t)v57;
  uint64_t v30 = (uint64_t)&v57[v28];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v26, (uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v27, v30, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  uint64_t v32 = v9;
  int v33 = v31(v29, 1, v9);
  char v34 = a1;
  if (v33 == 1)
  {
    outlined destroy of UUID?(v27, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?(v26, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if (v31(v30, 1, v32) == 1)
    {
      outlined destroy of UUID?((uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      uint64_t v35 = v60;
LABEL_12:
      uint64_t v43 = v51;
      uint64_t v44 = (char *)v34 + *(int *)(v51 + 24);
      uint64_t v46 = v58;
      uint64_t v45 = v59;
      uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      uint64_t v48 = v53;
      v47(v53, v44, v59);
      v47(v35, (char *)a2 + *(int *)(v43 + 24), v45);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v49 = *(void (**)(char *, uint64_t))(v46 + 8);
      v49(v35, v45);
      v49(v48, v45);
      return v39 & 1;
    }
    goto LABEL_8;
  }
  uint64_t v36 = (uint64_t)v54;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29, (uint64_t)v54, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  int v37 = v31(v30, 1, v32);
  uint64_t v38 = v29;
  uint64_t v35 = v60;
  if (v37 == 1)
  {
    outlined destroy of UUID?(v27, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v36, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_8:
    outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
    goto LABEL_9;
  }
  uint64_t v41 = (uint64_t)v52;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v52, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  char v42 = specialized static AttachmentLedger_AttachmentEncryption.== infix(_:_:)(v36, v41);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v41, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?(v27, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of UUID?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v36, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?(v38, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if (v42) {
    goto LABEL_12;
  }
LABEL_9:
  char v39 = 0;
  return v39 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)((char *)&v24 - v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type));
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(v25, v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v19, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      char v20 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.== infix(_:_:)(v14, v8);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      return v20 & 1;
    }
    uint64_t v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full;
    uint64_t v22 = (uint64_t)v14;
    goto LABEL_10;
  }
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack;
    uint64_t v22 = (uint64_t)v12;
LABEL_10:
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v22, v21);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type));
LABEL_13:
    char v20 = 0;
    return v20 & 1;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v19, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  if ((specialized static Data.== infix(_:_:)(*v12, v12[1], *v5, v5[1]) & 1) == 0
    || v12[2] != v5[2]
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_13;
  }
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  char v20 = 1;
  return v20 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v38, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      char v27 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  int v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_13;
        }
        goto LABEL_15;
      case 2:
        if (v11 == 2) {
          goto LABEL_13;
        }
        goto LABEL_15;
      case 3:
        if (v11 == 3) {
          goto LABEL_13;
        }
        goto LABEL_15;
      default:
        if (!v11) {
          goto LABEL_13;
        }
        goto LABEL_15;
    }
  }
  if (v11 != v12) {
    goto LABEL_15;
  }
LABEL_13:
  if (a1[4] != *(void *)(a2 + 32))
  {
LABEL_15:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, (char *)a1 + *(int *)(v13 + 28), v4);
  v14(v8, (char *)(a2 + *(int *)(v13 + 28)), v4);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v59 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v50 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v50 - v22;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v54 = v23;
  os_log_t v55 = (uint64_t *)v21;
  uint64_t v51 = v11;
  uint64_t v52 = v8;
  uint64_t v53 = v18;
  uint64_t v24 = a1[2];
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = a2;
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    uint64_t v27 = (uint64_t)v55;
    uint64_t v28 = (uint64_t)v14;
    uint64_t v29 = v59;
    uint64_t v30 = v9;
    switch(v25)
    {
      case 1:
        if (v24 != 1) {
          goto LABEL_26;
        }
        goto LABEL_7;
      case 2:
        if (v24 != 2) {
          goto LABEL_26;
        }
        goto LABEL_7;
      case 3:
        if (v24 != 3) {
          goto LABEL_26;
        }
        goto LABEL_7;
      default:
        if (!v24) {
          goto LABEL_7;
        }
        goto LABEL_26;
    }
  }
  uint64_t v28 = (uint64_t)v14;
  uint64_t v30 = v9;
  uint64_t v27 = (uint64_t)v55;
  uint64_t v29 = v59;
  if (v24 != v25) {
    goto LABEL_26;
  }
LABEL_7:
  uint64_t v31 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  uint64_t v32 = (uint64_t)v54;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v31 + 28), (uint64_t)v54, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v59 = v31;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v26 + *(int *)(v31 + 28), v27, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v33 = v28 + *(int *)(v12 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v32, v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v27, v33, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  char v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  if (v34(v28, 1, v30) != 1)
  {
    uint64_t v44 = v53;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v28, (uint64_t)v53, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    if (v34(v33, 1, v30) != 1)
    {
      uint64_t v47 = v51;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v33, (uint64_t)v51, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      if (*v44 == *v47 && (specialized static Data.== infix(_:_:)(v44[1], v44[2], v47[1], v47[2]) & 1) != 0)
      {
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v47, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        outlined destroy of UUID?((uint64_t)v55, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v44, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        outlined destroy of UUID?(v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        if (v48) {
          goto LABEL_10;
        }
LABEL_26:
        char v42 = 0;
        return v42 & 1;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v47, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      outlined destroy of UUID?((uint64_t)v55, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v44, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      uint64_t v46 = v28;
      uint64_t v45 = &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?;
LABEL_25:
      outlined destroy of UUID?(v46, v45);
      goto LABEL_26;
    }
    outlined destroy of UUID?(v27, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v44, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_13:
    uint64_t v45 = &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?);
    uint64_t v46 = v28;
    goto LABEL_25;
  }
  os_log_t v55 = a1;
  outlined destroy of UUID?(v27, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v34(v33, 1, v30) != 1) {
    goto LABEL_13;
  }
  outlined destroy of UUID?(v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  a1 = v55;
LABEL_10:
  uint64_t v35 = v58;
  uint64_t v36 = v59;
  uint64_t v37 = v57;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  uint64_t v39 = v52;
  v38(v52, (char *)a1 + *(int *)(v59 + 24), v58);
  uint64_t v40 = (char *)(v26 + *(int *)(v36 + 24));
  uint64_t v41 = v56;
  v38(v56, v40, v35);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v37 + 8);
  v43(v41, v35);
  v43(v39, v35);
  return v42 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (uint64_t *)((char *)&v27 - v14);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content));
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a2, v20, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v19, (uint64_t)v13, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v20, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      char v21 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.== infix(_:_:)(v13, (uint64_t)v6);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      uint64_t v22 = (uint64_t)v13;
      uint64_t v23 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack;
LABEL_9:
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v22, v23);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      return v21 & 1;
    }
    uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack;
    uint64_t v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v19, (uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v20, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      char v21 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.== infix(_:_:)(v15, (uint64_t)v9);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      uint64_t v22 = (uint64_t)v15;
      uint64_t v23 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full;
      goto LABEL_9;
    }
    uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full;
    uint64_t v25 = (uint64_t)v15;
  }
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v25, v24);
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content));
  char v21 = 0;
  return v21 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)((char *)&v24 - v13);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content));
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(v25, v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v19, (uint64_t)v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      char v20 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v14, (uint64_t)v8);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      return v20 & 1;
    }
    char v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    uint64_t v22 = (uint64_t)v14;
    goto LABEL_9;
  }
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    char v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack;
    uint64_t v22 = (uint64_t)v12;
LABEL_9:
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v22, v21);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content));
LABEL_12:
    char v20 = 0;
    return v20 & 1;
  }
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v19, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  if ((specialized static Data.== infix(_:_:)(*(void *)v12, *((void *)v12 + 1), *(void *)v5, *((void *)v5 + 1)) & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_12;
  }
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  char v20 = 1;
  return v20 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  char v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v38, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      char v27 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  MEMORY[0x1F4188790](v38);
  uint64_t v39 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v37 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event));
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = (uint64_t)&v26[*(int *)(v24 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(v41, (uint64_t)v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(v42, v27, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v20, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed;
        uint64_t v29 = (uint64_t)v20;
        goto LABEL_16;
      }
      uint64_t v35 = v39;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, v39, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      if ((specialized static Data.== infix(_:_:)(*(void *)v20, *((void *)v20 + 1), *(void *)v35, *(void *)(v35 + 8)) & 1) == 0|| (type metadata accessor for UnknownStorage(), lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
      {
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v20, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
        goto LABEL_17;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v20, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      char v30 = 1;
      return v30 & 1;
    case 2u:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
        char v30 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.== infix(_:_:)((uint64_t)v17, (uint64_t)v6);
        uint64_t v31 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated;
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
        uint64_t v32 = (uint64_t)v17;
        goto LABEL_8;
      }
      uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated;
      uint64_t v29 = (uint64_t)v17;
      goto LABEL_16;
    case 3u:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged;
        uint64_t v29 = (uint64_t)v14;
        goto LABEL_16;
      }
      uint64_t v33 = v40;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      char v30 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.== infix(_:_:)((uint64_t)v14, v33);
      uint64_t v31 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged;
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v33, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      uint64_t v32 = (uint64_t)v14;
LABEL_8:
      char v34 = v31;
      goto LABEL_19;
    default:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v22, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added;
        uint64_t v29 = (uint64_t)v22;
LABEL_16:
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v29, v28);
        outlined destroy of UUID?((uint64_t)v26, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event));
LABEL_17:
        char v30 = 0;
      }
      else
      {
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
        char v30 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.== infix(_:_:)((uint64_t)v22, (uint64_t)v10);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
        uint64_t v32 = (uint64_t)v22;
        char v34 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added;
LABEL_19:
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v32, v34);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      }
      return v30 & 1;
  }
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation?, AttachmentLedger_SubscribeRequest.OneOf_Operation?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v38, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      char v27 = specialized static AttachmentLedger_SubscribeRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation?, AttachmentLedger_SubscribeRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v34 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation, AttachmentLedger_SubscribeRequest.OneOf_Operation));
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t)&v21[*(int *)(v19 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a1, (uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(a2, v22, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v22, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      char v30 = specialized static AttachmentLedger_SubscribeRequest.Initialize.== infix(_:_:)(v17, v8);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      return v30 & 1;
    }
    char v27 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize;
    uint64_t v28 = (uint64_t)v17;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 1)
  {
    outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v29 = v36;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v22, (uint64_t)v36, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      if ((specialized static Array<A>.== infix(_:_:)(*v12, *v29) & 1) != 0 && v12[1] == v29[1])
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v25 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck;
          outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v29, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
          uint64_t v26 = (uint64_t)v12;
          goto LABEL_14;
        }
      }
      uint64_t v31 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck;
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v29, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      uint64_t v32 = (uint64_t)v12;
      goto LABEL_20;
    }
    char v27 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck;
    uint64_t v28 = (uint64_t)v12;
LABEL_17:
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v28, v27);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation, AttachmentLedger_SubscribeRequest.OneOf_Operation));
LABEL_21:
    char v30 = 0;
    return v30 & 1;
  }
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, (uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    char v27 = type metadata accessor for AttachmentLedger_EncryptionID;
    uint64_t v28 = (uint64_t)v15;
    goto LABEL_17;
  }
  uint64_t v24 = v37;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v22, v37, type metadata accessor for AttachmentLedger_EncryptionID);
  if ((specialized static Data.== infix(_:_:)(*(void *)v15, *((void *)v15 + 1), *(void *)v24, *(void *)(v24 + 8)) & 1) == 0|| (type metadata accessor for UnknownStorage(), lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    uint64_t v31 = type metadata accessor for AttachmentLedger_EncryptionID;
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v24, type metadata accessor for AttachmentLedger_EncryptionID);
    uint64_t v32 = (uint64_t)v15;
LABEL_20:
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v32, v31);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_21;
  }
  uint64_t v25 = type metadata accessor for AttachmentLedger_EncryptionID;
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v24, type metadata accessor for AttachmentLedger_EncryptionID);
  uint64_t v26 = (uint64_t)v15;
LABEL_14:
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, v25);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  char v30 = 1;
  return v30 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.Initialize.== infix(_:_:)(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v53 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v52 = (char *)&v49 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v49 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v49 - v22;
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *((void *)a1 + 1);
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  int v56 = a2;
  if (v24 == v26 && v25 == v27 || (char v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v29 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    char v30 = a1;
    uint64_t v31 = v29;
    uint64_t v32 = *(int *)(v29 + 40);
    uint64_t v51 = v30;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v30[v32], (uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v50 = v31;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v56 + *(int *)(v31 + 40), (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v33 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v33, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v34((uint64_t)v14, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      if (v34(v33, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
LABEL_7:
        uint64_t v35 = v51;
        uint64_t v36 = v56;
        if ((specialized static Array<A>.== infix(_:_:)(*((void *)v51 + 2), v56[2]) & 1) != 0
          && *((void *)v35 + 3) == v36[3]
          && (specialized static Array<A>.== infix(_:_:)(*((void *)v35 + 4), v36[4]) & 1) != 0
          && *((void *)v35 + 5) == v36[5])
        {
          uint64_t v37 = v50;
          uint64_t v39 = v54;
          uint64_t v38 = v55;
          uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
          uint64_t v41 = v52;
          v40(v52, &v35[*(int *)(v50 + 36)], v55);
          uint64_t v42 = (char *)v36 + *(int *)(v37 + 36);
          uint64_t v43 = v53;
          v40(v53, v42, v38);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v44 = *(void (**)(char *, uint64_t))(v39 + 8);
          v44(v43, v38);
          v44(v41, v38);
          return v28 & 1;
        }
LABEL_20:
        char v28 = 0;
        return v28 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      if (v34(v33, 1, v8) != 1)
      {
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v33, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
        if (specialized static Data.== infix(_:_:)(*(void *)v18, *((void *)v18 + 1), *(void *)v11, *((void *)v11 + 1)))
        {
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
          outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_EncryptionID);
          outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          if ((v47 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_EncryptionID);
        uint64_t v46 = (uint64_t)v14;
        uint64_t v45 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
LABEL_19:
        outlined destroy of UUID?(v46, v45);
        goto LABEL_20;
      }
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_EncryptionID);
    }
    uint64_t v45 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
    uint64_t v46 = (uint64_t)v14;
    goto LABEL_19;
  }
  return v28 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.AttachmentAck.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0 && a1[1] == a2[1])
  {
    uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 24), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AttachmentLedger_AuthPutMaterials.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((void *)a1 + 4) == *((void *)a2 + 4) && *((void *)a1 + 5) == *((void *)a2 + 5)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*((void *)a1 + 6) == *((void *)a2 + 6))
        {
          uint64_t v14 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
          uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v15(v10, &a1[*(int *)(v14 + 32)], v4);
          v15(v8, &a2[*(int *)(v14 + 32)], v4);
          lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
          char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
          v16(v8, v4);
          v16(v10, v4);
        }
        else
        {
          char v12 = 0;
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static AttachmentLedger_MMCSMetadata.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v71 = type metadata accessor for UnknownStorage();
  uint64_t v69 = *(void *)(v71 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v71);
  uint64_t v68 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v67 = (char *)&v67 - v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v80 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v70 = (char **)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  uint64_t v73 = (char **)((char *)&v67 - v10);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?));
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v74 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v67 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v72 = (char **)((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v78 = (uint64_t)&v67 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v79 = (uint64_t)&v67 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char **)((char *)&v67 - v24);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  char v28 = (char *)&v67 - v27;
  MEMORY[0x1F4188790](v26);
  char v30 = (char *)&v67 - v29;
  uint64_t v31 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v32 = *(int *)(v31 + 36);
  uint64_t v75 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + v32, (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v76 = a2;
  uint64_t v77 = v31;
  uint64_t v33 = *(int *)(v31 + 36);
  uint64_t v34 = v7;
  uint64_t v35 = v80;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + v33, (uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v36 = (uint64_t)&v15[*(int *)(v11 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v36, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  uint64_t v38 = v35 + 48;
  uint64_t v37 = v39;
  if (v39((uint64_t)v15, 1, v34) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    if (v37(v36, 1, v34) == 1)
    {
      uint64_t v80 = v38;
      outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v37(v36, 1, v34) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v25, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_18:
    uint64_t v58 = &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?);
    uint64_t v59 = (uint64_t)v15;
LABEL_32:
    outlined destroy of UUID?(v59, v58);
    goto LABEL_33;
  }
  uint64_t v60 = v36;
  uint64_t v61 = v73;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v60, (uint64_t)v73, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  if (*v25 != *v61 || (specialized static Data.== infix(_:_:)(v25[1], v25[2], v61[1], v61[2]) & 1) == 0)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v61, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v25, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    uint64_t v59 = (uint64_t)v15;
    uint64_t v58 = &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?;
    goto LABEL_32;
  }
  uint64_t v80 = v38;
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v61, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v25, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((v62 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v40 = v34;
  uint64_t v41 = v77;
  uint64_t v42 = v75;
  uint64_t v43 = v79;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v75 + *(int *)(v77 + 40), v79, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v44 = v76;
  uint64_t v45 = v78;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v76 + *(int *)(v41 + 40), v78, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  uint64_t v46 = v74;
  uint64_t v47 = v74 + *(int *)(v11 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v43, v74, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v45, v47, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v37(v46, 1, v40) == 1)
  {
    outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    if (v37(v47, 1, v40) == 1)
    {
      outlined destroy of UUID?(v46, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      goto LABEL_7;
    }
    goto LABEL_26;
  }
  uint64_t v63 = v72;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, (uint64_t)v72, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v37(v47, 1, v40) == 1)
  {
    outlined destroy of UUID?(v78, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v79, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v63, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_26:
    uint64_t v58 = &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?);
    uint64_t v59 = v46;
    goto LABEL_32;
  }
  uint64_t v64 = v70;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v47, (uint64_t)v70, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  if (*v63 != *v64 || (specialized static Data.== infix(_:_:)(v63[1], v63[2], v64[1], v64[2]) & 1) == 0)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v64, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    outlined destroy of UUID?(v78, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v79, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v63, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    uint64_t v59 = v46;
    uint64_t v58 = &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?;
    goto LABEL_32;
  }
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v64, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?(v78, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of UUID?(v79, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v63, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?(v46, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((v65 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_7:
  if (*v42 == *v44 && v42[1] == v44[1] || (char v48 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v42[2] == v44[2] && v42[3] == v44[3] || (char v48 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Data.== infix(_:_:)(v42[4], v42[5], v44[4], v44[5]) & 1) != 0
        && (specialized static Data.== infix(_:_:)(v42[6], v42[7], v44[6], v44[7]) & 1) != 0)
      {
        uint64_t v49 = v77;
        uint64_t v50 = (char *)v42 + *(int *)(v77 + 32);
        uint64_t v51 = v69;
        uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
        uint64_t v53 = v67;
        uint64_t v54 = v71;
        v52(v67, v50, v71);
        uint64_t v55 = (char *)v44 + *(int *)(v49 + 32);
        int v56 = v68;
        v52(v68, v55, v54);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v57 = *(void (**)(char *, uint64_t))(v51 + 8);
        v57(v56, v54);
        v57(v53, v54);
        return v48 & 1;
      }
LABEL_33:
      char v48 = 0;
    }
  }
  return v48 & 1;
}

uint64_t specialized static AttachmentLedger_MMCSMetadata.BlobData.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && (specialized static Data.== infix(_:_:)(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  if (specialized static Data.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v12, a1 + *(int *)(v13 + 20), v6);
    v14(v10, a2 + *(int *)(v13 + 20), v6);
    lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentResponse.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v45 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v44 = (char *)&v40 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v43 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v40 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v47 = a1;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v24)
    {
      case 1:
        if (v23 != 1) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case 2:
        if (v23 != 2) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case 3:
        if (v23 != 3) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case 4:
        if (v23 != 4) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case 5:
        if (v23 != 5) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case 6:
        if (v23 != 6) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case 7:
        if (v23 != 7) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case 8:
        if (v23 != 8) {
          goto LABEL_12;
        }
        goto LABEL_6;
      default:
        if (!v23) {
          goto LABEL_6;
        }
        goto LABEL_12;
    }
  }
  if (v23 != v24) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v42 = v4;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v47[*(int *)(updated + 24)], (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v41 = updated;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(updated + 24), (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v26 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v26, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v27(v26, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
LABEL_15:
      uint64_t v33 = v41;
      uint64_t v32 = v42;
      uint64_t v34 = v46;
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
      uint64_t v36 = v44;
      v35(v44, &v47[*(int *)(v41 + 20)], v42);
      uint64_t v37 = (char *)a2 + *(int *)(v33 + 20);
      uint64_t v38 = v45;
      v35(v45, v37, v32);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
      v39(v38, v32);
      v39(v36, v32);
      return v28 & 1;
    }
    goto LABEL_11;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v27(v26, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_11:
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
    goto LABEL_12;
  }
  char v30 = v43;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v26, (uint64_t)v43, type metadata accessor for AttachmentLedger_ErrorResponse);
  char v31 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v17, v30);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v30, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v31) {
    goto LABEL_15;
  }
LABEL_12:
  char v28 = 0;
  return v28 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v9 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?));
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v37 - v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, updated) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    if (v25(v24, 1, updated) != 1)
    {
      uint64_t v26 = v38;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v24, v38, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      char v27 = specialized static AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v18, v26);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v26, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v18, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  if (v25(v24, 1, updated) != 1) {
    goto LABEL_6;
  }
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_8:
  uint64_t v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  char v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  MEMORY[0x1F4188790](updated - 8);
  uint64_t v39 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (uint64_t *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (uint64_t *)((char *)&v37 - v19);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation));
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = (uint64_t)&v26[*(int *)(v24 + 56)];
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(v41, (uint64_t)v26, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(v42, v27, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v20, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove;
        uint64_t v29 = (uint64_t)v20;
        goto LABEL_18;
      }
      uint64_t v30 = v40;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t)v40, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
      if ((*v20 != *v30 || v20[1] != v30[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (specialized static Data.== infix(_:_:)(v20[2], v20[3], v30[2], v30[3]) & 1) == 0
        || (type metadata accessor for UnknownStorage(),
            lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
      {
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v30, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v20, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
        goto LABEL_19;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v30, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v20, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      char v31 = 1;
      return v31 & 1;
    case 2u:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
        char v31 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.== infix(_:_:)(v17, v6);
        uint64_t v32 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate;
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
        uint64_t v33 = (uint64_t)v17;
        goto LABEL_22;
      }
      uint64_t v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate;
      uint64_t v29 = (uint64_t)v17;
      goto LABEL_18;
    case 3u:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v14, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        char v34 = v39;
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t)v39, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
        char v31 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.== infix(_:_:)(v14, v34);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v34, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
        uint64_t v33 = (uint64_t)v14;
        uint64_t v35 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate;
        goto LABEL_23;
      }
      uint64_t v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate;
      uint64_t v29 = (uint64_t)v14;
      goto LABEL_18;
    default:
      outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, (uint64_t)v22, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd;
        uint64_t v29 = (uint64_t)v22;
LABEL_18:
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v29, v28);
        outlined destroy of UUID?((uint64_t)v26, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation));
LABEL_19:
        char v31 = 0;
      }
      else
      {
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, (uint64_t)v10, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
        char v31 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.== infix(_:_:)(v22, v10);
        uint64_t v32 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd;
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v10, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
        uint64_t v33 = (uint64_t)v22;
LABEL_22:
        uint64_t v35 = v32;
LABEL_23:
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v33, v35);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      }
      return v31 & 1;
  }
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v38 - v7;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v9 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v38 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v39 = v4;
    uint64_t v26 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v44[*(int *)(v26 + 24)], (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v45[*(int *)(v26 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, updated) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      if (v28(v27, 1, updated) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
LABEL_11:
        uint64_t v31 = v43;
        uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        uint64_t v33 = v41;
        uint64_t v34 = v39;
        v32(v41, &v44[*(int *)(v26 + 20)], v39);
        uint64_t v35 = v42;
        v32(v42, &v45[*(int *)(v26 + 20)], v34);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
        v36(v35, v34);
        v36(v33, v34);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      if (v28(v27, 1, updated) != 1)
      {
        uint64_t v29 = v40;
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, v40, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
        char v30 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.== infix(_:_:)(v17, v29);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v29, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        if (v30) {
          goto LABEL_11;
        }
LABEL_12:
        char v25 = 0;
        return v25 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?));
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v11 = a1[2];
  uint64_t v12 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_13;
        }
        goto LABEL_15;
      case 2:
        if (v11 == 2) {
          goto LABEL_13;
        }
        goto LABEL_15;
      case 3:
        if (v11 == 3) {
          goto LABEL_13;
        }
        goto LABEL_15;
      default:
        if (!v11) {
          goto LABEL_13;
        }
        goto LABEL_15;
    }
  }
  if (v11 != v12) {
    goto LABEL_15;
  }
LABEL_13:
  if ((specialized static Data.== infix(_:_:)(a1[4], a1[5], *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) == 0)
  {
LABEL_15:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, (char *)a1 + *(int *)(updated + 28), v4);
  v14(v8, (char *)(a2 + *(int *)(updated + 28)), v4);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v38 - v7;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  uint64_t v9 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v38 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v39 = v4;
    uint64_t v26 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v44[*(int *)(v26 + 24)], (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v45[*(int *)(v26 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, updated) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      if (v28(v27, 1, updated) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
LABEL_11:
        uint64_t v31 = v43;
        uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        uint64_t v33 = v41;
        uint64_t v34 = v39;
        v32(v41, &v44[*(int *)(v26 + 20)], v39);
        uint64_t v35 = v42;
        v32(v42, &v45[*(int *)(v26 + 20)], v34);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
        v36(v35, v34);
        v36(v33, v34);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      if (v28(v27, 1, updated) != 1)
      {
        uint64_t v29 = v40;
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, v40, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
        char v30 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.== infix(_:_:)(v17, v29);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v29, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
        if (v30) {
          goto LABEL_11;
        }
LABEL_12:
        char v25 = 0;
        return v25 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?));
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v48 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v45 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v24 = *a1;
  unint64_t v25 = a1[1];
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  if ((specialized static Data.== infix(_:_:)(v24, v25, *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v46 = v8;
  uint64_t v47 = v18;
  uint64_t v45 = v11;
  uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v26 + *(int *)(updated + 24), (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + *(int *)(updated + 24), (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v29, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  char v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  uint64_t v31 = (uint64_t)v14;
  if (v30((uint64_t)v14, 1, v52) == 1)
  {
    uint64_t v51 = v27;
    uint64_t v32 = updated;
    outlined destroy of UUID?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if (v30(v29, 1, v52) == 1)
    {
      outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
LABEL_11:
      uint64_t v40 = v49;
      uint64_t v39 = v50;
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      uint64_t v42 = v46;
      v41(v46, (char *)v26 + *(int *)(v32 + 20), v50);
      uint64_t v43 = v48;
      v41(v48, (char *)(v51 + *(int *)(v32 + 20)), v39);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v43, v39);
      v44(v42, v39);
      return v35 & 1;
    }
    goto LABEL_7;
  }
  uint64_t v33 = (uint64_t)v14;
  uint64_t v34 = (uint64_t)v47;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)v47, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if (v30(v29, 1, v52) == 1)
  {
    outlined destroy of UUID?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v34, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    outlined destroy of UUID?(v31, &demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
    goto LABEL_8;
  }
  uint64_t v51 = v27;
  uint64_t v32 = updated;
  uint64_t v37 = (uint64_t)v45;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v29, (uint64_t)v45, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  char v38 = specialized static AttachmentLedger_AttachmentEncryption.== infix(_:_:)(v34, v37);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v37, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of UUID?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v34, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?(v31, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if (v38) {
    goto LABEL_11;
  }
LABEL_8:
  char v35 = 0;
  return v35 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (char *)&v38 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v38 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  if (v23 == *(void *)a2 && v24 == *((void *)a2 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v39 = v4;
    uint64_t updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v44[*(int *)(updated + 24)], (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v45[*(int *)(updated + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v28((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      if (v28(v27, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
LABEL_11:
        uint64_t v31 = v43;
        uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
        uint64_t v33 = v41;
        uint64_t v34 = v39;
        v32(v41, &v44[*(int *)(updated + 20)], v39);
        char v35 = v42;
        v32(v42, &v45[*(int *)(updated + 20)], v34);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
        v36(v35, v34);
        v36(v33, v34);
        return v25 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      if (v28(v27, 1, v8) != 1)
      {
        uint64_t v29 = v40;
        outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v27, v40, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        char v30 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v17, v29);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v29, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        if (v30) {
          goto LABEL_11;
        }
LABEL_12:
        char v25 = 0;
        return v25 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?));
    goto LABEL_12;
  }
  return v25 & 1;
}

uint64_t specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3))
    {
      uint64_t v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, &a1[*(int *)(v13 + 28)], v4);
      v14(v8, &a2[*(int *)(v13 + 28)], v4);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static AttachmentLedger_GetAttachmentMetadataResponse.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v75 = a2;
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  char v65 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v64 = (char *)&v60 - v6;
  uint64_t v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v71 = *(void *)(v7 - 8);
  uint64_t v72 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v63 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?));
  MEMORY[0x1F4188790](v68);
  uint64_t v73 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v67 = (uint64_t *)((char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v69 = (uint64_t)&v60 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v70 = (uint64_t)&v60 - v15;
  uint64_t v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v60 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v60 - v30;
  uint64_t v74 = a1;
  uint64_t v32 = *(void *)a1;
  uint64_t v33 = *v75;
  if (*((unsigned char *)v75 + 8) == 1)
  {
    switch(v33)
    {
      case 1:
        if (v32 != 1) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 2:
        if (v32 != 2) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 3:
        if (v32 != 3) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 4:
        if (v32 != 4) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 5:
        if (v32 != 5) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 6:
        if (v32 != 6) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 7:
        if (v32 != 7) {
          goto LABEL_20;
        }
        goto LABEL_6;
      case 8:
        if (v32 != 8) {
          goto LABEL_20;
        }
        goto LABEL_6;
      default:
        if (!v32) {
          goto LABEL_6;
        }
        goto LABEL_20;
    }
  }
  if (v32 != v33) {
    goto LABEL_20;
  }
LABEL_6:
  uint64_t v61 = v3;
  uint64_t AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(AttachmentMetadataResponse + 24)], (uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v62 = AttachmentMetadataResponse;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v75 + *(int *)(AttachmentMetadataResponse + 24), (uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v35 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v29, v35, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v36((uint64_t)v22, 1, v16) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v36(v35, 1, v16) != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v35, (uint64_t)v19, type metadata accessor for AttachmentLedger_ErrorResponse);
      char v39 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v26, v19);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v19, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      if ((v39 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_13;
    }
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v26, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_11:
    uint64_t v37 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
    uint64_t v38 = (uint64_t)v22;
LABEL_19:
    outlined destroy of UUID?(v38, v37);
    goto LABEL_20;
  }
  outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v36(v35, 1, v16) != 1) {
    goto LABEL_11;
  }
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
LABEL_13:
  uint64_t v40 = v62;
  uint64_t v41 = v70;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(v62 + 28)], v70, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v42 = v69;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v75 + *(int *)(v40 + 28), v69, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v43 = v73;
  uint64_t v44 = v73 + *(int *)(v68 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, v73, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, v44, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  uint64_t v45 = v72;
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  if (v46(v43, 1, v72) == 1)
  {
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    if (v46(v44, 1, v45) == 1)
    {
      outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
LABEL_39:
      uint64_t v52 = v61;
      uint64_t v53 = v62;
      uint64_t v54 = v66;
      uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
      int v56 = v64;
      v55(v64, &v74[*(int *)(v62 + 20)], v61);
      uint64_t v57 = (char *)v75 + *(int *)(v53 + 20);
      uint64_t v58 = v65;
      v55(v65, v57, v52);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v59 = *(void (**)(char *, uint64_t))(v54 + 8);
      v59(v58, v52);
      v59(v56, v52);
      return v48 & 1;
    }
    goto LABEL_18;
  }
  uint64_t v47 = v67;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v43, (uint64_t)v67, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if (v46(v44, 1, v45) == 1)
  {
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v47, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_18:
    uint64_t v37 = &demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?);
    uint64_t v38 = v43;
    goto LABEL_19;
  }
  uint64_t v50 = v63;
  outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v44, v63, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  char v51 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v47, v50);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v50, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v47, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if (v51) {
    goto LABEL_39;
  }
LABEL_20:
  char v48 = 0;
  return v48 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (specialized static Data.== infix(_:_:)(*((void *)a1 + 2), *((void *)a1 + 3), *((void *)a2 + 2), *((void *)a2 + 3)))
    {
      uint64_t v15 = a3(0);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v16(v12, &a1[*(int *)(v15 + 24)], v6);
      v16(v10, &a2[*(int *)(v15 + 24)], v6);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
      v17(v10, v6);
      v17(v12, v6);
    }
    else
    {
      char v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(void *)(v4 - 8);
  uint64_t v60 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v58 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v50 - v7;
  uint64_t v9 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v61 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata?, AttachmentLedger_MMCSMetadata?));
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v50 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v50 - v22;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v53 = v18;
  uint64_t v54 = v21;
  int v56 = v23;
  uint64_t v57 = v14;
  char v51 = v11;
  uint64_t v52 = v8;
  uint64_t v55 = v9;
  uint64_t v24 = v61;
  if ((specialized static Dictionary<>.== infix(_:_:)(a1[2], *(void *)(a2 + 16)) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v25 = a2;
  uint64_t v26 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  uint64_t v27 = (uint64_t)v56;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v26 + 36), (uint64_t)v56, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v50 = v26;
  uint64_t v28 = (uint64_t)v54;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + *(int *)(v26 + 36), (uint64_t)v54, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v29 = (uint64_t)v57;
  uint64_t v30 = (uint64_t)&v57[*(int *)(v12 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v27, (uint64_t)v57, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v28, v30, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  uint64_t v32 = v55;
  if (v31(v29, 1, v55) != 1)
  {
    uint64_t v33 = v25;
    uint64_t v34 = v53;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29, (uint64_t)v53, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    if (v31(v30, 1, v32) != 1)
    {
      uint64_t v37 = v51;
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v30, (uint64_t)v51, type metadata accessor for AttachmentLedger_MMCSMetadata);
      char v38 = specialized static AttachmentLedger_MMCSMetadata.== infix(_:_:)(v34, v37);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v37, type metadata accessor for AttachmentLedger_MMCSMetadata);
      outlined destroy of UUID?(v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      outlined destroy of UUID?((uint64_t)v56, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v34, type metadata accessor for AttachmentLedger_MMCSMetadata);
      outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      uint64_t v25 = v33;
      if ((v38 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_12;
    }
    outlined destroy of UUID?(v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    outlined destroy of UUID?((uint64_t)v56, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v34, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_8:
    outlined destroy of UUID?(v29, &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata?, AttachmentLedger_MMCSMetadata?));
    goto LABEL_9;
  }
  outlined destroy of UUID?(v28, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  uint64_t v29 = (uint64_t)v57;
  outlined destroy of UUID?(v27, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  if (v31(v30, 1, v32) != 1) {
    goto LABEL_8;
  }
  outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
LABEL_12:
  uint64_t v39 = v50;
  uint64_t v40 = a1[3];
  uint64_t v41 = *(void *)(v25 + 24);
  if (*(unsigned char *)(v25 + 32) == 1)
  {
    uint64_t v43 = v59;
    uint64_t v42 = v60;
    uint64_t v44 = v58;
    uint64_t v45 = v52;
    switch(v41)
    {
      case 1:
        if (v40 == 1) {
          goto LABEL_23;
        }
        goto LABEL_9;
      case 2:
        if (v40 == 2) {
          goto LABEL_23;
        }
        goto LABEL_9;
      case 3:
        if (v40 == 3) {
          goto LABEL_23;
        }
        goto LABEL_9;
      default:
        if (!v40) {
          goto LABEL_23;
        }
        goto LABEL_9;
    }
  }
  uint64_t v43 = v59;
  uint64_t v42 = v60;
  uint64_t v44 = v58;
  uint64_t v45 = v52;
  if (v40 == v41)
  {
LABEL_23:
    if (specialized static Data.== infix(_:_:)(a1[5], a1[6], *(void *)(v25 + 40), *(void *)(v25 + 48)))
    {
      uint64_t v46 = v39;
      uint64_t v47 = (char *)a1 + *(int *)(v39 + 32);
      char v48 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
      v48(v45, v47, v42);
      v48(v44, (char *)(v25 + *(int *)(v46 + 32)), v42);
      lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
      v49(v44, v42);
      v49(v45, v42);
      return v35 & 1;
    }
  }
LABEL_9:
  char v35 = 0;
  return v35 & 1;
}

uint64_t specialized static AttachmentLedger_AttachmentAuthGetToken.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - v9;
  if ((specialized static Data.== infix(_:_:)(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    goto LABEL_12;
  }
  BOOL v11 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[4] == a2[4] && a1[5] == a2[5] || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (a1[6] == a2[6])
      {
        uint64_t Token = type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
        char v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v14(v10, (char *)a1 + *(int *)(Token + 32), v4);
        v14(v8, (char *)a2 + *(int *)(Token + 32), v4);
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
        v15(v8, v4);
        v15(v10, v4);
        return v12 & 1;
      }
LABEL_12:
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static AttachmentLedger_AttachmentEncryption.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v46 - v7;
  uint64_t v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  BOOL v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v53 = (uint64_t)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v46 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v51 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = v24;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v26, (uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v52 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v29 = (uint64_t)&v15[*(int *)(v13 + 56)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v29, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v15, 1, v8) != 1)
  {
    uint64_t v41 = v53;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, v53, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    if (v30(v29, 1, v8) != 1)
    {
      outlined init with take of AttachmentLedger_CreateTopicResponse.ClientTopicConfig(v29, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
      if (specialized static Data.== infix(_:_:)(*(void *)v41, *(void *)(v41 + 8), *(void *)v11, *((void *)v11 + 1)))
      {
        lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
        char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v41, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        if (v45) {
          goto LABEL_4;
        }
LABEL_11:
        char v39 = 0;
        return v39 & 1;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v41, type metadata accessor for AttachmentLedger_EncryptionID);
      uint64_t v43 = (uint64_t)v15;
      uint64_t v42 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
LABEL_10:
      outlined destroy of UUID?(v43, v42);
      goto LABEL_11;
    }
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v41, type metadata accessor for AttachmentLedger_EncryptionID);
LABEL_9:
    uint64_t v42 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
    uint64_t v43 = (uint64_t)v15;
    goto LABEL_10;
  }
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
LABEL_4:
  uint64_t v31 = v51;
  uint64_t v32 = v52;
  if ((specialized static Data.== infix(_:_:)(*(void *)v51, *(void *)(v51 + 8), *(void *)v52, *(void *)(v52 + 8)) & 1) == 0|| *(void *)(v31 + 16) != *(void *)(v32 + 16))
  {
    goto LABEL_11;
  }
  uint64_t v34 = v49;
  uint64_t v33 = v50;
  char v35 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
  uint64_t v36 = v47;
  v35(v47, v31 + *(int *)(v27 + 24), v50);
  uint64_t v37 = v32 + *(int *)(v27 + 24);
  char v38 = v48;
  v35(v48, v37, v33);
  lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t outlined init with copy of AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t type metadata accessor for AttachmentLedger_CreateTopicRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_CreateTopicRequest);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t type metadata accessor for AttachmentLedger_GetAuthTokenRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_ResponseStatus()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_ResponseStatus] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_ResponseStatus]);
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_CapabilityFlag()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_CapabilityFlag] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_CapabilityFlag]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_AttachmentStatus()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_AttachmentStatus] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_AttachmentStatus]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_GetAuthTokenRequest.Action()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_GetAuthTokenRequest.Action] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_GetAuthTokenRequest.Action]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_GetAuthTokenRequest.TokenEnvironment()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_GetAuthTokenRequest.TokenEnvironment] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_GetAuthTokenRequest.TokenEnvironment]);
}

uint64_t lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for Message in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for Message in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for Message in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Message in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t sub_1B0F30550@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse, a2);
}

uint64_t sub_1B0F30588@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.initialize.getter(a1);
}

uint64_t sub_1B0F305C8@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.initializeAck.getter(a1);
}

uint64_t sub_1B0F305F8@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.topicUpdate.getter(a1);
}

uint64_t sub_1B0F30640@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.getter(a1);
}

uint64_t sub_1B0F30688@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.getter(a1);
}

uint64_t sub_1B0F306B8@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.getter(a1);
}

uint64_t sub_1B0F306E0@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.getter(a1);
}

uint64_t sub_1B0F30710@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.getter(a1);
}

uint64_t sub_1B0F30738@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.getter(a1);
}

uint64_t sub_1B0F30768@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.add.getter(a1);
}

uint64_t sub_1B0F30790@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.remove.getter(a1);
}

uint64_t sub_1B0F307B8@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.updateEncryption.getter(a1);
}

uint64_t sub_1B0F307E0@<X0>(void *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.updateStatus.getter(a1);
}

uint64_t sub_1B0F30828@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, a2);
}

uint64_t sub_1B0F30870@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, a2);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedger_ResponseStatus()
{
  return &type metadata for AttachmentLedger_ResponseStatus;
}

ValueMetadata *type metadata accessor for AttachmentLedger_CapabilityFlag()
{
  return &type metadata for AttachmentLedger_CapabilityFlag;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentStatus(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentStatus(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AttachmentLedger_AttachmentStatus(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for AttachmentLedger_AttachmentStatus(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedger_AttachmentStatus()
{
  return &type metadata for AttachmentLedger_AttachmentStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_MMCSMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[6];
    unint64_t v12 = a2[7];
    outlined copy of Data._Representation(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    uint64_t v13 = a3[8];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    uint64_t v18 = a3[9];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v36 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48);
    if (v36(v20, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v34 = v17;
      uint64_t v35 = v16;
      uint64_t v25 = v20[1];
      *uint64_t v19 = *v20;
      unint64_t v26 = v20[2];
      outlined copy of Data._Representation(v25, v26);
      v19[1] = v25;
      v19[2] = v26;
      uint64_t v17 = v34;
      uint64_t v16 = v35;
      v34((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v27 = a3[10];
    uint64_t v28 = (uint64_t *)((char *)a1 + v27);
    uint64_t v29 = (uint64_t *)((char *)a2 + v27);
    if (v36(v29, 1, v21))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = v29[1];
      *uint64_t v28 = *v29;
      unint64_t v32 = v29[2];
      outlined copy of Data._Representation(v31, v32);
      v28[1] = v31;
      v28[2] = v32;
      v17((char *)v28 + *(int *)(v21 + 24), (char *)v29 + *(int *)(v21 + 24), v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v21);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_MMCSMetadata(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 32), *(void *)(a1 + 40));
  outlined consume of Data._Representation(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    outlined consume of Data._Representation(*(void *)(v6 + 8), *(void *)(v6 + 16));
    v12(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v9 = a1 + a2[10];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)(v9 + 8), *(void *)(v9 + 16));
    uint64_t v11 = v9 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

void *initializeWithCopy for AttachmentLedger_MMCSMetadata(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  outlined copy of Data._Representation(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v35 = a3;
  uint64_t v17 = *(int *)(a3 + 36);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v34 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48);
  if (v34(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    unint64_t v32 = v16;
    uint64_t v33 = v15;
    uint64_t v23 = v19[1];
    *uint64_t v18 = *v19;
    unint64_t v24 = v19[2];
    outlined copy of Data._Representation(v23, v24);
    v18[1] = v23;
    _OWORD v18[2] = v24;
    uint64_t v16 = v32;
    uint64_t v15 = v33;
    v32((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v25 = *(int *)(v35 + 40);
  unint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  if (v34(v27, 1, v20))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v29 = v27[1];
    *unint64_t v26 = *v27;
    unint64_t v30 = v27[2];
    outlined copy of Data._Representation(v29, v30);
    v26[1] = v29;
    v26[2] = v30;
    v16((char *)v26 + *(int *)(v20 + 24), (char *)v27 + *(int *)(v20 + 24), v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v26, 0, 1, v20);
  }
  return a1;
}

char *assignWithCopy for AttachmentLedger_MMCSMetadata(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = *((void *)a1 + 4);
  unint64_t v9 = *((void *)a1 + 5);
  *((void *)a1 + 4) = v6;
  *((void *)a1 + 5) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  outlined copy of Data._Representation(v10, v11);
  uint64_t v12 = *((void *)a1 + 6);
  unint64_t v13 = *((void *)a1 + 7);
  *((void *)a1 + 6) = v10;
  *((void *)a1 + 7) = v11;
  outlined consume of Data._Representation(v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  uint64_t v49 = *(void *)(v17 - 8);
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v49 + 24);
  v47(v15, v16, v17);
  uint64_t v18 = a3[9];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v48 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  int v23 = v22(v19, 1, v21);
  int v24 = v22(v20, 1, v21);
  if (v23)
  {
    if (!v24)
    {
      *(void *)uint64_t v19 = *(void *)v20;
      uint64_t v45 = v17;
      uint64_t v25 = *((void *)v20 + 1);
      unint64_t v26 = *((void *)v20 + 2);
      outlined copy of Data._Representation(v25, v26);
      *((void *)v19 + 1) = v25;
      *((void *)v19 + 2) = v26;
      uint64_t v17 = v45;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(&v19[*(int *)(v21 + 24)], &v20[*(int *)(v21 + 24)], v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v19, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v19, v20, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v19 = *(void *)v20;
  uint64_t v46 = v17;
  uint64_t v37 = *((void *)v20 + 1);
  unint64_t v38 = *((void *)v20 + 2);
  outlined copy of Data._Representation(v37, v38);
  uint64_t v39 = *((void *)v19 + 1);
  unint64_t v40 = *((void *)v19 + 2);
  *((void *)v19 + 1) = v37;
  *((void *)v19 + 2) = v38;
  uint64_t v17 = v46;
  outlined consume of Data._Representation(v39, v40);
  v47(&v19[*(int *)(v21 + 24)], &v20[*(int *)(v21 + 24)], v46);
LABEL_7:
  uint64_t v28 = a3[10];
  uint64_t v29 = &a1[v28];
  unint64_t v30 = (char *)a2 + v28;
  int v31 = v22(&a1[v28], 1, v21);
  int v32 = v22(v30, 1, v21);
  if (!v31)
  {
    if (!v32)
    {
      *(void *)uint64_t v29 = *(void *)v30;
      uint64_t v41 = *((void *)v30 + 1);
      unint64_t v42 = *((void *)v30 + 2);
      outlined copy of Data._Representation(v41, v42);
      uint64_t v43 = *((void *)v29 + 1);
      unint64_t v44 = *((void *)v29 + 2);
      *((void *)v29 + 1) = v41;
      *((void *)v29 + 2) = v42;
      outlined consume of Data._Representation(v43, v44);
      v47(&v29[*(int *)(v21 + 24)], &v30[*(int *)(v21 + 24)], v17);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v29, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v29, v30, *(void *)(*(void *)(v35 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  uint64_t v33 = *((void *)v30 + 1);
  unint64_t v34 = *((void *)v30 + 2);
  outlined copy of Data._Representation(v33, v34);
  *((void *)v29 + 1) = v33;
  *((void *)v29 + 2) = v34;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(&v29[*(int *)(v21 + 24)], &v30[*(int *)(v21 + 24)], v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v29, 0, 1, v21);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_MMCSMetadata(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v26 = a3;
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v15, 1, v16))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *uint64_t v14 = *v15;
    *(_OWORD *)(v14 + 1) = *(_OWORD *)(v15 + 1);
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v20 = v17;
  uint64_t v21 = *(int *)(v26 + 40);
  uint64_t v22 = (void *)((char *)a1 + v21);
  int v23 = (void *)((char *)a2 + v21);
  if (v18(v23, 1, v16))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    *(_OWORD *)(v22 + 1) = *(_OWORD *)(v23 + 1);
    v12((char *)v22 + *(int *)(v16 + 24), (char *)v23 + *(int *)(v16 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v16);
  }
  return a1;
}

void *assignWithTake for AttachmentLedger_MMCSMetadata(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  outlined consume of Data._Representation(v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v15 - 8);
  uint64_t v40 = v15;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v39 + 40);
  v37(v13, v14);
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v38 = *(void *)(v19 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  int v21 = v20(v17, 1, v19);
  int v22 = v20(v18, 1, v19);
  if (v21)
  {
    if (!v22)
    {
      *uint64_t v17 = *v18;
      *(_OWORD *)(v17 + 1) = *(_OWORD *)(v18 + 1);
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v17, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v31 = v18[2];
  uint64_t v32 = v17[1];
  unint64_t v33 = v17[2];
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  v17[2] = v31;
  outlined consume of Data._Representation(v32, v33);
  ((void (*)(char *, char *, uint64_t))v37)((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v40);
LABEL_7:
  uint64_t v24 = a3[10];
  uint64_t v25 = (uint64_t)a1 + v24;
  uint64_t v26 = a2 + v24;
  int v27 = v20((void *)((char *)a1 + v24), 1, v19);
  int v28 = v20((void *)v26, 1, v19);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v34 = *(void *)(v26 + 16);
      uint64_t v35 = *(void *)(v25 + 8);
      unint64_t v36 = *(void *)(v25 + 16);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(void *)(v25 + 16) = v34;
      outlined consume of Data._Representation(v35, v36);
      ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v25 + *(int *)(v19 + 24), v26 + *(int *)(v19 + 24), v40);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v25, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy((void *)v25, (const void *)v26, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v25 = *(void *)v26;
  *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v25 + *(int *)(v19 + 24), v26 + *(int *)(v19 + 24), v40);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v25, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F31AAC);
}

uint64_t sub_1B0F31AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F31BF0);
}

uint64_t sub_1B0F31BF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AttachmentLedger_MMCSMetadata()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_MMCSMetadata.BlobData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    unint64_t v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AttachmentLedger_MMCSMetadata.BlobData(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

void *assignWithCopy for AttachmentLedger_MMCSMetadata.BlobData(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v7, v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F32200);
}

uint64_t sub_1B0F32200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F322D0);
}

uint64_t sub_1B0F322D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_AttachmentMetadata(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 40);
    unint64_t v11 = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v10, v11);
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v11;
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    uint64_t v17 = *(int *)(a3 + 36);
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (void *)(a2 + v17);
    uint64_t v20 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    uint64_t v50 = *((void *)v20 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v50 + 48))(v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v23 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v23;
      uint64_t v24 = v19[3];
      _OWORD v18[2] = v19[2];
      v18[3] = v24;
      uint64_t v25 = v19[4];
      unint64_t v26 = v19[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v25, v26);
      v18[4] = v25;
      v18[5] = v26;
      uint64_t v27 = v19[6];
      unint64_t v28 = v19[7];
      outlined copy of Data._Representation(v27, v28);
      v18[6] = v27;
      v18[7] = v28;
      v16((uint64_t)v18 + v20[8], (uint64_t)v19 + v20[8], v15);
      uint64_t v29 = v20[9];
      __dst = (void *)((char *)v18 + v29);
      unint64_t v30 = (void *)((char *)v19 + v29);
      uint64_t v31 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      uint64_t v48 = *(void *)(v31 - 8);
      uint64_t v32 = *(unsigned int (**)(void, void, void))(v48 + 48);
      uint64_t v47 = (void (*)(char *, char *, uint64_t))v16;
      if (v32(v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v30, *(void *)(*(void *)(v33 - 8) + 64));
        uint64_t v34 = v48;
      }
      else
      {
        uint64_t v35 = v30[1];
        uint64_t v45 = v35;
        uint64_t v46 = v32;
        void *__dst = *v30;
        unint64_t v36 = v30[2];
        outlined copy of Data._Representation(v35, v36);
        __dst[1] = v45;
        __dst[2] = v36;
        uint64_t v32 = v46;
        v16((uint64_t)__dst + *(int *)(v31 + 24), (uint64_t)v30 + *(int *)(v31 + 24), v15);
        uint64_t v34 = v48;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(__dst, 0, 1, v31);
      }
      uint64_t v37 = v20[10];
      uint64_t v38 = (void *)((char *)v18 + v37);
      uint64_t v39 = (void *)((char *)v19 + v37);
      if (v32(v39, 1, v31))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        uint64_t v41 = v34;
        uint64_t v42 = v39[1];
        void *v38 = *v39;
        unint64_t v43 = v39[2];
        outlined copy of Data._Representation(v42, v43);
        v38[1] = v42;
        v38[2] = v43;
        v47((char *)v38 + *(int *)(v31 + 24), (char *)v39 + *(int *)(v31 + 24), v15);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v31);
      }
      (*(void (**)(void *, void, uint64_t, int *))(v50 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(void *)(v6 + 32), *(void *)(v6 + 40));
    outlined consume of Data._Representation(*(void *)(v6 + 48), *(void *)(v6 + 56));
    v14(v6 + v7[8], v5);
    uint64_t v9 = v6 + v7[9];
    uint64_t v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    unint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    if (!v11(v9, 1, v10))
    {
      outlined consume of Data._Representation(*(void *)(v9 + 8), *(void *)(v9 + 16));
      v14(v9 + *(int *)(v10 + 24), v5);
    }
    uint64_t v12 = v6 + v7[10];
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
    if (!result)
    {
      outlined consume of Data._Representation(*(void *)(v12 + 8), *(void *)(v12 + 16));
      uint64_t v13 = v12 + *(int *)(v10 + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v9, v10);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  uint64_t v16 = *(int *)(a3 + 36);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v48 = *((void *)v19 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v48 + 48))(v18, 1, v19))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v21;
    uint64_t v22 = v18[3];
    v17[2] = v18[2];
    v17[3] = v22;
    uint64_t v23 = v18[4];
    unint64_t v24 = v18[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v23, v24);
    v17[4] = v23;
    v17[5] = v24;
    uint64_t v25 = v18[6];
    unint64_t v26 = v18[7];
    outlined copy of Data._Representation(v25, v26);
    v17[6] = v25;
    v17[7] = v26;
    v15((char *)v17 + v19[8], (char *)v18 + v19[8], v14);
    uint64_t v27 = v19[9];
    __dst = (void *)((char *)v17 + v27);
    unint64_t v28 = (void *)((char *)v18 + v27);
    uint64_t v29 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v46 = *(void *)(v29 - 8);
    unint64_t v30 = *(unsigned int (**)(void, void, void))(v46 + 48);
    uint64_t v45 = v15;
    if (v30(v28, 1, v29))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(__dst, v28, *(void *)(*(void *)(v31 - 8) + 64));
      uint64_t v32 = v46;
    }
    else
    {
      uint64_t v33 = v28[1];
      uint64_t v43 = v33;
      unint64_t v44 = v30;
      void *__dst = *v28;
      unint64_t v34 = v28[2];
      outlined copy of Data._Representation(v33, v34);
      __dst[1] = v43;
      __dst[2] = v34;
      unint64_t v30 = v44;
      v15((char *)__dst + *(int *)(v29 + 24), (char *)v28 + *(int *)(v29 + 24), v14);
      uint64_t v32 = v46;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v29);
    }
    uint64_t v35 = v19[10];
    unint64_t v36 = (void *)((char *)v17 + v35);
    uint64_t v37 = (void *)((char *)v18 + v35);
    if (v30(v37, 1, v29))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v39 = v32;
      uint64_t v40 = v37[1];
      *unint64_t v36 = *v37;
      unint64_t v41 = v37[2];
      outlined copy of Data._Representation(v40, v41);
      v36[1] = v40;
      v36[2] = v41;
      v45((char *)v36 + *(int *)(v29 + 24), (char *)v37 + *(int *)(v29 + 24), v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
    }
    (*(void (**)(void *, void, uint64_t, int *))(v48 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v10;
  uint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  outlined copy of Data._Representation(v11, v12);
  uint64_t v13 = *(void *)(a1 + 40);
  unint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  outlined consume of Data._Representation(v13, v14);
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v93 = type metadata accessor for UnknownStorage();
  uint64_t v94 = *(void *)(v93 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v94 + 24);
  v18(v16, v17);
  uint64_t v19 = *(int *)(a3 + 36);
  uint64_t v20 = (char *)(a1 + v19);
  uint64_t v21 = (char *)(a2 + v19);
  uint64_t v22 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v23 = *((void *)v22 - 1);
  unint64_t v24 = *(uint64_t (**)(char *, uint64_t, int *))(v23 + 48);
  LODWORD(v17) = v24(v20, 1, v22);
  int v25 = v24(v21, 1, v22);
  if (!v17)
  {
    if (v25)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v20, type metadata accessor for AttachmentLedger_MMCSMetadata);
      goto LABEL_7;
    }
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = *((void *)v21 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v20 + 2) = *((void *)v21 + 2);
    *((void *)v20 + 3) = *((void *)v21 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v39 = *((void *)v21 + 4);
    unint64_t v40 = *((void *)v21 + 5);
    outlined copy of Data._Representation(v39, v40);
    uint64_t v41 = *((void *)v20 + 4);
    unint64_t v42 = *((void *)v20 + 5);
    *((void *)v20 + 4) = v39;
    *((void *)v20 + 5) = v40;
    outlined consume of Data._Representation(v41, v42);
    uint64_t v43 = *((void *)v21 + 6);
    unint64_t v44 = *((void *)v21 + 7);
    outlined copy of Data._Representation(v43, v44);
    uint64_t v45 = *((void *)v20 + 6);
    unint64_t v46 = *((void *)v20 + 7);
    *((void *)v20 + 6) = v43;
    *((void *)v20 + 7) = v44;
    outlined consume of Data._Representation(v45, v46);
    uint64_t v85 = v18;
    ((void (*)(char *, char *, uint64_t))v18)(&v20[v22[8]], &v21[v22[8]], v93);
    uint64_t v47 = v22[9];
    uint64_t v48 = &v20[v47];
    uint64_t v49 = &v21[v47];
    uint64_t v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v83 = *(void *)(v50 - 8);
    uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
    unint64_t v89 = v48;
    LODWORD(v48) = v51(v48, 1, v50);
    __src = v49;
    __dsta = (int *)v50;
    int v52 = v51(v49, 1, v50);
    if (v48)
    {
      if (!v52)
      {
        *(void *)unint64_t v89 = *(void *)v49;
        uint64_t v66 = *((void *)v49 + 1);
        uint64_t v65 = *((void *)v49 + 2);
        outlined copy of Data._Representation(*((void *)__src + 1), *((void *)__src + 2));
        *((void *)v89 + 1) = v66;
        *((void *)v89 + 2) = v65;
        uint64_t v64 = (int *)v50;
        uint64_t v63 = v94;
        (*(void (**)(char *, char *, uint64_t))(v94 + 16))(&v89[__dsta[6]], &__src[__dsta[6]], v93);
        (*(void (**)(char *, void, uint64_t, int *))(v83 + 56))(v89, 0, 1, __dsta);
        goto LABEL_22;
      }
      size_t v53 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v54 = v89;
    }
    else
    {
      if (!v52)
      {
        *(void *)unint64_t v89 = *(void *)v49;
        uint64_t v76 = *((void *)v49 + 1);
        uint64_t v75 = *((void *)v49 + 2);
        outlined copy of Data._Representation(*((void *)__src + 1), *((void *)__src + 2));
        uint64_t v77 = *((void *)v89 + 1);
        unint64_t v78 = *((void *)v89 + 2);
        *((void *)v89 + 1) = v76;
        *((void *)v89 + 2) = v75;
        outlined consume of Data._Representation(v77, v78);
        uint64_t v64 = (int *)v50;
        uint64_t v67 = (void (*)(char *, char *, uint64_t))v85;
        ((void (*)(char *, char *, uint64_t))v85)(&v89[*(int *)(v50 + 24)], &__src[*(int *)(v50 + 24)], v93);
        uint64_t v63 = v94;
        goto LABEL_23;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v89, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      size_t v53 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v54 = v89;
    }
    memcpy(v54, v49, v53);
    uint64_t v63 = v94;
    uint64_t v64 = __dsta;
LABEL_22:
    uint64_t v67 = (void (*)(char *, char *, uint64_t))v85;
LABEL_23:
    uint64_t v68 = v22[10];
    uint64_t v69 = &v20[v68];
    uint64_t v70 = &v21[v68];
    int v71 = v51(v69, 1, (uint64_t)v64);
    int v72 = v51(v70, 1, (uint64_t)v64);
    if (v71)
    {
      if (!v72)
      {
        *(void *)uint64_t v69 = *(void *)v70;
        uint64_t v73 = *((void *)v70 + 1);
        unint64_t v74 = *((void *)v70 + 2);
        outlined copy of Data._Representation(v73, v74);
        *((void *)v69 + 1) = v73;
        *((void *)v69 + 2) = v74;
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(&v69[v64[6]], &v70[v64[6]], v93);
        (*(void (**)(char *, void, uint64_t, int *))(v83 + 56))(v69, 0, 1, v64);
        return a1;
      }
    }
    else
    {
      if (!v72)
      {
        *(void *)uint64_t v69 = *(void *)v70;
        uint64_t v79 = *((void *)v70 + 1);
        unint64_t v80 = *((void *)v70 + 2);
        outlined copy of Data._Representation(v79, v80);
        uint64_t v81 = *((void *)v69 + 1);
        unint64_t v82 = *((void *)v69 + 2);
        *((void *)v69 + 1) = v79;
        *((void *)v69 + 2) = v80;
        outlined consume of Data._Representation(v81, v82);
        v67(&v69[v64[6]], &v70[v64[6]], v93);
        return a1;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v69, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    uint64_t v37 = v69;
    uint64_t v38 = v70;
    goto LABEL_8;
  }
  if (v25)
  {
LABEL_7:
    size_t v36 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                - 8)
                    + 64);
    uint64_t v37 = v20;
    uint64_t v38 = v21;
LABEL_8:
    memcpy(v37, v38, v36);
    return a1;
  }
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = *((void *)v21 + 1);
  *((void *)v20 + 2) = *((void *)v21 + 2);
  *((void *)v20 + 3) = *((void *)v21 + 3);
  uint64_t v26 = *((void *)v21 + 4);
  unint64_t v27 = *((void *)v21 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v26, v27);
  *((void *)v20 + 4) = v26;
  *((void *)v20 + 5) = v27;
  uint64_t v28 = *((void *)v21 + 6);
  unint64_t v29 = *((void *)v21 + 7);
  outlined copy of Data._Representation(v28, v29);
  *((void *)v20 + 6) = v28;
  *((void *)v20 + 7) = v29;
  os_log_t v88 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  v88(&v20[v22[8]], &v21[v22[8]], v93);
  uint64_t v30 = v22[9];
  __dst = &v20[v30];
  uint64_t v31 = &v21[v30];
  uint64_t v32 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v92 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v92(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(__dst, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    *(void *)__dst = *(void *)v31;
    unint64_t v84 = *((void *)v31 + 2);
    uint64_t v86 = *((void *)v31 + 1);
    outlined copy of Data._Representation(v86, v84);
    *((void *)__dst + 1) = v86;
    *((void *)__dst + 2) = v84;
    v88(&__dst[*(int *)(v32 + 24)], &v31[*(int *)(v32 + 24)], v93);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
  }
  uint64_t v35 = v33;
  uint64_t v55 = v22[10];
  int v56 = &v20[v55];
  uint64_t v57 = &v21[v55];
  if (v92(v57, 1, v32))
  {
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    *(void *)int v56 = *(void *)v57;
    uint64_t v59 = v35;
    uint64_t v60 = *((void *)v57 + 1);
    unint64_t v61 = *((void *)v57 + 2);
    outlined copy of Data._Representation(v60, v61);
    *((void *)v56 + 1) = v60;
    *((void *)v56 + 2) = v61;
    v88(&v56[*(int *)(v32 + 24)], &v57[*(int *)(v32 + 24)], v93);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v32);
  }
  (*(void (**)(char *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (char *)(a1 + v7);
  unint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = (_OWORD *)(a1 + v12);
  unint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v16 = *((void *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v36 = v16;
    long long v18 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v18;
    long long v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v11((char *)v13 + v15[8], (char *)v14 + v15[8], v10);
    uint64_t v20 = v15[9];
    uint64_t v21 = (void *)((char *)v13 + v20);
    uint64_t v35 = v11;
    uint64_t v22 = (void *)((char *)v14 + v20);
    uint64_t v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v34 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48);
    if (v34(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      uint64_t v26 = v35;
    }
    else
    {
      *uint64_t v21 = *v22;
      *(_OWORD *)(v21 + 1) = *(_OWORD *)(v22 + 1);
      uint64_t v27 = *(int *)(v23 + 24);
      uint64_t v28 = (char *)v22 + v27;
      uint64_t v26 = v35;
      v35((char *)v21 + v27, v28, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v29 = v15[10];
    uint64_t v30 = (void *)((char *)v13 + v29);
    uint64_t v31 = (void *)((char *)v14 + v29);
    if (v34(v31, 1, v23))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      *uint64_t v30 = *v31;
      *(_OWORD *)(v30 + 1) = *(_OWORD *)(v31 + 1);
      v26((char *)v30 + *(int *)(v23 + 24), (char *)v31 + *(int *)(v23 + 24), v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v30, 0, 1, v23);
    }
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v36 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  __dst = *(void **)(v13 - 8);
  uint64_t v81 = v13;
  unint64_t v14 = (void (*)(uint64_t, uint64_t))__dst[5];
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (_OWORD *)(a2 + v15);
  long long v18 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  uint64_t v19 = *((void *)v18 - 1);
  uint64_t v20 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    unint64_t v78 = v14;
    if (v21)
    {
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v16, type metadata accessor for AttachmentLedger_MMCSMetadata);
      goto LABEL_7;
    }
    uint64_t v33 = *((void *)v17 + 1);
    *uint64_t v16 = *(void *)v17;
    v16[1] = v33;
    swift_bridgeObjectRelease();
    uint64_t v34 = *((void *)v17 + 3);
    v16[2] = *((void *)v17 + 2);
    v16[3] = v34;
    swift_bridgeObjectRelease();
    uint64_t v35 = v16[4];
    unint64_t v36 = v16[5];
    *((_OWORD *)v16 + 2) = v17[2];
    outlined consume of Data._Representation(v35, v36);
    uint64_t v37 = v16[6];
    unint64_t v38 = v16[7];
    *((_OWORD *)v16 + 3) = v17[3];
    outlined consume of Data._Representation(v37, v38);
    ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + v18[8], (char *)v17 + v18[8], v81);
    uint64_t v39 = v18[9];
    unint64_t v40 = (char *)v16 + v39;
    uint64_t v41 = (char *)v17 + v39;
    uint64_t v42 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    uint64_t v71 = *(void *)(v42 - 8);
    uint64_t v72 = (uint64_t)v40;
    uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
    LODWORD(v40) = v43(v40, 1, v42);
    __srca = v41;
    uint64_t v76 = v42;
    uint64_t v44 = v42;
    uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
    int v46 = v43(v41, 1, v44);
    if (v40)
    {
      uint64_t v47 = __dst;
      if (!v46)
      {
        *(void *)uint64_t v72 = *(void *)v41;
        *(_OWORD *)(v72 + 8) = *(_OWORD *)(v41 + 8);
        ((void (*)(uint64_t, char *, uint64_t))__dst[4])(v72 + *(int *)(v76 + 24), &v41[*(int *)(v76 + 24)], v81);
        uint64_t v58 = v76;
        uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v72, 0, 1, v76);
        uint64_t v59 = (void (*)(uint64_t, char *, uint64_t))v78;
        goto LABEL_23;
      }
      size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v49 = (void *)v72;
    }
    else
    {
      uint64_t v47 = __dst;
      if (!v46)
      {
        uint64_t v60 = *((void *)v41 + 2);
        uint64_t v61 = *(void *)(v72 + 8);
        unint64_t v62 = *(void *)(v72 + 16);
        *(_OWORD *)uint64_t v72 = *(_OWORD *)v41;
        *(void *)(v72 + 16) = v60;
        outlined consume of Data._Representation(v61, v62);
        uint64_t v58 = v76;
        uint64_t v59 = (void (*)(uint64_t, char *, uint64_t))v78;
        ((void (*)(uint64_t, char *, uint64_t))v78)(v72 + *(int *)(v76 + 24), &__srca[*(int *)(v76 + 24)], v81);
        goto LABEL_23;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v72, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      uint64_t v49 = (void *)v72;
    }
    memcpy(v49, v41, v48);
    uint64_t v58 = v76;
    uint64_t v59 = (void (*)(uint64_t, char *, uint64_t))v78;
LABEL_23:
    uint64_t v63 = v18[10];
    uint64_t v64 = (uint64_t)v16 + v63;
    uint64_t v65 = (char *)v17 + v63;
    int v66 = v45(v64, 1, v58);
    int v67 = v45((uint64_t)v65, 1, v58);
    if (v66)
    {
      if (!v67)
      {
        *(void *)uint64_t v64 = *(void *)v65;
        *(_OWORD *)(v64 + 8) = *(_OWORD *)(v65 + 8);
        ((void (*)(uint64_t, char *, uint64_t))v47[4])(v64 + *(int *)(v58 + 24), &v65[*(int *)(v58 + 24)], v81);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v64, 0, 1, v58);
        return a1;
      }
    }
    else
    {
      if (!v67)
      {
        uint64_t v68 = *((void *)v65 + 2);
        uint64_t v69 = *(void *)(v64 + 8);
        unint64_t v70 = *(void *)(v64 + 16);
        *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
        *(void *)(v64 + 16) = v68;
        outlined consume of Data._Representation(v69, v70);
        v59(v64 + *(int *)(v58 + 24), &v65[*(int *)(v58 + 24)], v81);
        return a1;
      }
      outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(v64, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    uint64_t v31 = (void *)v64;
    uint64_t v32 = v65;
    goto LABEL_8;
  }
  if (v21)
  {
LABEL_7:
    size_t v30 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                - 8)
                    + 64);
    uint64_t v31 = v16;
    uint64_t v32 = v17;
LABEL_8:
    memcpy(v31, v32, v30);
    return a1;
  }
  long long v22 = v17[1];
  *(_OWORD *)uint64_t v16 = *v17;
  *((_OWORD *)v16 + 1) = v22;
  long long v23 = v17[3];
  *((_OWORD *)v16 + 2) = v17[2];
  *((_OWORD *)v16 + 3) = v23;
  uint64_t v77 = (void (*)(char *, char *, uint64_t))__dst[4];
  v77((char *)v16 + v18[8], (char *)v17 + v18[8], v81);
  uint64_t v24 = v18[9];
  __dsta = (void *)((char *)v16 + v24);
  uint64_t v25 = (void *)((char *)v17 + v24);
  uint64_t v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v75 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48);
  __src = (void *)v27;
  if (v75(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(__dsta, v25, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = v77;
  }
  else
  {
    void *__dsta = *v25;
    *(_OWORD *)(__dsta + 1) = *(_OWORD *)(v25 + 1);
    uint64_t v50 = *(int *)(v26 + 24);
    uint64_t v51 = (char *)v25 + v50;
    uint64_t v29 = v77;
    v77((char *)__dsta + v50, v51, v81);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dsta, 0, 1, v26);
  }
  uint64_t v52 = v26;
  uint64_t v53 = v18[10];
  uint64_t v54 = (void *)((char *)v16 + v53);
  uint64_t v55 = (void *)((char *)v17 + v53);
  if (v75(v55, 1, v52))
  {
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    *uint64_t v54 = *v55;
    *(_OWORD *)(v54 + 1) = *(_OWORD *)(v55 + 1);
    v29((char *)v54 + *(int *)(v52 + 24), (char *)v55 + *(int *)(v52 + 24), v81);
    (*((void (**)(void *, void, uint64_t, uint64_t))__src + 7))(v54, 0, 1, v52);
  }
  (*(void (**)(void *, void, uint64_t, int *))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F34040);
}

uint64_t sub_1B0F34040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F34184);
}

uint64_t sub_1B0F34184(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AttachmentLedger_AttachmentMetadata()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_MMCSMetadata?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_AuthPutMaterials(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = *(int *)(a3 + 32);
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = (char *)a1 + v8;
    a1[6] = a2[6];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AttachmentLedger_AuthPutMaterials(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = (char *)a1 + v7;
  a1[6] = a2[6];
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

void *assignWithCopy for AttachmentLedger_AuthPutMaterials(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for AttachmentLedger_AuthPutMaterials(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F34828);
}

uint64_t sub_1B0F34828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F348EC);
}

uint64_t sub_1B0F348EC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_AuthPutMaterials()
{
  return type metadata completion function for AttachmentLedger_AuthPutMaterials();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    uint64_t v11 = a2[6];
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (char *)a2 + v12;
    unint64_t v14 = (char *)a1 + v12;
    a1[6] = v11;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v14, v13, v15);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  uint64_t v10 = a2[6];
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a2 + v11;
  uint64_t v13 = (char *)a1 + v11;
  a1[6] = v10;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v13, v12, v14);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v9;
  swift_bridgeObjectRelease();
  a1[6] = *(void *)(a2 + 48);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F34E54);
}

uint64_t sub_1B0F34E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F34F18);
}

uint64_t sub_1B0F34F18(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_AttachmentAuthGetToken()
{
  return type metadata completion function for AttachmentLedger_AuthPutMaterials();
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_131Tm);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_132Tm);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      outlined copy of Data._Representation(*v16, v22);
      *uint64_t v15 = v21;
      v15[1] = v22;
      v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    outlined copy of Data._Representation(*v15, v20);
    *uint64_t v14 = v19;
    v14[1] = v20;
    v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void *)(v13 - 8);
  uint64_t v31 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v30 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v26 = *v17;
      unint64_t v27 = v17[1];
      outlined copy of Data._Representation(*v17, v27);
      uint64_t v28 = *v16;
      unint64_t v29 = v16[1];
      *uint64_t v16 = v26;
      v16[1] = v27;
      outlined consume of Data._Representation(v28, v29);
      ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v31);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v16, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v16, v17, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  uint64_t v22 = *v17;
  unint64_t v23 = v17[1];
  outlined copy of Data._Representation(*v17, v23);
  *uint64_t v16 = v22;
  v16[1] = v23;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v31);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v11 - 8);
  uint64_t v25 = v11;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v24 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v22 = *v14;
      unint64_t v23 = v14[1];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      outlined consume of Data._Representation(v22, v23);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v25);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v14, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v25);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F35B5C);
}

uint64_t sub_1B0F35B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_134Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F35B7C);
}

void *sub_1B0F35B7C(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_135Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

void type metadata completion function for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for AttachmentLedger_ErrorResponse(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_ErrorResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F35F8C);
}

uint64_t sub_1B0F35F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F36050);
}

uint64_t sub_1B0F36050(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_ErrorResponse()
{
  return type metadata completion function for AttachmentLedger_ErrorResponse();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_CreateTopicRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *char v3 = *a2;
    char v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AttachmentLedger_CreateTopicRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for AttachmentLedger_CreateTopicRequest(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *assignWithTake for AttachmentLedger_CreateTopicRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_140Tm);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_141Tm);
}

uint64_t type metadata completion function for AttachmentLedger_CreateTopicRequest()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a3[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      uint64_t v20 = *(int *)(v15 + 28);
      int v21 = v11;
      uint64_t v22 = (char *)v13 + v20;
      unint64_t v23 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      uint64_t v24 = v22;
      uint64_t v11 = v21;
      v21((uint64_t)v24, (uint64_t)v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v25 = a3[7];
    uint64_t v26 = (_DWORD *)((char *)v4 + v25);
    unint64_t v27 = (_DWORD *)((char *)a2 + v25);
    uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
    uint64_t v29 = *(void *)(Topic - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, Topic))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
      v26[4] = v27[4];
      v11((uint64_t)v26 + *(int *)(Topic + 36), (uint64_t)v27 + *(int *)(Topic + 36), v10);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, Topic);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_CreateTopicResponse(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 28), v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Topic - 8) + 48))(v8, 1, Topic);
  if (!result)
  {
    uint64_t v11 = v8 + *(int *)(Topic + 36);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    uint64_t v18 = *(int *)(v14 + 28);
    uint64_t v19 = v10;
    uint64_t v20 = (char *)v12 + v18;
    int v21 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    uint64_t v22 = v20;
    uint64_t v10 = v19;
    v19((uint64_t)v22, (uint64_t)v21, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v23 = a3[7];
  uint64_t v24 = (_DWORD *)(a1 + v23);
  uint64_t v25 = (_DWORD *)(a2 + v23);
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v27 = *(void *)(Topic - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, Topic))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    v24[4] = v25[4];
    v10((uint64_t)v24 + *(int *)(Topic + 36), (uint64_t)v25 + *(int *)(Topic + 36), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v35 + 24);
  ((void (*)(uint64_t, uint64_t))v34)(v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      _OWORD v12[2] = v13[2];
      v12[3] = v13[3];
      uint64_t v19 = *(int *)(v14 + 28);
      uint64_t v20 = (char *)v12 + v19;
      int v21 = (char *)v13 + v19;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v12[2] = v13[2];
  v12[3] = v13[3];
  v34((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v36);
LABEL_7:
  uint64_t v24 = a3[7];
  uint64_t v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v28 = *(void *)(Topic - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, Topic);
  int v31 = v29(v26, 1, Topic);
  if (!v30)
  {
    if (!v31)
    {
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      *((_DWORD *)v25 + 1) = *((_DWORD *)v26 + 1);
      *((_DWORD *)v25 + 2) = *((_DWORD *)v26 + 2);
      *((_DWORD *)v25 + 3) = *((_DWORD *)v26 + 3);
      *((_DWORD *)v25 + 4) = *((_DWORD *)v26 + 4);
      v34(&v25[*(int *)(Topic + 36)], &v26[*(int *)(Topic + 36)], v36);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v25, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  *((_DWORD *)v25 + 1) = *((_DWORD *)v26 + 1);
  *((_DWORD *)v25 + 2) = *((_DWORD *)v26 + 2);
  *((_DWORD *)v25 + 3) = *((_DWORD *)v26 + 3);
  *((_DWORD *)v25 + 4) = *((_DWORD *)v26 + 4);
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(&v25[*(int *)(Topic + 36)], &v26[*(int *)(Topic + 36)], v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Topic);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[7];
  uint64_t v19 = (_DWORD *)(a1 + v18);
  uint64_t v20 = (_DWORD *)(a2 + v18);
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v22 = *(void *)(Topic - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Topic))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    uint64_t v19[4] = v20[4];
    v10((char *)v19 + *(int *)(Topic + 36), (char *)v20 + *(int *)(Topic + 36), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  int v31 = *(void (**)(uint64_t, uint64_t))(v32 + 40);
  v31(v7, v8);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      long long v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v30 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v30;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  ((void (*)(char *, char *, uint64_t))v31)(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v33);
LABEL_7:
  uint64_t v20 = a3[7];
  int v21 = (_DWORD *)(a1 + v20);
  uint64_t v22 = (_DWORD *)(a2 + v20);
  uint64_t Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  uint64_t v24 = *(void *)(Topic - 8);
  uint64_t v25 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, Topic);
  int v27 = v25(v22, 1, Topic);
  if (!v26)
  {
    if (!v27)
    {
      *(_OWORD *)int v21 = *(_OWORD *)v22;
      v21[4] = v22[4];
      ((void (*)(char *, char *, uint64_t))v31)((char *)v21 + *(int *)(Topic + 36), (char *)v22 + *(int *)(Topic + 36), v33);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  *(_OWORD *)int v21 = *(_OWORD *)v22;
  v21[4] = v22[4];
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v21 + *(int *)(Topic + 36), (char *)v22 + *(int *)(Topic + 36), v33);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, Topic);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F37618);
}

uint64_t sub_1B0F37618(uint64_t a1, uint64_t a2, int *a3)
{
  return __swift_get_extra_inhabitant_index_143Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F37638);
}

uint64_t sub_1B0F37638(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  return __swift_store_extra_inhabitant_index_144Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

void type metadata completion function for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v5 = *(int *)(a3 + 36);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F379DC);
}

uint64_t sub_1B0F379DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F37A60);
}

uint64_t sub_1B0F37A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 36);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v18 = a2[1];
        *a1 = *a2;
        a1[1] = v18;
        uint64_t v19 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
        int v46 = (char *)a1 + v19;
        uint64_t v20 = (char *)a2 + v19;
        uint64_t v21 = type metadata accessor for UnknownStorage();
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v46, v20, v21);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = *a2;
        unint64_t v13 = a2[1];
        outlined copy of Data._Representation(*a2, v13);
        *a1 = v12;
        a1[1] = v13;
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
        uint64_t v15 = (char *)a1 + v14;
        int v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        uint64_t v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        uint64_t v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        uint64_t v25 = a2[5];
        a1[4] = a2[4];
        a1[5] = v25;
        uint64_t v26 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
        uint64_t v27 = *(int *)(v26 + 36);
        uint64_t v42 = (char *)a2 + v27;
        uint64_t v44 = (char *)a1 + v27;
        uint64_t v28 = type metadata accessor for UnknownStorage();
        uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v45 = v29;
        uint64_t v47 = v28;
        v29(v44, v42, v28);
        uint64_t v30 = *(int *)(v26 + 40);
        int v31 = (uint64_t *)((char *)a1 + v30);
        uint64_t v32 = (uint64_t *)((char *)a2 + v30);
        uint64_t v33 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          unint64_t v36 = v32[1];
          uint64_t v43 = *v32;
          outlined copy of Data._Representation(*v32, v36);
          *int v31 = v43;
          v31[1] = v36;
          v45((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v47);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v37 = *(int *)(a3 + 20);
    unint64_t v38 = (char *)a1 + v37;
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4)) {
    goto LABEL_10;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
LABEL_9:
      uint64_t v13 = a1 + v12;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
      break;
    case 1:
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
      uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      goto LABEL_9;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v7 = a1 + *(int *)(v6 + 36);
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
      v9(v7, v8);
      uint64_t v10 = a1 + *(int *)(v6 + 40);
      uint64_t v11 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
      {
        outlined consume of Data._Representation(*(void *)v10, *(void *)(v10 + 8));
        v9(v10 + *(int *)(v11 + 20), v8);
      }
      break;
  }
LABEL_10:
  uint64_t v15 = a1 + *(int *)(a2 + 20);
  uint64_t v16 = type metadata accessor for UnknownStorage();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
  return v17(v15, v16);
}

void *initializeWithCopy for AttachmentLedger_SubscribeRequest(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      uint64_t v17 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      int v46 = (char *)a1 + v17;
      uint64_t v18 = (char *)a2 + v17;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v20(v46, v18, v19);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *a2;
      unint64_t v11 = a2[1];
      outlined copy of Data._Representation(*a2, v11);
      *a1 = v10;
      a1[1] = v11;
      uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      uint64_t v42 = a3;
      uint64_t v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      uint64_t v22 = a2[3];
      a1[2] = a2[2];
      a1[3] = v22;
      uint64_t v23 = a2[5];
      a1[4] = a2[4];
      a1[5] = v23;
      uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v25 = *(int *)(v24 + 36);
      uint64_t v43 = (char *)a2 + v25;
      uint64_t v44 = (char *)a1 + v25;
      uint64_t v26 = type metadata accessor for UnknownStorage();
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v28 = v44;
      uint64_t v45 = v27;
      uint64_t v47 = v26;
      v27(v28, v43, v26);
      uint64_t v29 = *(int *)(v24 + 40);
      uint64_t v30 = (void *)((char *)a1 + v29);
      int v31 = (void *)((char *)a2 + v29);
      uint64_t v32 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v35 = *v31;
        unint64_t v36 = v31[1];
        outlined copy of Data._Representation(*v31, v36);
        *uint64_t v30 = v35;
        v30[1] = v36;
        v45((char *)v30 + *(int *)(v32 + 20), (char *)v31 + *(int *)(v32 + 20), v47);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      a3 = v42;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v37 = *(int *)(a3 + 20);
  unint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16))(v38, v39, v40);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v26 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
        uint64_t v71 = (char *)a2 + v26;
        uint64_t v75 = (char *)a1 + v26;
        uint64_t v27 = type metadata accessor for UnknownStorage();
        uint64_t v28 = a3;
        uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
        swift_bridgeObjectRetain();
        v29(v75, v71, v27);
        a3 = v28;
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = *a2;
        unint64_t v13 = a2[1];
        outlined copy of Data._Representation(*a2, v13);
        *a1 = v12;
        a1[1] = v13;
        uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        uint64_t v76 = a3;
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        uint64_t v30 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
        uint64_t v31 = *(int *)(v30 + 36);
        int v67 = (char *)a2 + v31;
        uint64_t v68 = (char *)a1 + v31;
        uint64_t v32 = type metadata accessor for UnknownStorage();
        uint64_t v72 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v33 = v68;
        uint64_t v69 = v32;
        v72(v33, v67, v32);
        uint64_t v34 = *(int *)(v30 + 40);
        uint64_t v35 = (uint64_t *)((char *)a1 + v34);
        unint64_t v36 = (uint64_t *)((char *)a2 + v34);
        uint64_t v37 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v38 = *(void *)(v37 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          uint64_t v58 = *v36;
          unint64_t v59 = v36[1];
          outlined copy of Data._Representation(*v36, v59);
          *uint64_t v35 = v58;
          v35[1] = v59;
          v72((char *)v35 + *(int *)(v37 + 20), (char *)v36 + *(int *)(v37 + 20), v69);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
        a3 = v76;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_22;
    }
LABEL_8:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    int v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v40 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      uint64_t v41 = (char *)a1 + v40;
      uint64_t v42 = (char *)a2 + v40;
      uint64_t v43 = type metadata accessor for UnknownStorage();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
      swift_bridgeObjectRetain();
      v44(v41, v42, v43);
      swift_storeEnumTagMultiPayload();
    }
    else if (v19 == 1)
    {
      uint64_t v20 = *a2;
      unint64_t v21 = a2[1];
      outlined copy of Data._Representation(*a2, v21);
      *a1 = v20;
      a1[1] = v21;
      uint64_t v22 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v77 = a3;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      uint64_t v45 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v46 = *(int *)(v45 + 36);
      unint64_t v70 = (char *)a2 + v46;
      uint64_t v73 = (char *)a1 + v46;
      uint64_t v47 = type metadata accessor for UnknownStorage();
      size_t v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v49 = v73;
      uint64_t v74 = v47;
      uint64_t v50 = v47;
      uint64_t v51 = v48;
      v48(v49, v70, v50);
      uint64_t v52 = *(int *)(v45 + 40);
      uint64_t v53 = (uint64_t *)((char *)a1 + v52);
      uint64_t v54 = (uint64_t *)((char *)a2 + v52);
      uint64_t v55 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v56 = *(void *)(v55 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
      {
        uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        uint64_t v65 = *v54;
        unint64_t v66 = v54[1];
        outlined copy of Data._Representation(*v54, v66);
        void *v53 = v65;
        v53[1] = v66;
        v51((char *)v53 + *(int *)(v55 + 20), (char *)v54 + *(int *)(v55 + 20), v74);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
      a3 = v77;
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_22:
  uint64_t v60 = *(int *)(a3 + 20);
  uint64_t v61 = (char *)a1 + v60;
  unint64_t v62 = (char *)a2 + v60;
  uint64_t v63 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 24))(v61, v62, v63);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v10 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      unint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      long long v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      a1[2] = a2[2];
      uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v20 = *(int *)(v19 + 36);
      unint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
      v24(v21, v22, v23);
      uint64_t v25 = *(int *)(v19 + 40);
      __dst = (_OWORD *)((char *)a1 + v25);
      uint64_t v26 = (_OWORD *)((char *)a2 + v25);
      uint64_t v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        _OWORD *__dst = *v26;
        v24((char *)__dst + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v23);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        uint64_t v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        long long v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        a1[2] = a2[2];
        uint64_t v27 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
        uint64_t v28 = *(int *)(v27 + 36);
        uint64_t v29 = (char *)a1 + v28;
        uint64_t v30 = (char *)a2 + v28;
        uint64_t v31 = type metadata accessor for UnknownStorage();
        uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32);
        v60(v29, v30, v31);
        uint64_t v32 = *(int *)(v27 + 40);
        uint64_t v33 = (_OWORD *)((char *)a1 + v32);
        uint64_t v34 = (_OWORD *)((char *)a2 + v32);
        uint64_t v35 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        uint64_t v36 = *(void *)(v35 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          _OWORD *v33 = *v34;
          v60((char *)v33 + *(int *)(v35 + 20), (char *)v34 + *(int *)(v35 + 20), v31);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_21;
    }
LABEL_8:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_21;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    int v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      *a1 = *a2;
      uint64_t v38 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      uint64_t v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
      swift_storeEnumTagMultiPayload();
    }
    else if (v17 == 1)
    {
      *a1 = *a2;
      uint64_t v18 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      long long v42 = a2[1];
      *a1 = *a2;
      a1[1] = v42;
      a1[2] = a2[2];
      uint64_t v43 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v44 = *(int *)(v43 + 36);
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      uint64_t v47 = type metadata accessor for UnknownStorage();
      size_t v48 = (void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32);
      uint64_t v61 = *v48;
      (*v48)(v45, v46, v47);
      uint64_t v49 = *(int *)(v43 + 40);
      uint64_t v50 = (_OWORD *)((char *)a1 + v49);
      uint64_t v51 = (_OWORD *)((char *)a2 + v49);
      uint64_t v52 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        *uint64_t v50 = *v51;
        v61((char *)v50 + *(int *)(v52 + 20), (char *)v51 + *(int *)(v52 + 20), v47);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_21:
  uint64_t v55 = *(int *)(a3 + 20);
  uint64_t v56 = (char *)a1 + v55;
  uint64_t v57 = (char *)a2 + v55;
  uint64_t v58 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 40))(v56, v57, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F39738);
}

uint64_t sub_1B0F39738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F39758);
}

uint64_t sub_1B0F39758(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

void type metadata completion function for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      uint64_t v15 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      uint64_t v16 = (char *)a1 + v15;
      int v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      unint64_t v8 = a2[1];
      outlined copy of Data._Representation(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      int v10 = (char *)a1 + v9;
      unint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      uint64_t v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      uint64_t v21 = a2[3];
      a1[2] = a2[2];
      a1[3] = v21;
      uint64_t v22 = a2[5];
      a1[4] = a2[4];
      a1[5] = v22;
      uint64_t v23 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v24 = *(int *)(v23 + 36);
      uint64_t v36 = (char *)a2 + v24;
      uint64_t v37 = (char *)a1 + v24;
      uint64_t v25 = type metadata accessor for UnknownStorage();
      long long v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26(v37, v36, v25);
      uint64_t v27 = *(int *)(v23 + 40);
      uint64_t v28 = (uint64_t *)((char *)a1 + v27);
      uint64_t v29 = (uint64_t *)((char *)a2 + v27);
      uint64_t v30 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        uint64_t v33 = *v29;
        unint64_t v34 = v29[1];
        outlined copy of Data._Representation(*v29, v34);
        *uint64_t v28 = v33;
        v28[1] = v34;
        v26((char *)v28 + *(int *)(v30 + 20), (char *)v29 + *(int *)(v30 + 20), v25);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
LABEL_8:
    uint64_t v9 = a1 + v8;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    uint64_t v12 = v10;
    uint64_t v13 = v9;
    goto LABEL_9;
  }
  if (result == 1)
  {
    outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v8 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
    goto LABEL_8;
  }
  if (result) {
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  uint64_t v4 = a1 + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 40);
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (result) {
    return result;
  }
  outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
  uint64_t v13 = v6 + *(int *)(v7 + 20);
  uint64_t v12 = v5;
  unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))v14;
LABEL_9:
  return v11(v13, v12);
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    uint64_t v17 = a2[1];
    *a1 = *a2;
    a1[1] = v17;
    uint64_t v18 = a2[3];
    a1[2] = a2[2];
    a1[3] = v18;
    uint64_t v19 = a2[5];
    a1[4] = a2[4];
    a1[5] = v19;
    uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    uint64_t v21 = *(int *)(v20 + 36);
    uint64_t v33 = (char *)a2 + v21;
    unint64_t v34 = (char *)a1 + v21;
    uint64_t v22 = type metadata accessor for UnknownStorage();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v34, v33, v22);
    uint64_t v24 = *(int *)(v20 + 40);
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    long long v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v30 = *v26;
      unint64_t v31 = v26[1];
      outlined copy of Data._Representation(*v26, v31);
      *uint64_t v25 = v30;
      v25[1] = v31;
      v23((char *)v25 + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *a2;
      unint64_t v6 = a2[1];
      outlined copy of Data._Representation(*a2, v6);
      *a1 = v5;
      a1[1] = v6;
      uint64_t v7 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v17 = *(int *)(v16 + 36);
      uint64_t v30 = (char *)a2 + v17;
      unint64_t v31 = (char *)a1 + v17;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v31;
      uint64_t v32 = v19;
      v19(v20, v30, v18);
      uint64_t v21 = *(int *)(v16 + 40);
      uint64_t v22 = (uint64_t *)((char *)a1 + v21);
      uint64_t v23 = (uint64_t *)((char *)a2 + v21);
      uint64_t v24 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        uint64_t v27 = *v23;
        unint64_t v28 = v23[1];
        outlined copy of Data._Representation(*v23, v28);
        *uint64_t v22 = v27;
        v22[1] = v28;
        v32((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
    unint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    long long v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    a1[2] = a2[2];
    uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    uint64_t v15 = *(int *)(v14 + 36);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
    v19(v16, v17, v18);
    uint64_t v20 = *(int *)(v14 + 40);
    uint64_t v21 = (_OWORD *)((char *)a1 + v20);
    uint64_t v22 = (_OWORD *)((char *)a2 + v20);
    uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      *uint64_t v21 = *v22;
      v19((char *)v21 + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v18);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_SubscribeRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v5 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      unint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      long long v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      uint64_t v15 = *(int *)(v14 + 36);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32);
      v19(v16, v17, v18);
      uint64_t v20 = *(int *)(v14 + 40);
      uint64_t v21 = (_OWORD *)((char *)a1 + v20);
      uint64_t v22 = (_OWORD *)((char *)a2 + v20);
      uint64_t v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        *uint64_t v21 = *v22;
        v19((char *)v21 + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v18);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest.Initialize(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    uint64_t v11 = *(int *)(a3 + 36);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v25 = (char *)a2 + v11;
    *a1 = v7;
    a1[1] = v8;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v12, v25, v13);
    uint64_t v15 = *(int *)(a3 + 40);
    uint64_t v16 = (uint64_t *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v22 = *v17;
      unint64_t v23 = v17[1];
      outlined copy of Data._Representation(*v17, v23);
      *uint64_t v16 = v22;
      v16[1] = v23;
      v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    outlined consume of Data._Representation(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for AttachmentLedger_SubscribeRequest.Initialize(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = (char *)a1 + v10;
  unint64_t v23 = (char *)a2 + v10;
  *a1 = v6;
  a1[1] = v7;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v11, v23, v12);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = *v16;
    unint64_t v21 = v16[1];
    outlined copy of Data._Representation(*v16, v21);
    *uint64_t v15 = v20;
    v15[1] = v21;
    v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

void *assignWithCopy for AttachmentLedger_SubscribeRequest.Initialize(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v10 = *(void (**)(char *, char *))(v26 + 24);
  v10(v7, v8);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v8)
  {
    if (!v17)
    {
      uint64_t v22 = *v13;
      unint64_t v23 = v13[1];
      outlined copy of Data._Representation(*v13, v23);
      uint64_t v24 = *v12;
      unint64_t v25 = v12[1];
      *uint64_t v12 = v22;
      v12[1] = v23;
      outlined consume of Data._Representation(v24, v25);
      ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v27);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v12, v13, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  uint64_t v18 = *v13;
  unint64_t v19 = v13[1];
  outlined copy of Data._Representation(*v13, v19);
  *uint64_t v12 = v18;
  v12[1] = v19;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v27);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest.Initialize(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithTake for AttachmentLedger_SubscribeRequest.Initialize(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v11 - 8);
  uint64_t v25 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v24 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v22 = *v14;
      unint64_t v23 = v14[1];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      outlined consume of Data._Representation(v22, v23);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v25);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v14, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v25);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F3B308);
}

uint64_t sub_1B0F3B308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F3B44C);
}

uint64_t sub_1B0F3B44C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for AttachmentLedger_SubscribeRequest.Initialize()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData?(319, &lazy cache variable for type metadata for AttachmentLedger_EncryptionID?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    a1[1] = a2[1];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for AttachmentLedger_SubscribeRequest.AttachmentAck(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for AttachmentLedger_SubscribeRequest.AttachmentAck(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest.AttachmentAck(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for AttachmentLedger_SubscribeRequest.AttachmentAck(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F3BA48);
}

uint64_t sub_1B0F3BA48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F3BB0C);
}

void *sub_1B0F3BB0C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a3;
    uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
LABEL_54:
      uint64_t v154 = v6[5];
      unint64_t v155 = (char *)a1 + v154;
      uint64_t v156 = (char *)a2 + v154;
      uint64_t v157 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v157 - 8) + 16))(v155, v156, v157);
      return a1;
    }
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      a1[2] = a2[2];
      uint64_t v15 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
LABEL_52:
      swift_storeEnumTagMultiPayload();
LABEL_53:
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_54;
    }
    if (EnumCaseMultiPayload != 1)
    {
      __dst = v6;
      uint64_t v201 = v8;
      uint64_t v205 = v7;
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v19 = a2[3];
      a1[2] = a2[2];
      a1[3] = v19;
      a1[4] = a2[4];
      uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v21 = *(int *)(v20 + 32);
      uint64_t v22 = (char *)a1 + v21;
      v191 = (char *)a2 + v21;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24(v22, v191, v23);
      uint64_t v192 = v20;
      uint64_t v25 = *(int *)(v20 + 36);
      uint64_t v26 = (void *)((char *)a1 + v25);
      uint64_t v27 = (void *)((char *)a2 + v25);
      uint64_t v28 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v187 = v24;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v34 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v34;
        *((_OWORD *)v26 + 1) = *((_OWORD *)v27 + 1);
        uint64_t v35 = *(int *)(v28 + 28);
        uint64_t v36 = v24;
        uint64_t v37 = v23;
        uint64_t v38 = (char *)v26 + v35;
        uint64_t v39 = (char *)v27 + v35;
        swift_bridgeObjectRetain();
        uint64_t v40 = v38;
        uint64_t v23 = v37;
        v36(v40, v39, v37);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      uint64_t v7 = v205;
      uint64_t v41 = *(int *)(v192 + 40);
      long long v42 = (void *)((char *)a1 + v41);
      uint64_t v43 = (void *)((char *)a2 + v41);
      uint64_t v44 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t v45 = *(void *)(v44 - 8);
      uint64_t v6 = __dst;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        uint64_t v47 = v43[1];
        void *v42 = *v43;
        v42[1] = v47;
        uint64_t v48 = v23;
        uint64_t v49 = v43[3];
        v42[2] = v43[2];
        uint64_t v42[3] = v49;
        uint64_t v50 = v43[5];
        v42[4] = v43[4];
        v42[5] = v50;
        v42[6] = v43[6];
        uint64_t v51 = *(int *)(v44 + 32);
        v193 = (char *)v42 + v51;
        uint64_t v52 = (char *)v43 + v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v53 = v48;
        uint64_t v7 = v205;
        v187(v193, v52, v53);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v8 = v201;
      goto LABEL_53;
    }
    uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_51:
      uint64_t v149 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(void *)((char *)a1 + *(int *)(v149 + 20)) = *(void *)((char *)a2 + *(int *)(v149 + 20));
      uint64_t v150 = *(int *)(v149 + 24);
      uint64_t v151 = (char *)a1 + v150;
      uint64_t v152 = (char *)a2 + v150;
      uint64_t v153 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v153 - 8) + 16))(v151, v152, v153);
      goto LABEL_52;
    }
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v54 = *a2;
        unint64_t v55 = a2[1];
        outlined copy of Data._Representation(*a2, v55);
        *a1 = v54;
        a1[1] = v55;
        uint64_t v56 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
        uint64_t v57 = (char *)a1 + v56;
        uint64_t v58 = (char *)a2 + v56;
        uint64_t v59 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v57, v58, v59);
        goto LABEL_50;
      case 2u:
        uint64_t v60 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v61 = *(void *)(v60 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v61 + 48))(a2, 1, v60))
        {
          uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy(a1, a2, *(void *)(*(void *)(v62 - 8) + 64));
LABEL_40:
          uint64_t v116 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                        + 20);
          uint64_t v117 = (char *)a1 + v116;
          uint64_t v118 = (char *)a2 + v116;
          uint64_t v119 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v119 - 8) + 16))(v117, v118, v119);
          goto LABEL_50;
        }
        uint64_t v203 = v8;
        uint64_t v207 = v61;
        int v73 = swift_getEnumCaseMultiPayload();
        uint64_t v74 = *a2;
        unint64_t v75 = a2[1];
        outlined copy of Data._Representation(*a2, v75);
        *a1 = v74;
        a1[1] = v75;
        if (v73 == 1)
        {
          a1[2] = a2[2];
          uint64_t v76 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                       + 24);
          uint64_t v77 = (char *)a1 + v76;
          unint64_t v78 = (char *)a2 + v76;
          uint64_t v79 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 16))(v77, v78, v79);
        }
        else
        {
          a1[2] = a2[2];
          uint64_t v105 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
          uint64_t v106 = *(int *)(v105 + 24);
          id v107 = (char *)a1 + v106;
          unint64_t v108 = (char *)a2 + v106;
          uint64_t v109 = type metadata accessor for UnknownStorage();
          uint64_t v189 = *(void (**)(char *, char *))(*(void *)(v109 - 8) + 16);
          uint64_t v195 = v109;
          v189(v107, v108);
          uint64_t v110 = *(int *)(v105 + 28);
          __dstb = (void *)((char *)a1 + v110);
          uint64_t v111 = (void *)((char *)a2 + v110);
          uint64_t v112 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          uint64_t v113 = *(void *)(v112 - 8);
          if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
          {
            uint64_t v176 = v113;
            uint64_t v186 = v112;
            uint64_t v137 = *v111;
            unint64_t v138 = v111[1];
            outlined copy of Data._Representation(*v111, v138);
            uint64_t *__dstb = v137;
            __dstb[1] = v138;
            char v139 = __dstb;
            __dstb[2] = v111[2];
            ((void (*)(char *, char *, uint64_t))v189)((char *)__dstb + *(int *)(v186 + 24), (char *)v111 + *(int *)(v186 + 24), v195);
            uint64_t v140 = *(int *)(v186 + 28);
            uint64_t v180 = (uint64_t *)((char *)__dstb + v140);
            uint64_t v141 = (uint64_t *)((char *)v111 + v140);
            uint64_t v142 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            uint64_t v174 = *(void *)(v142 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v174 + 48))(v141, 1, v142))
            {
              uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
              memcpy(v180, v141, *(void *)(*(void *)(v143 - 8) + 64));
            }
            else
            {
              unint64_t v164 = v141[1];
              uint64_t v172 = *v141;
              outlined copy of Data._Representation(*v141, v164);
              *uint64_t v180 = v172;
              v180[1] = v164;
              char v139 = __dstb;
              ((void (*)(char *, char *, uint64_t))v189)((char *)v180 + *(int *)(v142 + 20), (char *)v141 + *(int *)(v142 + 20), v195);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v174 + 56))(v180, 0, 1, v142);
            }
            uint64_t v8 = v203;
            uint64_t v115 = v207;
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v176 + 56))(v139, 0, 1, v186);
            goto LABEL_39;
          }
          uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(__dstb, v111, *(void *)(*(void *)(v114 - 8) + 64));
        }
        uint64_t v8 = v203;
        uint64_t v115 = v207;
LABEL_39:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(a1, 0, 1, v60);
        goto LABEL_40;
      case 3u:
        uint64_t v63 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v64 + 48))(a2, 1, v63))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          uint64_t v204 = v8;
          uint64_t v208 = v64;
          int v80 = swift_getEnumCaseMultiPayload();
          uint64_t v81 = *a2;
          unint64_t v82 = a2[1];
          outlined copy of Data._Representation(*a2, v82);
          *a1 = v81;
          a1[1] = v82;
          if (v80 == 1)
          {
            a1[2] = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            a1[4] = a2[4];
            uint64_t v83 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            unint64_t v84 = (char *)a1 + v83;
            uint64_t v85 = (char *)a2 + v83;
            uint64_t v86 = type metadata accessor for UnknownStorage();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
          }
          else
          {
            a1[2] = a2[2];
            *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
            uint64_t v120 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v121 = *(int *)(v120 + 24);
            uint64_t v122 = (char *)a1 + v121;
            uint64_t v123 = (char *)a2 + v121;
            uint64_t v124 = type metadata accessor for UnknownStorage();
            v190 = *(void (**)(char *, char *))(*(void *)(v124 - 8) + 16);
            uint64_t v196 = v124;
            v190(v122, v123);
            uint64_t v125 = *(int *)(v120 + 28);
            __dstc = (void *)((char *)a1 + v125);
            uint64_t v126 = (void *)((char *)a2 + v125);
            uint64_t v127 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v128 = *(void *)(v127 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
            {
              uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dstc, v126, *(void *)(*(void *)(v129 - 8) + 64));
            }
            else
            {
              uint64_t v144 = v126[1];
              v181 = (void *)v144;
              void *__dstc = *v126;
              unint64_t v177 = v126[2];
              outlined copy of Data._Representation(v144, v177);
              __dstc[1] = v181;
              __dstc[2] = v177;
              ((void (*)(char *, char *, uint64_t))v190)((char *)__dstc + *(int *)(v127 + 24), (char *)v126 + *(int *)(v127 + 24), v196);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v128 + 56))(__dstc, 0, 1, v127);
            }
          }
          uint64_t v8 = v204;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v208 + 56))(a1, 0, 1, v63);
        }
        uint64_t v145 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                      + 20);
        uint64_t v146 = (char *)a1 + v145;
        os_log_type_t v147 = (char *)a2 + v145;
        uint64_t v148 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 16))(v146, v147, v148);
        goto LABEL_50;
      default:
        uint64_t v31 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(a2, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
LABEL_35:
          uint64_t v101 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
          uint64_t v102 = (char *)a1 + v101;
          uint64_t v103 = (char *)a2 + v101;
          uint64_t v104 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
LABEL_50:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
          goto LABEL_51;
        }
        uint64_t v202 = v8;
        uint64_t v206 = v32;
        int v66 = swift_getEnumCaseMultiPayload();
        uint64_t v67 = *a2;
        unint64_t v68 = a2[1];
        outlined copy of Data._Representation(*a2, v68);
        *a1 = v67;
        a1[1] = v68;
        if (v66 == 1)
        {
          uint64_t v69 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                       + 20);
          unint64_t v70 = (char *)a1 + v69;
          uint64_t v71 = (char *)a2 + v69;
          uint64_t v72 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v70, v71, v72);
        }
        else
        {
          uint64_t v87 = a2[3];
          a1[2] = a2[2];
          a1[3] = v87;
          *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
          uint64_t v88 = a2[5];
          unint64_t v89 = a2[6];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v88, v89);
          a1[5] = v88;
          a1[6] = v89;
          uint64_t v90 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v91 = *(int *)(v90 + 32);
          uint64_t v92 = (char *)a1 + v91;
          uint64_t v93 = (char *)a2 + v91;
          uint64_t v94 = type metadata accessor for UnknownStorage();
          uint64_t v188 = *(void (**)(char *, char *))(*(void *)(v94 - 8) + 16);
          uint64_t v194 = v94;
          v188(v92, v93);
          uint64_t v95 = *(int *)(v90 + 36);
          unint64_t v96 = (void *)((char *)a1 + v95);
          uint64_t v97 = (void *)((char *)a2 + v95);
          uint64_t v98 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v99 = *(void *)(v98 - 8);
          __dsta = (int *)v98;
          if (!(*(unsigned int (**)(void *, uint64_t))(v99 + 48))(v97, 1))
          {
            uint64_t v173 = v99;
            uint64_t v130 = v97[1];
            *unint64_t v96 = *v97;
            v96[1] = v130;
            uint64_t v131 = v97[3];
            v96[2] = v97[2];
            v96[3] = v131;
            uint64_t v178 = (void *)v97[4];
            unint64_t v183 = v97[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation((uint64_t)v178, v183);
            v96[4] = v178;
            v96[5] = v183;
            uint64_t v132 = v97[6];
            unint64_t v184 = v97[7];
            outlined copy of Data._Representation(v132, v184);
            v96[6] = v132;
            v96[7] = v184;
            ((void (*)(char *, char *, uint64_t))v188)((char *)v96 + __dsta[8], (char *)v97 + __dsta[8], v194);
            uint64_t v133 = __dsta[9];
            uint64_t v179 = (void *)((char *)v96 + v133);
            uint64_t v185 = v96;
            uint64_t v171 = v97;
            uint64_t v134 = (void *)((char *)v97 + v133);
            uint64_t v135 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v169 = *(void *)(v135 - 8);
            unint64_t v170 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v169 + 48);
            uint64_t v175 = v135;
            if (v170(v134, 1, v135))
            {
              uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v179, v134, *(void *)(*(void *)(v136 - 8) + 64));
            }
            else
            {
              uint64_t v159 = v134[1];
              *uint64_t v179 = *v134;
              unint64_t v167 = v134[2];
              uint64_t v168 = v159;
              outlined copy of Data._Representation(v159, v167);
              v179[1] = v168;
              v179[2] = v167;
              ((void (*)(char *, char *, uint64_t))v188)((char *)v179 + *(int *)(v135 + 24), (char *)v134 + *(int *)(v135 + 24), v194);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v169 + 56))(v179, 0, 1, v135);
            }
            uint64_t v160 = __dsta[10];
            v161 = (void *)((char *)v185 + v160);
            uint64_t v162 = (void *)((char *)v171 + v160);
            if (v170((void *)((char *)v171 + v160), 1, v175))
            {
              uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v161, v162, *(void *)(*(void *)(v163 - 8) + 64));
            }
            else
            {
              uint64_t v165 = v162[1];
              uint64_t v182 = (void *)v165;
              void *v161 = *v162;
              unint64_t v166 = v162[2];
              outlined copy of Data._Representation(v165, v166);
              v161[1] = v182;
              v161[2] = v166;
              ((void (*)(char *, char *, uint64_t))v188)((char *)v161 + *(int *)(v175 + 24), (char *)v162 + *(int *)(v175 + 24), v194);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v169 + 56))(v161, 0, 1, v175);
            }
            uint64_t v8 = v202;
            (*(void (**)(void *, void, uint64_t, int *))(v173 + 56))(v185, 0, 1, __dsta);
            goto LABEL_34;
          }
          uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v96, v97, *(void *)(*(void *)(v100 - 8) + 64));
        }
        uint64_t v8 = v202;
LABEL_34:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v206 + 56))(a1, 0, 1, v31);
        goto LABEL_35;
    }
  }
  uint64_t v10 = *a2;
  *a1 = *a2;
  a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4)) {
    goto LABEL_38;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
LABEL_37:
      uint64_t v55 = a1 + *(int *)(v14 + 24);
      uint64_t v56 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v55, v56);
      break;
    case 1:
      uint64_t v15 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(a1, 1, v15))
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(a1, 1, v16))
            {
              int v17 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
              if (v17 == 1)
              {
                uint64_t v18 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                uint64_t v19 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
              }
              else
              {
                swift_bridgeObjectRelease();
                outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
                uint64_t v29 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                uint64_t v30 = a1 + *(int *)(v29 + 32);
                uint64_t v31 = type metadata accessor for UnknownStorage();
                uint64_t v32 = *(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8);
                v32(v30, v31);
                uint64_t v33 = a1 + *(int *)(v29 + 36);
                uint64_t v34 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v34 - 1) + 48))(v33, 1, v34))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of Data._Representation(*(void *)(v33 + 32), *(void *)(v33 + 40));
                  outlined consume of Data._Representation(*(void *)(v33 + 48), *(void *)(v33 + 56));
                  uint64_t v61 = v32;
                  v32(v33 + v34[8], v31);
                  uint64_t v35 = v33 + v34[9];
                  uint64_t v36 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48);
                  if (!v37(v35, 1, v36))
                  {
                    outlined consume of Data._Representation(*(void *)(v35 + 8), *(void *)(v35 + 16));
                    v61(v35 + *(int *)(v36 + 24), v31);
                  }
                  uint64_t v38 = v33 + v34[10];
                  if (!v37(v38, 1, v36))
                  {
                    outlined consume of Data._Representation(*(void *)(v38 + 8), *(void *)(v38 + 16));
                    v61(v38 + *(int *)(v36 + 24), v31);
                  }
                }
              }
            }
            uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            goto LABEL_35;
          case 1u:
            outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
            uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            goto LABEL_35;
          case 2u:
            uint64_t v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(a1, 1, v21))
            {
              int v22 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
              if (v22 == 1)
              {
                uint64_t v23 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                uint64_t v24 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
              }
              else
              {
                uint64_t v39 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                uint64_t v40 = a1 + *(int *)(v39 + 24);
                uint64_t v41 = type metadata accessor for UnknownStorage();
                long long v42 = *(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8);
                v42(v40, v41);
                uint64_t v43 = a1 + *(int *)(v39 + 28);
                uint64_t v44 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44))
                {
                  outlined consume of Data._Representation(*(void *)v43, *(void *)(v43 + 8));
                  v42(v43 + *(int *)(v44 + 24), v41);
                  uint64_t v45 = v43 + *(int *)(v44 + 28);
                  uint64_t v46 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v45, 1, v46))
                  {
                    outlined consume of Data._Representation(*(void *)v45, *(void *)(v45 + 8));
                    v42(v45 + *(int *)(v46 + 20), v41);
                  }
                }
              }
            }
            uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            goto LABEL_35;
          case 3u:
            uint64_t v25 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(a1, 1, v25))
            {
              int v26 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
              if (v26 == 1)
              {
                uint64_t v27 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                uint64_t v28 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v27, v28);
              }
              else
              {
                uint64_t v47 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                uint64_t v48 = a1 + *(int *)(v47 + 24);
                uint64_t v49 = type metadata accessor for UnknownStorage();
                uint64_t v50 = *(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8);
                v50(v48, v49);
                uint64_t v51 = a1 + *(int *)(v47 + 28);
                uint64_t v52 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v51, 1, v52))
                {
                  outlined consume of Data._Representation(*(void *)(v51 + 8), *(void *)(v51 + 16));
                  v50(v51 + *(int *)(v52 + 24), v49);
                }
              }
            }
            uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_35:
            uint64_t v53 = a1 + *(int *)(v20 + 20);
            uint64_t v54 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v53, v54);
            break;
          default:
            break;
        }
      }
      uint64_t v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      goto LABEL_37;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v7 = a1 + v6[8];
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
      v9(v7, v8);
      uint64_t v10 = a1 + v6[9];
      uint64_t v11 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
      {
        swift_bridgeObjectRelease();
        v9(v10 + *(int *)(v11 + 28), v8);
      }
      uint64_t v12 = a1 + v6[10];
      uint64_t v13 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9(v12 + *(int *)(v13 + 32), v8);
      }
      break;
  }
LABEL_38:
  uint64_t v57 = a1 + *(int *)(a2 + 20);
  uint64_t v58 = type metadata accessor for UnknownStorage();
  uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8);
  return v59(v57, v58);
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 16) = a2[2];
      uint64_t v13 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      uint64_t v14 = a1 + v13;
      uint64_t v15 = (uint64_t)a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
LABEL_55:
      swift_storeEnumTagMultiPayload();
LABEL_56:
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_57;
    }
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v205 = v7;
      uint64_t v209 = v6;
      uint64_t v201 = a3;
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v17 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v17;
      *(void *)(a1 + 32) = a2[4];
      uint64_t v18 = a1;
      uint64_t v19 = a2;
      uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v21 = *(int *)(v20 + 32);
      uint64_t v22 = v18 + v21;
      __dstd = (char *)v19 + v21;
      uint64_t v23 = type metadata accessor for UnknownStorage();
      uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24(v22, __dstd, v23);
      __dst = (int *)v20;
      uint64_t v25 = *(int *)(v20 + 36);
      a2 = v19;
      a1 = v18;
      int v26 = (void *)(v18 + v25);
      uint64_t v27 = (uint64_t *)((char *)a2 + v25);
      uint64_t v28 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        uint64_t v34 = v27[1];
        *int v26 = *v27;
        v26[1] = v34;
        *((_OWORD *)v26 + 1) = *((_OWORD *)v27 + 1);
        uint64_t v35 = *(int *)(v28 + 28);
        uint64_t v36 = v23;
        uint64_t v37 = v24;
        uint64_t v38 = (char *)v26 + v35;
        uint64_t v39 = (char *)v27 + v35;
        swift_bridgeObjectRetain();
        uint64_t v40 = v38;
        uint64_t v24 = v37;
        uint64_t v23 = v36;
        v24((uint64_t)v40, v39, v36);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      uint64_t v6 = v209;
      uint64_t v41 = __dst[10];
      long long v42 = (void *)(v18 + v41);
      uint64_t v43 = (uint64_t *)((char *)a2 + v41);
      uint64_t v44 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t v45 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        uint64_t v47 = v43[1];
        void *v42 = *v43;
        v42[1] = v47;
        uint64_t v48 = v23;
        uint64_t v49 = (void (*)(char *, char *, uint64_t))v24;
        uint64_t v50 = v43[3];
        v42[2] = v43[2];
        uint64_t v42[3] = v50;
        uint64_t v51 = v43[5];
        v42[4] = v43[4];
        v42[5] = v51;
        v42[6] = v43[6];
        uint64_t v52 = *(int *)(v44 + 32);
        __dste = (char *)v42 + v52;
        uint64_t v53 = (char *)v43 + v52;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v54 = v48;
        uint64_t v6 = v209;
        v49(__dste, v53, v54);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      a3 = v201;
      swift_storeEnumTagMultiPayload();
      uint64_t v7 = v205;
      goto LABEL_56;
    }
    uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_54:
      uint64_t v162 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(void *)(a1 + *(int *)(v162 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v162 + 20));
      uint64_t v163 = *(int *)(v162 + 24);
      uint64_t v164 = a1 + v163;
      uint64_t v165 = (uint64_t)a2 + v163;
      uint64_t v166 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 16))(v164, v165, v166);
      goto LABEL_55;
    }
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v55 = *a2;
        unint64_t v56 = a2[1];
        outlined copy of Data._Representation(*a2, v56);
        *(void *)a1 = v55;
        *(void *)(a1 + 8) = v56;
        uint64_t v57 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
        uint64_t v58 = a1 + v57;
        uint64_t v59 = (uint64_t)a2 + v57;
        uint64_t v60 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
        goto LABEL_53;
      case 2u:
        uint64_t v61 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v62 = *(void *)(v61 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v62 + 48))(a2, 1, v61))
        {
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy((void *)a1, a2, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          uint64_t v207 = v7;
          uint64_t v203 = a3;
          int v74 = swift_getEnumCaseMultiPayload();
          uint64_t v75 = *a2;
          unint64_t v76 = a2[1];
          outlined copy of Data._Representation(*a2, v76);
          *(void *)a1 = v75;
          *(void *)(a1 + 8) = v76;
          if (v74 == 1)
          {
            *(void *)(a1 + 16) = a2[2];
            uint64_t v77 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            uint64_t v78 = a1 + v77;
            uint64_t v79 = (uint64_t)a2 + v77;
            uint64_t v80 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16))(v78, v79, v80);
            a3 = v203;
          }
          else
          {
            uint64_t v211 = v62;
            *(void *)(a1 + 16) = a2[2];
            uint64_t v104 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v105 = *(int *)(v104 + 24);
            uint64_t v106 = a1 + v105;
            uint64_t v107 = (uint64_t)a2 + v105;
            uint64_t v108 = type metadata accessor for UnknownStorage();
            v193 = *(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 16);
            __dstb = (void *)v108;
            v193(v106, v107);
            uint64_t v109 = *(int *)(v104 + 28);
            uint64_t v110 = (void *)(a1 + v109);
            uint64_t v111 = (uint64_t *)((char *)a2 + v109);
            uint64_t v112 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            uint64_t v113 = *(void *)(v112 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
            {
              uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
              a3 = v203;
              uint64_t v62 = v211;
            }
            else
            {
              uint64_t v181 = v113;
              uint64_t v190 = v112;
              uint64_t v137 = *v111;
              unint64_t v136 = v111[1];
              outlined copy of Data._Representation(*v111, v136);
              *uint64_t v110 = v137;
              v110[1] = v136;
              uint64_t v138 = v190;
              v110[2] = v111[2];
              ((void (*)(char *, char *, void *))v193)((char *)v110 + *(int *)(v190 + 24), (char *)v111 + *(int *)(v190 + 24), __dstb);
              uint64_t v139 = *(int *)(v190 + 28);
              unint64_t v183 = v110;
              uint64_t v186 = (void *)((char *)v110 + v139);
              uint64_t v140 = (uint64_t *)((char *)v111 + v139);
              uint64_t v141 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v142 = *(void *)(v141 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141))
              {
                uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v186, v140, *(void *)(*(void *)(v143 - 8) + 64));
              }
              else
              {
                unint64_t v157 = v140[1];
                uint64_t v178 = *v140;
                outlined copy of Data._Representation(*v140, v157);
                *uint64_t v186 = v178;
                v186[1] = v157;
                uint64_t v138 = v190;
                ((void (*)(char *, char *, void *))v193)((char *)v186 + *(int *)(v141 + 20), (char *)v140 + *(int *)(v141 + 20), __dstb);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v142 + 56))(v186, 0, 1, v141);
              }
              a3 = v203;
              uint64_t v62 = v211;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v181 + 56))(v183, 0, 1, v138);
            }
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(a1, 0, 1, v61);
          uint64_t v7 = v207;
        }
        uint64_t v158 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                      + 20);
        uint64_t v159 = a1 + v158;
        uint64_t v160 = (uint64_t)a2 + v158;
        uint64_t v161 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v161 - 8) + 16))(v159, v160, v161);
        goto LABEL_53;
      case 3u:
        uint64_t v64 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v65 = *(void *)(v64 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v65 + 48))(a2, 1, v64))
        {
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy((void *)a1, a2, *(void *)(*(void *)(v66 - 8) + 64));
        }
        else
        {
          uint64_t v208 = v7;
          uint64_t v204 = a3;
          int v81 = swift_getEnumCaseMultiPayload();
          uint64_t v82 = *a2;
          unint64_t v83 = a2[1];
          outlined copy of Data._Representation(*a2, v83);
          *(void *)a1 = v82;
          *(void *)(a1 + 8) = v83;
          if (v81 == 1)
          {
            *(void *)(a1 + 16) = a2[2];
            *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
            *(void *)(a1 + 32) = a2[4];
            uint64_t v84 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            uint64_t v85 = a1 + v84;
            uint64_t v86 = (uint64_t)a2 + v84;
            uint64_t v87 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 16))(v85, v86, v87);
            a3 = v204;
            uint64_t v7 = v208;
          }
          else
          {
            uint64_t v212 = v65;
            *(void *)(a1 + 16) = a2[2];
            *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
            uint64_t v115 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v116 = *(int *)(v115 + 24);
            uint64_t v117 = a1 + v116;
            uint64_t v118 = (uint64_t)a2 + v116;
            uint64_t v119 = type metadata accessor for UnknownStorage();
            uint64_t v194 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v119 - 8) + 16);
            v194(v117, v118, v119);
            uint64_t v120 = *(int *)(v115 + 28);
            __dstc = (void *)(a1 + v120);
            uint64_t v121 = (uint64_t *)((char *)a2 + v120);
            uint64_t v122 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v123 = *(void *)(v122 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v123 + 48))(v121, 1, v122))
            {
              uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(__dstc, v121, *(void *)(*(void *)(v124 - 8) + 64));
            }
            else
            {
              uint64_t v144 = v121[1];
              uint64_t v187 = (void *)v144;
              void *__dstc = *v121;
              unint64_t v184 = v121[2];
              outlined copy of Data._Representation(v144, v184);
              __dstc[1] = v187;
              __dstc[2] = v184;
              v194((uint64_t)__dstc + *(int *)(v122 + 24), (uint64_t)v121 + *(int *)(v122 + 24), v119);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v123 + 56))(__dstc, 0, 1, v122);
            }
            a3 = v204;
            uint64_t v7 = v208;
            uint64_t v65 = v212;
          }
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(a1, 0, 1, v64);
        }
        uint64_t v145 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                      + 20);
        uint64_t v146 = a1 + v145;
        uint64_t v147 = (uint64_t)a2 + v145;
        uint64_t v148 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v148 - 8) + 16))(v146, v147, v148);
        goto LABEL_53;
      default:
        uint64_t v31 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v32 = *(void *)(v31 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(a2, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy((void *)a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
          goto LABEL_33;
        }
        uint64_t v206 = v7;
        uint64_t v202 = a3;
        int v67 = swift_getEnumCaseMultiPayload();
        uint64_t v68 = *a2;
        unint64_t v69 = a2[1];
        outlined copy of Data._Representation(*a2, v69);
        *(void *)a1 = v68;
        *(void *)(a1 + 8) = v69;
        if (v67 == 1)
        {
          uint64_t v70 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                       + 20);
          uint64_t v71 = a1 + v70;
          uint64_t v72 = (uint64_t)a2 + v70;
          uint64_t v73 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16))(v71, v72, v73);
        }
        else
        {
          uint64_t v88 = a2[3];
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v88;
          *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
          uint64_t v89 = a2[5];
          unint64_t v90 = a2[6];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v89, v90);
          *(void *)(a1 + 40) = v89;
          *(void *)(a1 + 48) = v90;
          uint64_t v91 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v92 = *(int *)(v91 + 32);
          uint64_t v93 = a1 + v92;
          uint64_t v94 = (uint64_t)a2 + v92;
          uint64_t v191 = type metadata accessor for UnknownStorage();
          uint64_t v192 = (void **)(*(void *)(v191 - 8) + 16);
          __dsta = (void (*)(char *, char *, uint64_t))*v192;
          ((void (*)(uint64_t, uint64_t))*v192)(v93, v94);
          uint64_t v95 = *(int *)(v91 + 36);
          v210 = (char *)(a1 + v95);
          unint64_t v96 = (char *)a2 + v95;
          uint64_t v97 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v98 = *(void *)(v97 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
          {
            uint64_t v180 = v98;
            uint64_t v182 = v32;
            uint64_t v125 = *((void *)v96 + 1);
            *(void *)v210 = *(void *)v96;
            *((void *)v210 + 1) = v125;
            uint64_t v189 = (int *)v97;
            uint64_t v126 = *((void *)v96 + 3);
            *((void *)v210 + 2) = *((void *)v96 + 2);
            *((void *)v210 + 3) = v126;
            uint64_t v128 = *((void *)v96 + 4);
            unint64_t v127 = *((void *)v96 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v128, v127);
            *((void *)v210 + 4) = v128;
            *((void *)v210 + 5) = v127;
            uint64_t v129 = *((void *)v96 + 6);
            unint64_t v130 = *((void *)v96 + 7);
            outlined copy of Data._Representation(v129, v130);
            *((void *)v210 + 6) = v129;
            *((void *)v210 + 7) = v130;
            __dsta(&v210[v189[8]], &v96[v189[8]], v191);
            uint64_t v131 = v189[9];
            uint64_t v185 = &v210[v131];
            __src = v96;
            uint64_t v132 = &v96[v131];
            uint64_t v133 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v134 = *(void *)(v133 - 8);
            unint64_t v177 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48);
            uint64_t v176 = v134;
            if (v177(v132, 1, v133))
            {
              uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v185, v132, *(void *)(*(void *)(v135 - 8) + 64));
            }
            else
            {
              uint64_t v149 = *((void *)v132 + 1);
              uint64_t v174 = v149;
              uint64_t v175 = v133;
              *(void *)uint64_t v185 = *(void *)v132;
              unint64_t v150 = *((void *)v132 + 2);
              outlined copy of Data._Representation(v149, v150);
              *((void *)v185 + 1) = v174;
              *((void *)v185 + 2) = v150;
              uint64_t v133 = v175;
              __dsta(&v185[*(int *)(v175 + 24)], &v132[*(int *)(v175 + 24)], v191);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v134 + 56))(v185, 0, 1, v175);
            }
            uint64_t v151 = v189[10];
            uint64_t v152 = &v210[v151];
            uint64_t v153 = &__src[v151];
            unsigned int v154 = v177(&__src[v151], 1, v133);
            uint64_t v155 = v133;
            uint64_t v7 = v206;
            if (v154)
            {
              uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
            }
            else
            {
              uint64_t v172 = *((void *)v153 + 1);
              uint64_t v188 = (void *)v172;
              *(void *)uint64_t v152 = *(void *)v153;
              unint64_t v173 = *((void *)v153 + 2);
              outlined copy of Data._Representation(v172, v173);
              *((void *)v152 + 1) = v188;
              *((void *)v152 + 2) = v173;
              uint64_t v7 = v206;
              __dsta(&v152[*(int *)(v155 + 24)], &v153[*(int *)(v155 + 24)], v191);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v176 + 56))(v152, 0, 1, v155);
            }
            (*(void (**)(char *, void, uint64_t, int *))(v180 + 56))(v210, 0, 1, v189);
            a3 = v202;
            uint64_t v32 = v182;
            goto LABEL_32;
          }
          uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v210, v96, *(void *)(*(void *)(v99 - 8) + 64));
        }
        a3 = v202;
        uint64_t v7 = v206;
LABEL_32:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(a1, 0, 1, v31);
LABEL_33:
        uint64_t v100 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
        uint64_t v101 = a1 + v100;
        uint64_t v102 = (uint64_t)a2 + v100;
        uint64_t v103 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 16))(v101, v102, v103);
LABEL_53:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
        goto LABEL_54;
    }
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  memcpy((void *)a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
LABEL_57:
  uint64_t v167 = *(int *)(a3 + 20);
  uint64_t v168 = a1 + v167;
  uint64_t v169 = (uint64_t)a2 + v167;
  uint64_t v170 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 16))(v168, v169, v170);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8((uint64_t)a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v20 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v20;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v21 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
        uint64_t v22 = a1 + v21;
        uint64_t v23 = (uint64_t)a2 + v21;
        uint64_t v24 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          v344 = (void *)v6;
          uint64_t v353 = v7;
          uint64_t v360 = a3;
          uint64_t v25 = *a2;
          *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
          *(void *)a1 = v25;
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = a2[3];
          *(void *)(a1 + 32) = a2[4];
          uint64_t v26 = a1;
          uint64_t v27 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
          uint64_t v28 = *(int *)(v27 + 32);
          uint64_t v29 = v26 + v28;
          __dstf = (char *)a2 + v28;
          uint64_t v30 = type metadata accessor for UnknownStorage();
          uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v30 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v31(v29, __dstf, v30);
          uint64_t v329 = v27;
          uint64_t v32 = *(int *)(v27 + 36);
          a1 = v26;
          uint64_t v33 = (void *)(v26 + v32);
          uint64_t v34 = (uint64_t *)((char *)a2 + v32);
          uint64_t v35 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
          uint64_t v36 = *(void *)(v35 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
          {
            uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
            memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
          }
          else
          {
            void *v33 = *v34;
            v33[1] = v34[1];
            v33[2] = v34[2];
            void v33[3] = v34[3];
            uint64_t v58 = *(int *)(v35 + 28);
            uint64_t v59 = v30;
            uint64_t v60 = v31;
            uint64_t v61 = (char *)v33 + v58;
            uint64_t v62 = (char *)v34 + v58;
            swift_bridgeObjectRetain();
            uint64_t v63 = v61;
            uint64_t v31 = v60;
            uint64_t v30 = v59;
            v31((uint64_t)v63, v62, v59);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          }
          uint64_t v6 = (uint64_t)v344;
          uint64_t v64 = *(int *)(v329 + 40);
          uint64_t v65 = (void *)(v26 + v64);
          uint64_t v66 = (uint64_t *)((char *)a2 + v64);
          uint64_t v67 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
          uint64_t v68 = *(void *)(v67 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67))
          {
            uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
            memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
          }
          else
          {
            void *v65 = *v66;
            v65[1] = v66[1];
            v65[2] = v66[2];
            v65[3] = v66[3];
            void v65[4] = v66[4];
            v65[5] = v66[5];
            v65[6] = v66[6];
            uint64_t v70 = *(int *)(v67 + 32);
            v330 = (char *)v65 + v70;
            uint64_t v71 = (char *)v66 + v70;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v6 = (uint64_t)v344;
            v31((uint64_t)v330, v71, v30);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
          }
          uint64_t v7 = v353;
          swift_storeEnumTagMultiPayload();
          a3 = v360;
          goto LABEL_106;
        }
        uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
          memcpy((void *)a1, a2, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          uint64_t v354 = v7;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              uint64_t v89 = *a2;
              unint64_t v90 = a2[1];
              outlined copy of Data._Representation(*a2, v90);
              *(void *)a1 = v89;
              *(void *)(a1 + 8) = v90;
              uint64_t v91 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
              break;
            case 2u:
              uint64_t v92 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
              uint64_t v93 = *(unsigned int (***)(void, uint64_t, uint64_t))(v92 - 8);
              if (((unsigned int (**)(uint64_t *, uint64_t, uint64_t))v93)[6](a2, 1, v92))
              {
                uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
                memcpy((void *)a1, a2, *(void *)(*(void *)(v94 - 8) + 64));
              }
              else
              {
                v348 = (void (**)(uint64_t, void, uint64_t, uint64_t))v93;
                uint64_t v364 = a3;
                int v115 = swift_getEnumCaseMultiPayload();
                uint64_t v116 = *a2;
                unint64_t v117 = a2[1];
                outlined copy of Data._Representation(*a2, v117);
                *(void *)a1 = v116;
                *(void *)(a1 + 8) = v117;
                if (v115 == 1)
                {
                  *(void *)(a1 + 16) = a2[2];
                  uint64_t v118 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                                + 24);
                  uint64_t v119 = a1 + v118;
                  uint64_t v120 = (uint64_t)a2 + v118;
                  uint64_t v121 = type metadata accessor for UnknownStorage();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 16))(v119, v120, v121);
                  swift_storeEnumTagMultiPayload();
                  a3 = v364;
                  uint64_t v122 = v348;
                }
                else
                {
                  *(void *)(a1 + 16) = a2[2];
                  uint64_t v146 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                  uint64_t v147 = *(int *)(v146 + 24);
                  uint64_t v148 = a1 + v147;
                  uint64_t v149 = (uint64_t)a2 + v147;
                  uint64_t v150 = type metadata accessor for UnknownStorage();
                  v327 = *(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 16);
                  uint64_t v332 = v150;
                  v327(v148, v149);
                  uint64_t v151 = *(int *)(v146 + 28);
                  __dsta = (void *)(a1 + v151);
                  uint64_t v152 = (uint64_t *)((char *)a2 + v151);
                  uint64_t v153 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                  uint64_t v154 = *(void *)(v153 - 8);
                  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
                  {
                    uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                    memcpy(__dsta, v152, *(void *)(*(void *)(v155 - 8) + 64));
                    a3 = v364;
                    uint64_t v122 = v348;
                  }
                  else
                  {
                    uint64_t v301 = v154;
                    v316 = (int *)v153;
                    uint64_t v196 = *v152;
                    unint64_t v197 = v152[1];
                    outlined copy of Data._Representation(*v152, v197);
                    void *__dsta = v196;
                    __dsta[1] = v197;
                    uint64_t v198 = __dsta;
                    __dsta[2] = v152[2];
                    ((void (*)(char *, char *, uint64_t))v327)((char *)__dsta + v316[6], (char *)v152 + v316[6], v332);
                    uint64_t v199 = v316[7];
                    v307 = (void *)((char *)__dsta + v199);
                    uint64_t v200 = (uint64_t *)((char *)v152 + v199);
                    uint64_t v201 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                    uint64_t v294 = *(void *)(v201 - 8);
                    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v294 + 48))(v200, 1, v201))
                    {
                      uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                      memcpy(v307, v200, *(void *)(*(void *)(v202 - 8) + 64));
                    }
                    else
                    {
                      unint64_t v242 = v200[1];
                      uint64_t v290 = *v200;
                      outlined copy of Data._Representation(*v200, v242);
                      void *v307 = v290;
                      v307[1] = v242;
                      uint64_t v198 = __dsta;
                      ((void (*)(char *, char *, uint64_t))v327)((char *)v307 + *(int *)(v201 + 20), (char *)v200 + *(int *)(v201 + 20), v332);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v294 + 56))(v307, 0, 1, v201);
                    }
                    a3 = v364;
                    uint64_t v122 = v348;
                    (*(void (**)(void *, void, uint64_t, int *))(v301 + 56))(v198, 0, 1, v316);
                  }
                  swift_storeEnumTagMultiPayload();
                }
                v122[7](a1, 0, 1, v92);
              }
              uint64_t v91 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
              break;
            case 3u:
              uint64_t v95 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
              unint64_t v96 = *(unsigned int (***)(void, uint64_t, uint64_t))(v95 - 8);
              if (((unsigned int (**)(uint64_t *, uint64_t, uint64_t))v96)[6](a2, 1, v95))
              {
                uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
                memcpy((void *)a1, a2, *(void *)(*(void *)(v97 - 8) + 64));
              }
              else
              {
                v349 = (void (**)(uint64_t, void, uint64_t, uint64_t))v96;
                uint64_t v365 = a3;
                int v123 = swift_getEnumCaseMultiPayload();
                uint64_t v124 = *a2;
                unint64_t v125 = a2[1];
                outlined copy of Data._Representation(*a2, v125);
                *(void *)a1 = v124;
                *(void *)(a1 + 8) = v125;
                if (v123 == 1)
                {
                  uint64_t v126 = a2[2];
                  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
                  *(void *)(a1 + 16) = v126;
                  *(void *)(a1 + 32) = a2[4];
                  uint64_t v127 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                                + 28);
                  uint64_t v128 = a1 + v127;
                  uint64_t v129 = (uint64_t)a2 + v127;
                  uint64_t v130 = type metadata accessor for UnknownStorage();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 16))(v128, v129, v130);
                  swift_storeEnumTagMultiPayload();
                  a3 = v365;
                  uint64_t v131 = v349;
                }
                else
                {
                  uint64_t v156 = a2[2];
                  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
                  *(void *)(a1 + 16) = v156;
                  uint64_t v157 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                  uint64_t v158 = *(int *)(v157 + 24);
                  uint64_t v159 = a1 + v158;
                  uint64_t v160 = (uint64_t)a2 + v158;
                  uint64_t v161 = type metadata accessor for UnknownStorage();
                  v328 = *(void (**)(uint64_t, uint64_t))(*(void *)(v161 - 8) + 16);
                  uint64_t v333 = v161;
                  v328(v159, v160);
                  uint64_t v162 = *(int *)(v157 + 28);
                  __dstb = (void *)(a1 + v162);
                  uint64_t v163 = (uint64_t *)((char *)a2 + v162);
                  uint64_t v164 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v165 = *(void *)(v164 - 8);
                  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v165 + 48))(v163, 1, v164))
                  {
                    uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(__dstb, v163, *(void *)(*(void *)(v166 - 8) + 64));
                  }
                  else
                  {
                    void *__dstb = *v163;
                    unint64_t v302 = v163[2];
                    v308 = (void *)v163[1];
                    outlined copy of Data._Representation((uint64_t)v308, v302);
                    __dstb[1] = v308;
                    __dstb[2] = v302;
                    ((void (*)(char *, char *, uint64_t))v328)((char *)__dstb + *(int *)(v164 + 24), (char *)v163 + *(int *)(v164 + 24), v333);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v165 + 56))(__dstb, 0, 1, v164);
                  }
                  a3 = v365;
                  uint64_t v131 = v349;
                  swift_storeEnumTagMultiPayload();
                }
                v131[7](a1, 0, 1, v95);
              }
              uint64_t v91 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
              break;
            default:
              uint64_t v38 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
              uint64_t v39 = *(unsigned int (***)(void, uint64_t, uint64_t))(v38 - 8);
              if (((unsigned int (**)(uint64_t *, uint64_t, uint64_t))v39)[6](a2, 1, v38))
              {
                uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
                memcpy((void *)a1, a2, *(void *)(*(void *)(v40 - 8) + 64));
              }
              else
              {
                v347 = (void (**)(uint64_t, void, uint64_t, uint64_t))v39;
                uint64_t v363 = a3;
                int v98 = swift_getEnumCaseMultiPayload();
                uint64_t v99 = *a2;
                unint64_t v100 = a2[1];
                outlined copy of Data._Representation(*a2, v100);
                *(void *)a1 = v99;
                *(void *)(a1 + 8) = v100;
                if (v98 == 1)
                {
                  uint64_t v101 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                                + 20);
                  uint64_t v102 = a1 + v101;
                  uint64_t v103 = (uint64_t)a2 + v101;
                  uint64_t v104 = type metadata accessor for UnknownStorage();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(v102, v103, v104);
                  swift_storeEnumTagMultiPayload();
                  a3 = v363;
                  uint64_t v105 = v347;
                }
                else
                {
                  *(void *)(a1 + 16) = a2[2];
                  uint64_t v132 = a2[3];
                  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
                  *(void *)(a1 + 24) = v132;
                  uint64_t v133 = a2[5];
                  unint64_t v134 = a2[6];
                  swift_bridgeObjectRetain();
                  outlined copy of Data._Representation(v133, v134);
                  *(void *)(a1 + 40) = v133;
                  *(void *)(a1 + 48) = v134;
                  uint64_t v135 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                  uint64_t v136 = *(int *)(v135 + 32);
                  uint64_t v137 = a1 + v136;
                  uint64_t v138 = (uint64_t)a2 + v136;
                  uint64_t v139 = type metadata accessor for UnknownStorage();
                  v326 = *(void (**)(uint64_t, uint64_t))(*(void *)(v139 - 8) + 16);
                  uint64_t v331 = v139;
                  v326(v137, v138);
                  uint64_t v140 = *(int *)(v135 + 36);
                  uint64_t v141 = (void *)(a1 + v140);
                  uint64_t v142 = (uint64_t *)((char *)a2 + v140);
                  uint64_t v143 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                  uint64_t v144 = *(void *)(v143 - 8);
                  __dst = (int *)v143;
                  if ((*(unsigned int (**)(void *, uint64_t))(v144 + 48))(v142, 1))
                  {
                    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                    memcpy(v141, v142, *(void *)(*(void *)(v145 - 8) + 64));
                  }
                  else
                  {
                    uint64_t v300 = v144;
                    void *v141 = *v142;
                    v141[1] = v142[1];
                    v141[2] = v142[2];
                    v141[3] = v142[3];
                    v305 = (void *)v142[4];
                    v313 = (void *)v142[5];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    outlined copy of Data._Representation((uint64_t)v305, (unint64_t)v313);
                    v141[4] = v305;
                    v141[5] = v313;
                    uint64_t v191 = v142[6];
                    v314 = (void *)v142[7];
                    outlined copy of Data._Representation(v191, (unint64_t)v314);
                    v141[6] = v191;
                    v141[7] = v314;
                    ((void (*)(char *, char *, uint64_t))v326)((char *)v141 + __dst[8], (char *)v142 + __dst[8], v331);
                    uint64_t v192 = __dst[9];
                    v306 = (void *)((char *)v141 + v192);
                    v315 = (char *)v141;
                    __src = (char *)v142;
                    v193 = (void *)((char *)v142 + v192);
                    uint64_t v194 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                    uint64_t v287 = *(void *)(v194 - 8);
                    v289 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v287 + 48);
                    uint64_t v293 = v194;
                    if (v289((char *)v193, 1, v194))
                    {
                      uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                      memcpy(v306, v193, *(void *)(*(void *)(v195 - 8) + 64));
                    }
                    else
                    {
                      void *v306 = *v193;
                      unint64_t v284 = v193[2];
                      uint64_t v285 = v193[1];
                      outlined copy of Data._Representation(v285, v284);
                      v306[1] = v285;
                      v306[2] = v284;
                      ((void (*)(char *, char *, uint64_t))v326)((char *)v306 + *(int *)(v194 + 24), (char *)v193 + *(int *)(v194 + 24), v331);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v287 + 56))(v306, 0, 1, v194);
                    }
                    uint64_t v239 = __dst[10];
                    v309 = &v315[v239];
                    v240 = &__src[v239];
                    if (v289(&__src[v239], 1, v293))
                    {
                      uint64_t v241 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                      memcpy(v309, v240, *(void *)(*(void *)(v241 - 8) + 64));
                    }
                    else
                    {
                      *(void *)v309 = *(void *)v240;
                      __srcb = (void *)*((void *)v240 + 1);
                      unint64_t v292 = *((void *)v240 + 2);
                      outlined copy of Data._Representation((uint64_t)__srcb, v292);
                      *((void *)v309 + 1) = __srcb;
                      *((void *)v309 + 2) = v292;
                      ((void (*)(char *, char *, uint64_t))v326)(&v309[*(int *)(v293 + 24)], &v240[*(int *)(v293 + 24)], v331);
                      (*(void (**)(char *, void, uint64_t, uint64_t))(v287 + 56))(v309, 0, 1, v293);
                    }
                    (*(void (**)(char *, void, uint64_t, int *))(v300 + 56))(v315, 0, 1, __dst);
                  }
                  a3 = v363;
                  uint64_t v105 = v347;
                  swift_storeEnumTagMultiPayload();
                }
                v105[7](a1, 0, 1, v38);
              }
              uint64_t v91 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
              break;
          }
          uint64_t v255 = *(int *)(v91 + 20);
          uint64_t v256 = a1 + v255;
          uint64_t v257 = (uint64_t)a2 + v255;
          uint64_t v258 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v258 - 8) + 16))(v256, v257, v258);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
          uint64_t v7 = v354;
        }
        uint64_t v259 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
        *(void *)(a1 + *(int *)(v259 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v259 + 20));
        uint64_t v260 = *(int *)(v259 + 24);
        uint64_t v261 = a1 + v260;
        uint64_t v262 = (uint64_t)a2 + v260;
        uint64_t v263 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v263 - 8) + 16))(v261, v262, v263);
      }
      swift_storeEnumTagMultiPayload();
LABEL_106:
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_107;
    }
    goto LABEL_9;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
LABEL_9:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_107;
  }
  if ((uint64_t *)a1 == a2) {
    goto LABEL_107;
  }
  outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  int v16 = swift_getEnumCaseMultiPayload();
  if (v16 == 2)
  {
    uint64_t v41 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)a1 = v41;
    *(void *)(a1 + 16) = a2[2];
    uint64_t v42 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
    uint64_t v43 = a1 + v42;
    uint64_t v44 = (uint64_t)a2 + v42;
    uint64_t v45 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
    swift_storeEnumTagMultiPayload();
    goto LABEL_107;
  }
  if (v16 == 1)
  {
    uint64_t v17 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
      goto LABEL_117;
    }
    uint64_t v362 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v106 = *a2;
        unint64_t v107 = a2[1];
        outlined copy of Data._Representation(*a2, v107);
        *(void *)a1 = v106;
        *(void *)(a1 + 8) = v107;
        uint64_t v108 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
        goto LABEL_116;
      case 2u:
        uint64_t v109 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        uint64_t v110 = *(void *)(v109 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v110 + 48))(a2, 1, v109))
        {
          uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
          memcpy((void *)a1, a2, *(void *)(*(void *)(v111 - 8) + 64));
        }
        else
        {
          uint64_t v358 = v110;
          int v174 = swift_getEnumCaseMultiPayload();
          uint64_t v175 = *a2;
          unint64_t v176 = a2[1];
          outlined copy of Data._Representation(*a2, v176);
          *(void *)a1 = v175;
          *(void *)(a1 + 8) = v176;
          if (v174 == 1)
          {
            *(void *)(a1 + 16) = a2[2];
            uint64_t v177 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                          + 24);
            uint64_t v178 = a1 + v177;
            uint64_t v179 = (uint64_t)a2 + v177;
            uint64_t v180 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v180 - 8) + 16))(v178, v179, v180);
            swift_storeEnumTagMultiPayload();
            uint64_t v181 = v358;
          }
          else
          {
            *(void *)(a1 + 16) = a2[2];
            uint64_t v218 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            uint64_t v219 = *(int *)(v218 + 24);
            uint64_t v220 = a1 + v219;
            uint64_t v221 = (uint64_t)a2 + v219;
            uint64_t v222 = type metadata accessor for UnknownStorage();
            v335 = *(void (**)(uint64_t, uint64_t))(*(void *)(v222 - 8) + 16);
            __dstd = (void *)v222;
            v335(v220, v221);
            uint64_t v223 = *(int *)(v218 + 28);
            v351 = (void *)(a1 + v223);
            v224 = (uint64_t *)((char *)a2 + v223);
            uint64_t v225 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            v226 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v225 - 8);
            if (v226[6](v224, 1, v225))
            {
              uint64_t v227 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
              memcpy(v351, v224, *(void *)(*(void *)(v227 - 8) + 64));
              uint64_t v181 = v358;
            }
            else
            {
              v319 = v226;
              uint64_t v325 = v225;
              uint64_t v249 = *v224;
              unint64_t v248 = v224[1];
              outlined copy of Data._Representation(*v224, v248);
              void *v351 = v249;
              v250 = v351;
              v351[1] = v248;
              v351[2] = v224[2];
              ((void (*)(char *, char *, void *))v335)((char *)v351 + *(int *)(v325 + 24), (char *)v224 + *(int *)(v325 + 24), __dstd);
              uint64_t v251 = *(int *)(v325 + 28);
              v311 = (void *)((char *)v351 + v251);
              v252 = (void **)((char *)v224 + v251);
              uint64_t v253 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              uint64_t v304 = *(void *)(v253 - 8);
              if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v304 + 48))(v252, 1, v253))
              {
                uint64_t v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                memcpy(v311, v252, *(void *)(*(void *)(v254 - 8) + 64));
              }
              else
              {
                unint64_t v273 = (unint64_t)v252[1];
                __srcc = *v252;
                outlined copy of Data._Representation((uint64_t)*v252, v273);
                void *v311 = __srcc;
                v311[1] = v273;
                v250 = v351;
                ((void (*)(char *, char *, void *))v335)((char *)v311 + *(int *)(v253 + 20), (char *)v252 + *(int *)(v253 + 20), __dstd);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v304 + 56))(v311, 0, 1, v253);
              }
              uint64_t v181 = v358;
              (*((void (**)(void *, void, uint64_t, uint64_t))v319 + 7))(v250, 0, 1, v325);
            }
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v181 + 56))(a1, 0, 1, v109);
        }
        uint64_t v108 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
        goto LABEL_116;
      case 3u:
        uint64_t v112 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        uint64_t v113 = *(void *)(v112 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v113 + 48))(a2, 1, v112))
        {
          uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
          memcpy((void *)a1, a2, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          uint64_t v359 = v113;
          int v182 = swift_getEnumCaseMultiPayload();
          uint64_t v183 = *a2;
          unint64_t v184 = a2[1];
          outlined copy of Data._Representation(*a2, v184);
          *(void *)a1 = v183;
          *(void *)(a1 + 8) = v184;
          if (v182 == 1)
          {
            uint64_t v185 = a2[2];
            *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
            *(void *)(a1 + 16) = v185;
            *(void *)(a1 + 32) = a2[4];
            uint64_t v186 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                          + 28);
            uint64_t v187 = a1 + v186;
            uint64_t v188 = (uint64_t)a2 + v186;
            uint64_t v189 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v189 - 8) + 16))(v187, v188, v189);
            swift_storeEnumTagMultiPayload();
            uint64_t v190 = v359;
          }
          else
          {
            uint64_t v228 = a2[2];
            *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
            *(void *)(a1 + 16) = v228;
            uint64_t v229 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            uint64_t v230 = *(int *)(v229 + 24);
            uint64_t v231 = a1 + v230;
            uint64_t v232 = (uint64_t)a2 + v230;
            uint64_t v233 = type metadata accessor for UnknownStorage();
            v336 = *(void (**)(uint64_t, uint64_t))(*(void *)(v233 - 8) + 16);
            __dste = (void *)v233;
            v336(v231, v232);
            uint64_t v234 = *(int *)(v229 + 28);
            v352 = (void *)(a1 + v234);
            v235 = (uint64_t *)((char *)a2 + v234);
            uint64_t v236 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v237 = *(void *)(v236 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v237 + 48))(v235, 1, v236))
            {
              uint64_t v238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v352, v235, *(void *)(*(void *)(v238 - 8) + 64));
            }
            else
            {
              void *v352 = *v235;
              v312 = (void *)v235[2];
              v320 = (void *)v235[1];
              outlined copy of Data._Representation((uint64_t)v320, (unint64_t)v312);
              v352[1] = v320;
              v352[2] = v312;
              ((void (*)(char *, char *, void *))v336)((char *)v352 + *(int *)(v236 + 24), (char *)v235 + *(int *)(v236 + 24), __dste);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v237 + 56))(v352, 0, 1, v236);
            }
            uint64_t v190 = v359;
            swift_storeEnumTagMultiPayload();
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v190 + 56))(a1, 0, 1, v112);
        }
        uint64_t v108 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
        goto LABEL_116;
      default:
        uint64_t v72 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v73 + 48))(a2, 1, v72))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
          memcpy((void *)a1, a2, *(void *)(*(void *)(v74 - 8) + 64));
          goto LABEL_77;
        }
        uint64_t v357 = v73;
        int v167 = swift_getEnumCaseMultiPayload();
        uint64_t v168 = *a2;
        unint64_t v169 = a2[1];
        outlined copy of Data._Representation(*a2, v169);
        *(void *)a1 = v168;
        *(void *)(a1 + 8) = v169;
        if (v167 == 1)
        {
          uint64_t v170 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                        + 20);
          uint64_t v171 = a1 + v170;
          uint64_t v172 = (uint64_t)a2 + v170;
          uint64_t v173 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v173 - 8) + 16))(v171, v172, v173);
        }
        else
        {
          *(void *)(a1 + 16) = a2[2];
          uint64_t v203 = a2[3];
          *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
          *(void *)(a1 + 24) = v203;
          uint64_t v204 = a2[5];
          unint64_t v205 = a2[6];
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v204, v205);
          *(void *)(a1 + 40) = v204;
          *(void *)(a1 + 48) = v205;
          uint64_t v206 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          uint64_t v207 = *(int *)(v206 + 32);
          uint64_t v208 = a1 + v207;
          uint64_t v209 = (uint64_t)a2 + v207;
          uint64_t v210 = type metadata accessor for UnknownStorage();
          v334 = *(void (**)(uint64_t, uint64_t))(*(void *)(v210 - 8) + 16);
          __dstc = (void *)v210;
          v334(v208, v209);
          uint64_t v211 = *(int *)(v206 + 36);
          uint64_t v212 = (void *)(a1 + v211);
          v213 = (char *)a2 + v211;
          uint64_t v214 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          uint64_t v215 = *(void *)(v214 - 8);
          v350 = (int *)v214;
          if (!(*(unsigned int (**)(char *, uint64_t))(v215 + 48))(v213, 1))
          {
            uint64_t v303 = v215;
            *uint64_t v212 = *(void *)v213;
            v212[1] = *((void *)v213 + 1);
            v212[2] = *((void *)v213 + 2);
            v212[3] = *((void *)v213 + 3);
            v317 = (void *)*((void *)v213 + 4);
            unint64_t v322 = *((void *)v213 + 5);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation((uint64_t)v317, v322);
            v212[4] = v317;
            v212[5] = v322;
            uint64_t v243 = *((void *)v213 + 6);
            unint64_t v323 = *((void *)v213 + 7);
            outlined copy of Data._Representation(v243, v323);
            v212[6] = v243;
            v212[7] = v323;
            ((void (*)(char *, char *, void *))v334)((char *)v212 + v350[8], &v213[v350[8]], __dstc);
            uint64_t v244 = v350[9];
            v318 = (void *)((char *)v212 + v244);
            v324 = v212;
            __srca = v213;
            v245 = &v213[v244];
            uint64_t v246 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            uint64_t v291 = *(void *)(v246 - 8);
            v295 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v291 + 48);
            v310 = (int *)v246;
            if (v295(v245, 1, v246))
            {
              uint64_t v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v318, v245, *(void *)(*(void *)(v247 - 8) + 64));
            }
            else
            {
              void *v318 = *(void *)v245;
              unint64_t v286 = *((void *)v245 + 2);
              uint64_t v288 = *((void *)v245 + 1);
              outlined copy of Data._Representation(v288, v286);
              v318[1] = v288;
              v318[2] = v286;
              ((void (*)(char *, char *, void *))v334)((char *)v318 + *(int *)(v246 + 24), &v245[*(int *)(v246 + 24)], __dstc);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v291 + 56))(v318, 0, 1, v246);
            }
            uint64_t v269 = v350[10];
            v270 = (void *)((char *)v212 + v269);
            v271 = &__srca[v269];
            if (v295(&__srca[v269], 1, (uint64_t)v310))
            {
              uint64_t v272 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
              memcpy(v270, v271, *(void *)(*(void *)(v272 - 8) + 64));
            }
            else
            {
              void *v270 = *(void *)v271;
              uint64_t v283 = *((void *)v271 + 1);
              v321 = (void *)*((void *)v271 + 2);
              outlined copy of Data._Representation(v283, (unint64_t)v321);
              v270[1] = v283;
              v270[2] = v321;
              ((void (*)(char *, char *, void *))v334)((char *)v270 + v310[6], &v271[v310[6]], __dstc);
              (*(void (**)(void *, void, uint64_t, int *))(v291 + 56))(v270, 0, 1, v310);
            }
            uint64_t v217 = v357;
            (*(void (**)(void *, void, uint64_t, int *))(v303 + 56))(v324, 0, 1, v350);
            goto LABEL_76;
          }
          uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v212, v213, *(void *)(*(void *)(v216 - 8) + 64));
        }
        uint64_t v217 = v357;
LABEL_76:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v217 + 56))(a1, 0, 1, v72);
LABEL_77:
        uint64_t v108 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
LABEL_116:
        uint64_t v274 = *(int *)(v108 + 20);
        uint64_t v275 = a1 + v274;
        uint64_t v276 = (uint64_t)a2 + v274;
        uint64_t v277 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v277 - 8) + 16))(v275, v276, v277);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
        a3 = v362;
LABEL_117:
        uint64_t v278 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
        *(void *)(a1 + *(int *)(v278 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v278 + 20));
        uint64_t v279 = *(int *)(v278 + 24);
        uint64_t v280 = a1 + v279;
        uint64_t v281 = (uint64_t)a2 + v279;
        uint64_t v282 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v282 - 8) + 16))(v280, v281, v282);
        swift_storeEnumTagMultiPayload();
        goto LABEL_107;
    }
  }
  uint64_t v361 = a3;
  uint64_t v46 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v46;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  uint64_t v47 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  uint64_t v48 = v47[8];
  uint64_t v355 = a1 + v48;
  v345 = (char *)a2 + v48;
  uint64_t v49 = type metadata accessor for UnknownStorage();
  uint64_t v50 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = v355;
  uint64_t v356 = v49;
  v50(v51, v345, v49);
  uint64_t v52 = v47[9];
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (uint64_t *)((char *)a2 + v52);
  uint64_t v55 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v56 = *(void *)(v55 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    void *v53 = *v54;
    v53[1] = v54[1];
    v53[2] = v54[2];
    v53[3] = v54[3];
    uint64_t v75 = *(int *)(v55 + 28);
    v346 = v47;
    unint64_t v76 = v50;
    uint64_t v77 = (char *)v53 + v75;
    uint64_t v78 = (char *)v54 + v75;
    swift_bridgeObjectRetain();
    uint64_t v79 = v77;
    uint64_t v50 = v76;
    uint64_t v47 = v346;
    v50((uint64_t)v79, v78, v356);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  uint64_t v80 = v47[10];
  int v81 = (void *)(a1 + v80);
  uint64_t v82 = (uint64_t *)((char *)a2 + v80);
  uint64_t v83 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v84 = *(void *)(v83 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
  {
    uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
  }
  else
  {
    *int v81 = *v82;
    v81[1] = v82[1];
    v81[2] = v82[2];
    v81[3] = v82[3];
    v81[4] = v82[4];
    v81[5] = v82[5];
    v81[6] = v82[6];
    uint64_t v86 = *(int *)(v83 + 32);
    uint64_t v87 = (char *)v81 + v86;
    uint64_t v88 = (char *)v82 + v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50((uint64_t)v87, v88, v356);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
  }
  swift_storeEnumTagMultiPayload();
  a3 = v361;
LABEL_107:
  uint64_t v264 = *(int *)(a3 + 20);
  uint64_t v265 = a1 + v264;
  uint64_t v266 = (uint64_t)a2 + v264;
  uint64_t v267 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v267 - 8) + 24))(v265, v266, v267);
  return a1;
}

void *initializeWithTake for AttachmentLedger_SubscribeResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      a1[2] = a2[2];
      uint64_t v13 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v40 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            break;
          case 2u:
            uint64_t v41 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            uint64_t v42 = *(void *)(v41 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48))(a2, 1, v41))
            {
              uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
              memcpy(a1, a2, *(void *)(*(void *)(v43 - 8) + 64));
            }
            else
            {
              uint64_t v141 = v42;
              int v52 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v52 == 1)
              {
                a1[2] = a2[2];
                uint64_t v53 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                uint64_t v54 = (char *)a1 + v53;
                uint64_t v149 = (char *)a2 + v53;
                uint64_t v55 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 32))(v54, v149, v55);
                swift_storeEnumTagMultiPayload();
                uint64_t v56 = v141;
              }
              else
              {
                uint64_t v152 = v7;
                uint64_t v144 = a3;
                a1[2] = a2[2];
                uint64_t v71 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                uint64_t v72 = *(int *)(v71 + 24);
                uint64_t v73 = (char *)a1 + v72;
                uint64_t v74 = (char *)a2 + v72;
                uint64_t v75 = type metadata accessor for UnknownStorage();
                uint64_t v132 = *(void (**)(char *, char *))(*(void *)(v75 - 8) + 32);
                uint64_t v135 = v75;
                v132(v73, v74);
                uint64_t v76 = *(int *)(v71 + 28);
                __dsta = (void *)((char *)a1 + v76);
                uint64_t v77 = (void *)((char *)a2 + v76);
                uint64_t v78 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                uint64_t v79 = *(void *)(v78 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
                {
                  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                  memcpy(__dsta, v77, *(void *)(*(void *)(v80 - 8) + 64));
                  uint64_t v56 = v141;
                  a3 = v144;
                }
                else
                {
                  uint64_t v126 = v79;
                  *(_OWORD *)__dsta = *(_OWORD *)v77;
                  __dsta[2] = v77[2];
                  ((void (*)(char *, char *, uint64_t))v132)((char *)__dsta + *(int *)(v78 + 24), (char *)v77 + *(int *)(v78 + 24), v135);
                  uint64_t v129 = v78;
                  uint64_t v97 = *(int *)(v78 + 28);
                  int v98 = (_OWORD *)((char *)__dsta + v97);
                  uint64_t v99 = (_OWORD *)((char *)v77 + v97);
                  uint64_t v100 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  uint64_t v125 = *(void *)(v100 - 8);
                  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v125 + 48))(v99, 1, v100))
                  {
                    uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                    memcpy(v98, v99, *(void *)(*(void *)(v101 - 8) + 64));
                  }
                  else
                  {
                    *int v98 = *v99;
                    ((void (*)(char *, char *, uint64_t))v132)((char *)v98 + *(int *)(v100 + 20), (char *)v99 + *(int *)(v100 + 20), v135);
                    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v125 + 56))(v98, 0, 1, v100);
                  }
                  uint64_t v56 = v141;
                  a3 = v144;
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v126 + 56))(__dsta, 0, 1, v129);
                }
                swift_storeEnumTagMultiPayload();
                uint64_t v7 = v152;
              }
              (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(a1, 0, 1, v41);
            }
            uint64_t v40 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            break;
          case 3u:
            uint64_t v44 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            uint64_t v45 = *(void *)(v44 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(a2, 1, v44))
            {
              uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
              memcpy(a1, a2, *(void *)(*(void *)(v46 - 8) + 64));
            }
            else
            {
              uint64_t v142 = v45;
              int v57 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v57 == 1)
              {
                a1[2] = a2[2];
                *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
                a1[4] = a2[4];
                uint64_t v58 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                uint64_t v59 = (char *)a1 + v58;
                uint64_t v150 = (char *)a2 + v58;
                uint64_t v60 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 32))(v59, v150, v60);
                swift_storeEnumTagMultiPayload();
                uint64_t v61 = v142;
              }
              else
              {
                uint64_t v153 = v7;
                uint64_t v145 = a3;
                a1[2] = a2[2];
                *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
                uint64_t v81 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                uint64_t v82 = *(int *)(v81 + 24);
                uint64_t v83 = (char *)a1 + v82;
                __dstc = (char *)a2 + v82;
                uint64_t v84 = type metadata accessor for UnknownStorage();
                uint64_t v133 = *(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32);
                v133(v83, __dstc, v84);
                uint64_t v85 = *(int *)(v81 + 28);
                __dstb = (void *)((char *)a1 + v85);
                uint64_t v86 = (void *)((char *)a2 + v85);
                uint64_t v87 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v128 = *(void *)(v87 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v128 + 48))(v86, 1, v87))
                {
                  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(__dstb, v86, *(void *)(*(void *)(v88 - 8) + 64));
                }
                else
                {
                  void *__dstb = *v86;
                  *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v86 + 1);
                  v133((char *)__dstb + *(int *)(v87 + 24), (char *)v86 + *(int *)(v87 + 24), v84);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v128 + 56))(__dstb, 0, 1, v87);
                }
                uint64_t v61 = v142;
                a3 = v145;
                uint64_t v7 = v153;
                swift_storeEnumTagMultiPayload();
              }
              (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(a1, 0, 1, v44);
            }
            uint64_t v40 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
            break;
          default:
            uint64_t v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            uint64_t v30 = *(void *)(v29 - 8);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v30 + 48))(a2, 1, v29))
            {
              uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
              memcpy(a1, a2, *(void *)(*(void *)(v31 - 8) + 64));
            }
            else
            {
              uint64_t v140 = v30;
              int v47 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v47 == 1)
              {
                uint64_t v48 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                uint64_t v49 = (char *)a1 + v48;
                uint64_t v148 = (char *)a2 + v48;
                uint64_t v50 = type metadata accessor for UnknownStorage();
                (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v49, v148, v50);
                swift_storeEnumTagMultiPayload();
                uint64_t v51 = v140;
              }
              else
              {
                uint64_t v131 = v29;
                uint64_t v62 = a2[3];
                a1[2] = a2[2];
                a1[3] = v62;
                *((unsigned char *)a1 + 32) = *((unsigned char *)a2 + 32);
                *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
                uint64_t v63 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                uint64_t v64 = *(int *)(v63 + 32);
                uint64_t v65 = (char *)a1 + v64;
                uint64_t v151 = (char *)a2 + v64;
                uint64_t v66 = type metadata accessor for UnknownStorage();
                uint64_t v127 = *(void (**)(char *, char *))(*(void *)(v66 - 8) + 32);
                uint64_t v130 = v66;
                v127(v65, v151);
                uint64_t v67 = *(int *)(v63 + 36);
                __dst = (_OWORD *)((char *)a1 + v67);
                uint64_t v68 = (char *)a2 + v67;
                uint64_t v69 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                uint64_t v124 = *(void *)(v69 - 8);
                unint64_t v134 = v68;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v68, 1, v69))
                {
                  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                  memcpy(__dst, v68, *(void *)(*(void *)(v70 - 8) + 64));
                  uint64_t v51 = v140;
                  uint64_t v29 = v131;
                }
                else
                {
                  uint64_t v146 = a3;
                  long long v89 = *((_OWORD *)v68 + 1);
                  _OWORD *__dst = *(_OWORD *)v68;
                  __dst[1] = v89;
                  long long v90 = *((_OWORD *)v68 + 3);
                  __dst[2] = *((_OWORD *)v68 + 2);
                  __dst[3] = v90;
                  ((void (*)(char *, char *, uint64_t))v127)((char *)__dst + *(int *)(v69 + 32), &v68[*(int *)(v69 + 32)], v130);
                  uint64_t v123 = v69;
                  uint64_t v91 = *(int *)(v69 + 36);
                  uint64_t v92 = (void *)((char *)__dst + v91);
                  uint64_t v93 = &v68[v91];
                  uint64_t v94 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v95 = *(void *)(v94 - 8);
                  uint64_t v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
                  uint64_t v122 = v94;
                  uint64_t v120 = v95;
                  if (((unsigned int (*)(char *, uint64_t))v121)(v93, 1))
                  {
                    uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v92, v93, *(void *)(*(void *)(v96 - 8) + 64));
                  }
                  else
                  {
                    *uint64_t v92 = *(void *)v93;
                    *(_OWORD *)(v92 + 1) = *(_OWORD *)(v93 + 8);
                    ((void (*)(char *, char *, uint64_t))v127)((char *)v92 + *(int *)(v122 + 24), &v93[*(int *)(v122 + 24)], v130);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v122);
                  }
                  uint64_t v102 = *(int *)(v123 + 40);
                  uint64_t v103 = (void *)((char *)__dst + v102);
                  uint64_t v29 = v131;
                  uint64_t v104 = &v134[v102];
                  if (v121(&v134[v102], 1, v122))
                  {
                    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
                  }
                  else
                  {
                    *uint64_t v103 = *(void *)v104;
                    *(_OWORD *)(v103 + 1) = *(_OWORD *)(v104 + 8);
                    ((void (*)(char *, char *, uint64_t))v127)((char *)v103 + *(int *)(v122 + 24), &v104[*(int *)(v122 + 24)], v130);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v120 + 56))(v103, 0, 1, v122);
                  }
                  a3 = v146;
                  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v124 + 56))(__dst, 0, 1, v123);
                  uint64_t v51 = v140;
                }
                swift_storeEnumTagMultiPayload();
              }
              (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(a1, 0, 1, v29);
            }
            uint64_t v40 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            break;
        }
        uint64_t v106 = *(int *)(v40 + 20);
        unint64_t v107 = (char *)a1 + v106;
        uint64_t v108 = (char *)a2 + v106;
        uint64_t v109 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32))(v107, v108, v109);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      uint64_t v110 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(void *)((char *)a1 + *(int *)(v110 + 20)) = *(void *)((char *)a2 + *(int *)(v110 + 20));
      uint64_t v111 = *(int *)(v110 + 24);
      uint64_t v112 = (char *)a1 + v111;
      uint64_t v113 = (char *)a2 + v111;
      uint64_t v114 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v114 - 8) + 32))(v112, v113, v114);
    }
    else
    {
      uint64_t v147 = v7;
      uint64_t v143 = a3;
      *a1 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      a1[4] = a2[4];
      uint64_t v17 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v18 = v17[8];
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      uint64_t v23 = v17[9];
      uint64_t v24 = (_OWORD *)((char *)a1 + v23);
      uint64_t v25 = (_OWORD *)((char *)a2 + v23);
      uint64_t v26 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        long long v32 = v25[1];
        *uint64_t v24 = *v25;
        v24[1] = v32;
        v22((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v21);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      uint64_t v7 = v147;
      uint64_t v33 = v17[10];
      uint64_t v34 = (_OWORD *)((char *)a1 + v33);
      uint64_t v35 = (_OWORD *)((char *)a2 + v33);
      uint64_t v36 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        long long v39 = v35[1];
        *uint64_t v34 = *v35;
        v34[1] = v39;
        v34[2] = v35[2];
        *((void *)v34 + 6) = *((void *)v35 + 6);
        v22((char *)v34 + *(int *)(v36 + 32), (char *)v35 + *(int *)(v36 + 32), v21);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      a3 = v143;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v115 = *(int *)(a3 + 20);
  uint64_t v116 = (char *)a1 + v115;
  unint64_t v117 = (char *)a2 + v115;
  uint64_t v118 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v118 - 8) + 32))(v116, v117, v118);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v20 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
        uint64_t v21 = a1 + v20;
        uint64_t v22 = a2 + v20;
        uint64_t v23 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
        uint64_t v13 = *(void *)(v12 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
          memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          uint64_t v265 = v7;
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              *(_OWORD *)a1 = *(_OWORD *)a2;
              uint64_t v74 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
              break;
            case 2u:
              uint64_t v75 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
              uint64_t v76 = *(void *)(v75 - 8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(a2, 1, v75))
              {
                uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
                memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v77 - 8) + 64));
              }
              else
              {
                int v92 = swift_getEnumCaseMultiPayload();
                *(_OWORD *)a1 = *(_OWORD *)a2;
                if (v92 == 1)
                {
                  *(void *)(a1 + 16) = *(void *)(a2 + 16);
                  uint64_t v93 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                               + 24);
                  uint64_t v94 = a1 + v93;
                  uint64_t v273 = a2 + v93;
                  uint64_t v95 = type metadata accessor for UnknownStorage();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 32))(v94, v273, v95);
                  swift_storeEnumTagMultiPayload();
                }
                else
                {
                  uint64_t v253 = v76;
                  uint64_t v276 = a3;
                  *(void *)(a1 + 16) = *(void *)(a2 + 16);
                  uint64_t v109 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                  uint64_t v110 = *(int *)(v109 + 24);
                  uint64_t v111 = a1 + v110;
                  uint64_t v112 = a2 + v110;
                  uint64_t v113 = type metadata accessor for UnknownStorage();
                  v245 = *(void (**)(char *, char *, void *))(*(void *)(v113 - 8) + 32);
                  __src = (void *)v113;
                  ((void (*)(uint64_t, uint64_t))v245)(v111, v112);
                  uint64_t v114 = *(int *)(v109 + 28);
                  __dsta = (void *)(a1 + v114);
                  uint64_t v115 = (void *)(a2 + v114);
                  uint64_t v116 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                  unint64_t v117 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v116 - 8);
                  if (v117[6](v115, 1, v116))
                  {
                    uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                    memcpy(__dsta, v115, *(void *)(*(void *)(v118 - 8) + 64));
                    a3 = v276;
                  }
                  else
                  {
                    uint64_t v233 = v117;
                    *(_OWORD *)__dsta = *(_OWORD *)v115;
                    __dsta[2] = v115[2];
                    v245((char *)__dsta + *(int *)(v116 + 24), (char *)v115 + *(int *)(v116 + 24), __src);
                    uint64_t v238 = v116;
                    uint64_t v148 = *(int *)(v116 + 28);
                    uint64_t v149 = (_OWORD *)((char *)__dsta + v148);
                    uint64_t v150 = (_OWORD *)((char *)v115 + v148);
                    uint64_t v151 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                    uint64_t v231 = *(void *)(v151 - 8);
                    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v231 + 48))(v150, 1, v151))
                    {
                      uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                      memcpy(v149, v150, *(void *)(*(void *)(v152 - 8) + 64));
                    }
                    else
                    {
                      *uint64_t v149 = *v150;
                      v245((char *)v149 + *(int *)(v151 + 20), (char *)v150 + *(int *)(v151 + 20), __src);
                      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v231 + 56))(v149, 0, 1, v151);
                    }
                    a3 = v276;
                    (*((void (**)(void *, void, uint64_t, uint64_t))v233 + 7))(__dsta, 0, 1, v238);
                  }
                  swift_storeEnumTagMultiPayload();
                  uint64_t v76 = v253;
                }
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(a1, 0, 1, v75);
              }
              uint64_t v74 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
              break;
            case 3u:
              uint64_t v78 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
              uint64_t v79 = *(void *)(v78 - 8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(a2, 1, v78))
              {
                uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
                memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v80 - 8) + 64));
              }
              else
              {
                int v96 = swift_getEnumCaseMultiPayload();
                *(_OWORD *)a1 = *(_OWORD *)a2;
                if (v96 == 1)
                {
                  *(void *)(a1 + 16) = *(void *)(a2 + 16);
                  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
                  *(void *)(a1 + 32) = *(void *)(a2 + 32);
                  uint64_t v97 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                               + 28);
                  uint64_t v98 = a1 + v97;
                  uint64_t v274 = a2 + v97;
                  uint64_t v99 = type metadata accessor for UnknownStorage();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 32))(v98, v274, v99);
                }
                else
                {
                  uint64_t v254 = v79;
                  uint64_t v277 = a3;
                  *(void *)(a1 + 16) = *(void *)(a2 + 16);
                  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
                  uint64_t v119 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                  uint64_t v120 = *(int *)(v119 + 24);
                  uint64_t v121 = a1 + v120;
                  __dste = (void *)(a2 + v120);
                  uint64_t v122 = type metadata accessor for UnknownStorage();
                  uint64_t v246 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)(v122 - 8) + 32);
                  v246(v121, __dste, v122);
                  uint64_t v123 = *(int *)(v119 + 28);
                  __dstb = (void *)(a1 + v123);
                  uint64_t v124 = (void *)(a2 + v123);
                  uint64_t v125 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v237 = *(void *)(v125 - 8);
                  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v237 + 48))(v124, 1, v125))
                  {
                    uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(__dstb, v124, *(void *)(*(void *)(v126 - 8) + 64));
                  }
                  else
                  {
                    void *__dstb = *v124;
                    *(_OWORD *)(__dstb + 1) = *(_OWORD *)(v124 + 1);
                    v246((uint64_t)__dstb + *(int *)(v125 + 24), (char *)v124 + *(int *)(v125 + 24), v122);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v237 + 56))(__dstb, 0, 1, v125);
                  }
                  a3 = v277;
                  uint64_t v79 = v254;
                }
                swift_storeEnumTagMultiPayload();
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v79 + 56))(a1, 0, 1, v78);
              }
              uint64_t v74 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
              break;
            default:
              uint64_t v36 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
              uint64_t v37 = *(void *)(v36 - 8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(a2, 1, v36))
              {
                uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
                memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v38 - 8) + 64));
              }
              else
              {
                int v81 = swift_getEnumCaseMultiPayload();
                *(_OWORD *)a1 = *(_OWORD *)a2;
                if (v81 == 1)
                {
                  uint64_t v82 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                               + 20);
                  uint64_t v83 = a1 + v82;
                  uint64_t v272 = a2 + v82;
                  uint64_t v84 = type metadata accessor for UnknownStorage();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 32))(v83, v272, v84);
                }
                else
                {
                  uint64_t v252 = v37;
                  uint64_t v100 = *(void *)(a2 + 24);
                  *(void *)(a1 + 16) = *(void *)(a2 + 16);
                  *(void *)(a1 + 24) = v100;
                  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
                  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
                  uint64_t v101 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                  uint64_t v102 = *(int *)(v101 + 32);
                  uint64_t v103 = a1 + v102;
                  uint64_t v275 = a2 + v102;
                  uint64_t v104 = type metadata accessor for UnknownStorage();
                  uint64_t v241 = *(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 32);
                  uint64_t v244 = v104;
                  ((void (*)(uint64_t, uint64_t))v241)(v103, v275);
                  uint64_t v105 = *(int *)(v101 + 36);
                  __dst = (_OWORD *)(a1 + v105);
                  uint64_t v106 = (_OWORD *)(a2 + v105);
                  uint64_t v107 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                  uint64_t v232 = *(void **)(v107 - 8);
                  if ((*((unsigned int (**)(_OWORD *, uint64_t, uint64_t))v232 + 6))(v106, 1, v107))
                  {
                    uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                    memcpy(__dst, v106, *(void *)(*(void *)(v108 - 8) + 64));
                    uint64_t v37 = v252;
                  }
                  else
                  {
                    long long v142 = v106[1];
                    _OWORD *__dst = *v106;
                    __dst[1] = v142;
                    long long v143 = v106[3];
                    __dst[2] = v106[2];
                    __dst[3] = v143;
                    v241((char *)__dst + *(int *)(v107 + 32), (char *)v106 + *(int *)(v107 + 32), v244);
                    uint64_t v230 = v107;
                    uint64_t v144 = *(int *)(v107 + 36);
                    uint64_t v223 = (void *)((char *)__dst + v144);
                    uint64_t v145 = (void *)((char *)v106 + v144);
                    uint64_t v146 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                    uint64_t v221 = *(void *)(v146 - 8);
                    v226 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48);
                    uint64_t v228 = v146;
                    if (((unsigned int (*)(void *, uint64_t))v226)(v145, 1))
                    {
                      uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                      memcpy(v223, v145, *(void *)(*(void *)(v147 - 8) + 64));
                    }
                    else
                    {
                      *uint64_t v223 = *v145;
                      *(_OWORD *)(v223 + 1) = *(_OWORD *)(v145 + 1);
                      v241((char *)v223 + *(int *)(v228 + 24), (char *)v145 + *(int *)(v228 + 24), v244);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v221 + 56))(v223, 0, 1, v228);
                    }
                    uint64_t v182 = *(int *)(v230 + 40);
                    v224 = (void *)((char *)__dst + v182);
                    uint64_t v183 = (void *)((char *)v106 + v182);
                    if (v226((char *)v106 + v182, 1, v228))
                    {
                      uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                      memcpy(v224, v183, *(void *)(*(void *)(v184 - 8) + 64));
                    }
                    else
                    {
                      void *v224 = *v183;
                      *(_OWORD *)(v224 + 1) = *(_OWORD *)(v183 + 1);
                      v241((char *)v224 + *(int *)(v228 + 24), (char *)v183 + *(int *)(v228 + 24), v244);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v221 + 56))(v224, 0, 1, v228);
                    }
                    uint64_t v37 = v252;
                    (*((void (**)(_OWORD *, void, uint64_t, uint64_t))v232 + 7))(__dst, 0, 1, v230);
                  }
                }
                swift_storeEnumTagMultiPayload();
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(a1, 0, 1, v36);
              }
              uint64_t v74 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
              break;
          }
          uint64_t v195 = *(int *)(v74 + 20);
          uint64_t v196 = a1 + v195;
          uint64_t v197 = a2 + v195;
          uint64_t v198 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 32))(v196, v197, v198);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
          uint64_t v7 = v265;
        }
        uint64_t v199 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
        *(void *)(a1 + *(int *)(v199 + 20)) = *(void *)(a2 + *(int *)(v199 + 20));
        uint64_t v200 = *(int *)(v199 + 24);
        uint64_t v201 = a1 + v200;
        uint64_t v202 = a2 + v200;
        uint64_t v203 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v203 - 8) + 32))(v201, v202, v203);
      }
      else
      {
        uint64_t v264 = v7;
        uint64_t v270 = a3;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        uint64_t v24 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
        uint64_t v25 = v24[8];
        uint64_t v26 = a1 + v25;
        uint64_t v27 = a2 + v25;
        uint64_t v28 = type metadata accessor for UnknownStorage();
        uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32);
        v29(v26, v27, v28);
        uint64_t v30 = v24[9];
        uint64_t v31 = (_OWORD *)(a1 + v30);
        long long v32 = (_OWORD *)(a2 + v30);
        uint64_t v33 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          long long v55 = v32[1];
          *uint64_t v31 = *v32;
          v31[1] = v55;
          v29((uint64_t)v31 + *(int *)(v33 + 28), (uint64_t)v32 + *(int *)(v33 + 28), v28);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        }
        uint64_t v56 = v24[10];
        int v57 = (_OWORD *)(a1 + v56);
        uint64_t v58 = (_OWORD *)(a2 + v56);
        uint64_t v59 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
        uint64_t v60 = *(void *)(v59 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          long long v62 = v58[1];
          *int v57 = *v58;
          v57[1] = v62;
          void v57[2] = v58[2];
          *((void *)v57 + 6) = *((void *)v58 + 6);
          v29((uint64_t)v57 + *(int *)(v59 + 32), (uint64_t)v58 + *(int *)(v59 + 32), v28);
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        }
        uint64_t v7 = v264;
        a3 = v270;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_102;
    }
LABEL_9:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_102;
  }
  if (v10)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    int v16 = swift_getEnumCaseMultiPayload();
    if (v16 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v39 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      uint64_t v40 = a1 + v39;
      uint64_t v41 = a2 + v39;
      uint64_t v42 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32))(v40, v41, v42);
      swift_storeEnumTagMultiPayload();
    }
    else if (v16 == 1)
    {
      uint64_t v17 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a2, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v85 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            break;
          case 2u:
            uint64_t v86 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            uint64_t v87 = *(void **)(v86 - 8);
            if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v87 + 6))(a2, 1, v86))
            {
              uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v88 - 8) + 64));
            }
            else
            {
              uint64_t v279 = a3;
              int v132 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v132 == 1)
              {
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                uint64_t v133 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                              + 24);
                uint64_t v134 = a1 + v133;
                uint64_t v135 = a2 + v133;
                uint64_t v136 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 32))(v134, v135, v136);
                swift_storeEnumTagMultiPayload();
                a3 = v279;
              }
              else
              {
                __dstc = v87;
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                uint64_t v162 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                uint64_t v163 = *(int *)(v162 + 24);
                uint64_t v164 = a1 + v163;
                uint64_t v165 = a2 + v163;
                uint64_t v166 = type metadata accessor for UnknownStorage();
                __srcb = *(void (**)(uint64_t, uint64_t))(*(void *)(v166 - 8) + 32);
                uint64_t v256 = v166;
                __srcb(v164, v165);
                uint64_t v167 = *(int *)(v162 + 28);
                v268 = (void *)(a1 + v167);
                uint64_t v168 = (void *)(a2 + v167);
                uint64_t v169 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                uint64_t v170 = *(void *)(v169 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v170 + 48))(v168, 1, v169))
                {
                  uint64_t v171 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                  memcpy(v268, v168, *(void *)(*(void *)(v171 - 8) + 64));
                }
                else
                {
                  uint64_t v240 = v170;
                  *(_OWORD *)v268 = *(_OWORD *)v168;
                  v268[2] = v168[2];
                  ((void (*)(char *, char *, uint64_t))__srcb)((char *)v268 + *(int *)(v169 + 24), (char *)v168 + *(int *)(v169 + 24), v256);
                  uint64_t v243 = v169;
                  uint64_t v190 = *(int *)(v169 + 28);
                  uint64_t v191 = (_OWORD *)((char *)v268 + v190);
                  uint64_t v192 = (_OWORD *)((char *)v168 + v190);
                  uint64_t v193 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  v235 = *(void **)(v193 - 8);
                  if ((*((unsigned int (**)(_OWORD *, uint64_t, uint64_t))v235 + 6))(v192, 1, v193))
                  {
                    uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                    memcpy(v191, v192, *(void *)(*(void *)(v194 - 8) + 64));
                  }
                  else
                  {
                    _OWORD *v191 = *v192;
                    ((void (*)(char *, char *, uint64_t))__srcb)((char *)v191 + *(int *)(v193 + 20), (char *)v192 + *(int *)(v193 + 20), v256);
                    (*((void (**)(_OWORD *, void, uint64_t, uint64_t))v235 + 7))(v191, 0, 1, v193);
                  }
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v240 + 56))(v268, 0, 1, v243);
                }
                swift_storeEnumTagMultiPayload();
                a3 = v279;
                uint64_t v87 = __dstc;
              }
              (*((void (**)(uint64_t, void, uint64_t, uint64_t))v87 + 7))(a1, 0, 1, v86);
            }
            uint64_t v85 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            break;
          case 3u:
            uint64_t v89 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            long long v90 = *(void **)(v89 - 8);
            if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v90 + 6))(a2, 1, v89))
            {
              uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v91 - 8) + 64));
            }
            else
            {
              uint64_t v280 = a3;
              int v137 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v137 == 1)
              {
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
                *(void *)(a1 + 32) = *(void *)(a2 + 32);
                uint64_t v138 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                              + 28);
                uint64_t v139 = a1 + v138;
                uint64_t v140 = a2 + v138;
                uint64_t v141 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 32))(v139, v140, v141);
              }
              else
              {
                __dstd = v90;
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
                uint64_t v172 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                uint64_t v173 = *(int *)(v172 + 24);
                uint64_t v174 = a1 + v173;
                uint64_t v175 = a2 + v173;
                uint64_t v176 = type metadata accessor for UnknownStorage();
                __srcc = *(void (**)(uint64_t, uint64_t))(*(void *)(v176 - 8) + 32);
                uint64_t v257 = v176;
                __srcc(v174, v175);
                uint64_t v177 = *(int *)(v172 + 28);
                uint64_t v269 = (void *)(a1 + v177);
                uint64_t v178 = (void *)(a2 + v177);
                uint64_t v179 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v180 = *(void *)(v179 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v180 + 48))(v178, 1, v179))
                {
                  uint64_t v181 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v269, v178, *(void *)(*(void *)(v181 - 8) + 64));
                }
                else
                {
                  *uint64_t v269 = *v178;
                  *(_OWORD *)(v269 + 1) = *(_OWORD *)(v178 + 1);
                  ((void (*)(char *, char *, uint64_t))__srcc)((char *)v269 + *(int *)(v179 + 24), (char *)v178 + *(int *)(v179 + 24), v257);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v180 + 56))(v269, 0, 1, v179);
                }
                long long v90 = __dstd;
              }
              swift_storeEnumTagMultiPayload();
              a3 = v280;
              (*((void (**)(uint64_t, void, uint64_t, uint64_t))v90 + 7))(a1, 0, 1, v89);
            }
            uint64_t v85 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
            break;
          default:
            uint64_t v63 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            uint64_t v64 = *(void *)(v63 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(a2, 1, v63))
            {
              uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v65 - 8) + 64));
            }
            else
            {
              uint64_t v278 = a3;
              int v127 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v127 == 1)
              {
                uint64_t v128 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                              + 20);
                uint64_t v129 = a1 + v128;
                uint64_t v130 = a2 + v128;
                uint64_t v131 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 32))(v129, v130, v131);
                swift_storeEnumTagMultiPayload();
                a3 = v278;
              }
              else
              {
                uint64_t v153 = *(void *)(a2 + 24);
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(void *)(a1 + 24) = v153;
                *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
                *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
                uint64_t v154 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                uint64_t v155 = *(int *)(v154 + 32);
                uint64_t v266 = a1 + v155;
                uint64_t v156 = a2 + v155;
                uint64_t v157 = type metadata accessor for UnknownStorage();
                __srca = *(void (**)(uint64_t, uint64_t))(*(void *)(v157 - 8) + 32);
                uint64_t v255 = v157;
                __srca(v266, v156);
                uint64_t v158 = *(int *)(v154 + 36);
                uint64_t v267 = (_OWORD *)(a1 + v158);
                uint64_t v159 = (_OWORD *)(a2 + v158);
                uint64_t v160 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                uint64_t v242 = *(void *)(v160 - 8);
                if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v242 + 48))(v159, 1, v160))
                {
                  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                  memcpy(v267, v159, *(void *)(*(void *)(v161 - 8) + 64));
                }
                else
                {
                  long long v185 = v159[1];
                  *uint64_t v267 = *v159;
                  v267[1] = v185;
                  long long v186 = v159[3];
                  v267[2] = v159[2];
                  v267[3] = v186;
                  ((void (*)(char *, char *, uint64_t))__srca)((char *)v267 + *(int *)(v160 + 32), (char *)v159 + *(int *)(v160 + 32), v255);
                  uint64_t v187 = *(int *)(v160 + 36);
                  uint64_t v225 = (void *)((char *)v267 + v187);
                  uint64_t v234 = (void *)((char *)v159 + v187);
                  uint64_t v239 = v160;
                  uint64_t v188 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v222 = *(void *)(v188 - 8);
                  uint64_t v227 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v222 + 48);
                  uint64_t v229 = v188;
                  if (v227(v234, 1, v188))
                  {
                    uint64_t v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v225, v234, *(void *)(*(void *)(v189 - 8) + 64));
                  }
                  else
                  {
                    *uint64_t v225 = *v234;
                    *(_OWORD *)(v225 + 1) = *(_OWORD *)(v234 + 1);
                    ((void (*)(char *, char *, uint64_t))__srca)((char *)v225 + *(int *)(v188 + 24), (char *)v234 + *(int *)(v188 + 24), v255);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v222 + 56))(v225, 0, 1, v188);
                  }
                  uint64_t v209 = *(int *)(v239 + 40);
                  uint64_t v236 = (void *)((char *)v267 + v209);
                  uint64_t v210 = (void *)((char *)v159 + v209);
                  if (v227((_OWORD *)((char *)v159 + v209), 1, v229))
                  {
                    uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v236, v210, *(void *)(*(void *)(v211 - 8) + 64));
                  }
                  else
                  {
                    *uint64_t v236 = *v210;
                    *(_OWORD *)(v236 + 1) = *(_OWORD *)(v210 + 1);
                    ((void (*)(char *, char *, uint64_t))__srca)((char *)v236 + *(int *)(v229 + 24), (char *)v210 + *(int *)(v229 + 24), v255);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v222 + 56))(v236, 0, 1, v229);
                  }
                  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v242 + 56))(v267, 0, 1, v239);
                }
                a3 = v278;
                swift_storeEnumTagMultiPayload();
              }
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(a1, 0, 1, v63);
            }
            uint64_t v85 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            break;
        }
        uint64_t v212 = *(int *)(v85 + 20);
        uint64_t v213 = a1 + v212;
        uint64_t v214 = a2 + v212;
        uint64_t v215 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 32))(v213, v214, v215);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
      }
      uint64_t v216 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(void *)(a1 + *(int *)(v216 + 20)) = *(void *)(a2 + *(int *)(v216 + 20));
      uint64_t v217 = *(int *)(v216 + 24);
      uint64_t v218 = a1 + v217;
      uint64_t v219 = a2 + v217;
      uint64_t v220 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v220 - 8) + 32))(v218, v219, v220);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v271 = a3;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v43 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v44 = v43[8];
      uint64_t v45 = a1 + v44;
      uint64_t v46 = a2 + v44;
      uint64_t v47 = type metadata accessor for UnknownStorage();
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 32);
      v48(v45, v46, v47);
      uint64_t v49 = v43[9];
      uint64_t v50 = (_OWORD *)(a1 + v49);
      uint64_t v51 = (_OWORD *)(a2 + v49);
      uint64_t v52 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v53 = *(void *)(v52 - 8);
      uint64_t v251 = v47;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        long long v66 = v51[1];
        *uint64_t v50 = *v51;
        v50[1] = v66;
        v48((uint64_t)v50 + *(int *)(v52 + 28), (uint64_t)v51 + *(int *)(v52 + 28), v47);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      }
      a3 = v271;
      uint64_t v67 = v43[10];
      uint64_t v68 = (_OWORD *)(a1 + v67);
      uint64_t v69 = (_OWORD *)(a2 + v67);
      uint64_t v70 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t v71 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
      }
      else
      {
        long long v73 = v69[1];
        _OWORD *v68 = *v69;
        v68[1] = v73;
        v68[2] = v69[2];
        *((void *)v68 + 6) = *((void *)v69 + 6);
        v48((uint64_t)v68 + *(int *)(v70 + 32), (uint64_t)v69 + *(int *)(v70 + 32), v251);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_102:
  uint64_t v204 = *(int *)(a3 + 20);
  uint64_t v205 = a1 + v204;
  uint64_t v206 = a2 + v204;
  uint64_t v207 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v207 - 8) + 40))(v205, v206, v207);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F44688);
}

uint64_t sub_1B0F44688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_149Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B0F446A8);
}

uint64_t sub_1B0F446A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_150Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 16) = a2[2];
      uint64_t v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = (uint64_t)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
        memcpy((void *)a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v52 = *a2;
            unint64_t v53 = a2[1];
            outlined copy of Data._Representation(*a2, v53);
            *(void *)a1 = v52;
            *(void *)(a1 + 8) = v53;
            uint64_t v54 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0)
                         + 20);
            uint64_t v55 = a1 + v54;
            uint64_t v56 = (uint64_t)a2 + v54;
            uint64_t v57 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(v55, v56, v57);
            break;
          case 2u:
            uint64_t v58 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            uint64_t v59 = *(void *)(v58 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v59 + 48))(a2, 1, v58))
            {
              uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
              memcpy((void *)a1, a2, *(void *)(*(void *)(v60 - 8) + 64));
            }
            else
            {
              int v71 = swift_getEnumCaseMultiPayload();
              uint64_t v72 = *a2;
              unint64_t v73 = a2[1];
              outlined copy of Data._Representation(*a2, v73);
              *(void *)a1 = v72;
              *(void *)(a1 + 8) = v73;
              if (v71 == 1)
              {
                *(void *)(a1 + 16) = a2[2];
                uint64_t v74 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                uint64_t v75 = a1 + v74;
                uint64_t v76 = (uint64_t)a2 + v74;
                uint64_t v77 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v75, v76, v77);
              }
              else
              {
                uint64_t v196 = v59;
                *(void *)(a1 + 16) = a2[2];
                uint64_t v99 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                uint64_t v100 = *(int *)(v99 + 24);
                uint64_t v101 = a1 + v100;
                uint64_t v102 = (uint64_t)a2 + v100;
                uint64_t v103 = type metadata accessor for UnknownStorage();
                uint64_t v191 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 16);
                v191(v101, v102, v103);
                uint64_t v104 = *(int *)(v99 + 28);
                uint64_t v105 = (void *)(a1 + v104);
                uint64_t v106 = (uint64_t *)((char *)a2 + v104);
                uint64_t v107 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                uint64_t v108 = *(void *)(v107 - 8);
                if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
                {
                  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                  memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64));
                }
                else
                {
                  uint64_t v184 = v108;
                  uint64_t v188 = v107;
                  uint64_t v135 = v103;
                  uint64_t v137 = *v106;
                  unint64_t v136 = v106[1];
                  outlined copy of Data._Representation(*v106, v136);
                  *uint64_t v105 = v137;
                  v105[1] = v136;
                  v105[2] = v106[2];
                  uint64_t v182 = v135;
                  uint64_t v138 = v135;
                  uint64_t v139 = v188;
                  v191((uint64_t)v105 + *(int *)(v188 + 24), (uint64_t)v106 + *(int *)(v188 + 24), v138);
                  uint64_t v140 = *(int *)(v188 + 28);
                  long long v185 = v105;
                  uint64_t v141 = (void *)((char *)v105 + v140);
                  long long v142 = (uint64_t *)((char *)v106 + v140);
                  uint64_t v143 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  uint64_t v144 = *(void *)(v143 - 8);
                  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
                  {
                    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                    memcpy(v141, v142, *(void *)(*(void *)(v145 - 8) + 64));
                  }
                  else
                  {
                    unint64_t v180 = v142[1];
                    uint64_t v158 = *v142;
                    outlined copy of Data._Representation(*v142, v180);
                    void *v141 = v158;
                    uint64_t v139 = v188;
                    v141[1] = v180;
                    v191((uint64_t)v141 + *(int *)(v143 + 20), (uint64_t)v142 + *(int *)(v143 + 20), v182);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
                  }
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v184 + 56))(v185, 0, 1, v139);
                }
                uint64_t v59 = v196;
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(a1, 0, 1, v58);
            }
            uint64_t v159 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                          + 20);
            uint64_t v160 = a1 + v159;
            uint64_t v161 = (uint64_t)a2 + v159;
            uint64_t v162 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16))(v160, v161, v162);
            break;
          case 3u:
            uint64_t v61 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            uint64_t v62 = *(void *)(v61 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v62 + 48))(a2, 1, v61))
            {
              uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
              memcpy((void *)a1, a2, *(void *)(*(void *)(v63 - 8) + 64));
            }
            else
            {
              int v78 = swift_getEnumCaseMultiPayload();
              uint64_t v79 = *a2;
              unint64_t v80 = a2[1];
              outlined copy of Data._Representation(*a2, v80);
              *(void *)a1 = v79;
              *(void *)(a1 + 8) = v80;
              if (v78 == 1)
              {
                *(void *)(a1 + 16) = a2[2];
                *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
                *(void *)(a1 + 32) = a2[4];
                uint64_t v81 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                uint64_t v82 = a1 + v81;
                uint64_t v83 = (uint64_t)a2 + v81;
                uint64_t v84 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(v82, v83, v84);
              }
              else
              {
                uint64_t v197 = v62;
                *(void *)(a1 + 16) = a2[2];
                *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
                uint64_t v110 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                uint64_t v111 = *(int *)(v110 + 24);
                uint64_t v112 = a1 + v111;
                uint64_t v113 = (uint64_t)a2 + v111;
                uint64_t v114 = type metadata accessor for UnknownStorage();
                uint64_t v192 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 16);
                v192(v112, v113, v114);
                uint64_t v115 = *(int *)(v110 + 28);
                uint64_t v116 = (void *)(a1 + v115);
                unint64_t v117 = (uint64_t *)((char *)a2 + v115);
                uint64_t v118 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v119 = *(void *)(v118 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v119 + 48))(v117, 1, v118))
                {
                  uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v116, v117, *(void *)(*(void *)(v120 - 8) + 64));
                }
                else
                {
                  uint64_t v146 = v117[1];
                  *uint64_t v116 = *v117;
                  unint64_t v186 = v117[2];
                  uint64_t v189 = v146;
                  outlined copy of Data._Representation(v146, v186);
                  v116[1] = v189;
                  v116[2] = v186;
                  v192((uint64_t)v116 + *(int *)(v118 + 24), (uint64_t)v117 + *(int *)(v118 + 24), v114);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(v116, 0, 1, v118);
                }
                uint64_t v62 = v197;
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(a1, 0, 1, v61);
            }
            uint64_t v147 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                          + 20);
            uint64_t v148 = a1 + v147;
            uint64_t v149 = (uint64_t)a2 + v147;
            uint64_t v150 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 16))(v148, v149, v150);
            break;
          default:
            uint64_t v30 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            uint64_t v31 = *(void *)(v30 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(a2, 1, v30))
            {
              uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
              memcpy((void *)a1, a2, *(void *)(*(void *)(v32 - 8) + 64));
            }
            else
            {
              int v64 = swift_getEnumCaseMultiPayload();
              uint64_t v65 = *a2;
              unint64_t v66 = a2[1];
              outlined copy of Data._Representation(*a2, v66);
              *(void *)a1 = v65;
              *(void *)(a1 + 8) = v66;
              if (v64 == 1)
              {
                uint64_t v67 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                uint64_t v68 = a1 + v67;
                uint64_t v69 = (uint64_t)a2 + v67;
                uint64_t v70 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(v68, v69, v70);
              }
              else
              {
                uint64_t v195 = v31;
                uint64_t v85 = a2[3];
                *(void *)(a1 + 16) = a2[2];
                *(void *)(a1 + 24) = v85;
                *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
                uint64_t v86 = a2[5];
                unint64_t v87 = a2[6];
                swift_bridgeObjectRetain();
                outlined copy of Data._Representation(v86, v87);
                *(void *)(a1 + 40) = v86;
                *(void *)(a1 + 48) = v87;
                uint64_t v88 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                uint64_t v89 = *(int *)(v88 + 32);
                uint64_t v90 = a1 + v89;
                uint64_t v91 = (uint64_t)a2 + v89;
                uint64_t v92 = type metadata accessor for UnknownStorage();
                uint64_t v187 = *(void (**)(uint64_t, uint64_t))(*(void *)(v92 - 8) + 16);
                uint64_t v190 = v92;
                v187(v90, v91);
                uint64_t v93 = *(int *)(v88 + 36);
                uint64_t v94 = (void *)(a1 + v93);
                uint64_t v95 = (uint64_t *)((char *)a2 + v93);
                uint64_t v96 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                uint64_t v97 = *(void *)(v96 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
                {
                  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                  memcpy(v94, v95, *(void *)(*(void *)(v98 - 8) + 64));
                }
                else
                {
                  uint64_t v179 = v97;
                  uint64_t v193 = v94;
                  uint64_t v121 = v95[1];
                  *uint64_t v94 = *v95;
                  v94[1] = v121;
                  uint64_t v122 = v95[3];
                  v193[2] = v95[2];
                  v193[3] = v122;
                  uint64_t v183 = v96;
                  uint64_t v124 = v95[4];
                  unint64_t v123 = v95[5];
                  swift_bridgeObjectRetain();
                  uint64_t v125 = v193;
                  swift_bridgeObjectRetain();
                  outlined copy of Data._Representation(v124, v123);
                  v193[4] = v124;
                  v193[5] = v123;
                  uint64_t v126 = v95[6];
                  unint64_t v127 = v95[7];
                  outlined copy of Data._Representation(v126, v127);
                  v193[6] = v126;
                  v193[7] = v127;
                  ((void (*)(char *, char *, uint64_t))v187)((char *)v193 + *(int *)(v183 + 32), (char *)v95 + *(int *)(v183 + 32), v190);
                  uint64_t v128 = *(int *)(v183 + 36);
                  uint64_t v129 = (void *)((char *)v193 + v128);
                  uint64_t v130 = (void *)((char *)v95 + v128);
                  uint64_t v131 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v132 = *(void *)(v131 - 8);
                  uint64_t v181 = v131;
                  uint64_t v178 = *(unsigned int (**)(void *, uint64_t))(v132 + 48);
                  uint64_t v177 = v132;
                  if (v178(v130, 1))
                  {
                    uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v129, v130, *(void *)(*(void *)(v133 - 8) + 64));
                    uint64_t v134 = v183;
                  }
                  else
                  {
                    uint64_t v151 = v130[1];
                    *uint64_t v129 = *v130;
                    unint64_t v175 = v130[2];
                    outlined copy of Data._Representation(v151, v175);
                    v129[1] = v151;
                    uint64_t v125 = v193;
                    v129[2] = v175;
                    uint64_t v152 = v129;
                    uint64_t v176 = v129;
                    uint64_t v134 = v183;
                    ((void (*)(char *, char *, uint64_t))v187)((char *)v152 + *(int *)(v181 + 24), (char *)v130 + *(int *)(v181 + 24), v190);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v132 + 56))(v176, 0, 1, v181);
                  }
                  uint64_t v153 = *(int *)(v134 + 40);
                  uint64_t v154 = (void *)((char *)v125 + v153);
                  uint64_t v155 = (void *)((char *)v95 + v153);
                  if (((unsigned int (*)(void *, uint64_t, uint64_t))v178)(v155, 1, v181))
                  {
                    uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v154, v155, *(void *)(*(void *)(v156 - 8) + 64));
                    uint64_t v157 = v183;
                  }
                  else
                  {
                    uint64_t v163 = v155[1];
                    *uint64_t v154 = *v155;
                    unint64_t v164 = v155[2];
                    outlined copy of Data._Representation(v163, v164);
                    v154[1] = v163;
                    v154[2] = v164;
                    uint64_t v125 = v193;
                    uint64_t v157 = v183;
                    ((void (*)(char *, char *, uint64_t))v187)((char *)v154 + *(int *)(v181 + 24), (char *)v155 + *(int *)(v181 + 24), v190);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v177 + 56))(v154, 0, 1, v181);
                  }
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v179 + 56))(v125, 0, 1, v157);
                }
                uint64_t v31 = v195;
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a1, 0, 1, v30);
            }
            uint64_t v165 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0)
                          + 20);
            uint64_t v166 = a1 + v165;
            uint64_t v167 = (uint64_t)a2 + v165;
            uint64_t v168 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v168 - 8) + 16))(v166, v167, v168);
            break;
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      uint64_t v169 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(void *)(a1 + *(int *)(v169 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v169 + 20));
      uint64_t v170 = *(int *)(v169 + 24);
      uint64_t v171 = a1 + v170;
      uint64_t v172 = (uint64_t)a2 + v170;
      uint64_t v173 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v173 - 8) + 16))(v171, v172, v173);
    }
    else
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v15 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v15;
      *(void *)(a1 + 32) = a2[4];
      int v16 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v17 = v16[8];
      uint64_t v194 = a2;
      uint64_t v18 = a1 + v17;
      uint64_t v19 = (uint64_t)v194 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v22 = v18;
      uint64_t v23 = v194;
      v21(v22, v19, v20);
      uint64_t v24 = v16[9];
      uint64_t v25 = (void *)(a1 + v24);
      uint64_t v26 = (uint64_t *)((char *)v194 + v24);
      uint64_t v27 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        uint64_t v33 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v33;
        *((_OWORD *)v25 + 1) = *((_OWORD *)v26 + 1);
        uint64_t v34 = *(int *)(v27 + 28);
        uint64_t v35 = v21;
        uint64_t v36 = (char *)v25 + v34;
        uint64_t v37 = (char *)v26 + v34;
        swift_bridgeObjectRetain();
        uint64_t v38 = v36;
        uint64_t v21 = v35;
        uint64_t v23 = v194;
        v35((uint64_t)v38, (uint64_t)v37, v20);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v39 = v16[10];
      uint64_t v40 = (void *)(a1 + v39);
      uint64_t v41 = (uint64_t *)((char *)v23 + v39);
      uint64_t v42 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        uint64_t v45 = v41[1];
        *uint64_t v40 = *v41;
        v40[1] = v45;
        uint64_t v46 = v41[3];
        v40[2] = v41[2];
        uint64_t v40[3] = v46;
        uint64_t v47 = v41[5];
        v40[4] = v41[4];
        v40[5] = v47;
        v40[6] = v41[6];
        uint64_t v48 = *(int *)(v42 + 32);
        uint64_t v49 = (void (*)(char *, char *, uint64_t))v21;
        uint64_t v50 = (char *)v40 + v48;
        uint64_t v51 = (char *)v41 + v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v49(v50, v51, v20);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:
      uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
LABEL_37:
      uint64_t v54 = a1 + *(int *)(v10 + 24);
      uint64_t v55 = type metadata accessor for UnknownStorage();
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8);
      uint64_t v17 = v55;
      uint64_t v16 = v54;
      goto LABEL_38;
    case 1:
      uint64_t v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(a1, 1, v11))
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            uint64_t v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(a1, 1, v12))
            {
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
              if (EnumCaseMultiPayload == 1)
              {
                uint64_t v14 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                uint64_t v15 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
              }
              else
              {
                swift_bridgeObjectRelease();
                outlined consume of Data._Representation(*(void *)(a1 + 40), *(void *)(a1 + 48));
                uint64_t v28 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                uint64_t v29 = a1 + *(int *)(v28 + 32);
                uint64_t v30 = type metadata accessor for UnknownStorage();
                uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8);
                v31(v29, v30);
                uint64_t v32 = a1 + *(int *)(v28 + 36);
                uint64_t v33 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v33 - 1) + 48))(v32, 1, v33))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of Data._Representation(*(void *)(v32 + 32), *(void *)(v32 + 40));
                  outlined consume of Data._Representation(*(void *)(v32 + 48), *(void *)(v32 + 56));
                  v31(v32 + v33[8], v30);
                  uint64_t v34 = v32 + v33[9];
                  uint64_t v35 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48);
                  if (!v36(v34, 1, v35))
                  {
                    outlined consume of Data._Representation(*(void *)(v34 + 8), *(void *)(v34 + 16));
                    v31(v34 + *(int *)(v35 + 24), v30);
                  }
                  uint64_t v37 = v32 + v33[10];
                  if (!v36(v37, 1, v35))
                  {
                    outlined consume of Data._Representation(*(void *)(v37 + 8), *(void *)(v37 + 16));
                    v31(v37 + *(int *)(v35 + 24), v30);
                  }
                }
              }
            }
            uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            goto LABEL_35;
          case 1u:
            outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
            uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            goto LABEL_35;
          case 2u:
            uint64_t v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(a1, 1, v20))
            {
              int v21 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
              if (v21 == 1)
              {
                uint64_t v22 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                uint64_t v23 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
              }
              else
              {
                uint64_t v38 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                uint64_t v39 = a1 + *(int *)(v38 + 24);
                uint64_t v40 = type metadata accessor for UnknownStorage();
                uint64_t v41 = *(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8);
                v41(v39, v40);
                uint64_t v42 = a1 + *(int *)(v38 + 28);
                uint64_t v43 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 1, v43))
                {
                  outlined consume of Data._Representation(*(void *)v42, *(void *)(v42 + 8));
                  v41(v42 + *(int *)(v43 + 24), v40);
                  uint64_t v44 = v42 + *(int *)(v43 + 28);
                  uint64_t v45 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v44, 1, v45))
                  {
                    outlined consume of Data._Representation(*(void *)v44, *(void *)(v44 + 8));
                    v41(v44 + *(int *)(v45 + 20), v40);
                  }
                }
              }
            }
            uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            goto LABEL_35;
          case 3u:
            uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(a1, 1, v24))
            {
              int v25 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
              if (v25 == 1)
              {
                uint64_t v26 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                uint64_t v27 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
              }
              else
              {
                uint64_t v46 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                uint64_t v47 = a1 + *(int *)(v46 + 24);
                uint64_t v48 = type metadata accessor for UnknownStorage();
                uint64_t v49 = *(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8);
                v49(v47, v48);
                uint64_t v50 = a1 + *(int *)(v46 + 28);
                uint64_t v51 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v50, 1, v51))
                {
                  outlined consume of Data._Representation(*(void *)(v50 + 8), *(void *)(v50 + 16));
                  v49(v50 + *(int *)(v51 + 24), v48);
                }
              }
            }
            uint64_t v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_35:
            uint64_t v52 = a1 + *(int *)(v19 + 20);
            uint64_t v53 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v52, v53);
            break;
          default:
            break;
        }
      }
      uint64_t v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      goto LABEL_37;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v3 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v4 = a1 + v3[8];
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v56(v4, v5);
      uint64_t v6 = a1 + v3[9];
      uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
      {
        swift_bridgeObjectRelease();
        v56(v6 + *(int *)(v7 + 28), v5);
      }
      uint64_t v8 = a1 + v3[10];
      uint64_t v9 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
      if (!result)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = v8 + *(int *)(v9 + 32);
        uint64_t v17 = v5;
        uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))v56;
LABEL_38:
        return v18(v16, v17);
      }
      break;
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    uint64_t v6 = *(void *)(v5 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v48 = *a2;
          unint64_t v49 = a2[1];
          outlined copy of Data._Representation(*a2, v49);
          *(void *)a1 = v48;
          *(void *)(a1 + 8) = v49;
          uint64_t v50 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0) + 20);
          uint64_t v51 = a1 + v50;
          uint64_t v52 = (uint64_t)a2 + v50;
          uint64_t v53 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v51, v52, v53);
          break;
        case 2u:
          uint64_t v54 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
          uint64_t v55 = *(void *)(v54 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v55 + 48))(a2, 1, v54))
          {
            uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
            memcpy((void *)a1, a2, *(void *)(*(void *)(v56 - 8) + 64));
          }
          else
          {
            int v67 = swift_getEnumCaseMultiPayload();
            uint64_t v68 = *a2;
            unint64_t v69 = a2[1];
            outlined copy of Data._Representation(*a2, v69);
            *(void *)a1 = v68;
            *(void *)(a1 + 8) = v69;
            if (v67 == 1)
            {
              *(void *)(a1 + 16) = a2[2];
              uint64_t v70 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                           + 24);
              uint64_t v71 = a1 + v70;
              uint64_t v72 = (uint64_t)a2 + v70;
              uint64_t v73 = type metadata accessor for UnknownStorage();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 16))(v71, v72, v73);
            }
            else
            {
              uint64_t v191 = v55;
              *(void *)(a1 + 16) = a2[2];
              uint64_t v95 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
              uint64_t v96 = *(int *)(v95 + 24);
              uint64_t v97 = a1 + v96;
              uint64_t v98 = (uint64_t)a2 + v96;
              uint64_t v99 = type metadata accessor for UnknownStorage();
              uint64_t v187 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 16);
              v187(v97, v98, v99);
              uint64_t v100 = *(int *)(v95 + 28);
              uint64_t v101 = (void *)(a1 + v100);
              uint64_t v102 = (uint64_t *)((char *)a2 + v100);
              uint64_t v103 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
              uint64_t v104 = *(void *)(v103 - 8);
              if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
              {
                uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
              }
              else
              {
                uint64_t v180 = v104;
                uint64_t v184 = v103;
                uint64_t v131 = v99;
                uint64_t v133 = *v102;
                unint64_t v132 = v102[1];
                outlined copy of Data._Representation(*v102, v132);
                *uint64_t v101 = v133;
                v101[1] = v132;
                v101[2] = v102[2];
                uint64_t v178 = v131;
                uint64_t v134 = v131;
                uint64_t v135 = v184;
                v187((uint64_t)v101 + *(int *)(v184 + 24), (uint64_t)v102 + *(int *)(v184 + 24), v134);
                uint64_t v136 = *(int *)(v184 + 28);
                uint64_t v181 = v101;
                uint64_t v137 = (void *)((char *)v101 + v136);
                uint64_t v138 = (uint64_t *)((char *)v102 + v136);
                uint64_t v139 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                uint64_t v140 = *(void *)(v139 - 8);
                if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139))
                {
                  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                  memcpy(v137, v138, *(void *)(*(void *)(v141 - 8) + 64));
                }
                else
                {
                  unint64_t v176 = v138[1];
                  uint64_t v154 = *v138;
                  outlined copy of Data._Representation(*v138, v176);
                  void *v137 = v154;
                  uint64_t v135 = v184;
                  v137[1] = v176;
                  v187((uint64_t)v137 + *(int *)(v139 + 20), (uint64_t)v138 + *(int *)(v139 + 20), v178);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
                }
                (*(void (**)(void *, void, uint64_t, uint64_t))(v180 + 56))(v181, 0, 1, v135);
              }
              uint64_t v55 = v191;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(a1, 0, 1, v54);
          }
          uint64_t v155 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                        + 20);
          uint64_t v156 = a1 + v155;
          uint64_t v157 = (uint64_t)a2 + v155;
          uint64_t v158 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 16))(v156, v157, v158);
          break;
        case 3u:
          uint64_t v57 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
          uint64_t v58 = *(void *)(v57 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(a2, 1, v57))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
            memcpy((void *)a1, a2, *(void *)(*(void *)(v59 - 8) + 64));
          }
          else
          {
            int v74 = swift_getEnumCaseMultiPayload();
            uint64_t v75 = *a2;
            unint64_t v76 = a2[1];
            outlined copy of Data._Representation(*a2, v76);
            *(void *)a1 = v75;
            *(void *)(a1 + 8) = v76;
            if (v74 == 1)
            {
              *(void *)(a1 + 16) = a2[2];
              *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
              *(void *)(a1 + 32) = a2[4];
              uint64_t v77 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                           + 28);
              uint64_t v78 = a1 + v77;
              uint64_t v79 = (uint64_t)a2 + v77;
              uint64_t v80 = type metadata accessor for UnknownStorage();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16))(v78, v79, v80);
            }
            else
            {
              uint64_t v192 = v58;
              *(void *)(a1 + 16) = a2[2];
              *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
              uint64_t v106 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
              uint64_t v107 = *(int *)(v106 + 24);
              uint64_t v108 = a1 + v107;
              uint64_t v109 = (uint64_t)a2 + v107;
              uint64_t v110 = type metadata accessor for UnknownStorage();
              uint64_t v188 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 16);
              v188(v108, v109, v110);
              uint64_t v111 = *(int *)(v106 + 28);
              uint64_t v112 = (void *)(a1 + v111);
              uint64_t v113 = (uint64_t *)((char *)a2 + v111);
              uint64_t v114 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v115 = *(void *)(v114 - 8);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
              {
                uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
              }
              else
              {
                uint64_t v142 = v113[1];
                void *v112 = *v113;
                unint64_t v182 = v113[2];
                uint64_t v185 = v142;
                outlined copy of Data._Representation(v142, v182);
                v112[1] = v185;
                v112[2] = v182;
                v188((uint64_t)v112 + *(int *)(v114 + 24), (uint64_t)v113 + *(int *)(v114 + 24), v110);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
              }
              uint64_t v58 = v192;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(a1, 0, 1, v57);
          }
          uint64_t v143 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                        + 20);
          uint64_t v144 = a1 + v143;
          uint64_t v145 = (uint64_t)a2 + v143;
          uint64_t v146 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v146 - 8) + 16))(v144, v145, v146);
          break;
        default:
          uint64_t v27 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
          uint64_t v28 = *(void *)(v27 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(a2, 1, v27))
          {
            uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
            memcpy((void *)a1, a2, *(void *)(*(void *)(v29 - 8) + 64));
          }
          else
          {
            int v60 = swift_getEnumCaseMultiPayload();
            uint64_t v61 = *a2;
            unint64_t v62 = a2[1];
            outlined copy of Data._Representation(*a2, v62);
            *(void *)a1 = v61;
            *(void *)(a1 + 8) = v62;
            if (v60 == 1)
            {
              uint64_t v63 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                           + 20);
              uint64_t v64 = a1 + v63;
              uint64_t v65 = (uint64_t)a2 + v63;
              uint64_t v66 = type metadata accessor for UnknownStorage();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(v64, v65, v66);
            }
            else
            {
              uint64_t v190 = v28;
              uint64_t v81 = a2[3];
              *(void *)(a1 + 16) = a2[2];
              *(void *)(a1 + 24) = v81;
              *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
              uint64_t v82 = a2[5];
              unint64_t v83 = a2[6];
              swift_bridgeObjectRetain();
              outlined copy of Data._Representation(v82, v83);
              *(void *)(a1 + 40) = v82;
              *(void *)(a1 + 48) = v83;
              uint64_t v84 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
              uint64_t v85 = *(int *)(v84 + 32);
              uint64_t v86 = a1 + v85;
              uint64_t v87 = (uint64_t)a2 + v85;
              uint64_t v88 = type metadata accessor for UnknownStorage();
              uint64_t v183 = *(void (**)(uint64_t, uint64_t))(*(void *)(v88 - 8) + 16);
              uint64_t v186 = v88;
              v183(v86, v87);
              uint64_t v89 = *(int *)(v84 + 36);
              uint64_t v90 = (void *)(a1 + v89);
              uint64_t v91 = (uint64_t *)((char *)a2 + v89);
              uint64_t v92 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
              uint64_t v93 = *(void *)(v92 - 8);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
              {
                uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
              }
              else
              {
                uint64_t v175 = v93;
                uint64_t v189 = v90;
                uint64_t v117 = v91[1];
                *uint64_t v90 = *v91;
                v90[1] = v117;
                uint64_t v118 = v91[3];
                v189[2] = v91[2];
                v189[3] = v118;
                uint64_t v179 = v92;
                uint64_t v120 = v91[4];
                unint64_t v119 = v91[5];
                swift_bridgeObjectRetain();
                uint64_t v121 = v189;
                swift_bridgeObjectRetain();
                outlined copy of Data._Representation(v120, v119);
                v189[4] = v120;
                v189[5] = v119;
                uint64_t v122 = v91[6];
                unint64_t v123 = v91[7];
                outlined copy of Data._Representation(v122, v123);
                v189[6] = v122;
                v189[7] = v123;
                ((void (*)(char *, char *, uint64_t))v183)((char *)v189 + *(int *)(v179 + 32), (char *)v91 + *(int *)(v179 + 32), v186);
                uint64_t v124 = *(int *)(v179 + 36);
                uint64_t v125 = (void *)((char *)v189 + v124);
                uint64_t v126 = (void *)((char *)v91 + v124);
                uint64_t v127 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v128 = *(void *)(v127 - 8);
                uint64_t v177 = v127;
                uint64_t v174 = *(unsigned int (**)(void *, uint64_t))(v128 + 48);
                uint64_t v173 = v128;
                if (v174(v126, 1))
                {
                  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v125, v126, *(void *)(*(void *)(v129 - 8) + 64));
                  uint64_t v130 = v179;
                }
                else
                {
                  uint64_t v147 = v126[1];
                  *uint64_t v125 = *v126;
                  unint64_t v171 = v126[2];
                  outlined copy of Data._Representation(v147, v171);
                  v125[1] = v147;
                  uint64_t v121 = v189;
                  v125[2] = v171;
                  uint64_t v148 = v125;
                  uint64_t v172 = v125;
                  uint64_t v130 = v179;
                  ((void (*)(char *, char *, uint64_t))v183)((char *)v148 + *(int *)(v177 + 24), (char *)v126 + *(int *)(v177 + 24), v186);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v128 + 56))(v172, 0, 1, v177);
                }
                uint64_t v149 = *(int *)(v130 + 40);
                uint64_t v150 = (void *)((char *)v121 + v149);
                uint64_t v151 = (void *)((char *)v91 + v149);
                if (((unsigned int (*)(void *, uint64_t, uint64_t))v174)(v151, 1, v177))
                {
                  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v150, v151, *(void *)(*(void *)(v152 - 8) + 64));
                  uint64_t v153 = v179;
                }
                else
                {
                  uint64_t v159 = v151[1];
                  *uint64_t v150 = *v151;
                  unint64_t v160 = v151[2];
                  outlined copy of Data._Representation(v159, v160);
                  v150[1] = v159;
                  v150[2] = v160;
                  uint64_t v121 = v189;
                  uint64_t v153 = v179;
                  ((void (*)(char *, char *, uint64_t))v183)((char *)v150 + *(int *)(v177 + 24), (char *)v151 + *(int *)(v177 + 24), v186);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v173 + 56))(v150, 0, 1, v177);
                }
                (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v121, 0, 1, v153);
              }
              uint64_t v28 = v190;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v27);
          }
          uint64_t v161 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
          uint64_t v162 = a1 + v161;
          uint64_t v163 = (uint64_t)a2 + v161;
          uint64_t v164 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 16))(v162, v163, v164);
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    uint64_t v165 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
    *(void *)(a1 + *(int *)(v165 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v165 + 20));
    uint64_t v166 = *(int *)(v165 + 24);
    uint64_t v167 = a1 + v166;
    uint64_t v168 = (uint64_t)a2 + v166;
    uint64_t v169 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 16))(v167, v168, v169);
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v12 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v13 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
    uint64_t v14 = v13[8];
    uint64_t v15 = (char *)(a1 + v14);
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for UnknownStorage();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = v15;
    uint64_t v20 = v18;
    v18(v19, v16, v17);
    uint64_t v21 = v13[9];
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v30 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v30;
      *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
      uint64_t v31 = *(int *)(v24 + 28);
      uint64_t v32 = (char *)v22 + v31;
      uint64_t v33 = (char *)v23 + v31;
      swift_bridgeObjectRetain();
      uint64_t v34 = v32;
      uint64_t v20 = v18;
      v18(v34, v33, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v35 = v13[10];
    uint64_t v36 = (void *)(a1 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v38 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      uint64_t v41 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v41;
      uint64_t v42 = v37[3];
      v36[2] = v37[2];
      v36[3] = v42;
      uint64_t v43 = v37[5];
      v36[4] = v37[4];
      v36[5] = v43;
      void v36[6] = v37[6];
      uint64_t v44 = *(int *)(v38 + 32);
      uint64_t v45 = v20;
      uint64_t v46 = (char *)v36 + v44;
      uint64_t v47 = (char *)v37 + v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v46, v47, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)a1 = v8;
      *(void *)(a1 + 16) = a2[2];
      uint64_t v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      uint64_t v10 = a1 + v9;
      uint64_t v11 = (uint64_t)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      uint64_t v6 = *(void *)(v5 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
        memcpy((void *)a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v46 = *a2;
            unint64_t v47 = a2[1];
            outlined copy of Data._Representation(*a2, v47);
            *(void *)a1 = v46;
            *(void *)(a1 + 8) = v47;
            uint64_t v48 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            break;
          case 2u:
            uint64_t v49 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            uint64_t v50 = *(void *)(v49 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v50 + 48))(a2, 1, v49))
            {
              uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
              memcpy((void *)a1, a2, *(void *)(*(void *)(v51 - 8) + 64));
            }
            else
            {
              uint64_t v177 = v50;
              int v62 = swift_getEnumCaseMultiPayload();
              uint64_t v63 = *a2;
              unint64_t v64 = a2[1];
              outlined copy of Data._Representation(*a2, v64);
              *(void *)a1 = v63;
              *(void *)(a1 + 8) = v64;
              if (v62 == 1)
              {
                *(void *)(a1 + 16) = a2[2];
                uint64_t v65 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                uint64_t v66 = a1 + v65;
                uint64_t v67 = (uint64_t)a2 + v65;
                uint64_t v68 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16))(v66, v67, v68);
                swift_storeEnumTagMultiPayload();
                uint64_t v69 = v177;
              }
              else
              {
                *(void *)(a1 + 16) = a2[2];
                uint64_t v91 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                uint64_t v92 = *(int *)(v91 + 24);
                uint64_t v93 = a1 + v92;
                uint64_t v94 = (uint64_t)a2 + v92;
                uint64_t v95 = type metadata accessor for UnknownStorage();
                uint64_t v169 = *(void (**)(uint64_t, uint64_t))(*(void *)(v95 - 8) + 16);
                uint64_t v171 = v95;
                v169(v93, v94);
                uint64_t v96 = *(int *)(v91 + 28);
                uint64_t v97 = (void *)(a1 + v96);
                uint64_t v98 = (uint64_t *)((char *)a2 + v96);
                uint64_t v99 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                uint64_t v100 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v99 - 8);
                if (v100[6](v98, 1, v99))
                {
                  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                  memcpy(v97, v98, *(void *)(*(void *)(v101 - 8) + 64));
                  uint64_t v69 = v177;
                }
                else
                {
                  __dsta = v100;
                  uint64_t v124 = v99;
                  uint64_t v175 = v97;
                  uint64_t v125 = *v98;
                  unint64_t v126 = v98[1];
                  outlined copy of Data._Representation(*v98, v126);
                  *uint64_t v175 = v125;
                  v175[1] = v126;
                  uint64_t v127 = v175;
                  v175[2] = v98[2];
                  ((void (*)(char *, char *, uint64_t))v169)((char *)v175 + *(int *)(v124 + 24), (char *)v98 + *(int *)(v124 + 24), v171);
                  uint64_t v162 = v124;
                  uint64_t v128 = *(int *)(v124 + 28);
                  uint64_t v158 = (void *)((char *)v175 + v128);
                  uint64_t v129 = (uint64_t *)((char *)v98 + v128);
                  uint64_t v130 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  uint64_t v131 = *(void *)(v130 - 8);
                  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
                  {
                    uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                    memcpy(v158, v129, *(void *)(*(void *)(v132 - 8) + 64));
                  }
                  else
                  {
                    unint64_t v139 = v129[1];
                    uint64_t v156 = *v129;
                    outlined copy of Data._Representation(*v129, v139);
                    *uint64_t v158 = v156;
                    v158[1] = v139;
                    uint64_t v127 = v175;
                    ((void (*)(char *, char *, uint64_t))v169)((char *)v158 + *(int *)(v130 + 20), (char *)v129 + *(int *)(v130 + 20), v171);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v158, 0, 1, v130);
                  }
                  uint64_t v69 = v177;
                  (*((void (**)(void *, void, uint64_t, uint64_t))__dsta + 7))(v127, 0, 1, v162);
                }
                swift_storeEnumTagMultiPayload();
              }
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(a1, 0, 1, v49);
            }
            uint64_t v48 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            break;
          case 3u:
            uint64_t v52 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            uint64_t v53 = *(void *)(v52 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v53 + 48))(a2, 1, v52))
            {
              uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
              memcpy((void *)a1, a2, *(void *)(*(void *)(v54 - 8) + 64));
            }
            else
            {
              uint64_t v178 = v53;
              int v70 = swift_getEnumCaseMultiPayload();
              uint64_t v71 = *a2;
              unint64_t v72 = a2[1];
              outlined copy of Data._Representation(*a2, v72);
              *(void *)a1 = v71;
              *(void *)(a1 + 8) = v72;
              if (v70 == 1)
              {
                uint64_t v73 = a2[2];
                *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
                *(void *)(a1 + 16) = v73;
                *(void *)(a1 + 32) = a2[4];
                uint64_t v74 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                uint64_t v75 = a1 + v74;
                uint64_t v76 = (uint64_t)a2 + v74;
                uint64_t v77 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v75, v76, v77);
                swift_storeEnumTagMultiPayload();
                uint64_t v78 = v178;
              }
              else
              {
                uint64_t v102 = a2[2];
                *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
                *(void *)(a1 + 16) = v102;
                uint64_t v103 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                uint64_t v104 = *(int *)(v103 + 24);
                uint64_t v105 = a1 + v104;
                uint64_t v106 = (uint64_t)a2 + v104;
                uint64_t v107 = type metadata accessor for UnknownStorage();
                uint64_t v172 = *(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 16);
                uint64_t v174 = v107;
                v172(v105, v106);
                uint64_t v108 = *(int *)(v103 + 28);
                uint64_t v109 = (void *)(a1 + v108);
                uint64_t v110 = (uint64_t *)((char *)a2 + v108);
                uint64_t v111 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v112 = *(void *)(v111 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
                {
                  uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
                }
                else
                {
                  void *v109 = *v110;
                  __srcb = (void *)v110[2];
                  uint64_t v167 = v110[1];
                  outlined copy of Data._Representation(v167, (unint64_t)__srcb);
                  v109[1] = v167;
                  v109[2] = __srcb;
                  ((void (*)(char *, char *, uint64_t))v172)((char *)v109 + *(int *)(v111 + 24), (char *)v110 + *(int *)(v111 + 24), v174);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
                }
                uint64_t v78 = v178;
                swift_storeEnumTagMultiPayload();
              }
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(a1, 0, 1, v52);
            }
            uint64_t v48 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
            break;
          default:
            uint64_t v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            uint64_t v29 = *(void *)(v28 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(a2, 1, v28))
            {
              uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
              memcpy((void *)a1, a2, *(void *)(*(void *)(v30 - 8) + 64));
            }
            else
            {
              uint64_t v173 = v29;
              int v55 = swift_getEnumCaseMultiPayload();
              uint64_t v56 = *a2;
              unint64_t v57 = a2[1];
              outlined copy of Data._Representation(*a2, v57);
              *(void *)a1 = v56;
              *(void *)(a1 + 8) = v57;
              if (v55 == 1)
              {
                uint64_t v58 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                uint64_t v59 = a1 + v58;
                uint64_t v60 = (uint64_t)a2 + v58;
                uint64_t v61 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
              }
              else
              {
                *(void *)(a1 + 16) = a2[2];
                uint64_t v79 = a2[3];
                *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
                *(void *)(a1 + 24) = v79;
                uint64_t v80 = a2[5];
                unint64_t v81 = a2[6];
                swift_bridgeObjectRetain();
                outlined copy of Data._Representation(v80, v81);
                *(void *)(a1 + 40) = v80;
                *(void *)(a1 + 48) = v81;
                uint64_t v82 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                uint64_t v83 = *(int *)(v82 + 32);
                uint64_t v84 = a1 + v83;
                uint64_t v85 = (uint64_t)a2 + v83;
                uint64_t v166 = type metadata accessor for UnknownStorage();
                uint64_t v168 = (void (**)(uint64_t, uint64_t))(*(void *)(v166 - 8) + 16);
                uint64_t v170 = *v168;
                (*v168)(v84, v85);
                uint64_t v86 = *(int *)(v82 + 36);
                uint64_t v179 = (void *)(a1 + v86);
                uint64_t v87 = (uint64_t *)((char *)a2 + v86);
                uint64_t v88 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                uint64_t v89 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v88 - 8);
                if (v89[6](v87, 1, v88))
                {
                  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                  memcpy(v179, v87, *(void *)(*(void *)(v90 - 8) + 64));
                }
                else
                {
                  uint64_t v157 = v89;
                  *uint64_t v179 = *v87;
                  v179[1] = v87[1];
                  v179[2] = v87[2];
                  uint64_t v114 = v88;
                  v179[3] = v87[3];
                  uint64_t v115 = v87[4];
                  __srca = (void *)v87[5];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  outlined copy of Data._Representation(v115, (unint64_t)__srca);
                  v179[4] = v115;
                  v179[5] = __srca;
                  uint64_t v116 = v87[6];
                  unint64_t v117 = v87[7];
                  outlined copy of Data._Representation(v116, v117);
                  v179[6] = v116;
                  v179[7] = v117;
                  ((void (*)(char *, char *, uint64_t))v170)((char *)v179 + *(int *)(v114 + 32), (char *)v87 + *(int *)(v114 + 32), v166);
                  uint64_t v118 = *(int *)(v114 + 36);
                  __dst = (void *)((char *)v179 + v118);
                  uint64_t v161 = v114;
                  unint64_t v119 = (void *)((char *)v87 + v118);
                  uint64_t v120 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v121 = *(void *)(v120 - 8);
                  __src = (int *)v120;
                  uint64_t v155 = *(unsigned int (**)(char *, uint64_t, int *))(v121 + 48);
                  uint64_t v154 = v121;
                  if (((unsigned int (*)(void *, uint64_t))v155)(v119, 1))
                  {
                    uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(__dst, v119, *(void *)(*(void *)(v122 - 8) + 64));
                    unint64_t v123 = v179;
                  }
                  else
                  {
                    void *__dst = *v119;
                    unint64_t v152 = v119[2];
                    uint64_t v153 = v119[1];
                    outlined copy of Data._Representation(v153, v152);
                    __dst[1] = v153;
                    __dst[2] = v152;
                    ((void (*)(char *, char *, uint64_t))v170)((char *)__dst + __src[6], (char *)v119 + __src[6], v166);
                    uint64_t v133 = v121;
                    unint64_t v123 = v179;
                    (*(void (**)(void *, void, uint64_t, int *))(v133 + 56))(__dst, 0, 1, __src);
                  }
                  uint64_t v134 = *(int *)(v161 + 40);
                  uint64_t v135 = (void *)((char *)v123 + v134);
                  uint64_t v136 = (void *)((char *)v87 + v134);
                  if (v155((char *)v87 + v134, 1, __src))
                  {
                    uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v135, v136, *(void *)(*(void *)(v137 - 8) + 64));
                    uint64_t v138 = v123;
                  }
                  else
                  {
                    void *v135 = *v136;
                    uint64_t v141 = v136[1];
                    unint64_t v140 = v136[2];
                    outlined copy of Data._Representation(v141, v140);
                    v135[1] = v141;
                    v135[2] = v140;
                    uint64_t v138 = v179;
                    ((void (*)(char *, char *, uint64_t))v170)((char *)v135 + __src[6], (char *)v136 + __src[6], v166);
                    (*(void (**)(void *, void, uint64_t, int *))(v154 + 56))(v135, 0, 1, __src);
                  }
                  (*((void (**)(void *, void, uint64_t, uint64_t))v157 + 7))(v138, 0, 1, v161);
                }
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v173 + 56))(a1, 0, 1, v28);
            }
            uint64_t v48 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            break;
        }
        uint64_t v142 = *(int *)(v48 + 20);
        uint64_t v143 = a1 + v142;
        uint64_t v144 = (uint64_t)a2 + v142;
        uint64_t v145 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v145 - 8) + 16))(v143, v144, v145);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      uint64_t v146 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(void *)(a1 + *(int *)(v146 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v146 + 20));
      uint64_t v147 = *(int *)(v146 + 24);
      uint64_t v148 = a1 + v147;
      uint64_t v149 = (uint64_t)a2 + v147;
      uint64_t v150 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 16))(v148, v149, v150);
    }
    else
    {
      uint64_t v13 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = a2[3];
      *(void *)(a1 + 32) = a2[4];
      uint64_t v14 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v15 = v14[8];
      unint64_t v176 = a2;
      uint64_t v16 = a1 + v15;
      uint64_t v17 = (uint64_t)v176 + v15;
      uint64_t v18 = type metadata accessor for UnknownStorage();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v20 = v16;
      uint64_t v21 = v176;
      v19(v20, v17, v18);
      uint64_t v22 = v14[9];
      uint64_t v23 = (void *)(a1 + v22);
      uint64_t v24 = (uint64_t *)((char *)v176 + v22);
      uint64_t v25 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        *uint64_t v23 = *v24;
        v23[1] = v24[1];
        v23[2] = v24[2];
        v23[3] = v24[3];
        uint64_t v31 = *(int *)(v25 + 28);
        uint64_t v32 = v19;
        uint64_t v33 = (char *)v23 + v31;
        uint64_t v34 = (char *)v24 + v31;
        swift_bridgeObjectRetain();
        uint64_t v35 = v33;
        uint64_t v19 = v32;
        uint64_t v21 = v176;
        v32((uint64_t)v35, (uint64_t)v34, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      uint64_t v36 = v14[10];
      uint64_t v37 = (void *)(a1 + v36);
      uint64_t v38 = (uint64_t *)((char *)v21 + v36);
      uint64_t v39 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        void v37[2] = v38[2];
        v37[3] = v38[3];
        v37[4] = v38[4];
        v37[5] = v38[5];
        v37[6] = v38[6];
        uint64_t v42 = *(int *)(v39 + 32);
        uint64_t v43 = (void (*)(char *, char *, uint64_t))v19;
        uint64_t v44 = (char *)v37 + v42;
        uint64_t v45 = (char *)v38 + v42;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v43(v44, v45, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    uint64_t v6 = *(void *)(v5 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
          break;
        case 2u:
          uint64_t v36 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
          uint64_t v37 = *(void *)(v36 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(a2, 1, v36))
          {
            uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v38 - 8) + 64));
          }
          else
          {
            int v47 = swift_getEnumCaseMultiPayload();
            *(_OWORD *)a1 = *(_OWORD *)a2;
            if (v47 == 1)
            {
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              uint64_t v48 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                           + 24);
              uint64_t v49 = a1 + v48;
              uint64_t v50 = a2 + v48;
              uint64_t v51 = type metadata accessor for UnknownStorage();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
            }
            else
            {
              uint64_t v128 = v37;
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              uint64_t v68 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
              uint64_t v69 = *(int *)(v68 + 24);
              uint64_t v70 = a1 + v69;
              uint64_t v71 = a2 + v69;
              uint64_t v72 = type metadata accessor for UnknownStorage();
              unint64_t v123 = *(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 32);
              uint64_t v125 = v72;
              v123(v70, v71);
              uint64_t v73 = *(int *)(v68 + 28);
              __dsta = (void *)(a1 + v73);
              uint64_t v74 = (void *)(a2 + v73);
              uint64_t v75 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
              uint64_t v76 = *(void *)(v75 - 8);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
              {
                uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                memcpy(__dsta, v74, *(void *)(*(void *)(v77 - 8) + 64));
                uint64_t v37 = v128;
              }
              else
              {
                *(_OWORD *)__dsta = *(_OWORD *)v74;
                __dsta[2] = v74[2];
                ((void (*)(char *, char *, uint64_t))v123)((char *)__dsta + *(int *)(v75 + 24), (char *)v74 + *(int *)(v75 + 24), v125);
                uint64_t v121 = v75;
                uint64_t v95 = *(int *)(v75 + 28);
                uint64_t v118 = (_OWORD *)((char *)__dsta + v95);
                uint64_t v96 = (_OWORD *)((char *)v74 + v95);
                uint64_t v97 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                uint64_t v98 = *(void *)(v97 - 8);
                if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
                {
                  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                  memcpy(v118, v96, *(void *)(*(void *)(v99 - 8) + 64));
                }
                else
                {
                  *uint64_t v118 = *v96;
                  ((void (*)(char *, char *, uint64_t))v123)((char *)v118 + *(int *)(v97 + 20), (char *)v96 + *(int *)(v97 + 20), v125);
                  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v98 + 56))(v118, 0, 1, v97);
                }
                uint64_t v37 = v128;
                (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(__dsta, 0, 1, v121);
              }
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(a1, 0, 1, v36);
          }
          uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
          break;
        case 3u:
          uint64_t v39 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
          uint64_t v40 = *(void **)(v39 - 8);
          if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v40 + 6))(a2, 1, v39))
          {
            uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v41 - 8) + 64));
          }
          else
          {
            int v52 = swift_getEnumCaseMultiPayload();
            *(_OWORD *)a1 = *(_OWORD *)a2;
            if (v52 == 1)
            {
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
              *(void *)(a1 + 32) = *(void *)(a2 + 32);
              uint64_t v53 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                           + 28);
              uint64_t v54 = a1 + v53;
              uint64_t v55 = a2 + v53;
              uint64_t v56 = type metadata accessor for UnknownStorage();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 32))(v54, v55, v56);
            }
            else
            {
              __dstb = v40;
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
              uint64_t v78 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
              uint64_t v79 = *(int *)(v78 + 24);
              uint64_t v80 = a1 + v79;
              uint64_t v81 = a2 + v79;
              uint64_t v82 = type metadata accessor for UnknownStorage();
              unint64_t v126 = *(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 32);
              uint64_t v129 = v82;
              v126(v80, v81);
              uint64_t v83 = *(int *)(v78 + 28);
              uint64_t v134 = (void *)(a1 + v83);
              uint64_t v84 = (void *)(a2 + v83);
              uint64_t v85 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              uint64_t v86 = *(void *)(v85 - 8);
              if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
              {
                uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                memcpy(v134, v84, *(void *)(*(void *)(v87 - 8) + 64));
              }
              else
              {
                *uint64_t v134 = *v84;
                *(_OWORD *)(v134 + 1) = *(_OWORD *)(v84 + 1);
                ((void (*)(char *, char *, uint64_t))v126)((char *)v134 + *(int *)(v85 + 24), (char *)v84 + *(int *)(v85 + 24), v129);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v86 + 56))(v134, 0, 1, v85);
              }
              uint64_t v40 = __dstb;
            }
            swift_storeEnumTagMultiPayload();
            (*((void (**)(uint64_t, void, uint64_t, uint64_t))v40 + 7))(a1, 0, 1, v39);
          }
          uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
          break;
        default:
          uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
          uint64_t v25 = *(void *)(v24 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(a2, 1, v24))
          {
            uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
            memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v26 - 8) + 64));
          }
          else
          {
            int v42 = swift_getEnumCaseMultiPayload();
            *(_OWORD *)a1 = *(_OWORD *)a2;
            if (v42 == 1)
            {
              uint64_t v43 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                           + 20);
              uint64_t v44 = a1 + v43;
              uint64_t v45 = a2 + v43;
              uint64_t v46 = type metadata accessor for UnknownStorage();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
            }
            else
            {
              uint64_t v127 = v25;
              uint64_t v57 = *(void *)(a2 + 24);
              *(void *)(a1 + 16) = *(void *)(a2 + 16);
              *(void *)(a1 + 24) = v57;
              *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
              *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
              uint64_t v58 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
              uint64_t v59 = *(int *)(v58 + 32);
              uint64_t v60 = a1 + v59;
              uint64_t v61 = a2 + v59;
              uint64_t v62 = type metadata accessor for UnknownStorage();
              uint64_t v122 = *(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 32);
              uint64_t v124 = v62;
              v122(v60, v61);
              uint64_t v63 = *(int *)(v58 + 36);
              uint64_t v133 = (_OWORD *)(a1 + v63);
              unint64_t v64 = (char *)(a2 + v63);
              uint64_t v65 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
              uint64_t v66 = *(void *)(v65 - 8);
              __dst = v64;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
              {
                uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                memcpy(v133, v64, *(void *)(*(void *)(v67 - 8) + 64));
              }
              else
              {
                uint64_t v119 = v66;
                long long v88 = *((_OWORD *)v64 + 1);
                *uint64_t v133 = *(_OWORD *)v64;
                v133[1] = v88;
                long long v89 = *((_OWORD *)v64 + 3);
                v133[2] = *((_OWORD *)v64 + 2);
                v133[3] = v89;
                ((void (*)(char *, char *, uint64_t))v122)((char *)v133 + *(int *)(v65 + 32), &v64[*(int *)(v65 + 32)], v124);
                uint64_t v120 = v65;
                uint64_t v90 = *(int *)(v65 + 36);
                uint64_t v116 = (void *)((char *)v133 + v90);
                uint64_t v91 = &v64[v90];
                uint64_t v92 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v93 = *(void *)(v92 - 8);
                unint64_t v117 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
                uint64_t v115 = v93;
                if (v117(v91, 1, v92))
                {
                  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v116, v91, *(void *)(*(void *)(v94 - 8) + 64));
                }
                else
                {
                  *uint64_t v116 = *(void *)v91;
                  *(_OWORD *)(v116 + 1) = *(_OWORD *)(v91 + 8);
                  ((void (*)(char *, char *, uint64_t))v122)((char *)v116 + *(int *)(v92 + 24), &v91[*(int *)(v92 + 24)], v124);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v116, 0, 1, v92);
                }
                uint64_t v100 = v92;
                uint64_t v101 = *(int *)(v120 + 40);
                uint64_t v102 = (void *)((char *)v133 + v101);
                uint64_t v103 = &__dst[v101];
                if (v117(&__dst[v101], 1, v100))
                {
                  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
                }
                else
                {
                  *uint64_t v102 = *(void *)v103;
                  *(_OWORD *)(v102 + 1) = *(_OWORD *)(v103 + 8);
                  ((void (*)(char *, char *, uint64_t))v122)((char *)v102 + *(int *)(v100 + 24), &v103[*(int *)(v100 + 24)], v124);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v102, 0, 1, v100);
                }
                (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v119 + 56))(v133, 0, 1, v120);
              }
              uint64_t v25 = v127;
            }
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(a1, 0, 1, v24);
          }
          uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
          break;
      }
      uint64_t v105 = *(int *)(v35 + 20);
      uint64_t v106 = a1 + v105;
      uint64_t v107 = a2 + v105;
      uint64_t v108 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 32))(v106, v107, v108);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    uint64_t v109 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
    *(void *)(a1 + *(int *)(v109 + 20)) = *(void *)(a2 + *(int *)(v109 + 20));
    uint64_t v110 = *(int *)(v109 + 24);
    uint64_t v111 = a1 + v110;
    uint64_t v112 = a2 + v110;
    uint64_t v113 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 32))(v111, v112, v113);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v12 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
    uint64_t v13 = v12[8];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
    v17(v14, v15, v16);
    uint64_t v18 = v12[9];
    uint64_t v19 = (_OWORD *)(a1 + v18);
    uint64_t v20 = (_OWORD *)(a2 + v18);
    uint64_t v21 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      long long v27 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v27;
      v17((uint64_t)v19 + *(int *)(v21 + 28), (uint64_t)v20 + *(int *)(v21 + 28), v16);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    uint64_t v28 = v12[10];
    uint64_t v29 = (_OWORD *)(a1 + v28);
    uint64_t v30 = (_OWORD *)(a2 + v28);
    uint64_t v31 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      long long v34 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v34;
      _OWORD v29[2] = v30[2];
      *((void *)v29 + 6) = *((void *)v30 + 6);
      v17((uint64_t)v29 + *(int *)(v31 + 32), (uint64_t)v30 + *(int *)(v31 + 32), v16);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      uint64_t v6 = *(void *)(v5 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
        memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            break;
          case 2u:
            uint64_t v36 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            uint64_t v37 = *(void *)(v36 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(a2, 1, v36))
            {
              uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v38 - 8) + 64));
            }
            else
            {
              int v47 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v47 == 1)
              {
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                uint64_t v48 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                uint64_t v49 = a1 + v48;
                uint64_t v50 = a2 + v48;
                uint64_t v51 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 32))(v49, v50, v51);
              }
              else
              {
                uint64_t v128 = v37;
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                uint64_t v68 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                uint64_t v69 = *(int *)(v68 + 24);
                uint64_t v70 = a1 + v69;
                uint64_t v71 = a2 + v69;
                uint64_t v72 = type metadata accessor for UnknownStorage();
                unint64_t v123 = *(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 32);
                uint64_t v125 = v72;
                v123(v70, v71);
                uint64_t v73 = *(int *)(v68 + 28);
                __dsta = (void *)(a1 + v73);
                uint64_t v74 = (void *)(a2 + v73);
                uint64_t v75 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                uint64_t v76 = *(void *)(v75 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
                {
                  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
                  memcpy(__dsta, v74, *(void *)(*(void *)(v77 - 8) + 64));
                  uint64_t v37 = v128;
                }
                else
                {
                  *(_OWORD *)__dsta = *(_OWORD *)v74;
                  __dsta[2] = v74[2];
                  ((void (*)(char *, char *, uint64_t))v123)((char *)__dsta + *(int *)(v75 + 24), (char *)v74 + *(int *)(v75 + 24), v125);
                  uint64_t v121 = v75;
                  uint64_t v95 = *(int *)(v75 + 28);
                  uint64_t v118 = (_OWORD *)((char *)__dsta + v95);
                  uint64_t v96 = (_OWORD *)((char *)v74 + v95);
                  uint64_t v97 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  uint64_t v98 = *(void *)(v97 - 8);
                  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
                  {
                    uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
                    memcpy(v118, v96, *(void *)(*(void *)(v99 - 8) + 64));
                  }
                  else
                  {
                    *uint64_t v118 = *v96;
                    ((void (*)(char *, char *, uint64_t))v123)((char *)v118 + *(int *)(v97 + 20), (char *)v96 + *(int *)(v97 + 20), v125);
                    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v98 + 56))(v118, 0, 1, v97);
                  }
                  uint64_t v37 = v128;
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(__dsta, 0, 1, v121);
                }
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(a1, 0, 1, v36);
            }
            uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            break;
          case 3u:
            uint64_t v39 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            uint64_t v40 = *(void **)(v39 - 8);
            if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v40 + 6))(a2, 1, v39))
            {
              uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v41 - 8) + 64));
            }
            else
            {
              int v52 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v52 == 1)
              {
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
                *(void *)(a1 + 32) = *(void *)(a2 + 32);
                uint64_t v53 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                uint64_t v54 = a1 + v53;
                uint64_t v55 = a2 + v53;
                uint64_t v56 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 32))(v54, v55, v56);
              }
              else
              {
                __dstb = v40;
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
                uint64_t v78 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                uint64_t v79 = *(int *)(v78 + 24);
                uint64_t v80 = a1 + v79;
                uint64_t v81 = a2 + v79;
                uint64_t v82 = type metadata accessor for UnknownStorage();
                unint64_t v126 = *(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 32);
                uint64_t v129 = v82;
                v126(v80, v81);
                uint64_t v83 = *(int *)(v78 + 28);
                uint64_t v134 = (void *)(a1 + v83);
                uint64_t v84 = (void *)(a2 + v83);
                uint64_t v85 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                uint64_t v86 = *(void *)(v85 - 8);
                if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
                {
                  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                  memcpy(v134, v84, *(void *)(*(void *)(v87 - 8) + 64));
                }
                else
                {
                  *uint64_t v134 = *v84;
                  *(_OWORD *)(v134 + 1) = *(_OWORD *)(v84 + 1);
                  ((void (*)(char *, char *, uint64_t))v126)((char *)v134 + *(int *)(v85 + 24), (char *)v84 + *(int *)(v85 + 24), v129);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v86 + 56))(v134, 0, 1, v85);
                }
                uint64_t v40 = __dstb;
              }
              swift_storeEnumTagMultiPayload();
              (*((void (**)(uint64_t, void, uint64_t, uint64_t))v40 + 7))(a1, 0, 1, v39);
            }
            uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
            break;
          default:
            uint64_t v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            uint64_t v25 = *(void *)(v24 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(a2, 1, v24))
            {
              uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
              memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v26 - 8) + 64));
            }
            else
            {
              int v42 = swift_getEnumCaseMultiPayload();
              *(_OWORD *)a1 = *(_OWORD *)a2;
              if (v42 == 1)
              {
                uint64_t v43 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                uint64_t v44 = a1 + v43;
                uint64_t v45 = a2 + v43;
                uint64_t v46 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 32))(v44, v45, v46);
              }
              else
              {
                uint64_t v127 = v25;
                uint64_t v57 = *(void *)(a2 + 24);
                *(void *)(a1 + 16) = *(void *)(a2 + 16);
                *(void *)(a1 + 24) = v57;
                *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
                *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
                uint64_t v58 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                uint64_t v59 = *(int *)(v58 + 32);
                uint64_t v60 = a1 + v59;
                uint64_t v61 = a2 + v59;
                uint64_t v62 = type metadata accessor for UnknownStorage();
                uint64_t v122 = *(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 32);
                uint64_t v124 = v62;
                v122(v60, v61);
                uint64_t v63 = *(int *)(v58 + 36);
                uint64_t v133 = (_OWORD *)(a1 + v63);
                unint64_t v64 = (char *)(a2 + v63);
                uint64_t v65 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                uint64_t v66 = *(void *)(v65 - 8);
                __dst = v64;
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
                {
                  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
                  memcpy(v133, v64, *(void *)(*(void *)(v67 - 8) + 64));
                }
                else
                {
                  uint64_t v119 = v66;
                  long long v88 = *((_OWORD *)v64 + 1);
                  *uint64_t v133 = *(_OWORD *)v64;
                  v133[1] = v88;
                  long long v89 = *((_OWORD *)v64 + 3);
                  v133[2] = *((_OWORD *)v64 + 2);
                  v133[3] = v89;
                  ((void (*)(char *, char *, uint64_t))v122)((char *)v133 + *(int *)(v65 + 32), &v64[*(int *)(v65 + 32)], v124);
                  uint64_t v120 = v65;
                  uint64_t v90 = *(int *)(v65 + 36);
                  uint64_t v116 = (void *)((char *)v133 + v90);
                  uint64_t v91 = &v64[v90];
                  uint64_t v92 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  uint64_t v93 = *(void *)(v92 - 8);
                  unint64_t v117 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48);
                  uint64_t v115 = v93;
                  if (v117(v91, 1, v92))
                  {
                    uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v116, v91, *(void *)(*(void *)(v94 - 8) + 64));
                  }
                  else
                  {
                    *uint64_t v116 = *(void *)v91;
                    *(_OWORD *)(v116 + 1) = *(_OWORD *)(v91 + 8);
                    ((void (*)(char *, char *, uint64_t))v122)((char *)v116 + *(int *)(v92 + 24), &v91[*(int *)(v92 + 24)], v124);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v116, 0, 1, v92);
                  }
                  uint64_t v100 = v92;
                  uint64_t v101 = *(int *)(v120 + 40);
                  uint64_t v102 = (void *)((char *)v133 + v101);
                  uint64_t v103 = &__dst[v101];
                  if (v117(&__dst[v101], 1, v100))
                  {
                    uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
                    memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
                  }
                  else
                  {
                    *uint64_t v102 = *(void *)v103;
                    *(_OWORD *)(v102 + 1) = *(_OWORD *)(v103 + 8);
                    ((void (*)(char *, char *, uint64_t))v122)((char *)v102 + *(int *)(v100 + 24), &v103[*(int *)(v100 + 24)], v124);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v102, 0, 1, v100);
                  }
                  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v119 + 56))(v133, 0, 1, v120);
                }
                uint64_t v25 = v127;
              }
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(a1, 0, 1, v24);
            }
            uint64_t v35 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            break;
        }
        uint64_t v105 = *(int *)(v35 + 20);
        uint64_t v106 = a1 + v105;
        uint64_t v107 = a2 + v105;
        uint64_t v108 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 32))(v106, v107, v108);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
      uint64_t v109 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(void *)(a1 + *(int *)(v109 + 20)) = *(void *)(a2 + *(int *)(v109 + 20));
      uint64_t v110 = *(int *)(v109 + 24);
      uint64_t v111 = a1 + v110;
      uint64_t v112 = a2 + v110;
      uint64_t v113 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 32))(v111, v112, v113);
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v12 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      uint64_t v13 = v12[8];
      uint64_t v14 = a1 + v13;
      uint64_t v15 = a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
      v17(v14, v15, v16);
      uint64_t v18 = v12[9];
      uint64_t v19 = (_OWORD *)(a1 + v18);
      uint64_t v20 = (_OWORD *)(a2 + v18);
      uint64_t v21 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      uint64_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        long long v27 = v20[1];
        *uint64_t v19 = *v20;
        v19[1] = v27;
        v17((uint64_t)v19 + *(int *)(v21 + 28), (uint64_t)v20 + *(int *)(v21 + 28), v16);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      uint64_t v28 = v12[10];
      uint64_t v29 = (_OWORD *)(a1 + v28);
      uint64_t v30 = (_OWORD *)(a2 + v28);
      uint64_t v31 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        long long v34 = v30[1];
        *uint64_t v29 = *v30;
        v29[1] = v34;
        _OWORD v29[2] = v30[2];
        *((void *)v29 + 6) = *((void *)v30 + 6);
        v17((uint64_t)v29 + *(int *)(v31 + 32), (uint64_t)v30 + *(int *)(v31 + 32), v16);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t result = a4(319);
  if (v9 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v10 <= 0x3F)
    {
      uint64_t result = a6(319);
      if (v11 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a3[8];
    uint64_t v39 = a1 + v8;
    uint64_t v9 = (uint64_t)a2 + v8;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v10 = type metadata accessor for UnknownStorage();
    unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v39, v9, v10);
    uint64_t v12 = a3[9];
    uint64_t v13 = (void *)((char *)v4 + v12);
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v19 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      uint64_t v20 = *(int *)(v15 + 28);
      uint64_t v21 = v11;
      uint64_t v22 = (char *)v13 + v20;
      uint64_t v23 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      uint64_t v24 = v22;
      unint64_t v11 = v21;
      v21((uint64_t)v24, (uint64_t)v23, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v25 = a3[10];
    uint64_t v26 = (void *)((char *)v4 + v25);
    long long v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      uint64_t v31 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v31;
      uint64_t v32 = v27[3];
      v26[2] = v27[2];
      v26[3] = v32;
      uint64_t v33 = v27[5];
      v26[4] = v27[4];
      v26[5] = v33;
      v26[6] = v27[6];
      uint64_t v34 = *(int *)(v28 + 32);
      uint64_t v35 = (void (*)(char *, char *, uint64_t))v11;
      uint64_t v36 = (char *)v26 + v34;
      uint64_t v37 = (char *)v27 + v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v36, v37, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[9];
  uint64_t v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v12(v6 + *(int *)(v7 + 28), v5);
  }
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v8 + *(int *)(v9 + 32);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[8];
  uint64_t v37 = a1 + v7;
  uint64_t v8 = a2 + v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v37, v8, v9);
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    uint64_t v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    uint64_t v18 = *(int *)(v14 + 28);
    uint64_t v19 = v10;
    uint64_t v20 = (char *)v12 + v18;
    uint64_t v21 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    uint64_t v22 = v20;
    uint64_t v10 = v19;
    v19((uint64_t)v22, (uint64_t)v21, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v29 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v29;
    uint64_t v30 = v25[3];
    v24[2] = v25[2];
    v24[3] = v30;
    uint64_t v31 = v25[5];
    v24[4] = v25[4];
    v24[5] = v31;
    v24[6] = v25[6];
    uint64_t v32 = *(int *)(v26 + 32);
    uint64_t v33 = (void (*)(char *, char *, uint64_t))v10;
    uint64_t v34 = (char *)v24 + v32;
    uint64_t v35 = (char *)v25 + v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33(v34, v35, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v39 + 24);
  ((void (*)(uint64_t, uint64_t))v38)(v8, v9);
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      _OWORD v12[2] = v13[2];
      v12[3] = v13[3];
      uint64_t v19 = *(int *)(v14 + 28);
      uint64_t v20 = (char *)v12 + v19;
      uint64_t v21 = (char *)v13 + v19;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v40);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v12[2] = v13[2];
  v12[3] = v13[3];
  v38((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v40);
LABEL_7:
  uint64_t v24 = a3[10];
  uint64_t v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *(void *)uint64_t v25 = *(void *)v26;
      *((void *)v25 + 1) = *((void *)v26 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v25 + 2) = *((void *)v26 + 2);
      *((void *)v25 + 3) = *((void *)v26 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v25 + 4) = *((void *)v26 + 4);
      *((void *)v25 + 5) = *((void *)v26 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v25 + 6) = *((void *)v26 + 6);
      v38(&v25[*(int *)(v27 + 32)], &v26[*(int *)(v27 + 32)], v40);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v25, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v25, v26, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = *((void *)v26 + 1);
  *((void *)v25 + 2) = *((void *)v26 + 2);
  *((void *)v25 + 3) = *((void *)v26 + 3);
  *((void *)v25 + 4) = *((void *)v26 + 4);
  *((void *)v25 + 5) = *((void *)v26 + 5);
  *((void *)v25 + 6) = *((void *)v26 + 6);
  uint64_t v32 = *(int *)(v27 + 32);
  uint64_t v33 = &v25[v32];
  uint64_t v34 = &v26[v32];
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35(v33, v34, v40);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[9];
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = a3[10];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  uint64_t v20 = (_OWORD *)(a2 + v18);
  uint64_t v21 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    long long v24 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v24;
    v19[2] = v20[2];
    *((void *)v19 + 6) = *((void *)v20 + 6);
    v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v36 + 40);
  v35(v7, v8);
  uint64_t v10 = a3[9];
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  uint64_t v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      long long v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v31 = *((void *)v12 + 1);
  *(void *)uint64_t v11 = *(void *)v12;
  *((void *)v11 + 1) = v31;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  ((void (*)(char *, char *, uint64_t))v35)(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v37);
LABEL_7:
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v32 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v32;
      swift_bridgeObjectRelease();
      uint64_t v33 = v22[3];
      v21[2] = v22[2];
      uint64_t v21[3] = v33;
      swift_bridgeObjectRelease();
      uint64_t v34 = v22[5];
      v21[4] = v22[4];
      v21[5] = v34;
      swift_bridgeObjectRelease();
      v21[6] = v22[6];
      ((void (*)(char *, char *, uint64_t))v35)((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v37);
      return a1;
    }
    outlined destroy of AttachmentLedger_MMCSMetadata.BlobData((uint64_t)v21, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v21, v22, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  long long v28 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v28;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  v21[6] = v22[6];
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v37);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B0F4BCD0);
}

uint64_t sub_1B0F4BCD0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[8];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[10];
  return v15(v17, a2, v16);
}