void sub_213C75CB8(uint64_t a1, void *a2)
{
  CFUUIDBytes *v2;
  CFUUIDBytes *v3;
  uint64_t vars8;

  if (a2 != (void *)MEMORY[0x263EF8720])
  {
    v2 = sub_213C76CB0(a2, "uuid");
    if (v2)
    {
      v3 = v2;
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_26AA952C0, v2);
      CFRelease(v3);
    }
  }
}

uint64_t krb5_addlog_dest(_krb5_context *a1, const char **a2, char *a3)
{
  v3 = a3;
  uint64_t v76 = *MEMORY[0x263EF8340];
  int v58 = -1;
  int v59 = 0;
  char v57 = 0;
  v56 = a3;
  int v6 = sscanf(a3, "%d%c%d/", &v59, &v57, &v58);
  if (v6 == 2 && v57 == 47)
  {
    if (v59 < 0)
    {
      int v58 = -v59;
      int v59 = 0;
    }
    else
    {
      int v58 = v59;
    }
  }
  else if (!v6)
  {
    goto LABEL_10;
  }
  v7 = strchr(v3, 47);
  v56 = v7;
  if (!v7)
  {
    uint64_t v8 = 2314790656;
    v55 = v3;
    v9 = "failed to parse \"%s\"";
    goto LABEL_19;
  }
  v3 = v7 + 1;
  v56 = v7 + 1;
LABEL_10:
  if (!strcmp(v3, "STDERR")) {
    return sub_213C9BB58(a1, (uint64_t)a2, v59, v58, 0, 0, *MEMORY[0x263EF8348], 1, 0);
  }
  if (!strcmp(v3, "CONSOLE")) {
    return sub_213C9BB58(a1, (uint64_t)a2, v59, v58, "/dev/console", (uint64_t)"w", 0, 0, 0);
  }
  if (!strncmp(v3, "FILE", 4uLL))
  {
    int v11 = v3[4];
    if (v11 == 61 || v11 == 58)
    {
      v12 = strdup(v3 + 5);
      if (v12)
      {
        v13 = v12;
        if (v11 == 61)
        {
          int v14 = open(v12, 1545, 438);
          if (v14 < 0)
          {
            v53 = __error();
            uint64_t v8 = *v53;
            strerror(*v53);
            krb5_set_error_message(a1, v8, "open(%s) logile: %s");
          }
          else
          {
            int v15 = v14;
            sub_213CB79C8(v14);
            v16 = fdopen(v15, "a");
            if (v16)
            {
              uint64_t v17 = (uint64_t)v16;
              int v18 = 1;
              return sub_213C9BB58(a1, (uint64_t)a2, v59, v58, v13, (uint64_t)"a", v17, v18, 1);
            }
            uint64_t v8 = *__error();
            close(v15);
            strerror(v8);
            krb5_set_error_message(a1, v8, "fdopen(%s) logfile: %s");
          }
          free(v13);
          return v8;
        }
        uint64_t v17 = 0;
        int v18 = 0;
        return sub_213C9BB58(a1, (uint64_t)a2, v59, v58, v13, (uint64_t)"a", v17, v18, 1);
      }
LABEL_77:
      uint64_t v8 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory", v54);
      return v8;
    }
  }
  if (!strncmp(v3, "DEVICE", 6uLL))
  {
    int v19 = v3[6];
    if (v19 == 61 || v19 == 58)
    {
      int v21 = v58;
      int v20 = v59;
      v22 = strdup(v3 + 7);
      return sub_213C9BB58(a1, (uint64_t)a2, v20, v21, v22, (uint64_t)"w", 0, 0, 1);
    }
  }
  if (!strncmp(v3, "SYSLOG", 6uLL) && (v3[6] == 58 || !v3[6]))
  {
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    *(_OWORD *)facility = 0u;
    v56 = v3 + 6;
    if (v3[6]) {
      v56 = v3 + 7;
    }
    if (rk_strsep_copy((const char **)&v56, ":", &v68, 0x80uLL) != -1) {
      rk_strsep_copy((const char **)&v56, ":", facility, 0x80uLL);
    }
    if (!(_BYTE)v68) {
      __strlcpy_chk();
    }
    if (!facility[0]) {
      __strlcpy_chk();
    }
    int v25 = v58;
    int v24 = v59;
    v26 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    if (!v26) {
      goto LABEL_77;
    }
    v27 = v26;
    v28 = &off_2641E4150;
    v29 = "EMERG";
    do
    {
      if (!strcasecmp(v29, (const char *)&v68)) {
        break;
      }
      v30 = v28[2];
      v28 += 2;
      v29 = v30;
    }
    while (v30);
    if (*((_DWORD *)v28 + 2) == -1) {
      int v31 = 3;
    }
    else {
      int v31 = *((_DWORD *)v28 + 2);
    }
    LODWORD(v27->isa) = v31;
    v32 = &off_2641E4150;
    v33 = "EMERG";
    do
    {
      if (!strcasecmp(v33, facility)) {
        break;
      }
      v34 = v32[2];
      v32 += 2;
      v33 = v34;
    }
    while (v34);
    if (*((_DWORD *)v32 + 2) == -1) {
      int v35 = 32;
    }
    else {
      int v35 = *((_DWORD *)v32 + 2);
    }
    LODWORD(v27->isa) = v35 | v31;
    openlog(*a2, 9, v35);
    v36 = sub_213C9C26C;
    v37 = (void (__cdecl *)(void *))sub_213C9C29C;
    goto LABEL_76;
  }
  if (!strncmp(v3, "ASL", 3uLL) && (v3[3] == 58 || !v3[3]))
  {
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    *(_OWORD *)facility = 0u;
    v56 = v3 + 3;
    if (v3[3]) {
      v56 = v3 + 4;
    }
    if (rk_strsep_copy((const char **)&v56, ":", &v68, 0x80uLL) != -1) {
      rk_strsep_copy((const char **)&v56, ":", facility, 0x80uLL);
    }
    if (!(_BYTE)v68) {
      __strlcpy_chk();
    }
    if (!facility[0]) {
      __strlcpy_chk();
    }
    int v25 = v58;
    int v24 = v59;
    v38 = malloc_type_malloc(0x18uLL, 0x1020040EDCEB4C7uLL);
    if (!v38) {
      goto LABEL_77;
    }
    v27 = v38;
    v39 = &off_2641E4320;
    v40 = "EMERG";
    do
    {
      if (!strcasecmp(v40, (const char *)&v68)) {
        break;
      }
      v41 = v39[2];
      v39 += 2;
      v40 = v41;
    }
    while (v41);
    int v42 = *((_DWORD *)v39 + 2);
    if (v42 == -1) {
      int v42 = 3;
    }
    LODWORD(v27[2].isa) = v42;
    v43 = getprogname();
    v27->isa = asl_open(v43, facility, 0);
    v44 = asl_new(0);
    v27[1].isa = v44;
    asl_set(v44, "org.h5l.asl", "krb5");
    v36 = sub_213C9C2C4;
    v37 = (void (__cdecl *)(void *))sub_213C9C2FC;
LABEL_76:
    v45 = v37;
    v46 = a1;
    uint64_t v47 = (uint64_t)a2;
    int v48 = v24;
    int v49 = v25;
    os_log_t v50 = v27;
    return krb5_addlog_func(v46, v47, v48, v49, (uint64_t)v36, (uint64_t)v45, (uint64_t)v50);
  }
  if (!strncmp(v3, "OSLOG", 5uLL) && (v3[5] == 58 || !v3[5]))
  {
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    *(_OWORD *)facility = 0u;
    v56 = v3 + 5;
    if (v3[5]) {
      v56 = v3 + 6;
    }
    if (rk_strsep_copy((const char **)&v56, ":", &v68, 0x80uLL) != -1) {
      rk_strsep_copy((const char **)&v56, ":", facility, 0x80uLL);
    }
    if (!(_BYTE)v68) {
      __strlcpy_chk();
    }
    if (!facility[0]) {
      __strlcpy_chk();
    }
    int v52 = v58;
    int v51 = v59;
    os_log_t v50 = os_log_create("com.apple.Heimdal", facility);
    if (v68 ^ 0x75626564 | WORD2(v68) ^ 0x67) {
      v36 = sub_213C9C340;
    }
    else {
      v36 = sub_213C9C3DC;
    }
    v45 = j__os_release;
    v46 = a1;
    uint64_t v47 = (uint64_t)a2;
    int v48 = v51;
    int v49 = v52;
    return krb5_addlog_func(v46, v47, v48, v49, (uint64_t)v36, (uint64_t)v45, (uint64_t)v50);
  }
  uint64_t v8 = 2314790656;
  v55 = v3;
  v9 = "unknown log type: %s";
LABEL_19:
  krb5_set_error_message(a1, -1980176640, v9, v55);
  return v8;
}

CFMutableDictionaryRef heim_dict_create()
{
  return CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
}

void *initialize_asn1_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_2677FEAA0, 21, 1859794432);
}

CFMutableArrayRef HeimCredCopyQuery()
{
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  uint64_t v0 = sub_213C77CC0("query");
  if (!v0) {
    return 0;
  }
  v1 = (void *)v0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (Mutable)
  {
    xpc_object_t value = xpc_dictionary_get_value(v1, "items");
    if (value)
    {
      v4 = value;
      if (MEMORY[0x216695CE0]() == MEMORY[0x263EF86D8])
      {
        applier[0] = MEMORY[0x263EF8330];
        applier[1] = 0x40000000;
        applier[2] = sub_213C77D78;
        applier[3] = &unk_2641E3E68;
        applier[4] = Mutable;
        xpc_array_apply(v4, applier);
      }
    }
  }
  xpc_release(v1);
  return Mutable;
}

void krb5_clear_error_message(krb5_context a1)
{
  pthread_mutex_lock(*((pthread_mutex_t **)a1 + 41));
  v2 = (void *)*((void *)a1 + 35);
  if (v2) {
    free(v2);
  }
  *((_DWORD *)a1 + 72) = 0;
  *((void *)a1 + 35) = 0;
  v3 = (pthread_mutex_t *)*((void *)a1 + 41);

  pthread_mutex_unlock(v3);
}

void krb5_load_plugins(_krb5_context *a1, char *cStr, char **a3)
{
  CFStringRef v5 = heim_string_create(cStr);
  pthread_mutex_lock((pthread_mutex_t *)&unk_26AA93E18);
  CFDictionaryRef v6 = (const __CFDictionary *)qword_26AA95290;
  if (qword_26AA95290 || (CFDictionaryRef v6 = heim_dict_create(), (qword_26AA95290 = (uint64_t)v6) != 0))
  {
    CFDictionaryRef v7 = (const __CFDictionary *)heim_dict_copy_value(v6, v5);
    if (!v7)
    {
      CFMutableDictionaryRef v8 = heim_dict_create();
      if (!v8)
      {
        pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
        heim_release(v5);
        return;
      }
      CFDictionaryRef v7 = v8;
      heim_dict_set_value((__CFDictionary *)qword_26AA95290, v5, v8);
    }
    heim_release(v5);
    int v35 = 0;
    if (!csops())
    {
      v9 = *a3;
      if (*a3)
      {
        while (1)
        {
          __s = 0;
          if (!_krb5_expand_default_cc_name_0(a1, v9, (void **)&__s))
          {
            v10 = __s;
            size_t v11 = strlen(__s);
            if (v11)
            {
              v12 = __s - 1;
              do
              {
                if (v12[v11] != 47) {
                  break;
                }
                v12[v11--] = 0;
              }
              while (v11);
              v10 = __s;
            }
            v13 = opendir(v10);
            if (v13) {
              break;
            }
          }
LABEL_46:
          if (__s) {
            free(__s);
          }
          v32 = a3[1];
          ++a3;
          v9 = v32;
          if (!v32) {
            goto LABEL_49;
          }
        }
        int v14 = v13;
        sub_213C76C88(v13);
        while (1)
        {
          do
          {
            int v15 = readdir(v14);
            if (!v15)
            {
LABEL_45:
              closedir(v14);
              goto LABEL_46;
            }
            d_name = v15->d_name;
            int v16 = v15->d_name[0];
            __path = 0;
          }
          while (v16 == 46 && (!v15->d_name[1] || v15->d_name[1] == 46 && !v15->d_name[2]));
          size_t v18 = strlen(v15->d_name);
          if (v18 < 8) {
            break;
          }
          int v19 = v18 - 7;
          if (strcmp(&d_name[v18 - 7], ".bundle")) {
            break;
          }
          int v21 = asprintf(&__path, "%s/%s/%.*s", __s, d_name, v19, d_name);
          if (!v21)
          {
            int v20 = __path;
            goto LABEL_24;
          }
LABEL_28:
          v22 = __path;
          if (!__path) {
            goto LABEL_34;
          }
          if ((v35 & 0x2810) == 0x800)
          {
            if (sub_213CA4854((uint64_t)a1, (uint64_t)__path))
            {
              v22 = __path;
              goto LABEL_32;
            }
          }
          else
          {
LABEL_32:
            if (v21 < 0 || !v22) {
              goto LABEL_34;
            }
LABEL_35:
            if (v21 < 0 || !v22) {
              goto LABEL_45;
            }
            CFStringRef v23 = heim_string_create(d_name);
            if (!v23)
            {
              free(__path);
              goto LABEL_45;
            }
            CFStringRef v24 = v23;
            v30 = heim_dict_copy_value(v7, v23);
            if (!v30)
            {
              v30 = (void *)heim_uniq_alloc(0x38uLL, (uint64_t)"krb5-plugin", (uint64_t)sub_213CA4A18, v25, v26, v27, v28, v29);
              if (v30)
              {
                int v31 = dlopen(__path, 5);
                v30[5] = v31;
                if (v31)
                {
                  v30[4] = heim_retain(v24);
                  v30[6] = heim_dict_create();
                  heim_dict_set_value(v7, v24, v30);
                }
              }
            }
            heim_release(v24);
            heim_release(v30);
            free(__path);
          }
        }
        int v20 = 0;
LABEL_24:
        if (access(v20, 1))
        {
          __error();
          free(__path);
          __path = 0;
LABEL_34:
          int v21 = asprintf(&__path, "%s/%s", __s, d_name);
          v22 = __path;
          goto LABEL_35;
        }
        int v21 = 0;
        goto LABEL_28;
      }
LABEL_49:
      heim_release(v7);
      pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
    }
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
  }
}

void hx509_context_free(uint64_t *a1)
{
  hx509_certs_free((const void **)(*a1 + 48));
  hx509_clear_error_string(*a1);
  uint64_t v2 = *a1;
  v3 = *(void **)*a1;
  if (v3)
  {
    free(v3);
    *(void *)*a1 = 0;
    uint64_t v2 = *a1;
  }
  *(_DWORD *)(v2 + 8) = 0;
  sub_213CBCA3C(*(void **)(v2 + 32));
  uint64_t v4 = *a1;
  *(void *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  free((void *)*a1);
  *a1 = 0;
}

void *sub_213C76B00(uint64_t a1, char **a2)
{
  result = sub_213CC862C(a1, *a2);
  if (!result)
  {
    result = malloc_type_realloc(*(void **)a1, 8 * *(int *)(a1 + 8) + 8, 0x2004093837F09uLL);
    if (result)
    {
      uint64_t v5 = *(int *)(a1 + 8);
      result[v5] = a2;
      *(void *)a1 = result;
      *(_DWORD *)(a1 + 8) = v5 + 1;
    }
  }
  return result;
}

uint64_t krb5_prepend_config_files(const char *a1, char **a2, void **a3)
{
  int v16 = 0;
  uint64_t v17 = a1;
  unsigned int v15 = 0;
  while (1)
  {
    size_t v18 = v17;
    uint64_t v5 = rk_strsep_copy(&v18, ":", 0, 0);
    if (v5 == -1) {
      break;
    }
    size_t v6 = v5 + 1;
    CFDictionaryRef v7 = (char *)malloc_type_malloc(v5 + 1, 0x76F22E08uLL);
    if (!v7)
    {
      krb5_free_config_files((void **)v16);
      return 12;
    }
    CFMutableDictionaryRef v8 = v7;
    rk_strsep_copy(&v17, ":", v7, v6);
    uint64_t v9 = sub_213C803D0(&v16, &v15, v8);
    free(v8);
    if (v9) {
      goto LABEL_5;
    }
  }
  if (a2)
  {
    v10 = *a2;
    if (*a2)
    {
      size_t v11 = a2 + 1;
      while (1)
      {
        uint64_t v12 = sub_213C803D0(&v16, &v15, v10);
        if (v12) {
          break;
        }
        v13 = *v11++;
        v10 = v13;
        if (!v13) {
          goto LABEL_11;
        }
      }
      uint64_t v9 = v12;
LABEL_5:
      krb5_free_config_files((void **)v16);
      return v9;
    }
  }
LABEL_11:
  uint64_t v9 = 0;
  *a3 = v16;
  return v9;
}

uint64_t sub_213C76C88(DIR *a1)
{
  int v1 = dirfd(a1);

  return sub_213CB79C8(v1);
}

CFUUIDBytes *sub_213C76CB0(void *a1, const char *a2)
{
  result = (CFUUIDBytes *)xpc_dictionary_get_uuid(a1, a2);
  if (result)
  {
    CFUUIDBytes v3 = *result;
    return (CFUUIDBytes *)CFUUIDCreateFromUUIDBytes(0, v3);
  }
  return result;
}

const void *sub_213C76CEC(void *a1, const char *a2, uint64_t a3)
{
  if (!xpc_dictionary_get_value(a1, a2)) {
    return 0;
  }
  uint64_t v4 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  uint64_t v5 = v4;
  if (v4 && CFGetTypeID(v4) != a3)
  {
    CFRelease(v5);
    return 0;
  }
  return v5;
}

void sub_213C76D40(void *a1, const char *a2, CFUUIDRef uuid)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  CFUUIDBytes uuida = CFUUIDGetUUIDBytes(uuid);
  xpc_dictionary_set_uuid(a1, a2, &uuida.byte0);
}

void sub_213C76DB4()
{
  if (qword_26AA95270 != -1) {
    dispatch_once(&qword_26AA95270, &unk_26C4C8BD8);
  }
}

CFMutableDictionaryRef sub_213C76DDC()
{
  qword_26AA952B8 = _CFRuntimeRegisterClass();
  qword_26AA952B0 = (uint64_t)dispatch_queue_create("HeimCred", 0);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  qword_26AA952C0 = (uint64_t)result;
  return result;
}

void sub_213C76E44(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  CFUUIDBytes v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
}

__CFString *sub_213C76E84()
{
  return @"format";
}

CFStringRef sub_213C76E90(uint64_t a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 24);
  if (!v2) {
    return CFStringCreateWithFormat(0, 0, @"HeimCred<%@>", *(void *)(a1 + 16));
  }
  Value = CFDictionaryGetValue(v2, @"kHEIMAttrClientName");
  uint64_t v4 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrServerName");
  uint64_t v5 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrParentCredential");
  CFBooleanRef v6 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrLeadCredential");
  CFDictionaryRef v7 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrAltDSID");
  CFMutableDictionaryRef v8 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrUserID");
  uint64_t v9 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrASID");
  v10 = "no";
  if (v6 && CFBooleanGetValue(v6)) {
    v10 = "yes";
  }
  size_t v11 = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), @"kHEIMAttrBundleIdentifierACL");
  uint64_t v12 = &stru_26C4CB388;
  if (v11) {
    v13 = v11;
  }
  else {
    v13 = &stru_26C4CB388;
  }
  if (v7) {
    int v14 = v7;
  }
  else {
    int v14 = &stru_26C4CB388;
  }
  if (v8) {
    unsigned int v15 = v8;
  }
  else {
    unsigned int v15 = &stru_26C4CB388;
  }
  if (v9) {
    uint64_t v12 = v9;
  }
  return CFStringCreateWithFormat(0, 0, @"HeimCred<%@ group: %@ parent: %@ client: %@ server: %@ lead: %s ACL: %@, altDSID: %@, Uid: %@, asid: %@>", *(void *)(a1 + 16), v6, v5, Value, v4, v10, v13, v14, v15, v12);
}

uint64_t sub_213C77004(const void *a1)
{
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    CFRetain(a1);
    *(void *)(Instance + 16) = a1;
  }
  return Instance;
}

void HeimCredSetImpersonateBundle(const __CFString *a1)
{
  if (qword_26AA952A8)
  {
    free((void *)qword_26AA952A8);
    qword_26AA952A8 = 0;
  }
  if (a1) {
    qword_26AA952A8 = (uint64_t)sub_213C77098(a1);
  }
}

char *sub_213C77098(const __CFString *a1)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return strdup(CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    CFBooleanRef v6 = malloc_type_malloc(v5, 0xBDB9818AuLL);
    if (v6 && !CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
    {
      free(v6);
      return 0;
    }
    return (char *)v6;
  }
}

uint64_t HeimCredGetImpersonateBundle()
{
  return qword_26AA952A8;
}

uint64_t HeimCredSetImpersonateAuditToken(uint64_t result)
{
  qword_267800FA0 = result;
  return result;
}

uint64_t HeimCredGetImpersonateAuditToken()
{
  return qword_267800FA0;
}

uint64_t HeimCredCreate(uint64_t a1, CFErrorRef *a2)
{
  if (a2) {
    *a2 = 0;
  }
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  uint64_t v3 = _CFXPCCreateXPCObjectFromCFObject();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (void *)v3;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (!v5) {
    heim_abort("xpc_dictionary_create:request != NULL", v6, v7, v8, v9, v10, v11, v12, v30);
  }
  v13 = v5;
  xpc_dictionary_set_string(v5, "command", "create");
  xpc_dictionary_set_value(v13, "attributes", v4);
  xpc_release(v4);
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v13, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v14 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v13);
  xpc_release(v13);
  if (!v14)
  {
    CFStringRef v21 = @"Server didn't return any data";
    v22 = a2;
    unsigned int v23 = 564608;
LABEL_16:
    sub_213C773AC(v22, v23, v21, v15, v16, v17, v18, v19, v30);
    return 0;
  }
  if (MEMORY[0x216695CE0](v14) == MEMORY[0x263EF8720])
  {
    unsigned int v23 = 564609;
    char v30 = (char)v14;
    CFStringRef v21 = @"Server returned an error: %@";
    v22 = a2;
    goto LABEL_16;
  }
  if (MEMORY[0x216695CE0](v14) == MEMORY[0x263EF8708])
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFDictionaryRef v26 = (const __CFDictionary *)sub_213C76CEC(v14, "attributes", TypeID);
    if (v26)
    {
      CFDictionaryRef v27 = v26;
      Value = CFDictionaryGetValue(v26, @"kHEIMAttrUUID");
      if (Value)
      {
        uint64_t v29 = sub_213C77004(Value);
        uint64_t v20 = v29;
        if (v29)
        {
          *(void *)(v29 + 24) = v27;
          block[0] = MEMORY[0x263EF8330];
          block[1] = 0x40000000;
          block[2] = sub_213C78DE0;
          block[3] = &unk_2641E3F38;
          block[4] = v29;
          dispatch_sync((dispatch_queue_t)qword_26AA952B0, block);
        }
        else
        {
          CFRelease(v27);
        }
        goto LABEL_13;
      }
      CFRelease(v27);
    }
  }
  uint64_t v20 = 0;
LABEL_13:
  xpc_release(v14);
  return v20;
}

void sub_213C773AC(CFErrorRef *a1, unsigned int a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  userInfoKeys[2] = *(void **)MEMORY[0x263EF8340];
  userInfoKeys[0] = *(void **)MEMORY[0x263EFFC48];
  userInfoKeys[1] = @"CommonErrorCode";
  userInfoValues[1] = *(void **)MEMORY[0x263EFFB40];
  if (a1)
  {
    userInfoValues[0] = (void *)CFStringCreateWithFormatAndArguments(0, 0, a3, &a9);
    *a1 = CFErrorCreateWithUserInfoKeysAndValues(0, @"org.h5l.HeimdalCredential", a2, (const void *const *)userInfoKeys, (const void *const *)userInfoValues, 2);
    if (userInfoValues[0]) {
      CFRelease(userInfoValues[0]);
    }
  }
}

uint64_t HeimCredGetUUID(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t HeimCredGetAttributes(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t HeimCredCopyFromUUID(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  v4[2] = sub_213C7756C;
  v4[3] = &unk_2641E3DD8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_26AA952B0, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_213C7756C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue((CFDictionaryRef)qword_26AA952C0, *(const void **)(a1 + 40));
  uint64_t v2 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    CFRetain(v2);
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_213C77004(*(const void **)(a1 + 40));
    uint64_t v3 = (__CFDictionary *)qword_26AA952C0;
    uint64_t v4 = *(const void **)(a1 + 40);
    uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    CFDictionarySetValue(v3, v4, v5);
  }
}

uint64_t HeimCredSetAttribute(uint64_t a1, void *a2, void *a3, CFErrorRef *a4)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  values = a3;
  keys[0] = a2;
  CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v6) {
    return 0;
  }
  CFDictionaryRef v7 = v6;
  uint64_t v8 = HeimCredSetAttributes(a1, (uint64_t)v6, a4);
  CFRelease(v7);
  return v8;
}

uint64_t HeimCredSetAttributes(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (qword_26AA95268 == -1)
  {
    if (!a1) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
    if (!a1) {
      return 0;
    }
  }
  uint64_t result = _CFXPCCreateXPCObjectFromCFObject();
  if (!result) {
    return result;
  }
  CFDictionaryRef v6 = (void *)result;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v7, "command", "setattributes");
  sub_213C76D40(v7, "uuid", *(CFUUIDRef *)(a1 + 16));
  xpc_dictionary_set_value(v7, "attributes", v6);
  xpc_release(v6);
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v8 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v7);
  xpc_release(v7);
  if (v8)
  {
    if (MEMORY[0x216695CE0](v8) != MEMORY[0x263EF8720])
    {
      v14[0] = MEMORY[0x263EF8330];
      v14[1] = 0x40000000;
      v14[2] = sub_213C7787C;
      v14[3] = &unk_2641E3DF8;
      v14[4] = a1;
      v14[5] = v8;
      dispatch_sync((dispatch_queue_t)qword_26AA952B0, v14);
      xpc_release(v8);
      return 1;
    }
  }
  else
  {
    sub_213C773AC(a3, 0x89D80u, @"Server didn't return any data", v9, v10, v11, v12, v13, v14[0]);
  }
  return 0;
}

const void *sub_213C7787C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(*(void *)(a1 + 32) + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(*(void *)(a1 + 32) + 24) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 40);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = sub_213C76CEC(v3, "attributes", TypeID);
  *(void *)(*(void *)(a1 + 32) + 24) = result;
  return result;
}

const void *HeimCredCopyAttribute(uint64_t a1, const void *a2)
{
  uint64_t v13 = 0;
  xpc_object_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 0;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = sub_213C77A0C;
  v12[3] = &unk_2641E3E20;
  v12[4] = &v13;
  v12[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_26AA952B0, v12);
  CFDictionaryRef v5 = (const __CFDictionary *)v14[3];
  if (v5)
  {
    int v6 = CFDictionaryContainsKey(v5, a2);
    xpc_object_t v7 = (const void *)v14[3];
    if (v6) {
      goto LABEL_6;
    }
    if (v7)
    {
      CFRelease(v7);
      v14[3] = 0;
    }
  }
  xpc_object_t v7 = (const void *)HeimCredCopyAttributes(a1, v4, 0);
  v14[3] = (uint64_t)v7;
  if (!v7)
  {
    uint64_t v9 = 0;
    goto LABEL_11;
  }
LABEL_6:
  Value = CFDictionaryGetValue((CFDictionaryRef)v7, a2);
  uint64_t v9 = Value;
  if (Value) {
    CFRetain(Value);
  }
  uint64_t v10 = (const void *)v14[3];
  if (v10)
  {
    CFRelease(v10);
    v14[3] = 0;
  }
LABEL_11:
  _Block_object_dispose(&v13, 8);
  return v9;
}

CFTypeRef sub_213C77A0C(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1 + 40) + 24);
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 24);
  }
  else
  {
    uint64_t v3 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  return result;
}

uint64_t HeimCredCopyAttributes(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x2000000000;
  uint64_t v22 = 0;
  if (a3) {
    *a3 = 0;
  }
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v5, "command", "fetch");
  sub_213C76D40(v5, "uuid", *(CFUUIDRef *)(a1 + 16));
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v5, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v6 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v5);
  xpc_release(v5);
  if (!v6)
  {
    CFStringRef v13 = @"Server didn't return any data";
    xpc_object_t v14 = a3;
    unsigned int v15 = 564608;
LABEL_12:
    sub_213C773AC(v14, v15, v13, v7, v8, v9, v10, v11, v17);
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  if (MEMORY[0x216695CE0](v6) == MEMORY[0x263EF8720])
  {
    unsigned int v15 = 564609;
    char v17 = (char)v6;
    CFStringRef v13 = @"Server returned an error: %@";
    xpc_object_t v14 = a3;
    goto LABEL_12;
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_213C77C2C;
  block[3] = &unk_2641E3E48;
  block[4] = &v19;
  void block[5] = a1;
  block[6] = v6;
  dispatch_sync((dispatch_queue_t)qword_26AA952B0, block);
  xpc_release(v6);
  uint64_t v12 = v20[3];
LABEL_13:
  _Block_object_dispose(&v19, 8);
  return v12;
}

CFTypeRef sub_213C77C2C(void *a1)
{
  uint64_t v2 = *(const void **)(a1[5] + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1[5] + 24) = 0;
  }
  uint64_t v3 = (void *)a1[6];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  xpc_object_t v5 = sub_213C76CEC(v3, "attributes", TypeID);
  *(void *)(a1[5] + 24) = v5;
  *(void *)(*(void *)(a1[4] + 8) + 24) = v5;
  CFTypeRef result = *(CFTypeRef *)(*(void *)(a1[4] + 8) + 24);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t sub_213C77CC0(const char *a1)
{
  uint64_t result = _CFXPCCreateXPCObjectFromCFObject();
  if (result)
  {
    uint64_t v3 = (void *)result;
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v4, "command", a1);
    xpc_dictionary_set_value(v4, "query", v3);
    xpc_release(v3);
    if (qword_26AA952A8) {
      xpc_dictionary_set_string(v4, "impersonate", (const char *)qword_26AA952A8);
    }
    xpc_object_t v5 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v4);
    xpc_release(v4);
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_213C77D78(uint64_t a1)
{
  uint64_t v2 = (const void *)_CFXPCCreateCFObjectFromXPCObject();
  if (v2)
  {
    uint64_t v3 = v2;
    xpc_object_t v4 = (const void *)sub_213C77004(v2);
    CFRelease(v3);
    if (v4)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v4);
      CFRelease(v4);
    }
  }
  return 1;
}

BOOL HeimCredDeleteQuery(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = 0;
  }
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  uint64_t v2 = (void *)sub_213C77CC0("delete");
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  BOOL v4 = xpc_dictionary_get_value(v2, "error") == 0;
  xpc_release(v3);
  return v4;
}

void HeimCredDeleteByUUID(void *a1)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  values = a1;
  keys[0] = @"kHEIMAttrUUID";
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v3 = (void *)sub_213C77CC0("delete");
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    xpc_release(v3);
  }
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  v4[2] = sub_213C77FB0;
  v4[3] = &unk_2641E3E88;
  v4[4] = a1;
  dispatch_sync((dispatch_queue_t)qword_26AA952B0, v4);
}

void sub_213C77FB0(uint64_t a1)
{
}

void HeimCredDelete(uint64_t a1)
{
}

void HeimCredRetainTransient(uint64_t a1)
{
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v2, "command", "retain-transient");
  sub_213C76D40(v2, "uuid", *(CFUUIDRef *)(a1 + 16));
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v2, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v3 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v2);
  xpc_release(v2);

  xpc_release(v3);
}

void HeimCredReleaseTransient(uint64_t a1)
{
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v2, "command", "release-transient");
  sub_213C76D40(v2, "uuid", *(CFUUIDRef *)(a1 + 16));
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v2, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v3 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v2);
  xpc_release(v2);

  xpc_release(v3);
}

BOOL HeimCredMove(const __CFUUID *a1, const __CFUUID *a2)
{
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v4, "command", "move");
  sub_213C76D40(v4, "from", a1);
  sub_213C76D40(v4, "to", a2);
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v4, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v5 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v4);
  BOOL v6 = xpc_dictionary_get_value(v5, "error") == 0;
  xpc_release(v4);
  xpc_release(v5);
  return v6;
}

uint64_t HeimCredCopyStatus(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v2, "command", "status");
  if (a1)
  {
    xpc_object_t v3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (!v3)
    {
      xpc_release(v2);
      return 0;
    }
    xpc_object_t v4 = v3;
    xpc_dictionary_set_value(v2, "mech", v3);
    xpc_release(v4);
  }
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v2, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v5 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v2);
  xpc_release(v2);
  if (v5)
  {
    uint64_t v6 = _CFXPCCreateCFObjectFromXPCObject();
    xpc_release(v5);
    return v6;
  }
  return 0;
}

const void *HeimCredCopyDefaultCredential(const __CFString *a1, CFErrorRef *a2)
{
  if (qword_26AA95268 == -1)
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  if (a2) {
LABEL_3:
  }
    *a2 = 0;
LABEL_4:
  xpc_object_t v4 = sub_213C77098(a1);
  if (v4)
  {
    xpc_object_t v5 = v4;
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v6, "command", "default");
    xpc_dictionary_set_string(v6, "mech", v5);
    free(v5);
    if (qword_26AA952A8) {
      xpc_dictionary_set_string(v6, "impersonate", (const char *)qword_26AA952A8);
    }
    xpc_object_t v7 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v6);
    xpc_release(v6);
    if (v7)
    {
      if (MEMORY[0x216695CE0](v7) != MEMORY[0x263EF8720])
      {
        CFTypeID v13 = CFUUIDGetTypeID();
        xpc_object_t v14 = sub_213C76CEC(v7, "default", v13);
        xpc_release(v7);
        return v14;
      }
      unsigned int v18 = 564609;
      char v19 = (char)v7;
      CFStringRef v16 = @"Server returned an error: %@";
      char v17 = a2;
    }
    else
    {
      CFStringRef v16 = @"Server didn't return any data";
      char v17 = a2;
      unsigned int v18 = 564608;
    }
    sub_213C773AC(v17, v18, v16, v8, v9, v10, v11, v12, v19);
  }
  return 0;
}

uint64_t HeimCredDoAuth(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  uint64_t v24 = 0;
  if (qword_26AA95268 == -1)
  {
    if (!a1)
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
    if (!a1) {
      goto LABEL_14;
    }
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t v5 = _CFXPCCreateXPCObjectFromCFObject();
  if (!v5) {
    goto LABEL_14;
  }
  xpc_object_t v6 = (void *)v5;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v7, "command", "doauth");
  sub_213C76D40(v7, "uuid", *(CFUUIDRef *)(a1 + 16));
  xpc_dictionary_set_value(v7, "attributes", v6);
  xpc_release(v6);
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v8 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v7);
  xpc_release(v7);
  if (!v8)
  {
    CFStringRef v15 = @"Server didn't return any data";
    CFStringRef v16 = a3;
    unsigned int v17 = 564608;
LABEL_13:
    sub_213C773AC(v16, v17, v15, v9, v10, v11, v12, v13, v19);
    goto LABEL_14;
  }
  if (MEMORY[0x216695CE0](v8) == MEMORY[0x263EF8720])
  {
    unsigned int v17 = 564609;
    char v19 = (char)v8;
    CFStringRef v15 = @"Server returned an error: %@";
    CFStringRef v16 = a3;
    goto LABEL_13;
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_213C786FC;
  block[3] = &unk_2641E3EB0;
  block[4] = &v21;
  void block[5] = v8;
  dispatch_sync((dispatch_queue_t)qword_26AA952B0, block);
  xpc_release(v8);
  uint64_t v14 = v22[3];
LABEL_15:
  _Block_object_dispose(&v21, 8);
  return v14;
}

const void *sub_213C786FC(uint64_t a1)
{
  xpc_object_t v2 = *(void **)(a1 + 40);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  uint64_t result = sub_213C76CEC(v2, "attributes", TypeID);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL HeimCredDeleteAll(void *a1, void *a2)
{
  keys[2] = *(void **)MEMORY[0x263EF8340];
  if (a2) {
    *a2 = 0;
  }
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  keys[0] = @"kHEIMAttrAltDSID";
  keys[1] = @"kHEIMObjectType";
  values[0] = a1;
  values[1] = @"kHEIMObjectAny";
  CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  xpc_object_t v3 = (void *)sub_213C77CC0("delete-all");
  if (!v3) {
    return 0;
  }
  xpc_object_t v4 = v3;
  BOOL v5 = xpc_dictionary_get_value(v3, "error") == 0;
  xpc_release(v4);
  return v5;
}

BOOL HeimCredAddNTLMChallenge(UInt8 *bytes)
{
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  CFDataRef v2 = CFDataCreate(0, bytes, 8);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v3, "command", "add-challenge");
  BytePtr = CFDataGetBytePtr(v2);
  size_t Length = CFDataGetLength(v2);
  xpc_dictionary_set_data(v3, "challenge", BytePtr, Length);
  if (v2) {
    CFRelease(v2);
  }
  xpc_object_t v6 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v3);
  xpc_release(v3);
  if (!v6) {
    return 0;
  }
  BOOL v7 = xpc_dictionary_get_value(v6, "error") == 0;
  xpc_release(v6);
  return v7;
}

BOOL HeimCredCheckNTLMChallenge(UInt8 *bytes)
{
  if (qword_26AA95268 != -1) {
    dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  }
  CFDataRef v2 = CFDataCreate(0, bytes, 8);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v3, "command", "check-challenge");
  BytePtr = CFDataGetBytePtr(v2);
  size_t Length = CFDataGetLength(v2);
  xpc_dictionary_set_data(v3, "challenge", BytePtr, Length);
  xpc_object_t v6 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v3);
  xpc_release(v3);
  if (!v6) {
    return 1;
  }
  xpc_dictionary_get_value(v6, "error");
  xpc_object_t value = xpc_dictionary_get_value(v6, "challenge-result");
  if (value) {
    BOOL v8 = xpc_BOOL_get_value(value);
  }
  else {
    BOOL v8 = 1;
  }
  xpc_release(v6);
  return v8;
}

uint64_t HeimCredDoSCRAM(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  uint64_t v24 = 0;
  if (qword_26AA95268 == -1)
  {
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_26AA95268, &unk_26C4C8CB8);
  if (a3) {
LABEL_3:
  }
    *a3 = 0;
LABEL_4:
  uint64_t v5 = _CFXPCCreateXPCObjectFromCFObject();
  if (!v5)
  {
LABEL_13:
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  xpc_object_t v6 = (void *)v5;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v7, "command", "doscram");
  sub_213C76D40(v7, "uuid", *(CFUUIDRef *)(a1 + 16));
  xpc_dictionary_set_value(v7, "attributes", v6);
  xpc_release(v6);
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_object_t v8 = xpc_connection_send_message_with_reply_sync((xpc_connection_t)qword_26AA952C8, v7);
  xpc_release(v7);
  if (!v8)
  {
    CFStringRef v15 = @"Server didn't return any data";
    CFStringRef v16 = a3;
    unsigned int v17 = 564608;
LABEL_12:
    sub_213C773AC(v16, v17, v15, v9, v10, v11, v12, v13, v19);
    goto LABEL_13;
  }
  if (MEMORY[0x216695CE0](v8) == MEMORY[0x263EF8720])
  {
    unsigned int v17 = 564609;
    char v19 = (char)v8;
    CFStringRef v15 = @"Server returned an error: %@";
    CFStringRef v16 = a3;
    goto LABEL_12;
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = sub_213C78C8C;
  block[3] = &unk_2641E3ED8;
  block[4] = &v21;
  void block[5] = v8;
  dispatch_sync((dispatch_queue_t)qword_26AA952B0, block);
  xpc_release(v8);
  uint64_t v14 = v22[3];
LABEL_14:
  _Block_object_dispose(&v21, 8);
  return v14;
}

CFTypeRef sub_213C78C8C(uint64_t a1)
{
  CFDataRef v2 = *(void **)(a1 + 40);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_213C76CEC(v2, "attributes", TypeID);
  CFTypeRef result = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void sub_213C78D00()
{
  sub_213C76DB4();
  qword_26AA952C8 = (uint64_t)xpc_connection_create_mach_service("com.apple.GSSCred", (dispatch_queue_t)qword_26AA952B0, 2uLL);
  xpc_connection_set_event_handler((xpc_connection_t)qword_26AA952C8, &unk_26C4C8CD8);
  xpc_connection_resume((xpc_connection_t)qword_26AA952C8);
  if (!qword_26AA952C8) {
    heim_abort("no connection to XPCService:HeimCredCTX.conn != NULL", v0, v1, v2, v3, v4, v5, v6, v8);
  }
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v7, "command", "wakeup");
  xpc_dictionary_set_int64(v7, "version", 0);
  if (qword_26AA952A8) {
    xpc_dictionary_set_string(v7, "impersonate", (const char *)qword_26AA952A8);
  }
  xpc_connection_send_message((xpc_connection_t)qword_26AA952C8, v7);

  xpc_release(v7);
}

void sub_213C78DE0(uint64_t a1)
{
}

uint64_t krb5_add_et_list(uint64_t a1, void (*a2)(uint64_t))
{
  return 0;
}

uint64_t krb5_sockaddr2address(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = &dword_26C4C94D0;
  while (*v3 != *(unsigned __int8 *)(a2 + 1))
  {
    v3 += 32;
    if (v3 >= (int *)&off_26C4C9650)
    {
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", *(unsigned __int8 *)(a2 + 1));
      return 2529639126;
    }
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v3 + 2);

  return v5(a2, a3);
}

uint64_t krb5_sockaddr2port(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = &dword_26C4C94D0;
  while (*v3 != *(unsigned __int8 *)(a2 + 1))
  {
    v3 += 32;
    if (v3 >= (int *)&off_26C4C9650)
    {
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", *(unsigned __int8 *)(a2 + 1));
      return 2529639126;
    }
  }
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v3 + 3);

  return v5(a2, a3);
}

uint64_t krb5_addr2sockaddr(_krb5_context *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = &dword_26C4C94D0;
  while (v5[1] != *a2)
  {
    v5 += 32;
    if (v5 >= (int *)&off_26C4C9650)
    {
      uint64_t v6 = 2529639126;
      krb5_set_error_message(a1, -1765328170, "Address type %d not supported");
      return v6;
    }
  }
  xpc_object_t v7 = (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))*((void *)v5 + 4);
  if (v7)
  {
    v7(a2, a3, a4, a5);
    return 0;
  }
  else
  {
    uint64_t v6 = 2529639126;
    krb5_set_error_message(a1, -1765328170, "Can't convert address type %d to sockaddr");
  }
  return v6;
}

unint64_t krb5_max_sockaddr_size()
{
  unint64_t result = qword_267800FA8;
  if (!qword_267800FA8)
  {
    uint64_t v1 = &dword_26C4C94D0;
    do
    {
      if (result <= *((void *)v1 + 1)) {
        unint64_t result = *((void *)v1 + 1);
      }
      v1 += 32;
    }
    while (v1 < (int *)&off_26C4C9650);
    qword_267800FA8 = result;
  }
  return result;
}

uint64_t krb5_sockaddr_uninteresting(uint64_t a1)
{
  uint64_t v1 = dword_26C4C94D0;
  while (*v1 != *(unsigned __int8 *)(a1 + 1))
  {
    v1 += 32;
    if (v1 >= (int *)&off_26C4C9650) {
      return 1;
    }
  }
  uint64_t v2 = (uint64_t (*)(void))*((void *)v1 + 7);
  if (v2) {
    return v2();
  }
  return 1;
}

uint64_t sub_213C79070(uint64_t a1)
{
  uint64_t v1 = dword_26C4C94D0;
  while (*v1 != *(unsigned __int8 *)(a1 + 1))
  {
    v1 += 32;
    if (v1 >= (int *)&off_26C4C9650) {
      return 1;
    }
  }
  uint64_t v2 = (uint64_t (*)(void))*((void *)v1 + 8);
  if (v2) {
    return v2();
  }
  return 1;
}

uint64_t krb5_h_addr2sockaddr(_krb5_context *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = &dword_26C4C94D0;
  while (*v6 != a2)
  {
    v6 += 32;
    if (v6 >= (int *)&off_26C4C9650)
    {
      uint64_t v7 = 2529639126;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2);
      return v7;
    }
  }
  (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v6 + 5))(a3, a4, a5, a6);
  return 0;
}

uint64_t krb5_h_addr2addr(_krb5_context *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = &dword_26C4C94D0;
  while (*v4 != a2)
  {
    v4 += 32;
    if (v4 >= (int *)&off_26C4C9650)
    {
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2);
      return 2529639126;
    }
  }
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v4 + 6);

  return v6(a3, a4);
}

uint64_t krb5_anyaddr(_krb5_context *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = dword_26C4C94D0;
  while (*v5 != a2)
  {
    v5 += 32;
    if (v5 >= (int *)&off_26C4C9650)
    {
      uint64_t v6 = 2529639126;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2);
      return v6;
    }
  }
  (*((void (**)(uint64_t, uint64_t, uint64_t))v5 + 9))(a3, a4, a5);
  return 0;
}

uint64_t krb5_print_address(uint64_t a1, char *__str, size_t __size, void *a4)
{
  char v8 = &dword_26C4C94D0;
  while (v8[1] != *(_DWORD *)a1)
  {
    v8 += 32;
    if (v8 >= (int *)&off_26C4C9650) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = (uint64_t (*)(uint64_t, char *, size_t))*((void *)v8 + 10);
  if (!v9)
  {
LABEL_9:
    unsigned int v12 = snprintf(__str, __size, "TYPE_%d:", *(_DWORD *)a1);
    if ((v12 & 0x80000000) == 0 && __size > v12)
    {
      uint64_t v13 = &__str[v12];
      if (!*(void *)(a1 + 8))
      {
LABEL_16:
        if (a4)
        {
          uint64_t v11 = v13 - __str;
          goto LABEL_18;
        }
        return 0;
      }
      uint64_t v14 = 0;
      size_t v15 = __size - v12;
      while (1)
      {
        unsigned int v16 = snprintf(v13, v15, "%02x", *(char *)(*(void *)(a1 + 16) + v14));
        if ((v16 & 0x80000000) != 0 || v15 <= v16) {
          break;
        }
        v15 -= v16;
        v13 += v16;
        if ((unint64_t)++v14 >= *(void *)(a1 + 8)) {
          goto LABEL_16;
        }
      }
    }
    return 22;
  }
  unsigned int v10 = v9(a1, __str, __size);
  if ((v10 & 0x80000000) != 0) {
    return 22;
  }
  if (a4)
  {
    uint64_t v11 = v10;
LABEL_18:
    uint64_t result = 0;
    *a4 = v11;
    return result;
  }
  return 0;
}

uint64_t krb5_parse_address(_krb5_context *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v23 = 0;
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  do
  {
    if (v6 != 64)
    {
      uint64_t v7 = *(unsigned int (**)(_krb5_context *, char *, long long *))&dword_26C4C94D0[v6 + 22];
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      if (!v7(a1, a2, &v21))
      {
        *(_DWORD *)a3 = 1;
        unsigned int v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
        *(void *)(a3 + 8) = v12;
        if (v12)
        {
          uint64_t v11 = 0;
          long long v13 = v21;
          v12[2] = v22;
          *(_OWORD *)unsigned int v12 = v13;
        }
        else
        {
          uint64_t v11 = 12;
          krb5_set_error_message(a1, 12, "malloc: out of memory");
        }
        return v11;
      }
    }
    v6 += 32;
  }
  while (v6 != 96);
  uint64_t v8 = getaddrinfo(a2, 0, 0, &v23);
  if (v8)
  {
    uint64_t v9 = v8;
    unsigned int v10 = __error();
    uint64_t v11 = krb5_eai_to_heim_errno(v9, *v10);
    gai_strerror(v9);
    krb5_set_error_message(a1, v11, "%s: %s");
  }
  else
  {
    uint64_t v14 = v23;
    if (v23)
    {
      unsigned int v15 = 0;
      do
      {
        ++v15;
        uint64_t v14 = v14->ai_next;
      }
      while (v14);
    }
    else
    {
      unsigned int v15 = 0;
    }
    *(_DWORD *)a3 = v15;
    unsigned int v16 = malloc_type_calloc(v15, 0x18uLL, 0x10800404ACF7207uLL);
    *(void *)(a3 + 8) = v16;
    if (v16)
    {
      *(_DWORD *)a3 = 0;
      unsigned int v17 = v23;
      if (v23)
      {
        int v18 = 0;
        do
        {
          if (!krb5_sockaddr2address(a1, (uint64_t)v17->ai_addr, *(void *)(a3 + 8) + 24 * v18))
          {
            if (krb5_address_search(a1, (const krb5_address *)(*(void *)(a3 + 8) + 24 * v18), (krb5_address *const *)a3))
            {
              krb5_free_address((uint64_t)a1, *(void *)(a3 + 8) + 24 * v18);
            }
            else
            {
              *(_DWORD *)a3 = ++v18;
            }
          }
          unsigned int v17 = v17->ai_next;
        }
        while (v17);
        char v19 = v23;
      }
      else
      {
        char v19 = 0;
      }
      freeaddrinfo(v19);
      return 0;
    }
    else
    {
      uint64_t v11 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      freeaddrinfo(v23);
    }
  }
  return v11;
}

krb5_BOOLean krb5_address_search(krb5_context a1, const krb5_address *a2, krb5_address *const *a3)
{
  if (!*(_DWORD *)a3) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  while (krb5_address_order(a1, a2, (const krb5_address *)(*((void *)a3 + 1) + v6)))
  {
    ++v7;
    v6 += 24;
    if (v7 >= *(unsigned int *)a3) {
      return 0;
    }
  }
  return 1;
}

uint64_t krb5_free_address(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &dword_26C4C94D0;
  while (v3[1] != *(_DWORD *)a2)
  {
    v3 += 32;
    if (v3 >= (int *)&off_26C4C9650) {
      goto LABEL_9;
    }
  }
  uint64_t v4 = (uint64_t (*)(void))*((void *)v3 + 13);
  if (!v4)
  {
LABEL_9:
    krb5_data_free((void *)(a2 + 8));
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return 0;
  }

  return v4();
}

int krb5_address_order(krb5_context a1, const krb5_address *a2, const krb5_address *a3)
{
  krb5_magic magic = a2->magic;
  uint64_t v4 = &dword_26C4C94D0;
  while (v4[1] != magic)
  {
    v4 += 32;
    if (v4 >= (int *)&off_26C4C9650)
    {
      int v5 = -1765328170;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a2->magic);
      return v5;
    }
  }
  unint64_t v7 = (uint64_t (*)(krb5_context))*((void *)v4 + 12);
  if (v7) {
    goto LABEL_7;
  }
  krb5_magic v8 = a3->magic;
  uint64_t v9 = &dword_26C4C94D0;
  while (v9[1] != v8)
  {
    v9 += 32;
    if (v9 >= (int *)&off_26C4C9650)
    {
      int v5 = -1765328170;
      krb5_set_error_message(a1, -1765328170, "Address family %d not supported", a3->magic);
      return v5;
    }
  }
  unint64_t v7 = (uint64_t (*)(krb5_context))*((void *)v9 + 12);
  if (v7)
  {
LABEL_7:
    return v7(a1);
  }
  else
  {
    int v5 = magic - v8;
    if (magic != v8) {
      return v5;
    }
    size_t v10 = *(void *)&a2->length;
    uint64_t v11 = *(void *)&a3->length;
    if (v10 != v11) {
      return v10 - v11;
    }
    contents = a2->contents;
    long long v13 = a3->contents;
    return memcmp(contents, v13, v10);
  }
}

krb5_BOOLean krb5_address_compare(krb5_context a1, const krb5_address *a2, const krb5_address *a3)
{
  return krb5_address_order(a1, a2, a3) == 0;
}

void krb5_free_addresses(krb5_context a1, krb5_address **a2)
{
  if (*(_DWORD *)a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      krb5_free_address((uint64_t)a1, (uint64_t)&a2[1][v4]);
      ++v5;
      ++v4;
    }
    while (v5 < *(unsigned int *)a2);
  }
  free(a2[1]);
  *(_DWORD *)a2 = 0;
  a2[1] = 0;
}

uint64_t krb5_copy_address(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = &dword_26C4C94D0;
  while (*v2 != *a2)
  {
    v2 += 32;
    if (v2 >= (int *)&off_26C4C9650) {
      return sub_213CBB0A0();
    }
  }
  uint64_t v3 = (uint64_t (*)(void))*((void *)v2 + 14);
  if (v3) {
    return v3();
  }
  return sub_213CBB0A0();
}

krb5_error_code krb5_copy_addresses(krb5_context a1, krb5_address *const *a2, krb5_address ***a3)
{
  *(_DWORD *)a3 = *(_DWORD *)a2;
  uint64_t v6 = (krb5_address **)malloc_type_calloc(*(unsigned int *)a2, 0x18uLL, 0x10800404ACF7207uLL);
  a3[1] = v6;
  if (*(_DWORD *)a2) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    return 12;
  }
  if (*(_DWORD *)a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      krb5_copy_address((uint64_t)a1, (_DWORD *)(*((void *)a2 + 1) + v8));
      ++v9;
      v8 += 24;
    }
    while (v9 < *(unsigned int *)a2);
  }
  return 0;
}

uint64_t krb5_append_addresses(_krb5_context *a1, uint64_t a2, unsigned int *a3)
{
  if (*a3)
  {
    uint64_t v6 = malloc_type_realloc(*(void **)(a2 + 8), 24 * (*(_DWORD *)a2 + *a3), 0x10800404ACF7207uLL);
    if (!v6)
    {
      uint64_t v10 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v10;
    }
    *(void *)(a2 + 8) = v6;
    if (*a3)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i < *a3; ++i)
      {
        if (!krb5_address_search(a1, (const krb5_address *)(*((void *)a3 + 1) + v7), (krb5_address *const *)a2))
        {
          uint64_t v9 = krb5_copy_address((uint64_t)a1, (_DWORD *)(*((void *)a3 + 1) + v7));
          if (v9) {
            return v9;
          }
          ++*(_DWORD *)a2;
        }
        v7 += 24;
      }
    }
  }
  return 0;
}

uint64_t krb5_make_addrport(_krb5_context *a1, void **a2, uint64_t a3, __int16 a4)
{
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = (size_t *)malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
  *a2 = v9;
  if (v9)
  {
    *(_DWORD *)uint64_t v9 = 256;
    uint64_t v10 = krb5_data_alloc(v9 + 1, v8 + 18);
    if (v10)
    {
      krb5_set_error_message(a1, v10, "malloc: out of memory");
      free(*a2);
      *a2 = 0;
    }
    else
    {
      uint64_t v11 = *((void *)*a2 + 2);
      *(_WORD *)uint64_t v11 = 0;
      *(_WORD *)(v11 + 2) = *(_DWORD *)a3;
      *(_WORD *)(v11 + 4) = *(void *)(a3 + 8);
      *(unsigned char *)(v11 + 6) = BYTE2(*(void *)(a3 + 8));
      uint64_t v12 = v11 + 8;
      *(unsigned char *)(v11 + 7) = BYTE3(*(void *)(a3 + 8));
      memcpy((void *)(v11 + 8), *(const void **)(a3 + 16), *(void *)(a3 + 8));
      uint64_t v13 = v12 + *(void *)(a3 + 8);
      *(void *)uint64_t v13 = 0x201010000;
      *(_WORD *)(v13 + 8) = a4;
    }
  }
  else
  {
    uint64_t v10 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v10;
}

uint64_t krb5_address_prefixlen_boundary(_krb5_context *a1, _DWORD *a2)
{
  uint64_t v2 = &dword_26C4C94D0;
  while (v2[1] != *a2)
  {
    v2 += 32;
    if (v2 >= (int *)&off_26C4C9650) {
      goto LABEL_9;
    }
  }
  uint64_t v3 = (uint64_t (*)(void))*((void *)v2 + 15);
  if (!v3)
  {
LABEL_9:
    krb5_set_error_message(a1, -1765328170, "Address family %d doesn't support address mask operation", *a2);
    return 2529639126;
  }

  return v3();
}

uint64_t sub_213C79C68(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 2;
  int v3 = *(_DWORD *)(a1 + 4);
  return krb5_data_copy((void *)(a2 + 8), &v3, 4uLL);
}

uint64_t sub_213C79CA8(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 2);
  return 0;
}

void *sub_213C79CB8(uint64_t a1, void *__dst, _DWORD *a3, __int16 a4)
{
  __src[2] = *MEMORY[0x263EF8340];
  __src[0] = 512;
  __src[1] = 0;
  HIDWORD(__src[0]) = **(_DWORD **)(a1 + 16);
  WORD1(__src[0]) = a4;
  if (*a3 >= 0x10u) {
    size_t v5 = 16;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, __src, v5);
  *a3 = 16;
  return result;
}

void *sub_213C79D4C(_DWORD *a1, void *__dst, _DWORD *a3, __int16 a4)
{
  __src[2] = *MEMORY[0x263EF8340];
  __src[0] = 512;
  __src[1] = 0;
  WORD1(__src[0]) = a4;
  HIDWORD(__src[0]) = *a1;
  if (*a3 >= 0x10u) {
    size_t v5 = 16;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, __src, v5);
  *a3 = 16;
  return result;
}

uint64_t sub_213C79DDC(int *a1, uint64_t a2)
{
  *(_DWORD *)a2 = 2;
  int v3 = *a1;
  return krb5_data_copy((void *)(a2 + 8), &v3, 4uLL);
}

BOOL sub_213C79E1C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == 0;
}

BOOL sub_213C79E2C(uint64_t a1)
{
  return *(unsigned char *)(a1 + 4) == 127;
}

void *sub_213C79E3C(void *a1, _DWORD *a2, __int16 a3)
{
  __src[2] = *MEMORY[0x263EF8340];
  __src[0] = 512;
  __src[1] = 0;
  WORD1(__src[0]) = a3;
  if (*a2 >= 0x10u) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *a2;
  }
  uint64_t result = memcpy(a1, __src, v4);
  *a2 = 16;
  return result;
}

uint64_t sub_213C79EBC(uint64_t a1, char *a2, size_t a3)
{
  v5.s_addr = **(_DWORD **)(a1 + 16);
  uint64_t v6 = inet_ntoa(v5);
  return snprintf(a2, a3, "IPv4:%s", v6);
}

uint64_t sub_213C79F0C(int a1, char *__s, uint64_t a3)
{
  in_addr v5 = strchr(__s, 58);
  if (v5)
  {
    uint64_t v6 = v5 + 1;
    size_t v7 = v5 + 1 - __s;
    if (strncasecmp(__s, "ip:", v7)
      && strncasecmp(__s, "ip4:", v7)
      && strncasecmp(__s, "ipv4:", v7)
      && strncasecmp(__s, "inet:", v7))
    {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v6 = __s;
  }
  v9.s_addr = 0;
  if (!inet_aton(v6, &v9)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)a3 = 2;
  if (krb5_data_alloc((size_t *)(a3 + 8), 4uLL)) {
    return 0xFFFFFFFFLL;
  }
  _krb5_put_int(*(void *)(a3 + 16), bswap32(v9.s_addr), *(void *)(a3 + 8));
  return 0;
}

uint64_t sub_213C7A008(krb5_context a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5 = a3;
  if (a3 < 0x21)
  {
    unint64_t v13 = 0;
    uint64_t v7 = 0xFFFFFFFFLL;
    _krb5_get_int(*(unsigned __int8 **)(a2 + 16), &v13, *(void *)(a2 + 8));
    unsigned int v10 = v13;
    *(_DWORD *)a4 = 2;
    if (!krb5_data_alloc((size_t *)(a4 + 8), 4uLL))
    {
      int v11 = -1 << -v5;
      _krb5_put_int(*(void *)(a4 + 16), v11 & v10, *(void *)(a4 + 8));
      *(_DWORD *)a5 = 2;
      if (krb5_data_alloc((size_t *)(a5 + 8), 4uLL))
      {
        krb5_free_address((uint64_t)a1, a4);
        return 0xFFFFFFFFLL;
      }
      else
      {
        _krb5_put_int(*(void *)(a5 + 16), v10 | ~v11, *(void *)(a5 + 8));
        return 0;
      }
    }
  }
  else
  {
    uint64_t v7 = 2529639126;
    krb5_set_error_message(a1, -1765328170, "IPv4 prefix too large (%ld)", a3);
  }
  return v7;
}

uint64_t sub_213C7A104(_DWORD *a1, uint64_t a2)
{
  if (a1[2] || a1[3] || a1[4] != -65536)
  {
    *(_DWORD *)a2 = 24;
    return krb5_data_copy((void *)(a2 + 8), a1 + 2, 0x10uLL);
  }
  else
  {
    *(_DWORD *)a2 = 2;
    int v3 = a1[5];
    return krb5_data_copy((void *)(a2 + 8), &v3, 4uLL);
  }
}

uint64_t sub_213C7A190(uint64_t a1, _WORD *a2)
{
  *a2 = *(_WORD *)(a1 + 2);
  return 0;
}

void *sub_213C7A1A0(uint64_t a1, void *__dst, _DWORD *a3, __int16 a4)
{
  long long v8 = 0uLL;
  uint64_t v7 = 7680;
  int v9 = 0;
  long long v8 = *(_OWORD *)*(void *)(a1 + 16);
  WORD1(v7) = a4;
  if (*a3 >= 0x1Cu) {
    size_t v5 = 28;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, &v7, v5);
  *a3 = 28;
  return result;
}

void *sub_213C7A210(long long *a1, void *__dst, _DWORD *a3, __int16 a4)
{
  long long v8 = 0uLL;
  uint64_t v7 = 7680;
  int v9 = 0;
  WORD1(v7) = a4;
  long long v8 = *a1;
  if (*a3 >= 0x1Cu) {
    size_t v5 = 28;
  }
  else {
    size_t v5 = *a3;
  }
  uint64_t result = memcpy(__dst, &v7, v5);
  *a3 = 28;
  return result;
}

uint64_t sub_213C7A27C(const void *a1, uint64_t a2)
{
  *(_DWORD *)a2 = 24;
  return krb5_data_copy((void *)(a2 + 8), a1, 0x10uLL);
}

BOOL sub_213C7A298(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) == 254 && (*(unsigned char *)(a1 + 9) & 0xC0) == 0x80) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 8) || *(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 20);
  return v2 && v2 != 0x1000000;
}

BOOL sub_213C7A2F8(_DWORD *a1)
{
  return !a1[2] && !a1[3] && !a1[4] && a1[5] == 0x1000000;
}

void *sub_213C7A32C(void *a1, _DWORD *a2, __int16 a3)
{
  long long v7 = 0uLL;
  uint64_t v6 = 7680;
  int v8 = 0;
  WORD1(v6) = a3;
  long long v7 = *MEMORY[0x263EF88F0];
  if (*a2 >= 0x1Cu) {
    size_t v4 = 28;
  }
  else {
    size_t v4 = *a2;
  }
  uint64_t result = memcpy(a1, &v6, v4);
  *a2 = 28;
  return result;
}

uint64_t sub_213C7A398(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (!inet_ntop(30, *(const void **)(a1 + 16), v10, 0x80u))
  {
    v10[0] = 0;
    uint64_t v6 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8))
    {
      unint64_t v7 = 0;
      do
      {
        snprintf(__str, 3uLL, "%02x", *(unsigned __int8 *)(v6 + v7));
        if (v7 && (v7 & 1) == 0) {
          __strlcat_chk();
        }
        __strlcat_chk();
        ++v7;
      }
      while (v7 < *(void *)(a1 + 8));
    }
  }
  return snprintf(a2, a3, "IPv6:%s", v10);
}

double sub_213C7A4B8(int a1, char *__s, uint64_t a3)
{
  size_t v4 = __s;
  size_t v5 = strchr(__s, 58);
  if (v5)
  {
    uint64_t v6 = v5 + 1;
    size_t v7 = v5 + 1 - v4;
    if (!strncasecmp(v4, "ip6:", v7) || !strncasecmp(v4, "ipv6:", v7) || !strncasecmp(v4, "inet6:", v7)) {
      size_t v4 = v6;
    }
  }
  long long v9 = 0uLL;
  if (inet_pton(30, v4, &v9) == 1)
  {
    *(_DWORD *)a3 = 24;
    if (!krb5_data_alloc((size_t *)(a3 + 8), 0x10uLL))
    {
      double result = *(double *)&v9;
      *(_OWORD *)*(void *)(a3 + 16) = v9;
    }
  }
  return result;
}

uint64_t sub_213C7A598(krb5_context a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 0x81)
  {
    if (*(void *)(a2 + 8) == 16)
    {
      uint64_t v9 = 0;
      long long v15 = 0uLL;
      long long v14 = 0uLL;
      long long v16 = *(_OWORD *)*(void *)(a2 + 16);
      do
      {
        char v10 = 8 - a3;
        if (a3 > 8) {
          char v10 = 0;
        }
        int v11 = 255 << v10;
        char v12 = *((unsigned char *)&v16 + v9);
        *((unsigned char *)&v15 + v9) = v12 & v11;
        *((unsigned char *)&v14 + v9) = v12 | ~(_BYTE)v11;
        if (a3 >= 8) {
          a3 -= 8;
        }
        else {
          a3 = 0;
        }
        ++v9;
      }
      while (v9 != 16);
      *(_DWORD *)a4 = 24;
      if (!krb5_data_alloc((size_t *)(a4 + 8), 0x10uLL))
      {
        *(_OWORD *)*(void *)(a4 + 16) = v15;
        *(_DWORD *)a5 = 24;
        if (!krb5_data_alloc((size_t *)(a5 + 8), 0x10uLL))
        {
          uint64_t v6 = 0;
          *(_OWORD *)*(void *)(a5 + 16) = v14;
          return v6;
        }
        krb5_free_address((uint64_t)a1, a4);
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = 2529639126;
      krb5_set_error_message(a1, -1765328170, "IPv6 addr bad length");
    }
  }
  else
  {
    uint64_t v6 = 2529639126;
    krb5_set_error_message(a1, -1765328170, "IPv6 prefix too large (%ld)");
  }
  return v6;
}

uint64_t sub_213C7A6E0(uint64_t a1, char *a2, size_t a3)
{
  size_t v5 = krb5_storage_from_data((uint64_t *)(a1 + 8));
  if (!v5) {
    return 12;
  }
  uint64_t v6 = (uint64_t)v5;
  memset(v19, 0, sizeof(v19));
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v16 = 0;
  krb5_storage_set_byteorder((uint64_t)v5, 32);
  krb5_storage_seek(v6);
  krb5_ret_address(v6, (uint64_t)v19);
  krb5_storage_seek(v6);
  krb5_ret_address(v6, (uint64_t)&v16);
  krb5_storage_free(v6);
  int v7 = 0;
  if (v16 == 257 && v17 == 2)
  {
    size_t v15 = 0;
    _krb5_get_int(v18, &v15, 2);
    int v7 = (unsigned __int16)v15;
  }
  size_t v8 = strlcpy(a2, "ADDRPORT:", a3);
  int v9 = v8;
  size_t v15 = v8;
  if (v8 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v8;
  }
  uint64_t result = krb5_print_address((uint64_t)v19, &a2[v10], a3 - v10, &v15);
  if (!result)
  {
    int v12 = v15;
    size_t v13 = v15 + v10;
    if (a3 - v10 <= v15) {
      size_t v13 = a3;
    }
    int v14 = snprintf(&a2[v13], a3 - v13, ",PORT=%u", v7);
    if (v14 < 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      return (v14 + v12 + v9);
    }
  }
  return result;
}

krb5_error_code krb5_aname_to_localname(krb5_context a1, krb5_const_principal a2, int a3, char *a4)
{
  size_t v5 = *(void *)&a3;
  char v19 = 0;
  krb5_error_code default_realms = krb5_get_default_realms(a1, (char *const **)&v19);
  if (!default_realms)
  {
    int v9 = v19;
    size_t v10 = *v19;
    if (*v19)
    {
      data = a2->data;
      uint64_t v12 = 1;
      while (strcmp(v10, (const char *)data))
      {
        size_t v10 = v9[v12++];
        if (!v10) {
          goto LABEL_6;
        }
      }
      krb5_error_code default_realms = -1765328227;
      krb5_free_host_realm(a1, v9);
      krb5_magic magic = a2->realm.magic;
      if (magic == 2)
      {
        if (strcmp(*((const char **)a2->realm.data + 1), "root")) {
          return default_realms;
        }
        krb5_principal v18 = 0;
        krb5_error_code v16 = krb5_copy_principal(a1, a2, &v18);
        if (v16) {
          return v16;
        }
        size_t v15 = "root";
        krb5_BOOLean v17 = krb5_kuserok(a1, v18, "root");
        krb5_free_principal(a1, v18);
        if (!v17) {
          return default_realms;
        }
      }
      else
      {
        if (magic != 1) {
          return default_realms;
        }
        size_t v15 = *(const char **)a2->realm.data;
      }
      if (strlen(v15) >= v5)
      {
        return 34;
      }
      else
      {
        strlcpy(a4, v15, v5);
        return 0;
      }
    }
    else
    {
LABEL_6:
      krb5_error_code default_realms = -1765328227;
      krb5_free_host_realm(a1, v9);
    }
  }
  return default_realms;
}

void krb5_appdefault_BOOLean(krb5_context context, const char *appname, const krb5_data *realm, const char *option, int default_value, int *ret_value)
{
  uint64_t v9 = *(void *)&default_value;
  int v11 = appname;
  if (!appname) {
    int v11 = getprogname();
  }
  BOOL BOOL_default = krb5_config_get_BOOL_default((uint64_t)context, 0, v9, (uint64_t)option, *(uint64_t *)&default_value, (uint64_t)ret_value, v6, v7, (uint64_t)"libdefaults");
  if (realm)
  {
    BOOL v19 = krb5_config_get_BOOL_default((uint64_t)context, 0, BOOL_default, v14, v15, v16, v17, v18, (uint64_t)"realms");
    BOOL v25 = krb5_config_get_BOOL_default((uint64_t)context, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"appdefaults");
    BOOL v31 = krb5_config_get_BOOL_default((uint64_t)context, 0, v25, v26, v27, v28, v29, v30, (uint64_t)"appdefaults");
    if (v11)
    {
      BOOL v37 = krb5_config_get_BOOL_default((uint64_t)context, 0, v31, v32, v33, v34, v35, v36, (uint64_t)"appdefaults");
      BOOL v43 = krb5_config_get_BOOL_default((uint64_t)context, 0, v37, v38, v39, v40, v41, v42, (uint64_t)"appdefaults");
LABEL_8:
      LODWORD(v31) = v43;
    }
  }
  else
  {
    BOOL v31 = krb5_config_get_BOOL_default((uint64_t)context, 0, BOOL_default, v14, v15, v16, v17, v18, (uint64_t)"appdefaults");
    if (v11)
    {
      BOOL v43 = krb5_config_get_BOOL_default((uint64_t)context, 0, v31, v44, v45, v46, v47, v48, (uint64_t)"appdefaults");
      goto LABEL_8;
    }
  }
  *ret_xpc_object_t value = v31;
}

void krb5_appdefault_string(krb5_context context, const char *appname, const krb5_data *realm, const char *option, const char *default_value, char **ret_value)
{
  int v11 = appname;
  if (!appname) {
    int v11 = getprogname();
  }
  uint64_t string_default = krb5_config_get_string_default((uint64_t)context, 0, (uint64_t)default_value, (uint64_t)option, (uint64_t)default_value, (uint64_t)ret_value, v6, v7, (uint64_t)"libdefaults");
  if (realm)
  {
    uint64_t v19 = krb5_config_get_string_default((uint64_t)context, 0, string_default, v14, v15, v16, v17, v18, (uint64_t)"realms");
    uint64_t v25 = krb5_config_get_string_default((uint64_t)context, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"appdefaults");
    BOOL v31 = (const char *)krb5_config_get_string_default((uint64_t)context, 0, v25, v26, v27, v28, v29, v30, (uint64_t)"appdefaults");
    if (!v11) {
      goto LABEL_9;
    }
    uint64_t v37 = krb5_config_get_string_default((uint64_t)context, 0, (uint64_t)v31, v32, v33, v34, v35, v36, (uint64_t)"appdefaults");
    uint64_t v43 = krb5_config_get_string_default((uint64_t)context, 0, v37, v38, v39, v40, v41, v42, (uint64_t)"appdefaults");
  }
  else
  {
    BOOL v31 = (const char *)krb5_config_get_string_default((uint64_t)context, 0, string_default, v14, v15, v16, v17, v18, (uint64_t)"appdefaults");
    if (!v11) {
      goto LABEL_9;
    }
    uint64_t v43 = krb5_config_get_string_default((uint64_t)context, 0, (uint64_t)v31, v44, v45, v46, v47, v48, (uint64_t)"appdefaults");
  }
  BOOL v31 = (const char *)v43;
LABEL_9:
  if (v31) {
    int v49 = strdup(v31);
  }
  else {
    int v49 = 0;
  }
  *ret_xpc_object_t value = v49;
}

void krb5_appdefault_time(_krb5_context *a1, const char *a2, const krb5_data *a3, const char *a4, uint64_t a5, void *a6)
{
  int v11 = 0;
  *(void *)uint64_t v12 = 0;
  krb5_appdefault_string(a1, a2, a3, a4, 0, &v11);
  size_t v8 = v11;
  if (v11)
  {
    krb5_error_code v9 = krb5_string_to_deltat(v11, v12);
    uint64_t v10 = *(void *)v12;
    if (v9) {
      uint64_t v10 = a5;
    }
    *a6 = v10;
    free(v8);
  }
  else
  {
    *a6 = a5;
  }
}

uint64_t _krb5_principal2principalname()
{
  return sub_213CBB008();
}

uint64_t _krb5_principalname2krb5_principal(uint64_t a1, void *a2, uint64_t a3, const char *a4)
{
  uint64_t v6 = malloc_type_malloc(0x20uLL, 0x10900408A8AD7E9uLL);
  if (!v6) {
    return 12;
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_213CBB008();
  if (!v8)
  {
    uint64_t v10 = strdup(a4);
    v7[3] = v10;
    if (v10)
    {
      uint64_t v9 = 0;
      *a2 = v7;
      return v9;
    }
    sub_213CBAFF8((uint64_t)v7);
    free(v7);
    return 12;
  }
  uint64_t v9 = v8;
  free(v7);
  return v9;
}

krb5_error_code krb5_auth_con_init(krb5_context a1, krb5_auth_context *a2)
{
  size_t v4 = malloc_type_calloc(1uLL, 0x70uLL, 0x10A004051926EB3uLL);
  if (v4)
  {
    size_t v5 = v4;
    void v4[5] = 0u;
    void v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    _OWORD *v4 = 0u;
    uint64_t v6 = malloc_type_calloc(1uLL, 0x58uLL, 0x10B0040F0B9F0F0uLL);
    *((void *)v5 + 8) = v6;
    if (v6)
    {
      krb5_error_code v7 = 0;
      v6[10] = 0;
      *((_OWORD *)v6 + 3) = 0u;
      *((_OWORD *)v6 + 4) = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *(_OWORD *)uint64_t v6 = 0u;
      *(_DWORD *)size_t v5 = 1;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *((_DWORD *)v5 + 6) = 0;
      *((void *)v5 + 12) = 0;
      *((void *)v5 + 13) = 0;
      *((void *)v5 + 11) = 0;
      *a2 = (krb5_auth_context)v5;
    }
    else
    {
      krb5_error_code v7 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      free(v5);
    }
  }
  else
  {
    krb5_error_code v7 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v7;
}

krb5_error_code krb5_auth_con_free(krb5_context a1, krb5_auth_context a2)
{
  if (a2)
  {
    krb5_free_authenticator(a1, (krb5_authenticator *)((char *)a2 + 64));
    uint64_t v4 = *((void *)a2 + 1);
    if (v4)
    {
      sub_213CBB090(v4);
      free(*((void **)a2 + 1));
    }
    uint64_t v5 = *((void *)a2 + 2);
    if (v5)
    {
      sub_213CBB090(v5);
      free(*((void **)a2 + 2));
    }
    krb5_free_keyblock(a1, *((krb5_keyblock **)a2 + 4));
    krb5_free_keyblock(a1, *((krb5_keyblock **)a2 + 6));
    krb5_free_keyblock(a1, *((krb5_keyblock **)a2 + 5));
    uint64_t v6 = *((void *)a2 + 12);
    if (v6)
    {
      sub_213CBB19C(v6);
      free(*((void **)a2 + 12));
    }
    if (*((void *)a2 + 13)) {
      sub_213CADD20(a1, (uint64_t)a2);
    }
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *(_OWORD *)a2 = 0u;
    free(a2);
  }
  return 0;
}

void krb5_free_authenticator(krb5_context a1, krb5_authenticator *a2)
{
  if (a2)
  {
    sub_213CBB4A8(*(void *)&a2->magic);
    uint64_t v3 = *(void *)&a2->magic;
    *(void *)(v3 + 80) = 0;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)uint64_t v3 = 0u;
    free(*(void **)&a2->magic);
    *(void *)&a2->krb5_magic magic = 0;
  }
}

krb5_error_code krb5_auth_con_setflags(krb5_context a1, krb5_auth_context a2, krb5_int32 a3)
{
  *(_DWORD *)a2 = a3;
  return 0;
}

krb5_error_code krb5_auth_con_getflags(krb5_context a1, krb5_auth_context a2, krb5_int32 *a3)
{
  *a3 = *(_DWORD *)a2;
  return 0;
}

uint64_t krb5_auth_con_addflags(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4)
{
  if (a4) {
    *a4 = *a2;
  }
  *a2 |= a3;
  return 0;
}

uint64_t krb5_auth_con_removeflags(uint64_t a1, _DWORD *a2, int a3, _DWORD *a4)
{
  if (a4) {
    *a4 = *a2;
  }
  *a2 &= ~a3;
  return 0;
}

void sub_213C7AFF8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6)
    {
      krb5_free_address(a1, v6);
      free(*(void **)(a2 + 8));
      *(void *)(a2 + 8) = 0;
    }
  }
  if ((a3 & 2) != 0)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      krb5_free_address(a1, v7);
      free(*(void **)(a2 + 16));
      *(void *)(a2 + 16) = 0;
    }
  }
}

krb5_error_code krb5_auth_con_setaddrs(krb5_context a1, krb5_auth_context a2, krb5_address *a3, krb5_address *a4)
{
  if (a3)
  {
    uint64_t v8 = *((void *)a2 + 1);
    if (v8)
    {
      krb5_free_address((uint64_t)a1, v8);
    }
    else
    {
      uint64_t v9 = malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
      *((void *)a2 + 1) = v9;
      if (!v9) {
        return 12;
      }
    }
    krb5_copy_address((uint64_t)a1, a3);
  }
  if (!a4) {
    return 0;
  }
  uint64_t v10 = *((void *)a2 + 2);
  if (v10)
  {
    krb5_free_address((uint64_t)a1, v10);
LABEL_10:
    krb5_copy_address((uint64_t)a1, a4);
    return 0;
  }
  int v11 = malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
  *((void *)a2 + 2) = v11;
  if (v11) {
    goto LABEL_10;
  }
  return 12;
}

krb5_error_code krb5_auth_con_genaddrs(krb5_context a1, krb5_auth_context a2, int a3, int a4)
{
  char v4 = a4;
  uint64_t v8 = 0;
  uint64_t v35 = *MEMORY[0x263EF8340];
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  sockaddr v27 = (sockaddr)0;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  sockaddr v19 = (sockaddr)0;
  long long v20 = 0u;
  socklen_t v15 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_4:
    if ((a4 & 4) == 0)
    {
LABEL_5:
      uint64_t v9 = 0;
      goto LABEL_6;
    }
LABEL_18:
    socklen_t v15 = 128;
    if (getpeername(a3, &v19, &v15) < 0)
    {
      int v10 = *__error();
      strerror_r(v10, __strerrbuf, 0x80uLL);
      krb5_set_error_message(a1, v10, "getpeername: %s", __strerrbuf);
    }
    else
    {
      int v13 = krb5_sockaddr2address(a1, (uint64_t)&v19, (uint64_t)v16);
      if (!v13)
      {
        uint64_t v14 = (_WORD *)((char *)a2 + 26);
        if ((v4 & 0xC) != 0) {
          krb5_sockaddr2port(a1, (uint64_t)&v19, (uint64_t)v14);
        }
        else {
          *uint64_t v14 = 0;
        }
        uint64_t v9 = (krb5_address *)v16;
LABEL_6:
        int v10 = krb5_auth_con_setaddrs(a1, a2, v8, v9);
        if (!v8) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      int v10 = v13;
    }
    uint64_t v9 = 0;
    if (!v8)
    {
LABEL_8:
      if (v9) {
        krb5_free_address((uint64_t)a1, (uint64_t)v9);
      }
      return v10;
    }
LABEL_7:
    krb5_free_address((uint64_t)a1, (uint64_t)v8);
    goto LABEL_8;
  }
  if (*((void *)a2 + 1))
  {
    uint64_t v8 = 0;
    goto LABEL_4;
  }
  socklen_t v15 = 128;
  if (getsockname(a3, &v27, &v15) < 0)
  {
    int v10 = *__error();
    strerror_r(v10, __strerrbuf, 0x80uLL);
    krb5_set_error_message(a1, v10, "getsockname: %s", __strerrbuf);
    return v10;
  }
  int v10 = krb5_sockaddr2address(a1, (uint64_t)&v27, (uint64_t)v17);
  if (!v10)
  {
    uint64_t v12 = (_WORD *)((char *)a2 + 24);
    if ((v4 & 3) != 0) {
      krb5_sockaddr2port(a1, (uint64_t)&v27, (uint64_t)v12);
    }
    else {
      _WORD *v12 = 0;
    }
    uint64_t v8 = (krb5_address *)v17;
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  return v10;
}

uint64_t krb5_auth_con_setaddrs_from_fd(_krb5_context *a1, _krb5_auth_context *a2, int *a3)
{
  int v3 = *a3;
  if (*((void *)a2 + 1)) {
    int v4 = 0;
  }
  else {
    int v4 = 3;
  }
  if (*((void *)a2 + 2)) {
    int v5 = v4;
  }
  else {
    int v5 = v4 | 0xC;
  }
  return krb5_auth_con_genaddrs(a1, a2, v3, v5);
}

krb5_error_code krb5_auth_con_getaddrs(krb5_context a1, krb5_auth_context a2, krb5_address **a3, krb5_address **a4)
{
  if (*a3) {
    krb5_free_address((uint64_t)a1, (uint64_t)*a3);
  }
  uint64_t v8 = (krb5_address *)malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
  *a3 = v8;
  if (v8)
  {
    krb5_copy_address((uint64_t)a1, *((_DWORD **)a2 + 1));
    if (*a4) {
      krb5_free_address((uint64_t)a1, (uint64_t)*a4);
    }
    uint64_t v9 = (krb5_address *)malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
    *a4 = v9;
    if (v9)
    {
      krb5_copy_address((uint64_t)a1, *((_DWORD **)a2 + 2));
      return 0;
    }
    else
    {
      krb5_error_code v10 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      krb5_free_address((uint64_t)a1, (uint64_t)*a3);
      *a3 = 0;
    }
  }
  else
  {
    krb5_error_code v10 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v10;
}

krb5_error_code krb5_auth_con_getkey(krb5_context a1, krb5_auth_context a2, krb5_keyblock **a3)
{
  int v3 = (const krb5_keyblock *)*((void *)a2 + 4);
  if (v3) {
    return krb5_copy_keyblock(a1, v3, a3);
  }
  *a3 = 0;
  return 0;
}

uint64_t krb5_auth_con_getlocalsubkey(_krb5_context *a1, uint64_t a2, krb5_keyblock **a3)
{
  int v3 = *(const krb5_keyblock **)(a2 + 40);
  if (v3) {
    return krb5_copy_keyblock(a1, v3, a3);
  }
  *a3 = 0;
  return 0;
}

uint64_t krb5_auth_con_getremotesubkey(_krb5_context *a1, uint64_t a2, krb5_keyblock **a3)
{
  int v3 = *(const krb5_keyblock **)(a2 + 48);
  if (v3) {
    return krb5_copy_keyblock(a1, v3, a3);
  }
  *a3 = 0;
  return 0;
}

uint64_t krb5_auth_con_setkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 4;
  int v5 = a2[4];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }
  if (a3)
  {
    return krb5_copy_keyblock(a1, a3, v6);
  }
  else
  {
    *uint64_t v6 = 0;
    return 0;
  }
}

uint64_t krb5_auth_con_setlocalsubkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 5;
  int v5 = a2[5];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }
  if (a3)
  {
    return krb5_copy_keyblock(a1, a3, v6);
  }
  else
  {
    *uint64_t v6 = 0;
    return 0;
  }
}

uint64_t krb5_auth_con_generatelocalsubkey(_krb5_context *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = krb5_generate_subkey_extended(a1, a3, (char *)*(unsigned int *)(a2 + 88), &v8);
  if (!v5)
  {
    uint64_t v6 = *(krb5_keyblock **)(a2 + 40);
    if (v6) {
      krb5_free_keyblock(a1, v6);
    }
    *(void *)(a2 + 40) = v8;
  }
  return v5;
}

uint64_t krb5_auth_con_setremotesubkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 6;
  uint64_t v5 = a2[6];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }
  if (a3)
  {
    return krb5_copy_keyblock(a1, a3, v6);
  }
  else
  {
    *uint64_t v6 = 0;
    return 0;
  }
}

uint64_t krb5_auth_con_setcksumtype(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 92) = a3;
  return 0;
}

uint64_t krb5_auth_con_getcksumtype(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a2 + 92);
  return 0;
}

uint64_t krb5_auth_con_setkeytype(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 88) = a3;
  return 0;
}

uint64_t krb5_auth_con_getkeytype(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a2 + 88);
  return 0;
}

krb5_error_code krb5_auth_con_getlocalseqnumber(krb5_context a1, krb5_auth_context a2, krb5_int32 *a3)
{
  *a3 = *((_DWORD *)a2 + 14);
  return 0;
}

uint64_t krb5_auth_con_setlocalseqnumber(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 56) = a3;
  return 0;
}

krb5_error_code krb5_auth_con_getremoteseqnumber(krb5_context a1, krb5_auth_context a2, krb5_int32 *a3)
{
  *a3 = *((_DWORD *)a2 + 15);
  return 0;
}

uint64_t krb5_auth_con_setremoteseqnumber(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 60) = a3;
  return 0;
}

krb5_error_code krb5_auth_con_getauthenticator(krb5_context a1, krb5_auth_context a2, krb5_authenticator **a3)
{
  uint64_t v5 = (krb5_authenticator *)malloc_type_malloc(0x58uLL, 0x10B0040F0B9F0F0uLL);
  *a3 = v5;
  if (v5)
  {
    return sub_213CBB4B8();
  }
  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12;
  }
}

uint64_t krb5_auth_con_setuserkey(krb5_context a1, krb5_keyblock **a2, krb5_keyblock *a3)
{
  uint64_t v6 = a2 + 4;
  uint64_t v5 = a2[4];
  if (v5) {
    krb5_free_keyblock(a1, v5);
  }

  return krb5_copy_keyblock(a1, a3, v6);
}

krb5_error_code krb5_auth_con_getrcache(krb5_context a1, krb5_auth_context a2, krb5_rcache *a3)
{
  *a3 = (krb5_rcache)*((void *)a2 + 10);
  return 0;
}

krb5_error_code krb5_auth_con_setrcache(krb5_context a1, krb5_auth_context a2, krb5_rcache a3)
{
  *((void *)a2 + 10) = a3;
  return 0;
}

uint64_t krb5_auth_con_add_AuthorizationData(_krb5_context *a1, uint64_t a2)
{
  int v3 = *(unsigned int **)(a2 + 96);
  if (v3) {
    return sub_213CBB1C0(v3);
  }
  int v3 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
  *(void *)(a2 + 96) = v3;
  if (v3) {
    return sub_213CBB1C0(v3);
  }

  return krb5_enomem(a1);
}

uint64_t krb5_build_ap_req(_krb5_context *a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v20 = 0u;
  long long v21 = 0u;
  memset(&v19[1], 0, 80);
  uint64_t v18 = 0;
  v19[0] = 0xE00000005;
  LODWORD(v19[1]) = 2 * (a4 & 3);
  uint64_t v12 = decode_Ticket(*(void *)(a3 + 80), *(void *)(a3 + 72), (uint64_t)&v19[2], (uint64_t)&v18);
  if (!v12)
  {
    LODWORD(v20) = a2;
    *((void *)&v20 + 1) = 0;
    *(void *)&long long v21 = a5;
    *((void *)&v21 + 1) = a6;
    size_t v14 = sub_213CBB93C((uint64_t)v19);
    *(void *)a7 = v14;
    socklen_t v15 = malloc_type_malloc(v14, 0x2D20C3DFuLL);
    *(void *)(a7 + 8) = v15;
    if (v15)
    {
      uint64_t v16 = sub_213CBB91C((uint64_t)v15 + *(void *)a7 - 1, *(void *)a7, (uint64_t)v19, (uint64_t)&v18);
      if (!v16)
      {
        if (*(void *)a7 != v18) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        uint64_t v13 = 0;
        goto LABEL_10;
      }
      uint64_t v13 = v16;
      free(*(void **)(a7 + 8));
      *(void *)(a7 + 8) = 0;
    }
    else
    {
      uint64_t v13 = 12;
    }
    krb5_data_zero((void *)a7);
LABEL_10:
    sub_213CBB94C((uint64_t)v19);
    return v13;
  }
  uint64_t v13 = v12;
  krb5_data_zero((void *)a7);
  return v13;
}

uint64_t _krb5_build_authenticator(_krb5_context *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  memset(v43, 0, sizeof(v43));
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  v48[0] = 0;
  v48[1] = 0;
  LODWORD(v43[0]) = 5;
  uint64_t v14 = sub_213CBAF94();
  if (v14) {
    goto LABEL_4;
  }
  uint64_t v14 = sub_213CBB008();
  if (v14) {
    goto LABEL_4;
  }
  krb5_us_timeofday(a1, (krb5_timestamp *)&v45 + 2, (krb5_int32 *)&v45);
  uint64_t v14 = krb5_auth_con_getlocalsubkey(a1, a2, (krb5_keyblock **)&v46);
  if (v14) {
    goto LABEL_4;
  }
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    if (!*(_DWORD *)(a2 + 56)) {
      krb5_generate_seq_number(a1, a4 + 16, (int *)(a2 + 56));
    }
    uint64_t v18 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *((void *)&v46 + 1) = v18;
    if (!v18) {
      goto LABEL_35;
    }
    *uint64_t v18 = *(_DWORD *)(a2 + 56);
  }
  else
  {
    *((void *)&v46 + 1) = 0;
  }
  if (*(void *)(a2 + 96))
  {
    uint64_t v47 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    if (!v47) {
      goto LABEL_35;
    }
    uint64_t v14 = sub_213CBB1AC();
    if (v14) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v47 = 0;
  }
  if (*(void *)(a2 + 104))
  {
    uint64_t v14 = sub_213CADE9C(a1, a2, *(const krb5_principal_data **)a4, (unsigned int *)v48);
    if (v14) {
      goto LABEL_4;
    }
  }
  if (!a5) {
    goto LABEL_25;
  }
  *((void *)&v44 + 1) = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
  if (!*((void *)&v44 + 1))
  {
LABEL_35:
    uint64_t v16 = 0;
    goto LABEL_36;
  }
  uint64_t v14 = sub_213CBB444();
  if (!v14)
  {
    if (**((_DWORD **)&v44 + 1) != 32771
      || (uint64_t v14 = sub_213C7BDB8(a1, (unsigned int *)v48, v19, v20, v21, v22, v23, v24), !v14))
    {
LABEL_25:
      if (LODWORD(v48[0]))
      {
        long long v25 = (krb5_encrypt_block *)sub_213CBBD3C((uint64_t)v48);
        long long v26 = malloc_type_malloc((size_t)v25, 0x63D3C43DuLL);
        uint64_t v16 = v26;
        if (!v26) {
          goto LABEL_36;
        }
        uint64_t v27 = sub_213CBBD1C((uint64_t)v25 + (void)v26 - 1, (uint64_t)v25, (uint64_t)v48, (uint64_t)&v42);
        if (v27)
        {
LABEL_34:
          uint64_t v15 = v27;
          free(v16);
          goto LABEL_5;
        }
        if (v25 != v42) {
          heim_abort("internal error in ASN.1 encoder:buf_size == len", v28, v29, v30, v31, v32, v33, v34, v40);
        }
        uint64_t v35 = v47;
        if (!v47)
        {
          uint64_t v35 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
          uint64_t v47 = v35;
          if (!v35)
          {
            uint64_t v39 = krb5_enomem(a1);
            goto LABEL_41;
          }
        }
        uint64_t v15 = sub_213CBB1C0(v35);
        if (v15) {
          goto LABEL_6;
        }
      }
      uint64_t v36 = *(void *)(a2 + 64);
      *(void *)(v36 + 56) = *((void *)&v45 + 1);
      *(_DWORD *)(v36 + 48) = v45;
      uint64_t v37 = (krb5_encrypt_block *)sub_213CBB498((uint64_t)v43);
      uint64_t v38 = malloc_type_malloc((size_t)v37, 0xA3890389uLL);
      uint64_t v16 = v38;
      if (v38)
      {
        uint64_t v27 = sub_213CBB478((uint64_t)v37 + (void)v38 - 1, (uint64_t)v37, (uint64_t)v43, (uint64_t)&v42);
        if (v27) {
          goto LABEL_34;
        }
        if (v37 != v42) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        uint64_t v39 = krb5_crypto_init(a1, (const krb5_keyblock *)(a4 + 16), a3, &v41);
        if (!v39)
        {
          uint64_t v15 = krb5_encrypt(a1, v41, a7, (size_t)v16, v42, a6);
          krb5_crypto_destroy(a1, (uint64_t)v41);
          goto LABEL_6;
        }
LABEL_41:
        uint64_t v15 = v39;
        goto LABEL_6;
      }
LABEL_36:
      uint64_t v15 = 12;
      goto LABEL_6;
    }
  }
LABEL_4:
  uint64_t v15 = v14;
LABEL_5:
  uint64_t v16 = 0;
LABEL_6:
  sub_213CBB19C((uint64_t)v48);
  sub_213CBB4A8((uint64_t)v43);
  free(v16);
  return v15;
}

uint64_t sub_213C7BDB8(_krb5_context *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t inited = _krb5_init_etype(a1, 11, (unsigned int *)&v23, &v24, 0, a6, a7, a8);
  if (!inited)
  {
    uint64_t v10 = sub_213CBBCFC((uint64_t)&v23);
    int v11 = malloc_type_malloc(v10, 0xDD305473uLL);
    if (!v11)
    {
      uint64_t inited = 12;
      goto LABEL_6;
    }
    uint64_t v12 = v11;
    uint64_t v13 = sub_213CBBCDC((uint64_t)v11 + v10 - 1, v10, (uint64_t)&v23, (uint64_t)&v22);
    if (v13)
    {
      uint64_t inited = v13;
      free(v12);
LABEL_6:
      sub_213CBBD0C((uint64_t)&v23);
      return inited;
    }
    sub_213CBBD0C((uint64_t)&v23);
    if (v10 != v22) {
      heim_abort("internal error in ASN.1 encoder:buf_size == len", v14, v15, v16, v17, v18, v19, v20, v22);
    }
    LODWORD(v25) = 129;
    uint64_t v26 = v10;
    uint64_t v27 = v12;
    uint64_t inited = sub_213CBB1C0(a2);
    free(v12);
  }
  return inited;
}

uint64_t krb5_cc_register(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 176);
  if ((int)v5 < 1)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 168);
    while (1)
    {
      uint64_t v9 = *(const char **)(*(void *)(v8 + 8 * v7) + 8);
      if (!v9) {
        break;
      }
      if (!strcmp(v9, *(const char **)(a2 + 8)))
      {
        if (a3) {
          break;
        }
        uint64_t v12 = 2529639103;
        krb5_set_error_message((krb5_context)a1, -1765328193, "cache type %s already exists");
        return v12;
      }
      if (v5 == ++v7)
      {
        LODWORD(v7) = v5;
        goto LABEL_10;
      }
    }
  }
  if (v7 == v5)
  {
LABEL_10:
    uint64_t v10 = malloc_type_realloc(*(void **)(a1 + 168), 8 * ((int)v5 + 1), 0x6004044C4A2DFuLL);
    if (!v10)
    {
      uint64_t v12 = 2529639110;
      krb5_set_error_message((krb5_context)a1, -1765328186, "malloc: out of memory");
      return v12;
    }
    *(void *)(a1 + 168) = v10;
    uint64_t v11 = *(int *)(a1 + 176);
    v10[v11] = 0;
    *(_DWORD *)(a1 + 176) = v11 + 1;
  }
  uint64_t v12 = 0;
  *(void *)(*(void *)(a1 + 168) + 8 * v7) = a2;
  return v12;
}

uint64_t sub_213C7BFE4(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = malloc_type_malloc(0x18uLL, 0x10E0040A403B16CuLL);
  if (v6)
  {
    uint64_t v7 = 0;
    *uint64_t v6 = a2;
    *a3 = v6;
  }
  else
  {
    uint64_t v7 = 2529639110;
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
  }
  return v7;
}

krb5_error_code krb5_cc_resolve(krb5_context a1, const char *a2, krb5_ccache *a3)
{
  *a3 = 0;
  uint64_t v6 = *((unsigned int *)a1 + 44);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *((void *)a1 + 21);
    do
    {
      uint64_t v8 = *(void **)v7;
      uint64_t v9 = *(const char **)(*(void *)v7 + 8);
      if (!v9) {
        break;
      }
      size_t v10 = strlen(*(const char **)(*(void *)v7 + 8));
      if (!strncmp(v9, a2, v10) && a2[v10] == 58)
      {
        uint64_t v14 = (char *)&a2[v10 + 1];
        uint64_t v13 = a1;
        uint64_t v12 = v8;
        goto LABEL_11;
      }
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  if (strchr((char *)a2, 58))
  {
    krb5_set_error_message(a1, -1765328244, "unknown ccache type %s", a2);
    return -1765328244;
  }
  else
  {
    uint64_t v12 = &krb5_fcc_ops;
    uint64_t v13 = a1;
    uint64_t v14 = (char *)a2;
LABEL_11:
    return sub_213C7C18C(v13, (uint64_t)v12, v14, a3);
  }
}

uint64_t sub_213C7C18C(_krb5_context *a1, uint64_t a2, char *__s1, void *a4)
{
  uint64_t v11 = 0;
  uint64_t v7 = _krb5_expand_default_cc_name_0(a1, __s1, &v11);
  if (!v7)
  {
    uint64_t v8 = v11;
    uint64_t v9 = sub_213C7BFE4(a1, a2, a4);
    if (v9)
    {
      uint64_t v7 = v9;
    }
    else
    {
      uint64_t v7 = (*(uint64_t (**)(_krb5_context *, void *, void *))(*(void *)*a4 + 24))(a1, a4, v8);
      if (v7)
      {
        free((void *)*a4);
        *a4 = 0;
      }
    }
    if (v11) {
      free(v11);
    }
  }
  return v7;
}

krb5_error_code krb5_cc_new_unique(krb5_context context, const char *type, const char *hint, krb5_ccache *id)
{
  prefix_ops = krb5_cc_get_prefix_ops((uint64_t)context, (char *)type);
  if (prefix_ops)
  {
    krb5_error_code v8 = sub_213C7BFE4(context, (uint64_t)prefix_ops, id);
    if (!v8)
    {
      krb5_error_code v8 = (*(uint64_t (**)(krb5_context, krb5_ccache *))(*(void *)*id + 32))(context, id);
      if (v8)
      {
        free(*id);
        *id = 0;
      }
    }
  }
  else
  {
    krb5_error_code v8 = -1765328244;
    krb5_set_error_message(context, -1765328244, "Credential cache type %s is unknown", type);
  }
  return v8;
}

void *krb5_cc_get_prefix_ops(uint64_t a1, char *__s1)
{
  if (!__s1) {
    return &krb5_xcc_ops;
  }
  if (*__s1 == 47) {
    return &krb5_fcc_ops;
  }
  int v4 = strdup(__s1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = strchr(v4, 58);
    if (v6) {
      *uint64_t v6 = 0;
    }
    uint64_t v7 = *(unsigned int *)(a1 + 176);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = *(void *)(a1 + 168);
      do
      {
        uint64_t v9 = *(const char **)(*(void *)v8 + 8);
        if (!v9) {
          break;
        }
        if (!strcmp(v9, v5))
        {
          free(v5);
          return *(void **)v8;
        }
        v8 += 8;
        --v7;
      }
      while (v7);
    }
    free(v5);
  }
  else
  {
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
  }
  return 0;
}

const char *__cdecl krb5_cc_get_name(krb5_context context, krb5_ccache cache)
{
  return (const char *)(*(uint64_t (**)(krb5_context))(*(void *)cache + 16))(context);
}

const char *__cdecl krb5_cc_get_type(krb5_context context, krb5_ccache cache)
{
  return *(const char **)(*(void *)cache + 8);
}

uint64_t krb5_cc_get_full_name(_krb5_context *a1, uint64_t a2, char **a3)
{
  *a3 = 0;
  int v4 = *(const char **)(*(void *)a2 + 8);
  if (v4)
  {
    uint64_t v6 = (const char *)(*(uint64_t (**)(_krb5_context *))(*(void *)a2 + 16))(a1);
    if (v6)
    {
      if (asprintf(a3, "%s:%s", v4, v6) == -1)
      {
        uint64_t v7 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
        *a3 = 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      uint64_t v7 = 2529639051;
      krb5_set_error_message(a1, -1765328245, "cache of type %s have no name");
    }
  }
  else
  {
    uint64_t v7 = 2529639052;
    krb5_set_error_message(a1, -1765328244, "cache have no name of type");
  }
  return v7;
}

uint64_t krb5_cc_get_ops(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t krb5_cc_switch(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t (**)(void))(*(void *)a2 + 176);
  if (v2) {
    return v2();
  }
  else {
    return 0;
  }
}

BOOL krb5_cc_support_switch(uint64_t a1, char *a2)
{
  prefix_ops = krb5_cc_get_prefix_ops(a1, a2);
  return prefix_ops && prefix_ops[22];
}

krb5_error_code krb5_cc_set_default_name(krb5_context a1, const char *a2)
{
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  if (a2)
  {
    int v3 = strdup(a2);
    uint64_t v34 = v3;
    *((_DWORD *)a1 + 80) = 1;
    if (v3) {
      goto LABEL_3;
    }
LABEL_33:
    krb5_error_code v4 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v4;
  }
  if (issuid()) {
    goto LABEL_8;
  }
  uint64_t v20 = getenv("KRB5CCPRINCIPAL");
  if (v20)
  {
    uint64_t v21 = v20;
    krb5_ccache id = 0;
    krb5_principal v32 = 0;
    if (*v20 == 64)
    {
      uint64_t v22 = (krb5_principal_data *)malloc_type_calloc(1uLL, 0x20uLL, 0x10900408A8AD7E9uLL);
      krb5_principal v32 = v22;
      if (!v22) {
        return krb5_enomem(a1);
      }
      krb5_principal v23 = v22;
      uint64_t v24 = strdup(v21 + 1);
      v23->data = (krb5_data *)v24;
      if (!v24)
      {
        free(v23);
        return krb5_enomem(a1);
      }
    }
    else
    {
      krb5_error_code v4 = krb5_parse_name(a1, v20, &v32);
      if (v4) {
        return v4;
      }
      krb5_principal v23 = v32;
    }
    if (!krb5_cc_cache_match(a1, v23, &id))
    {
      krb5_ccache v27 = id;
      krb5_cc_get_full_name(a1, (uint64_t)id, &v34);
      (*(void (**)(krb5_context, krb5_ccache))(*(void *)v27 + 56))(a1, v27);
      free(v27);
    }
    uint64_t v28 = v34;
    if (v34)
    {
LABEL_26:
      if (*((void *)a1 + 39))
      {
        free(*((void **)a1 + 39));
        uint64_t v28 = v34;
      }
      *((void *)a1 + 39) = strdup(v28);
      goto LABEL_32;
    }
  }
  uint64_t v29 = getenv("KRB5CCNAME");
  if (v29)
  {
    uint64_t v28 = strdup(v29);
    uint64_t v34 = v28;
    if (!v28) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_8:
  string = (char *)krb5_config_get_string((uint64_t)a1, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"libdefaults");
  if (string)
  {
    krb5_error_code v19 = _krb5_expand_default_cc_name_0(a1, string, (void **)&v34);
  }
  else
  {
    uint64_t v25 = (char *)krb5_config_get_string((uint64_t)a1, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"libdefaults");
    if (v25)
    {
      prefix_ops = (uint64_t (**)(krb5_context, void **))krb5_cc_get_prefix_ops((uint64_t)a1, v25);
      if (!prefix_ops)
      {
        krb5_error_code v4 = -1765328244;
        krb5_set_error_message(a1, -1765328244, "Credential cache type %s is unknown");
        return v4;
      }
    }
    else
    {
      prefix_ops = (uint64_t (**)(krb5_context, void **))&krb5_xcc_ops;
    }
    krb5_error_code v19 = prefix_ops[21](a1, (void **)&v34);
  }
  krb5_error_code v4 = v19;
  if (v19) {
    return v4;
  }
LABEL_32:
  *((_DWORD *)a1 + 80) = 0;
  int v3 = v34;
  if (!v34) {
    goto LABEL_33;
  }
LABEL_3:
  krb5_error_code v4 = _krb5_expand_default_cc_name_0(a1, v3, &v33);
  free(v34);
  if (!v4)
  {
    uint64_t v5 = (void *)*((void *)a1 + 38);
    if (v5) {
      free(v5);
    }
    krb5_error_code v4 = 0;
    *((void *)a1 + 38) = v33;
  }
  return v4;
}

krb5_error_code krb5_cc_cache_match(krb5_context context, krb5_principal client, krb5_ccache *id)
{
  krb5_ccache ccache = 0;
  krb5_cccol_cursor cursor = 0;
  *krb5_ccache id = 0;
  krb5_error_code v6 = krb5_cccol_cursor_new(context, &cursor);
  if (!v6)
  {
    uint64_t v7 = cursor;
    krb5_error_code v8 = krb5_cccol_cursor_next(context, cursor, &ccache);
    krb5_ccache v9 = ccache;
    krb5_ccache v10 = 0;
    if (v8) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = ccache == 0;
    }
    if (!v11)
    {
      while (1)
      {
        uint64_t v17 = 0;
        krb5_const_principal v18 = 0;
        if ((*(unsigned int (**)(krb5_context))(*(void *)v9 + 80))(context)
          || (!client->realm.magic
            ? (krb5_principal_data *)(uint64_t v14 = (krb5_principal_data *)v18,
                                      krb5_BOOLean v13 = strcmp((const char *)client->data, (const char *)v18->data) == 0)
            : (v13 = krb5_principal_compare(context, v18, client), uint64_t v14 = (krb5_principal_data *)v18),
              krb5_free_principal(context, v14),
              !v13))
        {
          krb5_ccache v12 = ccache;
          if (ccache)
          {
            (*(void (**)(krb5_context, krb5_ccache))(*(void *)ccache + 56))(context, ccache);
            free(v12);
          }
        }
        else
        {
          if (v10 || !krb5_cc_get_lifetime(context, (uint64_t)ccache, &v17) && v17) {
            break;
          }
          krb5_ccache v10 = ccache;
        }
        krb5_ccache ccache = 0;
        if (!krb5_cccol_cursor_next(context, v7, &ccache))
        {
          krb5_ccache v9 = ccache;
          if (ccache) {
            continue;
          }
        }
        break;
      }
    }
    krb5_cccol_cursor_free(context, &cursor);
    if (!ccache && v10) {
      goto LABEL_24;
    }
    if (v10)
    {
      (*(void (**)(krb5_context, krb5_ccache))(*(void *)v10 + 56))(context, v10);
      free(v10);
      krb5_ccache v10 = ccache;
LABEL_24:
      krb5_error_code v6 = 0;
      *krb5_ccache id = v10;
      return v6;
    }
    krb5_ccache v10 = ccache;
    if (ccache) {
      goto LABEL_24;
    }
    krb5_error_code v6 = -1765328243;
    krb5_const_principal v18 = 0;
    krb5_unparse_name(context, client, (char **)&v18);
    uint64_t v16 = (const char *)v18;
    if (!v18) {
      uint64_t v16 = "<out of memory>";
    }
    krb5_set_error_message(context, -1765328243, "Principal %s not found in any credential cache", v16);
    if (v18) {
      free((void *)v18);
    }
  }
  return v6;
}

krb5_error_code krb5_cc_close(krb5_context context, krb5_ccache cache)
{
  krb5_error_code v3 = (*(uint64_t (**)(krb5_context))(*(void *)cache + 56))(context);
  free(cache);
  return v3;
}

const char *__cdecl krb5_cc_default_name(krb5_context a1)
{
  int v2 = (const char *)*((void *)a1 + 38);
  if (!v2) {
    goto LABEL_14;
  }
  if (*((_DWORD *)a1 + 80)) {
    return (const char *)*((void *)a1 + 38);
  }
  if (!strncmp(*((const char **)a1 + 38), "KCM:", 4uLL)
    || !strncmp(v2, "API:", 4uLL)
    || !strncmp(v2, "XCACHE:", 4uLL)
    || !strncmp(v2, "KCC:", 4uLL))
  {
LABEL_14:
    krb5_cc_set_default_name(a1, 0);
    return (const char *)*((void *)a1 + 38);
  }
  if (issuid()) {
    return (const char *)*((void *)a1 + 38);
  }
  krb5_error_code v3 = getenv("KRB5CCNAME");
  krb5_error_code v4 = (const char *)*((void *)a1 + 39);
  if (!v3)
  {
    if (!v4) {
      return (const char *)*((void *)a1 + 38);
    }
    free(*((void **)a1 + 39));
    *((void *)a1 + 39) = 0;
    goto LABEL_14;
  }
  if (!v4 || strcmp(v3, v4)) {
    goto LABEL_14;
  }
  return (const char *)*((void *)a1 + 38);
}

krb5_error_code krb5_cc_default(krb5_context a1, krb5_ccache *a2)
{
  krb5_error_code v4 = krb5_cc_default_name(a1);
  if (v4)
  {
    return krb5_cc_resolve(a1, v4, a2);
  }
  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12;
  }
}

krb5_error_code krb5_cc_initialize(krb5_context context, krb5_ccache cache, krb5_principal principal)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 40))(context);
}

krb5_error_code krb5_cc_destroy(krb5_context context, krb5_ccache cache)
{
  krb5_error_code v4 = (*(uint64_t (**)(void))(*(void *)cache + 48))();
  (*(void (**)(krb5_context, krb5_ccache))(*(void *)cache + 56))(context, cache);
  free(cache);
  return v4;
}

krb5_error_code krb5_cc_store_cred(krb5_context context, krb5_ccache cache, krb5_creds *creds)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 64))(context);
}

krb5_error_code krb5_cc_retrieve_cred(krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *mcreds, krb5_creds *creds)
{
  krb5_ccache v10 = *(uint64_t (**)(krb5_context, krb5_ccache, void, krb5_creds *, krb5_creds *))(*(void *)cache + 72);
  if (v10)
  {
    krb5_error_code result = v10(context, cache, *(void *)&flags, mcreds, creds);
    goto LABEL_3;
  }
  krb5_error_code result = sub_213C7CCF4(context, (uint64_t)cache, flags, (uint64_t)mcreds, creds);
  if (result != -1765328242) {
    return result;
  }
  if ((flags & 0x200000) != 0)
  {
    krb5_error_code result = sub_213C7CCF4(context, (uint64_t)cache, flags | 0x80000000, (uint64_t)mcreds, creds);
LABEL_3:
    if (result != -1765328242) {
      return result;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  krb5_cc_get_full_name(context, (uint64_t)cache, (char **)&v15);
  krb5_unparse_name(context, mcreds->client, &v14);
  krb5_ccache v12 = v14;
  if (!v14) {
    krb5_ccache v12 = "server";
  }
  krb5_BOOLean v13 = (const char *)v15;
  if (!v15) {
    krb5_BOOLean v13 = "unknown";
  }
  krb5_set_error_message(context, -1765328243, "Did not find credential for %s in cache %s", v12, v13);
  free(v15);
  free(v14);
  return -1765328243;
}

uint64_t sub_213C7CCF4(_krb5_context *a1, uint64_t a2, int a3, uint64_t a4, krb5_creds *a5)
{
  uint64_t v13 = 0;
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)a2 + 88))();
  if (!v10)
  {
    uint64_t v10 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *, krb5_creds *))(*(void *)a2 + 96))(a1, a2, &v13, a5);
    if (!v10)
    {
      do
      {
        if (krb5_compare_creds(a1, a3, a4, (uint64_t)a5))
        {
          uint64_t v10 = 0;
          goto LABEL_8;
        }
        krb5_free_cred_contents(a1, a5);
        uint64_t v11 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *, krb5_creds *))(*(void *)a2 + 96))(a1, a2, &v13, a5);
      }
      while (!v11);
      uint64_t v10 = v11;
    }
LABEL_8:
    (*(void (**)(_krb5_context *, uint64_t, uint64_t *))(*(void *)a2 + 104))(a1, a2, &v13);
  }
  return v10;
}

krb5_error_code krb5_cc_get_principal(krb5_context context, krb5_ccache cache, krb5_principal *principal)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 80))(context);
}

krb5_error_code krb5_cc_start_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 88))(context);
}

krb5_error_code krb5_cc_next_cred(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor, krb5_creds *creds)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 96))(context);
}

krb5_error_code krb5_cc_end_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 104))(context);
}

krb5_error_code krb5_cc_remove_cred(krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *creds)
{
  krb5_error_code v4 = *(uint64_t (**)(krb5_context))(*(void *)cache + 112);
  if (v4)
  {
    return v4(context);
  }
  else
  {
    krb5_set_error_message(context, 13, "ccache %s does not support remove_cred", *(const char **)(*(void *)cache + 8));
    return 13;
  }
}

krb5_error_code krb5_cc_set_flags(krb5_context context, krb5_ccache cache, krb5_flags flags)
{
  return (*(uint64_t (**)(krb5_context))(*(void *)cache + 120))(context);
}

uint64_t krb5_cc_copy_match_f(_krb5_context *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(_krb5_context *, uint64_t, unsigned char *), uint64_t a5, _DWORD *a6)
{
  if (a6) {
    *a6 = 0;
  }
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  krb5_principal v16 = 0;
  uint64_t v12 = (*(uint64_t (**)(_krb5_context *, uint64_t, krb5_principal *))(*(void *)a2 + 80))(a1, a2, &v16);
  if (!v12)
  {
    uint64_t v13 = (*(uint64_t (**)(_krb5_context *, uint64_t, krb5_principal))(*(void *)a3 + 40))(a1, a3, v16);
    if (v13
      || (uint64_t v13 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *))(*(void *)a2 + 88))(a1, a2, &v18),
          v13))
    {
      uint64_t v12 = v13;
      krb5_free_principal(a1, v16);
    }
    else
    {
      LODWORD(v12) = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *, unsigned char *))(*(void *)a2 + 96))(a1, a2, &v18, v17);
      if (!v12)
      {
        do
        {
          if (!a4 || a4(a1, a5, v17))
          {
            if (a6) {
              ++*a6;
            }
            int v15 = (*(uint64_t (**)(_krb5_context *, uint64_t, unsigned char *))(*(void *)a3 + 64))(a1, a3, v17);
            if (v15) {
              break;
            }
          }
          krb5_free_cred_contents(a1, (krb5_creds *)v17);
          int v15 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *, unsigned char *))(*(void *)a2 + 96))(a1, a2, &v18, v17);
        }
        while (!v15);
        LODWORD(v12) = v15;
      }
      (*(void (**)(_krb5_context *, uint64_t, uint64_t *))(*(void *)a2 + 104))(a1, a2, &v18);
      krb5_free_principal(a1, v16);
      if (v12 == -1765328242) {
        return 0;
      }
      else {
        return v12;
      }
    }
  }
  return v12;
}

uint64_t krb5_cc_copy_cache(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return krb5_cc_copy_match_f(a1, a2, a3, 0, 0, 0);
}

uint64_t krb5_cc_get_version(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t (**)(void))(*(void *)a2 + 128);
  if (v2) {
    return v2();
  }
  else {
    return 0;
  }
}

double krb5_cc_clear_mcred(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t krb5_cc_cache_get_first(_krb5_context *a1, char *__s1, void **a3)
{
  krb5_error_code v4 = __s1;
  if (!__s1) {
    krb5_error_code v4 = (char *)krb5_cc_default_name(a1);
  }
  prefix_ops = krb5_cc_get_prefix_ops((uint64_t)a1, v4);
  if (prefix_ops)
  {
    uint64_t v7 = prefix_ops;
    if (prefix_ops[17])
    {
      krb5_error_code v8 = malloc_type_calloc(1uLL, 0x10uLL, 0xE00402B90B96AuLL);
      *a3 = v8;
      if (v8)
      {
        *krb5_error_code v8 = v7;
        uint64_t v9 = ((uint64_t (*)(_krb5_context *, uint64_t))v7[17])(a1, (uint64_t)*a3 + 8);
        if (v9)
        {
          free(*a3);
          *a3 = 0;
        }
      }
      else
      {
        uint64_t v9 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
      }
    }
    else
    {
      uint64_t v9 = 2529639159;
      krb5_set_error_message(a1, -1765328137, "Credential cache type %s doesn't support iterations over caches");
    }
  }
  else
  {
    uint64_t v9 = 2529639052;
    krb5_set_error_message(a1, -1765328244, "Unknown type \"%s\" when iterating trying to iterate the credential caches");
  }
  return v9;
}

uint64_t krb5_cc_cache_next(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*a2 + 144))(a1, a2[1]);
}

uint64_t krb5_cc_cache_end_seq_get(uint64_t a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void))(*a2 + 152))(a1, a2[1]);
  free(a2);
  return v3;
}

krb5_error_code krb5_cccol_cursor_new(krb5_context context, krb5_cccol_cursor *cursor)
{
  krb5_error_code v4 = (_krb5_cccol_cursor *)malloc_type_calloc(1uLL, 0x18uLL, 0x1030040EC63B64AuLL);
  *krb5_cccol_cursor cursor = v4;
  if (v4)
  {
    krb5_error_code v5 = 0;
    *(_DWORD *)krb5_error_code v4 = -1;
  }
  else
  {
    krb5_error_code v5 = 12;
    krb5_set_error_message(context, 12, "malloc: out of memory");
  }
  return v5;
}

krb5_error_code krb5_cccol_cursor_next(krb5_context context, krb5_cccol_cursor cursor, krb5_ccache *ccache)
{
  *krb5_ccache ccache = 0;
  int v6 = *(_DWORD *)cursor;
  if (*(_DWORD *)cursor == -1)
  {
    uint64_t v17 = getenv("KRB5CCNAME");
    *(_DWORD *)krb5_cccol_cursor cursor = 0;
    if (v17)
    {
      if (!krb5_cc_resolve(context, v17, ccache))
      {
        krb5_cc_get_full_name(context, (uint64_t)*ccache, (char **)cursor + 2);
        return 0;
      }
      int v6 = *(_DWORD *)cursor;
    }
    else
    {
      int v6 = 0;
    }
  }
  if (v6 < *((_DWORD *)context + 44))
  {
    uint64_t v7 = (char *)cursor + 8;
    do
    {
      krb5_error_code v8 = *(void **)v7;
      if (!*(void *)v7)
      {
        if (krb5_cc_cache_get_first(context, *(char **)(*(void *)(*((void *)context + 21) + 8 * v6) + 8), (void **)cursor + 1))goto LABEL_9; {
        krb5_error_code v8 = *(void **)v7;
        }
      }
      int v9 = (*(uint64_t (**)(krb5_context, void, krb5_ccache *))(*v8 + 144))(context, v8[1], ccache);
      if (v9)
      {
        int v10 = v9;
        uint64_t v11 = *(void **)v7;
        (*(void (**)(krb5_context, void))(**(void **)v7 + 152))(context, *(void *)(*(void *)v7 + 8));
        free(v11);
        *(void *)uint64_t v7 = 0;
        if (v10 != -1765328242) {
          break;
        }
LABEL_9:
        int v6 = *(_DWORD *)cursor + 1;
        *(_DWORD *)krb5_cccol_cursor cursor = v6;
        continue;
      }
      if (!*((void *)cursor + 2)) {
        break;
      }
      __s2 = 0;
      if (krb5_cc_get_full_name(context, (uint64_t)*ccache, &__s2)) {
        break;
      }
      uint64_t v12 = __s2;
      int v13 = strcmp(*((const char **)cursor + 2), __s2);
      free(v12);
      if (v13) {
        break;
      }
      krb5_ccache v14 = *ccache;
      (*(void (**)(krb5_context, krb5_ccache))(*(void *)*ccache + 56))(context, *ccache);
      free(v14);
      *krb5_ccache ccache = 0;
      int v6 = *(_DWORD *)cursor;
    }
    while (v6 < *((_DWORD *)context + 44));
  }
  if (*(_DWORD *)cursor >= *((_DWORD *)context + 44))
  {
    krb5_error_code v15 = -1765328242;
    krb5_set_error_message(context, -1765328242, "Reached end of credential caches");
    return v15;
  }
  return 0;
}

uint64_t krb5_cc_get_lifetime(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)krb5_ccache v14 = 0u;
  *a3 = 0;
  time_t v6 = time(0);
  uint64_t v7 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *))(*(void *)a2 + 88))(a1, a2, &v23);
  if (!v7)
  {
    uint64_t v7 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *, krb5_const_principal *))(*(void *)a2 + 96))(a1, a2, &v23, v14);
    if (!v7)
    {
      uint64_t v8 = 0;
      while (1)
      {
        BOOL is_root_krbtgt = krb5_principal_is_root_krbtgt((uint64_t)a1, (uint64_t)v14[1]);
        if (is_root_krbtgt) {
          break;
        }
        if (!krb5_is_config_principal((krb5_context)is_root_krbtgt, v14[1])
          && (*((uint64_t *)&v17 + 1) < v8 || v8 == 0)
          && v6 < *((void *)&v17 + 1))
        {
          uint64_t v8 = *((void *)&v17 + 1);
        }
        krb5_free_cred_contents(a1, (krb5_creds *)v14);
        uint64_t v10 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t *, krb5_const_principal *))(*(void *)a2 + 96))(a1, a2, &v23, v14);
        if (v10)
        {
          uint64_t v7 = v10;
          if (!v8) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }
      if (v6 < *((uint64_t *)&v17 + 1)) {
        uint64_t v8 = *((void *)&v17 + 1);
      }
      krb5_free_cred_contents(a1, (krb5_creds *)v14);
      uint64_t v7 = 0;
      if (v8)
      {
LABEL_22:
        uint64_t v7 = 0;
        *a3 = v8 - v6;
      }
    }
LABEL_23:
    (*(void (**)(_krb5_context *, uint64_t, uint64_t *))(*(void *)a2 + 104))(a1, a2, &v23);
  }
  return v7;
}

krb5_error_code krb5_cccol_cursor_free(krb5_context context, krb5_cccol_cursor *cursor)
{
  krb5_cccol_cursor v2 = *cursor;
  *krb5_cccol_cursor cursor = 0;
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)v2 + 1);
    if (v3)
    {
      (*(void (**)(krb5_context, void))(*v3 + 152))(context, v3[1]);
      free(v3);
    }
    krb5_error_code v4 = (void *)*((void *)v2 + 2);
    if (v4) {
      free(v4);
    }
    free(v2);
  }
  return 0;
}

krb5_error_code krb5_cc_move(krb5_context context, krb5_ccache src, krb5_ccache dst)
{
  time_t v6 = *(const char **)(*(void *)src + 8);
  uint64_t v7 = *(void *)dst;
  uint64_t v8 = *(const char **)(*(void *)dst + 8);
  int v9 = strcmp(v6, v8);
  uint64_t v10 = *(uint64_t (**)(krb5_context, krb5_ccache))(v7 + 288);
  if (v9)
  {
    if (!v10) {
      goto LABEL_9;
    }
  }
  else if (!v10)
  {
    goto LABEL_6;
  }
  int v11 = v10(context, src);
  uint64_t v7 = *(void *)dst;
  if (!v11)
  {
    time_t v6 = *(const char **)(*(void *)src + 8);
    uint64_t v8 = *(const char **)(v7 + 8);
LABEL_9:
    krb5_error_code v12 = -1765328137;
    krb5_set_error_message(context, -1765328137, "Moving credentials between different types not yet supported (from %s to %s)", v6, v8);
    return v12;
  }
LABEL_6:
  krb5_error_code v12 = (*(uint64_t (**)(krb5_context, krb5_ccache, krb5_ccache))(v7 + 160))(context, src, dst);
  if (!v12)
  {
    *(void *)src = 0;
    *((void *)src + 1) = 0;
    *((void *)src + 2) = 0;
    free(src);
  }
  return v12;
}

krb5_BOOLean krb5_is_config_principal(krb5_context a1, krb5_const_principal a2)
{
  return !strcmp((const char *)a2->data, "X-CACHECONF:")
      && a2->realm.magic
      && strcmp(*(const char **)a2->realm.data, "krb5_ccache_conf_data") == 0;
}

krb5_error_code krb5_cc_set_config(krb5_context a1, krb5_ccache a2, krb5_const_principal a3, const char *a4, krb5_data *a5)
{
  memset(v13, 0, sizeof(v13));
  krb5_error_code v8 = sub_213C7D854(a1, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)v13);
  if (!v8)
  {
    krb5_error_code v10 = krb5_cc_remove_cred(a1, a2, 0, (krb5_creds *)v13);
    krb5_error_code v8 = v10;
    if (v10) {
      BOOL v11 = v10 == -1765328243;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = v11;
    if (a5)
    {
      if (v12)
      {
        *(void *)&v13[40] = time(0) - 10;
        *(void *)&v13[56] = *(void *)&v13[40];
        krb5_error_code v8 = krb5_data_copy(&v13[72], a5->data, *(void *)&a5->magic);
        if (!v8) {
          krb5_error_code v8 = (*(uint64_t (**)(krb5_context, krb5_ccache, unsigned char *))(*(void *)a2 + 64))(a1, a2, v13);
        }
      }
    }
  }
  krb5_free_cred_contents(a1, (krb5_creds *)v13);
  return v8;
}

uint64_t sub_213C7D854(_krb5_context *a1, uint64_t a2, const krb5_principal_data *a3, uint64_t a4, uint64_t a5)
{
  int v13 = 0;
  krb5_const_principal v14 = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  uint64_t principal = (*(uint64_t (**)(void))(*(void *)a2 + 80))();
  if (!principal)
  {
    if (a3)
    {
      uint64_t principal = krb5_unparse_name(a1, a3, &v13);
      if (principal) {
        return principal;
      }
      krb5_error_code v10 = v13;
    }
    else
    {
      krb5_error_code v10 = 0;
    }
    uint64_t principal = krb5_make_principal(a1, (void *)(a5 + 8), "X-CACHECONF:", "krb5_ccache_conf_data", a4, v10, 0);
    free(v13);
    BOOL v11 = (krb5_principal_data *)v14;
    if (!principal)
    {
      uint64_t principal = krb5_copy_principal(a1, v14, (krb5_principal *)a5);
      BOOL v11 = (krb5_principal_data *)v14;
    }
    krb5_free_principal(a1, v11);
  }
  return principal;
}

krb5_error_code krb5_cc_get_config(krb5_context a1, krb5_ccache a2, krb5_const_principal a3, const char *a4, krb5_data *a5)
{
  long long v17 = 0u;
  memset(mcreds, 0, sizeof(mcreds));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  krb5_data_zero(a5);
  krb5_error_code cred = sub_213C7D854(a1, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)mcreds);
  if (!cred)
  {
    krb5_error_code cred = krb5_cc_retrieve_cred(a1, a2, 0, (krb5_creds *)mcreds, (krb5_creds *)v12);
    if (!cred) {
      krb5_error_code cred = krb5_data_copy(a5, (const void *)v14, *((size_t *)&v13 + 1));
    }
  }
  krb5_free_cred_contents(a1, (krb5_creds *)v12);
  krb5_free_cred_contents(a1, (krb5_creds *)mcreds);
  return cred;
}

krb5_error_code krb5_cccol_last_change_time(krb5_context context, krb5_timestamp *change_time)
{
  uint64_t v3 = v2;
  krb5_ccache ccache = 0;
  krb5_cccol_cursor cursor = 0;
  uint64_t v14 = 0;
  void *v2 = 0;
  krb5_error_code result = krb5_cccol_cursor_new(context, &cursor);
  if (!result)
  {
    uint64_t v7 = cursor;
    krb5_error_code v8 = krb5_cccol_cursor_next(context, cursor, &ccache);
    krb5_ccache v9 = ccache;
    if (v8) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = ccache == 0;
    }
    if (!v10)
    {
      do
      {
        uint64_t v11 = *(void *)v9;
        if (!change_time || !strcmp(*(const char **)(v11 + 8), (const char *)change_time))
        {
          uint64_t v14 = 0;
          int v12 = (*(uint64_t (**)(krb5_context, krb5_ccache, uint64_t *))(v11 + 184))(context, v9, &v14);
          krb5_ccache v13 = ccache;
          (*(void (**)(krb5_context, krb5_ccache))(*(void *)ccache + 56))(context, ccache);
          free(v13);
          if (!v12 && v14 > *v3) {
            void *v3 = v14;
          }
        }
        if (krb5_cccol_cursor_next(context, v7, &ccache)) {
          break;
        }
        krb5_ccache v9 = ccache;
      }
      while (ccache);
    }
    krb5_cccol_cursor_free(context, &cursor);
    return 0;
  }
  return result;
}

uint64_t krb5_cc_get_friendly_name(_krb5_context *a1, _krb5_ccache *a2, char **a3)
{
  *(void *)&v11.krb5_magic magic = 0;
  v11.data = 0;
  if (krb5_cc_get_config(a1, a2, 0, "FriendlyName", &v11))
  {
    krb5_const_principal v10 = 0;
    uint64_t v6 = (*(uint64_t (**)(_krb5_context *, _krb5_ccache *, krb5_const_principal *))(*(void *)a2 + 80))(a1, a2, &v10);
    if (v6)
    {
      return v6;
    }
    else
    {
      uint64_t v7 = krb5_unparse_name(a1, v10, a3);
      krb5_free_principal(a1, (krb5_principal)v10);
    }
  }
  else
  {
    int v8 = asprintf(a3, "%.*s", v11.magic, v11.data);
    krb5_data_free(&v11);
    if (v8 <= 0)
    {
      uint64_t v7 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t krb5_cc_set_friendly_name(_krb5_context *a1, _krb5_ccache *a2, char *__s)
{
  v6.data = __s;
  *(void *)&v6.krb5_magic magic = strlen(__s);
  return krb5_cc_set_config(a1, a2, 0, "FriendlyName", &v6);
}

uint64_t krb5_cc_set_kdc_offset(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)a2 + 192);
  if (v3) {
    return v3();
  }
  *(_DWORD *)(a1 + 108) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  return 0;
}

uint64_t krb5_cc_get_kdc_offset(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)a2 + 200);
  if (v3) {
    return v3();
  }
  *a3 = *(int *)(a1 + 108);
  return 0;
}

uint64_t krb5_cc_hold(uint64_t a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 208);
  if (v2) {
    return v2();
  }
  else {
    return 0;
  }
}

uint64_t krb5_cc_unhold(uint64_t a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 216);
  if (v2) {
    return v2();
  }
  else {
    return 0;
  }
}

uint64_t krb5_cc_get_uuid(_krb5_context *a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 224);
  if (v2)
  {
    return v2();
  }
  else
  {
    krb5_set_error_message(a1, -1765328244, "Credential cache type %s doesn't support uuid", *(const char **)(*(void *)a2 + 8));
    return 2529639052;
  }
}

uint64_t krb5_cc_resolve_by_uuid(_krb5_context *a1, char *a2, void *a3)
{
  if (a2)
  {
    prefix_ops = krb5_cc_get_prefix_ops((uint64_t)a1, a2);
    if (!prefix_ops)
    {
      uint64_t v6 = 2529639052;
      krb5_set_error_message(a1, -1765328244, "Credential cache type %s is unknown");
      return v6;
    }
  }
  else
  {
    prefix_ops = &krb5_xcc_ops;
  }
  if (prefix_ops[29])
  {
    uint64_t v6 = sub_213C7BFE4(a1, (uint64_t)prefix_ops, a3);
    if (!v6)
    {
      uint64_t v6 = (*(uint64_t (**)(_krb5_context *))(*(void *)*a3 + 232))(a1);
      if (v6)
      {
        free((void *)*a3);
        *a3 = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = 2529639052;
    krb5_set_error_message(a1, -1765328244, "Credential cache type %s doesn't support uuid");
  }
  return v6;
}

uint64_t krb5_cc_set_acl(uint64_t a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = *(uint64_t (**)(void))(*(void *)a2 + 256);
  if (v2) {
    return v2();
  }
  else {
    return 0;
  }
}

krb5_error_code krb5_set_password(krb5_context context, krb5_creds *creds, char *newpw, krb5_principal change_password_for, int *result_code, krb5_data *result_code_string, krb5_data *result_string)
{
  *result_code = 1;
  krb5_data_zero(result_code_string);
  uint64_t v33 = result_string;
  krb5_data_zero(result_string);
  sub_213C9C004((uint64_t)context, 1, "trying to set password");
  krb5_error_code v13 = 0;
  uint64_t v14 = (const char **)&off_26C4CA4F8;
  krb5_auth_context v34 = 0;
  uint64_t v35 = creds;
  unint64_t v15 = -1;
  krb5_principal v36 = change_password_for;
  uint64_t v37 = newpw;
  while (1)
  {
    if (change_password_for && v15 < 2) {
      goto LABEL_28;
    }
    v40[0] = 0;
    v40[1] = 0;
    v39[0] = 0;
    v39[1] = 0;
    *(void *)uint64_t v38 = 0;
    krb5_data_zero(v40);
    krb5_data_zero(v39);
    krb5_principal v16 = v36;
    if (!v36) {
      krb5_principal v16 = *(krb5_principal *)&v35->magic;
    }
    data = (char *)v16->data;
    sub_213C9C004((uint64_t)context, 1, "trying to set password using: %s in realm %s", *v14, data);
    krb5_error_code v13 = krb5_auth_con_init(context, &v34);
    if (!v13)
    {
      krb5_auth_con_setflags(context, v34, 4);
      krb5_error_code v13 = krb5_sendto_ctx_alloc((uint64_t)context, (uint64_t)v38, v18, v19, v20, v21, v22, v23);
      if (!v13)
      {
        krb5_sendto_ctx_set_type(*(uint64_t *)v38, 3);
        if (v35->addresses >= (krb5_address **)0x2BD)
        {
          sub_213C9C004((uint64_t)context, 1, "using TCP since the ticket is large: %lu", v35->addresses);
          krb5_sendto_ctx_add_flags(*(uint64_t *)v38, 2);
        }
        sub_213CAA8CC(*(uint64_t *)v38, (uint64_t)v14[2], (uint64_t)&v34);
        uint64_t ImpersonateBundle = HeimCredGetImpersonateBundle();
        if (!ImpersonateBundle) {
          goto LABEL_20;
        }
        uint64_t v25 = (char *)ImpersonateBundle;
        MainBundle = CFBundleGetMainBundle();
        if (!MainBundle) {
          goto LABEL_20;
        }
        CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
        CFStringRef v28 = CFStringCreateWithCString(0, v25, 0x8000100u);
        CFStringRef v29 = v28;
        if (v28 && Identifier)
        {
          if (CFEqual(Identifier, v28)) {
            sub_213C9C004((uint64_t)context, 5, "Bundle identifiers match, not setting delegate");
          }
          else {
            krb5_sendto_set_delegated_app(0, *(uint64_t *)v38, 0, 0, v25);
          }
        }
        else if (!v28)
        {
LABEL_20:
          krb5_error_code v13 = krb5_sendto_context((uint64_t)context, *(uint64_t *)v38, v40, data, v39);
          if (!v13) {
            krb5_error_code v13 = ((uint64_t (*)(krb5_context, krb5_auth_context, void *, int *, krb5_data *, krb5_data *))v14[3])(context, v34, v39, result_code, result_code_string, v33);
          }
          goto LABEL_22;
        }
        CFRelease(v29);
        goto LABEL_20;
      }
    }
LABEL_22:
    sub_213C9C004((uint64_t)context, 1, "set password using %s returned: %d result_code %d", *v14, v13, *result_code);
    krb5_auth_con_free(context, v34);
    if (*(void *)v38) {
      krb5_sendto_ctx_free((uint64_t)context, *(const void **)v38);
    }
    krb5_data_free(v39);
    if (v13 != -1765328228) {
      break;
    }
    krb5_set_error_message(context, -1765328228, "Unable to reach any changepw server  in realm %s", data);
    *result_code = 2;
    krb5_error_code v13 = -1765328228;
LABEL_28:
    uint64_t v31 = v14[4];
    v14 += 4;
    ++v15;
    krb5_error_code result = v13;
    if (!v31) {
      return result;
    }
  }
  if (v13) {
    goto LABEL_28;
  }
  krb5_error_code result = 0;
  if (*result_code) {
    goto LABEL_28;
  }
  return result;
}

krb5_error_code krb5_set_password_using_ccache(krb5_context context, krb5_ccache ccache, char *newpw, krb5_principal change_password_for, int *result_code, krb5_data *result_code_string, krb5_data *result_string)
{
  krb5_principal v20 = 0;
  creds = 0;
  *result_code = 1;
  krb5_data_zero(result_code_string);
  krb5_data_zero(result_string);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)uint64_t principal = 0u;
  if (change_password_for)
  {
    krb5_principal v20 = change_password_for;
    krb5_principal v14 = change_password_for;
  }
  else
  {
    krb5_error_code credentials = krb5_cc_get_principal(context, ccache, &v20);
    if (credentials) {
      return credentials;
    }
    krb5_principal v14 = v20;
  }
  realm = (char *)krb5_principal_get_realm((uint64_t)context, (uint64_t)v14);
  krb5_error_code credentials = krb5_make_principal(context, &principal[1], realm, "kadmin", "changepw", 0);
  if (!credentials)
  {
    krb5_error_code v17 = krb5_cc_get_principal(context, ccache, principal);
    if (v17)
    {
      krb5_error_code credentials = v17;
      krb5_free_principal(context, principal[1]);
    }
    else
    {
      krb5_error_code credentials = krb5_get_credentials(context, 0, ccache, (krb5_creds *)principal, &creds);
      krb5_free_principal(context, principal[1]);
      krb5_free_principal(context, principal[0]);
      uint64_t v18 = creds;
      if (!credentials)
      {
        krb5_error_code credentials = krb5_set_password(context, creds, newpw, change_password_for, result_code, result_code_string, result_string);
        uint64_t v18 = creds;
      }
      if (v18) {
        krb5_free_creds(context, v18);
      }
    }
  }
  if (!change_password_for) {
    krb5_free_principal(context, v20);
  }
  return credentials;
}

const char *krb5_passwd_result_to_string(uint64_t a1, unsigned int a2)
{
  if (a2 <= 7) {
    return off_2641E3F58[a2];
  }
  else {
    return "unknown result code";
  }
}

uint64_t sub_213C7E34C(_krb5_context *a1, uint64_t a2, uint64_t a3, int a4, size_t *a5)
{
  *(void *)&v25.krb5_magic magic = 0;
  v25.data = 0;
  *(void *)&v24.krb5_magic magic = 0;
  v24.data = 0;
  *(void *)&v23.krb5_magic magic = 0;
  v23.data = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v20 = 0;
  krb5_data_zero(&v25);
  krb5_data_zero(&v24);
  krb5_data_zero(&v23);
  uint64_t v9 = krb5_auth_con_genaddrs(a1, *(krb5_auth_context *)a3, a4, 1);
  if (v9) {
    goto LABEL_3;
  }
  uint64_t v9 = krb5_mk_req_extended(a1, (krb5_auth_context *)a3, 6, 0, *(krb5_creds **)(a3 + 8), &v25);
  if (v9) {
    goto LABEL_3;
  }
  krb5_data v11 = *(const char **)(a3 + 24);
  *(void *)&long long v21 = strlen(v11);
  *((void *)&v21 + 1) = v11;
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = v12 + 24;
  if (!v12) {
    uint64_t v13 = 0;
  }
  *(void *)&long long v22 = *(void *)(a3 + 16);
  *((void *)&v22 + 1) = v13;
  *(void *)&v23.krb5_magic magic = sub_213CBBC9C((uint64_t)&v21);
  krb5_principal v14 = (char *)malloc_type_malloc(*(size_t *)&v23.magic, 0x5ECCEB8DuLL);
  v23.data = v14;
  if (!v14) {
    goto LABEL_18;
  }
  uint64_t v15 = sub_213CBBC7C((uint64_t)&v14[*(void *)&v23.magic - 1], *(uint64_t *)&v23.magic, (uint64_t)&v21, (uint64_t)&v20);
  if (v15)
  {
    uint64_t v9 = v15;
    free(v23.data);
    v23.data = 0;
LABEL_3:
    sub_213C9C004((uint64_t)a1, 10, "setpw_prexmit failed with %d", v9);
    goto LABEL_4;
  }
  if (*(void *)&v23.magic != v20) {
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }
  uint64_t v9 = krb5_mk_priv(a1, *(krb5_auth_context *)a3, &v23, &v24, 0);
  if (v9) {
    goto LABEL_3;
  }
  krb5_principal v16 = krb5_storage_emem();
  if (!v16)
  {
LABEL_18:
    uint64_t v9 = 12;
    goto LABEL_3;
  }
  uint64_t v17 = (uint64_t)v16;
  uint64_t v20 = *(void *)&v25.magic + *(void *)&v24.magic + 6;
  uint64_t v9 = krb5_store_uint16((uint64_t)v16, LOWORD(v25.magic) + LOWORD(v24.magic) + 6);
  if (v9
    || (uint64_t v9 = krb5_store_uint16(v17, 65408), v9)
    || (uint64_t v9 = krb5_store_uint16(v17, v25.magic), v9)
    || (uint64_t v18 = krb5_storage_write(v17), v9 = 22, v18 < 0)
    || v18 != *(void *)&v25.magic
    || (uint64_t v19 = krb5_storage_write(v17), v9 = 22, v19 < 0)
    || v19 != *(void *)&v24.magic
    || (uint64_t v9 = krb5_storage_to_data(v17, a5), v9))
  {
    sub_213C9C004((uint64_t)a1, 10, "setpw_prexmit failed with %d", v9);
  }
  krb5_storage_free(v17);
LABEL_4:
  krb5_data_free(&v24);
  krb5_data_free(&v25);
  krb5_data_free(&v23);
  return v9;
}

uint64_t sub_213C7E5BC(_krb5_context *a1, _krb5_auth_context *a2, uint64_t *a3, _DWORD *a4, krb5_data *a5, void *a6)
{
  sub_213C7AFF8((uint64_t)a1, (uint64_t)a2, 3);
  uint64_t v18 = *a3;
  if (*a3 <= 5)
  {
    uint64_t v35 = *a3;
    uint64_t v19 = "server sent to too short message (%ld bytes)";
LABEL_3:
    sub_213C858BC(a6, v19, v12, v13, v14, v15, v16, v17, v35);
LABEL_4:
    uint64_t v20 = 0;
    *a4 = 1;
    return v20;
  }
  long long v22 = (unsigned __int8 *)a3[1];
  uint64_t v23 = v22[1];
  if (v18 == (v23 | ((unint64_t)*v22 << 8)) && (v23 | 0x20) != 0x7E)
  {
    unsigned int v24 = __rev16(*((unsigned __int16 *)v22 + 1));
    if (v24 != 1)
    {
      sub_213C858BC(a6, "client: wrong version number (%d)", v12, v13, v14, v15, v16, v17, v24);
      goto LABEL_4;
    }
    v38.data = (char *)(v22 + 6);
    uint64_t v25 = __rev16(*((unsigned __int16 *)v22 + 2));
    *(void *)&v38.krb5_magic magic = v25;
    if (&v22[v18] < &v22[v25 + 6])
    {
      uint64_t v19 = "client: wrong AP len in reply";
      goto LABEL_3;
    }
    if (v25)
    {
      v36.data = (char *)&v22[v25 + 6];
      uint64_t v37 = 0;
      *(void *)&v36.krb5_magic magic = v18 - v25 - 6;
      uint64_t v20 = krb5_rd_rep(a1, a2, &v38, &v37);
      if (!v20)
      {
        krb5_free_ap_rep_enc_part(a1, v37);
        uint64_t v26 = krb5_rd_priv(a1, a2, &v36, a5, 0);
        if (v26)
        {
          uint64_t v20 = v26;
          krb5_data_free(a5);
        }
        else
        {
          uint64_t v33 = *(void *)&a5->magic;
          if (*(void *)&a5->magic > 1uLL)
          {
            data = a5->data;
            *a4 = __rev16(*(unsigned __int16 *)data);
            krb5_data_copy(a6, data + 2, v33 - 2);
          }
          else
          {
            *a4 = 1;
            sub_213C858BC(a6, "client: bad length in result", v27, v28, v29, v30, v31, v32, v35);
          }
          return 0;
        }
      }
      return v20;
    }
  }

  return sub_213C7E964((uint64_t)v22, v18, a4, a6);
}

uint64_t sub_213C7E798(_krb5_context *a1, uint64_t a2, uint64_t a3, int a4, size_t *a5)
{
  *(void *)&v17.krb5_magic magic = 0;
  v17.data = 0;
  *(void *)&v16.krb5_magic magic = 0;
  v16.data = 0;
  *(void *)&v15.krb5_magic magic = 0;
  v15.data = 0;
  krb5_data_zero(&v17);
  krb5_data_zero(&v16);
  uint64_t v9 = krb5_auth_con_genaddrs(a1, *(krb5_auth_context *)a3, a4, 1);
  if (v9) {
    goto LABEL_4;
  }
  uint64_t v9 = krb5_mk_req_extended(a1, (krb5_auth_context *)a3, 6, 0, *(krb5_creds **)(a3 + 8), &v17);
  if (v9) {
    goto LABEL_4;
  }
  v15.data = *(char **)(a3 + 24);
  *(void *)&v15.krb5_magic magic = strlen(v15.data);
  uint64_t v9 = krb5_mk_priv(a1, *(krb5_auth_context *)a3, &v15, &v16, 0);
  if (v9) {
    goto LABEL_4;
  }
  krb5_data v11 = krb5_storage_emem();
  if (!v11)
  {
    uint64_t v9 = 12;
LABEL_4:
    sub_213C9C004((uint64_t)a1, 10, "chgpw_prexmit failed with: %d", v9);
    goto LABEL_5;
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v9 = krb5_store_uint16((uint64_t)v11, LOWORD(v17.magic) + LOWORD(v16.magic) + 6);
  if (v9
    || (uint64_t v9 = krb5_store_uint16(v12, 1), v9)
    || (uint64_t v9 = krb5_store_uint16(v12, v17.magic), v9)
    || (v13 = krb5_storage_write(v12), uint64_t v9 = 22, v13 < 0)
    || v13 != *(void *)&v17.magic
    || (uint64_t v14 = krb5_storage_write(v12), v9 = 22, v14 < 0)
    || v14 != *(void *)&v16.magic
    || (uint64_t v9 = krb5_storage_to_data(v12, a5), v9))
  {
    sub_213C9C004((uint64_t)a1, 10, "chgpw_prexmit failed with: %d", v9);
  }
  krb5_storage_free(v12);
LABEL_5:
  krb5_data_free(&v16);
  krb5_data_free(&v17);
  return v9;
}

uint64_t sub_213C7E964(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  uint64_t v18 = 0;
  memset(v19, 0, sizeof(v19));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  unsigned int v24 = 0;
  uint64_t v12 = sub_213CBBBFC(a1, a2, (uint64_t)v19, (uint64_t)&v18);
  if (!v12)
  {
    if (v24)
    {
      uint64_t v13 = *v24;
      if ((unint64_t)*v24 <= 1)
      {
        sub_213C858BC(a4, "server sent too short e_data to print anything usable", v6, v7, v8, v9, v10, v11, v17);
        sub_213CBBC4C((uint64_t)v19);
        uint64_t v12 = 0;
        *a3 = 1;
        return v12;
      }
      uint64_t v14 = (unsigned __int16 *)v24[1];
      *a3 = __rev16(*v14);
      size_t v15 = v13 - 2;
      if (v13 == 2) {
        sub_213C858BC(a4, "server only sent error code", v15, v7, v8, v9, v10, v11, v17);
      }
      else {
        krb5_data_copy(a4, v14 + 1, v15);
      }
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = DWORD1(v20);
    }
    sub_213CBBC4C((uint64_t)v19);
  }
  return v12;
}

void *sub_213C7EA50(void *a1, char *__s1, int a3)
{
  krb5_error_code v5 = a1;
  uint64_t v6 = *a1;
  if (*a1)
  {
    while (1)
    {
      uint64_t v7 = (void *)v6;
      if (a3 == 1 && *(_DWORD *)v6 == 1 && !strcmp(__s1, *(const char **)(v6 + 8))) {
        break;
      }
      uint64_t v6 = v7[2];
      if (!v6)
      {
        krb5_error_code v5 = v7 + 2;
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v7 = malloc_type_calloc(1uLL, 0x20uLL, 0x10B20403397373FuLL);
    *krb5_error_code v5 = v7;
    if (v7)
    {
      v7[1] = strdup(__s1);
      uint64_t v7 = (void *)*v5;
      *(_DWORD *)uint64_t v7 = a3;
      if (!v7[1])
      {
        free(v7);
        uint64_t v7 = 0;
        *krb5_error_code v5 = 0;
      }
    }
  }
  return v7;
}

uint64_t krb5_config_parse_file_multi(_krb5_context *a1, char *__s1, void *a3)
{
  krb5_error_code v4 = __s1;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  __s = 0;
  unsigned int v40 = 0;
  if (*__s1 == 126 && __s1[1] == 47)
  {
    if (!krb5_homedir_access((uint64_t)a1))
    {
      uint64_t v9 = 1;
      krb5_set_error_message(a1, 1, "Access to home directory not allowed");
      goto LABEL_56;
    }
    if (!issuid() && (pw_dir = getenv("HOME")) != 0
      || (uid_t v6 = getuid(), (v7 = getpwuid(v6)) != 0) && (pw_dir = v7->pw_dir) != 0)
    {
      asprintf(&v42, "%s%s", pw_dir, v4 + 1);
      krb5_error_code v4 = v42;
      if (!v42)
      {
        uint64_t v9 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory", v32, v34);
        goto LABEL_56;
      }
    }
  }
  uint64_t v9 = _krb5_expand_default_cc_name_0(a1, v4, (void **)&__s);
  if (v9) {
    goto LABEL_56;
  }
  uint64_t v10 = __s;
  size_t v11 = strlen(__s);
  if (v11 >= 7)
  {
    CFIndex v12 = v11;
    if (!strcasecmp(&__s[v11 - 6], ".plist"))
    {
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFURLRef v26 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)v10, v12, 0);
      if (v26 && (CFURLRef v27 = v26, v28 = CFReadStreamCreateWithFile(v25, v26), CFRelease(v27), v28))
      {
        if (CFReadStreamOpen(v28))
        {
          CFDictionaryRef v29 = (const __CFDictionary *)CFPropertyListCreateWithStream(0, v28, 0, 0, 0, 0);
          CFRelease(v28);
          if (v29)
          {
            CFDictionaryApplyFunction(v29, (CFDictionaryApplierFunction)sub_213C7F760, a3);
            CFRelease(v29);
            goto LABEL_37;
          }
        }
        else
        {
          CFRelease(v28);
        }
        uint64_t v9 = 2;
      }
      else
      {
        uint64_t v9 = 12;
      }
      krb5_clear_error_message(a1);
      uint64_t v33 = v10;
      unsigned int v24 = "Failed to parse plist %s";
      goto LABEL_55;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = fopen(v10, "r");
  if (!v39)
  {
    long long v23 = __error();
    uint64_t v9 = *v23;
    strerror_r(*v23, __strerrbuf, 0x80uLL);
    uint64_t v33 = v10;
    krb5_auth_context v34 = __strerrbuf;
    unsigned int v24 = "open %s: %s";
    goto LABEL_55;
  }
  krb5_data v36 = v10;
  uint64_t v37 = a3;
  uint64_t v44 = 0;
  if (!sub_213C7F9A0(__strerrbuf, (uint64_t)&v38))
  {
LABEL_36:
    fclose(v39);
LABEL_37:
    uint64_t v9 = 0;
    goto LABEL_56;
  }
  uint64_t v13 = 0;
  uint64_t v14 = MEMORY[0x263EF8318];
  while (1)
  {
    size_t v15 = (char *)++v40;
    __strerrbuf[strcspn(__strerrbuf, "\r\n")] = 0;
    krb5_data v16 = __strerrbuf;
    do
    {
      uint64_t v17 = *v16;
      if (*v16 < 0) {
        int v18 = __maskrune(*v16, 0x4000uLL);
      }
      else {
        int v18 = *(_DWORD *)(v14 + 4 * v17 + 60) & 0x4000;
      }
      ++v16;
    }
    while (v18);
    if (v17 <= 0x3B && ((1 << v17) & 0x800000800000001) != 0) {
      goto LABEL_35;
    }
    if (v17 == 91) {
      break;
    }
    if (v17 == 125)
    {
      uint64_t v30 = "unmatched }";
      goto LABEL_50;
    }
    if (!v13)
    {
      uint64_t v30 = "binding before section";
      goto LABEL_50;
    }
    uint64_t v20 = sub_213C7FA6C((uint64_t)&v38, (int *)&v40, v16 - 1, &v44, v13 + 3, &v43);
    if (v20)
    {
      uint64_t v9 = v20;
      size_t v15 = (char *)v40;
      uint64_t v30 = v43;
      goto LABEL_51;
    }
LABEL_35:
    if (!sub_213C7F9A0(__strerrbuf, (uint64_t)&v38)) {
      goto LABEL_36;
    }
  }
  long long v21 = strchr(v16, 93);
  if (!v21)
  {
    uint64_t v30 = "missing ]";
    goto LABEL_50;
  }
  *long long v21 = 0;
  long long v22 = sub_213C7EA50(v37, v16, 1);
  if (v22)
  {
    uint64_t v13 = v22;
    uint64_t v44 = 0;
    goto LABEL_35;
  }
  uint64_t v30 = "out of memory";
LABEL_50:
  uint64_t v43 = v30;
  uint64_t v9 = 2529639048;
LABEL_51:
  fclose(v39);
  krb5_auth_context v34 = v15;
  uint64_t v35 = v30;
  uint64_t v33 = v36;
  unsigned int v24 = "%s:%u: %s";
LABEL_55:
  krb5_set_error_message(a1, v9, v24, v33, v34, v35);
LABEL_56:
  if (v42) {
    free(v42);
  }
  if (__s) {
    free(__s);
  }
  return v9;
}

uint64_t krb5_config_parse_file(_krb5_context *a1, char *__s1, void *a3)
{
  *(void *)a3 = 0;
  return krb5_config_parse_file_multi(a1, __s1, a3);
}

uint64_t krb5_config_file_free(uint64_t a1, void **a2)
{
  return 0;
}

void sub_213C7EF78(uint64_t a1, void **a2)
{
  if (a2)
  {
    krb5_cccol_cursor v2 = a2;
    do
    {
      free(v2[1]);
      if (*(_DWORD *)v2 == 1)
      {
        sub_213C7EF78(a1, v2[3]);
      }
      else
      {
        if (*(_DWORD *)v2) {
          krb5_abortx(a1, "unknown binding type (%d) in free_binding", *(_DWORD *)v2);
        }
        free(v2[3]);
      }
      krb5_error_code v4 = (void **)v2[2];
      free(v2);
      krb5_cccol_cursor v2 = v4;
    }
    while (v4);
  }
}

uint64_t sub_213C7F008(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v5 = a4;
  if (!a2)
  {
    a2 = *(void *)(a1 + 136);
    if (!a2) {
      return 0;
    }
  }
  uint64_t v7 = *a3;
  if (!*a3)
  {
    if (*(void *)a5) {
      return sub_213C7F0C4(a2, a3, a4, *(const char **)a5, (uint64_t *)(a5 + 8));
    }
    return 0;
  }
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(const char **)(v7 + 8);
  while (strcmp(*(const char **)(v8 + 8), v9) || *(_DWORD *)v8 != v5)
  {
    uint64_t v8 = *(void *)(v8 + 16);
    if (!v8) {
      return 0;
    }
  }
  *a3 = v8;
  return *(void *)(v8 + 24);
}

uint64_t sub_213C7F0C4(uint64_t result, uint64_t *a2, uint64_t a3, const char *a4, uint64_t *a5)
{
  CFIndex v12 = a5 + 1;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *a5;
    while (1)
    {
      if (!strcmp(*(const char **)(v8 + 8), a4))
      {
        if (*(_DWORD *)v8 == a3 && v9 == 0)
        {
          *a2 = v8;
          return *(void *)(v8 + 24);
        }
        if (*(_DWORD *)v8 == 1 && v9 != 0) {
          return sub_213C7F0C4(*(void *)(v8 + 24), a2, a3, v9, v12);
        }
      }
      uint64_t v8 = *(void *)(v8 + 16);
      if (!v8) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t krb5_config_get_list(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = 0;
  return sub_213C7F008(a1, a2, &v10, 1, (uint64_t)&a9);
}

uint64_t krb5_config_get_string(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = 0;
  return sub_213C7F008(a1, a2, &v10, 0, (uint64_t)&a9);
}

uint64_t krb5_config_get_string_default(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = 0;
  uint64_t result = sub_213C7F008(a1, a2, &v11, 0, (uint64_t)&a9);
  if (!result) {
    return a3;
  }
  return result;
}

void *sub_213C7F228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = 0;
  uid_t v6 = (const char *)sub_213C7F008(a1, a2, &v23, 0, a3);
  if (v6)
  {
    int v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = strdup(v6);
      long long v22 = 0;
      if (!v9) {
        break;
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_213C7F3B4(v9, &v22);
      if (v11)
      {
        CFIndex v12 = v11;
        uint64_t v13 = v7;
        size_t v14 = 8 * v7 + 8;
        while (1)
        {
          size_t v15 = malloc_type_realloc(v8, v14, 0x10040436913F5uLL);
          if (!v15) {
            break;
          }
          krb5_data v16 = v15;
          uint64_t v17 = strdup(v12);
          v16[v13] = v17;
          if (!v17)
          {
            LODWORD(v13) = v13 + 1;
            uint64_t v8 = v16;
            break;
          }
          CFIndex v12 = sub_213C7F3B4(0, &v22);
          ++v13;
          v14 += 8;
          uint64_t v8 = v16;
          if (!v12)
          {
            uint64_t v8 = v16;
            int v7 = v13;
            goto LABEL_10;
          }
        }
        int v7 = v13;
        break;
      }
LABEL_10:
      free(v10);
      uid_t v6 = (const char *)sub_213C7F008(a1, a2, &v23, 0, a3);
      if (!v6)
      {
        if (!v7) {
          return v8;
        }
        int v18 = malloc_type_realloc(v8, 8 * (v7 + 1), 0x10040436913F5uLL);
        if (v18)
        {
          v18[v7] = 0;
          return v18;
        }
        goto LABEL_17;
      }
    }
    if (!v7) {
      goto LABEL_19;
    }
LABEL_17:
    uint64_t v19 = v7 - 1;
    do
      free(*((void **)v8 + v19));
    while (v19--);
LABEL_19:
    free(v8);
  }
  return 0;
}

char *sub_213C7F3B4(char *__s, char **a2)
{
  uint64_t v3 = __s;
  if (!__s) {
    uint64_t v3 = *a2;
  }
  int v4 = *v3;
  if (!*v3) {
    return 0;
  }
  int v5 = v3;
  while (v4 == 34)
  {
    uid_t v6 = strchr(v5 + 1, 34);
    if (v6) {
      int v5 = v6 + 1;
    }
    else {
      v5 += strlen(v5);
    }
    int v4 = *v5;
  }
  if (v4 && (v5 += strcspn(v5, " \t"), *v5))
  {
    *int v5 = 0;
    *a2 = v5 + 1;
  }
  else
  {
    *a2 = v5;
  }
  if (*v3 == 34 && *(v5 - 1) == 34 && v3 + 1 < v5)
  {
    ++v3;
    *(v5 - 1) = 0;
  }
  return v3;
}

void *krb5_config_get_strings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_213C7F228(a1, a2, (uint64_t)&a9);
}

void krb5_config_free_strings(void **a1)
{
  if (a1)
  {
    krb5_cccol_cursor v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = a1 + 1;
      do
      {
        free(v2);
        int v4 = *v3++;
        krb5_cccol_cursor v2 = v4;
      }
      while (v4);
    }
  }

  free(a1);
}

BOOL sub_213C7F510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  int v5 = (const char *)sub_213C7F008(a1, a2, &v8, 0, a4);
  if (v5)
  {
    uid_t v6 = v5;
    return !strcasecmp(v5, "yes") || !strcasecmp(v6, "true") || atoi(v6) != 0;
  }
  return a3;
}

BOOL krb5_config_get_BOOL_default(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_213C7F510(a1, a2, a3, (uint64_t)&a9);
}

BOOL krb5_config_get_BOOL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_213C7F510(a1, a2, 0, (uint64_t)&a9);
}

uint64_t sub_213C7F5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v5 = (char *)sub_213C7F008(a1, a2, &v8, 0, a4);
  if (v5 && !krb5_string_to_deltat(v5, (krb5_deltat *)&v7)) {
    return (int)v7;
  }
  return a3;
}

uint64_t krb5_config_get_time_default(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_213C7F5F0(a1, a2, a3, (uint64_t)&a9);
}

uint64_t krb5_config_get_time(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_213C7F5F0(a1, a2, -1, (uint64_t)&a9);
}

uint64_t sub_213C7F6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __endptr = 0;
  int v5 = (const char *)sub_213C7F008(a1, a2, (uint64_t *)&__endptr, 0, a4);
  if (v5)
  {
    uid_t v6 = (char *)v5;
    __endptr = 0;
    unsigned int v7 = strtol(v5, &__endptr, 0);
    if (__endptr == v6) {
      return a3;
    }
    else {
      return v7;
    }
  }
  return a3;
}

uint64_t krb5_config_get_int_default(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_213C7F6A0(a1, a2, a3, (uint64_t)&a9);
}

uint64_t krb5_config_get_int(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_213C7F6A0(a1, a2, 0xFFFFFFFFLL, (uint64_t)&a9);
}

void sub_213C7F760(const __CFString *a1, const __CFString *a2, void *a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    unsigned int v7 = sub_213C7F890(a1);
    if (v7)
    {
      uint64_t v8 = v7;
      CFTypeID v9 = CFGetTypeID(a2);
      if (v9 == CFStringGetTypeID())
      {
        uint64_t v10 = sub_213C7EA50(a3, v8, 0);
        v10[3] = sub_213C7F890(a2);
      }
      else
      {
        CFTypeID v11 = CFGetTypeID(a2);
        if (v11 == CFDictionaryGetTypeID())
        {
          CFIndex v12 = sub_213C7EA50(a3, v8, 1);
          CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_213C7F760, v12 + 3);
        }
        else
        {
          CFTypeID v13 = CFGetTypeID(a2);
          if (v13 == CFArrayGetTypeID())
          {
            v14[0] = a3;
            v14[1] = v8;
            v15.length = CFArrayGetCount((CFArrayRef)a2);
            v15.location = 0;
            CFArrayApplyFunction((CFArrayRef)a2, v15, (CFArrayApplierFunction)sub_213C7F944, v14);
          }
        }
      }
      free(v8);
    }
  }
}

char *sub_213C7F890(const __CFString *a1)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return strdup(CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    CFTypeID v6 = malloc_type_malloc(v5, 0x424BA24CuLL);
    if (v6 && !CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
    {
      free(v6);
      return 0;
    }
    return (char *)v6;
  }
}

CFTypeID sub_213C7F944(const __CFString *a1, uint64_t a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID result = CFStringGetTypeID();
  if (v4 == result)
  {
    CFTypeID v6 = sub_213C7EA50(*(void **)a2, *(char **)(a2 + 8), 0);
    CFTypeID result = (CFTypeID)sub_213C7F890(a1);
    v6[3] = result;
  }
  return result;
}

char *sub_213C7F9A0(char *a1, uint64_t a2)
{
  krb5_cccol_cursor v2 = a1;
  uint64_t v3 = *(FILE **)(a2 + 8);
  if (v3)
  {
    return fgets(a1, 2048, v3);
  }
  else
  {
    CFTypeID v6 = *(const char **)a2;
    if (!**(unsigned char **)a2) {
      return 0;
    }
    size_t v7 = strcspn(v6, "\n");
    if (v6[v7] == 10) {
      uint64_t v8 = (uint64_t)&v6[v7 + 1];
    }
    else {
      uint64_t v8 = (uint64_t)&v6[v7];
    }
    if ((unint64_t)(v8 - (void)v6) >= 0x800) {
      size_t v9 = 2048;
    }
    else {
      size_t v9 = v8 - (void)v6;
    }
    memcpy(v2, v6, v9);
    v2[v9] = 0;
    *(void *)a2 = v8;
    return v2;
  }
}

uint64_t sub_213C7FA6C(uint64_t a1, int *a2, char *a3, void *a4, void *a5, const char **a6)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  CFIndex v12 = a3 - 1;
  uint64_t v13 = MEMORY[0x263EF8318];
  while (1)
  {
    uint64_t v14 = v12[1];
    if (!v12[1] || v14 == 61) {
      break;
    }
    if ((v14 & 0x80) != 0)
    {
      if (__maskrune(v14, 0x4000uLL))
      {
LABEL_9:
        LODWORD(v14) = v12[1];
        break;
      }
    }
    else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    {
      goto LABEL_9;
    }
    ++v12;
  }
  if (!v14) {
    goto LABEL_43;
  }
  CFRange v15 = v12;
  do
  {
    uint64_t v16 = v15[1];
    if (v15[1] < 0) {
      int v17 = __maskrune(v15[1], 0x4000uLL);
    }
    else {
      int v17 = *(_DWORD *)(v13 + 4 * v16 + 60) & 0x4000;
    }
    ++v15;
  }
  while (v17);
  if (v16 != 61)
  {
LABEL_43:
    uint64_t result = 2529639048;
    uint64_t v30 = "missing =";
LABEL_44:
    *a6 = v30;
    return result;
  }
  do
  {
    while (1)
    {
      int v18 = *++v15;
      uint64_t v19 = v18;
      if (v18 < 0) {
        break;
      }
      if ((*(_DWORD *)(v13 + 4 * v19 + 60) & 0x4000) == 0) {
        goto LABEL_21;
      }
    }
  }
  while (__maskrune(v19, 0x4000uLL));
LABEL_21:
  v12[1] = 0;
  if (*v15 != 123)
  {
    uint64_t v31 = sub_213C7EA50(a5, a3, 0);
    if (v31)
    {
      uint64_t v32 = v31;
      int64_t v33 = strlen(v15);
      if (v33 < 1)
      {
LABEL_56:
        uint64_t v37 = &v15[v33];
      }
      else
      {
        do
        {
          uint64_t v34 = v15[v33 - 1];
          if (v15[v33 - 1] < 0)
          {
            if (!__maskrune(v34, 0x4000uLL)) {
              goto LABEL_56;
            }
          }
          else if ((*(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000) == 0)
          {
            goto LABEL_56;
          }
          int64_t v35 = v33 - 1;
          uint64_t v36 = v33-- + 1;
        }
        while (v36 >= 3);
        uint64_t v37 = &v15[v35];
      }
      *uint64_t v37 = 0;
      uint64_t v38 = strdup(v15);
      uint64_t result = 0;
      v32[3] = v38;
      goto LABEL_58;
    }
    goto LABEL_53;
  }
  uint64_t v20 = sub_213C7EA50(a5, a3, 1);
  if (!v20)
  {
LABEL_53:
    uint64_t result = 2529639048;
    uint64_t v30 = "out of memory";
    goto LABEL_44;
  }
  uint64_t v41 = v20;
  unsigned int v40 = a4;
  int v39 = *a2;
  if (!sub_213C7F9A0(__s, a1))
  {
LABEL_54:
    uint64_t result = 2529639048;
    *a2 = v39;
    *a6 = "unclosed {";
    goto LABEL_55;
  }
  while (1)
  {
    ++*a2;
    __s[strcspn(__s, "\r\n")] = 0;
    long long v21 = &v43;
    do
    {
      long long v22 = v21;
      int v23 = v21[1];
      unsigned int v24 = v23;
      if (v23 < 0) {
        int v25 = __maskrune(v23, 0x4000uLL);
      }
      else {
        int v25 = *(_DWORD *)(v13 + 4 * v23 + 60) & 0x4000;
      }
      long long v21 = v22 + 1;
    }
    while (v25);
    if (v24 <= 0x3B && ((1 << v24) & 0x800000800000001) != 0) {
      goto LABEL_33;
    }
    do
    {
      uint64_t v27 = v22[1];
      if (v22[1] < 0) {
        int v28 = __maskrune(v22[1], 0x4000uLL);
      }
      else {
        int v28 = *(_DWORD *)(v13 + 4 * v27 + 60) & 0x4000;
      }
      ++v22;
    }
    while (v28);
    if (!v27) {
      goto LABEL_33;
    }
    if (v27 == 125) {
      break;
    }
    uint64_t result = sub_213C7FA6C(a1, a2, v22, v42, v41 + 3, a6);
    if (result) {
      goto LABEL_55;
    }
LABEL_33:
    if (!sub_213C7F9A0(__s, a1)) {
      goto LABEL_54;
    }
  }
  uint64_t result = 0;
LABEL_55:
  a4 = v40;
  uint64_t v32 = v41;
LABEL_58:
  *a4 = v32;
  return result;
}

uint64_t krb5_init_context_flags(char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = 0;
  *a2 = 0;
  uint64_t v10 = heim_uniq_alloc(0x188uLL, (uint64_t)"krb5-context", (uint64_t)sub_213C7FFE4, a4, a5, a6, a7, a8);
  if (v10)
  {
    uint64_t v11 = v10;
    CFIndex v12 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
    *(void *)(v11 + 328) = v12;
    if (v12)
    {
      pthread_mutex_init(v12, 0);
      pthread_mutex_lock(&stru_26AA93DD8);
      if (dword_2677FE380) {
        *(_DWORD *)(v11 + 360) |= 4u;
      }
      pthread_mutex_unlock(&stru_26AA93DD8);
      if (a1)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t default_config_files = krb5_get_default_config_files(&v16);
        if (default_config_files)
        {
LABEL_13:
          heim_release((CFTypeRef)v11);
          uint64_t v11 = 0;
LABEL_14:
          *a2 = v11;
          return default_config_files;
        }
        uint64_t v14 = (char **)v16;
      }
      uint64_t default_config_files = krb5_set_config_files((void ***)v11, v14);
      krb5_free_config_files((void **)v16);
      if (!default_config_files)
      {
        heim_base_once_f(&qword_26AA95288, (void *)v11, (dispatch_function_t)sub_213C802A0);
        krb5_init_ets(v11);
        *(void *)(v11 + 168) = 0;
        *(_DWORD *)(v11 + 176) = 0;
        krb5_cc_register(v11, (uint64_t)&krb5_fcc_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_mcc_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_xcc_api_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_xcc_ops, 1);
        krb5_cc_register(v11, (uint64_t)&krb5_xcc_temp_api_ops, 1);
        sub_213CB6720(v11);
        *(_DWORD *)(v11 + 256) = 0;
        *(void *)(v11 + 264) = 0;
        krb5_kt_register(v11, (long long *)&off_26C4C9E70);
        krb5_kt_register(v11, (long long *)&off_26C4CA068);
        krb5_kt_register(v11, (long long *)&off_26C4C9ED8);
        uint64_t default_config_files = hx509_context_init((uint64_t *)(v11 + 376));
        if (!default_config_files) {
          goto LABEL_14;
        }
      }
      goto LABEL_13;
    }
    heim_release((CFTypeRef)v11);
  }
  return 12;
}

void sub_213C7FFE4(uint64_t a1)
{
  krb5_cccol_cursor v2 = *(void **)(a1 + 304);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 312);
  if (v3) {
    free(v3);
  }
  CFTypeID v4 = *(void ***)(a1 + 120);
  if (v4) {
    krb5_free_config_files(v4);
  }
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
  heim_release(*(CFTypeRef *)(a1 + 72));
  krb5_config_file_free(a1, *(void ***)(a1 + 136));
  sub_213CBCA3C(*(void **)(a1 + 144));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 264));
  krb5_clear_error_message((krb5_context)a1);
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5) {
    krb5_closelog(a1, v5);
  }
  uint64_t v6 = *(void *)(a1 + 160);
  if (v6) {
    krb5_closelog(a1, v6);
  }
  krb5_set_extra_addresses((krb5_context)a1, 0);
  krb5_set_ignore_addresses((krb5_context)a1, 0);
  if (*(void *)(a1 + 376)) {
    hx509_context_free((uint64_t *)(a1 + 376));
  }
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 328));
  size_t v7 = *(void **)(a1 + 328);

  free(v7);
}

uint64_t krb5_get_default_config_files(void **a1)
{
  if (!a1) {
    return 22;
  }
  if (issuid()) {
    krb5_cccol_cursor v2 = 0;
  }
  else {
    krb5_cccol_cursor v2 = getenv("KRB5_CONFIG");
  }
  if (!v2) {
    krb5_cccol_cursor v2 = off_2677FE350[0];
  }

  return krb5_prepend_config_files(v2, 0, a1);
}

uint64_t krb5_set_config_files(void ***a1, char **a2)
{
  int v17 = 0;
  int v18 = 0;
  if (a2 && (unsigned int v16 = 0, (v3 = *a2) != 0))
  {
    CFTypeID v4 = a2 + 1;
    do
    {
      if (!*v3) {
        break;
      }
      uint64_t v5 = sub_213C803D0(&v17, &v16, v3);
      if (!v5) {
        uint64_t v5 = krb5_config_parse_file_multi((_krb5_context *)a1, *(v4 - 1), &v18);
      }
      if ((v5 > 0xD || ((1 << v5) & 0x2007) == 0) && v5 != -1765328248)
      {
        krb5_free_config_files((void **)v17);
        krb5_config_file_free((uint64_t)a1, v18);
        return v5;
      }
      uint64_t v6 = *v4++;
      uint64_t v3 = v6;
    }
    while (v6);
    size_t v7 = (void **)v17;
  }
  else
  {
    size_t v7 = 0;
  }
  krb5_free_config_files(a1[15]);
  a1[15] = v7;
  krb5_config_file_free((uint64_t)a1, a1[17]);
  a1[17] = v18;
  return sub_213C80498((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14);
}

void krb5_free_config_files(void **a1)
{
  if (a1)
  {
    krb5_cccol_cursor v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = a1 + 1;
      do
      {
        free(v2);
        CFTypeID v4 = *v3++;
        krb5_cccol_cursor v2 = v4;
      }
      while (v4);
    }
  }

  free(a1);
}

void sub_213C802A0(_krb5_context *a1)
{
  notify_register_check("com.apple.Kerberos.configuration-changed", &dword_26AA93DCC);
  notify_register_check("com.apple.ManagedConfiguration.profileListChanged", &dword_26AA93DD0);

  krb5_load_plugins(a1, "krb5", off_2677FE388);
}

uint64_t krb5_init_ets(uint64_t result)
{
  if (!*(void *)(result + 144))
  {
    uint64_t v1 = result;
    krb5_add_et_list(result, (void (*)(uint64_t))initialize_krb5_error_table_r);
    krb5_add_et_list(v1, (void (*)(uint64_t))initialize_asn1_error_table_r);
    krb5_add_et_list(v1, (void (*)(uint64_t))initialize_heim_error_table_r);
    krb5_add_et_list(v1, (void (*)(uint64_t))initialize_k524_error_table_r);
    return krb5_add_et_list(v1, (void (*)(uint64_t))initialize_hx_error_table_r);
  }
  return result;
}

krb5_error_code krb5_init_context(krb5_context *a1)
{
  return krb5_init_context_flags(0, (uint64_t *)a1, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_213C803D0(void **a1, unsigned int *a2, char *__s2)
{
  uint64_t v6 = *a1;
  int v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = (const char **)*a1;
    while (1)
    {
      uint64_t result = strcmp(*v9, __s2);
      if (!result) {
        break;
      }
      ++v9;
      if (!--v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v11 = malloc_type_realloc(v6, 8 * (v7 + 2), 0x10040436913F5uLL);
    if (v11 && (v12 = v11, *a1 = v11, v13 = strdup(__s2), uint64_t v14 = *a2, (v12[v14] = v13) != 0))
    {
      uint64_t result = 0;
      unsigned int v15 = v14 + 1;
      v12[v15] = 0;
      *a2 = v15;
    }
    else
    {
      return 12;
    }
  }
  return result;
}

uint64_t sub_213C80498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 80) = krb5_config_get_time_default(a1, 0, 300, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  *(void *)(a1 + 88) = krb5_config_get_time_default(a1, 0, 30, v9, v10, v11, v12, v13, (uint64_t)"libdefaults");
  *(void *)(a1 + 96) = krb5_config_get_time_default(a1, 0, 3, v14, v15, v16, v17, v18, (uint64_t)"libdefaults");
  *(void *)(a1 + 352) = krb5_config_get_time_default(a1, 0, 1200, v19, v20, v21, v22, v23, (uint64_t)"libdefaults");
  *(_DWORD *)(a1 + 104) = krb5_config_get_int_default(a1, 0, 3, v24, v25, v26, v27, v28, (uint64_t)"libdefaults");
  *(void *)(a1 + 184) = krb5_config_get_string_default(a1, 0, 0, v29, v30, v31, v32, v33, (uint64_t)"libdefaults");
  if (krb5_config_get_BOOL_default(a1, 0, 0, v34, v35, v36, v37, v38, (uint64_t)"libdefaults")) {
    sub_213C84DCC(a1, 1);
  }
  uint64_t v189 = 0;
  uint64_t result = sub_213C81450((char *)a1, (uint64_t)"default_etypes", &v189, v39, v40, v41, v42, v43);
  if (!result)
  {
    free(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = v189;
    uint64_t result = sub_213C81450((char *)a1, (uint64_t)"default_etypes_des", &v189, v45, v46, v47, v48, v49);
    if (!result)
    {
      free(*(void **)(a1 + 40));
      *(void *)(a1 + 40) = v189;
      uint64_t result = sub_213C81450((char *)a1, (uint64_t)"default_as_etypes", &v189, v50, v51, v52, v53, v54);
      if (!result)
      {
        free(*(void **)(a1 + 48));
        *(void *)(a1 + 48) = v189;
        uint64_t result = sub_213C81450((char *)a1, (uint64_t)"default_tgs_etypes", &v189, v55, v56, v57, v58, v59);
        if (!result)
        {
          free(*(void **)(a1 + 56));
          *(void *)(a1 + 56) = v189;
          uint64_t result = sub_213C81450((char *)a1, (uint64_t)"permitted_enctypes", &v189, v60, v61, v62, v63, v64);
          if (!result)
          {
            free(*(void **)(a1 + 64));
            *(void *)(a1 + 64) = v189;
            if (issuid() || (uint64_t string_default = (uint64_t)getenv("KRB5_KTNAME")) == 0) {
              uint64_t string_default = krb5_config_get_string_default(a1, 0, (uint64_t)"FILE:/etc/krb5.keytab", v65, v66, v67, v68, v69, (uint64_t)"libdefaults");
            }
            *(void *)(a1 + 208) = string_default;
            *(void *)(a1 + 216) = krb5_config_get_string_default(a1, 0, 0, v65, v66, v67, v68, v69, (uint64_t)"libdefaults");
            *(void *)(a1 + 192) = krb5_config_get_string_default(a1, 0, (uint64_t)"%Y-%m-%dT%H:%M:%S", v71, v72, v73, v74, v75, (uint64_t)"libdefaults");
            *(void *)(a1 + 272) = krb5_config_get_string_default(a1, 0, (uint64_t)"%Y-%m-%d", v76, v77, v78, v79, v80, (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 200) = krb5_config_get_BOOL_default(a1, 0, 0, v81, v82, v83, v84, v85, (uint64_t)"libdefaults");
            string = (const char *)krb5_config_get_string(a1, 0, v86, v87, v88, v89, v90, v91, (uint64_t)"libdefaults");
            if (string) {
              sub_213CB9574(*(char **)(a1 + 184), string);
            }
            heim_release(*(CFTypeRef *)(a1 + 72));
            *(void *)(a1 + 72) = 0;
            krb5_set_extra_addresses((krb5_context)a1, 0);
            strings = (char **)krb5_config_get_strings(a1, 0, v93, v94, v95, v96, v97, v98, (uint64_t)"libdefaults");
            v100 = (void **)strings;
            v187 = 0;
            uint64_t v188 = 0;
            if (strings)
            {
              v101 = *strings;
              if (*strings)
              {
                v102 = strings + 1;
                do
                {
                  if (!krb5_parse_address((_krb5_context *)a1, v101, (uint64_t)&v187))
                  {
                    krb5_add_extra_addresses((_krb5_context *)a1, &v187);
                    krb5_free_addresses((krb5_context)a1, &v187);
                  }
                  v103 = *v102++;
                  v101 = v103;
                }
                while (v103);
              }
            }
            krb5_config_free_strings(v100);
            krb5_set_ignore_addresses((krb5_context)a1, 0);
            v110 = (char **)krb5_config_get_strings(a1, 0, v104, v105, v106, v107, v108, v109, (uint64_t)"libdefaults");
            v111 = (void **)v110;
            v187 = 0;
            uint64_t v188 = 0;
            if (v110)
            {
              v112 = *v110;
              if (*v110)
              {
                v113 = v110 + 1;
                do
                {
                  if (!krb5_parse_address((_krb5_context *)a1, v112, (uint64_t)&v187))
                  {
                    krb5_add_ignore_addresses((_krb5_context *)a1, &v187);
                    krb5_free_addresses((krb5_context)a1, &v187);
                  }
                  v114 = *v113++;
                  v112 = v114;
                }
                while (v114);
              }
            }
            krb5_config_free_strings(v111);
            *(_DWORD *)(a1 + 240) = krb5_config_get_BOOL_default(a1, 0, 1, v115, v116, v117, v118, v119, (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 252) = krb5_config_get_int_default(a1, 0, 0, v120, v121, v122, v123, v124, (uint64_t)"libdefaults");
            BOOL BOOL_default = krb5_config_get_BOOL_default(a1, 0, 1, v125, v126, v127, v128, v129, (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 244) = BOOL_default;
            *(_DWORD *)(a1 + 244) = krb5_config_get_BOOL_default(a1, 0, BOOL_default, v131, v132, v133, v134, v135, (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 336) = krb5_config_get_int_default(a1, 0, 1400, v136, v137, v138, v139, v140, (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 340) = krb5_config_get_int_default(a1, 0, 1024000, v141, v142, v143, v144, v145, (uint64_t)"libdefaults");
            *(_DWORD *)(a1 + 344) = krb5_config_get_int_default(a1, 0, 5, v146, v147, v148, v149, v150, (uint64_t)"libdefaults");
            if (krb5_config_get_BOOL_default(a1, 0, 1, v151, v152, v153, v154, v155, (uint64_t)"libdefaults")) {
              *(_DWORD *)(a1 + 360) |= 1u;
            }
            if (krb5_config_get_BOOL_default(a1, 0, 1, v156, v157, v158, v159, v160, (uint64_t)"libdefaults")) {
              *(_DWORD *)(a1 + 360) |= 2u;
            }
            v167 = *(void **)(a1 + 304);
            if (v167) {
              free(v167);
            }
            *(void *)(a1 + 304) = 0;
            *(_DWORD *)(a1 + 320) = 0;
            v168 = (void **)krb5_config_get_strings(a1, 0, v161, v162, v163, v164, v165, v166, (uint64_t)"logging");
            uint64_t v175 = *(void *)(a1 + 160);
            if (v168)
            {
              v176 = v168;
              if (v175) {
                krb5_closelog(a1, v175);
              }
              krb5_initlog((_krb5_context *)a1, "libkrb5", (char ***)(a1 + 160));
              v177 = (char *)*v176;
              if (*v176)
              {
                v178 = (char **)(v176 + 1);
                do
                {
                  krb5_addlog_dest((_krb5_context *)a1, *(const char ***)(a1 + 160), v177);
                  v179 = *v178++;
                  v177 = v179;
                }
                while (v179);
              }
              krb5_config_free_strings(v176);
            }
            else if (!v175)
            {
              v187 = 0;
              if (issuid()
                || (v183 = getenv("KRB5_TRACE")) == 0
                || (asprintf((char **)&v187, "0-/FILE:%s", v183), !v187))
              {
                CFBooleanRef v180 = geteuid() && krb5_homedir_access(0)
                     ? (const __CFBoolean *)CFPreferencesCopyAppValue(@"KerberosDebugLevel", @".GlobalPreferences"): sub_213C8158C();
                CFBooleanRef v181 = v180;
                if (v180)
                {
                  BOOL valuePtr = 1;
                  CFTypeID v182 = CFGetTypeID(v180);
                  if (v182 == CFBooleanGetTypeID())
                  {
                    BOOL valuePtr = CFBooleanGetValue(v181) != 0;
                  }
                  else
                  {
                    CFTypeID v184 = CFGetTypeID(v181);
                    if (v184 == CFNumberGetTypeID()) {
                      CFNumberGetValue(v181, kCFNumberIntType, &valuePtr);
                    }
                  }
                  CFRelease(v181);
                  asprintf((char **)&v187, "0-%d/OSLOG:normal:libkrb5", valuePtr);
                }
              }
              krb5_initlog((_krb5_context *)a1, "libkrb5", (char ***)(a1 + 160));
              v185 = *(const char ***)(a1 + 160);
              if (v187)
              {
                krb5_addlog_dest((_krb5_context *)a1, v185, (char *)v187);
                free(v187);
              }
              else
              {
                krb5_addlog_dest((_krb5_context *)a1, v185, "0-10/OSLOG:normal:libkrb5");
              }
            }
            uint64_t result = krb5_config_get_string(a1, 0, v169, v170, v171, v172, v173, v174, (uint64_t)"libdefaults");
            if (!result)
            {
              if (issuid()) {
                return 0;
              }
              uint64_t result = (uint64_t)getenv("KRB5_CHECK_RD_REQ_SERVER");
              if (!result) {
                return result;
              }
            }
            uint64_t result = strcasecmp((const char *)result, "ignore");
            if (!result)
            {
              *(_DWORD *)(a1 + 360) |= 0x10u;
              return result;
            }
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t krb5_prepend_config_files_default(const char *a1, void *a2)
{
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t default_config_files = krb5_get_default_config_files(&v7);
  if (!default_config_files)
  {
    uint64_t default_config_files = krb5_prepend_config_files(a1, (char **)v7, &v6);
    krb5_free_config_files((void **)v7);
    if (!default_config_files) {
      *a2 = v6;
    }
  }
  return default_config_files;
}

int *krb5_kerberos_enctypes(_krb5_context *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = dword_213CDA338;
  while (!krb5_enctype_valid(a1, (char *)dword_213CDA338[v2]))
  {
    if (++v2 == 7) {
      return v3;
    }
  }
  return (int *)&unk_213CDA328;
}

uint64_t krb5_set_default_in_tkt_etypes(krb5_context a1, unsigned int *a2)
{
  uint64_t v7 = 0;
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v3 = sub_213C80DA4(a1, a2, &v7);
  if (v3) {
    return v3;
  }
  uint64_t v4 = v7;
  if (!v7)
  {
LABEL_7:
    uint64_t v3 = 2529639062;
    krb5_set_error_message(a1, -1765328234, "entypes not supported");
    return v3;
  }
  uint64_t v5 = (void *)*((void *)a1 + 4);
  if (v5) {
    free(v5);
  }
  uint64_t v3 = 0;
  *((void *)a1 + 4) = v4;
  return v3;
}

uint64_t sub_213C80DA4(_krb5_context *a1, unsigned int *a2, void *a3)
{
  size_t v6 = 0;
  while (a2[v6++])
    ;
  uint64_t v8 = malloc_type_calloc(v6, 4uLL, 0x100004052888210uLL);
  if (v8)
  {
    uint64_t v9 = v8;
    unint64_t v10 = *a2;
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = 0;
    uint64_t v12 = a2 + 1;
    do
    {
      if (!krb5_enctype_valid(a1, (char *)v10)) {
        v9[v11++] = *(v12 - 1);
      }
      unsigned int v13 = *v12++;
      unint64_t v10 = v13;
    }
    while (v13);
    v9[v11] = 0;
    if (v11)
    {
      uint64_t v14 = 0;
      *a3 = v9;
    }
    else
    {
LABEL_14:
      uint64_t v14 = 2529639062;
      free(v9);
      krb5_set_error_message(a1, -1765328234, "no valid enctype set");
    }
    return v14;
  }
  else
  {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_get_default_in_tkt_etypes(_krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = 0;
  switch(a2)
  {
    case 2:
      uint64_t v9 = (unsigned int *)*((void *)a1 + 6);
      if (v9) {
        goto LABEL_10;
      }
      break;
    case 4:
      uint64_t v9 = (unsigned int *)*((void *)a1 + 7);
      if (v9) {
        goto LABEL_10;
      }
      break;
    case 0xB:
      break;
    default:
      heim_abort("pdu contant not as expected:pdu_type == KRB5_PDU_AS_REQUEST || pdu_type == KRB5_PDU_TGS_REQUEST || pdu_type == KRB5_PDU_NONE", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v11);
  }
  uint64_t v9 = (unsigned int *)*((void *)a1 + 4);
  if (!v9) {
    uint64_t v9 = (unsigned int *)&unk_213CDA358;
  }
LABEL_10:
  uint64_t result = sub_213C80DA4(a1, v9, &v12);
  if (!result)
  {
    uint64_t result = 0;
    *a3 = v12;
  }
  return result;
}

uint64_t krb5_set_use_admin_kdc(uint64_t result, int a2)
{
  *(_DWORD *)(result + 224) = a2;
  return result;
}

uint64_t krb5_get_use_admin_kdc(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t krb5_add_extra_addresses(_krb5_context *a1, krb5_address **a2)
{
  uint64_t v3 = *((void *)a1 + 29);
  if (v3) {
    return krb5_append_addresses(a1, v3, (unsigned int *)a2);
  }
  else {
    return krb5_set_extra_addresses(a1, a2);
  }
}

uint64_t krb5_set_extra_addresses(krb5_context a1, krb5_address **a2)
{
  uint64_t v4 = (krb5_address **)*((void *)a1 + 29);
  if (v4) {
    krb5_free_addresses(a1, v4);
  }
  uint64_t v5 = (krb5_address ***)*((void *)a1 + 29);
  if (!a2)
  {
    if (!v5) {
      return 0;
    }
    free(*((void **)a1 + 29));
    uint64_t v7 = 0;
    *((void *)a1 + 29) = 0;
    return v7;
  }
  if (!v5)
  {
    uint64_t v5 = (krb5_address ***)malloc_type_malloc(0x10uLL, 0x1020040D5A9D86FuLL);
    *((void *)a1 + 29) = v5;
    if (!v5)
    {
      uint64_t v7 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v7;
    }
  }

  return krb5_copy_addresses(a1, a2, v5);
}

uint64_t krb5_get_extra_addresses(_krb5_context *a1, krb5_address ***a2)
{
  uint64_t v3 = (krb5_address *const *)*((void *)a1 + 29);
  if (v3) {
    return krb5_copy_addresses(a1, v3, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return 0;
}

uint64_t krb5_add_ignore_addresses(_krb5_context *a1, krb5_address **a2)
{
  uint64_t v3 = *((void *)a1 + 37);
  if (v3) {
    return krb5_append_addresses(a1, v3, (unsigned int *)a2);
  }
  else {
    return krb5_set_ignore_addresses(a1, a2);
  }
}

uint64_t krb5_set_ignore_addresses(krb5_context a1, krb5_address **a2)
{
  uint64_t v4 = (krb5_address **)*((void *)a1 + 37);
  if (v4) {
    krb5_free_addresses(a1, v4);
  }
  uint64_t v5 = (krb5_address ***)*((void *)a1 + 37);
  if (!a2)
  {
    if (!v5) {
      return 0;
    }
    free(*((void **)a1 + 37));
    uint64_t v7 = 0;
    *((void *)a1 + 37) = 0;
    return v7;
  }
  if (!v5)
  {
    uint64_t v5 = (krb5_address ***)malloc_type_malloc(0x10uLL, 0x1020040D5A9D86FuLL);
    *((void *)a1 + 37) = v5;
    if (!v5)
    {
      uint64_t v7 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v7;
    }
  }

  return krb5_copy_addresses(a1, a2, v5);
}

uint64_t krb5_get_ignore_addresses(_krb5_context *a1, krb5_address ***a2)
{
  uint64_t v3 = (krb5_address *const *)*((void *)a1 + 37);
  if (v3) {
    return krb5_copy_addresses(a1, v3, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return 0;
}

uint64_t krb5_set_fcache_version(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 252) = a2;
  return 0;
}

uint64_t krb5_get_fcache_version(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 252);
  return 0;
}

krb5_BOOLean krb5_is_thread_safe(void)
{
  return 1;
}

uint64_t krb5_set_dns_canonicalize_hostname(uint64_t result, int a2)
{
  *(_DWORD *)(result + 360) = *(_DWORD *)(result + 360) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

uint64_t krb5_get_dns_canonicalize_hostname(uint64_t a1)
{
  return *(_DWORD *)(a1 + 360) & 1;
}

uint64_t krb5_get_kdc_sec_offset(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 108);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 112);
  }
  return 0;
}

uint64_t krb5_set_kdc_sec_offset(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 108) = a2;
  if ((a3 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 112) = a3;
  }
  return 0;
}

uint64_t krb5_get_max_time_skew(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t krb5_set_max_time_skew(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t _krb5_init_etype(_krb5_context *a1, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5)
  {
    uint64_t result = sub_213C80DA4(a1, a5, a4);
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = krb5_get_default_in_tkt_etypes(a1, a2, a4, (uint64_t)a4, 0, a6, a7, a8);
    if (result) {
      return result;
    }
  }
  if (a3)
  {
    unsigned int v11 = 0;
    uint64_t v12 = *a4;
    do
      *a3 = v11;
    while (*(_DWORD *)(v12 + 4 * v11++));
  }
  return 0;
}

uint64_t krb5_homedir_access(uint64_t a1)
{
  if (!geteuid() || a1 && (*(unsigned char *)(a1 + 360) & 4) == 0) {
    return 0;
  }
  pthread_mutex_lock(&stru_26AA93DD8);
  uint64_t v2 = dword_2677FE380;
  pthread_mutex_unlock(&stru_26AA93DD8);
  return v2;
}

uint64_t krb5_set_home_dir_access(uint64_t a1, int a2)
{
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 360);
    uint64_t v4 = (v3 >> 2) & 1;
    if (a2) {
      unsigned int v5 = v3 | 4;
    }
    else {
      unsigned int v5 = v3 & 0xFFFFFFFB;
    }
    *(_DWORD *)(a1 + 360) = v5;
  }
  else
  {
    pthread_mutex_lock(&stru_26AA93DD8);
    uint64_t v4 = dword_2677FE380;
    dword_2677FE380 = a2;
    pthread_mutex_unlock(&stru_26AA93DD8);
  }
  return v4;
}

uint64_t krb5_reload_config(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v22 = 0;
  if (a3) {
    *a3 = 0;
  }
  int check = 0;
  if (dword_26AA93DCC == -1 || (!notify_check(dword_26AA93DCC, &check) ? (BOOL v5 = check == 0) : (BOOL v5 = 1), v5))
  {
    if (dword_26AA93DD0 == -1) {
      return 0;
    }
    if (notify_check(dword_26AA93DD0, &check) || check == 0) {
      return 0;
    }
  }
  *(void *)(a1 + 128) = time(0);
  uint64_t v7 = *(char ***)(a1 + 120);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    unsigned int v9 = 1;
    while (1)
    {
      uint64_t v10 = krb5_config_parse_file_multi((_krb5_context *)a1, v8, &v22);
      BOOL v11 = v10 > 0xD || ((1 << v10) & 0x2007) == 0;
      if (v11 && v10 != -1765328248) {
        break;
      }
      uint64_t v8 = *(char **)(*(void *)(a1 + 120) + 8 * v9++);
      if (!v8) {
        goto LABEL_26;
      }
    }
    uint64_t v21 = v10;
    krb5_config_file_free(a1, v22);
  }
  else
  {
LABEL_26:
    if (a3) {
      *a3 = 1;
    }
    krb5_config_file_free(a1, *(void ***)(a1 + 136));
    *(void *)(a1 + 136) = v22;
    return sub_213C80498(a1, v13, v14, v15, v16, v17, v18, v19);
  }
  return v21;
}

uint64_t sub_213C81450(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  strings = (void **)krb5_config_get_strings((uint64_t)a1, 0, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  if (!strings)
  {
    uint64_t v16 = 0;
LABEL_15:
    uint64_t v18 = 0;
    *a3 = v16;
    return v18;
  }
  BOOL v11 = strings;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    uint64_t v14 = strings[v13++];
    v12 += 4;
  }
  while (v14);
  uint64_t v15 = malloc_type_malloc(v12 & 0x3FFFFFFFCLL, 0x100004052888210uLL);
  if (v15)
  {
    uint64_t v16 = v15;
    if (v13 == 1)
    {
      int v17 = 0;
    }
    else
    {
      uint64_t v19 = 0;
      int v17 = 0;
      uint64_t v20 = v13 - 1;
      do
      {
        if (!krb5_string_to_enctype(a1, (krb5_enctype *)v11[v19])
          && !krb5_enctype_valid((_krb5_context *)a1, 0))
        {
          v16[v17++] = 0;
        }
        ++v19;
      }
      while (v20 != v19);
    }
    v16[v17] = 0;
    krb5_config_free_strings(v11);
    goto LABEL_15;
  }
  krb5_config_free_strings(v11);
  uint64_t v18 = 12;
  krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
  return v18;
}

__CFReadStream *sub_213C8158C()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFURLRef v1 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x263EFFB08], @"/Library/Managed Preferences/mobile/.GlobalPreferences.plist", kCFURLPOSIXPathStyle, 0);
  if (!v1) {
    return 0;
  }
  CFURLRef v2 = v1;
  unsigned int v3 = CFReadStreamCreateWithFile(v0, v1);
  CFRelease(v2);
  if (!v3) {
    return v3;
  }
  if (!CFReadStreamOpen(v3))
  {
    uint64_t v7 = v3;
LABEL_11:
    CFRelease(v7);
    return 0;
  }
  CFErrorRef error = 0;
  uint64_t v4 = (void *)CFPropertyListCreateWithStream(v0, v3, 0, 0, 0, &error);
  CFRelease(v3);
  if (!v4) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(v4);
  if (v5 != CFDictionaryGetTypeID())
  {
    uint64_t v7 = (__CFReadStream *)v4;
    goto LABEL_11;
  }
  Value = (__CFReadStream *)CFDictionaryGetValue((CFDictionaryRef)v4, @"KerberosDebugLevel");
  unsigned int v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v4);
  return v3;
}

uint64_t krb5_copy_host_realm(_krb5_context *a1, const char **a2, char *const **a3)
{
  if (*a2)
  {
    uint64_t v6 = 1;
    while (a2[v6++])
      ;
    size_t v8 = v6;
  }
  else
  {
    size_t v8 = 1;
  }
  unsigned int v9 = (char *const *)malloc_type_calloc(v8, 8uLL, 0x10040436913F5uLL);
  *a3 = v9;
  if (!v9)
  {
LABEL_13:
    uint64_t v16 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v16;
  }
  uint64_t v10 = v9;
  BOOL v11 = *a2;
  if (*a2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a2 + 1;
    while (1)
    {
      uint64_t v14 = strdup(v11);
      uint64_t v15 = v12;
      v10[v15] = v14;
      uint64_t v10 = *a3;
      if (!(*a3)[v15]) {
        break;
      }
      BOOL v11 = (const char *)v13[v12++];
      if (!v11) {
        return 0;
      }
    }
    krb5_free_host_realm(a1, *a3);
    goto LABEL_13;
  }
  return 0;
}

void _krb5_crc_init_table()
{
  if ((byte_267800FB0 & 1) == 0)
  {
    for (uint64_t i = 0; i != 256; ++i)
    {
      int v1 = -8;
      unsigned int v2 = i;
      do
      {
        if (v2) {
          unsigned int v2 = (v2 >> 1) ^ 0xEDB88320;
        }
        else {
          v2 >>= 1;
        }
      }
      while (!__CFADD__(v1++, 1));
      dword_267800FB4[i] = v2;
    }
    byte_267800FB0 = 1;
  }
}

uint64_t _krb5_crc_update(char *a1, uint64_t a2, uint64_t a3)
{
  for (; a2; --a2)
  {
    char v3 = *a1++;
    a3 = dword_267800FB4[(v3 ^ a3)] ^ (a3 >> 8);
  }
  return a3;
}

void krb5_free_cred_contents(krb5_context a1, krb5_creds *a2)
{
  *(void *)&a2->krb5_magic magic = 0;
  krb5_free_principal(a1, a2->client);
  a2->client = 0;
  krb5_free_keyblock_contents(a1, (krb5_keyblock *)&a2->server);
  krb5_data_free(&a2->addresses);
  krb5_data_free(&a2->ticket.data);
  sub_213CBB19C((uint64_t)&a2->second_ticket.data);
  krb5_free_addresses(a1, (krb5_address **)&a2[1]);
  *(_OWORD *)&a2->krb5_magic magic = 0u;
  *(_OWORD *)&a2->server = 0u;
  *(_OWORD *)&a2->keyblock.length = 0u;
  a2->times = 0u;
  *(_OWORD *)&a2->is_skey = 0u;
  a2->ticket = 0u;
  a2->second_ticket = 0u;
  *(_OWORD *)&a2->authdata = 0u;
  *(_OWORD *)&a2[1].client = 0u;
}

uint64_t krb5_copy_creds_contents(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v6 = krb5_copy_principal(a1, *(krb5_const_principal *)a2, (krb5_principal *)a3);
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v6 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 8), (krb5_principal *)(a3 + 8));
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v6 = krb5_copy_keyblock_contents(a1, (const krb5_keyblock *)(a2 + 16), (krb5_keyblock *)(a3 + 16));
  if (v6
    || (long long v7 = *(_OWORD *)(a2 + 40),
        *(_OWORD *)(a3 + 56) = *(_OWORD *)(a2 + 56),
        *(_OWORD *)(a3 + 40) = v7,
        uint64_t v6 = krb5_data_copy((void *)(a3 + 72), *(const void **)(a2 + 80), *(void *)(a2 + 72)),
        v6)
    || (uint64_t v6 = krb5_data_copy((void *)(a3 + 88), *(const void **)(a2 + 96), *(void *)(a2 + 88)), v6)
    || (uint64_t v6 = sub_213CBB1AC(), v6)
    || (uint64_t v6 = krb5_copy_addresses(a1, (krb5_address *const *)(a2 + 120), (krb5_address ***)(a3 + 120)), v6))
  {
LABEL_8:
    krb5_free_cred_contents(a1, (krb5_creds *)a3);
  }
  else
  {
    *(_DWORD *)(a3 + 136) = *(_DWORD *)(a2 + 136);
  }
  return v6;
}

krb5_error_code krb5_copy_creds(krb5_context a1, const krb5_creds *a2, krb5_creds **a3)
{
  uint64_t v6 = (krb5_creds *)malloc_type_malloc(0x90uLL, 0x10A0040AAA52FDDuLL);
  if (v6)
  {
    *(_OWORD *)&v6->authdata = 0u;
    *(_OWORD *)&v6[1].client = 0u;
    v6->ticket = 0u;
    v6->second_ticket = 0u;
    v6->times = 0u;
    *(_OWORD *)&v6->is_skey = 0u;
    *(_OWORD *)&v6->server = 0u;
    *(_OWORD *)&v6->keyblock.length = 0u;
    *(_OWORD *)&v6->krb5_magic magic = 0u;
    *a3 = v6;
    return krb5_copy_creds_contents(a1, (uint64_t)a2, (uint64_t)v6);
  }
  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12;
  }
}

void krb5_free_creds(krb5_context a1, krb5_creds *a2)
{
}

uint64_t krb5_compare_creds(krb5_context a1, int a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(const krb5_principal_data **)(a3 + 8);
  if (v8)
  {
    unsigned int v9 = *(const krb5_principal_data **)(a4 + 8);
    if ((a2 & 0xA0000000) != 0)
    {
      uint64_t result = krb5_principal_compare_any_realm((uint64_t)a1, (uint64_t)v8, (uint64_t)v9);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = krb5_principal_compare(a1, v8, v9);
      if (!result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = 1;
  }
  BOOL v11 = *(const krb5_principal_data **)a3;
  if (*(void *)a3)
  {
    uint64_t v12 = *(const krb5_principal_data **)a4;
    if (a2 < 0)
    {
      uint64_t result = krb5_principal_compare_any_realm((uint64_t)a1, (uint64_t)v11, (uint64_t)v12);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = krb5_principal_compare(a1, v11, v12);
      if (!result) {
        return result;
      }
    }
  }
  if ((a2 & 0x40000000) != 0)
  {
    if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a4 + 16)) {
      return 0;
    }
    uint64_t result = 1;
  }
  if ((a2 & 0x10000000) != 0)
  {
    if (*(_DWORD *)(a3 + 136) != *(_DWORD *)(a4 + 136)) {
      return 0;
    }
    uint64_t result = 1;
  }
  if ((a2 & 0x8000000) != 0)
  {
    if ((*(_DWORD *)(a3 + 136) & ~*(_DWORD *)(a4 + 136)) != 0) {
      return 0;
    }
    uint64_t result = 1;
  }
  if ((a2 & 0x4000000) == 0)
  {
    if ((a2 & 0x2000000) == 0) {
      goto LABEL_23;
    }
LABEL_34:
    if (*(void *)(a3 + 64) > *(void *)(a4 + 64) || *(void *)(a3 + 56) > *(void *)(a4 + 56)) {
      return 0;
    }
    uint64_t result = 1;
    if ((a2 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_37;
  }
  if (*(void *)(a3 + 48) != *(void *)(a4 + 48)
    || *(void *)(a3 + 40) != *(void *)(a4 + 40)
    || *(void *)(a3 + 56) != *(void *)(a4 + 56)
    || *(void *)(a3 + 64) != *(void *)(a4 + 64))
  {
    return 0;
  }
  uint64_t result = 1;
  if ((a2 & 0x2000000) != 0) {
    goto LABEL_34;
  }
LABEL_23:
  if ((a2 & 0x1000000) == 0) {
    goto LABEL_24;
  }
LABEL_37:
  if (*(_DWORD *)(a3 + 104) != *(_DWORD *)(a4 + 104)) {
    return 0;
  }
  if (*(_DWORD *)(a3 + 104))
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = *(void *)(a3 + 112);
      uint64_t v16 = *(void *)(a4 + 112);
      if (*(_DWORD *)(v15 + v13) != *(_DWORD *)(v16 + v13) || krb5_data_cmp(v15 + v13 + 8, v16 + v13 + 8)) {
        return 0;
      }
      ++v14;
      v13 += 24;
      if (v14 >= *(unsigned int *)(a3 + 104))
      {
        uint64_t result = 1;
        break;
      }
    }
  }
LABEL_24:
  if ((a2 & 0x800000) == 0) {
    goto LABEL_27;
  }
  if (krb5_data_cmp(a3 + 88, a4 + 88)) {
    return 0;
  }
  uint64_t result = 1;
LABEL_27:
  if ((a2 & 0x400000) != 0) {
    return (*(void *)(a3 + 88) != 0) ^ (*(void *)(a4 + 88) == 0);
  }
  return result;
}

uint64_t krb5_enctype_keysize(_krb5_context *a1, char *a2, void *a3)
{
  uint64_t v3 = dword_2677FE508;
  if (dword_2677FE508 < 1) {
    return sub_213C81D18(a1, a2);
  }
  for (uint64_t i = &off_2677FE4D8; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v3) {
      return sub_213C81D18(a1, a2);
    }
  }
  *a3 = *(void *)(*((void *)*i + 5) + 24);
  return 0;
}

_DWORD *sub_213C81CD4(int a1)
{
  uint64_t v1 = dword_2677FE508;
  if (dword_2677FE508 < 1) {
    return 0;
  }
  for (uint64_t i = &off_2677FE4D8; ; ++i)
  {
    uint64_t v3 = (_DWORD *)*i;
    if (*(_DWORD *)*i == a1) {
      break;
    }
    if (!--v1) {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_213C81D18(_krb5_context *a1, char *a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = krb5_enctype_to_string((krb5_enctype)a1, a2, (size_t)&v6);
  if (!v3)
  {
    uint64_t v3 = 2529639062;
    uint64_t v4 = v6;
    krb5_set_error_message(a1, -1765328234, "Encryption type %s not supported", v6);
    free(v4);
  }
  return v3;
}

uint64_t krb5_enctype_keybits(_krb5_context *a1, char *a2, void *a3)
{
  uint64_t v3 = dword_2677FE508;
  if (dword_2677FE508 < 1) {
    return sub_213C81D18(a1, a2);
  }
  for (uint64_t i = &off_2677FE4D8; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v3) {
      return sub_213C81D18(a1, a2);
    }
  }
  *a3 = *(void *)(*((void *)*i + 5) + 16);
  return 0;
}

uint64_t krb5_generate_random_keyblock(_krb5_context *a1, char *a2, uint64_t a3)
{
  int v3 = (int)a2;
  uint64_t v5 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    return sub_213C81D18(a1, a2);
  }
  else
  {
    long long v7 = &off_2677FE4D8;
    while (1)
    {
      size_t v8 = (_DWORD *)*v7;
      if (*(_DWORD *)*v7 == a2) {
        break;
      }
      ++v7;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    uint64_t result = krb5_data_alloc((size_t *)(a3 + 8), *(void *)(*((void *)v8 + 5) + 24));
    if (!result)
    {
      *(_DWORD *)a3 = v3;
      uint64_t v10 = *(void (**)(_krb5_context *, uint64_t))(*((void *)v8 + 5) + 40);
      if (v10) {
        v10(a1, a3);
      }
      else {
        krb5_generate_random_block(*(void *)(a3 + 16), *(void *)(a3 + 8));
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_213C81EB0(uint64_t a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  unint64_t v14 = (char *)malloc_type_malloc(*(void *)(a2 + 16) + a4, 0xCD580FFuLL);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (char *)malloc_type_malloc(*(void *)(a2 + 24) + *(void *)(a2 + 16), 0xBBFCCF0CuLL);
    if (!v16)
    {
      uint64_t v21 = 12;
      int v17 = v15;
LABEL_12:
      free(v17);
      return v21;
    }
    int v17 = v16;
    memset(v15, 54, *(void *)(a2 + 16));
    memset(v17, 92, *(void *)(a2 + 16));
    uint64_t v18 = *a6;
    unint64_t v19 = *(void *)(*a6 + 8);
    if (v19 <= *(void *)(a2 + 16))
    {
      uint64_t v20 = (char **)(v18 + 16);
      if (!v19)
      {
LABEL_11:
        memcpy(&v15[*(void *)(a2 + 16)], a3, a4);
        (*(void (**)(uint64_t, uint64_t *, char *, size_t, uint64_t, uint64_t))(a2 + 40))(a1, a6, v15, *(void *)(a2 + 16) + a4, a5, a7);
        memcpy(&v17[*(void *)(a2 + 16)], *(const void **)(a7 + 16), *(void *)(a7 + 8));
        (*(void (**)(uint64_t, uint64_t *, char *, void, uint64_t, uint64_t))(a2 + 40))(a1, a6, v17, *(void *)(a2 + 24) + *(void *)(a2 + 16), a5, a7);
        bzero(v15, *(void *)(a2 + 16) + a4);
        free(v15);
        bzero(v17, *(void *)(a2 + 24) + *(void *)(a2 + 16));
        uint64_t v21 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t *, void))(a2 + 40))(a1, a6, *(void *)(v18 + 16));
      uint64_t v20 = (char **)(a7 + 16);
      unint64_t v19 = *(void *)(a7 + 8);
      if (!v19) {
        goto LABEL_11;
      }
    }
    uint64_t v22 = *v20;
    uint64_t v23 = v15;
    uint64_t v24 = v17;
    do
    {
      *v23++ ^= *v22;
      char v25 = *v22++;
      *v24++ ^= v25;
      --v19;
    }
    while (v19);
    goto LABEL_11;
  }
  return 12;
}

uint64_t krb5_hmac(krb5_context a1, int a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1)
  {
LABEL_5:
    uint64_t v11 = 2529639065;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a2);
  }
  else
  {
    unsigned int v9 = (_DWORD **)&off_2677FE498;
    while (1)
    {
      uint64_t v10 = *v9;
      if (**v9 == a2) {
        break;
      }
      ++v9;
      if (!--v8) {
        goto LABEL_5;
      }
    }
    uint64_t v13 = a6;
    unint64_t v14 = 0;
    uint64_t v11 = sub_213C81EB0((uint64_t)a1, (uint64_t)v10, a3, a4, a5, &v13, a7);
    if (v14) {
      krb5_free_data(a1, v14);
    }
  }
  return v11;
}

_DWORD *sub_213C82148(int a1)
{
  uint64_t v1 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1) {
    return 0;
  }
  for (uint64_t i = &off_2677FE498; ; ++i)
  {
    int v3 = (_DWORD *)*i;
    if (*(_DWORD *)*i == a1) {
      break;
    }
    if (!--v1) {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_213C8218C(_krb5_context *a1, uint64_t *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v9 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1)
  {
LABEL_5:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = (_DWORD **)&off_2677FE498;
    while (1)
    {
      uint64_t v11 = *v10;
      if (**v10 == 14) {
        break;
      }
      ++v10;
      if (!--v9) {
        goto LABEL_5;
      }
    }
  }
  __src = &v15;
  long long v13 = xmmword_213CDA380;
  if (sub_213C81EB0((uint64_t)a1, (uint64_t)v11, a3, a4, a5, a2, (uint64_t)&v13)) {
    krb5_abortx(a1, "hmac failed");
  }
  memcpy(*(void **)(a6 + 16), __src, *(void *)(a6 + 8));
  return 0;
}

uint64_t sub_213C82268(_krb5_context *a1)
{
  uint64_t result = CCDigest();
  if (result) {
    krb5_abortx(a1, "sha1 checksum failed");
  }
  return result;
}

uint64_t krb5_create_checksum(krb5_context a1, _DWORD **a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4)
  {
    uint64_t v12 = dword_2677FE4D0;
    if (dword_2677FE4D0 >= 1)
    {
      long long v13 = (int **)&off_2677FE498;
      do
      {
        unint64_t v14 = *v13;
        if (**v13 == a4) {
          goto LABEL_11;
        }
        ++v13;
      }
      while (--v12);
    }
LABEL_14:
    uint64_t v16 = 2529639065;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a4);
    return v16;
  }
  if (!a2) {
    goto LABEL_14;
  }
  unint64_t v14 = (int *)*((void *)*a2 + 7);
  if (!v14)
  {
    unint64_t v14 = (int *)*((void *)*a2 + 6);
    if (!v14) {
      goto LABEL_14;
    }
  }
  a4 = *v14;
LABEL_11:
  if (a4 == -138 && *a2[1] == 23)
  {
    unsigned int v18 = a3;
    sub_213CB4698((uint64_t)a1, (int *)&v18);
    uint64_t v15 = v18;
  }
  else
  {
    uint64_t v15 = (a3 << 8) | 0x99;
    unsigned int v18 = (a3 << 8) | 0x99;
  }
  return sub_213C823E0(a1, (uint64_t)v14, (uint64_t)a2, v15, a5, a6, a7);
}

uint64_t sub_213C823E0(krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8 = *(_DWORD *)(a2 + 32);
  if ((v8 & 0x40) != 0)
  {
    uint64_t v14 = 2529639065;
    krb5_clear_error_message(a1);
    return v14;
  }
  if (!a3 && (v8 & 1) != 0)
  {
    uint64_t v14 = 2529639065;
    krb5_set_error_message(a1, -1765328231, "Checksum type %s is keyed but no crypto context (key) was passed in", *(const char **)(a2 + 8));
    return v14;
  }
  uint64_t v18 = 0;
  if (v8)
  {
    uint64_t v14 = sub_213C854A8(a1, a3, a4, a2, &v18);
    if (v14) {
      return v14;
    }
  }
  *(_DWORD *)a7 = *(_DWORD *)a2;
  uint64_t v14 = krb5_data_alloc((size_t *)(a7 + 8), *(void *)(a2 + 24));
  if (v14) {
    return v14;
  }
  uint64_t v16 = *(uint64_t (**)(krb5_context, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 40);
  uint64_t v17 = v18;

  return v16(a1, v17, a5, a6, a4, a7);
}

krb5_error_code krb5_verify_checksum(krb5_context context, krb5_cksumtype ctype, const krb5_checksum *cksum, krb5_const_pointer in, size_t in_length, krb5_const_pointer seed, size_t seed_length)
{
  int v8 = *(_DWORD *)seed;
  uint64_t v9 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1)
  {
LABEL_5:
    krb5_error_code v15 = -1765328231;
    krb5_set_error_message(context, -1765328231, "checksum type %d not supported", *(_DWORD *)seed);
  }
  else
  {
    uint64_t v13 = *(void *)&ctype;
    uint64_t v14 = (_DWORD **)&off_2677FE498;
    while (**v14 != v8)
    {
      ++v14;
      if (!--v9) {
        goto LABEL_5;
      }
    }
    if (v8 == -138 && **(_DWORD **)(*(void *)&ctype + 8) == 23)
    {
      unsigned int v18 = cksum;
      sub_213CB4698((uint64_t)context, (int *)&v18);
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v16 = (cksum << 8) | 0x99u;
      unsigned int v18 = v16;
    }
    return sub_213C82618(context, v13, v16, (uint64_t)in, in_length, (unsigned int *)seed);
  }
  return v15;
}

uint64_t sub_213C82618(krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6 = a1;
  uint64_t v7 = *a6;
  uint64_t v8 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1) {
    goto LABEL_14;
  }
  uint64_t v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v14 = (_DWORD **)&off_2677FE498;
  while (1)
  {
    krb5_error_code v15 = *v14;
    if (**v14 == v7) {
      break;
    }
    ++v14;
    if (!--v8) {
      goto LABEL_14;
    }
  }
  int v16 = v15[8];
  if ((v16 & 0x40) != 0)
  {
LABEL_14:
    uint64_t v19 = 2529639065;
    uint64_t v27 = v7;
    uint64_t v21 = "checksum type %d not supported";
LABEL_15:
    krb5_error_code v22 = -1765328231;
LABEL_16:
    krb5_set_error_message(a1, v22, v21, v27, v28, v29);
    return v19;
  }
  uint64_t v17 = (const char **)(a6 + 2);
  if (*((void *)v15 + 3) != *((void *)a6 + 1))
  {
    krb5_clear_error_message(a1);
    uint64_t v19 = 2529638943;
    uint64_t v28 = *v17;
    uint64_t v29 = *((void *)v15 + 3);
    uint64_t v27 = *((void *)v15 + 1);
    uint64_t v21 = "Decrypt integrity check failed for checksum type %s, length was %u, expected %u";
LABEL_19:
    a1 = v6;
    krb5_error_code v22 = v19;
    goto LABEL_16;
  }
  uint64_t v32 = 0;
  if ((v16 & 1) == 0)
  {
    uint64_t v32 = 0;
    goto LABEL_10;
  }
  if (!a2)
  {
    uint64_t v19 = 2529639065;
    uint64_t v27 = *((void *)v15 + 1);
    uint64_t v21 = "Checksum type %s is keyed but no crypto context (key) was passed in";
    goto LABEL_15;
  }
  uint64_t v24 = *(_DWORD **)(*(void *)a2 + 56);
  if (v24 && *v24 != v7)
  {
    uint64_t v19 = 2529639065;
    uint64_t v27 = *((void *)v15 + 1);
    uint64_t v28 = *(const char **)(*(void *)a2 + 8);
    uint64_t v21 = "Checksum type %s is keyed, but the key type %s passed didnt have that checksum type as the keyed type";
    goto LABEL_15;
  }
  uint64_t v19 = sub_213C854A8(a1, a2, a3, (uint64_t)v15, &v32);
  if (v19) {
    return v19;
  }
LABEL_10:
  unsigned int v18 = (uint64_t (*)(_krb5_context *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))*((void *)v15 + 6);
  if (v18)
  {
    uint64_t v19 = v18(v6, v32, a4, a5, a3, a6);
    if (v19)
    {
      if (a2) {
        uint64_t v20 = *(const char **)(*(void *)a2 + 8);
      }
      else {
        uint64_t v20 = "(none)";
      }
      uint64_t v27 = *((void *)v15 + 1);
      uint64_t v28 = v20;
      uint64_t v21 = "Decrypt integrity check failed for checksum type %s, key type %s";
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v19 = krb5_data_alloc(v31, *((void *)v15 + 3));
    if (!v19)
    {
      uint64_t v25 = (*((uint64_t (**)(_krb5_context *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))v15 + 5))(v6, v32, a4, a5, a3, &v30);
      if (v25)
      {
        uint64_t v19 = v25;
      }
      else if (krb5_data_ct_cmp((uint64_t)v31, (uint64_t)v17))
      {
        if (a2) {
          uint64_t v26 = *(const char **)(*(void *)a2 + 8);
        }
        else {
          uint64_t v26 = "(unkeyed)";
        }
        uint64_t v19 = 2529638943;
        krb5_set_error_message(v6, -1765328353, "Decrypt integrity check failed for checksum type %s, key type %s", *((const char **)v15 + 1), v26);
      }
      else
      {
        uint64_t v19 = 0;
      }
      krb5_data_free(v31);
    }
  }
  return v19;
}

uint64_t krb5_crypto_get_checksum_type(_krb5_context *a1, uint64_t a2, _DWORD *a3)
{
  if (a2 && ((int v3 = *(_DWORD **)(*(void *)a2 + 56)) != 0 || (int v3 = *(_DWORD **)(*(void *)a2 + 48)) != 0))
  {
    uint64_t v4 = 0;
    *a3 = *v3;
  }
  else
  {
    uint64_t v4 = 2529639065;
    krb5_set_error_message(a1, -1765328231, "checksum type not found");
  }
  return v4;
}

uint64_t krb5_checksumsize(_krb5_context *a1, int a2, void *a3)
{
  uint64_t v3 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1)
  {
LABEL_5:
    uint64_t v5 = 2529639065;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a2);
  }
  else
  {
    uint64_t v4 = &off_2677FE498;
    while (*(_DWORD *)*v4 != a2)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }
    uint64_t v5 = 0;
    *a3 = *((void *)*v4 + 3);
  }
  return v5;
}

uint64_t krb5_checksum_is_keyed(uint64_t a1, int a2)
{
  uint64_t v2 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1) {
    return 0;
  }
  for (uint64_t i = &off_2677FE498; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v2) {
      return 0;
    }
  }
  return *((_DWORD *)*i + 8) & 1;
}

uint64_t krb5_checksum_is_collision_proof(uint64_t a1, int a2)
{
  uint64_t v2 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1) {
    return 0;
  }
  for (uint64_t i = &off_2677FE498; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v2) {
      return 0;
    }
  }
  return (*((_DWORD *)*i + 8) >> 1) & 1;
}

uint64_t krb5_checksum_disable(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639065;
    if (a1) {
      krb5_set_error_message(a1, -1765328231, "checksum type %d not supported", a2);
    }
  }
  else
  {
    uint64_t v3 = &off_2677FE498;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = 0;
    *((_DWORD *)*v3 + 8) |= 0x40u;
  }
  return v4;
}

krb5_error_code krb5_enctype_to_string(krb5_enctype a1, char *a2, size_t a3)
{
  uint64_t v4 = *(_krb5_context **)&a1;
  uint64_t v5 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    if (dword_2677FE540 < 1) {
      goto LABEL_16;
    }
    uint64_t v7 = (const char **)&off_2677FE518;
    unint64_t v8 = 1;
    do
    {
      if (*((_DWORD *)v7 - 2) == a2) {
        uint64_t v9 = *v7;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v8 >= dword_2677FE540) {
        break;
      }
      v7 += 2;
      ++v8;
    }
    while (!v9);
    if (!v9)
    {
LABEL_16:
      krb5_error_code v11 = -1765328234;
      krb5_set_error_message(v4, -1765328234, "encryption type %d not supported", a2);
      *(void *)a3 = 0;
      return v11;
    }
  }
  else
  {
    uint64_t v6 = &off_2677FE4D8;
    while (*(_DWORD *)*v6 != a2)
    {
      ++v6;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = (const char *)*((void *)*v6 + 1);
    if (!v9) {
      goto LABEL_16;
    }
  }
  uint64_t v10 = strdup(v9);
  *(void *)a3 = v10;
  if (v10) {
    return 0;
  }
  krb5_error_code v11 = 12;
  krb5_set_error_message(v4, 12, "malloc: out of memory");
  return v11;
}

krb5_error_code krb5_string_to_enctype(char *a1, krb5_enctype *a2)
{
  uint64_t v5 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    krb5_error_code v9 = -1765328234;
    krb5_set_error_message((krb5_context)a1, -1765328234, "encryption type %s not supported", (const char *)a2);
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = &off_2677FE4D8;
    while (1)
    {
      unint64_t v8 = *v7;
      if (!strcasecmp(*((const char **)*v7 + 1), (const char *)a2)) {
        break;
      }
      ++v7;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    krb5_error_code v9 = 0;
    *uint64_t v6 = *v8;
  }
  return v9;
}

uint64_t krb5_enctype_valid(_krb5_context *a1, char *a2)
{
  uint64_t v2 = dword_2677FE508;
  if (dword_2677FE508 >= 1)
  {
    uint64_t v3 = (const char ***)&off_2677FE4D8;
    while (1)
    {
      uint64_t v4 = *v3;
      if (*(_DWORD *)*v3 == a2) {
        break;
      }
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    if (((_BYTE)v4[8] & 0x40) == 0) {
      return 0;
    }
    uint64_t v6 = 2529639062;
    if (a1) {
      krb5_set_error_message(a1, -1765328234, "encryption type %s is disabled", v4[1]);
    }
    return v6;
  }
LABEL_5:
  if (!a1) {
    return 2529639062;
  }

  return sub_213C81D18(a1, a2);
}

uint64_t krb5_cksumtype_valid(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_2677FE4D0;
  if (dword_2677FE4D0 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639065;
    krb5_set_error_message(a1, -1765328231, "checksum type %d not supported");
  }
  else
  {
    uint64_t v3 = &off_2677FE498;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    if ((*((unsigned char *)*v3 + 32) & 0x40) != 0)
    {
      uint64_t v4 = 2529639065;
      krb5_set_error_message(a1, -1765328231, "checksum type %s is disabled");
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t krb5_encrypt_iov_ivec(_krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  if ((a5 & 0x80000000) != 0) {
    goto LABEL_54;
  }
  uint64_t v7 = *(void *)a2;
  if ((*(unsigned char *)(*(void *)a2 + 64) & 4) == 0)
  {
    krb5_clear_error_message(a1);
    return 2529639090;
  }
  uint64_t v11 = a4;
  if (!a5) {
    return 2529639102;
  }
  uint64_t v12 = 0;
  uint64_t v13 = a5;
  uint64_t v14 = (void *)(a4 + 8);
  uint64_t v15 = a5;
  do
  {
    if (*((_DWORD *)v14 - 2) == 2) {
      v12 += *v14;
    }
    v14 += 3;
    --v15;
  }
  while (v15);
  uint64_t v16 = *(void *)(v7 + 32);
  uint64_t v17 = v12 + v16;
  uint64_t v18 = (v12 + v16 + *(void *)(v7 + 24) - 1) & -*(void *)(v7 + 24);
  size_t v19 = v18 - (v12 + v16);
  uint64_t v20 = a4 + 8;
  uint64_t v21 = a5;
  while (*(_DWORD *)(v20 - 8) != 1)
  {
    v20 += 24;
    if (!--v21) {
      return 2529639102;
    }
  }
  if (*(void *)v20 != v16) {
    return 2529639102;
  }
  uint64_t v55 = a1;
  size_t __n = *(void *)(*(void *)(v7 + 56) + 24);
  size_t v58 = v19;
  size_t v59 = v18;
  krb5_generate_random_block(*(void *)(v20 + 8), v16);
  size_t v22 = v59;
  uint64_t v23 = a5;
  uint64_t v24 = v11;
  while (*(_DWORD *)v24 != 4)
  {
    v24 += 24;
    if (!--v23)
    {
      if (v59 != v17) {
        return 2529639102;
      }
LABEL_22:
      uint64_t v24 = 0;
      goto LABEL_24;
    }
  }
  if (*(void *)(v24 + 8) < v58) {
    return 2529639102;
  }
  *(void *)(v24 + 8) = v58;
  if (v59 == v17) {
    goto LABEL_22;
  }
  memset(*(void **)(v24 + 16), v58, v58);
  size_t v22 = v59;
LABEL_24:
  uint64_t v25 = (void **)(v11 + 16);
  uint64_t v26 = a5;
  while (*((_DWORD *)v25 - 4) != 5)
  {
    v25 += 3;
    if (!--v26) {
      return 2529639102;
    }
  }
  uint64_t v53 = a6;
  uint64_t v8 = 2529639102;
  if (*(v25 - 1) != (void *)__n) {
    return v8;
  }
  size_t v27 = v22;
  if (a5)
  {
    uint64_t v28 = (void *)(v11 + 8);
    uint64_t v29 = a5;
    size_t v27 = v22;
    do
    {
      if (*((_DWORD *)v28 - 2) == 3) {
        v27 += *v28;
      }
      v28 += 3;
      --v29;
    }
    while (v29);
  }
  uint64_t v52 = v27;
  uint64_t v30 = (char *)malloc_type_malloc(v27, 0x524DCC0BuLL);
  memcpy(v30, *(const void **)(v20 + 8), *(void *)v20);
  uint64_t v50 = a5;
  uint64_t v51 = v30;
  uint64_t v31 = &v30[*(void *)v20];
  if (a5)
  {
    uint64_t v32 = v11 + 8;
    do
    {
      if ((*(_DWORD *)(v32 - 8) & 0xFFFFFFFE) == 2)
      {
        uint64_t v33 = v11;
        uint64_t v34 = v31;
        memcpy(v31, *(const void **)(v32 + 8), *(void *)v32);
        uint64_t v35 = v34;
        uint64_t v11 = v33;
        uint64_t v31 = &v35[*(void *)v32];
      }
      v32 += 24;
      --v13;
    }
    while (v13);
  }
  if (v24) {
    bzero(v31, *(void *)(v24 + 8));
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  __src = 0;
  uint64_t v8 = sub_213C823E0(v55, *(void *)(v7 + 56), a2, (a3 << 8) | 0x55, (uint64_t)v51, v52, (uint64_t)&v61);
  free(v51);
  if (v8) {
    return v8;
  }
  if (v62 != __n)
  {
    sub_213CBB434((uint64_t)&v61);
    a1 = v55;
LABEL_54:
    krb5_clear_error_message(a1);
    return 2529639090;
  }
  memcpy(*v25, __src, __n);
  sub_213CBB434((uint64_t)&v61);
  uint64_t v36 = (char *)malloc_type_malloc(v59, 0x28A590FuLL);
  if (!v36) {
    return 12;
  }
  uint64_t v37 = v36;
  uint64_t v60 = 0;
  memcpy(v36, *(const void **)(v20 + 8), *(void *)v20);
  __na = v37;
  uint64_t v38 = &v37[*(void *)v20];
  if (a5)
  {
    uint64_t v39 = v11 + 8;
    uint64_t v40 = a5;
    do
    {
      if (*(_DWORD *)(v39 - 8) == 2)
      {
        memcpy(v38, *(const void **)(v39 + 8), *(void *)v39);
        v38 += *(void *)v39;
      }
      v39 += 24;
      --v40;
    }
    while (v40);
  }
  if (v24) {
    bzero(v38, *(void *)(v24 + 8));
  }
  uint64_t v41 = (pthread_mutex_t *)(a2 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
  uint64_t v42 = sub_213C832D0(v55, a2, (a3 << 8) | 0xAA, (uint64_t *)&v60);
  if (v42)
  {
    uint64_t v8 = v42;
LABEL_58:
    uint64_t v45 = __na;
LABEL_59:
    free(v45);
    return v8;
  }
  uint64_t v44 = v60;
  uint64_t v8 = sub_213C833CC(v55, v60);
  pthread_mutex_unlock(v41);
  if (v8) {
    goto LABEL_58;
  }
  uint64_t v46 = (*(uint64_t (**)(_krb5_context *, unsigned int **, char *, size_t, uint64_t, void, uint64_t))(v7 + 72))(v55, v44, __na, v59, 1, a3, v53);
  if (v46)
  {
    uint64_t v8 = v46;
    uint64_t v45 = __na;
    goto LABEL_59;
  }
  memcpy(*(void **)(v20 + 8), __na, *(void *)v20);
  uint64_t v47 = &__na[*(void *)v20];
  if (a5)
  {
    uint64_t v48 = v11 + 8;
    uint64_t v49 = v50;
    do
    {
      if (*(_DWORD *)(v48 - 8) == 2)
      {
        memcpy(*(void **)(v48 + 8), v47, *(void *)v48);
        v47 += *(void *)v48;
      }
      v48 += 24;
      --v49;
    }
    while (v49);
  }
  if (v24) {
    memcpy(*(void **)(v24 + 16), v47, v58);
  }
  free(__na);
  return 0;
}

uint64_t sub_213C832D0(_krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if ((int)v8 < 1)
  {
LABEL_5:
    uint64_t v10 = sub_213C855CC(a2, a3);
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      krb5_copy_keyblock(a1, *(const krb5_keyblock **)(a2 + 8), (krb5_keyblock **)v10);
      _krb5_put_int((uint64_t)v14, a3, 5);
      sub_213C84658(a1, *(void *)a2, v11, v14, 5uLL);
      uint64_t v12 = 0;
      *a4 = v11;
    }
    else
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
      uint64_t v12 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }
  else
  {
    krb5_error_code v9 = *(_DWORD ***)(a2 + 32);
    while (**v9 != a3)
    {
      ++v9;
      if (!--v8) {
        goto LABEL_5;
      }
    }
    uint64_t v12 = 0;
    *a4 = (uint64_t)(*v9 + 2);
  }
  return v12;
}

uint64_t sub_213C833CC(_krb5_context *a1, unsigned int **a2)
{
  uint64_t v4 = (char *)**a2;
  uint64_t v5 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    return sub_213C81D18(a1, v4);
  }
  else
  {
    uint64_t v6 = &off_2677FE4D8;
    while (*(_DWORD *)*v6 != v4)
    {
      ++v6;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = *((void *)*v6 + 5);
    if (!*(void *)(v8 + 48) || a2[1]) {
      return 0;
    }
    uint64_t v10 = (size_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    a2[1] = (unsigned int *)v10;
    if (v10)
    {
      uint64_t v9 = krb5_data_alloc(v10, *(void *)(v8 + 32));
      if (v9)
      {
        free(a2[1]);
        a2[1] = 0;
      }
      else
      {
        (*(void (**)(_krb5_context *, uint64_t, unsigned int **))(v8 + 48))(a1, v8, a2);
      }
    }
    else
    {
      uint64_t v9 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
    return v9;
  }
}

uint64_t krb5_decrypt_iov_ivec(krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7 = *(void *)a2;
  if ((*(unsigned char *)(*(void *)a2 + 64) & 4) == 0)
  {
    krb5_clear_error_message(a1);
    return 2529639090;
  }
  uint64_t v8 = 2529639102;
  if (a5)
  {
    size_t v13 = *(void *)(v7 + 32);
    uint64_t v14 = a5;
    uint64_t v15 = a4 + 8;
    uint64_t v16 = a5;
    while (*(_DWORD *)(v15 - 8) != 1)
    {
      v15 += 24;
      if (!--v16) {
        return v8;
      }
    }
    if (*(void *)v15 == v13)
    {
      uint64_t v17 = a4;
      while (*(_DWORD *)v17 != 5)
      {
        v17 += 24;
        if (!--v14)
        {
          uint64_t v17 = 0;
          break;
        }
      }
      if (*(void *)(v17 + 8) == *(void *)(*(void *)(v7 + 56) + 24))
      {
        if (a5 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = a5;
        }
        size_t v19 = (void *)(a4 + 8);
        uint64_t v44 = v18;
        do
        {
          if (*((_DWORD *)v19 - 2) == 2) {
            v13 += *v19;
          }
          v19 += 3;
          --v18;
        }
        while (v18);
        if (v13 % *(void *)(v7 + 24))
        {
          krb5_clear_error_message(a1);
          return v8;
        }
        uint64_t v20 = (char *)malloc_type_malloc(v13, 0xA5F5F28DuLL);
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v42 = a1;
          memcpy(v20, *(const void **)(v15 + 8), *(void *)v15);
          uint64_t v43 = v21;
          size_t v22 = &v21[*(void *)v15];
          uint64_t v41 = a4;
          uint64_t v23 = a4 + 8;
          uint64_t v24 = v44;
          do
          {
            if (*(_DWORD *)(v23 - 8) == 2)
            {
              memcpy(v22, *(const void **)(v23 + 8), *(void *)v23);
              v22 += *(void *)v23;
            }
            v23 += 24;
            --v24;
          }
          while (v24);
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
          uint64_t v25 = sub_213C832D0(v42, a2, (a3 << 8) | 0xAAu, (uint64_t *)&v45);
          if (v25)
          {
            uint64_t v8 = v25;
LABEL_31:
            uint64_t v26 = v43;
LABEL_32:
            free(v26);
            return v8;
          }
          uint64_t v40 = v45;
          uint64_t v8 = sub_213C833CC(v42, v45);
          pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
          if (v8) {
            goto LABEL_31;
          }
          uint64_t v27 = (*(uint64_t (**)(_krb5_context *, unsigned int **, char *, size_t, void, uint64_t, uint64_t))(v7 + 72))(v42, v40, v43, v13, 0, a3, a6);
          if (v27)
          {
            uint64_t v8 = v27;
            uint64_t v26 = v43;
            goto LABEL_32;
          }
          int v28 = a3 << 8;
          memcpy(*(void **)(v15 + 8), v43, *(void *)v15);
          uint64_t v29 = &v43[*(void *)v15];
          uint64_t v30 = v41 + 8;
          uint64_t v31 = v44;
          do
          {
            if (*(_DWORD *)(v30 - 8) == 2)
            {
              memcpy(*(void **)(v30 + 8), v29, *(void *)v30);
              v29 += *(void *)v30;
            }
            v30 += 24;
            --v31;
          }
          while (v31);
          free(v43);
          uint64_t v32 = (void *)(v41 + 8);
          uint64_t v33 = v44;
          uint64_t v34 = v44;
          do
          {
            if (*((_DWORD *)v32 - 2) == 3) {
              v13 += *v32;
            }
            v32 += 3;
            --v34;
          }
          while (v34);
          uint64_t v35 = malloc_type_malloc(v13, 0xFA80AC2FuLL);
          if (v35)
          {
            uint64_t v36 = (uint64_t)v35;
            memcpy(v35, *(const void **)(v15 + 8), *(void *)v15);
            uint64_t v37 = (char *)(v36 + *(void *)v15);
            uint64_t v38 = v41 + 8;
            do
            {
              if ((*(_DWORD *)(v38 - 8) & 0xFFFFFFFE) == 2)
              {
                memcpy(v37, *(const void **)(v38 + 8), *(void *)v38);
                v37 += *(void *)v38;
              }
              v38 += 24;
              --v33;
            }
            while (v33);
            uint64_t v48 = *(void *)(v17 + 16);
            uint64_t v47 = *(void *)(v17 + 8);
            LODWORD(v46) = **(_DWORD **)(v7 + 56);
            uint64_t v8 = sub_213C82618(v42, a2, v28 | 0x55u, v36, v13, (unsigned int *)&v46);
            uint64_t v26 = (void *)v36;
            goto LABEL_32;
          }
        }
        return 12;
      }
    }
  }
  return v8;
}

uint64_t krb5_create_checksum_iov(krb5_context a1, _DWORD **a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6)
{
  uint64_t checksum = 2529639102;
  if (((*a2)[16] & 4) != 0)
  {
    if (a5)
    {
      uint64_t v12 = a5;
      uint64_t v13 = a4 + 8;
      uint64_t v14 = a5;
      while (*(_DWORD *)(v13 - 8) != 6)
      {
        v13 += 24;
        if (!--v14) {
          return checksum;
        }
      }
      size_t v15 = 0;
      uint64_t v16 = (void *)(a4 + 8);
      uint64_t v17 = a5;
      do
      {
        if ((*(_DWORD *)(v16 - 1) & 0xFFFFFFFE) == 2) {
          v15 += *v16;
        }
        v16 += 3;
        --v17;
      }
      while (v17);
      uint64_t v18 = (char *)malloc_type_malloc(v15, 0x1FAC21A4uLL);
      uint64_t v19 = a4 + 8;
      uint64_t v20 = v18;
      do
      {
        if ((*(_DWORD *)(v19 - 8) & 0xFFFFFFFE) == 2)
        {
          memcpy(v20, *(const void **)(v19 + 8), *(void *)v19);
          v20 += *(void *)v19;
        }
        v19 += 24;
        --v12;
      }
      while (v12);
      uint64_t v23 = 0;
      size_t __n = 0;
      __src = 0;
      uint64_t checksum = krb5_create_checksum(a1, a2, a3, 0, (uint64_t)v18, v15, (uint64_t)&v23);
      free(v18);
      if (!checksum)
      {
        if (a6) {
          *a6 = v23;
        }
        size_t v21 = __n;
        if (__n <= *(void *)v13)
        {
          *(void *)uint64_t v13 = __n;
          memcpy(*(void **)(v13 + 8), __src, v21);
          sub_213CBB434((uint64_t)&v23);
          return 0;
        }
        else
        {
          krb5_set_error_message(a1, -1765328194, "Checksum larger then input buffer");
          sub_213CBB434((uint64_t)&v23);
          return 2529639102;
        }
      }
    }
  }
  else
  {
    krb5_clear_error_message(a1);
    return 2529639090;
  }
  return checksum;
}

uint64_t krb5_verify_checksum_iov(krb5_context a1, uint64_t *a2, const krb5_checksum *a3, uint64_t a4, unsigned int a5, _DWORD *a6)
{
  uint64_t v7 = 2529639102;
  uint64_t v8 = *a2;
  if ((*(unsigned char *)(*a2 + 64) & 4) != 0)
  {
    if (a5)
    {
      krb5_cksumtype v11 = (int)a2;
      uint64_t v12 = a5;
      uint64_t v13 = (void *)(a4 + 16);
      uint64_t v14 = a5;
      while (*((_DWORD *)v13 - 4) != 6)
      {
        v13 += 3;
        if (!--v14) {
          return v7;
        }
      }
      size_t v15 = 0;
      uint64_t v16 = (void *)(a4 + 8);
      uint64_t v17 = a5;
      do
      {
        if ((*(_DWORD *)(v16 - 1) & 0xFFFFFFFE) == 2) {
          v15 += *v16;
        }
        v16 += 3;
        --v17;
      }
      while (v17);
      uint64_t v19 = (char *)malloc_type_malloc(v15, 0x739C9819uLL);
      uint64_t v20 = a4 + 8;
      size_t v21 = v19;
      do
      {
        if ((*(_DWORD *)(v20 - 8) & 0xFFFFFFFE) == 2)
        {
          memcpy(v21, *(const void **)(v20 + 8), *(void *)v20);
          v21 += *(void *)v20;
        }
        v20 += 24;
        --v12;
      }
      while (v12);
      seed[0] = 0;
      LODWORD(seed[0]) = **(_DWORD **)(v8 + 56);
      uint64_t v22 = *v13;
      seed[1] = *(v13 - 1);
      seed[2] = v22;
      uint64_t v7 = krb5_verify_checksum(a1, v11, a3, v19, v15, seed, v18);
      free(v19);
      if (a6 && !v7) {
        *a6 = seed[0];
      }
    }
  }
  else
  {
    krb5_clear_error_message(a1);
    return 2529639090;
  }
  return v7;
}

uint64_t krb5_crypto_length(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = *(void **)a2;
  if ((*(unsigned char *)(*(void *)a2 + 64) & 4) != 0)
  {
    uint64_t v6 = 0;
    switch((int)a3)
    {
      case 0:
        uint64_t v6 = 0;
        *a4 = 0;
        return v6;
      case 1:
        uint64_t v6 = 0;
        unint64_t v7 = v4[2];
        goto LABEL_15;
      case 2:
      case 3:
        return v6;
      case 4:
        uint64_t v6 = 0;
        unint64_t v7 = v4[3];
        if (v7 <= 1) {
          unint64_t v7 = 0;
        }
        goto LABEL_15;
      case 5:
        uint64_t v6 = 0;
        unint64_t v7 = *(void *)(v4[7] + 24);
        goto LABEL_15;
      case 6:
        uint64_t v8 = v4[7];
        if (!v8) {
          uint64_t v8 = v4[6];
        }
        uint64_t v6 = 0;
        unint64_t v7 = *(void *)(v8 + 24);
LABEL_15:
        *a4 = v7;
        break;
      default:
        uint64_t v10 = a3;
        uint64_t v5 = "%d not a supported type";
        goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = "not a derived crypto";
LABEL_3:
    uint64_t v6 = 22;
    krb5_set_error_message(a1, 22, v5, v10);
  }
  return v6;
}

uint64_t krb5_crypto_length_iov(_krb5_context *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a4;
  for (uint64_t i = (unint64_t *)(a3 + 8); ; i += 3)
  {
    uint64_t result = krb5_crypto_length(a1, a2, *((unsigned int *)i - 2), i);
    if (result) {
      break;
    }
    if (!--v6) {
      return 0;
    }
  }
  return result;
}

uint64_t krb5_encrypt_ivec(_krb5_context *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, size_t *a6, uint64_t a7)
{
  uint64_t v13 = *(void *)a2;
  int v14 = *(_DWORD *)(*(void *)a2 + 64);
  if ((v14 & 4) != 0)
  {
    uint64_t v36 = a6;
    size_t v21 = *(void *)(*(void *)(v13 + 56) + 24);
    uint64_t v22 = (a5 + *(void *)(v13 + 32) + *(void *)(v13 + 24) - 1) & -*(void *)(v13 + 24);
    size_t v23 = v22 + v21;
    uint64_t v24 = (char *)malloc_type_calloc(1uLL, v22 + v21, 0xEC1B67F3uLL);
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      __src = 0;
      krb5_generate_random_block((uint64_t)v24, *(void *)(v13 + 32));
      memcpy(&v25[*(void *)(v13 + 32)], a4, a5);
      uint64_t v20 = sub_213C823E0(a1, *(void *)(v13 + 56), a2, (a3 << 8) | 0x55u, (uint64_t)v25, v22, (uint64_t)&v39);
      if (!v20)
      {
        if (v40 == v21)
        {
          uint64_t v38 = 0;
          memcpy(&v25[v22], __src, v21);
          sub_213CBB434((uint64_t)&v39);
          uint64_t v26 = (pthread_mutex_t *)(a2 + 40);
          pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
          uint64_t v20 = sub_213C832D0(a1, a2, (a3 << 8) | 0xAAu, (uint64_t *)&v38);
          if (!v20)
          {
            uint64_t v27 = v38;
            uint64_t v20 = sub_213C833CC(a1, v38);
            pthread_mutex_unlock(v26);
            if (!v20)
            {
              uint64_t v20 = (*(uint64_t (**)(_krb5_context *, unsigned int **, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 72))(a1, v27, v25, v22, 1, a3, a7);
              if (!v20)
              {
                size_t *v36 = v23;
                v36[1] = (size_t)v25;
                return v20;
              }
            }
          }
        }
        else
        {
          uint64_t v20 = 2529639090;
          sub_213CBB434((uint64_t)&v39);
          krb5_clear_error_message(a1);
        }
      }
      bzero(v25, v23);
      uint64_t v34 = v25;
LABEL_26:
      free(v34);
      return v20;
    }
    goto LABEL_19;
  }
  if ((v14 & 0x20) != 0)
  {
    size_t v28 = *(void *)(*(void *)(v13 + 48) + 24);
    size_t v29 = v28 + a5 + *(void *)(v13 + 32);
    uint64_t v30 = malloc_type_malloc(v29, 0x9E11B8AuLL);
    if (v30)
    {
      uint64_t v18 = (uint64_t)v30;
      bzero(v30, v28);
      uint64_t v31 = v18 + v28;
      krb5_generate_random_block(v31, *(void *)(v13 + 32));
      memcpy((void *)(v31 + *(void *)(v13 + 32)), a4, a5);
      uint64_t v20 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t, size_t, uint64_t, uint64_t, uint64_t))(v13 + 72))(a1, a2 + 8, v18, v29, 1, a3, a7);
      if (!v20)
      {
        *a6 = v29;
        a6[1] = v18;
        return v20;
      }
      uint64_t v32 = (void *)v18;
      size_t v33 = v29;
      goto LABEL_25;
    }
LABEL_19:
    uint64_t v20 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory", v36);
    return v20;
  }
  size_t v15 = *(void *)(*(void *)(v13 + 48) + 24);
  uint64_t v16 = (a5 + *(void *)(v13 + 32) + *(void *)(v13 + 24) + v15 - 1) & -*(void *)(v13 + 24);
  uint64_t v17 = malloc_type_calloc(1uLL, v16, 0x8E8ECFB8uLL);
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t v18 = (uint64_t)v17;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  __src = 0;
  krb5_generate_random_block((uint64_t)v17, *(void *)(v13 + 32));
  uint64_t v19 = (char *)(v18 + *(void *)(v13 + 32));
  bzero(v19, v15);
  memcpy(&v19[v15], a4, a5);
  uint64_t v20 = sub_213C823E0(a1, *(void *)(v13 + 48), a2, 0, v18, v16, (uint64_t)&v39);
  if (v20)
  {
LABEL_24:
    uint64_t v32 = (void *)v18;
    size_t v33 = v16;
LABEL_25:
    bzero(v32, v33);
    uint64_t v34 = (void *)v18;
    goto LABEL_26;
  }
  if (v40 != v15)
  {
    uint64_t v20 = 2529639090;
    krb5_clear_error_message(a1);
    sub_213CBB434((uint64_t)&v39);
    goto LABEL_24;
  }
  memcpy((void *)(v18 + *(void *)(v13 + 32)), __src, v15);
  sub_213CBB434((uint64_t)&v39);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
  uint64_t v20 = sub_213C833CC(a1, (unsigned int **)(a2 + 8));
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
  if (v20) {
    goto LABEL_24;
  }
  uint64_t v20 = (*(uint64_t (**)(_krb5_context *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(v13 + 72))(a1, a2 + 8, v18, v16, 1, 0, a7);
  if (v20) {
    goto LABEL_24;
  }
  *a6 = v16;
  a6[1] = v18;
  return v20;
}

krb5_error_code krb5_encrypt(krb5_context context, krb5_const_pointer inptr, krb5_pointer outptr, size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec)
{
  return krb5_encrypt_ivec(context, (uint64_t)inptr, (uint64_t)outptr, (const void *)size, (size_t)eblock, (size_t *)ivec, 0);
}

uint64_t krb5_encrypt_EncryptedData(_krb5_context *a1, _DWORD **a2, uint64_t a3, const void *a4, size_t a5, int a6, uint64_t a7)
{
  *(_DWORD *)a7 = **a2;
  if (a6)
  {
    int v14 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *int v14 = a6;
  }
  else
  {
    int v14 = 0;
  }
  *(void *)(a7 + 8) = v14;

  return krb5_encrypt_ivec(a1, (uint64_t)a2, a3, a4, a5, (size_t *)(a7 + 16), 0);
}

uint64_t krb5_decrypt_ivec(krb5_context a1, uint64_t a2, uint64_t a3, const void *a4, size_t size, void *a6, uint64_t a7)
{
  uint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(*(void *)a2 + 64);
  if ((v15 & 4) != 0)
  {
    uint64_t v24 = *(void *)(*(void *)(v14 + 56) + 24);
    if (*(void *)(v14 + 32) + v24 <= size)
    {
      uint64_t v29 = size - v24;
      if (!((size - v24) % *(void *)(v14 + 24)))
      {
        uint64_t v30 = (char *)malloc_type_malloc(size, 0x792167C6uLL);
        if (size && !v30) {
          goto LABEL_23;
        }
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        uint64_t v44 = v30;
        memcpy(v30, a4, size);
        pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
        uint64_t v32 = sub_213C832D0(a1, a2, (a3 << 8) | 0xAAu, (uint64_t *)&v45);
        if (v32)
        {
          uint64_t v21 = v32;
        }
        else
        {
          uint64_t v42 = v45;
          uint64_t v21 = sub_213C833CC(a1, v45);
          pthread_mutex_unlock((pthread_mutex_t *)(a2 + 40));
          if (!v21)
          {
            uint64_t v35 = (*(uint64_t (**)(krb5_context, unsigned int **, char *, uint64_t, void, uint64_t, uint64_t))(v14 + 72))(a1, v42, v44, v29, 0, a3, a7);
            if (v35
              || (uint64_t v47 = v24,
                  uint64_t v48 = &v44[v29],
                  LODWORD(v46) = **(_DWORD **)(v14 + 56),
                  uint64_t v35 = sub_213C82618(a1, a2, (a3 << 8) | 0x55u, (uint64_t)v44, v29, (unsigned int *)&v46),
                  v35))
            {
              uint64_t v21 = v35;
              size_t v23 = v44;
              goto LABEL_29;
            }
            uint64_t v40 = *(void *)(v14 + 32);
            memmove(v44, &v44[v40], v29 - v40);
            uint64_t v41 = malloc_type_realloc(v44, v29 - v40, 0x77FF862EuLL);
            a6[1] = v41;
            size_t v39 = v29 - v40;
            if (v29 != v40 && !v41)
            {
              uint64_t v36 = v44;
              goto LABEL_39;
            }
            goto LABEL_47;
          }
        }
        size_t v23 = v44;
        goto LABEL_29;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if ((v15 & 0x20) == 0)
    {
      if (!(size % *(void *)(v14 + 24)))
      {
        size_t v16 = *(void *)(*(void *)(v14 + 48) + 24);
        if (*(void *)(v14 + 32) + v16 <= size)
        {
          uint64_t v17 = (char *)malloc_type_malloc(size, 0xB0499F1AuLL);
          uint64_t v18 = v17;
          if (size && !v17) {
            goto LABEL_23;
          }
          memcpy(v17, a4, size);
          uint64_t v19 = (pthread_mutex_t *)(a2 + 40);
          pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
          uint64_t v20 = (unsigned int **)(a2 + 8);
          uint64_t v21 = sub_213C833CC(a1, v20);
          pthread_mutex_unlock(v19);
          if (v21)
          {
LABEL_11:
            size_t v23 = v18;
LABEL_29:
            free(v23);
            return v21;
          }
          uint64_t v22 = (*(uint64_t (**)(krb5_context, unsigned int **, char *, size_t, void, void, uint64_t))(v14 + 72))(a1, v20, v18, size, 0, 0, a7);
          if (v22
            || (uint64_t v46 = 0,
                uint64_t v47 = 0,
                uint64_t v48 = 0,
                uint64_t v22 = krb5_data_copy(&v47, &v18[*(void *)(v14 + 32)], v16),
                v22))
          {
            uint64_t v21 = v22;
            goto LABEL_11;
          }
          bzero(&v18[*(void *)(v14 + 32)], v16);
          LODWORD(v46) = **(_DWORD **)(v14 + 48);
          uint64_t v21 = sub_213C82618(a1, 0, 0, (uint64_t)v18, size, (unsigned int *)&v46);
          sub_213CBB434((uint64_t)&v46);
          if (v21) {
            goto LABEL_11;
          }
          size_t v37 = *(void *)(v14 + 32) + v16;
          memmove(v18, &v18[v37], size - v37);
          uint64_t v38 = malloc_type_realloc(v18, size - v37, 0xD0054DAAuLL);
          a6[1] = v38;
          size_t v39 = size - v37;
          if (size != v37 && !v38)
          {
            uint64_t v36 = v18;
            goto LABEL_39;
          }
LABEL_47:
          uint64_t v21 = 0;
          *a6 = v39;
          return v21;
        }
        goto LABEL_13;
      }
LABEL_20:
      uint64_t v21 = 2529639102;
      krb5_clear_error_message(a1);
      return v21;
    }
    if (size % *(void *)(v14 + 24)) {
      goto LABEL_20;
    }
    uint64_t v25 = *(void *)(*(void *)(v14 + 48) + 24);
    if (size >= *(void *)(v14 + 32) + v25)
    {
      uint64_t v43 = (void *)(*(void *)(v14 + 32) + v25);
      uint64_t v26 = (char *)malloc_type_malloc(size, 0x11B917B3uLL);
      if (!v26)
      {
LABEL_23:
        uint64_t v21 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory", v42);
        return v21;
      }
      uint64_t v27 = v26;
      memcpy(v26, a4, size);
      uint64_t v28 = (*(uint64_t (**)(krb5_context, uint64_t, char *, size_t, void, uint64_t, uint64_t))(v14 + 72))(a1, a2 + 8, v27, size, 0, a3, a7);
      if (v28)
      {
        uint64_t v21 = v28;
        size_t v23 = v27;
        goto LABEL_29;
      }
      memmove(v27, &v27[v25 + *(void *)(v14 + 32)], size - (void)v43);
      size_t v33 = malloc_type_realloc(v27, size - (void)v43, 0x901FBB81uLL);
      a6[1] = v33;
      if (v33) {
        BOOL v34 = 1;
      }
      else {
        BOOL v34 = size == (void)v43;
      }
      if (v34)
      {
        uint64_t v21 = 0;
        *a6 = size - (void)v43;
        return v21;
      }
      uint64_t v36 = v27;
LABEL_39:
      free(v36);
      goto LABEL_23;
    }
  }
LABEL_13:
  uint64_t v21 = 2529639102;
  krb5_set_error_message(a1, -1765328194, "Encrypted data shorter then checksum + confunder");
  return v21;
}

krb5_error_code krb5_decrypt(krb5_context context, krb5_const_pointer inptr, krb5_pointer outptr, size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec)
{
  return krb5_decrypt_ivec(context, (uint64_t)inptr, (uint64_t)outptr, (const void *)size, (size_t)eblock, ivec, 0);
}

uint64_t krb5_decrypt_EncryptedData(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return krb5_decrypt_ivec(a1, a2, a3, *(const void **)(a4 + 24), *(void *)(a4 + 16), a5, 0);
}

uint64_t sub_213C84658(_krb5_context *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t v10 = *(int **)(a2 + 40);
  uint64_t v11 = sub_213C833CC(a1, (unsigned int **)a3);
  if (v11) {
    return v11;
  }
  uint64_t v12 = *(void *)(a2 + 16);
  unint64_t v13 = 8 * v12;
  unint64_t v14 = *((void *)v10 + 2) + 8 * v12 - 1;
  unint64_t v21 = v14 / (8 * v12);
  int v15 = (char *)malloc_type_malloc(v21 * v12, 0x7741FAA4uLL);
  if (v15)
  {
    uint64_t v16 = sub_213C9EA44(a4, a5, v15, *(void *)(a2 + 16));
    if (v16)
    {
      uint64_t v11 = v16;
      krb5_set_error_message(a1, v16, "malloc: out of memory");
    }
    else
    {
      if (v13 <= v14)
      {
        uint64_t v18 = 0;
        if (v21 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v21;
        }
        do
        {
          if (v18) {
            memcpy(&v15[*(void *)(a2 + 16) * v18], &v15[*(void *)(a2 + 16) * (v18 - 1)], *(void *)(a2 + 16));
          }
          (*(void (**)(_krb5_context *, uint64_t, char *, void, uint64_t, void, void))(a2 + 72))(a1, a3, &v15[*(void *)(a2 + 16) * v18++], *(void *)(a2 + 16), 1, 0, 0);
        }
        while (v19 != v18);
      }
      int v20 = *v10;
      if ((*v10 - 17) < 2)
      {
        memcpy(*(void **)(*(void *)a3 + 16), v15, *(void *)(*(void *)a3 + 8));
      }
      else
      {
        if (v20 != 16 && v20 != 7)
        {
          uint64_t v11 = 2529639090;
          krb5_set_error_message(a1, -1765328206, "derive_key() called with unknown keytype (%u)");
          goto LABEL_6;
        }
        sub_213CB4E24((uint64_t)a1, *(void *)a3, (uint64_t)v15, *(void *)(a2 + 16) * v21);
      }
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
LABEL_6:
  if (*(void *)(a3 + 8))
  {
    sub_213C8485C(a1, a3, a2);
    *(void *)(a3 + 8) = 0;
  }
  if (v15)
  {
    bzero(v15, *(void *)(a2 + 16) * v21);
    free(v15);
  }
  return v11;
}

void sub_213C8485C(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(_krb5_context *, uint64_t))(*(void *)(a3 + 40) + 72);
  if (v5) {
    v5(a1, a2);
  }
  bzero(*(void **)(*(void *)(a2 + 8) + 8), **(void **)(a2 + 8));
  uint64_t v6 = *(krb5_data **)(a2 + 8);

  krb5_free_data(a1, v6);
}

uint64_t krb5_derive_key(krb5_context a1, const krb5_keyblock *a2, krb5_keyblock *a3, const void *a4, size_t a5, krb5_keyblock **a6)
{
  *a6 = 0;
  uint64_t v7 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    return sub_213C81D18(a1, (char *)a3);
  }
  else
  {
    int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v11 = (_DWORD **)&off_2677FE4D8;
    while (1)
    {
      uint64_t v12 = *v11;
      if (**v11 == a3) {
        break;
      }
      ++v11;
      if (!--v7) {
        goto LABEL_5;
      }
    }
    uint64_t v14 = krb5_copy_keyblock(a1, a2, &v15);
    if (!v14)
    {
      uint64_t v16 = 0;
      uint64_t v14 = sub_213C84658(a1, (uint64_t)v12, (uint64_t)&v15, a4, a5);
      if (!v14) {
        uint64_t v14 = krb5_copy_keyblock(a1, v15, a6);
      }
      sub_213C849D0(a1, (uint64_t)&v15, (uint64_t)v12);
    }
    return v14;
  }
}

void sub_213C849D0(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8))
  {
    sub_213C8485C(a1, a2, a3);
    *(void *)(a2 + 8) = 0;
  }
}

uint64_t krb5_crypto_init(_krb5_context *a1, const krb5_keyblock *a2, char *magic, krb5_keyblock ***a4)
{
  uint64_t v8 = (krb5_keyblock **)malloc_type_calloc(1uLL, 0x68uLL, 0x10A0040CBDFC28DuLL);
  *a4 = v8;
  if (!v8)
  {
    uint64_t v14 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v14;
  }
  if (!magic) {
    krb5_magic magic = (char *)a2->magic;
  }
  uint64_t v9 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_8:
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = (krb5_keyblock **)&off_2677FE4D8;
    while (1)
    {
      uint64_t v11 = *v10;
      if ((*v10)->magic == magic) {
        break;
      }
      ++v10;
      if (!--v9) {
        goto LABEL_8;
      }
    }
  }
  *uint64_t v8 = v11;
  uint64_t v12 = *a4;
  unint64_t v13 = **a4;
  if (v13 && ((uint64_t)v13[2].contents & 0x40) == 0)
  {
    if (*((void *)v13[1].contents + 3) == *(void *)&a2->length)
    {
      uint64_t v14 = krb5_copy_keyblock(a1, a2, v12 + 1);
      int v15 = *a4;
      if (v14)
      {
        free(v15);
        *a4 = 0;
      }
      else
      {
        v15[2] = 0;
        uint64_t v17 = *a4;
        *((_DWORD *)v17 + 6) = 0;
        v17[4] = 0;
        pthread_mutex_init((pthread_mutex_t *)(*a4 + 5), 0);
      }
    }
    else
    {
      uint64_t v14 = 2529639101;
      free(v12);
      *a4 = 0;
      krb5_set_error_message(a1, -1765328195, "encryption key has bad length");
    }
    return v14;
  }
  free(v12);
  *a4 = 0;

  return sub_213C81D18(a1, magic);
}

uint64_t krb5_crypto_destroy(_krb5_context *a1, uint64_t a2)
{
  if (a2)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(a2 + 40));
    if (*(int *)(a2 + 24) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void **)(*(void *)(a2 + 32) + 8 * v4);
        sub_213C849D0(a1, (uint64_t)v5 + 8, *(void *)a2);
        free(v5);
        ++v4;
      }
      while (v4 < *(int *)(a2 + 24));
    }
    free(*(void **)(a2 + 32));
    sub_213C849D0(a1, a2 + 8, *(void *)a2);
    free((void *)a2);
  }
  return 0;
}

uint64_t krb5_crypto_getblocksize(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = *(void *)(*(void *)a2 + 16);
  return 0;
}

uint64_t krb5_crypto_getenctype(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  *a3 = **a2;
  return 0;
}

uint64_t krb5_crypto_getpadsize(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = *(void *)(*(void *)a2 + 24);
  return 0;
}

uint64_t krb5_crypto_getconfoundersize(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = *(void *)(*(void *)a2 + 32);
  return 0;
}

uint64_t krb5_enctype_disable(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639062;
    if (a1) {
      krb5_set_error_message(a1, -1765328234, "encryption type %d not supported", a2);
    }
  }
  else
  {
    uint64_t v3 = &off_2677FE4D8;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = 0;
    *((_DWORD *)*v3 + 16) |= 0x40u;
  }
  return v4;
}

uint64_t krb5_enctype_enable(_krb5_context *a1, int a2)
{
  uint64_t v2 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    uint64_t v4 = 2529639062;
    if (a1) {
      krb5_set_error_message(a1, -1765328234, "encryption type %d not supported", a2);
    }
  }
  else
  {
    uint64_t v3 = &off_2677FE4D8;
    while (*(_DWORD *)*v3 != a2)
    {
      ++v3;
      if (!--v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = 0;
    *((_DWORD *)*v3 + 16) &= ~0x40u;
  }
  return v4;
}

uint64_t sub_213C84DCC(uint64_t a1, int a2)
{
  uint64_t v2 = dword_2677FE508;
  if (dword_2677FE508 >= 1)
  {
    uint64_t v3 = &off_2677FE4D8;
    do
    {
      int v4 = *((_DWORD *)*v3 + 16);
      if ((v4 & 0x80) != 0) {
        *((_DWORD *)*v3 + 16) = v4 & 0xFFFFFFBF | ((a2 == 0) << 6);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t krb5_enctype_warning(uint64_t a1, int a2)
{
  uint64_t v2 = dword_2677FE508;
  if (dword_2677FE508 < 1) {
    return 1;
  }
  for (uint64_t i = &off_2677FE4D8; *(_DWORD *)*i != a2; ++i)
  {
    if (!--v2) {
      return 1;
    }
  }
  return (*((_DWORD *)*i + 16) >> 8) & 1;
}

unint64_t krb5_get_wrapped_length(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void *)(*(void *)a2 + 24);
  if ((*(unsigned char *)(*(void *)a2 + 64) & 4) == 0) {
    return (v4 + a3 + v3[4] + *(void *)(v3[6] + 24) - 1) / v4 * v4;
  }
  uint64_t v6 = v3[7];
  if (!v6) {
    uint64_t v6 = v3[6];
  }
  return *(void *)(v6 + 24) + (v4 + a3 + v3[4] - 1) / v4 * v4;
}

uint64_t krb5_random_to_key(krb5_context a1, int a2, const void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    uint64_t v13 = 2529639062;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
  }
  else
  {
    uint64_t v11 = &off_2677FE4D8;
    while (1)
    {
      uint64_t v12 = (_DWORD *)*v11;
      if (*(_DWORD *)*v11 == a2) {
        break;
      }
      ++v11;
      if (!--v7) {
        goto LABEL_5;
      }
    }
    uint64_t v15 = *((void *)v12 + 5);
    if (a4 >= (unint64_t)(*(void *)(v15 + 16) + 7) >> 3)
    {
      uint64_t v13 = krb5_data_alloc((size_t *)(a5 + 8), *(void *)(v15 + 24));
      if (!v13)
      {
        *(_DWORD *)a5 = a2;
        uint64_t v16 = *((void *)v12 + 5);
        uint64_t v17 = *(void (**)(krb5_context, uint64_t, const void *, unint64_t))(v16 + 64);
        if (v17) {
          v17(a1, a5, a3, a4);
        }
        else {
          memcpy(*(void **)(a5 + 16), a3, *(void *)(v16 + 24));
        }
        return 0;
      }
    }
    else
    {
      uint64_t v13 = 2529639062;
      krb5_set_error_message(a1, -1765328234, "encryption key %s needs %d bytes of random to make an encryption key out of it");
    }
  }
  return v13;
}

uint64_t krb5_crypto_prf_length(_krb5_context *a1, int a2, void *a3)
{
  uint64_t v3 = dword_2677FE508;
  if (dword_2677FE508 < 1)
  {
LABEL_5:
    uint64_t v5 = 2529639062;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
  }
  else
  {
    unint64_t v4 = &off_2677FE4D8;
    while (*(_DWORD *)*v4 != a2)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }
    uint64_t v6 = *((void *)*v4 + 10);
    if (v6)
    {
      uint64_t v5 = 0;
      *a3 = v6;
    }
    else
    {
      uint64_t v5 = 2314790690;
      krb5_set_error_message(a1, -1980176606, "encryption type %d not supported");
    }
  }
  return v5;
}

uint64_t krb5_crypto_prf(_krb5_context *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *a2;
  krb5_data_zero(a4);
  uint64_t v9 = *(uint64_t (**)(_krb5_context *, uint64_t *, uint64_t, void *))(v8 + 88);
  if (v9)
  {
    return v9(a1, a2, a3, a4);
  }
  else
  {
    krb5_set_error_message(a1, -1980176606, "kerberos prf for %s not supported", *(const char **)(v8 + 8));
    return 2314790690;
  }
}

uint64_t krb5_crypto_fx_cf2(_krb5_context *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char *a6, void *a7)
{
  size_t v24 = 0;
  uint64_t v25 = 0;
  size_t v22 = 0;
  size_t v23 = 0;
  size_t v21 = 0;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  krb5_data_zero(&v24);
  krb5_data_zero(&v22);
  uint64_t v14 = krb5_enctype_keysize(a1, a6, &v21);
  if (!v14)
  {
    size_t v15 = v21;
    uint64_t v14 = sub_213C852AC(a1, a2, a4, v21, &v24);
    if (!v14)
    {
      uint64_t v14 = sub_213C852AC(a1, a3, a5, v15, &v22);
      if (!v14)
      {
        uint64_t v16 = v25;
        if (v15)
        {
          uint64_t v17 = v23;
          size_t v18 = v15;
          do
          {
            char v19 = *v17++;
            *v16++ ^= v19;
            --v18;
          }
          while (v18);
          uint64_t v16 = v25;
        }
        uint64_t v14 = krb5_random_to_key(a1, (int)a6, v16, v15, (uint64_t)a7);
      }
    }
    krb5_data_free(&v24);
    krb5_data_free(&v22);
  }
  return v14;
}

uint64_t sub_213C852AC(_krb5_context *a1, uint64_t *a2, uint64_t a3, size_t a4, size_t *a5)
{
  size_t v19 = 0;
  int v20 = 0;
  krb5_data_zero(&v19);
  krb5_data_zero(a5);
  krb5_clear_error_message(a1);
  uint64_t v10 = krb5_data_alloc(a5, a4);
  if (v10 || (uint64_t v10 = krb5_data_alloc(&v19, *(void *)a3 + 1), v10))
  {
LABEL_3:
    krb5_data_free(&v19);
    krb5_data_free(a5);
  }
  else
  {
    krb5_clear_error_message(a1);
    memcpy(v20 + 1, *(const void **)(a3 + 8), *(void *)a3);
    if (a4)
    {
      uint64_t v12 = (char *)a5[1];
      char v13 = 1;
      while (1)
      {
        size_t v17 = 0;
        size_t v18 = 0;
        *int v20 = v13;
        uint64_t v14 = krb5_crypto_prf(a1, a2, (uint64_t)&v19, &v17);
        if (v14)
        {
          uint64_t v10 = v14;
          goto LABEL_3;
        }
        size_t v15 = v17;
        size_t v16 = a4 - v17;
        if (a4 <= v17) {
          break;
        }
        ++v13;
        memcpy(v12, v18, v17);
        v12 += v15;
        krb5_data_free(&v17);
        a4 = v16;
        if (!v16) {
          goto LABEL_13;
        }
      }
      memcpy(v12, v18, a4);
      krb5_data_free(&v17);
    }
LABEL_13:
    krb5_data_free(&v19);
    return 0;
  }
  return v10;
}

void _krb5_debug_keyblock(uint64_t a1, int a2, const char *a3, uint64_t a4)
{
  if (_krb5_have_debug(a1))
  {
    __s = 0;
    if (*(void *)(a4 + 8) >= 4uLL) {
      uint64_t v8 = 4;
    }
    else {
      uint64_t v8 = *(void *)(a4 + 8);
    }
    if ((rk_hex_encode(*(char **)(a4 + 16), v8, &__s) & 0x8000000000000000) == 0)
    {
      sub_213C9C004(a1, a2, "%s %d/%s", a3, *(_DWORD *)a4, __s);
      size_t v9 = strlen(__s);
      bzero(__s, v9);
      free(__s);
    }
  }
}

uint64_t sub_213C854A8(_krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = (pthread_mutex_t *)(a2 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 40));
  int v11 = *(_DWORD *)(a4 + 32);
  if ((v11 & 4) == 0)
  {
    if ((v11 & 8) != 0)
    {
      size_t v15 = sub_213C855CC(a2, 255);
      *a5 = (uint64_t)v15;
      if (!v15)
      {
        uint64_t v13 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
        goto LABEL_7;
      }
      uint64_t v13 = krb5_copy_keyblock(a1, *(const krb5_keyblock **)(a2 + 8), (krb5_keyblock **)v15);
      if (v13)
      {
LABEL_7:
        pthread_mutex_unlock(v10);
        return v13;
      }
      uint64_t v12 = (unsigned int **)*a5;
      uint64_t v16 = *(void *)*a5;
      if (*(void *)(v16 + 8))
      {
        unint64_t v17 = 0;
        do
        {
          *(unsigned char *)(*(void *)(v16 + 16) + v17++) ^= 0xF0u;
          uint64_t v12 = (unsigned int **)*a5;
          uint64_t v16 = *(void *)*a5;
        }
        while (v17 < *(void *)(v16 + 8));
      }
    }
    else
    {
      uint64_t v12 = (unsigned int **)(a2 + 8);
      *a5 = a2 + 8;
    }
LABEL_6:
    uint64_t v13 = sub_213C833CC(a1, v12);
    goto LABEL_7;
  }
  uint64_t v13 = sub_213C832D0(a1, a2, a3, a5);
  if (!v13)
  {
    uint64_t v12 = (unsigned int **)*a5;
    goto LABEL_6;
  }
  return v13;
}

char *sub_213C855CC(uint64_t a1, int a2)
{
  unint64_t v4 = malloc_type_realloc(*(void **)(a1 + 32), 8 * *(int *)(a1 + 24) + 8, 0x2004093837F09uLL);
  if (!v4) {
    return 0;
  }
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = (char *)malloc_type_malloc(0x18uLL, 0x1020040F89CB87BuLL);
  uint64_t v6 = *(int *)(a1 + 24);
  *(void *)(*(void *)(a1 + 32) + 8 * v6) = v5;
  if (!v5) {
    return 0;
  }
  *(_DWORD *)(a1 + 24) = v6 + 1;
  *(void *)(v5 + 12) = 0;
  *(void *)(v5 + 4) = 0;
  *((_DWORD *)v5 + 5) = 0;
  uint64_t v7 = v5 + 8;
  *(_DWORD *)uint64_t v5 = a2;
  return v7;
}

void *krb5_data_zero(void *result)
{
  void *result = 0;
  result[1] = 0;
  return result;
}

void krb5_data_free(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  *a1 = 0;
  a1[1] = 0;
}

void krb5_free_data(krb5_context a1, krb5_data *a2)
{
  data = a2->data;
  if (data) {
    free(data);
  }

  free(a2);
}

uint64_t krb5_data_alloc(size_t *a1, size_t a2)
{
  unint64_t v4 = malloc_type_calloc(1uLL, a2, 0xAC2A8630uLL);
  a1[1] = (size_t)v4;
  if (a2 && !v4) {
    return 12;
  }
  uint64_t result = 0;
  *a1 = a2;
  return result;
}

uint64_t krb5_data_realloc(uint64_t a1, size_t a2)
{
  unint64_t v4 = malloc_type_realloc(*(void **)(a1 + 8), a2, 0x9FB019A7uLL);
  uint64_t v5 = v4;
  if (a2 && !v4) {
    return 12;
  }
  uint64_t result = 0;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v5;
  return result;
}

uint64_t krb5_data_copy(void *a1, const void *a2, size_t size)
{
  if (!size)
  {
    a1[1] = 0;
    goto LABEL_5;
  }
  uint64_t v6 = malloc_type_calloc(1uLL, size, 0xAC2A8630uLL);
  a1[1] = v6;
  if (v6)
  {
    *a1 = size;
    memmove(v6, a2, size);
LABEL_5:
    uint64_t result = 0;
    *a1 = size;
    return result;
  }
  return 12;
}

krb5_error_code krb5_copy_data(krb5_context a1, const krb5_data *a2, krb5_data **a3)
{
  uint64_t v5 = (krb5_data *)malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
  *a3 = v5;
  if (v5)
  {
    krb5_error_code v6 = der_copy_octet_string();
    if (v6)
    {
      krb5_clear_error_message(a1);
      free(*a3);
      *a3 = 0;
    }
  }
  else
  {
    krb5_error_code v6 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v6;
}

uint64_t krb5_data_cmp(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)a1;
  if (*(void *)a1 == *(void *)a2) {
    return memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), v2);
  }
  else {
    return v2 - *(void *)a2;
  }
}

uint64_t sub_213C858BC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v13[0] = 0;
  v13[1] = &a9;
  unsigned int v10 = vasprintf(v13, a2, &a9);
  int v11 = v13[0];
  uint64_t result = 12;
  if (v13[0])
  {
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t result = 0;
      *a1 = v10;
      a1[1] = v11;
    }
  }
  return result;
}

uint64_t krb5_data_ct_cmp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1 == *(void *)a2) {
    return ct_memcmp(*(unsigned __int8 **)(a1 + 8), *(unsigned __int8 **)(a2 + 8), v2);
  }
  else {
    return v2 - *(void *)a2;
  }
}

char *krb5_get_error_string(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 328));
  uint64_t v2 = *(const char **)(a1 + 280);
  if (v2) {
    uint64_t v3 = strdup(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 328));
  return v3;
}

uint64_t _krb5_xcc_get_initial_ticket(_krb5_context *a1, uint64_t a2, int a3, const krb5_principal_data *a4, char *__s)
{
  keys[7] = *(void **)MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a2 + 16);
  size_t v9 = strlen(__s);
  CFDataRef v10 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)__s, v9, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  if (v10)
  {
    CFDataRef v11 = v10;
    if (a4) {
      a4 = (const krb5_principal_data *)sub_213C85BD0(a1, a4);
    }
    keys[0] = @"kHEIMObjectType";
    keys[1] = @"kHEIMAttrType";
    keys[2] = @"kHEIMAttrParentCredential";
    keys[3] = @"kHEIMAttrClientName";
    keys[4] = @"kHEIMAttrData";
    keys[5] = @"kHEIMAttrCredential";
    keys[6] = @"kHEIMAttrServerName";
    values[0] = @"kHEIMObjectKerberosAcquireCred";
    values[1] = @"kHEIMTypeKerberosAcquireCred";
    values[2] = *(void **)v8;
    values[3] = *(void **)(v8 + 16);
    values[4] = v11;
    values[5] = *(void **)MEMORY[0x263EFFB40];
    values[6] = (void *)a4;
    if (a4) {
      CFIndex v12 = 7;
    }
    else {
      CFIndex v12 = 6;
    }
    CFDictionaryRef v13 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v12, 0, 0);
    if (!v13) {
      heim_abort("Failed to create dictionary:query != NULL", v14, v15, v16, v17, v18, v19, v20, v25);
    }
    CFDictionaryRef v21 = v13;
    size_t v22 = (const void *)HeimCredCreate((uint64_t)v13, 0);
    if (v22)
    {
      CFRelease(v22);
      uint64_t v23 = 0;
      if (!a4)
      {
LABEL_11:
        CFRelease(v21);
        CFRelease(v11);
        return v23;
      }
    }
    else
    {
      sub_213C9C004((uint64_t)a1, 5, "failed to add initial ticket request to %s\n", *(const char **)(v8 + 32));
      uint64_t v26 = *(const char **)(v8 + 32);
      uint64_t v23 = 22;
      krb5_set_error_message(a1, 22, "failed to store initial ticket request to %s", v26);
      if (!a4) {
        goto LABEL_11;
      }
    }
    CFRelease(a4);
    goto LABEL_11;
  }

  return krb5_enomem(a1);
}

CFStringRef sub_213C85BD0(_krb5_context *a1, const krb5_principal_data *a2)
{
  cStr = 0;
  CFStringRef v2 = 0;
  if (!krb5_unparse_name(a1, a2, &cStr))
  {
    CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    krb5_xfree(cStr);
  }
  return v2;
}

uint64_t sub_213C85C2C(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 16) + 32);
}

uint64_t sub_213C85C38(_krb5_context *a1, uint64_t a2, char *in)
{
  memset(uu, 0, sizeof(uu));
  if (uuid_parse(in, uu))
  {
    uint64_t v5 = 2529639054;
    krb5_set_error_message(a1, -1765328242, "failed to parse uuid: %s");
  }
  else
  {
    CFUUIDRef v7 = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)uu);
    if (v7)
    {
      CFUUIDRef v8 = v7;
      uint64_t v9 = sub_213C86EE8(a1, a2);
      if (v9)
      {
        uint64_t v5 = v9;
        CFRelease(v8);
      }
      else
      {
        CFDataRef v10 = *(uint64_t **)(*(void *)a2 + 16);
        uint64_t *v10 = (uint64_t)v8;
        sub_213C86F68((uint64_t)v10);
        sub_213C86FC4(a1, v10);
        return 0;
      }
    }
    else
    {
      uint64_t v5 = 2529639054;
      krb5_set_error_message(a1, -1765328242, "failed to create uuid from: %s");
    }
  }
  return v5;
}

CFIndex sub_213C85D28(_krb5_context *a1, uint64_t a2)
{
  CFIndex result = sub_213C86EE8(a1, a2);
  if (!result)
  {
    uint64_t v5 = *(void **)(*(void *)a2 + 16);
    BOOL v6 = **(void **)a2 == (void)&krb5_xcc_temp_api_ops;
    return sub_213C87124(a1, v5, 0, v6);
  }
  return result;
}

uint64_t sub_213C85D94(krb5_context a1, void *a2, krb5_const_principal a3)
{
  keys[2] = *(void **)MEMORY[0x263EF8340];
  uint64_t v6 = a2[2];
  CFUUIDRef v7 = *(krb5_principal_data **)(v6 + 24);
  if (v7) {
    krb5_free_principal(a1, v7);
  }
  CFIndex v8 = krb5_copy_principal(a1, a3, (krb5_principal *)(v6 + 24));
  if (v8) {
    return v8;
  }
  CFDataRef v10 = *(const void **)(v6 + 16);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(v6 + 16) = 0;
  }
  CFStringRef v11 = sub_213C85BD0(a1, a3);
  *(void *)(v6 + 16) = v11;
  if (v11)
  {
    if (*(void *)(v6 + 8))
    {
      keys[0] = @"kHEIMAttrType";
      keys[1] = @"kHEIMAttrParentCredential";
      values[0] = @"kHEIMTypeKerberos";
      values[1] = *(void **)v6;
      CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, 0, 0);
      if (!v12) {
        heim_abort("Failed to create dictionary:query != NULL", v13, v14, v15, v16, v17, v18, v19, v21);
      }
      CFDictionaryRef v20 = v12;
      HeimCredDeleteQuery((uint64_t)v12, 0);
      CFRelease(v20);
    }
    else
    {
      CFIndex v8 = sub_213C87124(a1, (void *)v6, *(void **)v6, *a2 == (void)&krb5_xcc_temp_api_ops);
      if (v8) {
        return v8;
      }
    }
    if (HeimCredSetAttribute(*(void *)(v6 + 8), @"kHEIMAttrClientName", *(void **)(v6 + 16), 0)) {
      return 0;
    }
    CFIndex v8 = 22;
    krb5_set_error_message(a1, 22, "failed to store credential to %s", *(const char **)(v6 + 32));
    return v8;
  }

  return krb5_enomem(a1);
}

uint64_t sub_213C85F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(void *)v2) {
    HeimCredDeleteByUUID(*(void **)v2);
  }
  uint64_t v3 = *(const void **)(v2 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v2 + 8) = 0;
  }
  return 0;
}

uint64_t sub_213C85FD0(krb5_context a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (*(void *)v4)
  {
    CFRelease(*(CFTypeRef *)v4);
    *(void *)uint64_t v4 = 0;
  }
  uint64_t v5 = *(const void **)(v4 + 8);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(v4 + 8) = 0;
  }
  uint64_t v6 = *(const void **)(v4 + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(v4 + 16) = 0;
  }
  krb5_free_principal(a1, *(krb5_principal *)(v4 + 24));
  free(*(void **)(v4 + 32));
  krb5_data_free((void *)(a2 + 8));
  return 0;
}

uint64_t sub_213C86054(_krb5_context *a1, uint64_t a2, uint64_t *a3)
{
  keys[9] = *(void **)MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 16);
  CFIndex v39 = 0;
  uint64_t v40 = 0;
  krb5_data_zero(&v39);
  uint64_t v6 = a3[6];
  CFUUIDRef v7 = (double *)MEMORY[0x263EFFAF8];
  if (v6 || (uint64_t v6 = a3[5]) != 0) {
    double Current = (double)v6 - *MEMORY[0x263EFFAF8];
  }
  else {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  CFDateRef v9 = CFDateCreate(0, Current);
  if (!v9)
  {
    uint64_t v13 = krb5_enomem(a1);
    goto LABEL_40;
  }
  CFDateRef v10 = v9;
  uint64_t v11 = a3[7];
  if (v11) {
    CFDateRef v12 = CFDateCreate(0, (double)v11 - *v7);
  }
  else {
    CFDateRef v12 = 0;
  }
  uint64_t v14 = a3[8];
  if (v14) {
    CFDateRef v15 = CFDateCreate(0, (double)v14 - *v7);
  }
  else {
    CFDateRef v15 = 0;
  }
  uint64_t v16 = krb5_storage_emem();
  if (v16)
  {
    uint64_t v17 = (uint64_t)v16;
    uint64_t v13 = krb5_store_creds((uint64_t)v16, (uint64_t)a3);
    if (!v13)
    {
      krb5_storage_to_data(v17, (size_t *)&v39);
      CFDataRef v18 = CFDataCreateWithBytesNoCopy(0, v40, v39, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
      if (v18)
      {
        CFDataRef v19 = v18;
        BOOL is_root_krbtgt = krb5_principal_is_root_krbtgt((uint64_t)a1, a3[1]);
        CFStringRef v21 = sub_213C85BD0(a1, (const krb5_principal_data *)a3[1]);
        if (v21)
        {
          CFStringRef v22 = v21;
          uint64_t v23 = (void *)*MEMORY[0x263EFFB38];
          if (is_root_krbtgt) {
            uint64_t v23 = (void *)*MEMORY[0x263EFFB40];
          }
          keys[0] = @"kHEIMObjectType";
          keys[1] = @"kHEIMAttrType";
          keys[2] = @"kHEIMAttrClientName";
          keys[3] = @"kHEIMAttrServerName";
          keys[4] = @"kHEIMAttrData";
          keys[5] = @"kHEIMAttrParentCredential";
          keys[6] = @"kHEIMAttrLeadCredential";
          keys[7] = @"kHEIMAttrAuthTime";
          keys[8] = @"kHEIMAttrRenewTill";
          values[0] = @"kHEIMObjectKerberos";
          values[1] = @"kHEIMTypeKerberos";
          values[2] = *(void **)(v5 + 16);
          values[3] = (void *)v21;
          values[4] = v19;
          values[5] = *(void **)v5;
          values[6] = v23;
          if (v15) {
            CFIndex v24 = 9;
          }
          else {
            CFIndex v24 = 8;
          }
          values[7] = v10;
          values[8] = v15;
          CFDictionaryRef v25 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v24, 0, 0);
          if (!v25) {
            heim_abort("Failed to create dictionary:query != NULL", v26, v27, v28, v29, v30, v31, v32, v38);
          }
          CFDictionaryRef v33 = v25;
          if (v12)
          {
            MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v25);
            CFDictionarySetValue(MutableCopy, @"kHEIMAttrExpire", v12);
            CFRelease(v33);
            CFDictionaryRef v33 = MutableCopy;
          }
          uint64_t v35 = (const void *)HeimCredCreate((uint64_t)v33, 0);
          if (v35)
          {
            CFRelease(v35);
            uint64_t v13 = 0;
          }
          else
          {
            sub_213C9C004((uint64_t)a1, 5, "failed to add credential to %s\n", *(const char **)(v5 + 32));
            uint64_t v13 = 22;
            krb5_set_error_message(a1, 22, "failed to store credential to %s", *(const char **)(v5 + 32));
          }
          krb5_storage_free(v17);
          if (v33) {
            CFRelease(v33);
          }
          CFRelease(v19);
          uint64_t v36 = v22;
        }
        else
        {
          uint64_t v13 = krb5_enomem(a1);
          krb5_storage_free(v17);
          uint64_t v36 = v19;
        }
        CFRelease(v36);
        goto LABEL_36;
      }
      uint64_t v13 = krb5_enomem(a1);
    }
    krb5_storage_free(v17);
  }
  else
  {
    uint64_t v13 = krb5_enomem(a1);
  }
LABEL_36:
  CFRelease(v10);
  if (v12) {
    CFRelease(v12);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_40:
  krb5_data_free(&v39);
  return v13;
}

uint64_t sub_213C86418(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  uint64_t result = sub_213C86FC4(a1, v5);
  if (!result)
  {
    CFUUIDRef v7 = (const krb5_principal_data *)v5[3];
    return krb5_copy_principal(a1, v7, a3);
  }
  return result;
}

uint64_t sub_213C86480(_krb5_context *a1, uint64_t a2, const void ***a3)
{
  keys[2] = *(void **)MEMORY[0x263EF8340];
  uint64_t v3 = 2529639054;
  uint64_t v4 = **(void ***)(a2 + 16);
  if (!v4) {
    return v3;
  }
  CFUUIDRef v7 = (const void **)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  if (v7)
  {
    CFIndex v8 = v7;
    keys[0] = @"kHEIMAttrParentCredential";
    keys[1] = @"kHEIMAttrType";
    values[0] = v4;
    values[1] = @"kHEIMTypeKerberos";
    CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v9) {
      heim_abort("out of memory:query != NULL", v10, v11, v12, v13, v14, v15, v16, v19);
    }
    CFDictionaryRef v17 = v9;
    *CFIndex v8 = HeimCredCopyQuery();
    CFRelease(v17);
    if (*v8)
    {
      uint64_t v3 = 0;
      *a3 = v8;
    }
    else
    {
      sub_213C872CC(v8);
    }
    return v3;
  }

  return krb5_enomem(a1);
}

uint64_t sub_213C865F8(uint64_t a1, uint64_t a2, const __CFArray ***a3, uint64_t a4)
{
  uint64_t v4 = 2529639054;
  uint64_t v5 = *a3;
  if (**a3)
  {
    while (1)
    {
      CFIndex v7 = (CFIndex)v5[1];
      if (v7 >= CFArrayGetCount(*v5)) {
        break;
      }
      CFArrayRef v8 = *v5;
      CFIndex v9 = (CFIndex)v5[1];
      v5[1] = (const __CFArray *)(v9 + 1);
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
      if (!ValueAtIndex) {
        break;
      }
      CFDataRef v11 = (const __CFData *)HeimCredCopyAttribute((uint64_t)ValueAtIndex, @"kHEIMAttrData");
      if (v11)
      {
        CFDataRef v12 = v11;
        BytePtr = CFDataGetBytePtr(v11);
        CFIndex Length = CFDataGetLength(v12);
        uint64_t v15 = krb5_storage_from_readonly_mem((uint64_t)BytePtr, Length);
        if (v15)
        {
          uint64_t v16 = (uint64_t)v15;
          uint64_t v4 = krb5_ret_creds((uint64_t)v15, a4);
          krb5_storage_free(v16);
        }
        CFRelease(v12);
        return v4;
      }
    }
  }
  return v4;
}

uint64_t sub_213C866C0(uint64_t a1, uint64_t a2, const void ***a3)
{
  *a3 = 0;
  return 0;
}

uint64_t sub_213C866F0(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  keys[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v5 = 2529639053;
  uint64_t v6 = *(void ***)(a2 + 16);
  CFStringRef v7 = sub_213C85BD0(a1, *(const krb5_principal_data **)(a4 + 8));
  if (!v7) {
    return 2529639054;
  }
  CFStringRef v8 = v7;
  keys[0] = @"kHEIMAttrParentCredential";
  keys[1] = @"kHEIMAttrType";
  keys[2] = @"kHEIMAttrServerName";
  values[0] = *v6;
  values[1] = @"kHEIMTypeKerberos";
  values[2] = (void *)v7;
  CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v9) {
    heim_abort("Failed to create dictionary:query != NULL", v10, v11, v12, v13, v14, v15, v16, v20);
  }
  CFDictionaryRef v17 = v9;
  CFRelease(v8);
  BOOL v18 = HeimCredDeleteQuery((uint64_t)v17, 0);
  CFRelease(v17);
  if (v18) {
    return 0;
  }
  krb5_set_error_message(a1, -1765328243, "Deleted credential not found");
  return v5;
}

uint64_t sub_213C86834()
{
  return 0;
}

uint64_t sub_213C8683C()
{
  return 0;
}

uint64_t sub_213C86844(_krb5_context *a1, const void ***a2)
{
  keys[2] = *(void **)MEMORY[0x263EF8340];
  keys[0] = @"kHEIMAttrType";
  keys[1] = @"kHEIMAttrServerName";
  uint64_t v4 = (const void *)*MEMORY[0x263EFFD08];
  v17[0] = @"kHEIMTypeKerberos";
  v17[1] = v4;
  v17[2] = *(const void **)MEMORY[0x263EFFB38];
  uint64_t v5 = (const void **)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  if (v5)
  {
    uint64_t v6 = v5;
    CFDictionaryRef v7 = CFDictionaryCreate(0, (const void **)keys, v17, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if (!v7) {
      heim_abort("Failed to create dictionary:query != NULL", v8, v9, v10, v11, v12, v13, v14, (char)v17[0]);
    }
    CFDictionaryRef v15 = v7;
    *uint64_t v6 = HeimCredCopyQuery();
    CFRelease(v15);
    if (*v6)
    {
      uint64_t result = 0;
      *a2 = v6;
    }
    else
    {
      sub_213C872CC(v6);
      return 2529639054;
    }
  }
  else
  {
    return krb5_enomem(a1);
  }
  return result;
}

uint64_t sub_213C869BC()
{
  return 2529639054;
}

uint64_t sub_213C869C8(int a1, const void **a2)
{
  return 0;
}

uint64_t sub_213C869E8(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  if (!HeimCredMove(*(const __CFUUID **)v5, *(const __CFUUID **)v6)) {
    return 2529639054;
  }
  if (*(void *)v5)
  {
    HeimCredDeleteByUUID(*(void **)v5);
    if (*(void *)v5)
    {
      CFRelease(*(CFTypeRef *)v5);
      *(void *)uint64_t v5 = 0;
    }
  }
  CFDictionaryRef v7 = *(const void **)(v6 + 8);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(v6 + 8) = 0;
  }
  uint64_t v8 = *(const void **)(v5 + 8);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(v5 + 8) = 0;
  }
  uint64_t v9 = (void *)(a2 + 8);
  uint64_t v10 = *(const void **)(v6 + 16);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(v6 + 16) = 0;
  }
  *(void *)(v6 + 16) = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0;
  uint64_t v11 = *(krb5_principal_data **)(v6 + 24);
  if (v11) {
    krb5_free_principal(a1, v11);
  }
  *(void *)(v6 + 24) = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = 0;
  free(*(void **)(v6 + 32));
  *(void *)(v6 + 32) = 0;
  sub_213C86F68(v6);
  free(*(void **)(v5 + 32));
  krb5_data_free(v9);
  return 0;
}

uint64_t sub_213C86AD8(int a1, char **a2)
{
  return sub_213C8730C(a1, (uint64_t)&krb5_xcc_ops, "XCACHE:11111111-71F2-48EB-94C4-7D7392E900E5", a2);
}

uint64_t sub_213C86AF0(_krb5_context *a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  uint64_t v4 = v3[1];
  if (!v4)
  {
    uint64_t v4 = HeimCredCopyFromUUID(*v3);
    v3[1] = v4;
    if (!v4) {
      return 2529639054;
    }
  }
  if (HeimCredSetAttribute(v4, @"kHEIMAttrDefaultCredential", (void *)*MEMORY[0x263EFFB40], 0)) {
    return 0;
  }
  uint64_t v5 = 22;
  krb5_set_error_message(a1, 22, "XCACHE couldn't set default credential");
  return v5;
}

uint64_t sub_213C86B80(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t sub_213C86B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  uint64_t v3 = v2[1];
  if (!v3)
  {
    uint64_t v3 = HeimCredCopyFromUUID(*v2);
    v2[1] = v3;
    if (!v3) {
      return 2529639053;
    }
  }
  HeimCredRetainTransient(v3);
  return 0;
}

uint64_t sub_213C86BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  uint64_t v3 = v2[1];
  if (!v3)
  {
    uint64_t v3 = HeimCredCopyFromUUID(*v2);
    v2[1] = v3;
    if (!v3) {
      return 2529639053;
    }
  }
  HeimCredReleaseTransient(v3);
  return 0;
}

uint64_t sub_213C86C24(uint64_t a1, uint64_t a2, CFUUIDBytes *a3)
{
  *a3 = CFUUIDGetUUIDBytes((CFUUIDRef)**(void **)(a2 + 16));
  return 0;
}

uint64_t sub_213C86C5C(_krb5_context *a1, uint64_t a2, char *cStr, void *a4)
{
  CFDictionaryRef v7 = *(uint64_t **)(a2 + 16);
  if (!v7[1])
  {
    uint64_t v8 = HeimCredCopyFromUUID(*v7);
    v7[1] = v8;
    if (!v8) {
      return 2529639054;
    }
  }
  uint64_t v9 = (__CFString *)CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v9)
  {
    uint64_t v10 = v9;
    int v11 = HeimCredSetAttribute(v7[1], v9, a4, 0);
    CFRelease(v10);
    if (v11) {
      return 0;
    }
    else {
      return 2529639054;
    }
  }
  else
  {
    return krb5_enomem(a1);
  }
}

uint64_t sub_213C86D24(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  *a4 = 0;
  uint64_t v7 = v6[1];
  if (!v7)
  {
    uint64_t v7 = HeimCredCopyFromUUID(*v6);
    v6[1] = v7;
    if (!v7) {
      return 2529639054;
    }
  }
  uint64_t v8 = HeimCredCopyAttributes(v7, 0, 0);
  *a4 = v8;
  if (v8) {
    return 0;
  }
  uint64_t v9 = 2529639054;
  krb5_set_error_message(a1, -1765328242, "Credential have no attributes");
  return v9;
}

BOOL sub_213C86DBC(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  return *a2 == &krb5_xcc_api_ops || v2 == &krb5_xcc_ops || v2 == &krb5_xcc_temp_api_ops;
}

uint64_t sub_213C86DEC(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = 2529639054;
  if (*(void *)a2)
  {
    CFIndex v7 = *(void *)(a2 + 8);
    if (v7 < CFArrayGetCount(*(CFArrayRef *)a2))
    {
      CFArrayRef v8 = *(const __CFArray **)a2;
      CFIndex v9 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v9 + 1;
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
      if (ValueAtIndex)
      {
        int v11 = ValueAtIndex;
        uint64_t v4 = sub_213C7BFE4(a1, (uint64_t)&krb5_xcc_api_ops, a3);
        if (!v4)
        {
          sub_213C86EE8(a1, (uint64_t)a3);
          uint64_t v12 = *(void **)(*a3 + 16);
          UUID = (const void *)HeimCredGetUUID((uint64_t)v11);
          void *v12 = UUID;
          CFRetain(UUID);
          v12[1] = v11;
          CFRetain(v11);
          sub_213C86F68((uint64_t)v12);
        }
      }
    }
  }
  return v4;
}

uint64_t sub_213C86EB4(int a1, char **a2)
{
  return sub_213C8730C(a1, (uint64_t)&krb5_xcc_api_ops, "API:11111111-71F2-48EB-94C4-7D7392E900E5", a2);
}

uint64_t sub_213C86ED0()
{
  return 2529639054;
}

uint64_t sub_213C86EDC()
{
  return 2529639054;
}

uint64_t sub_213C86EE8(_krb5_context *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 16) = malloc_type_calloc(1uLL, 0x28uLL, 0x700403DF0E5C8uLL);
  if (*(void *)(*(void *)a2 + 16))
  {
    *(void *)(*(void *)a2 + 8) = 40;
    return 0;
  }
  else
  {
    return krb5_enomem(a1);
  }
}

void sub_213C86F68(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    CFUUIDBytes v3 = CFUUIDGetUUIDBytes((CFUUIDRef)*(void *)a1);
    uint64_t v2 = (char *)malloc_type_malloc(0x25uLL, 0x90064977uLL);
    *(void *)(a1 + 32) = v2;
    uuid_unparse(&v3.byte0, v2);
  }
}

uint64_t sub_213C86FC4(_krb5_context *a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  if (!v4)
  {
    uint64_t v5 = (const void *)HeimCredCopyFromUUID(*a2);
    uint64_t v6 = (const void *)HeimCredCopyAttributes((uint64_t)v5, 0, 0);
    if (v6)
    {
      a2[1] = (uint64_t)v5;
      CFRetain(v5);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v4 = a2[1];
    if (!v4)
    {
      uint64_t v8 = 2529639053;
      krb5_set_error_message(a1, -1765328243, "no credential for %s");
      return v8;
    }
  }
  CFStringRef v7 = (const __CFString *)a2[2];
  if (!v7)
  {
    CFStringRef v7 = (const __CFString *)HeimCredCopyAttribute(v4, @"kHEIMAttrClientName");
    a2[2] = (uint64_t)v7;
    if (!v7)
    {
      uint64_t v8 = 2529639053;
      krb5_set_error_message(a1, -1765328243, "no cache for %s");
      return v8;
    }
  }
  if (!a2[3])
  {
    krb5_principal v13 = 0;
    CFIndex v9 = rk_cfstring2cstring(v7);
    if (v9)
    {
      uint64_t v10 = v9;
      krb5_parse_name(a1, v9, &v13);
      free(v10);
      krb5_principal v11 = v13;
      a2[3] = (uint64_t)v13;
      if (v11) {
        return 0;
      }
    }
    else
    {
      a2[3] = 0;
    }
    uint64_t v8 = 2529639053;
    krb5_set_error_message(a1, -1765328243, "no principal for %s");
    return v8;
  }
  return 0;
}

CFIndex sub_213C87124(_krb5_context *a1, void *a2, void *a3, int a4)
{
  keys[4] = *(void **)MEMORY[0x263EF8340];
  keys[0] = @"kHEIMObjectType";
  keys[1] = @"kHEIMAttrType";
  keys[2] = @"kHEIMAttrTemporaryCache";
  keys[3] = @"kHEIMAttrUUID";
  values[0] = @"kHEIMObjectKerberos";
  values[1] = @"kHEIMTypeKerberos";
  CFStringRef v7 = (void **)MEMORY[0x263EFFB38];
  if (a4) {
    CFStringRef v7 = (void **)MEMORY[0x263EFFB40];
  }
  values[2] = *v7;
  values[3] = a3;
  if (a3) {
    CFIndex v8 = 4;
  }
  else {
    CFIndex v8 = 3;
  }
  CFTypeRef cf = 0;
  CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v8, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v9) {
    heim_abort("Failed to create dictionary:attrs != NULL", v10, v11, v12, v13, v14, v15, v16, (char)cf);
  }
  CFDictionaryRef v17 = v9;
  a2[1] = HeimCredCreate((uint64_t)v9, (CFErrorRef *)&cf);
  CFRelease(v17);
  uint64_t v25 = a2[1];
  if (v25)
  {
    if (!a3)
    {
      if (*a2) {
        heim_abort("credential should not already have a UUID:x->uuid == NULL", v18, v19, v20, v21, v22, v23, v24, (char)cf);
      }
      UUID = (const void *)HeimCredGetUUID(v25);
      *a2 = UUID;
      if (!UUID) {
        heim_abort("no uuid for credential?:x->uuid != NULL", v27, v28, v29, v30, v31, v32, v33, (char)cf);
      }
      CFRetain(UUID);
    }
    sub_213C86F68((uint64_t)a2);
    CFIndex v34 = 0;
  }
  else
  {
    CFIndex v34 = sub_213C87A1C(a1, 12, (__CFError *)cf, "no reply from GSSCred", v21, v22, v23, v24, (char)cf);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v34;
}

void sub_213C872CC(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

uint64_t sub_213C8730C(int a1, uint64_t a2, char *a3, char **a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  CFUUIDRef v8 = (const __CFUUID *)HeimCredCopyDefaultCredential(@"kHEIMTypeKerberos", 0);
  if (v8)
  {
    CFUUIDRef v9 = v8;
    CFUUIDBytes uu = CFUUIDGetUUIDBytes(v8);
    uuid_unparse(&uu.byte0, out);
    CFRelease(v9);
    asprintf(a4, "%s:%s", *(const char **)(a2 + 8), out);
    return 0;
  }
  else
  {
    return _krb5_expand_default_cc_name(a1, a3);
  }
}

uint64_t sub_213C87420(_krb5_context *a1, uint64_t a2, CFUUIDBytes *a3)
{
  uint64_t v10 = a2;
  CFUUIDRef v5 = CFUUIDCreateFromUUIDBytes(0, *a3);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    uint64_t v7 = sub_213C86EE8(a1, (uint64_t)&v10);
    if (v7)
    {
      CFRelease(v6);
    }
    else
    {
      CFUUIDRef v8 = *(CFUUIDRef **)(a2 + 16);
      *CFUUIDRef v8 = v6;
      sub_213C86F68((uint64_t)v8);
    }
  }
  else
  {
    uint64_t v7 = 2529639054;
    krb5_set_error_message(a1, -1765328242, "failed to create uuid");
  }
  return v7;
}

uint64_t krb5_eai_to_heim_errno(uint64_t result, uint64_t a2)
{
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      return 2314790785;
    case 2:
      return 2314790786;
    case 3:
      return 2314790787;
    case 4:
      return 2314790788;
    case 5:
      int v2 = 5;
      goto LABEL_12;
    case 6:
      return 2314790790;
    case 7:
      return 2314790791;
    case 8:
      return 2314790792;
    case 9:
      int v2 = 9;
      goto LABEL_12;
    case 10:
      int v2 = 10;
LABEL_12:
      uint64_t result = v2 | 0x89F8E780;
      break;
    case 11:
      uint64_t result = a2;
      break;
    default:
      uint64_t result = 2314790784;
      break;
  }
  return result;
}

uint64_t krb5_h_errno_to_heim_errno(unsigned int a1)
{
  if (a1 > 4) {
    return 2314790784;
  }
  else {
    return dword_213CDA390[a1];
  }
}

void krb5_set_error_message(krb5_context a1, krb5_error_code a2, const char *a3, ...)
{
  va_start(va, a3);
  krb5_vset_error_message(a1, a2, a3, va);
}

void krb5_vset_error_message(krb5_context a1, krb5_error_code a2, const char *a3, va_list a4)
{
  if (a1)
  {
    pthread_mutex_lock(*((pthread_mutex_t **)a1 + 41));
    CFUUIDRef v8 = (void *)((char *)a1 + 280);
    CFUUIDRef v9 = (void *)*((void *)a1 + 35);
    if (v9)
    {
      free(v9);
      *CFUUIDRef v8 = 0;
    }
    *((_DWORD *)a1 + 72) = a2;
    if (vasprintf((char **)a1 + 35, a3, a4) < 0) {
      *CFUUIDRef v8 = 0;
    }
    pthread_mutex_unlock(*((pthread_mutex_t **)a1 + 41));
    uint64_t v10 = (const char *)*((void *)a1 + 35);
    if (v10) {
      sub_213C9C004((uint64_t)a1, 100, "set-error: %d: %s", a2, v10);
    }
  }
}

const char *__cdecl krb5_get_error_message(krb5_context a1, krb5_error_code a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  krb5_context v16 = a1;
  if (a2)
  {
    if (a1)
    {
      pthread_mutex_lock(*((pthread_mutex_t **)a1 + 41));
      uint64_t v4 = (const char *)*((void *)a1 + 35);
      if (v4 && ((int v5 = *((_DWORD *)a1 + 72), v5 == a2) || !v5))
      {
        uint64_t v12 = strdup(v4);
        uint64_t v15 = v12;
        pthread_mutex_unlock(*((pthread_mutex_t **)a1 + 41));
        if (v12) {
          return v12;
        }
      }
      else
      {
        pthread_mutex_unlock(*((pthread_mutex_t **)a1 + 41));
      }
      CFUUIDRef v6 = com_right_r(*((void **)a1 + 18), a2, __dst, 0x80uLL);
      if (!v6) {
        goto LABEL_21;
      }
LABEL_15:
      uint64_t v11 = v6;
      return strdup(v11);
    }
    krb5_error_code inited = krb5_init_context(&v16);
    krb5_error_code v9 = inited;
    if (v16)
    {
      uint64_t v10 = com_right_r(*((void **)v16 + 18), a2, __dst, 0x80uLL);
      CFUUIDRef v6 = v10;
      if (v9)
      {
        if (v10) {
          goto LABEL_15;
        }
LABEL_21:
        uint64_t v11 = error_message(a2);
        if (!v11)
        {
          int v13 = asprintf(&v15, "<unknown error: %d>", a2);
          if (v15) {
            BOOL v14 = v13 == -1;
          }
          else {
            BOOL v14 = 1;
          }
          if (v14) {
            return 0;
          }
          else {
            return v15;
          }
        }
        return strdup(v11);
      }
    }
    else
    {
      if (inited) {
        goto LABEL_21;
      }
      CFUUIDRef v6 = 0;
    }
    krb5_free_context(v16);
    if (v6) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

  return strdup("Success");
}

void krb5_free_error_message(krb5_context a1, const char *a2)
{
  if (a2) {
    free((void *)a2);
  }
}

const char *krb5_get_err_text(uint64_t a1, int __errnum)
{
  if (!a1 || (uint64_t result = (const char *)com_right(*(void **)(a1 + 144), __errnum)) == 0) {
    uint64_t result = strerror(__errnum);
  }
  if (!result) {
    return "Unknown error";
  }
  return result;
}

CFIndex sub_213C878C8(_krb5_context *a1, CFIndex Code, CFErrorRef err, char *a4, va_list a5)
{
  uint64_t v19 = 0;
  if (err)
  {
    CFStringRef v10 = CFErrorCopyDescription(err);
    if (v10)
    {
      CFStringRef v11 = v10;
      uint64_t v12 = rk_cfstring2cstring(v10);
      CFRelease(v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    CFDictionaryRef v13 = CFErrorCopyUserInfo(err);
    if (v13)
    {
      CFDictionaryRef v14 = v13;
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v13, @"CommonErrorCode");
      if (Value)
      {
        CFBooleanRef v16 = Value;
        CFTypeID v17 = CFGetTypeID(Value);
        if (v17 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v16)) {
            Code = CFErrorGetCode(err);
          }
        }
      }
      CFRelease(v14);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  if ((vasprintf(&v19, a4, a5) & 0x80000000) == 0 && v19)
  {
    if (v12)
    {
      krb5_set_error_message(a1, Code, "%s: %s", v19, v12);
      free(v12);
    }
    else
    {
      krb5_set_error_message(a1, Code, "%s", v19);
    }
    uint64_t v12 = v19;
  }
  free(v12);
  return Code;
}

CFIndex sub_213C87A1C(_krb5_context *a1, CFIndex a2, __CFError *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_213C878C8(a1, a2, a3, a4, &a9);
}

uint64_t krb5_expand_hostname(_krb5_context *a1, char *__s1, unsigned __int8 **a3)
{
  if (*((unsigned char *)a1 + 360))
  {
    uint64_t v12 = 0;
    memset(&v11, 0, sizeof(v11));
    v11.ai_flags = 2;
    if (!getaddrinfo(__s1, 0, &v11, &v12))
    {
      uint64_t v7 = v12;
      if (v12)
      {
        CFUUIDRef v8 = v12;
        while (1)
        {
          ai_canonname = v8->ai_canonname;
          if (ai_canonname) {
            break;
          }
          CFUUIDRef v8 = v8->ai_next;
          if (!v8) {
            goto LABEL_10;
          }
        }
        *a3 = (unsigned __int8 *)strdup(ai_canonname);
        freeaddrinfo(v7);
        if (*a3) {
          return 0;
        }
        uint64_t v10 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
        return v10;
      }
LABEL_10:
      freeaddrinfo(v12);
    }
    return sub_213C87B60(a1, __s1, a3);
  }

  return sub_213C87B60(a1, __s1, a3);
}

uint64_t sub_213C87B60(_krb5_context *a1, char *__s1, unsigned __int8 **a3)
{
  int v5 = (unsigned __int8 *)strdup(__s1);
  *a3 = v5;
  if (v5)
  {
    rk_strlwr(v5);
    return 0;
  }
  else
  {
    uint64_t v6 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v6;
}

uint64_t krb5_expand_hostname_realms(_krb5_context *a1, char *a2, unsigned __int8 **a3, char ***a4)
{
  if ((*((unsigned char *)a1 + 360) & 1) == 0)
  {
    return sub_213C87D08(a1, a2, a3, a4);
  }
  uint64_t v15 = 0;
  memset(&v14, 0, sizeof(v14));
  v14.ai_flags = 2;
  if (getaddrinfo(a2, 0, &v14, &v15)) {
    return sub_213C87D08(a1, a2, a3, a4);
  }
  krb5_error_code v9 = v15;
  if (!v15)
  {
    uint64_t v12 = 0;
LABEL_14:
    freeaddrinfo(v12);
    return sub_213C87D08(a1, a2, a3, a4);
  }
  while (1)
  {
    ai_canonname = v9->ai_canonname;
    if (ai_canonname) {
      break;
    }
LABEL_11:
    krb5_error_code v9 = v9->ai_next;
    if (!v9)
    {
      uint64_t v12 = v15;
      goto LABEL_14;
    }
  }
  uint64_t v11 = sub_213C87B60(a1, ai_canonname, a3);
  if (v11)
  {
    uint64_t v13 = v11;
    freeaddrinfo(v15);
    return v13;
  }
  rk_strlwr(*a3);
  if (krb5_get_host_realm(a1, (const char *)*a3, a4))
  {
    free(*a3);
    goto LABEL_11;
  }
  freeaddrinfo(v15);
  return 0;
}

uint64_t sub_213C87D08(_krb5_context *a1, char *a2, unsigned __int8 **a3, char ***a4)
{
  uint64_t host_realm = sub_213C87B60(a1, a2, a3);
  if (!host_realm)
  {
    rk_strlwr(*a3);
    uint64_t host_realm = krb5_get_host_realm(a1, (const char *)*a3, a4);
    if (host_realm) {
      free(*a3);
    }
  }
  return host_realm;
}

uint64_t sub_213C87D70(_krb5_context *a1, int a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v9[1] = 0;
  uint64_t v10 = 0;
  if (a3) {
    __int16 v4 = 3;
  }
  else {
    __int16 v4 = 1;
  }
  v9[0] = 0;
  WORD2(v10) = v4;
  uint64_t v5 = fcntl(a2, 9, v9);
  if ((v5 & 0x80000000) != 0) {
    uint64_t v5 = *__error();
  }
  if (v5 == 13) {
    int v6 = 35;
  }
  else {
    int v6 = v5;
  }
  if (v6) {
    BOOL v7 = v6 == 22;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  if (v6 == 35)
  {
    uint64_t v5 = 35;
    krb5_set_error_message(a1, 35, "timed out locking cache file %s");
  }
  else
  {
    strerror_r(v6, __strerrbuf, 0x80uLL);
    krb5_set_error_message(a1, v6, "error locking cache file %s: %s");
  }
  return v5;
}

uint64_t sub_213C87E88(_krb5_context *a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[1] = 0;
  v5[2] = 0x200000000;
  v5[0] = 0;
  uint64_t v3 = fcntl(a2, 9, v5);
  if ((v3 & 0x80000000) != 0) {
    uint64_t v3 = *__error();
  }
  uint64_t result = 0;
  if (v3)
  {
    if (v3 != 22)
    {
      strerror_r(v3, __strerrbuf, 0x80uLL);
      krb5_set_error_message(a1, v3, "Failed to unlock file: %s", __strerrbuf);
      return v3;
    }
  }
  return result;
}

uint64_t sub_213C87F58(_krb5_context *a1, char *a2)
{
  memset(&v12, 0, sizeof(v12));
  memset(&v11, 0, sizeof(v11));
  if (lstat(a2, &v12) < 0) {
    return *__error();
  }
  int v4 = open(a2, 2);
  if (v4 < 0)
  {
    if (*__error() == 2) {
      return 0;
    }
    return *__error();
  }
  int v5 = v4;
  sub_213CB79C8(v4);
  uint64_t v6 = sub_213C87D70(a1, v5, 1);
  if (v6)
  {
    uint64_t v7 = v6;
    close(v5);
    return v7;
  }
  if (unlink(a2) < 0 || fstat(v5, &v11) < 0)
  {
    sub_213C87E88(a1, v5);
    close(v5);
    return *__error();
  }
  if (v12.st_dev != v11.st_dev || v12.st_ino != v11.st_ino)
  {
    sub_213C87E88(a1, v5);
    close(v5);
    return 1;
  }
  if (v11.st_nlink)
  {
    sub_213C87E88(a1, v5);
    close(v5);
    return 0;
  }
  unsigned int v9 = sub_213C880EC(v5);
  unsigned int v10 = sub_213C87E88(a1, v5);
  close(v5);
  if (v9) {
    return v9;
  }
  else {
    return v10;
  }
}

uint64_t sub_213C880EC(int a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  off_t v2 = lseek(a1, 0, 2);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v2;
    if ((lseek(a1, 0, 0) & 0x8000000000000000) == 0)
    {
      memset(v7, 0, sizeof(v7));
      if (!v3)
      {
LABEL_9:
        fsync(a1);
        return 0;
      }
      while (1)
      {
        size_t v4 = (unint64_t)v3 >= 0x80 ? 128 : v3;
        ssize_t v5 = write(a1, v7, v4);
        if (v5 < 0) {
          break;
        }
        v3 -= v5;
        if (v3 < 1) {
          goto LABEL_9;
        }
      }
    }
  }
  return *__error();
}

uint64_t sub_213C881C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2) {
    return *(void *)v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_213C881E0(_krb5_context *a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = malloc_type_malloc(0x10uLL, 0x1010040A1D9428BuLL);
  if (!v6)
  {
    uint64_t v9 = 2529639110;
LABEL_6:
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    return v9;
  }
  uint64_t v7 = v6;
  uint64_t v8 = strdup(a3);
  *(void *)uint64_t v7 = v8;
  if (!v8)
  {
    uint64_t v9 = 2529639110;
    free(v7);
    goto LABEL_6;
  }
  uint64_t v9 = 0;
  v7[2] = 0;
  *(void *)(*(void *)a2 + 16) = v7;
  *(void *)(*(void *)a2 + 8) = 16;
  return v9;
}

uint64_t sub_213C88298(_krb5_context *a1, uint64_t a2)
{
  unsigned int v10 = 0;
  __s1 = 0;
  size_t v4 = malloc_type_malloc(0x10uLL, 0x1010040A1D9428BuLL);
  if (!v4)
  {
    uint64_t v6 = 2529639110;
LABEL_9:
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    return v6;
  }
  ssize_t v5 = v4;
  if (asprintf(&__s1, "%sXXXXXX", "%{TEMP}/krb5cc_") < 0 || !__s1)
  {
    uint64_t v6 = 2529639110;
    free(v5);
    goto LABEL_9;
  }
  uint64_t v6 = _krb5_expand_default_cc_name_0(a1, __s1, (void **)&v10);
  free(__s1);
  if (v6)
  {
    uint64_t v7 = (char *)v5;
  }
  else
  {
    __s1 = v10;
    int v9 = mkstemp(v10);
    if ((v9 & 0x80000000) == 0)
    {
      close(v9);
      uint64_t v6 = 0;
      *(void *)ssize_t v5 = v10;
      v5[2] = 0;
      *(void *)(*(void *)a2 + 16) = v5;
      *(void *)(*(void *)a2 + 8) = 16;
      return v6;
    }
    uint64_t v6 = *__error();
    krb5_set_error_message(a1, v6, "mkstemp %s failed", v10);
    free(v5);
    uint64_t v7 = v10;
  }
  free(v7);
  return v6;
}

uint64_t sub_213C883E8(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    int v21 = 0;
    unlink(*(const char **)v4);
    uint64_t v7 = sub_213C893B4((_krb5_context *)a1, a2, "initialize", &v21, 16779778, 0x180u);
    if (!v7)
    {
      uint64_t v8 = krb5_storage_emem();
      krb5_storage_set_eof_code((uint64_t)v8, -1765328242);
      int v9 = a1[63];
      if (!v9) {
        int v9 = 4;
      }
      *(_DWORD *)(v4 + 8) = v9;
      int v10 = krb5_store_int8((uint64_t)v8, 5);
      int v11 = krb5_store_int8((uint64_t)v8, *(unsigned char *)(v4 + 8)) | v10;
      sub_213C8953C((_krb5_context *)a1, (uint64_t)v8, *(_DWORD *)(v4 + 8));
      if (*(_DWORD *)(v4 + 8) == 4 && v11 == 0)
      {
        if (a1[27])
        {
          int v13 = krb5_store_int16((uint64_t)v8, 0xCu);
          int v14 = krb5_store_int16((uint64_t)v8, 1u) | v13;
          int v15 = v14 | krb5_store_int16((uint64_t)v8, 8u);
          int v16 = v15 | krb5_store_int32((uint64_t)v8, a1[27]);
          int v11 = v16 | krb5_store_int32((uint64_t)v8, a1[28]);
        }
        else
        {
          int v11 = krb5_store_int16((uint64_t)v8, 0);
        }
      }
      int v18 = krb5_store_principal((uint64_t)v8, a3);
      int v19 = v21;
      uint64_t v7 = v18 | v11 | sub_213C89598((_krb5_context *)a1, (uint64_t)v8, v21);
      krb5_storage_free((uint64_t)v8);
      sub_213C87E88((_krb5_context *)a1, v19);
      if (close(v19) < 0 && !v7)
      {
        uint64_t v20 = __error();
        uint64_t v7 = *v20;
        strerror_r(*v20, __strerrbuf, 0x80uLL);
        krb5_set_error_message((krb5_context)a1, v7, "close %s: %s", **(const char ***)(a2 + 16), __strerrbuf);
      }
    }
    return v7;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C88648(_krb5_context *a1, uint64_t a2)
{
  uint64_t v2 = *(char ***)(a2 + 16);
  if (v2)
  {
    sub_213C87F58(a1, *v2);
    return 0;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C88694(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = (void *)(a2 + 8);
    free(*v2);
    krb5_data_free(v3);
    return 0;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C886F8(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v15 = 0;
  uint64_t v6 = sub_213C893B4(a1, a2, "store", &v15, 16777225, 0);
  if (!v6)
  {
    uint64_t v7 = krb5_storage_emem();
    krb5_storage_set_eof_code((uint64_t)v7, -1765328242);
    sub_213C8953C(a1, (uint64_t)v7, *(_DWORD *)(*(void *)(a2 + 16) + 8));
    if (!krb5_config_get_BOOL_default((uint64_t)a1, 0, 1, v8, v9, v10, v11, v12, (uint64_t)"libdefaults")) {
      krb5_storage_set_flags((uint64_t)v7, 128);
    }
    uint64_t v6 = krb5_store_creds((uint64_t)v7, a3);
    int v13 = v15;
    if (!v6) {
      uint64_t v6 = sub_213C89598(a1, (uint64_t)v7, v15);
    }
    krb5_storage_free((uint64_t)v7);
    sub_213C87E88(a1, v13);
    if (close(v13) < 0 && !v6)
    {
      strerror_r(0, __strerrbuf, 0x80uLL);
      uint64_t v6 = *__error();
      krb5_set_error_message(a1, v6, "close %s: %s", **(const char ***)(a2 + 16), __strerrbuf);
    }
  }
  return v6;
}

uint64_t sub_213C8887C(unsigned int *a1, uint64_t a2, void *a3)
{
  int v10 = 0;
  uint64_t v9 = 0;
  uint64_t v5 = sub_213C89640(a1, a2, "get-pricipal", &v9, &v10, 0);
  if (!v5)
  {
    uint64_t v6 = v9;
    uint64_t v5 = krb5_ret_principal(v9, a3);
    if (v5) {
      krb5_clear_error_message((krb5_context)a1);
    }
    krb5_storage_free(v6);
    int v7 = v10;
    sub_213C87E88((_krb5_context *)a1, v10);
    close(v7);
  }
  return v5;
}

uint64_t sub_213C8891C(unsigned int *a1, uint64_t a2, int **a3)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v6 = (int *)malloc_type_malloc(0x10uLL, 0x1020040D5A9D86FuLL);
    *a3 = v6;
    if (v6)
    {
      *(void *)uint64_t v6 = 0;
      *((void *)v6 + 1) = 0;
      uint64_t v7 = sub_213C89640(a1, a2, "get-frist", (uint64_t *)*a3 + 1, *a3, 0);
      if (v7)
      {
        uint64_t v8 = v7;
        free(*a3);
        *a3 = 0;
      }
      else
      {
        krb5_principal v10 = 0;
        uint64_t v8 = krb5_ret_principal(*((void *)*a3 + 1), &v10);
        if (v8)
        {
          krb5_clear_error_message((krb5_context)a1);
          sub_213C88B34((uint64_t)a1, a2, a3);
        }
        else
        {
          krb5_free_principal((krb5_context)a1, v10);
          sub_213C87E88((_krb5_context *)a1, **a3);
        }
      }
    }
    else
    {
      uint64_t v8 = 12;
      krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
    }
    return v8;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C88A60(_krb5_context *a1, uint64_t a2, int **a3, uint64_t a4)
{
  if (*(void *)(a2 + 16) && *a3)
  {
    uint64_t v7 = sub_213C87D70(a1, **a3, 0);
    if (!v7)
    {
      uint64_t v7 = krb5_ret_creds(*((void *)*a3 + 1), a4);
      if (v7) {
        krb5_clear_error_message(a1);
      }
      sub_213C87E88(a1, **a3);
    }
    return v7;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C88B34(uint64_t a1, uint64_t a2, int **a3)
{
  if (*(void *)(a2 + 16) && *a3)
  {
    krb5_storage_free(*((void *)*a3 + 1));
    close(**a3);
    free(*a3);
    *a3 = 0;
    return 0;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C88BC0(krb5_context context, uint64_t a2, krb5_flags a3, krb5_creds *a4)
{
  uint64_t v17 = 0;
  if (*(void *)(a2 + 16))
  {
    krb5_ccache cache = 0;
    krb5_ccache id = 0;
    uint64_t v8 = krb5_cc_new_unique(context, krb5_cc_type_memory[0], 0, &id);
    if (v8) {
      return v8;
    }
    uint64_t v9 = krb5_cc_copy_cache(context, a2, (uint64_t)id);
    krb5_principal v10 = id;
    if (v9)
    {
      uint64_t v8 = v9;
    }
    else
    {
      uint64_t v12 = krb5_cc_remove_cred(context, id, a3, a4);
      if (v12)
      {
        uint64_t v8 = v12;
      }
      else
      {
        if (asprintf(&v17, "FILE:%s.XXXXXX", **(const char ***)(a2 + 16)) < 0 || !v17)
        {
          krb5_cc_destroy(context, id);
          return 12;
        }
        int v13 = mkstemp(v17 + 5);
        if (v13 < 0)
        {
          uint64_t v8 = *__error();
        }
        else
        {
          close(v13);
          uint64_t v14 = krb5_cc_resolve(context, v17, &cache);
          if (!v14)
          {
            uint64_t v8 = krb5_cc_copy_cache(context, (uint64_t)id, (uint64_t)cache);
            krb5_cc_destroy(context, id);
            if (!v8)
            {
              rename((const std::__fs::filesystem::path *)(v17 + 5), **(const std::__fs::filesystem::path ***)(a2 + 16), v15);
              if (v16) {
                uint64_t v8 = *__error();
              }
              else {
                uint64_t v8 = 0;
              }
              free(v17);
              krb5_cc_close(context, cache);
              return v8;
            }
            free(v17);
            krb5_principal v10 = cache;
            goto LABEL_11;
          }
          uint64_t v8 = v14;
          unlink(v17 + 5);
          free(v17);
        }
      }
      krb5_principal v10 = id;
    }
LABEL_11:
    krb5_cc_destroy(context, v10);
    return v8;
  }

  return sub_213C9DA08();
}

uint64_t sub_213C88DAC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 0;
  }
  else {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C88DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2) {
    return *(unsigned int *)(v2 + 8);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_213C88DE4(_krb5_context *a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v4)
  {
    uint64_t v5 = 0;
    _DWORD *v4 = 1;
    *a2 = v4;
  }
  else
  {
    uint64_t v5 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v5;
}

uint64_t sub_213C88E60(const char **a1, _DWORD *a2, krb5_ccache *a3)
{
  uint64_t v9 = 0;
  if (a2)
  {
    if (*a2)
    {
      *a2 = 0;
      uint64_t v5 = a1[38];
      if (v5 && !strncasecmp(a1[38], "FILE:", 5uLL)) {
        goto LABEL_7;
      }
      uint64_t v6 = _krb5_expand_default_cc_name((int)a1, "FILE:%{TEMP}/krb5cc_%{uid}");
      if (!v6)
      {
        uint64_t v5 = v9;
LABEL_7:
        if (!strncasecmp(v5, "FILE:", 5uLL) && (memset(&v8, 0, sizeof(v8)), stat(v5 + 5, &v8))) {
          uint64_t v6 = 2529639054;
        }
        else {
          uint64_t v6 = krb5_cc_resolve((krb5_context)a1, v5, a3);
        }
        if (v9) {
          free(v9);
        }
      }
    }
    else
    {
      uint64_t v6 = 2529639054;
      krb5_clear_error_message((krb5_context)a1);
    }
    return v6;
  }

  return sub_213C9DA08();
}

uint64_t sub_213C88FA0(int a1, void *a2)
{
  if (a2)
  {
    free(a2);
    return 0;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C88FE0(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  __buf[128] = *MEMORY[0x263EF8340];
  rename(**(const std::__fs::filesystem::path ***)(a2 + 16), **(const std::__fs::filesystem::path ***)(a3 + 16), (std::error_code *)a3);
  if (v6)
  {
    if (*__error() != 18)
    {
      uint64_t v12 = __error();
      uint64_t v7 = *v12;
      strerror_r(*v12, (char *)__buf, 0x80uLL);
      krb5_set_error_message(a1, v7, "Rename of file from %s to %s failed: %s", **(const char ***)(a2 + 16), **(const char ***)(a3 + 16), (const char *)__buf);
      return v7;
    }
    if (*__error() == 18)
    {
      *(void *)int v15 = 0;
      uint64_t v7 = sub_213C893B4(a1, a2, "move/from", &v15[1], 0x1000000, 0);
      if (v7) {
        return v7;
      }
      unlink(**(const char ***)(a3 + 16));
      uint64_t v7 = sub_213C893B4(a1, a3, "move/to", v15, 16779777, 0x180u);
      int v8 = v15[1];
      if (!v7)
      {
        int v9 = v15[0];
        krb5_principal v10 = "Failed to write data from one file credential cache to the other";
        while (1)
        {
          ssize_t v11 = read(v8, __buf, 0x400uLL);
          if (v11 < 1) {
            break;
          }
          if (v11 != write(v9, __buf, v11)) {
            goto LABEL_14;
          }
        }
        if ((v11 & 0x8000000000000000) == 0)
        {
          uint64_t v7 = 0;
          goto LABEL_15;
        }
        krb5_principal v10 = "Failed to read data from one file credential cache to the other";
LABEL_14:
        uint64_t v7 = 5;
        krb5_set_error_message(a1, 5, v10);
LABEL_15:
        sub_213C87E88(a1, v9);
        close(v9);
      }
      sub_213C87E88(a1, v8);
      close(v8);
      sub_213C87F58(a1, **(char ***)(a2 + 16));
      if (v7)
      {
        sub_213C87F58(a1, **(char ***)(a3 + 16));
        return v7;
      }
    }
  }
  __buf[0] = 0;
  v15[1] = 0;
  uint64_t v7 = sub_213C89640((unsigned int *)a1, a3, "move", __buf, &v15[1], 0);
  if (!v7)
  {
    if (__buf[0]) {
      krb5_storage_free(__buf[0]);
    }
    int v13 = v15[1];
    sub_213C87E88(a1, v15[1]);
    close(v13);
  }
  sub_213C88694((uint64_t)a1, a2);
  return v7;
}

uint64_t sub_213C89260(int a1)
{
  return _krb5_expand_default_cc_name(a1, "FILE:%{TEMP}/krb5cc_%{uid}");
}

uint64_t sub_213C89270(_krb5_context *a1, uint64_t a2, __darwin_time_t *a3)
{
  memset(&v10, 0, sizeof(v10));
  int v9 = 0;
  uint64_t v5 = sub_213C893B4(a1, a2, "lastchange", &v9, 0x1000000, 0);
  if (!v5)
  {
    int v6 = v9;
    int v7 = fstat(v9, &v10);
    close(v6);
    if (v7)
    {
      uint64_t v5 = *__error();
      krb5_set_error_message(a1, v5, "Failed to stat cache file");
    }
    else
    {
      uint64_t v5 = 0;
      *a3 = v10.st_mtimespec.tv_sec;
    }
  }
  return v5;
}

uint64_t sub_213C89330()
{
  return 0;
}

uint64_t sub_213C89338(unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v8 = 0;
  int v7 = 0;
  uint64_t v4 = sub_213C89640(a1, a2, "get-kdc-offset", &v8, &v7, a3);
  if (v8) {
    krb5_storage_free(v8);
  }
  int v5 = v7;
  sub_213C87E88((_krb5_context *)a1, v7);
  close(v5);
  return v4;
}

uint64_t sub_213C893B4(_krb5_context *a1, uint64_t a2, const char *a3, int *a4, int a5, unsigned int a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  BOOL v8 = (a5 | 1) == a5 || (a5 | 2) == a5;
  int v9 = *(const char ***)(a2 + 16);
  if (v9)
  {
    uint64_t v12 = *v9;
    int v13 = open(*v9, a5, a6);
    if (v13 < 0)
    {
      int v16 = __error();
      uint64_t v17 = *v16;
      strerror_r(*v16, __strerrbuf, 0x80uLL);
      krb5_set_error_message(a1, v17, "%s open(%s): %s", a3, v12, __strerrbuf);
    }
    else
    {
      int v14 = v13;
      sub_213CB79C8(v13);
      uint64_t v18 = sub_213C87D70(a1, v14, v8);
      uint64_t v17 = v18;
      if (v18) {
        close(v14);
      }
      else {
        *a4 = v14;
      }
    }
    return v17;
  }
  else
  {
    return sub_213C9DA08();
  }
}

uint64_t sub_213C8953C(_krb5_context *a1, uint64_t a2, int a3)
{
  if ((a3 - 1) >= 4) {
    krb5_abortx(a1, "storage_set_flags called with bad vno (%x)", a3);
  }
  int v4 = dword_213CDA3A4[a3 - 1];

  return krb5_storage_set_flags(a2, v4);
}

uint64_t sub_213C89598(_krb5_context *a1, uint64_t a2, int a3)
{
  size_t v10 = 0;
  ssize_t v11 = 0;
  uint64_t v5 = krb5_storage_to_data(a2, &v10);
  if (v5)
  {
    uint64_t v6 = v5;
    krb5_set_error_message(a1, v5, "malloc: out of memory");
  }
  else
  {
    ssize_t v7 = write(a3, v11, v10);
    size_t v8 = v10;
    krb5_data_free(&v10);
    if (v7 == v8)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = *__error();
      krb5_set_error_message(a1, v6, "Failed to write FILE credential data");
    }
  }
  return v6;
}

uint64_t sub_213C89640(unsigned int *a1, uint64_t a2, const char *a3, uint64_t *a4, int *a5, void *a6)
{
  if (a6) {
    *a6 = 0;
  }
  int v33 = 0;
  __int16 v32 = 0;
  uint64_t v11 = sub_213C893B4((_krb5_context *)a1, a2, a3, &v33, 0x1000000, 0);
  if (v11) {
    return v11;
  }
  int v12 = v33;
  int v13 = krb5_storage_from_fd(v33);
  if (!v13)
  {
    krb5_clear_error_message((krb5_context)a1);
    uint64_t v11 = 12;
    goto LABEL_18;
  }
  uint64_t v14 = (uint64_t)v13;
  uint64_t v11 = 2529639111;
  krb5_storage_set_eof_code((uint64_t)v13, -1765328242);
  uint64_t v15 = krb5_ret_int8(v14, (uint64_t)&v32 + 1);
  if (v15)
  {
    uint64_t v16 = v15;
    if (v15 == -1765328242)
    {
      uint64_t v11 = 2;
      krb5_set_error_message((krb5_context)a1, 2, "Empty credential cache file: %s");
    }
    else
    {
      krb5_set_error_message((krb5_context)a1, v15, "Error reading pvno in cache file: %s", **(const char ***)(a2 + 16));
      uint64_t v11 = v16;
    }
    goto LABEL_17;
  }
  if (HIBYTE(v32) != 5)
  {
    uint64_t v11 = 2529639124;
    uint64_t v26 = **(void **)(a2 + 16);
    uint64_t v17 = "Bad version number in credential cache file: %s";
LABEL_15:
    uint64_t v18 = (_krb5_context *)a1;
    krb5_error_code v19 = -1765328172;
    goto LABEL_16;
  }
  if (krb5_ret_int8(v14, (uint64_t)&v32))
  {
    uint64_t v26 = **(void **)(a2 + 16);
    uint64_t v17 = "Error reading tag in cache file: %s";
    goto LABEL_12;
  }
  int v21 = (char)v32;
  *(_DWORD *)(*(void *)(a2 + 16) + 8) = (char)v32;
  sub_213C8953C((_krb5_context *)a1, v14, v21);
  if (((char)v32 - 1) < 3)
  {
LABEL_21:
    uint64_t v11 = 0;
    *a4 = v14;
    *a5 = v12;
    return v11;
  }
  if ((char)v32 != 4)
  {
    uint64_t v11 = 2529639124;
    uint64_t v26 = (char)v32;
    uint64_t v27 = **(void **)(a2 + 16);
    uint64_t v17 = "Unknown version number (%d) in credential cache file: %s";
    goto LABEL_15;
  }
  __int16 v31 = 0;
  if (krb5_ret_int16(v14, &v31))
  {
    uint64_t v26 = **(void **)(a2 + 16);
    uint64_t v17 = "Error reading tag length in cache file: %s";
    goto LABEL_12;
  }
  if (v31 < 1) {
    goto LABEL_21;
  }
  while (1)
  {
    int v30 = 0;
    char v29 = 0;
    if (krb5_ret_int16(v14, (_WORD *)&v30 + 1))
    {
      uint64_t v26 = **(void **)(a2 + 16);
      uint64_t v17 = "Error reading dtag in cache file: %s";
      goto LABEL_12;
    }
    if (krb5_ret_int16(v14, &v30))
    {
      uint64_t v26 = **(void **)(a2 + 16);
      uint64_t v17 = "Error reading dlength in cache file: %s";
      goto LABEL_12;
    }
    if (HIWORD(v30) != 1) {
      break;
    }
    signed int v28 = 0;
    int v22 = krb5_ret_int32(v14, (unsigned int *)&v28);
    if (krb5_ret_int32(v14, a1 + 28) | v22)
    {
      uint64_t v26 = **(void **)(a2 + 16);
      uint64_t v17 = "Error reading kdc_sec in cache file: %s";
      goto LABEL_12;
    }
    uint64_t v23 = v28;
    a1[27] = v28;
    if (a6) {
      *a6 = v23;
    }
    __int16 v24 = v30;
LABEL_38:
    __int16 v31 = v31 - v24 - 4;
    if (v31 <= 0) {
      goto LABEL_21;
    }
  }
  __int16 v24 = v30;
  if ((__int16)v30 < 1) {
    goto LABEL_38;
  }
  int v25 = 0;
  while (!krb5_ret_int8(v14, (uint64_t)&v29))
  {
    ++v25;
    __int16 v24 = v30;
    if (v25 >= (__int16)v30) {
      goto LABEL_38;
    }
  }
  uint64_t v26 = **(void **)(a2 + 16);
  uint64_t v17 = "Error reading unknown tag in cache file: %s";
LABEL_12:
  uint64_t v18 = (_krb5_context *)a1;
  krb5_error_code v19 = -1765328185;
LABEL_16:
  krb5_set_error_message(v18, v19, v17, v26, v27);
LABEL_17:
  krb5_storage_free(v14);
LABEL_18:
  sub_213C87E88((_krb5_context *)a1, v12);
  close(v12);
  return v11;
}

krb5_error_code krb5_free_host_realm(krb5_context a1, char *const *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      int v4 = a2 + 1;
      do
      {
        free(v3);
        uint64_t v5 = *v4++;
        uint64_t v3 = v5;
      }
      while (v5);
    }
    free((void *)a2);
  }
  return 0;
}

uint64_t krb5_free_kdc_rep(uint64_t a1, _OWORD *a2)
{
  a2[23] = 0u;
  a2[24] = 0u;
  a2[21] = 0u;
  a2[22] = 0u;
  a2[19] = 0u;
  a2[20] = 0u;
  a2[17] = 0u;
  a2[18] = 0u;
  a2[15] = 0u;
  a2[16] = 0u;
  a2[13] = 0u;
  a2[14] = 0u;
  a2[11] = 0u;
  a2[12] = 0u;
  a2[9] = 0u;
  a2[10] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return 0;
}

uint64_t krb5_xfree(void *a1)
{
  return 0;
}

uint64_t krb5_generate_seq_number(_krb5_context *a1, uint64_t a2, int *a3)
{
  uint64_t result = CCRandomCopyBytes();
  if (result) {
    krb5_abortx(a1, "Failed to generate random block");
  }
  if ((*a3 & 0x3FFFFFFE) != 0) {
    int v6 = *a3 & 0x3FFFFFFF;
  }
  else {
    int v6 = 1;
  }
  *a3 = v6;
  return result;
}

uint64_t krb5_generate_subkey_extended(_krb5_context *a1, unsigned int *a2, char *a3, void **a4)
{
  size_t v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
  *a4 = v8;
  if (v8)
  {
    if (!a3) {
      a3 = (char *)*a2;
    }
    uint64_t random_keyblock = krb5_generate_random_keyblock(a1, a3, (uint64_t)v8);
    if (random_keyblock)
    {
      free(*a4);
      *a4 = 0;
    }
  }
  else
  {
    uint64_t random_keyblock = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return random_keyblock;
}

uint64_t krb5_get_all_client_addrs(_krb5_context *a1, uint64_t a2)
{
  if (*((_DWORD *)a1 + 60)) {
    char v2 = 14;
  }
  else {
    char v2 = 6;
  }
  return sub_213C89BAC(a1, a2, v2);
}

uint64_t sub_213C89BAC(_krb5_context *a1, uint64_t a2, char a3)
{
  v14[32] = *(krb5_address ***)MEMORY[0x263EF8340];
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if ((a3 & 8) != 0 && (sub_213C89FDC(a1, a2, a3) || !*(_DWORD *)a2))
  {
    if (gethostname((char *)v14, 0x100uLL))
    {
      ssize_t v7 = __error();
      uint64_t extra_addresses = *v7;
      strerror(*v7);
      krb5_set_error_message(a1, extra_addresses, "gethostname: %s");
      goto LABEL_7;
    }
    size_t v8 = sub_213CB979C((const char *)v14);
    if (!v8)
    {
      int v12 = __error();
      uint64_t extra_addresses = *v12;
      strerror(*v12);
      krb5_set_error_message(a1, extra_addresses, "gethostbyname %s: %s");
LABEL_7:
      if (extra_addresses) {
        goto LABEL_21;
      }
      goto LABEL_2;
    }
    int v9 = v8;
    *(_DWORD *)a2 = 1;
    size_t v10 = malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
    *(void *)(a2 + 8) = v10;
    if (!v10)
    {
      uint64_t extra_addresses = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_21;
    }
    *(_DWORD *)size_t v10 = *((_DWORD *)v9 + 4);
    v10[2] = 0;
    v10[1] = 0;
    uint64_t v11 = krb5_data_copy(v10 + 1, *(const void **)v9[3], *((int *)v9 + 5));
    if (v11)
    {
      uint64_t extra_addresses = v11;
      free(*(void **)(a2 + 8));
      goto LABEL_21;
    }
  }
LABEL_2:
  if ((a3 & 4) != 0)
  {
    v14[0] = 0;
    v14[1] = 0;
    uint64_t extra_addresses = krb5_get_extra_addresses(a1, v14);
    if (extra_addresses
      || (uint64_t extra_addresses = krb5_append_addresses(a1, a2, (unsigned int *)v14), extra_addresses))
    {
      krb5_free_addresses(a1, (krb5_address **)a2);
      return extra_addresses;
    }
    krb5_free_addresses(a1, (krb5_address **)v14);
  }
  else
  {
    uint64_t extra_addresses = 0;
  }
LABEL_21:
  if (!*(_DWORD *)a2)
  {
    free(*(void **)(a2 + 8));
    *(void *)(a2 + 8) = 0;
  }
  return extra_addresses;
}

uint64_t krb5_get_all_server_addrs(_krb5_context *a1, uint64_t a2)
{
  return sub_213C89BAC(a1, a2, 9);
}

uint64_t krb5_get_all_any_addrs(_krb5_context *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  int v12 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v10, 0, sizeof(v10));
  *(_DWORD *)a2 = 0;
  char v5 = 1;
  *(void *)(a2 + 8) = 0;
  do
  {
    char v6 = v5;
    int v9 = 128;
    if (!krb5_anyaddr(a1, dword_213CDA3B8[v4], (uint64_t)v13, (uint64_t)&v9, 0)
      && !krb5_sockaddr2address(a1, (uint64_t)v13, (uint64_t)v10))
    {
      int v12 = v10;
      LODWORD(v11) = 1;
      uint64_t appended = krb5_append_addresses(a1, a2, (unsigned int *)&v11);
      krb5_free_address((uint64_t)a1, (uint64_t)v10);
      if (appended)
      {
        krb5_free_addresses(a1, (krb5_address **)a2);
        return appended;
      }
    }
    char v5 = 0;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  if (*(_DWORD *)a2) {
    return 0;
  }
  uint64_t appended = 6;
  krb5_set_error_message(a1, 6, "no addresses found");
  return appended;
}

uint64_t sub_213C89F14(_krb5_context *a1)
{
  size_t v8 = 0;
  uint64_t v9 = 0;
  if (sub_213C89FDC(a1, (uint64_t)&v8, 8)) {
    return 0;
  }
  if (v8)
  {
    uint64_t v3 = 0;
    uint64_t v2 = 0;
    do
    {
      uint64_t v4 = 0;
      char v5 = 1;
      while (1)
      {
        char v6 = v5;
        if (*(_DWORD *)(v9 + 24 * v3) == dword_213CDA3C0[2 * v4]) {
          break;
        }
        char v5 = 0;
        uint64_t v4 = 1;
        if ((v6 & 1) == 0) {
          goto LABEL_10;
        }
      }
      uint64_t v2 = dword_213CDA3C0[2 * v4 + 1] | v2;
LABEL_10:
      ++v3;
    }
    while (v3 != v8);
  }
  else
  {
    uint64_t v2 = 0;
  }
  krb5_free_addresses(a1, &v8);
  return v2;
}

uint64_t sub_213C89FDC(_krb5_context *a1, uint64_t a2, char a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v21[1] = 0;
  int v22 = 0;
  v21[0] = 0;
  if (getifaddrs(&v22) == -1)
  {
    uint64_t v9 = __error();
    uint64_t ignore_addresses = *v9;
    strerror(*v9);
    krb5_set_error_message(a1, ignore_addresses, "getifaddrs: %s");
    return ignore_addresses;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v6 = &v22;
  LODWORD(v7) = -1;
  do
  {
    char v6 = (ifaddrs **)*v6;
    size_t v7 = (v7 + 1);
  }
  while (v6);
  if (!v7)
  {
    MEMORY[0x216695300](v22);
    uint64_t ignore_addresses = 6;
    krb5_set_error_message(a1, 6, "no addresses found");
    return ignore_addresses;
  }
  if ((a3 & 4) != 0)
  {
    uint64_t ignore_addresses = krb5_get_ignore_addresses(a1, v21);
    if (ignore_addresses) {
      return ignore_addresses;
    }
  }
  else
  {
    uint64_t ignore_addresses = 6;
  }
  size_t v10 = malloc_type_calloc(v7, 0x18uLL, 0x10800404ACF7207uLL);
  *(void *)(a2 + 8) = v10;
  if (!v10)
  {
    krb5_free_addresses(a1, (krb5_address **)v21);
    MEMORY[0x216695300](v22);
    uint64_t ignore_addresses = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return ignore_addresses;
  }
  uint64_t v11 = v22;
  if (v22)
  {
    unsigned int v12 = 0;
    do
    {
      if (v11->ifa_flags)
      {
        ifa_addr = v11->ifa_addr;
        if (ifa_addr)
        {
          BOOL v14 = *(void *)&ifa_addr->sa_len == v23 && *(void *)&ifa_addr->sa_data[6] == v24;
          if (!v14
            && !krb5_sockaddr_uninteresting((uint64_t)ifa_addr)
            && (!sub_213C79070((uint64_t)v11->ifa_addr) || (a3 & 1) != 0))
          {
            uint64_t v15 = krb5_sockaddr2address(a1, (uint64_t)v11->ifa_addr, *(void *)(a2 + 8) + 24 * v12);
            if (v15)
            {
              uint64_t ignore_addresses = v15;
            }
            else if ((a3 & 4) != 0 {
                   && krb5_address_search(a1, (const krb5_address *)(*(void *)(a2 + 8) + 24 * v12), (krb5_address *const *)v21))
            }
            {
              krb5_free_address((uint64_t)a1, *(void *)(a2 + 8) + 24 * v12);
              uint64_t ignore_addresses = 0;
              a3 &= ~2u;
            }
            else
            {
              uint64_t ignore_addresses = 0;
              ++v12;
            }
          }
        }
      }
      uint64_t v11 = v11->ifa_next;
    }
    while (v11);
    if ((a3 & 2) == 0) {
      goto LABEL_55;
    }
    goto LABEL_34;
  }
  unsigned int v12 = 0;
  if ((a3 & 2) != 0)
  {
LABEL_34:
    if (!v12)
    {
      uint64_t v17 = v22;
      if (v22)
      {
        unsigned int v12 = 0;
        do
        {
          if (v17->ifa_flags)
          {
            uint64_t v18 = v17->ifa_addr;
            if (v18)
            {
              BOOL v19 = *(void *)&v18->sa_len == v23 && *(void *)&v18->sa_data[6] == v24;
              if (!v19
                && !krb5_sockaddr_uninteresting((uint64_t)v18)
                && sub_213C79070((uint64_t)v17->ifa_addr)
                && (v17->ifa_flags & 8) != 0)
              {
                uint64_t v20 = krb5_sockaddr2address(a1, (uint64_t)v17->ifa_addr, *(void *)(a2 + 8) + 24 * v12);
                if (v20)
                {
                  uint64_t ignore_addresses = v20;
                }
                else if ((a3 & 4) != 0 {
                       && krb5_address_search(a1, (const krb5_address *)(*(void *)(a2 + 8) + 24 * v12), (krb5_address *const *)v21))
                }
                {
                  krb5_free_address((uint64_t)a1, *(void *)(a2 + 8) + 24 * v12);
                  uint64_t ignore_addresses = 0;
                }
                else
                {
                  uint64_t ignore_addresses = 0;
                  ++v12;
                }
              }
            }
          }
          uint64_t v17 = v17->ifa_next;
        }
        while (v17);
      }
      else
      {
        unsigned int v12 = 0;
      }
    }
  }
LABEL_55:
  if ((a3 & 4) != 0) {
    krb5_free_addresses(a1, (krb5_address **)v21);
  }
  MEMORY[0x216695300](v22);
  if (ignore_addresses)
  {
    free(*(void **)(a2 + 8));
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(_DWORD *)a2 = v12;
  }
  return ignore_addresses;
}

uint64_t _krb5_get_krbtgt(_krb5_context *a1, _krb5_ccache *a2, char *data, krb5_creds **a4)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t principal = 0u;
  uint64_t credentials_with_flags = krb5_cc_get_principal(a1, a2, principal);
  if (!credentials_with_flags)
  {
    if (!data) {
      data = (char *)principal[0]->data;
    }
    uint64_t v9 = krb5_make_principal(a1, &principal[1], data, "krbtgt", data, 0);
    if (v9)
    {
      uint64_t credentials_with_flags = v9;
      size_t v10 = principal[0];
    }
    else
    {
      uint64_t credentials_with_flags = krb5_get_credentials_with_flags((uint64_t)a1, 1, 0, a2, (uint64_t)principal, a4);
      krb5_free_principal(a1, principal[0]);
      size_t v10 = principal[1];
    }
    krb5_free_principal(a1, v10);
  }
  return credentials_with_flags;
}

krb5_error_code krb5_get_credentials(krb5_context a1, krb5_flags a2, krb5_ccache a3, krb5_creds *a4, krb5_creds **a5)
{
  return krb5_get_credentials_with_flags((uint64_t)a1, a2, 0, a3, (uint64_t)a4, a5);
}

uint64_t krb5_get_kdc_cred(_krb5_context *a1, _krb5_ccache *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  long long v13 = malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
  *a7 = v13;
  if (v13)
  {
    long long v17 = 0;
    uint64_t krbtgt = _krb5_get_krbtgt(a1, a2, *(char **)(*(void *)(a6 + 8) + 24), &v17);
    if (krbtgt)
    {
      uint64_t v15 = krbtgt;
LABEL_6:
      free(*a7);
      *a7 = 0;
      return v15;
    }
    uint64_t v15 = sub_213C8A510((uint64_t)a1, (uint64_t)a2, 0, a3, a4, a6, (uint64_t)v17, 0, 0, 0, 0, (krb5_principal *)*a7);
    krb5_free_creds(a1, v17);
    if (v15) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v15 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v15;
}

uint64_t sub_213C8A510(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8, _OWORD *a9, char *a10, char *a11, krb5_principal *a12)
{
  long long v20 = a9;
  uint64_t v88 = 0;
  long long v87 = 0u;
  memset(v86, 0, sizeof(v86));
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  *(void *)&v83.krb5_magic magic = 0;
  v83.data = 0;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  uint64_t v57 = 0;
  memset(v56, 0, sizeof(v56));
  int v55 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  memset(v51, 0, sizeof(v51));
  uint64_t v50 = 0;
  krb5_data_zero(&v83);
  krb5_data_zero(&v84);
  v49[1] = 0;
  v49[0] = 0;
  krb5_generate_random_block((uint64_t)&v55, 4);
  if ((a4 & 0x10000000) != 0 && !a9)
  {
    int v21 = a4;
    uint64_t v22 = a1;
    uint64_t v23 = a7;
    uint64_t v24 = a8;
    uint64_t v25 = a3;
    uint64_t v26 = decode_Ticket(*(void *)(a6 + 96), *(void *)(a6 + 88), (uint64_t)v51, (uint64_t)&v53);
    if (v26) {
      return v26;
    }
    a3 = v25;
    a8 = v24;
    a7 = v23;
    a1 = v22;
    a4 = v21;
    long long v20 = v51;
  }
  if (!krb5_cc_get_kdc_offset(a1, a2, &v50)) {
    *(void *)(a1 + 108) = v50;
  }
  uint64_t v27 = sub_213C99988((_krb5_context *)a1, a2, a3, a5, a4, a8, (uint64_t)v20, a6, a7, v55, (unsigned int *)v49, &v54, (uint64_t)v86);
  uint64_t v28 = a3;
  uint64_t v26 = v27;
  if (!v27)
  {
    uint64_t v46 = v28;
    uint64_t v84 = sub_213CBB638((uint64_t)v86);
    int v30 = malloc_type_malloc(v84, 0x3ED40145uLL);
    uint64_t v85 = v30;
    if (!v30)
    {
      uint64_t v26 = 12;
      goto LABEL_8;
    }
    uint64_t v31 = sub_213CBB618((uint64_t)v30 + v84 - 1, v84, (uint64_t)v86, (uint64_t)&v53);
    if (v31)
    {
      uint64_t v26 = v31;
      free(v85);
      uint64_t v85 = 0;
      goto LABEL_8;
    }
    if (v84 != v53) {
      krb5_abortx((_krb5_context *)a1, "internal error in ASN.1 encoder");
    }
    *(void *)&long long v87 = 0;
    sub_213CBB648((uint64_t)v86);
    *(void *)uint64_t v47 = 0;
    uint64_t v38 = krb5_sendto_ctx_alloc(a1, (uint64_t)v47, v32, v33, v34, v35, v36, v37);
    if (v38) {
      return v38;
    }
    krb5_sendto_ctx_set_func(*(uint64_t *)v47, (uint64_t)sub_213CAAB1C, 0);
    if (a10) {
      sub_213CAA8D4((_krb5_context *)a1, *(uint64_t *)v47, a10);
    }
    if (a11) {
      sub_213CAA92C((_krb5_context *)a1, *(uint64_t *)v47, a11);
    }
    uint64_t ImpersonateBundle = HeimCredGetImpersonateBundle();
    if (ImpersonateBundle)
    {
      uint64_t v40 = (char *)ImpersonateBundle;
      MainBundle = CFBundleGetMainBundle();
      if (MainBundle)
      {
        CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
        CFStringRef v43 = CFStringCreateWithCString(0, v40, 0x8000100u);
        CFStringRef v44 = v43;
        if (v43 && Identifier)
        {
          if (CFEqual(Identifier, v43)) {
            sub_213C9C004(a1, 5, "Bundle identifiers match, not setting delegate");
          }
          else {
            krb5_sendto_set_delegated_app(0, *(uint64_t *)v47, 0, 0, v40);
          }
          goto LABEL_33;
        }
        if (v43) {
LABEL_33:
        }
          CFRelease(v44);
      }
    }
    uint64_t v26 = krb5_sendto_context(a1, *(uint64_t *)v47, &v84, *(char **)(*(void *)(*(void *)(a7 + 8) + 16) + 8), &v83);
    krb5_sendto_ctx_free(a1, *(const void **)v47);
    if (!v26)
    {
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v58 = 0u;
      if (sub_213CBB858((uint64_t)v83.data, *(uint64_t *)&v83.magic, (uint64_t)&v58, (uint64_t)&v53))
      {
        if (krb5_rd_error((krb5_context)a1, &v83, (krb5_error **)v56))
        {
          if (*(void *)&v83.magic && *v83.data == 4)
          {
            krb5_clear_error_message((krb5_context)a1);
            uint64_t v26 = 2529639131;
          }
          else
          {
            uint64_t v26 = 2529638952;
            krb5_clear_error_message((krb5_context)a1);
          }
        }
        else
        {
          uint64_t v26 = krb5_error_from_rd_error((krb5_context)a1, (uint64_t)v56, (uint64_t *)a6);
          krb5_free_error_contents(a1, (uint64_t)v56);
        }
      }
      else
      {
        *(void *)uint64_t v47 = 0;
        uint64_t v48 = 0;
        uint64_t v26 = sub_213CB7500((krb5_context)a1, v55, 0, v46, (uint64_t)&v58);
        if (!v26)
        {
          uint64_t v26 = krb5_copy_principal((krb5_context)a1, *(krb5_const_principal *)a6, a12);
          if (!v26)
          {
            uint64_t v26 = krb5_copy_principal((krb5_context)a1, *(krb5_const_principal *)(a6 + 8), a12 + 1);
            if (!v26)
            {
              a12[7] = *(krb5_principal *)(a6 + 56);
              if (a8) {
                char v45 = 1;
              }
              else {
                char v45 = BYTE2(a4) & 1;
              }
              *(void *)uint64_t v47 = v54;
              uint64_t v48 = v46;
              uint64_t v26 = sub_213CB1364(a1, (uint64_t)&v58, (uint64_t)a12, (const krb5_keyblock *)(a7 + 16), 0, (krb5_address *const *)(a7 + 120), v55, v45, 0, (uint64_t (*)(_krb5_context *, const krb5_keyblock *, uint64_t, uint64_t, uint64_t))sub_213C9A1C0, (uint64_t)v47);
            }
          }
        }
        krb5_free_kdc_rep(a1, &v58);
      }
    }
  }
LABEL_8:
  if (v20 == v51) {
    free_Ticket((uint64_t)v51);
  }
  sub_213CBB54C((uint64_t)v49);
  krb5_data_free(&v83);
  krb5_data_free(&v84);
  if (v54) {
    krb5_free_keyblock((krb5_context)a1, v54);
  }
  return v26;
}

uint64_t sub_213C8AA50(uint64_t a1, unsigned int a2, krb5_ccache a3, uint64_t a4, long long *a5, long long *a6, _OWORD *a7, krb5_creds **a8, uint64_t **a9)
{
  *(void *)&v48.krb5_magic magic = 0;
  v48.data = 0;
  uint64_t v49 = 0;
  long long v16 = 0;
  if (!krb5_cc_get_config((krb5_context)a1, a3, 0, "lkdc-hostname", &v48))
  {
    long long v17 = (char *)malloc_type_malloc(*(void *)&v48.magic + 1, 0xBB8C12A5uLL);
    if (!v17) {
      goto LABEL_22;
    }
    long long v16 = v17;
    memcpy(v17, v48.data, *(size_t *)&v48.magic);
    v16[*(void *)&v48.magic] = 0;
    krb5_data_free(&v48);
  }
  long long v18 = 0;
  if (krb5_cc_get_config((krb5_context)a1, a3, 0, "sitename", &v48)) {
    goto LABEL_7;
  }
  long long v19 = (char *)malloc_type_malloc(*(void *)&v48.magic + 1, 0xDCCAADA9uLL);
  if (!v19)
  {
LABEL_22:
    uint64_t v25 = 12;
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
    return v25;
  }
  long long v18 = v19;
  memcpy(v19, v48.data, *(size_t *)&v48.magic);
  v18[*(void *)&v48.magic] = 0;
  krb5_data_free(&v48);
LABEL_7:
  uint64_t v44 = a4;
  if (!krb5_cc_get_kdc_offset(a1, (uint64_t)a3, &v49)) {
    *(void *)(a1 + 108) = v49;
  }
  uint64_t v20 = *((void *)a5 + 1);
  unsigned int v21 = *(_DWORD *)(v20 + 8);
  BOOL v22 = v21 <= 1 && (a2 & 0x8000) == 0;
  char v45 = a7;
  uint64_t v46 = a6;
  if (v22)
  {
    uint64_t v25 = 2529638940;
    krb5_set_error_message((krb5_context)a1, -1765328356, "Name too short to do referals, skipping referals");
    goto LABEL_18;
  }
  if (v21 && !strcmp(**(const char ***)(v20 + 16), "kadmin"))
  {
    uint64_t v25 = 2529638940;
    krb5_set_error_message((krb5_context)a1, -1765328356, "Name[0] is kadmin, skipping referrals");
  }
  else
  {
    long long v64 = 0u;
    memset(v63, 0, sizeof(v63));
    memset(creds, 0, sizeof(creds));
    long long v53 = 0u;
    *a8 = 0;
    realm = (char *)krb5_principal_get_realm(a1, *(void *)a5);
    *(void *)&long long v54 = 0;
    uint64_t principal = krb5_make_principal((krb5_context)a1, &v54, realm, "krbtgt", realm, 0);
    if (principal)
    {
      uint64_t v25 = principal;
      goto LABEL_18;
    }
    uint64_t v25 = sub_213C8BE6C((_krb5_context *)a1, a3, (const krb5_principal_data *)v54, *a9, (krb5_creds *)v63);
    krb5_free_principal((krb5_context)a1, (krb5_principal)v54);
    if (!v25)
    {
      long long v27 = a5[7];
      long long v60 = a5[6];
      long long v61 = v27;
      long long v62 = a5[8];
      long long v28 = a5[3];
      long long v56 = a5[2];
      long long v57 = v28;
      long long v29 = a5[5];
      long long v58 = a5[4];
      long long v59 = v29;
      long long v30 = a5[1];
      long long v54 = *a5;
      long long v55 = v30;
      uint64_t v31 = krb5_copy_principal((krb5_context)a1, (krb5_const_principal)v20, (krb5_principal *)&v54 + 1);
      if (v31)
      {
        uint64_t v25 = v31;
        uint64_t v32 = (krb5_creds *)v63;
LABEL_27:
        krb5_free_cred_contents((krb5_context)a1, v32);
        goto LABEL_18;
      }
      uint64_t v33 = krb5_principal_set_realm((_krb5_context *)a1, *((uint64_t *)&v54 + 1), realm);
      if (!v33)
      {
        BOOL v35 = (a2 & 0x10000) == 0 && v46 != 0;
        int v36 = 1;
        long long v37 = 0uLL;
        int v43 = 1;
        BOOL v42 = v35;
        while (1)
        {
          mcreds_48[4] = v37;
          mcreds_48[5] = v37;
          mcreds_48[2] = v37;
          mcreds_48[3] = v37;
          mcreds_48[0] = v37;
          mcreds_48[1] = v37;
          mcreds[1] = v37;
          mcreds[2] = v37;
          mcreds[0] = v37;
          if (v35
            || (krb5_cc_clear_mcred(mcreds),
                *((void *)&mcreds[0] + 1) = *((void *)&v54 + 1),
                krb5_timeofday((krb5_context)a1, (krb5_timestamp *)mcreds_48 + 2),
                krb5_cc_retrieve_cred((krb5_context)a1, a3, 0x2000000, (krb5_creds *)mcreds, (krb5_creds *)creds)))
          {
            uint64_t v38 = sub_213C8BF58((krb5_context)a1, (uint64_t)a3, v44, a2 | 0x8000, (uint64_t)&v54, (uint64_t)v63, v46, v45, v16, v18, (krb5_principal *)creds);
            if (v38) {
              goto LABEL_55;
            }
          }
          if (krb5_principal_compare_any_realm(a1, *((uint64_t *)&v54 + 1), *(uint64_t *)&creds[8])) {
            goto LABEL_54;
          }
          if (!krb5_principal_is_krbtgt(a1, *(uint64_t *)&creds[8])) {
            break;
          }
          CFIndex v39 = *(char **)(*(void *)(*(void *)&creds[8] + 16) + 8);
          uint64_t v40 = *a9;
          krb5_cc_clear_mcred(mcreds);
          *((void *)&mcreds[0] + 1) = *(void *)&creds[8];
          if (v40)
          {
            while (1)
            {
              uint64_t v41 = *v40;
              if (!*v40) {
                break;
              }
              ++v40;
              if (krb5_compare_creds((krb5_context)a1, 0x80000000, (uint64_t)mcreds, v41))
              {
                uint64_t v25 = 2529639135;
                krb5_set_error_message((krb5_context)a1, -1765328161, "Referral from %s loops back to realm %s");
                goto LABEL_56;
              }
            }
          }
          if (v43 && (WORD4(v53) & 0x2000) != 0)
          {
            int v43 = 1;
          }
          else
          {
            int v43 = 0;
            DWORD2(v53) &= ~0x2000u;
          }
          uint64_t v38 = sub_213C8C068((_krb5_context *)a1, (const krb5_creds *)creds, (void **)a9);
          if (v38) {
            goto LABEL_55;
          }
          uint64_t v25 = krb5_principal_set_realm((_krb5_context *)a1, *((uint64_t *)&v54 + 1), v39);
          krb5_free_cred_contents((krb5_context)a1, (krb5_creds *)v63);
          *(_OWORD *)&v63[96] = *(_OWORD *)&creds[96];
          *(_OWORD *)&v63[112] = *(_OWORD *)&creds[112];
          long long v64 = v53;
          *(_OWORD *)&v63[32] = *(_OWORD *)&creds[32];
          *(_OWORD *)&v63[48] = *(_OWORD *)&creds[48];
          *(_OWORD *)&v63[64] = *(_OWORD *)&creds[64];
          *(_OWORD *)&v63[80] = *(_OWORD *)&creds[80];
          *(_OWORD *)long long v63 = *(_OWORD *)creds;
          *(_OWORD *)&v63[16] = *(_OWORD *)&creds[16];
          long long v37 = 0uLL;
          long long v53 = 0u;
          memset(creds, 0, sizeof(creds));
          if (v25) {
            goto LABEL_56;
          }
          ++v36;
          BOOL v35 = v42;
          if (v36 == 18)
          {
LABEL_54:
            uint64_t v38 = krb5_copy_creds((krb5_context)a1, (const krb5_creds *)creds, a8);
LABEL_55:
            uint64_t v25 = v38;
            goto LABEL_56;
          }
        }
        uint64_t v25 = 2529638947;
        krb5_set_error_message((krb5_context)a1, -1765328349, "Got back an non krbtgt ticket referrals");
LABEL_56:
        krb5_free_principal((krb5_context)a1, *((krb5_principal *)&v54 + 1));
        krb5_free_cred_contents((krb5_context)a1, (krb5_creds *)v63);
        uint64_t v32 = (krb5_creds *)creds;
        goto LABEL_27;
      }
      uint64_t v25 = v33;
      krb5_free_cred_contents((krb5_context)a1, (krb5_creds *)v63);
      krb5_free_principal((krb5_context)a1, *((krb5_principal *)&v54 + 1));
    }
  }
LABEL_18:
  if (v25 && (a2 & 0x8000) == 0) {
    uint64_t v25 = sub_213C8AFEC((_krb5_context *)a1, a2, a3, v44, (uint64_t *)a5, v46, v45, v16, v18, a8, a9);
  }
  free(v16);
  free(v18);
  return v25;
}

uint64_t sub_213C8AFEC(_krb5_context *a1, unsigned int a2, _krb5_ccache *a3, uint64_t a4, uint64_t *a5, long long *a6, _OWORD *a7, char *a8, char *a9, krb5_creds **a10, uint64_t **a11)
{
  realm = (char *)krb5_principal_get_realm((uint64_t)a1, *a5);
  krb5_principal_get_realm((uint64_t)a1, a5[1]);
  uint64_t result = sub_213C8C120(a1, a2, a3, a4, a5, realm, a6, a7, a8, a9, a10, a11);
  if (result == -1765328377)
  {
    string = (const char *)krb5_config_get_string((uint64_t)a1, 0, v20, v21, v22, v23, v24, v25, (uint64_t)"capaths");
    if (string)
    {
      long long v27 = (char *)string;
      int v28 = strcmp(string, realm);
      uint64_t result = 2529638919;
      if (v28) {
        return sub_213C8C120(a1, a2, a3, a4, a5, v27, a6, a7, a8, a9, a10, a11);
      }
    }
    else
    {
      return 2529638919;
    }
  }
  return result;
}

uint64_t krb5_get_credentials_with_flags(uint64_t a1, krb5_flags a2, int a3, _krb5_ccache *a4, uint64_t a5, krb5_creds **a6)
{
  v64.tv_sec = 0;
  *(void *)&v64.tv_usec = 0;
  v63.tv_sec = 0;
  *(void *)&v63.tv_usec = 0;
  gettimeofday(&v64, 0);
  unsigned int v12 = (char *)*(unsigned int *)(a5 + 16);
  if (v12)
  {
    uint64_t v13 = krb5_enctype_valid((_krb5_context *)a1, v12);
    if (v13) {
      return v13;
    }
  }
  *a6 = 0;
  long long v14 = (krb5_creds *)malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
  if (!v14)
  {
    uint64_t v13 = 12;
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
    return v13;
  }
  uint64_t v15 = v14;
  if (*(_DWORD *)(a5 + 16)) {
    a2 |= 0x40000000u;
  }
  uint64_t cred = krb5_cc_retrieve_cred((krb5_context)a1, a4, a2, (krb5_creds *)a5, v14);
  if (cred)
  {
    uint64_t v13 = cred;
    if (cred != -1765328243)
    {
      long long v18 = (char *)v15;
LABEL_16:
      free(v18);
      return v13;
    }
    int v17 = a2 & 1;
  }
  else
  {
    *(void *)uint64_t v51 = 0;
    if ((a2 & 4) != 0 || (krb5_timeofday((krb5_context)a1, v51), *(void *)&v15->times.endtime > *(uint64_t *)v51))
    {
      uint64_t v13 = 0;
      *a6 = v15;
      return v13;
    }
    int v17 = a2 & 1;
    if (a2) {
      krb5_cc_remove_cred((krb5_context)a1, a4, 0, v15);
    }
    krb5_free_cred_contents((krb5_context)a1, v15);
  }
  free(v15);
  if (v17)
  {
    uint64_t v13 = 2529639053;
    sub_213C8B660((_krb5_context *)a1, *(const krb5_principal_data **)(a5 + 8));
    return v13;
  }
  if ((a2 & 0x40000000) != 0) {
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 352)) {
    goto LABEL_20;
  }
  memset(v51, 0, sizeof(v51));
  if (krb5_cc_get_config((krb5_context)a1, a4, *(krb5_const_principal *)(a5 + 8), "negative-cache", (krb5_data *)v51)) {
    goto LABEL_20;
  }
  uint64_t v61 = 0;
  unint64_t v36 = time(0);
  unsigned int v60 = -1765328243;
  v48[0] = 0;
  long long v37 = krb5_storage_from_data((uint64_t *)v51);
  if (!v37)
  {
    krb5_data_free(v51);
    return 12;
  }
  uint64_t v38 = (uint64_t)v37;
  uint64_t v39 = krb5_ret_uint32((uint64_t)v37, (_DWORD *)&v61 + 1);
  if (v39 || (uint64_t v39 = krb5_ret_int32(v38, &v60), v39))
  {
    uint64_t v13 = v39;
    unint64_t v40 = v36;
  }
  else
  {
    uint64_t v13 = krb5_ret_string(v38, v48);
    unint64_t v40 = v36;
    if (!v13)
    {
      if (krb5_ret_uint32(v38, &v61))
      {
        unint64_t v47 = 0;
        LODWORD(v61) = 0;
      }
      else
      {
        unint64_t v47 = (unint64_t)v61 << 32;
      }
      uint64_t v13 = 0;
      unint64_t v40 = v47 | HIDWORD(v61);
    }
  }
  unint64_t v41 = v40 - v36;
  BOOL v42 = v36 >= v40;
  unint64_t v43 = v36 - v40;
  if (v43 != 0 && v42) {
    unint64_t v44 = v43;
  }
  else {
    unint64_t v44 = v41;
  }
  krb5_storage_free(v38);
  krb5_data_free(v51);
  if (v13)
  {
    long long v18 = (char *)v48[0];
    goto LABEL_16;
  }
  if (v44 < *(void *)(a1 + 352))
  {
    long long v62 = 0;
    uint64_t v13 = v60;
    krb5_unparse_name((krb5_context)a1, *(krb5_const_principal *)(a5 + 8), &v62);
    char v45 = (const char *)v48[0];
    if (!v48[0]) {
      char v45 = "<no cached error string>";
    }
    uint64_t v46 = v62;
    if (!v62) {
      uint64_t v46 = "unknown";
    }
    krb5_set_error_message((krb5_context)a1, v13, "%s while looking up '%s' (cached result, timeout in %lld sec)", v45, v46, *(void *)(a1 + 352) - v44);
    free(v48[0]);
    long long v18 = v62;
    goto LABEL_16;
  }
  free(v48[0]);
LABEL_20:
  unsigned int v19 = (a2 << 27) & 0x10000000 | a3;
  int v20 = a2 | (v19 >> 25);
  long long v62 = 0;
  uint64_t v13 = sub_213C8AA50(a1, v19, a4, 0, (long long *)a5, 0, 0, a6, (uint64_t **)&v62);
  uint64_t v21 = v62;
  if (v62)
  {
    sub_213C8B6CC((_krb5_context *)a1, a4, (krb5_creds **)v62);
    free(v21);
  }
  if (v13 | v20 & 8)
  {
    if ((a2 & 0x40000000) == 0 && (v13 & 0xFFFFFFFE) == 0x96C73A06)
    {
      uint64_t v31 = krb5_storage_emem();
      memset(v51, 0, sizeof(v51));
      if (v31)
      {
        uint64_t v32 = (uint64_t)v31;
        time_t v33 = time(0);
        krb5_store_uint32(v32, v33);
        krb5_store_int32(v32, v13);
        if (*(_DWORD *)(a1 + 288) == v13)
        {
          uint64_t v34 = *(char **)(a1 + 280);
          if (v34) {
            krb5_store_string(v32, v34);
          }
        }
        if (!krb5_storage_to_data(v32, (size_t *)v51))
        {
          krb5_cc_set_config((krb5_context)a1, a4, *(krb5_const_principal *)(a5 + 8), "negative-cache", (krb5_data *)v51);
          krb5_data_free(v51);
        }
        krb5_storage_free(v32);
      }
    }
  }
  else
  {
    krb5_cc_store_cred((krb5_context)a1, a4, *a6);
    if (!krb5_principal_compare_any_realm(a1, (uint64_t)(*a6)->client, *(void *)(a5 + 8)))
    {
      uint64_t v22 = *a6;
      *(_OWORD *)uint64_t v51 = *(_OWORD *)&(*a6)->magic;
      long long v23 = *(_OWORD *)&v22->is_skey;
      long long v25 = *(_OWORD *)&v22->server;
      long long v24 = *(_OWORD *)&v22->keyblock.length;
      krb5_ticket_times times = v22->times;
      long long v55 = v23;
      long long v52 = v25;
      long long v53 = v24;
      long long v26 = *(_OWORD *)&v22[1].client;
      krb5_data ticket = v22->ticket;
      krb5_data second_ticket = v22->second_ticket;
      long long v58 = *(_OWORD *)&v22->authdata;
      long long v59 = v26;
      krb5_data v56 = ticket;
      krb5_data v57 = second_ticket;
      uint64_t v29 = *(void *)(a5 + 8);
      uint64_t v30 = *(void *)(v29 + 16);
      *(_OWORD *)krb5_data v48 = *(_OWORD *)v29;
      uint64_t v49 = v30;
      uint64_t v50 = "";
      *(void *)&v51[2] = v48;
      krb5_cc_store_cred((krb5_context)a1, a4, (krb5_creds *)v51);
    }
  }
  gettimeofday(&v63, 0);
  sub_213CD4680((uint64_t)&v63, (uint64_t)&v64);
  sub_213C9C004(a1, 1, "krb5_get_credentials_with_flags: %s wc: %lld.%06d", *(const char **)(*(void *)a5 + 24), v63.tv_sec, v63.tv_usec);
  return v13;
}

void sub_213C8B660(_krb5_context *a1, const krb5_principal_data *a2)
{
  uint64_t v3 = 0;
  if (krb5_unparse_name(a1, a2, &v3))
  {
    krb5_clear_error_message(a1);
  }
  else
  {
    krb5_set_error_message(a1, -1765328243, "Matching credential (%s) not found", v3);
    free(v3);
  }
}

void sub_213C8B6CC(_krb5_context *a1, _krb5_ccache *a2, krb5_creds **a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    size_t v7 = a3 + 1;
    do
    {
      uint64_t client = (uint64_t)v3->client;
      if (krb5_principal_is_krbtgt((uint64_t)a1, client)
        && strcmp(*(const char **)(*(void *)(client + 16) + 8), *(const char **)(client + 24)))
      {
        krb5_cc_store_cred(a1, a2, *(v7 - 1));
      }
      uint64_t v9 = *v7++;
      uint64_t v3 = v9;
    }
    while (v9);
    size_t v10 = *a3;
    if (*a3)
    {
      uint64_t v11 = a3 + 1;
      do
      {
        krb5_free_creds(a1, v10);
        unsigned int v12 = *v11++;
        size_t v10 = v12;
      }
      while (v12);
    }
  }
}

uint64_t krb5_get_creds_opt_alloc(_krb5_context *a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004014030ADEuLL);
  *a2 = v4;
  if (v4) {
    return 0;
  }
  uint64_t v5 = 12;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v5;
}

void krb5_get_creds_opt_free(_krb5_context *a1, void *a2)
{
  uint64_t v3 = *(krb5_principal_data **)a2;
  if (v3) {
    krb5_free_principal(a1, v3);
  }
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    free_Ticket(v4);
    free(*((void **)a2 + 2));
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;

  free(a2);
}

void krb5_get_creds_opt_set_options(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 8) = a3;
}

void krb5_get_creds_opt_add_options(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 8) |= a3;
}

void krb5_get_creds_opt_set_enctype(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 12) = a3;
}

uint64_t krb5_get_creds_opt_set_impersonate(krb5_context a1, krb5_principal *a2, krb5_const_principal a3)
{
  char v6 = *a2;
  if (v6) {
    krb5_free_principal(a1, v6);
  }

  return krb5_copy_principal(a1, a3, a2);
}

uint64_t krb5_get_creds_opt_set_ticket(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    free_Ticket(v6);
    free(*(void **)(a2 + 16));
    *(void *)(a2 + 16) = 0;
  }
  if (a3)
  {
    size_t v7 = malloc_type_malloc(0x48uLL, 0x1090040DEC7D988uLL);
    *(void *)(a2 + 16) = v7;
    if (!v7)
    {
      a3 = 12;
      goto LABEL_8;
    }
    a3 = sub_213CBB38C();
    if (a3)
    {
      free(*(void **)(a2 + 16));
      *(void *)(a2 + 16) = 0;
LABEL_8:
      krb5_set_error_message(a1, a3, "malloc: out of memory");
    }
  }
  return a3;
}

uint64_t krb5_get_creds(_krb5_context *a1, uint64_t a2, _krb5_ccache *a3, const krb5_principal_data *a4, krb5_creds **a5)
{
  long long v10 = 0uLL;
  memset(v34, 0, sizeof(v34));
  uint64_t v35 = 0;
  if (!a2
    || (uint64_t v11 = (char *)*(unsigned int *)(a2 + 12), !v11)
    || (uint64_t v12 = krb5_enctype_valid(a1, v11), v10 = 0uLL, v13 = v12, !v12))
  {
    long long v33 = v10;
    long long v31 = v10;
    long long v32 = v10;
    long long v29 = v10;
    long long v30 = v10;
    long long v27 = v10;
    long long v28 = v10;
    principal[0] = (krb5_principal)v10;
    long long v26 = v10;
    principal[1] = (krb5_principal)a4;
    if (_krb5_have_debug((BOOL)a1))
    {
      *(void *)long long v24 = 0;
      if (!krb5_unparse_name(a1, a4, (char **)v24))
      {
        if (a2) {
          int v14 = *(_DWORD *)(a2 + 8);
        }
        else {
          int v14 = 0;
        }
        sub_213C9C004((uint64_t)a1, 5, "krb5_get_creds: %s: opt: %d", *(const char **)v24, v14);
        krb5_xfree(*(void **)v24);
      }
    }
    uint64_t v13 = krb5_cc_get_principal(a1, a3, principal);
    if (!v13)
    {
      if (a2)
      {
        unsigned int v15 = *(_DWORD *)(a2 + 8);
        *a5 = 0;
        long long v16 = (krb5_creds *)malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
        if (v16)
        {
          int v17 = v16;
          if (*(_DWORD *)(a2 + 12))
          {
            LODWORD(v26) = *(_DWORD *)(a2 + 12);
            v15 |= 0x40000000u;
          }
LABEL_17:
          uint64_t cred = krb5_cc_retrieve_cred(a1, a3, v15 & 0x40000000, (krb5_creds *)principal, v17);
          if (cred)
          {
            uint64_t v13 = cred;
            if (cred != -1765328243)
            {
              free(v17);
              krb5_free_principal(a1, principal[0]);
              goto LABEL_36;
            }
            int v20 = v15 & 1;
          }
          else
          {
            *(void *)long long v24 = 0;
            if ((v15 & 4) != 0 || (krb5_timeofday(a1, v24), *(void *)&v17->times.endtime > *(uint64_t *)v24))
            {
              *a5 = v17;
              krb5_free_principal(a1, principal[0]);
              goto LABEL_26;
            }
            int v20 = v15 & 1;
            if (v15) {
              krb5_cc_remove_cred(a1, a3, 0, v17);
            }
          }
          free(v17);
          if (v20)
          {
            krb5_free_principal(a1, principal[0]);
            sub_213C8B660(a1, principal[1]);
            uint64_t v13 = 2529639053;
LABEL_36:
            sub_213CB76C0(a1, (uint64_t)v34);
            sub_213C9C004((uint64_t)a1, 5, "krb5_get_creds: ret = %d", v13);
            return v13;
          }
          *(void *)long long v24 = 0;
          if (a2) {
            uint64_t v21 = *(long long **)a2;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v13 = sub_213C8AA50((uint64_t)a1, (v15 >> 3) & 2 | ((((v15 & 2) >> 1) & 1) << 28) | (((v15 >> 5) & 1) << 26) | (((v15 >> 6) & 1) << 16) | (((v15 >> 7) & 1) << 15), a3, (uint64_t)v34, (long long *)principal, v21, *(_OWORD **)(a2 + 16), a5, (uint64_t **)v24);
          krb5_free_principal(a1, principal[0]);
          uint64_t v22 = *(void **)v24;
          if (*(void *)v24)
          {
            sub_213C8B6CC(a1, a3, *(krb5_creds ***)v24);
            free(v22);
          }
          if (v13) {
            goto LABEL_36;
          }
          if (!((4 * (v15 & 2)) | v15 & 8)) {
            krb5_cc_store_cred(a1, a3, *a5);
          }
LABEL_26:
          uint64_t v13 = 0;
          goto LABEL_36;
        }
      }
      else
      {
        *a5 = 0;
        long long v18 = (krb5_creds *)malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
        if (v18)
        {
          int v17 = v18;
          unsigned int v15 = 0;
          goto LABEL_17;
        }
      }
      krb5_free_principal(a1, principal[0]);
      uint64_t v13 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }
  return v13;
}

krb5_error_code krb5_get_renewed_creds(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service)
{
  uint64_t v17 = 0;
  long long v18 = 0;
  *(_OWORD *)unsigned int v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)&creds->krb5_magic magic = 0u;
  *(_OWORD *)&creds->server = 0u;
  *(_OWORD *)&creds->keyblock.length = 0u;
  creds->krb5_ticket_times times = 0u;
  *(_OWORD *)&creds->is_skey = 0u;
  creds->krb5_data ticket = 0u;
  creds->krb5_data second_ticket = 0u;
  *(_OWORD *)&creds->authdata = 0u;
  *(_OWORD *)&creds[1].uint64_t client = 0u;
  kdc_uint64_t cred = krb5_copy_principal(context, client, v19);
  if (!kdc_cred)
  {
    if (in_tkt_service)
    {
      krb5_error_code principal = krb5_parse_name(context, in_tkt_service, &v19[1]);
      if (principal)
      {
LABEL_4:
        kdc_uint64_t cred = principal;
        krb5_free_principal(context, v19[0]);
        return kdc_cred;
      }
    }
    else
    {
      realm = (char *)krb5_principal_get_realm((uint64_t)context, (uint64_t)client);
      krb5_error_code principal = krb5_make_principal(context, &v19[1], realm, "krbtgt", realm, 0);
      if (principal) {
        goto LABEL_4;
      }
    }
    if (krb5_get_credentials_with_flags((uint64_t)context, 1, 0, ccache, (uint64_t)v19, &v18))
    {
      int v14 = 1073742080;
    }
    else
    {
      int v14 = (uint64_t)v18[1].server & 0xA | 0x40000100;
      krb5_free_creds(context, v18);
    }
    kdc_uint64_t cred = krb5_get_kdc_cred(context, ccache, v14, 0, v13, (uint64_t)v19, (void **)&v17);
    krb5_free_principal(context, v19[0]);
    krb5_free_principal(context, v19[1]);
    if (!kdc_cred)
    {
      unsigned int v15 = (krb5_creds *)v17;
      kdc_uint64_t cred = krb5_copy_creds_contents(context, v17, (uint64_t)creds);
      krb5_free_creds(context, v15);
    }
  }
  return kdc_cred;
}

uint64_t sub_213C8BE6C(_krb5_context *a1, _krb5_ccache *a2, const krb5_principal_data *a3, uint64_t *a4, krb5_creds *a5)
{
  memset(v14, 0, sizeof(v14));
  krb5_cc_clear_mcred(v14);
  *(void *)&v14[8] = a3;
  krb5_timeofday(a1, (krb5_timestamp *)&v14[56]);
  uint64_t result = krb5_cc_retrieve_cred(a1, a2, -2113929216, (krb5_creds *)v14, a5);
  if (result)
  {
    if (a4 && (uint64_t v11 = *a4) != 0)
    {
      uint64_t v12 = a4 + 1;
      while (!krb5_compare_creds(a1, 0x80000000, (uint64_t)v14, v11))
      {
        uint64_t v13 = *v12++;
        uint64_t v11 = v13;
        if (!v13) {
          goto LABEL_7;
        }
      }
      return krb5_copy_creds_contents(a1, *(v12 - 1), (uint64_t)a5);
    }
    else
    {
LABEL_7:
      sub_213C8B660(a1, a3);
      return 2529639053;
    }
  }
  return result;
}

uint64_t sub_213C8BF58(krb5_context context, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, long long *a7, _OWORD *a8, char *a9, char *a10, krb5_principal *a11)
{
  uint64_t v12 = a7;
  v24[0] = 0;
  v24[1] = 0;
  if (*(_DWORD *)(a6 + 120))
  {
    ret_xpc_object_t value = 0;
    krb5_appdefault_BOOLean(context, 0, *(const krb5_data **)(*(void *)(a6 + 8) + 24), "no-addresses", 0, &ret_value);
    unsigned int v19 = 0;
    if (!ret_value)
    {
      krb5_get_all_client_addrs(context, (uint64_t)v24);
      if (LODWORD(v24[0])) {
        unsigned int v19 = v24;
      }
      else {
        unsigned int v19 = 0;
      }
    }
    uint64_t v12 = a7;
  }
  else
  {
    unsigned int v19 = 0;
  }
  uint64_t v20 = sub_213C8A510((uint64_t)context, a2, a3, a4, (uint64_t)v19, a5, a6, v12, a8, a9, a10, a11);
  krb5_free_addresses(context, v24);
  return v20;
}

uint64_t sub_213C8C068(_krb5_context *a1, const krb5_creds *a2, void **a3)
{
  if (*a3)
  {
    unsigned int v6 = -1;
    size_t v7 = (uint64_t *)*a3;
    do
    {
      uint64_t v8 = *v7++;
      ++v6;
    }
    while (v8);
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v9 = malloc_type_realloc(*a3, 8 * (v6 + 2), 0x2004093837F09uLL);
  if (v9)
  {
    long long v10 = v9;
    *a3 = v9;
    uint64_t result = krb5_copy_creds(a1, a2, (krb5_creds **)&v9[v6]);
    v10[v6 + 1] = 0;
  }
  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12;
  }
  return result;
}

uint64_t sub_213C8C120(_krb5_context *a1, unsigned int a2, _krb5_ccache *a3, uint64_t a4, uint64_t *a5, char *a6, long long *a7, _OWORD *a8, char *a9, char *a10, krb5_creds **a11, uint64_t **a12)
{
  uint64_t v51 = 0;
  *a11 = 0;
  realm = (const char *)krb5_principal_get_realm((uint64_t)a1, *a5);
  unsigned int v19 = (const char *)krb5_principal_get_realm((uint64_t)a1, a5[1]);
  *(_OWORD *)BOOL v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v20 = krb5_copy_principal(a1, (krb5_const_principal)*a5, v42);
  if (v20) {
    return v20;
  }
  uint64_t v37 = a4;
  uint64_t principal = krb5_make_principal(a1, &v42[1], a6, "krbtgt", v19, 0);
  if (principal)
  {
    uint64_t v20 = principal;
LABEL_36:
    krb5_free_principal(a1, v42[0]);
    return v20;
  }
  unint64_t v36 = (char *)v19;
  long long v41 = 0u;
  memset(v40, 0, sizeof(v40));
  uint64_t v22 = (uint64_t)a3;
  if (!sub_213C8BE6C(a1, a3, v42[1], *a12, (krb5_creds *)v40))
  {
    if (!strcmp(a6, realm) && !strcmp(a6, v19))
    {
      long long v23 = a9;
      int v24 = 1;
    }
    else
    {
      long long v23 = a9;
      int v24 = (DWORD2(v41) >> 13) & 1;
    }
    long long v25 = (krb5_principal *)malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
    *a11 = (krb5_creds *)v25;
    if (!v25)
    {
      uint64_t v20 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_34;
    }
    uint64_t v20 = sub_213C8BF58(a1, (uint64_t)a3, v37, a2, (uint64_t)a5, (uint64_t)v40, a7, a8, v23, a10, v25);
    long long v26 = (uint64_t *)*a11;
    if (v20)
    {
      free(v26);
    }
    else
    {
      if (krb5_principal_compare_any_realm((uint64_t)a1, v26[1], a5[1]) == 1)
      {
        uint64_t v20 = 0;
        if (!v24) {
          LODWORD((*a11)[1].server) &= ~0x2000u;
        }
LABEL_34:
        krb5_free_cred_contents(a1, (krb5_creds *)v40);
LABEL_35:
        krb5_free_principal(a1, v42[1]);
        goto LABEL_36;
      }
      uint64_t v20 = 2529638919;
      krb5_free_creds(a1, *a11);
    }
    *a11 = 0;
    goto LABEL_34;
  }
  if (krb5_realm_compare(a1, (krb5_const_principal)*a5, (krb5_const_principal)a5[1]))
  {
    sub_213C8B660(a1, (const krb5_principal_data *)a5[1]);
    return 2529639053;
  }
  int v27 = 1;
  while (1)
  {
    uint64_t v28 = sub_213C8AFEC(a1, a2, v22, v37, v42, 0, 0, a9, a10, &v51, a12);
    if (v28
      || ((long long v29 = v51, server = (int)v51[1].server, !v27) || (server & 0x2000) == 0
        ? (int v27 = 0, LODWORD(v51[1].server) = server & 0xFFFFDFFF)
        : (int v27 = 1),
          uint64_t v28 = sub_213C8C068(a1, v29, (void **)a12),
          v28))
    {
LABEL_23:
      uint64_t v20 = v28;
      goto LABEL_35;
    }
    long long v31 = (char *)*((void *)v51->client->realm.data + 1);
    int v32 = strcmp(v31, v36);
    krb5_free_principal(a1, v42[1]);
    if (!v32) {
      break;
    }
    uint64_t v28 = krb5_make_principal(a1, &v42[1], v31, "krbtgt", v36, 0);
    if (!v28)
    {
      krb5_free_creds(a1, v51);
      if (!v28) {
        continue;
      }
    }
    goto LABEL_23;
  }
  krb5_free_principal(a1, v42[0]);
  long long v33 = (krb5_principal *)malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
  *a11 = (krb5_creds *)v33;
  if (!v33)
  {
    uint64_t v20 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_43;
  }
  uint64_t v20 = sub_213C8BF58(a1, v22, v37, a2, (uint64_t)a5, (uint64_t)v51, a7, a8, a9, a10, v33);
  uint64_t v34 = *a11;
  if (v20)
  {
    free(v34);
  }
  else
  {
    if (krb5_principal_compare_any_realm((uint64_t)a1, (uint64_t)v34->client, a5[1]) == 1)
    {
      uint64_t v20 = 0;
      goto LABEL_43;
    }
    uint64_t v20 = 2529638919;
    krb5_free_creds(a1, *a11);
  }
  *a11 = 0;
LABEL_43:
  if (v51) {
    krb5_free_creds(a1, v51);
  }
  return v20;
}

uint64_t sub_213C8C5A0(_krb5_context *a1, void *a2)
{
  *a2 = 0;
  uid_t v4 = getuid();
  if (v4)
  {
    uint64_t v5 = getpwuid(v4);
    if (v5)
    {
      pw_name = v5->pw_name;
      if (!pw_name)
      {
LABEL_12:
        krb5_set_error_message(a1, 25, "unable to figure out current principal");
        return 25;
      }
    }
    else
    {
      pw_name = sub_213C8C680();
      if (!pw_name)
      {
        pw_name = getlogin();
        if (!pw_name) {
          goto LABEL_12;
        }
      }
    }
    return krb5_make_principal(a1, a2, 0, pw_name, 0);
  }
  size_t v7 = getlogin();
  if ((v7 || (size_t v7 = sub_213C8C680()) != 0) && strcmp(v7, "root")) {
    return krb5_make_principal(a1, a2, 0, v7, "root", 0);
  }
  else {
    return krb5_make_principal(a1, a2, 0, "root", 0);
  }
}

char *sub_213C8C680()
{
  uint64_t result = getenv("USER");
  if (!result)
  {
    uint64_t result = getenv("LOGNAME");
    if (!result)
    {
      return getenv("USERNAME");
    }
  }
  return result;
}

uint64_t krb5_get_default_principal(_krb5_context *a1, krb5_principal *a2)
{
  krb5_ccache cache = 0;
  *a2 = 0;
  if (krb5_cc_default(a1, &cache)) {
    return sub_213C8C5A0(a1, a2);
  }
  krb5_error_code principal = krb5_cc_get_principal(a1, cache, a2);
  krb5_cc_close(a1, cache);
  if (principal) {
    return sub_213C8C5A0(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_213C8C754(_krb5_context *a1, CFArrayRef theArray, char *const **a3)
{
  CFIndex length = heim_array_get_length(theArray);
  size_t v7 = (char *const *)malloc_type_calloc(length + 1, 8uLL, 0x10040436913F5uLL);
  *a3 = v7;
  if (length)
  {
    CFIndex v8 = 0;
    while (1)
    {
      CFStringRef v9 = (const __CFString *)heim_array_copy_value(theArray, v8);
      if (v9)
      {
        CFStringRef v10 = v9;
        (*a3)[v8] = heim_string_copy_utf8(v9);
        heim_release(v10);
      }
      uint64_t v11 = *a3;
      if (!(*a3)[v8]) {
        break;
      }
      if (length == ++v8) {
        goto LABEL_9;
      }
    }
    krb5_free_host_realm(a1, v11);
    uint64_t v12 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  else
  {
    uint64_t v11 = v7;
LABEL_9:
    uint64_t v12 = 0;
    a3 = (char *const **)&v11[length];
  }
  *a3 = 0;
  return v12;
}

uint64_t krb5_get_default_realms(_krb5_context *a1, char *const **a2)
{
  uint64_t result = sub_213C8C890(a1);
  if (!result)
  {
    CFArrayRef v5 = (const __CFArray *)*((void *)a1 + 9);
    return sub_213C8C754(a1, v5, a2);
  }
  return result;
}

uint64_t sub_213C8C890(_krb5_context *a1)
{
  CFArrayRef v2 = (const __CFArray *)*((void *)a1 + 9);
  if ((!v2 || !heim_array_get_length(v2)) && krb5_set_default_realm(a1, 0)) {
    return 2529639136;
  }
  CFArrayRef v4 = (const __CFArray *)*((void *)a1 + 9);
  if (v4 && heim_array_get_length(v4)) {
    return 0;
  }
  uint64_t v3 = 2529639136;
  krb5_set_error_message(a1, -1765328160, "No default realm found");
  return v3;
}

krb5_error_code krb5_get_default_realm(krb5_context a1, char **a2)
{
  krb5_error_code v4 = sub_213C8C890(a1);
  if (!v4)
  {
    CFStringRef v5 = (const __CFString *)heim_array_copy_value(*((const __CFArray **)a1 + 9), 0);
    if (v5 && (CFStringRef v6 = v5, *a2 = heim_string_copy_utf8(v5), heim_release(v6), *a2))
    {
      return 0;
    }
    else
    {
      krb5_error_code v4 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }
  return v4;
}

krb5_error_code krb5_fwd_tgt_creds(krb5_context a1, krb5_auth_context a2, char *a3, krb5_principal a4, krb5_principal a5, krb5_ccache a6, int forwardable, krb5_data *a8)
{
  comp_string = a3;
  if (forwardable) {
    uint64_t v14 = 6;
  }
  else {
    uint64_t v14 = 4;
  }
  if (!a3)
  {
    if (krb5_principal_get_type((uint64_t)a1, (unsigned int *)a5) == 3)
    {
      comp_string = (const char *)krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a5, 0);
      uint64_t v16 = krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a5, 1u);
      if (comp_string)
      {
        uint64_t v17 = (const char *)v16;
        int v18 = strcmp(comp_string, "host");
        comp_string = 0;
        if (!v18)
        {
          if (v17)
          {
            if (krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a5, 2u)) {
              comp_string = 0;
            }
            else {
              comp_string = v17;
            }
          }
        }
      }
    }
    else
    {
      comp_string = 0;
    }
  }
  realm = (char *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a4);
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 0;
  krb5_principal v21 = a4;
  krb5_error_code result = krb5_make_principal(a1, v22, realm, "krbtgt", realm, 0);
  if (!result) {
    return krb5_get_forwarded_creds(a1, (uint64_t)a2, a6, v14, comp_string, (uint64_t)&v21, (uint64_t *)&a8->magic);
  }
  return result;
}

uint64_t krb5_get_forwarded_creds(_krb5_context *a1, uint64_t a2, _krb5_ccache *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v77 = 0;
  long long v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v68 = 0u;
  long long v66 = 0;
  size_t v67 = 0;
  timeval v64 = 0;
  long long v65 = 0;
  v63[0] = 0;
  v63[1] = 0;
  long long v73 = 0u;
  memset(v74, 0, sizeof(v74));
  uint64_t v72 = 0x1600000005;
  long long v75 = 0;
  long long v76 = 0;
  krb5_data_zero(v63);
  if (!*(void *)(a2 + 32))
  {
    kdc_uint64_t cred = 2529638921;
    krb5_set_error_message(a1, -1765328375, "auth context is missing session key");
    return kdc_cred;
  }
  if (krb5_get_credentials(a1, 0, a3, (krb5_creds *)a6, &v64))
  {
    ret_value.krb5_magic magic = 0;
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, *(void *)a6);
    krb5_appdefault_BOOLean(a1, 0, realm, "no-addresses", 1, &ret_value.magic);
    if (ret_value.magic)
    {
      LOBYTE(magic) = 0;
LABEL_9:
      uint64_t v20 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    krb5_magic magic = v64[1].magic;
    krb5_free_creds(a1, v64);
    if (!magic) {
      goto LABEL_9;
    }
  }
  uint64_t v17 = getaddrinfo(a5, 0, 0, &v65);
  if (v17)
  {
    uint64_t v18 = v17;
    unsigned int v19 = __error();
    kdc_uint64_t cred = krb5_eai_to_heim_errno(v18, *v19);
    gai_strerror(v18);
    krb5_set_error_message(a1, kdc_cred, "resolving host %s failed: %s");
    return kdc_cred;
  }
  long long v25 = v65;
  if (v65)
  {
    int v26 = 0;
    int v27 = v65;
    do
    {
      ++v26;
      int v27 = v27->ai_next;
    }
    while (v27);
  }
  else
  {
    int v26 = 0;
  }
  uint64_t v28 = (char *)malloc_type_realloc(v76, 24 * (v75 + v26), 0x10800404ACF7207uLL);
  unint64_t v29 = v75;
  if (v28) {
    BOOL v30 = 1;
  }
  else {
    BOOL v30 = v75 == -v26;
  }
  if (v30)
  {
    long long v76 = v28;
    if (v75 < (int)v75 + v26)
    {
      uint64_t v31 = 24 * v75;
      do
      {
        int v32 = v76;
        *(_DWORD *)&v76[v31] = 0;
        krb5_data_zero(&v32[v31 + 8]);
        ++v29;
        v31 += 24;
      }
      while (v29 < (v75 + v26));
      LODWORD(v29) = v75;
    }
    for (; v25; long long v25 = v25->ai_next)
    {
      memset(&ret_value, 0, sizeof(ret_value));
      uint64_t v33 = krb5_sockaddr2address(a1, (uint64_t)v25->ai_addr, (uint64_t)&ret_value);
      if (v33 == -1765328170)
      {
        krb5_clear_error_message(a1);
      }
      else
      {
        kdc_uint64_t cred = v33;
        if (v33) {
          goto LABEL_39;
        }
        if (krb5_address_search(a1, &ret_value, &v75))
        {
          krb5_free_address((uint64_t)a1, (uint64_t)&ret_value);
        }
        else
        {
          uint64_t v34 = &v76[24 * v29];
          long long v35 = *(_OWORD *)&ret_value.magic;
          *((void *)v34 + 2) = ret_value.contents;
          *(_OWORD *)uint64_t v34 = v35;
          LODWORD(v29) = v29 + 1;
        }
      }
      LODWORD(v75) = v29;
    }
    freeaddrinfo(v65);
    uint64_t v20 = &v75;
    LOBYTE(magic) = 1;
LABEL_10:
    LODWORD(v73) = 1;
    *((void *)&v73 + 1) = malloc_type_calloc(1uLL, 0x48uLL, 0x1090040DEC7D988uLL);
    if (!*((void *)&v73 + 1))
    {
      kdc_uint64_t cred = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return kdc_cred;
    }
    long long v62 = a7;
    if (!v20)
    {
      krb5_principal v21 = *(const krb5_principal_data **)(a6 + 8);
      *(void *)&ret_value.krb5_magic magic = 0;
      *(void *)&ret_value.CFIndex length = 0;
      v79[0] = 0;
      krb5_data_zero(&ret_value);
      krb5_error_code config = krb5_cc_get_config(a1, a3, v21, "_forward", (krb5_data *)&ret_value);
      if (config)
      {
        krb5_error_code v23 = config;
        krb5_data_free(&ret_value);
LABEL_57:
        sub_213C9C050((uint64_t *)a1, 1, v23, "_krb5_get_cached_forward_creds");
        goto LABEL_58;
      }
      unint64_t v36 = krb5_storage_from_data((uint64_t *)&ret_value.magic);
      if (v36)
      {
        uint64_t v37 = (uint64_t)v36;
        krb5_error_code v23 = krb5_ret_uint32((uint64_t)v36, v79);
        if (!v23)
        {
          if (v79[0] == a4)
          {
            uint64_t v38 = malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
            uint64_t v77 = (uint64_t)v38;
            if (v38)
            {
              krb5_error_code v39 = krb5_ret_creds(v37, (uint64_t)v38);
              if (v39)
              {
                krb5_error_code v23 = v39;
                if (v77)
                {
                  krb5_free_creds(a1, (krb5_creds *)v77);
                  uint64_t v77 = 0;
                }
              }
              else if (*(void *)(v77 + 56) >= time(0))
              {
                krb5_error_code v23 = 0;
              }
              else
              {
                krb5_cc_set_config(a1, a3, v21, "_forward", 0);
                krb5_free_creds(a1, (krb5_creds *)v77);
                uint64_t v77 = 0;
                krb5_error_code v23 = -1765328352;
              }
            }
            else
            {
              krb5_error_code v23 = krb5_enomem(a1);
            }
          }
          else
          {
            krb5_error_code v23 = -1765328349;
            krb5_set_error_message(a1, -1765328349, "cached forward credential not same flags");
          }
        }
        krb5_storage_free(v37);
      }
      else
      {
        krb5_error_code v23 = krb5_enomem(a1);
      }
      krb5_data_free(&ret_value);
      if (v23) {
        goto LABEL_57;
      }
    }
LABEL_58:
    if (!v77)
    {
      int v41 = sub_213CBB248(a4);
      kdc_uint64_t cred = krb5_get_kdc_cred(a1, a3, v41, (uint64_t)v20, 0, a6, (void **)&v77);
      krb5_free_addresses(a1, &v75);
      if (kdc_cred) {
        goto LABEL_89;
      }
      if (!v20)
      {
        krb5_error_code v42 = sub_213C8D5E8(a1, a3, *(const krb5_principal_data **)(a6 + 8), a4, v77);
        if (v42) {
          sub_213C9C050((uint64_t *)a1, 1, v42, "_krb5_store_cached_forward_creds");
        }
      }
    }
    kdc_uint64_t cred = decode_Ticket(*(void *)(v77 + 80), *(void *)(v77 + 72), *((uint64_t *)&v73 + 1), (uint64_t)&v67);
    if (kdc_cred) {
      goto LABEL_89;
    }
    long long v71 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    LODWORD(v68) = 1;
    *((void *)&v68 + 1) = malloc_type_calloc(1uLL, 0x68uLL, 0x10B00407801D9E3uLL);
    if (!*((void *)&v68 + 1)) {
      goto LABEL_87;
    }
    if (*(unsigned char *)a2)
    {
      *(void *)&ret_value.krb5_magic magic = 0;
      v79[0] = 0;
      krb5_us_timeofday(a1, &ret_value.magic, v79);
      long long v43 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
      *((void *)&v69 + 1) = v43;
      unint64_t v40 = v62;
      if (!v43) {
        goto LABEL_87;
      }
      void *v43 = *(void *)&ret_value.magic;
      long long v44 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
      *(void *)&long long v70 = v44;
      if (!v44) {
        goto LABEL_87;
      }
      _DWORD *v44 = v79[0];
    }
    else
    {
      *((void *)&v69 + 1) = 0;
      *(void *)&long long v70 = 0;
      unint64_t v40 = v62;
    }
    uint64_t v45 = *(void *)(a2 + 8);
    if (v45)
    {
      char v46 = magic ^ 1;
      if (!*(_WORD *)(a2 + 24)) {
        char v46 = 1;
      }
      if ((v46 & 1) == 0)
      {
        kdc_uint64_t cred = krb5_make_addrport(a1, (void **)&v70 + 1, v45, *(_WORD *)(a2 + 24));
        if (kdc_cred) {
          goto LABEL_88;
        }
      }
    }
    if (!*(void *)(a2 + 16)) {
      goto LABEL_78;
    }
    if (*(_WORD *)(a2 + 26))
    {
      ret_value.krb5_magic magic = 0;
      long long v47 = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, *(void *)(v77 + 8));
      krb5_appdefault_BOOLean(a1, 0, v47, "no-addresses", 0, &ret_value.magic);
      if (!ret_value.magic)
      {
        uint64_t addrport = krb5_make_addrport(a1, &v71, *(void *)(a2 + 16), *(_WORD *)(a2 + 26));
        if (addrport)
        {
          kdc_uint64_t cred = addrport;
          goto LABEL_88;
        }
      }
LABEL_78:
      LODWORD(v68) = 1;
      long long v48 = (void *)*((void *)&v68 + 1);
      copy_EncryptionKey();
      v48[3] = malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
      sub_213CBAF94();
      v48[4] = malloc_type_calloc(1uLL, 0x18uLL, 0x10800407C14B876uLL);
      sub_213CBB008();
      long long v49 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
      v48[5] = v49;
      *long long v49 = *(_DWORD *)(v77 + 136);
      long long v50 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
      v48[6] = v50;
      *long long v50 = *(void *)(v77 + 40);
      uint64_t v51 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
      v48[7] = v51;
      *uint64_t v51 = *(void *)(v77 + 48);
      long long v52 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
      v48[8] = v52;
      *long long v52 = *(void *)(v77 + 56);
      long long v53 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
      v48[9] = v53;
      void *v53 = *(void *)(v77 + 64);
      v48[10] = malloc_type_calloc(1uLL, 8uLL, 0x10040436913F5uLL);
      sub_213CBAF94();
      v48[11] = malloc_type_calloc(1uLL, 0x18uLL, 0x10800407C14B876uLL);
      sub_213CBB008();
      v48[12] = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
      sub_213CBB0B4();
      krb5_free_creds(a1, (krb5_creds *)v77);
      uint64_t v54 = sub_213CBBBDC((uint64_t)&v68);
      long long v55 = malloc_type_malloc(v54, 0x2DBE7F64uLL);
      if (v55)
      {
        krb5_data v56 = v55;
        uint64_t v57 = sub_213CBBBBC((uint64_t)v55 + v54 - 1, v54, (uint64_t)&v68, (uint64_t)&v67);
        if (!v57)
        {
          sub_213CBBBEC((uint64_t)&v68);
          if (v54 == v67)
          {
            uint64_t v58 = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 32), 0, &v66);
            if (v58) {
              goto LABEL_93;
            }
            kdc_uint64_t cred = krb5_encrypt_EncryptedData(a1, (_DWORD **)v66, 14, v56, v67, 0, (uint64_t)v74);
            free(v56);
            krb5_crypto_destroy(a1, (uint64_t)v66);
            if (kdc_cred) {
              goto LABEL_83;
            }
            uint64_t v60 = sub_213CBBB7C((uint64_t)&v72);
            uint64_t v61 = malloc_type_malloc(v60, 0x5F4E26BEuLL);
            if (!v61)
            {
              kdc_uint64_t cred = 12;
              goto LABEL_83;
            }
            krb5_data v56 = v61;
            uint64_t v58 = sub_213CBBB5C((uint64_t)v61 + v60 - 1, v60, (uint64_t)&v72, (uint64_t)&v67);
            if (v58)
            {
LABEL_93:
              kdc_uint64_t cred = v58;
              free(v56);
              goto LABEL_83;
            }
            sub_213CBBB8C((uint64_t)&v72);
            if (v60 == v67)
            {
              kdc_uint64_t cred = 0;
              uint64_t *v40 = v60;
              v40[1] = (uint64_t)v56;
              return kdc_cred;
            }
          }
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        kdc_uint64_t cred = v57;
        free(v56);
      }
      else
      {
        kdc_uint64_t cred = 12;
      }
      sub_213CBBBEC((uint64_t)&v68);
LABEL_83:
      sub_213CBBB8C((uint64_t)&v72);
      return kdc_cred;
    }
    long long v71 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
    if (v71)
    {
      kdc_uint64_t cred = krb5_copy_address((uint64_t)a1, *(_DWORD **)(a2 + 16));
      if (!kdc_cred) {
        goto LABEL_78;
      }
LABEL_88:
      sub_213CBBBEC((uint64_t)&v68);
LABEL_89:
      sub_213CBBB8C((uint64_t)&v72);
      if (v77) {
        krb5_free_creds(a1, (krb5_creds *)v77);
      }
      return kdc_cred;
    }
LABEL_87:
    kdc_uint64_t cred = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_88;
  }
  kdc_uint64_t cred = 12;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
LABEL_39:
  uint64_t v20 = &v75;
  krb5_free_addresses(a1, &v75);
  freeaddrinfo(v65);
  if (!kdc_cred)
  {
    LOBYTE(magic) = 1;
    goto LABEL_10;
  }
  return kdc_cred;
}

uint64_t sub_213C8D5E8(_krb5_context *a1, _krb5_ccache *a2, const krb5_principal_data *a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v14.krb5_magic magic = 0;
  v14.data = 0;
  krb5_data_zero(&v14);
  CFStringRef v10 = krb5_storage_emem();
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    uint64_t v12 = krb5_store_uint32(v10, a4);
    if (!v12)
    {
      uint64_t v12 = krb5_store_creds(v11, a5);
      if (!v12)
      {
        uint64_t v12 = krb5_storage_to_data(v11, (size_t *)&v14);
        if (!v12) {
          uint64_t v12 = krb5_cc_set_config(a1, a2, a3, "_forward", &v14);
        }
      }
    }
    krb5_data_free(&v14);
    krb5_storage_free(v11);
  }
  else
  {
    uint64_t v12 = krb5_enomem(a1);
    krb5_data_free(&v14);
  }
  return v12;
}

uint64_t _krb5_get_host_realm_int(_krb5_context *a1, char *a2, int a3, unsigned __int8 ***a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL BOOL_default = krb5_config_get_BOOL_default((uint64_t)a1, 0, 0, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  if (!a2)
  {
LABEL_19:
    uint64_t v34 = strchr(a2, 46);
    if (!v34)
    {
      uint64_t v37 = 2529639129;
      krb5_set_error_message(a1, -1765328167, "unable to find realm of host %s");
      return v37;
    }
    long long v35 = v34;
    unint64_t v36 = (unsigned __int8 **)malloc_type_malloc(0x10uLL, 0x10040436913F5uLL);
    *a4 = v36;
    if (v36)
    {
      void *v36 = (unsigned __int8 *)strdup(v35 + 1);
      if (**a4)
      {
        rk_strupr(**a4);
        uint64_t v37 = 0;
        (*a4)[1] = 0;
        return v37;
      }
      free(*a4);
    }
    uint64_t v37 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v37;
  }
  if (a3) {
    BOOL v19 = !BOOL_default;
  }
  else {
    BOOL v19 = 1;
  }
  int v20 = !v19;
  krb5_principal v21 = a2;
  while (1)
  {
    strings = (const char **)krb5_config_get_strings((uint64_t)a1, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"domain_realm");
    if (strings) {
      break;
    }
    if (v20 && !sub_213C8D8A8((uint64_t)a1, v21, (void **)a4, v23, v24, v25, v26, v27)) {
      return 0;
    }
LABEL_18:
    krb5_principal v21 = strchr(v21 + 1, 46);
    if (!v21) {
      goto LABEL_19;
    }
  }
  *a4 = (unsigned __int8 **)strings;
  if (strcasecmp(*strings, "dns_locate")) {
    return 0;
  }
  if (!a3) {
    goto LABEL_18;
  }
  uint64_t v33 = a2;
  while (sub_213C8D8A8((uint64_t)a1, v33, (void **)a4, v28, v29, v30, v31, v32))
  {
    uint64_t v33 = strchr(v33 + 1, 46);
    if (!v33) {
      goto LABEL_18;
    }
  }
  return 0;
}

uint64_t sub_213C8D8A8(uint64_t a1, const char *a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  strings = (void **)krb5_config_get_strings(a1, 0, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  uint64_t v32 = strings;
  if (strings) {
    uint64_t v11 = (const char **)strings;
  }
  else {
    uint64_t v11 = (const char **)&off_2641E3F98;
  }
  if (*a2 == 46) {
    uint64_t v12 = a2 + 1;
  }
  else {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *v11;
  if (*v11)
  {
    uint64_t v14 = 0;
    uint64_t v15 = "TXT";
    do
    {
      if (snprintf(__str, 0x100uLL, "%s.%s.", v13, v12) >= 0x100) {
        break;
      }
      uint64_t v16 = sub_213CB9180(__str, v15);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = v15;
        uint64_t v19 = *((void *)v16 + 6);
        if (v19)
        {
          unsigned int v20 = 0;
          uint64_t v21 = *((void *)v16 + 6);
          do
          {
            if (*(_DWORD *)(v21 + 8) == 16) {
              ++v20;
            }
            uint64_t v21 = *(void *)(v21 + 32);
          }
          while (v21);
          if (v20)
          {
            uint64_t v22 = v20 + 1;
            uint64_t v23 = malloc_type_malloc(8 * v22, 0x10040436913F5uLL);
            *a3 = v23;
            if (v23)
            {
              if (v22)
              {
                uint64_t v24 = 0;
                do
                {
                  *(void *)((char *)*a3 + v24) = 0;
                  v24 += 8;
                }
                while (8 * v22 != v24);
              }
              unsigned int v25 = 0;
              while (1)
              {
                if (*(_DWORD *)(v19 + 8) == 16)
                {
                  uint64_t v26 = strdup(*(const char **)(v19 + 24));
                  if (!v26)
                  {
                    uint64_t v27 = 0;
                    if (v20 <= 1) {
                      unsigned int v28 = 1;
                    }
                    else {
                      unsigned int v28 = v20;
                    }
                    uint64_t v29 = 8 * v28;
                    do
                    {
                      free(*(void **)((char *)*a3 + v27));
                      v27 += 8;
                    }
                    while (v29 != v27);
                    free(*a3);
                    break;
                  }
                  *((void *)*a3 + v25++) = v26;
                }
                uint64_t v19 = *(void *)(v19 + 32);
                if (!v19)
                {
                  sub_213CB8824(v17);
                  uint64_t v30 = 0;
                  goto LABEL_36;
                }
              }
            }
          }
        }
        sub_213CB8824(v17);
        uint64_t v15 = v18;
      }
      uint64_t v13 = v11[++v14];
    }
    while (v13);
  }
  uint64_t v30 = 0xFFFFFFFFLL;
LABEL_36:
  if (v32) {
    krb5_config_free_strings(v32);
  }
  return v30;
}

krb5_error_code krb5_get_host_realm(krb5_context a1, const char *a2, char ***a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v25 = 0;
  if (a2)
  {
    __strlcpy_chk();
  }
  else
  {
    if (gethostname(__s, 0x100uLL))
    {
      *a3 = 0;
      return *__error();
    }
    __s[255] = 0;
  }
  sub_213C963D0(__s);
  CFMutableArrayRef v6 = heim_array_create();
  if (!v6) {
    return 12;
  }
  uint64_t v13 = v6;
  strings = (unsigned __int8 **)krb5_config_get_strings((uint64_t)a1, 0, v7, v8, v9, v10, v11, v12, (uint64_t)"domain_realm");
  if (strings)
  {
    uint64_t v15 = (char *const *)strings;
    unsigned int v25 = (char **)strings;
    sub_213C8DCE4(v13, (char **)strings);
    krb5_free_host_realm(a1, v15);
  }
  v26[0] = __s;
  v26[1] = v13;
  krb5_plugin_run_f((uint64_t)a1, "krb5", "krb5_configuration", 1u, 0, (uint64_t)v26, (uint64_t)sub_213C8DD50);
  BOOL v16 = strchr(__s, 46) != 0;
  if (!_krb5_get_host_realm_int(a1, __s, v16, (unsigned __int8 ***)&v25, v17, v18, v19, v20))
  {
    uint64_t v21 = v25;
    if (v25)
    {
      sub_213C8DCE4(v13, v25);
      krb5_free_host_realm(a1, v21);
    }
  }
  CFIndex length = heim_array_get_length(v13);
  if (!a2 || length)
  {
    if (!heim_array_get_length(v13))
    {
      krb5_error_code v23 = -1765328167;
      krb5_set_error_message(a1, -1765328167, "Unable to find realm of self");
      return v23;
    }
    krb5_error_code v23 = sub_213C8C754(a1, v13, (char *const **)a3);
    goto LABEL_22;
  }
  if (!krb5_get_default_realms(a1, a3))
  {
    krb5_error_code v23 = 0;
LABEL_22:
    heim_release(v13);
    return v23;
  }
  krb5_error_code v23 = -1765328167;
  krb5_set_error_message(a1, -1765328167, "Unable to find realm of host %s");
  return v23;
}

char *sub_213C8DCE4(__CFArray *a1, char **a2)
{
  krb5_error_code result = *a2;
  if (*a2)
  {
    krb5_error_code v4 = a2 + 1;
    do
    {
      CFStringRef v5 = heim_string_create(result);
      if (v5)
      {
        CFStringRef v6 = v5;
        if (!sub_213CD8058(a1, v5)) {
          heim_array_append_value(a1, v6);
        }
        heim_release(v6);
      }
      uint64_t v7 = *v4++;
      krb5_error_code result = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_213C8DD50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  krb5_error_code v4 = *(uint64_t (**)(uint64_t, void, uint64_t, void, void (*)(int, __CFArray *, char *)))(a2 + 32);
  if (v4) {
    return v4(a1, *a4, a3, a4[1], sub_213C8DD7C);
  }
  else {
    return 2529639161;
  }
}

void sub_213C8DD7C(int a1, __CFArray *a2, char *cStr)
{
  CFStringRef v4 = heim_string_create(cStr);
  if (v4)
  {
    CFStringRef v5 = v4;
    heim_array_append_value(a2, v4);
    heim_release(v5);
  }
}

void sub_213C8DDD8()
{
  CFAllocatorRef v0 = (void *)MEMORY[0x216695790]();
  AnalyticsSendEventLazy();
}

uint64_t sub_213C8DE8C(uint64_t a1)
{
  v6[4] = *MEMORY[0x263EF8340];
  v5[0] = @"AS_REQ_replykey_et";
  v6[0] = [NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v5[1] = @"AS_REQ_useret_et";
  v6[1] = [NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v5[2] = @"AS_REQ_preauth";
  uint64_t v2 = [NSString stringWithCString:*(void *)(a1 + 32) encoding:4];
  uint64_t v3 = @"unknown";
  if (v2) {
    uint64_t v3 = (__CFString *)v2;
  }
  v6[2] = v3;
  void v5[3] = @"AS_REQ_FAST";
  v6[3] = [NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  return [NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:4];
}

uint64_t krb5_getportbyname(int a1, char *a2, char *a3, unsigned int a4)
{
  CFStringRef v5 = getservbyname(a2, a3);
  if (v5) {
    return v5->s_port;
  }
  else {
    return bswap32(a4) >> 16;
  }
}

uint64_t krb5_process_last_request(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 88);
    if (v6)
    {
      if (*(void *)(v6 + 48))
      {
        uint64_t v7 = malloc_type_calloc((*(_DWORD *)(a3 + 784) + 1), 8uLL, 0x2004093837F09uLL);
        if (!v7)
        {
          uint64_t v14 = 12;
          krb5_set_error_message(a1, 12, "malloc: out of memory");
          return v14;
        }
        uint64_t v8 = v7;
        if (*(_DWORD *)(a3 + 784))
        {
          uint64_t v9 = 0;
          unint64_t v10 = 0;
          do
          {
            uint64_t v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040F7F8B94BuLL);
            v8[v10] = v11;
            if (!v11) {
              break;
            }
            uint64_t v12 = *(void *)(a3 + 792) + v9;
            *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
            v11[1] = *(void *)(v12 + 8);
            ++v10;
            v9 += 16;
          }
          while (v10 < *(unsigned int *)(a3 + 784));
        }
        (*(void (**)(_krb5_context *, void *, void))(*(void *)(a2 + 88) + 48))(a1, v8, *(void *)(*(void *)(a2 + 88) + 56));
        if (*(_DWORD *)(a3 + 784))
        {
          unint64_t v13 = 0;
          do
            free((void *)v8[v13++]);
          while (v13 < *(unsigned int *)(a3 + 784));
        }
        free(v8);
      }
    }
  }
  krb5_init_creds_warn_user(a1, a3);
  return 0;
}

uint64_t krb5_init_creds_warn_user(_krb5_context *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 904) || *(_DWORD *)(a2 + 920)) {
    return 0;
  }
  *(void *)unint64_t v36 = 0;
  *(_DWORD *)(a2 + 920) = 1;
  krb5_timeofday(a1, v36);
  krb5_principal_get_realm((uint64_t)a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void *)v36;
  uint64_t time = krb5_config_get_time((uint64_t)a1, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"realms");
  if (time < 0)
  {
    uint64_t time = krb5_config_get_time((uint64_t)a1, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"libdefaults");
    if (time < 0) {
      uint64_t time = 604800;
    }
  }
  if (*(_DWORD *)(a2 + 784))
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    time_t v21 = time + v5;
    do
    {
      uint64_t v22 = *(void *)(a2 + 792);
      time_t v23 = *(void *)(v22 + v19 + 8);
      if (v23 <= v21)
      {
        int v24 = *(_DWORD *)(v22 + v19);
        if (v24 == 6)
        {
          unsigned int v25 = "Your password will expire at ";
          goto LABEL_14;
        }
        if (v24 == 7)
        {
          unsigned int v25 = "Your account will expire at ";
LABEL_14:
          sub_213C8E330((uint64_t)a1, *(void (**)(uint64_t, uint64_t, void, char *, void, void))(a2 + 904), *(void *)(a2 + 912), v25, v23);
        }
      }
      ++v20;
      v19 += 16;
    }
    while (v20 < *(unsigned int *)(a2 + 784));
  }
  if (krb5_enctype_warning((uint64_t)a1, *(_DWORD *)(a2 + 1024)))
  {
    uint64_t v31 = (unsigned int *)(a2 + 1024);
  }
  else
  {
    uint64_t v31 = (unsigned int *)(a2 + 24);
    if (!krb5_enctype_warning((uint64_t)a1, *(_DWORD *)(a2 + 24))) {
      return 0;
    }
  }
  if (*(void *)(a2 + 904))
  {
    uint64_t v32 = (char *)*v31;
    if (v32)
    {
      if (!krb5_config_get_BOOL_default((uint64_t)a1, 0, 0, v26, v27, v28, v29, v30, (uint64_t)"libdefaults"))
      {
        uint64_t v34 = 0;
        long long v35 = 0;
        krb5_enctype_to_string((krb5_enctype)a1, v32, (size_t)&v35);
        uint64_t v33 = (const char *)v35;
        if (!v35) {
          uint64_t v33 = "unknown";
        }
        asprintf(&v34, "Encryption type %s(%d) used for authentication is weak and will be deprecated", v33, v32);
        if (v34)
        {
          (*(void (**)(_krb5_context *, void, void, char *, void, void))(a2 + 904))(a1, *(void *)(a2 + 912), 0, v34, 0, 0);
          free(v34);
        }
        free(v35);
      }
    }
  }
  return 0;
}

void sub_213C8E330(uint64_t a1, void (*a2)(uint64_t, uint64_t, void, char *, void, void), uint64_t a3, const char *a4, time_t a5)
{
  uint64_t v10 = 0;
  time_t v11 = a5;
  uint64_t v9 = ctime(&v11);
  if ((asprintf(&v10, "%s%s", a4, v9) & 0x80000000) == 0)
  {
    if (v10)
    {
      a2(a1, a3, 0, v10, 0, 0);
      free(v10);
    }
  }
}

uint64_t krb5_keyblock_key_proc(_krb5_context *a1, int a2, int a3, krb5_keyblock *a4, krb5_keyblock **a5)
{
  return krb5_copy_keyblock(a1, a4, a5);
}

uint64_t _krb5_make_pa_enc_challange(_krb5_context *a1, _DWORD **a2, uint64_t a3, unsigned int *a4)
{
  *(void *)time_t v23 = 0;
  int v24 = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  krb5_int32 v20 = 0;
  krb5_us_timeofday(a1, v23, &v20);
  krb5_int32 v19 = v20;
  int v24 = &v19;
  uint64_t v8 = sub_213CBB698((uint64_t)v23);
  uint64_t v9 = malloc_type_malloc(v8, 0x138FC18uLL);
  if (!v9) {
    return 12;
  }
  uint64_t v10 = v9;
  uint64_t v11 = sub_213CBB678((uint64_t)v9 + v8 - 1, v8, (uint64_t)v23, (uint64_t)&v22);
  if (!v11)
  {
    if (v8 == v22)
    {
      uint64_t v12 = krb5_encrypt_EncryptedData(a1, a2, a3, v10, v8, 0, (uint64_t)v21);
      free(v10);
      if (v12) {
        return v12;
      }
      uint64_t v14 = sub_213CBB298((uint64_t)v21);
      uint64_t v15 = malloc_type_malloc(v14, 0xAD016E33uLL);
      if (!v15)
      {
        uint64_t v12 = 12;
        goto LABEL_12;
      }
      uint64_t v16 = v15;
      uint64_t v17 = sub_213CBB278((uint64_t)v15 + v14 - 1, v14, (uint64_t)v21, (uint64_t)&v22);
      if (v17)
      {
        uint64_t v12 = v17;
        free(v16);
LABEL_12:
        sub_213CBB2A8((uint64_t)v21);
        return v12;
      }
      sub_213CBB2A8((uint64_t)v21);
      if (v14 == v22)
      {
        uint64_t v12 = krb5_padata_add(a1, a4, 138, (uint64_t)v16, v14);
        if (!v12) {
          return v12;
        }
        uint64_t v13 = v16;
        goto LABEL_4;
      }
    }
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }
  uint64_t v12 = v11;
  uint64_t v13 = v10;
LABEL_4:
  free(v13);
  return v12;
}

uint64_t _krb5_validate_pa_enc_challange(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  *(void *)uint64_t v13 = 0;
  krb5_int32 v12 = 0;
  uint64_t v11 = 0;
  uint64_t v7 = krb5_decrypt_EncryptedData(a1, a2, a3, a4, &v15);
  if (!v7)
  {
    int v8 = sub_213CBB658(v16, v15, (uint64_t)v14, (uint64_t)&v11);
    krb5_data_free(&v15);
    if (v8)
    {
      uint64_t v7 = 2529638936;
      sub_213C9C004((uint64_t)a1, 5, "Failed to decode PA-ENC-TS_ENC - %s", a5);
    }
    else
    {
      krb5_us_timeofday(a1, v13, &v12);
      if (krb5_time_abs(*(uint64_t *)v13, v14[0]) <= *((void *)a1 + 10))
      {
        uint64_t v7 = 0;
      }
      else
      {
        krb5_format_time((uint64_t)a1, v14[0], v17, 0x64uLL, 1);
        int v9 = krb5_time_abs(*(uint64_t *)v13, v14[0]);
        sub_213C9C004((uint64_t)a1, 0, "Too large time skew, client time %s is out by %u > %d seconds -- %s", v17, v9, *((void *)a1 + 10), a5);
        uint64_t v7 = 2529638949;
      }
    }
    sub_213CBB6A8((uint64_t)v14);
  }
  return v7;
}

void *_krb5_srp_validate_group(int a1)
{
  if (a1 == 1) {
    return &unk_26C4CA8C8;
  }
  else {
    return 0;
  }
}

uint64_t _krb5_srp_pkisize(uint64_t a1)
{
  (*(void (**)(void))(a1 + 8))();

  return ccdh_ccn_size();
}

uint64_t _krb5_srp_keysize(uint64_t a1)
{
  return *(void *)(*(uint64_t (**)(void))(a1 + 16))();
}

void *_krb5_srp_create(uint64_t a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(a1 + 16))();
  (*(void (**)(void))(a1 + 8))();
  uint64_t v3 = ccdh_ccn_size();
  CFStringRef v4 = malloc_type_malloc(4 * (*v2 + v3) + 48, 0xECFA35FBuLL);
  if (v4) {
    ccsrp_ctx_init();
  }
  return v4;
}

uint64_t _krb5_srp_create_pa(_krb5_context *a1, uint64_t a2, const krb5_principal_data *a3, const char *a4, uint64_t a5, size_t *a6)
{
  (*(void (**)(void))(a2 + 8))();
  size_t v11 = ccdh_ccn_size();
  uint64_t v12 = krb5_data_alloc(a6, v11);
  if (!v12)
  {
    v20[1] = 0;
    time_t v21 = 0;
    v20[0] = 0;
    uint64_t v13 = krb5_unparse_name_flags(a1, a3, 2, &v21);
    if (v13)
    {
      uint64_t v12 = v13;
LABEL_7:
      krb5_data_free(a6);
      return v12;
    }
    uint64_t v14 = (size_t *)(*(uint64_t (**)(void))(a2 + 16))();
    uint64_t v15 = krb5_data_alloc(v20, *v14);
    if (v15
      || ((*(void (**)(void))(a2 + 16))(),
          strlen(a4),
          (*(void (**)(void))(a2 + 16))(),
          uint64_t v15 = ccpbkdf2_hmac(),
          v15))
    {
      uint64_t v12 = v15;
      free(v21);
      goto LABEL_7;
    }
    uint64_t v17 = _krb5_srp_create(a2);
    if (v17)
    {
      uint64_t v18 = v17;
      int verifier = ccsrp_generate_verifier();
      krb5_data_free(v20);
      krb5_xfree(v18);
      krb5_xfree(v21);
      if (verifier) {
        return 22;
      }
      else {
        return 0;
      }
    }
    else
    {
      krb5_data_free(a6);
      krb5_data_free(v20);
      krb5_xfree(v21);
      return 12;
    }
  }
  return v12;
}

uint64_t _krb5_srp_reply_key(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v10 = *(_OWORD *)*(void *)(a2 + 24);
  uint64_t v11 = 0;
  return _krb5_pk_kdf(a1, &v10, a4, a5, a6, 0, a3, a7, a8, 0, a9);
}

uint64_t sub_213C8E994(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 376)) {
    return 0;
  }
  else {
    return 2314790669;
  }
}

uint64_t sub_213C8E9AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  if (a6)
  {
    uint64_t result = sub_213CA19C4(a1, *(char **)(a5 + 32), *(void *)(a2 + 376), *(_DWORD *)(a6 + 120), a7, *(_DWORD *)(a2 + 188), a2 + 192, a4, (void **)(a2 + 944));
    if (!result) {
      *(unsigned char *)(a2 + 444) |= 4u;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 376);
    if (!v11) {
      return 2314790668;
    }
    uint64_t result = sub_213CA0D64(a1, v11, *(_DWORD *)(a2 + 384), 0, a5 + 16, *(unsigned int *)(a2 + 188), a9, a8);
    if (!result) {
      return 2314790668;
    }
  }
  return result;
}

uint64_t sub_213C8EA48(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  if (a6)
  {
    uint64_t result = sub_213CA19C4(a1, *(char **)(a5 + 32), *(void *)(a2 + 376), *(_DWORD *)(a6 + 120), a7, *(_DWORD *)(a2 + 188), a2 + 192, a4, (void **)(a2 + 944));
    if (!result) {
      *(unsigned char *)(a2 + 444) |= 4u;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 376);
    if (!v11) {
      return 2314790668;
    }
    uint64_t result = sub_213CA0D64(a1, v11, *(_DWORD *)(a2 + 384), 1, a5 + 16, *(unsigned int *)(a2 + 188), a9, a8);
    if (!result) {
      return 2314790668;
    }
  }
  return result;
}

uint64_t sub_213C8EAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a2 + 336)) {
    return 2314790669;
  }
  uint64_t result = 0;
  *(_DWORD *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  return result;
}

uint64_t sub_213C8EB08(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, unsigned int *a9)
{
  if (!a4)
  {
    uint64_t v13 = 2314790669;
    sub_213C9C004((uint64_t)a1, 0, "KDC didn't return any SRP pa data");
LABEL_12:
    *(_DWORD *)a3 = 4;
    return v13;
  }
  uint64_t v13 = 2314790669;
  switch(*(_DWORD *)a3)
  {
    case 1:
      uint64_t v74 = 0;
      long long v72 = 0u;
      long long v73 = 0u;
      v69[0] = 0;
      v71[0] = 0;
      v71[1] = 0;
      uint64_t v70 = 0;
      if (sub_213CBC034(*(void *)(a4 + 16), *(void *)(a4 + 8), (uint64_t)&v72, (uint64_t)v69)) {
        goto LABEL_12;
      }
      if (krb5_data_copy((void *)(a3 + 56), *(const void **)(a4 + 16), *(void *)(a4 + 8))) {
        goto LABEL_36;
      }
      int v14 = v72;
      if (!v72) {
        goto LABEL_10;
      }
      uint64_t v15 = (_DWORD *)*((void *)&v72 + 1);
      uint64_t v16 = v72;
      while (*v15 != 1)
      {
        v15 += 8;
        if (!--v16)
        {
          *(void *)(a3 + 8) = 0;
LABEL_10:
          sub_213C9C004((uint64_t)a1, 0, "KDC didn't send a good SRP group for us, sent %u group(s)", v14);
          goto LABEL_36;
        }
      }
      *(void *)(a3 + 8) = &unk_26C4CA8C8;
      if (copy_KRB5_SRP_PA()
        || (int v41 = _krb5_srp_create(*(void *)(a3 + 8)), (*(void *)(a3 + 16) = v41) == 0)
        || (*(void *)(a3 + 24) = *(void *)(*(uint64_t (**)(void))(*(void *)(a3 + 8) + 16))(),
            (*(void (**)(void))(*(void *)(a3 + 8) + 8))(),
            *(void *)(a3 + 32) = ccdh_ccn_size(),
            krb5_data_alloc((size_t *)(a3 + 40), *(void *)(a3 + 24))))
      {
LABEL_36:
        *(_DWORD *)a3 = 4;
        sub_213CBC054((uint64_t)&v72);
        return v13;
      }
      (*(void (**)(void))(*(void *)(a3 + 8) + 16))();
      strlen(*(const char **)(a2 + 336));
      int v42 = ccpbkdf2_hmac();
      sub_213CBC054((uint64_t)&v72);
      if (v42 || krb5_data_alloc(v71, *(void *)(a3 + 32))) {
        goto LABEL_12;
      }
      LODWORD(v70) = **(_DWORD **)(a3 + 8);
      ccDRBGGetRngState();
      ccsrp_client_start_authentication();
      long long v43 = (krb5_principal_data *)sub_213CBC084((uint64_t)&v70);
      long long v44 = malloc_type_malloc((size_t)v43, 0xE52BE08CuLL);
      if (!v44) {
        goto LABEL_44;
      }
      uint64_t v45 = v44;
      if (sub_213CBC064((uint64_t)v43 + (void)v44 - 1, (uint64_t)v43, (uint64_t)&v70, (uint64_t)v69))
      {
        free(v45);
LABEL_44:
        sub_213CBC094((uint64_t)&v70);
        goto LABEL_12;
      }
      sub_213CBC094((uint64_t)&v70);
      if (v43 != v69[0]) {
        heim_abort("ASN1.1 Internal error:data.length == size", v57, v58, v59, v60, v61, v62, v63, v64);
      }
      if (!krb5_padata_add(a1, a9, 250, (uint64_t)v45, (uint64_t)v43))
      {
        int v56 = 2;
        goto LABEL_55;
      }
      goto LABEL_53;
    case 2:
      uint64_t v70 = 0;
      v71[0] = 0;
      size_t v67 = 0;
      krb5_const_principal v68 = 0;
      uint64_t v66 = 0;
      v69[0] = 0;
      v69[1] = 0;
      if (sub_213CBC0A4(*(void *)(a4 + 16), *(void *)(a4 + 8), (uint64_t)&v70, (uint64_t)&v66)) {
        goto LABEL_12;
      }
      if (v70 != *(void *)(a3 + 32)) {
        goto LABEL_21;
      }
      uint64_t v26 = *(void *)(a5 + 24);
      if (!v26) {
        heim_abort("should not get here since we could not have found the hdb entry otherwise:a->req_body.cname != NULL", v19, v20, v21, v22, v23, v24, v25, v64);
      }
      uint64_t v27 = *(const char **)(a5 + 32);
      long long v28 = *(_OWORD *)v26;
      *(void *)&long long v73 = *(void *)(v26 + 16);
      long long v72 = v28;
      if (_krb5_principalname2krb5_principal((uint64_t)a1, &v68, (uint64_t)&v72, v27)) {
        goto LABEL_21;
      }
      krb5_error_code v29 = krb5_unparse_name_flags(a1, v68, 2, &v67);
      krb5_free_principal(a1, (krb5_principal)v68);
      if (v29) {
        goto LABEL_21;
      }
      if (krb5_data_alloc((size_t *)v69, *(void *)(a3 + 24)))
      {
        free(v67);
LABEL_21:
        *(_DWORD *)a3 = 4;
        sub_213CBC0C4((uint64_t)&v70);
        return v13;
      }
      sub_213C9C004((uint64_t)a1, 5, "ccsrp client start for user: %s", v67);
      int v46 = ccsrp_client_process_challenge();
      sub_213CBC0C4((uint64_t)&v70);
      if (v46)
      {
        *(_DWORD *)a3 = 4;
        sub_213CBC104((uint64_t)v69);
        return v13;
      }
      uint64_t v47 = sub_213CBC0F4((uint64_t)v69);
      long long v48 = malloc_type_malloc(v47, 0xD4E58162uLL);
      if (!v48) {
        goto LABEL_50;
      }
      uint64_t v45 = v48;
      if (sub_213CBC0D4((uint64_t)v48 + v47 - 1, v47, (uint64_t)v69, (uint64_t)&v66))
      {
        free(v45);
LABEL_50:
        sub_213CBC104((uint64_t)v69);
        goto LABEL_12;
      }
      sub_213CBC104((uint64_t)v69);
      if (v47 != v66) {
        heim_abort("ASN.1 internal error:data.length == size", v49, v50, v51, v52, v53, v54, v55, v65);
      }
      if (krb5_padata_add(a1, a9, 250, (uint64_t)v45, v47))
      {
LABEL_53:
        free(v45);
        goto LABEL_12;
      }
      int v56 = 3;
LABEL_55:
      *(_DWORD *)a3 = v56;
      return 2314790668;
    case 3:
      uint64_t v70 = 0;
      v71[0] = 0;
      krb5_const_principal v68 = 0;
      v69[0] = 0;
      if (!a6)
      {
        sub_213C9C004((uint64_t)a1, 0, "KDC didn't return an AS-REP in last step of verifier");
        goto LABEL_12;
      }
      if (sub_213CBC114(*(void *)(a4 + 16), *(void *)(a4 + 8), (uint64_t)&v70, (uint64_t)&v68)) {
        goto LABEL_12;
      }
      if (v70 != *(void *)(a3 + 24))
      {
        *(_DWORD *)a3 = 4;
        sub_213CBC134((uint64_t)&v70);
        return v13;
      }
      char v31 = ccsrp_client_verify_session();
      sub_213CBC134((uint64_t)&v70);
      if (v31)
      {
        uint64_t v32 = *(krb5_keyblock **)(a2 + 944);
        if (v32) {
          krb5_free_keyblock(a1, v32);
        }
        uint64_t v33 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
        *(void *)(a2 + 944) = v33;
        if (v33)
        {
          uint64_t v34 = *(const char **)(a6 + 16);
          long long v72 = *(_OWORD *)(a6 + 24);
          *(void *)&long long v73 = *(void *)(a6 + 40);
          if (!_krb5_principalname2krb5_principal((uint64_t)a1, v69, (uint64_t)&v72, v34))
          {
            uint64_t v35 = *(unsigned int *)(a6 + 120);
            uint64_t v36 = *(void *)(a3 + 8);
            uint64_t v37 = *(void *)(a3 + 16);
            uint64_t v38 = MEMORY[0x216694D80](*(void *)(v37 + 8));
            uint64_t v39 = *(void *)(a3 + 24);
            uint64_t v40 = *(void *)(a2 + 944);
            long long v72 = *(_OWORD *)*(void *)(v36 + 24);
            *(void *)&long long v73 = 0;
            LODWORD(v35) = _krb5_pk_kdf(a1, &v72, v37 + 32 * v38 + 32, v39, (long long *)&v69[0]->magic, 0, v35, a2 + 192, a3 + 56, 0, v40);
            krb5_free_principal(a1, v69[0]);
            if (!v35)
            {
              uint64_t v13 = 0;
              *(unsigned char *)(a2 + 444) |= 4u;
            }
          }
        }
      }
      else
      {
        sub_213C9C004((uint64_t)a1, 0, "Failed to validate the KDC");
      }
      goto LABEL_12;
    case 4:
      return v13;
    default:
      krb5_abortx(a1, "internal state machine error");
  }
}

uint64_t sub_213C8F110(uint64_t a1)
{
  free(*(void **)(a1 + 16));
  krb5_data_free((void *)(a1 + 56));
  krb5_data_free((void *)(a1 + 40));

  return free_KRB5_SRP_PA(a1 + 72);
}

uint64_t sub_213C8F15C(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v33 = 0;
  memset(v39, 0, sizeof(v39));
  uint64_t v40 = 0;
  if (a6) {
    int v13 = *(_DWORD *)(a6 + 120);
  }
  else {
    int v13 = 0;
  }
  memset(&v38, 0, sizeof(v38));
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned int v32 = 0;
  LODWORD(v39[0]) = v13;
  int v14 = sub_213C92E08((uint64_t)a1, *(void *)(a2 + 8), a5, (uint64_t)v39, a8);
  if (v14)
  {
    uint64_t v16 = v14;
    uint64_t v17 = *v14;
    if (v17)
    {
      if (*(void *)(a2 + 944))
      {
        krb5_free_keyblock(a1, *(krb5_keyblock **)(a2 + 944));
        uint64_t v17 = *v16;
      }
      long long v30 = *(_OWORD *)(v16 + 2);
      uint64_t v18 = *((void *)v16 + 4);
      uint64_t v31 = *((void *)v16 + 3);
      uint64_t v19 = *(void *)(a2 + 352);
      uint64_t v20 = *(uint64_t (**)(_krb5_context *, uint64_t, uint64_t, long long *, uint64_t, uint64_t))(a2 + 360);
      long long v28 = v30;
      *(void *)&long long v29 = v31;
      uint64_t pa_enc_challange = v20(a1, v17, v19, &v28, v18, a2 + 944);
      double v22 = sub_213C92EE0(a1, (uint64_t)v39);
      if (pa_enc_challange)
      {
        sub_213C9C004((uint64_t)a1, 5, "enc-chal: failed to build key", v22);
      }
      else
      {
        uint64_t pa_enc_challange = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 944), 0, &v33);
        if (!pa_enc_challange)
        {
          krb5_crypto_getenctype((uint64_t)a1, *(_DWORD ***)(a2 + 984), &v32);
          uint64_t v23 = "kdcchallengearmor";
          if (!a6) {
            uint64_t v23 = "clientchallengearmor";
          }
          uint64_t v24 = 20;
          if (a6) {
            uint64_t v24 = 17;
          }
          uint64_t v36 = v24;
          uint64_t v37 = v23;
          uint64_t v34 = 17;
          uint64_t v35 = "challengelongterm";
          uint64_t pa_enc_challange = krb5_crypto_fx_cf2(a1, *(uint64_t **)(a2 + 984), (uint64_t *)v33, (uint64_t)&v36, (uint64_t)&v34, (char *)v32, &v38);
          krb5_crypto_destroy(a1, (uint64_t)v33);
          if (!pa_enc_challange)
          {
            uint64_t pa_enc_challange = krb5_crypto_init(a1, &v38, 0, &v33);
            krb5_free_keyblock_contents(a1, &v38);
            if (!pa_enc_challange)
            {
              if (a6)
              {
                sub_213C9C004((uint64_t)a1, 5, "ENC_CHAL rep key", 0, 0, 0, 0, 0);
                if (*(void *)(a2 + 1016))
                {
                  if (a4)
                  {
                    if (sub_213CBB258(*(void *)(a4 + 16), *(void *)(a4 + 8), (uint64_t)&v28, (uint64_t)&v30))
                    {
                      uint64_t pa_enc_challange = 2529638943;
                      sub_213C9C004((uint64_t)a1, 5, "Failed to decode ENC_CHAL KDC reply", v26);
                    }
                    else
                    {
                      uint64_t pa_enc_challange = _krb5_validate_pa_enc_challange(a1, (uint64_t)v33, 55, (uint64_t)&v28, "KDC");
                      sub_213CBB2A8((uint64_t)&v28);
                      krb5_crypto_destroy(a1, (uint64_t)v33);
                    }
                  }
                  else
                  {
                    krb5_crypto_destroy(a1, (uint64_t)v33);
                    sub_213C9C004((uint64_t)a1, 0, "KDC response missing");
                    return 2314790669;
                  }
                }
                else
                {
                  krb5_crypto_destroy(a1, (uint64_t)v33);
                  sub_213C9C004((uint64_t)a1, 5, "ENC_CHAL w/o strengthen_key");
                  return 2529639059;
                }
              }
              else
              {
                uint64_t pa_enc_challange = _krb5_make_pa_enc_challange(a1, (_DWORD **)v33, 54, a9);
                krb5_crypto_destroy(a1, (uint64_t)v33);
                if (pa_enc_challange) {
                  sub_213C9C004((uint64_t)a1, 5, "enc-chal: failed build enc challange", v27);
                }
                else {
                  return 2314790668;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 2314790669;
    }
  }
  else
  {
    uint64_t pa_enc_challange = 2314790668;
    sub_213C9C004((uint64_t)a1, 5, "no ppaid found", v15);
  }
  return pa_enc_challange;
}

uint64_t sub_213C8F488(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  krb5_free_principal(a1, *(krb5_principal *)(a3 + 8));
  *(void *)(a3 + 8) = 0;
  return 0;
}

uint64_t sub_213C8F4BC(krb5_context a1, uint64_t a2, krb5_principal *a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v16 = a3 + 1;
  double v15 = a3[1];
  if (v15)
  {
    if (krb5_principal_compare(a1, v15, *(krb5_const_principal *)(a2 + 8)))
    {
      if (*v16) {
        goto LABEL_7;
      }
    }
    else
    {
      *(_DWORD *)a3 = 0;
      krb5_free_principal(a1, a3[1]);
      a3[1] = 0;
    }
  }
  uint64_t v17 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 8), v16);
  if (v17) {
    return v17;
  }
LABEL_7:
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  if (a6)
  {
    LODWORD(v48[0]) = *(_DWORD *)(a6 + 120);
    uint64_t v18 = sub_213C92E08((uint64_t)a1, *(void *)(a2 + 8), a5, (uint64_t)v48, a8);
    if (v18)
    {
LABEL_11:
      uint64_t v19 = *(unsigned int *)(a6 + 120);
      *(_OWORD *)int v46 = *(_OWORD *)(v18 + 2);
      uint64_t v20 = *((void *)v18 + 4);
      uint64_t v47 = *((void *)v18 + 3);
      uint64_t v21 = *(void *)(a2 + 352);
      double v22 = *(uint64_t (**)(krb5_context, uint64_t, uint64_t, long long *, uint64_t, uint64_t))(a2 + 360);
      long long v54 = *(_OWORD *)v46;
      *(void *)&long long v55 = v47;
      uint64_t v17 = v22(a1, v19, v21, &v54, v20, a2 + 944);
      sub_213C92EE0(a1, (uint64_t)v48);
      return v17;
    }
    if (*(_DWORD *)(a2 + 448))
    {
      uint64_t v18 = (_DWORD *)(a2 + 448);
      goto LABEL_11;
    }
    sub_213C9C004((uint64_t)a1, 0, "no paid when building key, build a default salt structure ?");
    return 2314790669;
  }
  uint64_t v23 = sub_213C92E08((uint64_t)a1, *(void *)(a2 + 8), a5, (uint64_t)v48, a8);
  if (!v23)
  {
    uint64_t v17 = 2314790668;
    sub_213C9C004((uint64_t)a1, 5, "TS-ENC: waiting for KDC to set pw-salt/etype_info{,2}");
    return v17;
  }
  uint64_t v24 = v23;
  if (!*v23)
  {
    sub_213C92EE0(a1, (uint64_t)v48);
    sub_213C9C004((uint64_t)a1, 5, "TS-ENC: kdc proposes enctype NULL ?");
    return 2314790669;
  }
  int v25 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 8) != 0) {
    int v26 = 16;
  }
  else {
    int v26 = 8;
  }
  if ((v26 & v25) == 0)
  {
    *(_DWORD *)a3 = v26 | v25;
    sub_213C92EE0(a1, a2 + 448);
    long long v29 = *(_OWORD *)v24;
    long long v30 = *((_OWORD *)v24 + 1);
    *(void *)(a2 + 480) = *((void *)v24 + 4);
    *(_OWORD *)(a2 + 448) = v29;
    *(_OWORD *)(a2 + 464) = v30;
    if (!*(void *)(a2 + 360) || !*(void *)(a2 + 352))
    {
      uint64_t v17 = 2314790668;
      sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: no keyproc or keyseed");
      return v17;
    }
    sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: pa-info found, using %d", *v24);
    uint64_t v33 = a2 + 352;
    uint64_t v31 = *(void *)(a2 + 352);
    unsigned int v32 = *(unsigned int (**)(krb5_context, uint64_t, uint64_t, long long *, uint64_t, krb5_keyblock **))(v33 + 8);
    uint64_t v34 = *((void *)v24 + 4);
    uint64_t v50 = 0;
    sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: using ENC-TS with enctype %d", *v24);
    uint64_t v35 = *v24;
    long long v36 = *(_OWORD *)(v24 + 2);
    *(void *)&long long v55 = *((void *)v24 + 3);
    long long v54 = v36;
    if (v32(a1, v35, v31, &v54, v34, &v50)) {
      return 2314790668;
    }
    uint64_t v37 = v50;
    memset(v46, 0, sizeof(v46));
    size_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    krb5_int32 v53 = 0;
    uint64_t v51 = 0;
    krb5_us_timeofday(a1, v46, &v53);
    krb5_int32 v52 = v53;
    *(void *)&v46[2] = &v52;
    uint64_t v38 = sub_213CBB698((uint64_t)v46);
    uint64_t v39 = malloc_type_malloc(v38, 0x7D05C84DuLL);
    if (!v39)
    {
LABEL_38:
      uint64_t v17 = 2314790668;
      krb5_free_keyblock(a1, v50);
      return v17;
    }
    uint64_t v40 = v39;
    if (sub_213CBB678((uint64_t)v39 + v38 - 1, v38, (uint64_t)v46, (uint64_t)&v56)) {
      goto LABEL_36;
    }
    if (v38 == v56)
    {
      if (krb5_crypto_init(a1, v37, 0, &v51))
      {
LABEL_36:
        int v41 = v40;
LABEL_37:
        free(v41);
        goto LABEL_38;
      }
      int v42 = krb5_encrypt_EncryptedData(a1, (_DWORD **)v51, 1, v40, v56, 0, (uint64_t)&v54);
      free(v40);
      krb5_crypto_destroy(a1, (uint64_t)v51);
      if (v42) {
        goto LABEL_38;
      }
      uint64_t v43 = sub_213CBB298((uint64_t)&v54);
      long long v44 = malloc_type_malloc(v43, 0x56520668uLL);
      if (!v44)
      {
LABEL_43:
        sub_213CBB2A8((uint64_t)&v54);
        goto LABEL_38;
      }
      uint64_t v45 = v44;
      if (sub_213CBB278((uint64_t)v44 + v43 - 1, v43, (uint64_t)&v54, (uint64_t)&v56))
      {
        free(v45);
        goto LABEL_43;
      }
      sub_213CBB2A8((uint64_t)&v54);
      if (v43 == v56)
      {
        if (!krb5_padata_add(a1, a9, 2, (uint64_t)v45, v43))
        {
          krb5_free_keyblock(a1, v50);
          return 2314790668;
        }
        int v41 = v45;
        goto LABEL_37;
      }
    }
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }
  uint64_t v17 = 2529639135;
  if ((v25 & 8) != 0) {
    double v27 = "reneg";
  }
  else {
    double v27 = "info";
  }
  sub_213C92EE0(a1, (uint64_t)v48);
  krb5_set_error_message(a1, -1765328161, "Already tried ENC-TS-%s, looping", v27);
  return v17;
}

void sub_213C8F944(uint64_t a1)
{
  uint64_t v1 = *(krb5_principal_data **)(a1 + 8);
  if (v1) {
    krb5_free_principal(0, v1);
  }
}

uint64_t sub_213C8F958(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v25 = 0;
  BOOL v24 = 0;
  uint64_t result = *(unsigned int *)(a2 + 368);
  if (result)
  {
    BOOL v24 = result == 1;
    uint64_t v11 = sub_213CBB6D8((uint64_t)&v24);
    uint64_t v12 = malloc_type_malloc(v11, 0xC9762E7CuLL);
    if (v12)
    {
      int v13 = v12;
      uint64_t v21 = sub_213CBB6B8((uint64_t)v12 + v11 - 1, v11, (uint64_t)&v24, (uint64_t)&v25);
      if (v21) {
        goto LABEL_6;
      }
      if (v25 != v11) {
        heim_abort("internal error in ASN.1 encoder:len == length", v14, v15, v16, v17, v18, v19, v20, v23);
      }
      int v22 = krb5_padata_add(a1, a9, 128, (uint64_t)v13, v11);
      uint64_t v21 = 0;
      uint64_t result = 0;
      if (v22)
      {
LABEL_6:
        free(v13);
        return v21;
      }
    }
    else
    {
      return 12;
    }
  }
  return result;
}

uint64_t sub_213C8FA3C(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v9 = *(void *)(a2 + 1072);
  if (!v9) {
    return 0;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = krb5_data_copy(&v13, *(const void **)(v9 + 8), *(void *)v9);
  if (!v11)
  {
    uint64_t v11 = krb5_padata_add(a1, a9, 148, v14, v13);
    if (v11) {
      krb5_data_free(&v13);
    }
  }
  return v11;
}

uint64_t sub_213C8FAB4(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  if ((*(unsigned char *)(a2 + 444) & 2) != 0) {
    return krb5_padata_add(a1, a9, 149, 0, 0);
  }
  else {
    return 0;
  }
}

uint64_t sub_213C8FAD8(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  int v15 = 0;
  padata = krb5_find_padata(*(void *)(a8 + 8), *(_DWORD *)a8, 133, &v15);
  uint64_t v11 = (uint64_t)padata;
  if (padata)
  {
    uint64_t v12 = malloc_type_malloc(*((void *)padata + 1), 0x1FD5A44FuLL);
    if (v12)
    {
      uint64_t v13 = v12;
      memcpy(v12, *(const void **)(v11 + 16), *(void *)(v11 + 8));
      uint64_t v11 = krb5_padata_add(a1, a9, 133, (uint64_t)v13, *(void *)(v11 + 8));
      if (v11) {
        free(v13);
      }
      else {
        sub_213C9C004((uint64_t)a1, 5, "Mirrored FX-COOKIE to KDC");
      }
    }
    else
    {
      return 12;
    }
  }
  return v11;
}

uint64_t sub_213C8FB98(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v9 = sub_213CBB4FC(a5[1], *a5, (uint64_t)&v27, (uint64_t)&v26);
  int v10 = v27;
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v27 == 0;
  }
  if (!v11)
  {
    unint64_t v12 = *(unsigned int *)(a3 + 80);
    if (v12)
    {
      uint64_t v13 = 0;
      while (!v10)
      {
LABEL_21:
        if (++v13 >= v12) {
          goto LABEL_22;
        }
      }
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        if (krb5_enctype_valid(a1, (char *)*(unsigned int *)(v28 + v14))) {
          goto LABEL_18;
        }
        uint64_t v16 = v28;
        if (*(_DWORD *)(*(void *)(a3 + 88) + 4 * v13) != *(_DWORD *)(v28 + v14)) {
          goto LABEL_18;
        }
        long long v24 = 0uLL;
        uint64_t v25 = 0;
        uint64_t v17 = *(const char ***)(v28 + v14 + 8);
        if (v17) {
          break;
        }
        int pw_salt = krb5_get_pw_salt((uint64_t)a1, a2, (uint64_t)&v24);
        if (!pw_salt)
        {
          uint64_t v16 = v28;
          size_t v19 = *((void *)&v24 + 1);
          uint64_t v18 = v25;
          goto LABEL_13;
        }
LABEL_15:
        if (!*(void *)(v28 + v14 + 8))
        {
          long long v22 = v24;
          char v23 = v25;
          krb5_free_salt((uint64_t)a1, (uint64_t)&v22);
        }
        if (!pw_salt)
        {
          sub_213CBB51C((uint64_t)&v27);
          return a4;
        }
LABEL_18:
        ++v15;
        int v10 = v27;
        v14 += 24;
        if (v15 >= v27)
        {
          unint64_t v12 = *(unsigned int *)(a3 + 80);
          goto LABEL_21;
        }
      }
      uint64_t v18 = *v17;
      uint64_t v25 = *v17;
      size_t v19 = strlen(*v17);
      *((void *)&v24 + 1) = v19;
LABEL_13:
      int pw_salt = sub_213C92F40(a4, a1, *(_DWORD *)(v16 + v14), 3, v18, v19, *(const krb5_data **)(v16 + v14 + 16));
      goto LABEL_15;
    }
  }
LABEL_22:
  sub_213CBB51C((uint64_t)&v27);
  return 0;
}

uint64_t sub_213C8FD44(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v9 = sub_213CBB4CC(a5[1], *a5, (uint64_t)&v26, (uint64_t)&v25);
  int v10 = v26;
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v26 == 0;
  }
  if (v11 || (unint64_t v12 = *(unsigned int *)(a3 + 80), !v12))
  {
LABEL_23:
    sub_213CBB4EC((uint64_t)&v26);
    return 0;
  }
  else
  {
    uint64_t v13 = 0;
    while (!v10)
    {
LABEL_22:
      if (++v13 >= v12) {
        goto LABEL_23;
      }
    }
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    while (1)
    {
      if (!krb5_enctype_valid(a1, (char *)*(unsigned int *)(v27 + v14)))
      {
        uint64_t v16 = v27;
        if (*(_DWORD *)(*(void *)(a3 + 88) + 4 * v13) == *(_DWORD *)(v27 + v14))
        {
          *(void *)&v24[16] = 0;
          *(_OWORD *)long long v24 = 3u;
          uint64_t v17 = *(_OWORD **)(v27 + v14 + 8);
          if (v17)
          {
            int pw_salt = 0;
            *(_OWORD *)&v24[8] = *v17;
          }
          else
          {
            int pw_salt = krb5_get_pw_salt((uint64_t)a1, a2, (uint64_t)v24);
            uint64_t v16 = v27;
          }
          size_t v19 = *(_DWORD **)(v16 + v14 + 16);
          if (v19) {
            *(_DWORD *)long long v24 = *v19;
          }
          if (!pw_salt)
          {
            int v20 = sub_213C92F40(a4, a1, *(_DWORD *)(v16 + v14), *(int *)v24, *(const void **)&v24[16], *(size_t *)&v24[8], 0);
            if (!*(void *)(v27 + v14 + 8))
            {
              long long v22 = *(_OWORD *)v24;
              uint64_t v23 = *(void *)&v24[16];
              krb5_free_salt((uint64_t)a1, (uint64_t)&v22);
            }
            if (!v20) {
              break;
            }
          }
        }
      }
      ++v15;
      int v10 = v26;
      v14 += 24;
      if (v15 >= v26)
      {
        unint64_t v12 = *(unsigned int *)(a3 + 80);
        goto LABEL_22;
      }
    }
    sub_213CBB4EC((uint64_t)&v26);
  }
  return a4;
}

int *sub_213C8FEF4(_krb5_context *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v5 = (char *)*a4;
  if (!v5 || krb5_enctype_valid(a1, v5)) {
    return 0;
  }
  if (sub_213C92F40((uint64_t)a4, a1, *a4, a4[2], *(const void **)(a5 + 8), *(void *)a5, 0)) {
    return 0;
  }
  return a4;
}

uint64_t krb5_init_creds_init(_krb5_context *a1, krb5_principal_data *a2, uint64_t a3, uint64_t a4, uint64_t a5, krb5_get_init_creds_opt *a6, void *a7)
{
  *a7 = 0;
  uint64_t v14 = (char *)malloc_type_calloc(1uLL, 0x448uLL, 0x10F0040D241B14AuLL);
  if (!v14)
  {
    uint64_t inited = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return inited;
  }
  unint64_t v15 = v14;
  opt = 0;
  bzero(v14, 0x448uLL);
  if (!a6)
  {
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a2);
    krb5_get_init_creds_opt_alloc(a1, &opt);
    a6 = opt;
    krb5_get_init_creds_opt_set_default_flags(a1, 0, realm, (uint64_t)opt, v17, v18, v19, v20);
  }
  uint64_t v21 = *(void *)&a6[1].proxiable;
  if (v21)
  {
    uint64_t v22 = *(void *)(v21 + 8);
    if (v22)
    {
      uint64_t inited = krb5_init_creds_set_password(a1, (uint64_t)v15, v22);
      if (inited) {
        goto LABEL_62;
      }
      uint64_t v21 = *(void *)&a6[1].proxiable;
    }
    uint64_t v24 = *(void *)(v21 + 16);
    *((void *)v15 + 45) = v24;
    *((_DWORD *)v15 + 92) = *(_DWORD *)(v21 + 24);
    *((void *)v15 + 47) = *(void *)(v21 + 32);
    *((_DWORD *)v15 + 96) = *(_DWORD *)(v21 + 44);
  }
  else
  {
    *((_DWORD *)v15 + 92) = 0;
    uint64_t v24 = *((void *)v15 + 45);
  }
  if (!v24) {
    *((void *)v15 + 45) = sub_213C93020;
  }
  if ((v15[384] & 2) != 0 || krb5_principal_get_type((uint64_t)a1, (unsigned int *)a2) == 10) {
    *(_DWORD *)v15 |= 0x8000u;
  }
  *((void *)v15 + 19) = 0;
  *((void *)v15 + 20) = 0;
  *((void *)v15 + 21) = 0;
  *(void *)int v46 = 0;
  krb5_timeofday(a1, v46);
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  if (a2)
  {
    krb5_copy_principal(a1, a2, (krb5_principal *)v15 + 1);
    goto LABEL_18;
  }
  default_krb5_error_code principal = krb5_get_default_principal(a1, (krb5_principal *)v15 + 1);
  if (!default_principal)
  {
LABEL_18:
    if (a5) {
      *((void *)v15 + 7) = *(void *)v46 + a5;
    }
    krb5_flags flags = a6->flags;
    if (a6->flags) {
      uint64_t v26 = *(void *)&a6->renew_life;
    }
    else {
      uint64_t v26 = 36000;
    }
    uint64_t v27 = *(void *)v46;
    *((void *)v15 + 8) = *(void *)v46 + v26;
    if ((flags & 2) != 0)
    {
      uint64_t v28 = *(void *)&a6->proxiable;
      if (v28 >= 1) {
        *((void *)v15 + 9) = v28 + v27;
      }
    }
    uint64_t inited = krb5_init_creds_set_service(a1, (uint64_t)v15, 0);
    if (inited) {
      goto LABEL_62;
    }
    if ((a6->flags & 4) != 0)
    {
      *(_DWORD *)unint64_t v15 = *(_DWORD *)v15 & 0xFFFFFFFD | (2 * ((uint64_t)a6->etype_list & 1));
      if ((a6->flags & 8) == 0)
      {
LABEL_29:
        if (!a5) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
    else if ((a6->flags & 8) == 0)
    {
      goto LABEL_29;
    }
    *(_DWORD *)unint64_t v15 = *(_DWORD *)v15 & 0xFFFFFFF7 | (8 * (HIDWORD(a6->etype_list) & 1));
    if (!a5)
    {
LABEL_31:
      if (*((void *)v15 + 9)) {
        *(_DWORD *)v15 |= 0x100u;
      }
      krb5_flags v29 = a6->flags;
      if ((a6->flags & 0x20) != 0)
      {
        p_preauth_list_CFIndex length = &a6->preauth_list_length;
      }
      else
      {
        uint64_t v30 = *(void *)&a6[1].proxiable;
        if (!v30 || (uint64_t v31 = *(int *)(v30 + 40), v31 > 2))
        {
LABEL_44:
          if ((v29 & 0x10) != 0)
          {
            uint64_t v34 = (void *)*((void *)v15 + 20);
            if (v34) {
              free(v34);
            }
            uint64_t v35 = malloc_type_malloc(4 * SLODWORD(a6->preauth_list) + 4, 0x100004052888210uLL);
            if (!v35)
            {
LABEL_61:
              uint64_t inited = 12;
              krb5_set_error_message(a1, 12, "malloc: out of memory");
              goto LABEL_62;
            }
            long long v36 = v35;
            memcpy(v35, a6->address_list, 4 * SLODWORD(a6->preauth_list));
            v36[SLODWORD(a6->preauth_list)] = 0;
            *((void *)v15 + 20) = v36;
            krb5_flags v29 = a6->flags;
          }
          if ((v29 & 0x40) == 0)
          {
LABEL_52:
            if ((v29 & 0x100) != 0) {
              *(_DWORD *)unint64_t v15 = *(_DWORD *)v15 & 0xFFFEFFFF | ((a6->etype_list_length & 1) << 16);
            }
            if (opt) {
              krb5_get_init_creds_opt_free(a1, opt);
            }
            krb5_generate_random_block((uint64_t)(v15 + 184), 4);
            int v39 = *((_DWORD *)v15 + 46) & 0x7FFFFFFF;
            *((_DWORD *)v15 + 46) = v39;
            *((_DWORD *)v15 + 47) = v39;
            *((void *)v15 + 113) = a3;
            *((void *)v15 + 114) = a4;
            size_t v40 = strlen("WELLKNOWN:COM.APPLE.LKDC");
            if (!*((void *)v15 + 49))
            {
              size_t v41 = v40;
              int v42 = *(const char **)(*((void *)v15 + 1) + 24);
              if (!strncmp(v42, "WELLKNOWN:COM.APPLE.LKDC", v40) && v42[v41] == 58)
              {
                uint64_t v43 = strdup(&v42[v41 + 1]);
                *((void *)v15 + 49) = v43;
                sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: setting LKDC hostname to: %s", v43);
              }
            }
            uint64_t inited = 0;
            v15[444] |= 2u;
            *((_DWORD *)v15 + 235) |= 0x1000u;
            *a7 = v15;
            return inited;
          }
          uint64_t v37 = malloc_type_malloc(4 * a6[1].flags + 4, 0x100004052888210uLL);
          if (v37)
          {
            uint64_t v38 = v37;
            memcpy(v37, a6->salt, 4 * a6[1].flags);
            v38[a6[1].flags] = 0;
            *((void *)v15 + 21) = v38;
            krb5_flags v29 = a6->flags;
            goto LABEL_52;
          }
          goto LABEL_61;
        }
        p_preauth_list_CFIndex length = (int *)(&off_2641E3FD8 + v31);
      }
      *((void *)v15 + 19) = *(void *)p_preauth_list_length;
      goto LABEL_44;
    }
LABEL_30:
    *(_DWORD *)v15 |= 0x40u;
    goto LABEL_31;
  }
  uint64_t inited = default_principal;
  krb5_free_cred_contents(a1, (krb5_creds *)(v15 + 8));
LABEL_62:
  if (opt) {
    krb5_get_init_creds_opt_free(a1, opt);
  }
  free(v15);
  return inited;
}

void sub_213C903F4(krb5_context a1, uint64_t a2)
{
  CFStringRef v4 = *(void **)(a2 + 160);
  if (v4) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a2 + 168);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a2 + 176);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = *(void **)(a2 + 344);
  if (v7) {
    free(v7);
  }
  int v8 = *(void **)(a2 + 336);
  if (v8)
  {
    size_t v9 = strlen(*(const char **)(a2 + 336));
    bzero(v8, v9);
    free(*(void **)(a2 + 336));
  }
  sub_213CB76C0(a1, a2 + 936);
  int v10 = *(krb5_keyblock **)(a2 + 1032);
  if (v10) {
    krb5_free_keyblock(a1, v10);
  }
  krb5_data_free((void *)(a2 + 192));
  krb5_free_cred_contents(a1, (krb5_creds *)(a2 + 8));
  sub_213CBB54C(a2 + 488);
  sub_213CBB848(a2 + 608);
  sub_213CBB878(a2 + 760);
  sub_213CBBC4C(a2 + 504);
  sub_213CBB5F4(a2 + 208);
  heim_release(*(CFTypeRef *)(a2 + 1048));
  heim_release(*(CFTypeRef *)(a2 + 1040));
  *(void *)(a2 + 1040) = 0;
  uint64_t v11 = *(void *)(a2 + 1064);
  if (v11) {
    hx509_cert_free(v11);
  }
  unint64_t v12 = *(krb5_data **)(a2 + 1072);
  if (v12) {
    krb5_free_data(a1, v12);
  }
  uint64_t v13 = *(void **)(a2 + 392);
  if (v13) {
    free(v13);
  }
  uint64_t v14 = *(void **)(a2 + 400);
  if (v14) {
    free(v14);
  }
  sub_213C92EE0(a1, a2 + 448);

  bzero((void *)a2, 0x448uLL);
}

uint64_t krb5_init_creds_set_kdc_hostname(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v6 = *(void **)(a2 + 392);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(__s1);
  *(void *)(a2 + 392) = v7;
  if (v7) {
    return 0;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_init_creds_set_sitename(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v6 = *(void **)(a2 + 400);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(__s1);
  *(void *)(a2 + 400) = v7;
  if (v7) {
    return 0;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_init_creds_set_source_app(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char *__s1)
{
  return 0;
}

uint64_t krb5_init_creds_set_source_process(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, char *__s1)
{
  *(unsigned char *)(a2 + 444) |= 8u;
  *(_OWORD *)(a2 + 408) = *(_OWORD *)a3;
  int v10 = *(void **)(a2 + 432);
  if (v10)
  {
    free(v10);
    *(void *)(a2 + 432) = 0;
  }
  if (__s1) {
    *(void *)(a2 + 432) = strdup(__s1);
  }
  sub_213C9C004(a1, 5, "krb5_init_creds_set_source_app: %s %d%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", __s1, a4, *a3, a3[1], a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12], a3[13],
    a3[14],
    a3[15]);
  return 0;
}

uint64_t krb5_init_creds_set_service(_krb5_context *a1, uint64_t a2, const char *a3)
{
  krb5_principal v9 = 0;
  realm = (char *)krb5_principal_get_realm((uint64_t)a1, *(void *)(a2 + 8));
  uint64_t v7 = realm;
  if (a3)
  {
    uint64_t result = krb5_parse_name(a1, a3, &v9);
    if (result) {
      return result;
    }
    krb5_principal_set_realm(a1, (uint64_t)v9, v7);
  }
  else
  {
    uint64_t result = krb5_make_principal(a1, &v9, realm, "krbtgt", realm, 0);
    if (result) {
      return result;
    }
  }
  if (krb5_principal_is_krbtgt((uint64_t)a1, (uint64_t)v9)) {
    krb5_principal_set_type((uint64_t)a1, v9, 2);
  }
  krb5_free_principal(a1, *(krb5_principal *)(a2 + 16));
  uint64_t result = 0;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t krb5_init_creds_set_pkinit_client_cert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 1064)) {
    hx509_cert_free();
  }
  *(void *)(a2 + 1064) = hx509_cert_ref(a3);
  return 0;
}

uint64_t krb5_init_creds_set_password(_krb5_context *a1, uint64_t a2, uint64_t __s1)
{
  uint64_t v6 = *(void **)(a2 + 336);
  if (v6)
  {
    size_t v7 = strlen(*(const char **)(a2 + 336));
    bzero(v6, v7);
    free(*(void **)(a2 + 336));
  }
  if (__s1)
  {
    int v8 = strdup((const char *)__s1);
    *(void *)(a2 + 336) = v8;
    if (v8)
    {
      __s1 = 0;
      *(void *)(a2 + 352) = v8;
    }
    else
    {
      __s1 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }
  else
  {
    *(void *)(a2 + 352) = 0;
    *(void *)(a2 + 336) = 0;
  }
  return __s1;
}

uint64_t krb5_init_creds_set_keytab(_krb5_context *a1, uint64_t a2, _krb5_kt *a3)
{
  uint64_t v6 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  if (!v6)
  {
    uint64_t v8 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v8;
  }
  uint64_t v22 = 0;
  memset(&entry, 0, sizeof(entry));
  memset(cursor, 0, sizeof(cursor));
  uint64_t v7 = *(void *)(a2 + 8);
  *uint64_t v6 = a3;
  v6[1] = v7;
  *(void *)(a2 + 344) = v6;
  *(void *)(a2 + 352) = v6;
  *(void *)(a2 + 360) = sub_213C90B68;
  uint64_t v8 = krb5_kt_start_seq_get(a1, a3, cursor);
  if (v8) {
    goto LABEL_5;
  }
  if (krb5_kt_next_entry(a1, a3, &entry, cursor))
  {
    uint64_t v8 = 2529639093;
    krb5_kt_end_seq_get(a1, a3, cursor);
    goto LABEL_5;
  }
  int v10 = 0;
  int principal = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    if (!krb5_principal_compare(a1, *(krb5_const_principal *)&entry.magic, *(krb5_const_principal *)(a2 + 8))) {
      goto LABEL_27;
    }
    if (SLODWORD(entry.principal) <= principal)
    {
      if (LODWORD(entry.principal) != principal) {
        goto LABEL_16;
      }
    }
    else
    {
      if (v13)
      {
        free(v13);
        uint64_t v13 = 0;
      }
      uint64_t v12 = 0;
      int principal = (int)entry.principal;
    }
    if (krb5_enctype_valid(a1, (char *)entry.timestamp)) {
      goto LABEL_16;
    }
    uint64_t v14 = *(void *)(a2 + 160);
    if (v14)
    {
      unsigned int v15 = 0;
      do
      {
        int v16 = *(_DWORD *)(v14 + 4 * v15++);
        if (v16) {
          BOOL v17 = v16 == entry.timestamp;
        }
        else {
          BOOL v17 = 1;
        }
      }
      while (!v17);
      if (!v16)
      {
LABEL_16:
        int v10 = 1;
        goto LABEL_27;
      }
    }
    uint64_t v18 = malloc_type_realloc(v13, 4 * v12 + 8, 0x100004052888210uLL);
    if (!v18)
    {
      free(v13);
      return krb5_enomem(a1);
    }
    v18[v12++] = entry.timestamp;
    v18[v12] = 0;
    int v10 = 1;
    uint64_t v13 = v18;
LABEL_27:
    krb5_kt_free_entry(a1, (uint64_t)&entry);
  }
  while (!krb5_kt_next_entry(a1, a3, &entry, cursor));
  krb5_kt_end_seq_get(a1, a3, cursor);
  uint64_t v19 = *(void **)(a2 + 160);
  if (v13)
  {
    if (v19) {
      free(v19);
    }
    *(void *)(a2 + 160) = v13;
    if (!v10)
    {
      uint64_t v8 = 2529639093;
      goto LABEL_5;
    }
    return 0;
  }
  uint64_t v8 = 2529639093;
  if (!v19 && v10) {
    return 0;
  }
LABEL_5:
  sub_213C95CC4(a1, v8, (uint64_t)a3, *(void *)(a2 + 8), 0, 0);
  return v8;
}

uint64_t sub_213C90B68(krb5_context context, krb5_enctype enctype, uint64_t a3, uint64_t a4, uint64_t a5, krb5_keyblock **a6)
{
  krb5_principal v9 = *(_krb5_kt **)a3;
  int v10 = *(const krb5_principal_data **)(a3 + 8);
  uint64_t v14 = 0;
  krb5_keytab keytab = 0;
  memset(&v13, 0, sizeof(v13));
  if (v9)
  {
    krb5_keytab keytab = v9;
    uint64_t entry = krb5_kt_get_entry(context, v9, v10, 0, enctype, &v13);
    if (!entry)
    {
LABEL_6:
      uint64_t entry = krb5_copy_keyblock(context, (const krb5_keyblock *)&v13.timestamp, a6);
      krb5_kt_free_entry(context, (uint64_t)&v13);
    }
  }
  else
  {
    uint64_t entry = krb5_kt_default(context, &keytab);
    if (!entry)
    {
      uint64_t entry = krb5_kt_get_entry(context, keytab, v10, 0, enctype, &v13);
      krb5_kt_close(context, keytab);
      if (!entry) {
        goto LABEL_6;
      }
    }
  }
  return entry;
}

uint64_t _krb5_init_creds_set_pku2u(_krb5_context *a1, uint64_t a2, const krb5_data *a3)
{
  *(_DWORD *)(a2 + 384) |= 0x10u;
  *(_DWORD *)a2 = sub_213CBB248(0);
  uint64_t v6 = *(krb5_data **)(a2 + 1072);
  if (v6) {
    krb5_free_data(a1, v6);
  }
  uint64_t v7 = (krb5_data **)(a2 + 1072);
  if (a3)
  {
    uint64_t result = krb5_copy_data(a1, a3, v7);
    if (result) {
      return result;
    }
  }
  else
  {
    char *v7 = 0;
  }
  return 0;
}

uint64_t krb5_init_creds_set_keyblock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 352) = a3;
  *(void *)(a2 + 360) = sub_213C90CE8;
  return 0;
}

uint64_t sub_213C90CE8(_krb5_context *a1, int a2, krb5_keyblock *a3, int a4, int a5, krb5_keyblock **a6)
{
  return krb5_copy_keyblock(a1, a3, a6);
}

uint64_t krb5_init_creds_set_fast_ccache(_krb5_context *a1, uint64_t a2, _krb5_ccache *a3)
{
  v8.data = 0;
  krb5_principal v9 = 0;
  *(void *)&v8.krb5_magic magic = 0;
  uint64_t krbtgt = _krb5_get_krbtgt(a1, a3, 0, &v9);
  if (!krbtgt)
  {
    uint64_t krbtgt = krb5_cc_get_config(a1, a3, v9->client, "fast_avail", &v8);
    krb5_free_creds(a1, v9);
    if (krbtgt)
    {
      uint64_t krbtgt = 22;
      krb5_set_error_message(a1, 22, "FAST not available for the KDC in the armor ccache");
    }
    else
    {
      *(void *)(a2 + 952) = a3;
      *(_DWORD *)(a2 + 940) |= 0x40u;
    }
  }
  return krbtgt;
}

uint64_t krb5_init_creds_step(_krb5_context *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, _DWORD *a7)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  *(void *)&v125.tv_usec = 0;
  v125.tv_sec = 0;
  *(void *)&v124.tv_usec = 0;
  v124.tv_sec = 0;
  v123[1] = 0;
  v123[0] = 0;
  uint64_t v122 = 0;
  uint64_t v121 = 0;
  uint64_t v120 = 0;
  memset(v119, 0, sizeof(v119));
  gettimeofday(&v125, 0);
  krb5_data_zero(a4);
  krb5_data_zero(v123);
  if (a6) {
    *a6 = 0;
  }
  uint64_t v14 = (_OWORD *)(a2 + 208);
  if (*(void *)(a2 + 232))
  {
    int v15 = 0;
    goto LABEL_5;
  }
  uint64_t v19 = a7;
  uint64_t v20 = *(uint64_t **)(a2 + 376);
  if (v20)
  {
    uint64_t v21 = *(void *)(a2 + 1064);
    if (v21) {
      sub_213CA244C((uint64_t)a1, v20, v21);
    }
  }
  uint64_t v23 = *(krb5_address *const **)(a2 + 152);
  uint64_t v22 = *(unsigned int **)(a2 + 160);
  int v24 = *(_DWORD *)a2;
  *(void *)(a2 + 320) = 0;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *uint64_t v14 = 0u;
  *(void *)(a2 + 208) = 0xA00000005;
  *(_DWORD *)(a2 + 224) = v24;
  uint64_t v25 = malloc_type_malloc(0x18uLL, 0x10800407C14B876uLL);
  *(void *)(a2 + 232) = v25;
  if (!v25) {
    goto LABEL_112;
  }
  uint64_t v26 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800407C14B876uLL);
  *(void *)(a2 + 248) = v26;
  if (!v26) {
    goto LABEL_112;
  }
  v113 = a4;
  uint64_t inited = _krb5_principal2principalname();
  if (inited) {
    goto LABEL_113;
  }
  uint64_t inited = sub_213CBAF94();
  if (inited) {
    goto LABEL_113;
  }
  uint64_t inited = _krb5_principal2principalname();
  if (inited) {
    goto LABEL_113;
  }
  if (*(void *)(a2 + 56))
  {
    uint64_t v30 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
    *(void *)(a2 + 256) = v30;
    if (!v30) {
      goto LABEL_112;
    }
    void *v30 = *(void *)(a2 + 56);
  }
  if (*(void *)(a2 + 64))
  {
    uint64_t v31 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
    *(void *)(a2 + 264) = v31;
    *uint64_t v31 = *(void *)(a2 + 64);
  }
  if (*(void *)(a2 + 72))
  {
    unsigned int v32 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
    *(void *)(a2 + 272) = v32;
    if (v32)
    {
      void *v32 = *(void *)(a2 + 72);
      goto LABEL_24;
    }
LABEL_112:
    uint64_t inited = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_113;
  }
LABEL_24:
  *(_DWORD *)(a2 + 280) = 0;
  uint64_t inited = _krb5_init_etype(a1, 2, (unsigned int *)(a2 + 288), (uint64_t *)(a2 + 296), v22, v27, v28, v29);
  if (inited)
  {
LABEL_113:
    sub_213CBB5F4(a2 + 208);
    *(void *)(a2 + 320) = 0;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *uint64_t v14 = 0u;
    sub_213C903F4(a1, a2);
    return inited;
  }
  if (!v23)
  {
    uint64_t v74 = malloc_type_malloc(0x10uLL, 0x1020040D5A9D86FuLL);
    *(void *)(a2 + 304) = v74;
    if (!v74) {
      goto LABEL_112;
    }
    uint64_t inited = krb5_get_all_client_addrs(a1, (uint64_t)v74);
    if (inited) {
      goto LABEL_113;
    }
    long long v75 = (void *)(a2 + 304);
    long long v76 = *(_DWORD **)(a2 + 304);
    if (*v76) {
      goto LABEL_118;
    }
    free(v76);
LABEL_117:
    *long long v75 = 0;
    goto LABEL_118;
  }
  if (!*(_DWORD *)v23)
  {
    long long v75 = (void *)(a2 + 304);
    goto LABEL_117;
  }
  uint64_t v33 = (krb5_address ***)malloc_type_malloc(0x10uLL, 0x1020040D5A9D86FuLL);
  *(void *)(a2 + 304) = v33;
  if (!v33) {
    goto LABEL_112;
  }
  uint64_t inited = krb5_copy_addresses(a1, v23, v33);
  if (inited) {
    goto LABEL_113;
  }
LABEL_118:
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 320) = 0;
  int v77 = *(_DWORD *)(a2 + 940);
  if ((v77 & 0x140) == 0) {
    *(_DWORD *)(a2 + 940) = v77 | 0x80;
  }
  *(void *)(a2 + 1048) = heim_array_create();
  a7 = v19;
  a4 = v113;
  if (*(void *)(a2 + 360) || *(void *)(a2 + 352) || *(void *)(a2 + 904))
  {
    if (*(void *)(a2 + 376))
    {
LABEL_126:
      sub_213C93168((uint64_t)a1, a2, 17, v78, v79, v80, v81, v82);
      sub_213C93168((uint64_t)a1, a2, 15, v93, v94, v95, v96, v97);
      goto LABEL_127;
    }
    sub_213C93168((uint64_t)a1, a2, 250, v78, v79, v80, v81, v82);
    sub_213C93168((uint64_t)a1, a2, 138, v83, v84, v85, v86, v87);
    sub_213C93168((uint64_t)a1, a2, 2, v88, v89, v90, v91, v92);
  }
  if (*(void *)(a2 + 376)) {
    goto LABEL_126;
  }
LABEL_127:
  int v15 = 1;
LABEL_5:
  int v16 = *(_DWORD *)(a2 + 328);
  if (v16 >= 11)
  {
    uint64_t inited = 2529639135;
    uint64_t v111 = *(unsigned int *)(a2 + 328);
    uint64_t v18 = "Looping %d times while getting initial credentials";
LABEL_7:
    krb5_set_error_message(a1, inited, v18, v111);
    return inited;
  }
  int v34 = v16 + 1;
  *(_DWORD *)(a2 + 328) = v34;
  sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: loop %d", v34);
  if (a3 && *(void *)a3)
  {
    memset(v118, 0, sizeof(v118));
    memset(v117, 0, sizeof(v117));
    sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: processing input");
    if (sub_213CBB828(*(void *)(a3 + 8), *(void *)a3, (uint64_t)v117, (uint64_t)&v121))
    {
      v114 = a4;
      sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: got an KRB-ERROR from KDC");
      sub_213CBBC4C(a2 + 504);
      uint64_t v40 = krb5_rd_error(a1, (const krb5_data *)a3, (krb5_error **)(a2 + 504));
      if (v40)
      {
        uint64_t inited = v40;
        if (*(void *)a3)
        {
          if (**(unsigned char **)(a3 + 8) == 4) {
            uint64_t inited = 2529639131;
          }
          else {
            uint64_t inited = v40;
          }
        }
        size_t v41 = "krb5_get_init_creds: failed to read error";
        uint64_t v42 = (uint64_t)a1;
        int v43 = 5;
        goto LABEL_39;
      }
      long long v55 = (_DWORD *)(a2 + 488);
      sub_213CBB54C(a2 + 488);
      *(void *)(a2 + 488) = 0;
      *(void *)(a2 + 496) = 0;
      size_t v56 = *(uint64_t **)(a2 + 600);
      if (v56)
      {
        krb5_error_code v57 = sub_213CBB52C(v56[1], *v56, a2 + 488, 0);
        if (v57) {
          sub_213C9C050((uint64_t *)a1, 5, v57, "Failed to decode METHOD-DATA");
        }
      }
      uint64_t inited = sub_213CB7290(a1, a2 + 936, a2 + 488, a2 + 504);
      if (inited) {
        return inited;
      }
      uint64_t inited = krb5_error_from_rd_error(a1, a2 + 504, (uint64_t *)(a2 + 8));
      if (_krb5_have_debug((BOOL)a1))
      {
        error_message = krb5_get_error_message(a1, inited);
        sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: KRB-ERROR %d/%s", inited, error_message);
        krb5_free_error_message(a1, error_message);
      }
      if ((int)inited <= -1765328360)
      {
        if (inited != -1765328370)
        {
          if (inited == -1765328361)
          {
            if ((*(unsigned char *)(a2 + 444) & 1) == 0)
            {
              size_t v67 = *(void (**)(_krb5_context *, void, void, const char *, void, void))(a2 + 904);
              if (v67)
              {
                *(unsigned char *)(a2 + 444) |= 1u;
                v67(a1, *(void *)(a2 + 912), 0, "Password has expired", 0, 0);
                krb5_const_principal v68 = *(const char **)(a2 + 176);
                if (v68 && !strcmp(v68, "kadmin/changepw")) {
                  return 2529638935;
                }
                gettimeofday(&v124, 0);
                sub_213CD4680((uint64_t)&v124, (uint64_t)&v125);
                sub_213CD4620(a2 + 1080, (uint64_t)&v124);
                uint64_t inited = sub_213C920F0(a1, *(krb5_principal_data **)(a2 + 8), *(char **)(a2 + 336), (char *)__s1, *(krb5_error_code (__cdecl **)(krb5_context, void *, const char *, const char *, int, krb5_prompt[]))(a2 + 904), *(void **)(a2 + 912), 0);
                if (inited) {
                  return inited;
                }
                gettimeofday(&v125, 0);
                krb5_init_creds_set_password(a1, a2, (uint64_t)__s1);
LABEL_133:
                uint64_t v69 = *(void *)(a2 + 1040);
                if (!v69) {
                  goto LABEL_136;
                }
                uint64_t v70 = *(void (**)(_krb5_context *, uint64_t, uint64_t))(*(void *)(v69 + 32) + 48);
                if (!v70) {
                  goto LABEL_136;
                }
LABEL_135:
                v70(a1, a2, v69 + 48);
LABEL_136:
                int v15 = 1;
                goto LABEL_137;
              }
            }
          }
          else if (inited == -1765328360)
          {
            if ((*(unsigned char *)(a2 + 444) & 2) != 0)
            {
              if (!*v55)
              {
                sub_213C9C004((uint64_t)a1, 10, "Disable allow_enc_pa_rep and trying again");
                *(unsigned char *)(a2 + 444) &= ~2u;
                goto LABEL_133;
              }
              uint64_t inited = 2529638936;
              size_t v41 = "Server send PA data with KRB-ERROR, so not a pre 1.7 MIT KDC and wont retry w/o ENC-PA-REQ";
            }
            else
            {
              int v63 = *(_DWORD *)(a2 + 940);
              if ((v63 & 0x80) != 0)
              {
                uint64_t inited = 2529638936;
                size_t v41 = "FAST disabled and got preauth failed";
              }
              else
              {
                if ((v63 & 0x200) != 0)
                {
                  sub_213C9C004((uint64_t)a1, 10, "preauth failed with Optimistic FAST, trying w/o FAST");
                  *(_DWORD *)(a2 + 940) = *(_DWORD *)(a2 + 940) & 0xFFFFFD7F | 0x80;
                  goto LABEL_133;
                }
                uint64_t inited = 2529638936;
                size_t v41 = "Preauth failed";
              }
            }
            uint64_t v42 = (uint64_t)a1;
            int v43 = 10;
LABEL_39:
            sub_213C9C004(v42, v43, v41, v111, v112);
            return inited;
          }
          goto LABEL_89;
        }
        goto LABEL_72;
      }
      if ((int)inited <= -1765328317)
      {
        if (inited != -1765328359)
        {
          if (inited == -1765328347 && !*((_DWORD *)a1 + 27))
          {
            krb5_set_real_time(a1, *(void *)(a2 + 528), -1);
            int v59 = *((_DWORD *)a1 + 27);
            sub_213C9C004((uint64_t)a1, 10, "init_creds: err skew updateing kdc offset to %d", v59);
            if (!v59) {
              return 2529638949;
            }
            goto LABEL_133;
          }
          goto LABEL_89;
        }
LABEL_72:
        if (!*v55)
        {
          uint64_t v18 = "Preauth required but no preauth options send by KDC";
          goto LABEL_7;
        }
        goto LABEL_137;
      }
      if (inited != -1765328316)
      {
        if (inited == -1765328293) {
          goto LABEL_72;
        }
LABEL_89:
        if ((*(unsigned char *)(a2 + 941) & 2) == 0) {
          return inited;
        }
        sub_213C9C004((uint64_t)a1, 10, "Some other error %d failed with Optimistic FAST, trying w/o FAST", inited);
        *(_DWORD *)(a2 + 940) = *(_DWORD *)(a2 + 940) & 0xFFFFFD7F | 0x80;
        uint64_t v69 = *(void *)(a2 + 1040);
        if (v69)
        {
          uint64_t v70 = *(void (**)(_krb5_context *, uint64_t, uint64_t))(*(void *)(v69 + 32) + 48);
          if (!v70) {
            goto LABEL_136;
          }
          goto LABEL_135;
        }
LABEL_106:
        int v15 = 1;
LABEL_137:
        a4 = v114;
        goto LABEL_138;
      }
      if ((*(unsigned char *)(a2 + 1) & 0x80) == 0) {
        goto LABEL_89;
      }
      *(void *)&__s1[0].krb5_magic magic = 0;
      long long v71 = *(void **)(a2 + 544);
      if (!v71)
      {
        uint64_t inited = 2529638980;
        uint64_t v18 = "Got a client referral, not but no realm";
        goto LABEL_7;
      }
      *(void *)&__s1[0].krb5_magic magic = *v71;
      sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: referral to realm %s", *(const char **)&__s1[0].magic);
      if (!krb5_principal_is_krbtgt((uint64_t)a1, *(void *)(a2 + 16)))
      {
LABEL_99:
        free(*(void **)(a2 + 240));
        uint64_t inited = sub_213CBAF94();
        if (inited) {
          return inited;
        }
        uint64_t inited = krb5_principal_set_realm(a1, *(void *)(a2 + 8), **(char ***)(a2 + 544));
        if (inited) {
          return inited;
        }
        if (!krb5_unparse_name(a1, *(krb5_const_principal *)(a2 + 8), (char **)__s1))
        {
          sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: got referal to %s", *(const char **)&__s1[0].magic);
          krb5_xfree(*(void **)&__s1[0].magic);
        }
        uint64_t v72 = *(void *)(a2 + 1040);
        if (v72)
        {
          long long v73 = *(void (**)(_krb5_context *, uint64_t, uint64_t))(*(void *)(v72 + 32) + 48);
          if (v73) {
            v73(a1, a2, v72 + 48);
          }
        }
        goto LABEL_106;
      }
      free(*(void **)(*(void *)(*(void *)(a2 + 16) + 16) + 8));
      *(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8) = strdup(*(const char **)&__s1[0].magic);
      if (*(void *)(*(void *)(*(void *)(a2 + 16) + 16) + 8))
      {
        sub_213CBAFF8(*(void *)(a2 + 248));
        uint64_t inited = _krb5_principal2principalname();
        if (inited) {
          return inited;
        }
        goto LABEL_99;
      }
      return 12;
    }
    uint64_t v44 = sub_213CBB36C((uint64_t)v118);
    v116[0] = v44;
    uint64_t v45 = malloc_type_malloc(v44, 0xBBC010A0uLL);
    v116[1] = v45;
    if (!v45) {
      return 12;
    }
    int v46 = v45;
    uint64_t v47 = sub_213CBB34C((uint64_t)v45 + v44 - 1, v44, (uint64_t)v118, (uint64_t)&v121);
    if (v47)
    {
      uint64_t inited = v47;
      free(v46);
      return inited;
    }
    if (v44 != v121) {
      heim_abort("ASN.1 internal error:data.length == size", v48, v49, v50, v51, v52, v53, v54, v111);
    }
    uint64_t inited = sub_213CB7500(a1, *(_DWORD *)(a2 + 184), (uint64_t)v116, a2 + 936, (uint64_t)v117);
    krb5_data_free(v116);
    if (inited) {
      return inited;
    }
    if ((*(_DWORD *)a2 & 0x8000) != 0) {
      char v60 = 30;
    }
    else {
      char v60 = 24;
    }
    int v61 = *(_DWORD *)(a2 + 384);
    uint64_t v62 = sub_213C91D54((uint64_t *)a1, a2, (uint64_t *)(a2 + 8), a2 + 208, (uint64_t)v117, a5);
    if (v62)
    {
LABEL_62:
      uint64_t inited = v62;
      sub_213CBB848((uint64_t)v117);
      return inited;
    }
    if (*(void *)(a2 + 1016))
    {
      memset(__s1, 0, 24);
      sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: FAST strengthen_key");
      uint64_t v62 = _krb5_fast_cf2(a1, *(const krb5_keyblock **)(a2 + 1016), "strengthenkey", *(const krb5_keyblock **)(a2 + 944), "replykey", __s1, 0);
      if (v62) {
        goto LABEL_62;
      }
      *(unsigned char *)(a2 + 444) |= 4u;
      krb5_free_keyblock_contents(a1, *(krb5_keyblock **)(a2 + 944));
      uint64_t v64 = *(void *)(a2 + 944);
      long long v65 = *(_OWORD *)&__s1[0].magic;
      *(void *)(v64 + 16) = __s1[0].contents;
      *(_OWORD *)uint64_t v64 = v65;
    }
    sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: extracting ticket");
    uint64_t inited = sub_213CB1364((uint64_t)a1, (uint64_t)v117, a2 + 8, *(const krb5_keyblock **)(a2 + 944), 3, 0, *(_DWORD *)(a2 + 184), v60 & 0xFEu | ((v61 & 4) != 0), a2 + 192, 0, 0);
    if (!inited)
    {
      uint64_t inited = sub_213CBB888();
      if (!inited) {
        uint64_t inited = sub_213C91E90(a1, a2, (uint64_t)v117, (_DWORD *)(a2 + 24));
      }
    }
    sub_213C8DDD8();
    uint64_t v66 = *(krb5_keyblock **)(a2 + 944);
    *(_DWORD *)(a2 + 1024) = v66->magic;
    if ((*(unsigned char *)(a2 + 444) & 4) != 0) {
      *(void *)(a2 + 1032) = v66;
    }
    else {
      krb5_free_keyblock(a1, v66);
    }
    *(void *)(a2 + 944) = 0;
    *(_DWORD *)(a2 + 384) |= 1u;
    *a7 = 0;
    sub_213CBB848((uint64_t)v117);
    sub_213CBB8BC((uint64_t)&v118[6] + 8);
    gettimeofday(&v124, 0);
    sub_213CD4680((uint64_t)&v124, (uint64_t)&v125);
    sub_213CD4620(a2 + 1080, (uint64_t)&v124);
    sub_213C9C004((uint64_t)a1, 1, "krb5_get_init_creds: wc: %lld.%06d");
    return inited;
  }
LABEL_138:
  uint64_t v115 = a4;
  uint64_t v98 = *(void *)(a2 + 216);
  if (v98)
  {
    sub_213CBB54C(v98);
    free(*(void **)(a2 + 216));
    *(void *)(a2 + 216) = 0;
  }
  uint64_t inited = sub_213CB6AC0(a1, a2 + 936, *(const char **)(*(void *)(a2 + 8) + 24), v35, v36, v37, v38, v39);
  if (!inited)
  {
    *(_DWORD *)(a2 + 280) = *(_DWORD *)(a2 + 184);
    v100 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    *(void *)(a2 + 216) = v100;
    if (!v100)
    {
      uint64_t inited = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory", v111);
      return inited;
    }
    *(_DWORD *)v100 = 0;
    v100[1] = 0;
    sub_213C93280((uint64_t)a1, (unsigned int *)(a2 + 488));
    if (!v15)
    {
      uint64_t v101 = sub_213C93370((uint64_t *)a1, a2, a2 + 208, 0, 0, a2 + 488, *(void *)(a2 + 216));
      if (v101 == -1980176628)
      {
        sub_213C9C004((uint64_t)a1, 0, "pamech need more stepping");
      }
      else
      {
        uint64_t inited = v101;
        if (v101) {
          return inited;
        }
        sub_213C9C004((uint64_t)a1, 0, "pamech done step");
      }
    }
    uint64_t v102 = 0;
    v103 = *(unsigned int **)(a2 + 216);
    do
    {
      if ((dword_26AA94BF8[v102 + 4] & 3) != 0)
      {
        uint64_t v104 = *(void (**)(_krb5_context *, uint64_t, void, void, void, void, void, uint64_t, unsigned int *))&dword_26AA94BF8[v102 + 14];
        if (v104) {
          v104(a1, a2, 0, 0, 0, 0, 0, a2 + 488, v103);
        }
        else {
          krb5_padata_add(a1, v103, dword_26AA94BF8[v102], 0, 0);
        }
      }
      v102 += 18;
    }
    while (v102 != 342);
    uint64_t v105 = *(_DWORD **)(a2 + 216);
    if (!*v105)
    {
      free(v105);
      *(void *)(a2 + 216) = 0;
    }
    uint64_t inited = sub_213CBB604();
    if (!inited)
    {
      uint64_t inited = sub_213CB6DD0(a1, a2 + 936, 0, (uint64_t *)v119);
      krb5_data_free(v123);
      if (inited)
      {
LABEL_159:
        sub_213CBB5F4((uint64_t)v119);
        return inited;
      }
      uint64_t v106 = (uint64_t *)(a2 + 192);
      krb5_data_free((void *)(a2 + 192));
      size_t v107 = sub_213CBB5E4((uint64_t)v119);
      *(void *)(a2 + 192) = v107;
      uint64_t v108 = malloc_type_malloc(v107, 0x369CB5B3uLL);
      *(void *)(a2 + 200) = v108;
      if (!v108)
      {
        uint64_t inited = 12;
        goto LABEL_159;
      }
      uint64_t v109 = sub_213CBB5C4((uint64_t)v108 + *v106 - 1, *v106, (uint64_t)v119, (uint64_t)&v122);
      if (v109)
      {
        uint64_t inited = v109;
        free(*(void **)(a2 + 200));
        *(void *)(a2 + 200) = 0;
        goto LABEL_159;
      }
      sub_213CBB5F4((uint64_t)v119);
      if (v122 != *v106) {
        krb5_abortx(a1, "internal error in ASN.1 encoder");
      }
      uint64_t v110 = *(void *)(a2 + 200);
      *uint64_t v115 = v122;
      v115[1] = v110;
      *a7 = 1;
      if (a6) {
        *a6 = *(void *)(*(void *)(a2 + 8) + 24);
      }
      gettimeofday(&v124, 0);
      sub_213CD4680((uint64_t)&v124, (uint64_t)&v125);
      sub_213CD4620(a2 + 1080, (uint64_t)&v124);
      return 0;
    }
  }
  return inited;
}

uint64_t sub_213C91D54(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v12 = *(unsigned int **)(a5 + 8);
  if (v12)
  {
    sub_213C93280((uint64_t)a1, v12);
    uint64_t v13 = *(void *)(a5 + 8);
    int v14 = *(_DWORD *)(a5 + 120);
    if (v13)
    {
      LODWORD(v16[0]) = *(_DWORD *)(a5 + 120);
      if (sub_213C92E08((uint64_t)a1, *a3, a4, (uint64_t)v16, v13)) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v14 = *(_DWORD *)(a5 + 120);
  }
  if (*(_DWORD *)(a2 + 448)
    || (*(_DWORD *)(a2 + 448) = v14,
        *(void *)(a2 + 480) = 0,
        uint64_t result = krb5_get_pw_salt((uint64_t)a1, *a3, a2 + 456),
        !result))
  {
LABEL_8:
    uint64_t result = sub_213C93370(a1, a2, a4, a5, a6, *(void *)(a5 + 8), 0);
    if (result)
    {
      if (result == -1980176628)
      {
        sub_213C9C004((uint64_t)a1, 0, "In final stretch and pa require more stepping ?");
        return 2314790668;
      }
    }
    else
    {
      sub_213C9C004((uint64_t)a1, 0, "final pamech done step");
      sub_213C92EE0((_krb5_context *)a1, (uint64_t)v16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_213C91E90(_krb5_context *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v32 = 0;
  uint64_t v33 = 0;
  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  uint64_t v22 = 0;
  int v21 = 0;
  krb5_keyblock_zero((uint64_t)&v30);
  krb5_keyblock_zero((uint64_t)&v31);
  uint64_t v8 = *(void *)(a3 + 8);
  if (v8 && (padata = krb5_find_padata(*(void *)(v8 + 8), *(_DWORD *)v8, 147, &v21)) != 0)
  {
    int v16 = *(const krb5_keyblock **)(a2 + 944);
    if (!v16) {
      heim_abort("must have a reply key at this stage:ctx->fast_state.reply_key != NULL", 0, v10, v11, v12, v13, v14, v15, v20);
    }
    uint64_t v17 = padata;
    uint64_t v18 = krb5_crypto_init(a1, v16, 0, &v33);
    if (!v18)
    {
      uint64_t v18 = sub_213CBB258(*((void *)v17 + 2), *((void *)v17 + 1), (uint64_t)v29, (uint64_t)&v22);
      if (!v18)
      {
        uint64_t v18 = krb5_decrypt_EncryptedData(a1, (uint64_t)v33, 44, (uint64_t)v29, &v27);
        sub_213CBB2A8((uint64_t)v29);
        if (!v18)
        {
          uint64_t v18 = decode_EncryptionKey(v28, v27, (uint64_t)&v31, (uint64_t)&v22);
          if (!v18)
          {
            uint64_t v18 = krb5_crypto_init(a1, &v31, 0, &v32);
            if (!v18)
            {
              uint64_t v25 = 6;
              uint64_t v26 = "PKINIT";
              uint64_t v23 = 11;
              int v24 = "KEYEXCHANGE";
              uint64_t v18 = krb5_crypto_fx_cf2(a1, (uint64_t *)v32, (uint64_t *)v33, (uint64_t)&v25, (uint64_t)&v23, (char *)v31.magic, &v30);
              if (!v18)
              {
                if (v30.magic == *a4 && !krb5_data_ct_cmp((uint64_t)&v30.length, (uint64_t)(a4 + 2)))
                {
                  uint64_t v18 = 0;
                  *(_DWORD *)(a2 + 384) |= 0x20u;
                }
                else
                {
                  uint64_t v18 = 2529639059;
                  krb5_set_error_message(a1, -1765328237, "PKINIT-KX session key doesn't match");
                }
              }
            }
          }
        }
      }
    }
    krb5_free_keyblock_contents(a1, &v31);
    krb5_free_keyblock_contents(a1, &v30);
    if (v33) {
      krb5_crypto_destroy(a1, (uint64_t)v33);
    }
    if (v32) {
      krb5_crypto_destroy(a1, (uint64_t)v32);
    }
  }
  else if ((*(unsigned char *)(a2 + 2) & 1) != 0 && *(void *)(a2 + 376))
  {
    uint64_t v18 = 2529639059;
    krb5_set_error_message(a1, -1765328237, "Requested anonymous with PKINIT and KDC didn't set PKINIT_KX");
  }
  else
  {
    return 0;
  }
  return v18;
}

uint64_t sub_213C920F0(_krb5_context *a1, krb5_principal_data *a2, char *a3, char *a4, krb5_error_code (__cdecl *a5)(krb5_context, void *, const char *, const char *, int, krb5_prompt[]), void *a6, uint64_t a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int result_code = 0;
  *(void *)&result_code_string.krb5_magic magic = 0;
  result_code_string.data = 0;
  *(void *)&result_string.krb5_magic magic = 0;
  result_string.data = 0;
  opt = 0;
  char v20 = 0;
  memset(&creds, 0, 144);
  uint64_t init_creds_opt_alloc = krb5_get_init_creds_opt_alloc(a1, &opt);
  if (!init_creds_opt_alloc)
  {
    krb5_get_init_creds_opt_set_tkt_life(opt, 60);
    krb5_get_init_creds_opt_set_forwardable(opt, 0);
    krb5_get_init_creds_opt_set_proxiable(opt, 0);
    if (a7 && (*(unsigned char *)a7 & 0x40) != 0) {
      krb5_get_init_creds_opt_set_preauth_list(opt, *(krb5_preauthtype **)(a7 + 64), *(_DWORD *)(a7 + 72));
    }
    krb5_data_zero(&result_code_string);
    krb5_data_zero(&result_string);
    uint64_t init_creds_opt_alloc = krb5_get_init_creds_password(a1, &creds, a2, a3, a5, a6, 0, "kadmin/changepw", opt);
    krb5_get_init_creds_opt_free(a1, opt);
    if (init_creds_opt_alloc) {
      goto LABEL_24;
    }
    while (1)
    {
      v25[0] = 1024;
      v25[1] = __s1;
      int v30 = 1;
      uint64_t v29 = "New password: ";
      krb5_keyblock v31 = v25;
      int v32 = 2;
      v26[0] = 1024;
      v26[1] = __s2;
      int v34 = 1;
      uint64_t v33 = "Repeat new password: ";
      uint64_t v35 = v26;
      int v36 = 3;
      if (((unsigned int (*)(_krb5_context *, void *, void, const char *, uint64_t, const char **))a5)(a1, a6, 0, "Changing password", 2, &v29))
      {
        uint64_t init_creds_opt_alloc = 2529639044;
        goto LABEL_24;
      }
      if (!strcmp(__s1, __s2)) {
        break;
      }
      bzero(__s1, 0x400uLL);
      bzero(__s2, 0x400uLL);
    }
    uint64_t init_creds_opt_alloc = krb5_set_password(a1, &creds, __s1, 0, &result_code, &result_code_string, &result_string);
    if (init_creds_opt_alloc) {
      goto LABEL_24;
    }
    if (result_code)
    {
      data = result_code_string.data;
      int v16 = "";
      if (!*(void *)&result_code_string.magic) {
        data = "";
      }
      if (*(void *)&result_string.magic) {
        int v16 = result_string.data;
      }
      if (asprintf(&v20, "Failed: %.*s %.*s: %d\n", result_code_string.magic, data, result_string.magic, v16, result_code) < 0)
      {
        uint64_t init_creds_opt_alloc = 12;
LABEL_24:
        bzero(__s1, 0x400uLL);
        bzero(__s2, 0x400uLL);
        krb5_data_free(&result_string);
        krb5_data_free(&result_code_string);
        krb5_free_cred_contents(a1, &creds);
        return init_creds_opt_alloc;
      }
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = strdup("Success");
      char v20 = v17;
    }
    ((void (*)(_krb5_context *, void *, void, char *, void, void))a5)(a1, a6, 0, v17, 0, 0);
    if (result_code)
    {
      uint64_t init_creds_opt_alloc = 25;
      krb5_set_error_message(a1, 25, "failed changing password: %s", v20);
    }
    else
    {
      strlcpy(a4, __s1, 0x400uLL);
      uint64_t init_creds_opt_alloc = 0;
    }
    free(v20);
    goto LABEL_24;
  }
  return init_creds_opt_alloc;
}

uint64_t krb5_init_creds_get_creds(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return krb5_copy_creds_contents(a1, a2 + 8, a3);
}

uint64_t krb5_init_creds_get_as_reply_key(_krb5_context *a1, uint64_t a2, krb5_keyblock *a3)
{
  uint64_t v3 = *(const krb5_keyblock **)(a2 + 1032);
  if (v3) {
    return krb5_copy_keyblock_contents(a1, v3, a3);
  }
  else {
    return 2529638937;
  }
}

uint64_t _krb5_init_creds_get_cred_endtime(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 64);
}

uint64_t _krb5_init_creds_get_cred_client(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t krb5_init_creds_set_nonce(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 184) = a3;
  *(_DWORD *)(a2 + 188) = a3;
  return 0;
}

uint64_t krb5_init_creds_store_config(_krb5_context *a1, uint64_t a2, _krb5_ccache *a3)
{
  uint64_t v6 = *(char **)(a2 + 392);
  if (!v6
    || (*(void *)&v9.krb5_magic magic = strlen(*(const char **)(a2 + 392)),
        v9.data = v6,
        uint64_t result = krb5_cc_set_config(a1, a3, 0, "lkdc-hostname", &v9),
        !result))
  {
    uint64_t v8 = *(char **)(a2 + 400);
    if (!v8) {
      return 0;
    }
    *(void *)&v9.krb5_magic magic = strlen(v8);
    v9.data = v8;
    uint64_t result = krb5_cc_set_config(a1, a3, 0, "sitename", &v9);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t krb5_init_creds_store(krb5_context a1, uint64_t a2, krb5_ccache cache)
{
  uint64_t v6 = (krb5_creds *)(a2 + 8);
  uint64_t v5 = *(krb5_principal_data **)(a2 + 8);
  if (v5)
  {
    uint64_t v8 = krb5_cc_initialize(a1, cache, v5);
    if (!v8)
    {
      uint64_t v8 = krb5_cc_store_cred(a1, cache, v6);
      if (!v8)
      {
        if ((*(unsigned char *)(a2 + 145) & 0x80) == 0) {
          return 0;
        }
        long long v10 = xmmword_2641E3FC8;
        uint64_t v8 = krb5_cc_set_config(a1, cache, *(krb5_const_principal *)(a2 + 16), "fast_avail", (krb5_data *)&v10);
        if (!v8) {
          return 0;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 2529638937;
    krb5_set_error_message(a1, -1765328359, "init creds not completed yet");
  }
  return v8;
}

void krb5_init_creds_free(_krb5_context *a1, void *a2)
{
  sub_213C903F4(a1, (uint64_t)a2);

  free(a2);
}

uint64_t krb5_init_creds_get(_krb5_context *a1, uint64_t a2)
{
  v20[1] = 0;
  int v21 = 0;
  v20[0] = 0;
  v19[0] = 0;
  v19[1] = 0;
  krb5_data_zero(v20);
  krb5_data_zero(v19);
  uint64_t inited = krb5_sendto_ctx_alloc((uint64_t)a1, (uint64_t)&v21, v4, v5, v6, v7, v8, v9);
  if (!inited)
  {
    krb5_sendto_ctx_set_func((uint64_t)v21, (uint64_t)sub_213CAAB1C, 0);
    uint64_t v11 = *(char **)(a2 + 392);
    if (v11) {
      sub_213CAA8D4(a1, (uint64_t)v21, v11);
    }
    uint64_t v12 = *(char **)(a2 + 400);
    if (v12) {
      sub_213CAA92C(a1, (uint64_t)v21, v12);
    }
    if ((*(unsigned char *)(a2 + 444) & 8) != 0) {
      krb5_sendto_set_delegated_app((uint64_t)a1, (uint64_t)v21, (_OWORD *)(a2 + 408), *(_DWORD *)(a2 + 424), *(char **)(a2 + 432));
    }
    *(void *)&v16.tv_usec = 0;
    uint64_t v17 = 0;
    *(void *)&v15.tv_usec = 0;
    v16.tv_sec = 0;
    v15.tv_sec = 0;
    int v18 = 0;
    uint64_t inited = krb5_init_creds_step(a1, a2, (uint64_t)v20, v19, 0, &v17, &v18);
    krb5_data_free(v20);
    if (!inited)
    {
      while (1)
      {
        if ((v18 & 1) == 0)
        {
          uint64_t inited = 0;
          goto LABEL_9;
        }
        gettimeofday(&v16, 0);
        uint64_t v14 = krb5_sendto_context((uint64_t)a1, (uint64_t)v21, v19, v17, v20);
        if (v14) {
          break;
        }
        gettimeofday(&v15, 0);
        sub_213CD4680((uint64_t)&v15, (uint64_t)&v16);
        sub_213CD4620(a2 + 1080, (uint64_t)&v15);
        *(void *)&v16.tv_usec = 0;
        uint64_t v17 = 0;
        *(void *)&v15.tv_usec = 0;
        v16.tv_sec = 0;
        v15.tv_sec = 0;
        int v18 = 0;
        uint64_t inited = krb5_init_creds_step(a1, a2, (uint64_t)v20, v19, 0, &v17, &v18);
        krb5_data_free(v20);
        if (inited) {
          goto LABEL_9;
        }
      }
      uint64_t inited = v14;
    }
  }
LABEL_9:
  if (v21) {
    krb5_sendto_ctx_free((uint64_t)a1, v21);
  }
  return inited;
}

krb5_error_code krb5_get_init_creds_password(krb5_context context, krb5_creds *creds, krb5_principal client, char *password, krb5_prompter_fct prompter, void *data, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *k5_gic_options)
{
  uint64_t v10 = *(void *)&start_time;
  uint64_t v11 = (uint64_t)data;
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v44 = 0;
  krb5_error_code inited = krb5_init_creds_init(context, client, (uint64_t)prompter, (uint64_t)data, *(uint64_t *)&start_time, k5_gic_options, &v44);
  if (!inited)
  {
    uint64_t v38 = client;
    unint64_t __s1 = (unint64_t)password;
    uint64_t v37 = creds;
    krb5_error_code inited = -1765328361;
    char v18 = 1;
    while (1)
    {
      uint64_t v19 = v44;
      krb5_error_code v20 = krb5_init_creds_set_service(context, (uint64_t)v44, in_tkt_service);
      if (v20)
      {
LABEL_36:
        krb5_error_code inited = v20;
        goto LABEL_37;
      }
      if (!prompter) {
        break;
      }
      uint64_t v21 = __s1;
      if (!(__s1 | v19[42]))
      {
        long long v45 = 0u;
        long long v46 = 0u;
        uint64_t v42 = 0;
        int v43 = 0;
        uint64_t v40 = 0;
        size_t v41 = 0;
        krb5_unparse_name(context, v38, &v41);
        asprintf(&v40, "%s's Password: ", v41);
        free(v41);
        *(void *)&long long v45 = v40;
        int v43 = v47;
        uint64_t v42 = 1024;
        DWORD2(v45) = 1;
        *(void *)&long long v46 = &v42;
        DWORD2(v46) = 1;
        int v22 = ((uint64_t (*)(krb5_context, uint64_t, void, void, uint64_t, long long *))prompter)(context, v11, 0, 0, 1, &v45);
        free(v40);
        if (v22)
        {
          bzero(v47, 0x400uLL);
          krb5_clear_error_message(context);
          krb5_error_code inited = -1765328252;
          goto LABEL_37;
        }
        uint64_t v21 = (uint64_t)v43;
      }
      if (v21) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t __s1 = v21;
      uint64_t v23 = v11;
      uint64_t v24 = v10;
      uint64_t v25 = in_tkt_service;
      uint64_t ImpersonateBundle = HeimCredGetImpersonateBundle();
      if (ImpersonateBundle)
      {
        uint64_t v27 = (char *)ImpersonateBundle;
        MainBundle = CFBundleGetMainBundle();
        if (MainBundle)
        {
          CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
          CFStringRef v30 = CFStringCreateWithCString(0, v27, 0x8000100u);
          CFStringRef v31 = v30;
          if (v30 && Identifier)
          {
            if (CFEqual(Identifier, v30))
            {
              sub_213C9C004((uint64_t)context, 5, "Bundle identifiers match, not setting delegate");
              krb5_error_code inited = -1765328361;
            }
            else
            {
              long long v45 = 0uLL;
              uint64_t v32 = NEHelperCacheCopyAppUUIDMapping();
              krb5_error_code inited = -1765328361;
              if (v32)
              {
                xpc_object_t xarray = (xpc_object_t)v32;
                if (MEMORY[0x216695CE0]() == MEMORY[0x263EF86D8] && xpc_array_get_count(xarray)) {
                  long long v45 = *(_OWORD *)xpc_array_get_uuid(xarray, 0);
                }
                xpc_release(xarray);
              }
              krb5_init_creds_set_source_process((uint64_t)context, (uint64_t)v19, (unsigned __int8 *)&v45, 0, v27);
            }
LABEL_26:
            CFRelease(v31);
            goto LABEL_27;
          }
          krb5_error_code inited = -1765328361;
          if (v30) {
            goto LABEL_26;
          }
        }
      }
LABEL_27:
      krb5_error_code v20 = krb5_init_creds_get(context, v19);
      if (!v20)
      {
        krb5_process_last_request(context, (uint64_t)k5_gic_options, (uint64_t)v19);
        krb5_copy_creds_contents(context, (uint64_t)(v19 + 1), (uint64_t)v37);
        krb5_error_code inited = 0;
        if (v19) {
          goto LABEL_38;
        }
        return inited;
      }
      if (v20 == -1765328361 && (v18 & 1) != 0)
      {
        in_tkt_service = v25;
        if (v25)
        {
          int v33 = strcmp(v25, "kadmin/changepw");
          int v34 = (krb5_principal_data *)v38;
          if (!prompter) {
            goto LABEL_37;
          }
          uint64_t v10 = v24;
          if (!v33) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v10 = v24;
          int v34 = (krb5_principal_data *)v38;
          if (!prompter) {
            goto LABEL_37;
          }
        }
        uint64_t v11 = v23;
        krb5_error_code v20 = sub_213C920F0(context, v34, v19[42], &v45, prompter, v23, k5_gic_options);
        if (!v20)
        {
          sub_213C903F4(context, (uint64_t)v19);
          free(v19);
          krb5_error_code v20 = krb5_init_creds_init(context, v34, (uint64_t)prompter, v23, v10, k5_gic_options, &v44);
          char v18 = 0;
          if (!v20) {
            continue;
          }
        }
      }
      goto LABEL_36;
    }
    uint64_t v21 = __s1;
    if (!__s1) {
      goto LABEL_12;
    }
LABEL_11:
    krb5_error_code v20 = krb5_init_creds_set_password(context, (uint64_t)v19, v21);
    if (v20) {
      goto LABEL_36;
    }
    goto LABEL_12;
  }
LABEL_37:
  uint64_t v19 = v44;
  if (v44)
  {
LABEL_38:
    sub_213C903F4(context, (uint64_t)v19);
    free(v19);
  }
  return inited;
}

uint64_t krb5_get_init_creds_keyblock(_krb5_context *a1, _OWORD *a2, krb5_principal_data *a3, uint64_t a4, uint64_t a5, const char *a6, krb5_get_init_creds_opt *a7)
{
  timeval v15 = 0;
  *a2 = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[8] = 0u;
  uint64_t inited = krb5_init_creds_init(a1, a3, 0, 0, a5, a7, &v15);
  uint64_t v13 = v15;
  if (!inited)
  {
    uint64_t inited = krb5_init_creds_set_service(a1, (uint64_t)v15, a6);
    if (!inited)
    {
      v13[44] = a4;
      v13[45] = sub_213C90CE8;
      uint64_t inited = krb5_init_creds_get(a1, (uint64_t)v13);
      if (!inited)
      {
        krb5_process_last_request(a1, (uint64_t)a7, (uint64_t)v13);
        krb5_copy_creds_contents(a1, (uint64_t)(v13 + 1), (uint64_t)a2);
      }
      goto LABEL_4;
    }
  }
  if (v13)
  {
LABEL_4:
    sub_213C903F4(a1, (uint64_t)v13);
    free(v13);
  }
  return inited;
}

krb5_error_code krb5_get_init_creds_keytab(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_keytab arg_keytab, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *k5_gic_options)
{
  timeval v15 = 0;
  *(_OWORD *)&creds->krb5_magic magic = 0u;
  *(_OWORD *)&creds->int server = 0u;
  *(_OWORD *)&creds->keyblock.CFIndex length = 0u;
  creds->krb5_ticket_times times = 0u;
  *(_OWORD *)&creds->is_skey = 0u;
  creds->krb5_data ticket = 0u;
  creds->krb5_data second_ticket = 0u;
  *(_OWORD *)&creds->authdata = 0u;
  *(_OWORD *)&creds[1].uint64_t client = 0u;
  krb5_error_code inited = krb5_init_creds_init(context, client, 0, 0, *(uint64_t *)&start_time, k5_gic_options, &v15);
  uint64_t v13 = v15;
  if (!inited)
  {
    krb5_error_code inited = krb5_init_creds_set_service(context, (uint64_t)v15, in_tkt_service);
    if (!inited)
    {
      krb5_error_code inited = krb5_init_creds_set_keytab(context, (uint64_t)v13, arg_keytab);
      if (!inited)
      {
        krb5_error_code inited = krb5_init_creds_get(context, (uint64_t)v13);
        if (!inited)
        {
          krb5_process_last_request(context, (uint64_t)k5_gic_options, (uint64_t)v13);
          krb5_copy_creds_contents(context, (uint64_t)v13 + 8, (uint64_t)creds);
        }
      }
    }
  }
  if (v13)
  {
    sub_213C903F4(context, (uint64_t)v13);
    free(v13);
  }
  return inited;
}

_DWORD *sub_213C92E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    unint64_t v10 = 0;
    for (uint64_t i = &qword_26AA94C18; ; i += 9)
    {
      int v14 = 0;
      if (*i)
      {
        uint64_t result = krb5_find_padata(*(void *)(a5 + 8), *(_DWORD *)a5, *((_DWORD *)i - 8), &v14);
        if (result)
        {
          *(_DWORD *)(a4 + 8) = *((_DWORD *)i - 8);
          uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))*i)(a1, a2, a3, a4, result + 2);
        }
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
      }
      if (v10++ >= 0x12) {
        return result;
      }
    }
  }
  return 0;
}

double sub_213C92EE0(_krb5_context *a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  krb5_free_salt((uint64_t)a1, (uint64_t)&v6);
  uint64_t v4 = *(krb5_data **)(a2 + 32);
  if (v4) {
    krb5_free_data(a1, v4);
  }
  *(void *)(a2 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_213C92F40(uint64_t a1, _krb5_context *a2, int a3, int a4, const void *a5, size_t a6, const krb5_data *a7)
{
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 8) = a4;
  uint64_t v12 = (long long *)(a1 + 8);
  uint64_t v13 = malloc_type_malloc(a6 + 1, 0xE1C19B90uLL);
  *(void *)(a1 + 24) = v13;
  if (v13)
  {
    memcpy(v13, a5, a6);
    *(unsigned char *)(*(void *)(a1 + 24) + a6) = 0;
    *(void *)(a1 + 16) = a6;
    int v14 = (krb5_data **)(a1 + 32);
    if (a7)
    {
      a7 = (const krb5_data *)krb5_copy_data(a2, a7, v14);
      if (a7)
      {
        krb5_clear_error_message(a2);
        long long v16 = *v12;
        uint64_t v17 = *((void *)v12 + 2);
        krb5_free_salt((uint64_t)a2, (uint64_t)&v16);
      }
    }
    else
    {
      *int v14 = 0;
    }
  }
  else
  {
    krb5_clear_error_message(a2);
    return 12;
  }
  return (uint64_t)a7;
}

uint64_t sub_213C93020(_krb5_context *a1, char *a2, const char *a3, uint64_t a4, long long *a5, void **a6)
{
  long long v19 = 0uLL;
  if (_krb5_have_debug((BOOL)a1))
  {
    v17[0] = 0;
    uint64_t v12 = krb5_enctype_to_string((krb5_enctype)a1, a2, (size_t)v17);
    if (v12) {
      return v12;
    }
    sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: using default_s2k_func: %s (%d)", (const char *)v17[0], a2);
    free(v17[0]);
  }
  if (a3)
  {
    size_t v13 = strlen(a3);
    if (a5)
    {
LABEL_6:
      long long v19 = *a5;
      goto LABEL_9;
    }
  }
  else
  {
    size_t v13 = 0;
    if (a5) {
      goto LABEL_6;
    }
  }
  krb5_data_zero(&v19);
LABEL_9:
  int v14 = malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
  *a6 = v14;
  if (!v14) {
    return krb5_enomem(a1);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a4;
  uint64_t v18 = *(void *)(a4 + 16);
  uint64_t v15 = krb5_string_to_key_data_salt_opaque(a1, (uint64_t)a2, v13, (uint64_t)a3, (long long *)v17, v19, *((uint64_t *)&v19 + 1), (uint64_t)v14);
  if (v15)
  {
    free(*a6);
    *a6 = 0;
  }
  return v15;
}

void sub_213C93168(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = 0;
  uint64_t v11 = &unk_26AA94BB0;
  do
  {
    int v13 = v11[18];
    v11 += 18;
    int v12 = v13;
    if (v10 > 0x11) {
      break;
    }
    ++v10;
  }
  while (v12 != a3);
  if (v12 == a3)
  {
    uint64_t v14 = heim_uniq_alloc(*((void *)v11 + 3) + 55, (uint64_t)"heim-pa-mech-ctx", (uint64_t)sub_213C93268, a4, a5, a6, a7, a8);
    if (v14)
    {
      uint64_t v15 = (const void *)v14;
      *(void *)(v14 + 32) = v11;
      long long v16 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((void *)v11 + 5);
      if (!v16 || !v16(a1, a2, v14 + 48))
      {
        sub_213C9C004(a1, 5, "Adding PA mech: %s", *((const char **)v11 + 1));
        heim_array_append_value(*(__CFArray **)(a2 + 1048), v15);
      }
      heim_release(v15);
    }
  }
}

uint64_t sub_213C93268(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(result + 32) + 64);
  if (v1) {
    return v1(result + 48);
  }
  return result;
}

uint64_t sub_213C93280(uint64_t a1, unsigned int *a2)
{
  uint64_t result = _krb5_have_debug(a1);
  if (result)
  {
    uint64_t result = sub_213C9C004(a1, 5, "KDC sent %d patypes", *a2);
    if (*a2)
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v6 = 0;
        while (dword_26AA94BF8[v6] != *(_DWORD *)(*((void *)a2 + 1) + 24 * v5))
        {
          v6 += 18;
          if (v6 == 342)
          {
            uint64_t v7 = "unknown";
            goto LABEL_9;
          }
        }
        uint64_t v7 = *(const char **)&dword_26AA94BF8[v6 + 2];
LABEL_9:
        uint64_t result = sub_213C9C004(a1, 5, "KDC sent PA-DATA type: %d (%s)", *(_DWORD *)(*((void *)a2 + 1) + 24 * v5++), v7);
      }
      while (v5 < *a2);
    }
  }
  return result;
}

uint64_t sub_213C93370(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a6;
  padata = 0;
  int v32 = 0;
  uint64_t v14 = "Stepping pa-mech: %s";
  uint64_t v15 = "PA type %s returned %d";
  for (BOOL i = *(void *)(a2 + 1040) == 0; ; BOOL i = 1)
  {
    do
    {
      if (i)
      {
        if (!heim_array_get_length(*(CFArrayRef *)(a2 + 1048)))
        {
          sub_213C9C004((uint64_t)a1, 0, "no more available_pa_mechs to try");
          return 2314790670;
        }
        *(void *)(a2 + 1040) = heim_array_copy_value(*(const __CFArray **)(a2 + 1048), 0);
        heim_array_delete_value(*(CFMutableArrayRef *)(a2 + 1048), 0);
      }
      uint64_t v17 = *(void *)(*(void *)(a2 + 1040) + 32);
      int v18 = *(_DWORD *)(v17 + 16);
      if (*(void *)(a2 + 984))
      {
        if ((v18 & 4) == 0)
        {
          sub_213C9C004((uint64_t)a1, 0, "pa-mech %s dropped under FAST (not supported)");
LABEL_10:
          heim_release(*(CFTypeRef *)(a2 + 1040));
          uint64_t v19 = 0;
          *(void *)(a2 + 1040) = 0;
          goto LABEL_15;
        }
      }
      else if ((v18 & 8) == 0)
      {
        sub_213C9C004((uint64_t)a1, 0, "dropped pa-mech %s since not running under FAST");
        goto LABEL_10;
      }
      sub_213C9C004((uint64_t)a1, 0, "pa-mech trying: %s, searching for %d", *(const char **)(v17 + 8), *(_DWORD *)v17);
      int v32 = 0;
      if (v8) {
        padata = krb5_find_padata(*(void *)(v8 + 8), *(_DWORD *)v8, **(_DWORD **)(*(void *)(a2 + 1040) + 32), &v32);
      }
      else {
        padata = 0;
      }
      uint64_t v19 = *(void *)(a2 + 1040);
LABEL_15:
      BOOL i = 1;
    }
    while (!v19);
    sub_213C9C004((uint64_t)a1, 5, v14, *(void *)(*(void *)(v19 + 32) + 8));
    uint64_t v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 1040) + 32) + 56))(a1, a2, *(void *)(a2 + 1040) + 48, padata, a3, a4, a5, v8, a7);
    sub_213C9C050(a1, 10, v20, v15, *(void *)(*(void *)(*(void *)(a2 + 1040) + 32) + 8), v20);
    if (!v20)
    {
      uint64_t v21 = v15;
      uint64_t v22 = a3;
      uint64_t v23 = a5;
      uint64_t v24 = a7;
      uint64_t v25 = v14;
      uint64_t v26 = *(void *)(a2 + 1040);
      uint64_t v27 = *(void **)(v26 + 40);
      if (v27)
      {
        sub_213C9C004((uint64_t)a1, 5, "Next PA type in set is: %s", *(const char **)(v27[4] + 8));
        uint64_t v20 = 2314790668;
      }
      else
      {
        uint64_t v28 = *(const char **)(*(void *)(v26 + 32) + 8);
        if (a4)
        {
          uint64_t v20 = 0;
          *(void *)(a2 + 1056) = v28;
        }
        else
        {
          sub_213C9C004((uint64_t)a1, 5, "PA %s done, but no ticket in sight!!!", v28);
          uint64_t v20 = 2314790669;
        }
      }
      heim_retain(v27);
      heim_release(*(CFTypeRef *)(a2 + 1040));
      *(void *)(a2 + 1040) = v27;
      uint64_t v14 = v25;
      a7 = v24;
      a5 = v23;
      a3 = v22;
      uint64_t v15 = v21;
      uint64_t v8 = a6;
    }
    if (v20 != -1980176627) {
      break;
    }
    sub_213C9C004((uint64_t)a1, 5, "Dropping PA type %s", *(const char **)(*(void *)(*(void *)(a2 + 1040) + 32) + 8));
    heim_release(*(CFTypeRef *)(a2 + 1040));
    *(void *)(a2 + 1040) = 0;
  }
  if (v20 == -1980176628)
  {
    sub_213C9C004((uint64_t)a1, 5, "Continue needed for %s", *(const char **)(*(void *)(*(void *)(a2 + 1040) + 32) + 8));
    return 2314790668;
  }
  else
  {
    if (v20)
    {
      sub_213C9C004((uint64_t)a1, 5, "Other error from mech %s: %d", *(const char **)(*(void *)(*(void *)(a2 + 1040) + 32) + 8), v20);
      heim_release(*(CFTypeRef *)(a2 + 1040));
      *(void *)(a2 + 1040) = 0;
    }
    return v20;
  }
}

krb5_error_code krb5_get_init_creds_opt_alloc(krb5_context context, krb5_get_init_creds_opt **opt)
{
  krb5_get_init_creds_opt *opt = 0;
  uint64_t v4 = (krb5_get_init_creds_opt *)malloc_type_calloc(1uLL, 0x60uLL, 0x10300404DCE2E84uLL);
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = malloc_type_calloc(1uLL, 0x40uLL, 0x10F00401127319BuLL);
    *(void *)&v5[1].proxiable = v6;
    if (v6)
    {
      krb5_error_code v7 = 0;
      *uint64_t v6 = 1;
      krb5_get_init_creds_opt *opt = v5;
    }
    else
    {
      krb5_error_code v7 = 12;
      krb5_set_error_message(context, 12, "malloc: out of memory");
      free(v5);
    }
  }
  else
  {
    krb5_error_code v7 = 12;
    krb5_set_error_message(context, 12, "malloc: out of memory");
  }
  return v7;
}

void krb5_get_init_creds_opt_free(krb5_context context, krb5_get_init_creds_opt *opt)
{
  if (opt)
  {
    uint64_t v3 = *(int **)&opt[1].proxiable;
    if (v3)
    {
      BOOL v4 = *v3 == 1;
      if (*v3 >= 1)
      {
        --*v3;
        if (v4)
        {
          sub_213CA30B0((uint64_t)opt);
          free(*(void **)&opt[1].proxiable);
        }
        *(_OWORD *)&opt->salt = 0u;
        *(_OWORD *)&opt[1].renew_life = 0u;
        *(_OWORD *)&opt->etype_list_CFIndex length = 0u;
        *(_OWORD *)&opt->preauth_list = 0u;
        *(_OWORD *)&opt->krb5_flags flags = 0u;
        *(_OWORD *)&opt->proxiable = 0u;
        free(opt);
      }
    }
  }
}

void krb5_get_init_creds_opt_set_default_flags(_krb5_context *a1, const char *a2, const krb5_data *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = 0;
  ret_xpc_object_t value = sub_213C93A3C((uint64_t)a1, 1, (uint64_t)a3, (uint64_t)"forwardable", a5, a6, a7, a8);
  krb5_appdefault_BOOLean(a1, a2, a3, "forwardable", ret_value, &ret_value);
  int v12 = ret_value;
  *(_DWORD *)a4 |= 4u;
  *(_DWORD *)(a4 + 24) = v12;
  ret_xpc_object_t value = sub_213C93A3C((uint64_t)a1, 0, (uint64_t)a3, (uint64_t)"proxiable", v13, v14, v15, v16);
  krb5_appdefault_BOOLean(a1, a2, a3, "proxiable", ret_value, &ret_value);
  int v17 = ret_value;
  *(_DWORD *)a4 |= 8u;
  *(_DWORD *)(a4 + 28) = v17;
  krb5_appdefault_time(a1, a2, a3, "ticket_lifetime", 0, &v32);
  uint64_t v23 = v32;
  if (v32
    || (uint64_t v23 = sub_213C93AE0((uint64_t)a1, (uint64_t)a3, (uint64_t)"ticket_lifetime", v18, v19, v20, v21, v22),
        (uint64_t v32 = v23) != 0))
  {
    *(_DWORD *)a4 |= 1u;
    *(void *)(a4 + 8) = v23;
  }
  krb5_appdefault_time(a1, a2, a3, "renew_lifetime", 0, &v32);
  uint64_t v29 = v32;
  if (v32
    || (uint64_t v29 = sub_213C93AE0((uint64_t)a1, (uint64_t)a3, (uint64_t)"renew_lifetime", v24, v25, v26, v27, v28),
        (uint64_t v32 = v29) != 0))
  {
    *(_DWORD *)a4 |= 2u;
    *(void *)(a4 + 16) = v29;
  }
  krb5_appdefault_BOOLean(a1, a2, a3, "no-addresses", 1, &ret_value);
  uint64_t v30 = *(void *)(a4 + 88);
  if (v30)
  {
    if (ret_value) {
      int v31 = 1;
    }
    else {
      int v31 = 2;
    }
    *(_DWORD *)(v30 + 40) = v31;
  }
  else
  {
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pac_req");
  }
}

BOOL sub_213C93A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = krb5_config_get_BOOL_default(a1, 0, a2, a4, a5, a6, a7, a8, (uint64_t)"realms");
  if (result == a2) {
    return krb5_config_get_BOOL_default(a1, 0, a2, v11, v12, v13, v14, v15, (uint64_t)"libdefaults");
  }
  return result;
}

void krb5_get_init_creds_opt_set_forwardable(krb5_get_init_creds_opt *opt, int forwardable)
{
  opt->flags |= 4u;
  LODWORD(opt->etype_list) = forwardable;
}

void krb5_get_init_creds_opt_set_proxiable(krb5_get_init_creds_opt *opt, int proxiable)
{
  opt->flags |= 8u;
  HIDWORD(opt->etype_list) = proxiable;
}

uint64_t sub_213C93AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = krb5_config_get_time(a1, 0, a3, a4, a5, a6, a7, a8, (uint64_t)"realms");
  if (result < 0)
  {
    uint64_t time = krb5_config_get_time(a1, 0, v10, v11, v12, v13, v14, v15, (uint64_t)"libdefaults");
    return time & ~(time >> 63);
  }
  return result;
}

void krb5_get_init_creds_opt_set_tkt_life(krb5_get_init_creds_opt *opt, krb5_deltat tkt_life)
{
  opt->flags |= 1u;
  *(void *)&opt->renew_life = *(void *)&tkt_life;
}

void krb5_get_init_creds_opt_set_renew_life(krb5_get_init_creds_opt *opt, krb5_deltat renew_life)
{
  opt->flags |= 2u;
  *(void *)&opt->proxiable = *(void *)&renew_life;
}

uint64_t krb5_get_init_creds_opt_set_addressless(_krb5_context *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (v3)
  {
    uint64_t v4 = 0;
    if (a3) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
    *(_DWORD *)(v3 + 40) = v5;
  }
  else
  {
    uint64_t v4 = 22;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pac_req");
  }
  return v4;
}

void krb5_get_init_creds_opt_set_etype_list(krb5_get_init_creds_opt *opt, krb5_enctype *etype_list, int etype_list_length)
{
  opt->flags |= 0x10u;
  opt->address_list = (krb5_address **)etype_list;
  LODWORD(opt->preauth_list) = etype_list_length;
}

void krb5_get_init_creds_opt_set_address_list(krb5_get_init_creds_opt *opt, krb5_address **addresses)
{
  opt->flags |= 0x20u;
  *(void *)&opt->preauth_list_CFIndex length = addresses;
}

void krb5_get_init_creds_opt_set_preauth_list(krb5_get_init_creds_opt *opt, krb5_preauthtype *preauth_list, int preauth_list_length)
{
  opt->flags |= 0x40u;
  opt[1].krb5_flags flags = preauth_list_length;
  opt->salt = (krb5_data *)preauth_list;
}

void krb5_get_init_creds_opt_set_salt(krb5_get_init_creds_opt *opt, krb5_data *salt)
{
  opt->flags |= 0x80u;
  *(void *)&opt[1].renew_life = salt;
}

_DWORD *krb5_get_init_creds_opt_set_anonymous(_DWORD *result, int a2)
{
  *result |= 0x100u;
  result[8] = a2;
  return result;
}

uint64_t krb5_get_init_creds_opt_set_pa_password(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 88);
  if (v4)
  {
    uint64_t v5 = 0;
    *(void *)(v4 + 8) = a3;
    *(void *)(v4 + 16) = a4;
  }
  else
  {
    uint64_t v5 = 22;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pa_password");
  }
  return v5;
}

uint64_t krb5_get_init_creds_opt_set_pac_request(_krb5_context *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (v3)
  {
    uint64_t v4 = 0;
    if (a3) {
      int v5 = 1;
    }
    else {
      int v5 = 2;
    }
    *(_DWORD *)(v3 + 24) = v5;
  }
  else
  {
    uint64_t v4 = 22;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_pac_req");
  }
  return v4;
}

void krb5_get_init_creds_opt_set_canonicalize(krb5_get_init_creds_opt *opt, int canonicalize)
{
  uint64_t v3 = *(void *)(*(void *)&canonicalize + 88);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 44);
    if (v2) {
      unsigned int v5 = v4 | 2;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFD;
    }
    *(_DWORD *)(v3 + 44) = v5;
  }
  else
  {
    krb5_set_error_message((krb5_context)opt, 22, "%s on non extendable opt", "init_creds_opt_set_canonicalize");
  }
}

uint64_t krb5_get_init_creds_opt_set_win2k(_krb5_context *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 44);
    uint64_t v5 = 0;
    if (a3) {
      unsigned int v6 = v4 | 0x4C;
    }
    else {
      unsigned int v6 = v4 & 0xFFFFFFB3;
    }
    *(_DWORD *)(v3 + 44) = v6;
  }
  else
  {
    uint64_t v5 = 22;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_win2k");
  }
  return v5;
}

krb5_error_code krb5_get_init_creds_opt_set_process_last_req(krb5_context a1, krb5_get_init_creds_opt *a2, krb5_gic_process_last_req a3, void *a4)
{
  uint64_t v4 = *(void *)&a2[1].proxiable;
  if (v4)
  {
    krb5_error_code v5 = 0;
    *(void *)(v4 + 48) = a3;
    *(void *)(v4 + 56) = a4;
  }
  else
  {
    krb5_error_code v5 = 22;
    krb5_set_error_message(a1, 22, "%s on non extendable opt", "init_creds_opt_set_win2k");
  }
  return v5;
}

void *krb5_keyblock_zero(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  return krb5_data_zero((void *)(a1 + 8));
}

void krb5_free_keyblock_contents(krb5_context a1, krb5_keyblock *a2)
{
  if (a2)
  {
    p_CFIndex length = &a2->length;
    contents = a2->contents;
    if (contents) {
      bzero(contents, *(void *)p_length);
    }
    krb5_data_free(p_length);
    a2->krb5_magic magic = 0;
  }
}

void krb5_free_keyblock(krb5_context a1, krb5_keyblock *a2)
{
  if (a2)
  {
    krb5_free_keyblock_contents(a1, a2);
    free(a2);
  }
}

krb5_error_code krb5_copy_keyblock_contents(krb5_context a1, const krb5_keyblock *a2, krb5_keyblock *a3)
{
  return copy_EncryptionKey();
}

krb5_error_code krb5_copy_keyblock(krb5_context a1, const krb5_keyblock *a2, krb5_keyblock **a3)
{
  *a3 = 0;
  krb5_error_code v5 = (krb5_keyblock *)malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
  if (v5)
  {
    unsigned int v6 = v5;
    krb5_error_code v7 = copy_EncryptionKey();
    if (v7) {
      free(v6);
    }
    else {
      *a3 = v6;
    }
  }
  else
  {
    krb5_error_code v7 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v7;
}

uint64_t krb5_keyblock_get_enctype(unsigned int *a1)
{
  return *a1;
}

uint64_t krb5_keyblock_init(_krb5_context *a1, char *a2, const void *a3, size_t a4, void *a5)
{
  int v8 = (int)a2;
  uint64_t v12 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t v10 = krb5_enctype_keysize(a1, a2, &v12);
  if (!v10)
  {
    if (v12 == a4)
    {
      uint64_t v10 = krb5_data_copy(a5 + 1, a3, a4);
      if (v10) {
        krb5_set_error_message(a1, v10, "malloc: out of memory");
      }
      else {
        *(_DWORD *)a5 = v8;
      }
    }
    else
    {
      uint64_t v10 = 2529639062;
      krb5_set_error_message(a1, -1765328234, "Encryption key %d is %lu bytes long, %lu was passed in");
    }
  }
  return v10;
}

uint64_t sub_213C94064(_krb5_context *a1, const char *a2, uint64_t a3)
{
  unsigned int v6 = malloc_type_malloc(0x10uLL, 0x1010040A1D9428BuLL);
  if (!v6) {
    goto LABEL_5;
  }
  krb5_error_code v7 = v6;
  int v8 = strdup(a2);
  *(void *)krb5_error_code v7 = v8;
  if (!v8)
  {
    free(v7);
LABEL_5:
    uint64_t v9 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v9;
  }
  uint64_t v9 = 0;
  v7[2] = 0;
  *(void *)(a3 + 88) = v7;
  return v9;
}

uint64_t sub_213C940F8(int a1, uint64_t a2, char *__dst, size_t __size)
{
  return 0;
}

uint64_t sub_213C94124(uint64_t a1, uint64_t a2)
{
  int v2 = *(void ***)(a2 + 88);
  free(*v2);
  free(v2);
  return 0;
}

uint64_t sub_213C94158(_krb5_context *a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_213C9417C(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return sub_213C948AC(a1, a2, 0x1000000, 0, a3);
}

uint64_t sub_213C9418C(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_213C94B08(a1, a2, a3, a4, 0, 0);
}

uint64_t sub_213C94198(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_213C941DC(_krb5_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a2 + 88);
  size_t v50 = 0;
  uint64_t v51 = 0;
  unsigned int v49 = 0;
  int v7 = open(*(const char **)v6, 16777218);
  if ((v7 & 0x80000000) == 0)
  {
    int v8 = v7;
    __int16 v48 = 0;
    sub_213CB79C8(v7);
    uint64_t v9 = sub_213C87D70(a1, v8, 1);
    if (!v9)
    {
      uint64_t v10 = krb5_storage_from_fd(v8);
      uint64_t v11 = v10;
      if (!v10)
      {
        uint64_t v19 = "out of memory";
        goto LABEL_26;
      }
      krb5_storage_set_eof_code((uint64_t)v10, -1765328202);
      if (!krb5_ret_int8((uint64_t)v11, (uint64_t)&v48 + 1))
      {
        if (HIBYTE(v48) != 5)
        {
          uint64_t v18 = 2529639125;
          long long v46 = *(const char **)v6;
          uint64_t v19 = "Bad version in keytab %s";
          goto LABEL_28;
        }
        uint64_t v31 = krb5_ret_int8((uint64_t)v11, (uint64_t)&v48);
        if (v31)
        {
          uint64_t v18 = v31;
          long long v46 = *(const char **)v6;
          uint64_t v19 = "failed reading tag from keytab %s";
          goto LABEL_28;
        }
        uint64_t v25 = (char)v48;
        *(_DWORD *)(a2 + 96) = v25;
        goto LABEL_15;
      }
      uint64_t v12 = sub_213C950C0(a2, (uint64_t)v11);
      if (v12)
      {
        uint64_t v18 = v12;
        long long v46 = *(const char **)v6;
        uint64_t v47 = strerror(v12);
        uint64_t v19 = "%s: keytab is corrupted: %s";
LABEL_28:
        uint64_t v32 = a1;
        krb5_error_code v33 = v18;
        goto LABEL_29;
      }
LABEL_14:
      uint64_t v25 = *(unsigned int *)(a2 + 96);
LABEL_15:
      sub_213C94AA0(a1, (uint64_t)v11, v25, v13, v14, v15, v16, v17);
      uint64_t v26 = krb5_storage_emem();
      if (v26)
      {
        uint64_t v27 = (uint64_t)v26;
        uint64_t v28 = *a3;
        is_krb5_flags flags = krb5_storage_is_flags((uint64_t)v26, 2);
        __int16 v30 = *(_WORD *)(v28 + 8);
        if (is_flags) {
          ++v30;
        }
        uint64_t v18 = krb5_store_int16(v27, v30);
        if (!v18)
        {
          uint64_t v18 = sub_213C951FC(v27, *(char **)(v28 + 24));
          if (!v18)
          {
            if (*(_DWORD *)(v28 + 8))
            {
              uint64_t v35 = 0;
              while (1)
              {
                uint64_t v36 = sub_213C951FC(v27, *(char **)(*(void *)(v28 + 16) + 8 * v35));
                if (v36) {
                  break;
                }
                if (++v35 >= (unint64_t)*(unsigned int *)(v28 + 8)) {
                  goto LABEL_38;
                }
              }
              uint64_t v18 = v36;
            }
            else
            {
LABEL_38:
              if (krb5_storage_is_flags(v27, 4) || (uint64_t v18 = krb5_store_int32(v27, *(_DWORD *)v28), !v18))
              {
                uint64_t v37 = krb5_store_int32(v27, *((_DWORD *)a3 + 10));
                if (v37)
                {
                  uint64_t v18 = v37;
                  krb5_set_error_message(a1, v37, "Failed storing timpstamp in keytab %s");
                }
                else
                {
                  uint64_t v38 = krb5_store_int8(v27, *((unsigned char *)a3 + 8));
                  if (v38)
                  {
                    uint64_t v18 = v38;
                    krb5_set_error_message(a1, v38, "Failed storing kvno in keytab %s");
                  }
                  else
                  {
                    uint64_t v39 = sub_213C95128(a1, (const char **)v6, v27, (__int16 *)a3 + 8);
                    if (v39)
                    {
                      uint64_t v18 = v39;
                    }
                    else
                    {
                      if ((*(unsigned char *)(v6 + 8) & 1) != 0
                        || (uint64_t v40 = krb5_store_int32(v27, *((_DWORD *)a3 + 2)), !v40)
                        && (uint64_t v40 = krb5_store_uint32(v27, *((unsigned int *)a3 + 11)), !v40))
                      {
                        uint64_t v18 = krb5_storage_to_data(v27, &v50);
                        krb5_storage_free(v27);
                        if (!v18)
                        {
                          while (1)
                          {
                            if (krb5_ret_int32((uint64_t)v11, &v49) == -1765328202)
                            {
                              unsigned int v42 = v50;
                              unsigned int v49 = v50;
                              goto LABEL_59;
                            }
                            unsigned int v41 = v49;
                            if ((v49 & 0x80000000) != 0)
                            {
                              unsigned int v49 = -v49;
                              if ((signed int)-v41 >= (int)v50) {
                                break;
                              }
                            }
                            krb5_storage_seek((uint64_t)v11);
                          }
                          krb5_storage_seek((uint64_t)v11);
                          unsigned int v42 = v49;
LABEL_59:
                          uint64_t v18 = krb5_store_int32((uint64_t)v11, v42);
                          if (krb5_storage_write((uint64_t)v11) < 0)
                          {
                            int v43 = __error();
                            uint64_t v18 = *v43;
                            uint64_t v44 = *(const char **)v6;
                            long long v45 = strerror(*v43);
                            krb5_set_error_message(a1, v18, "Failed writing keytab block in keytab %s: %s", v44, v45);
                          }
                          bzero(v51, v50);
                          krb5_data_free(&v50);
                          goto LABEL_30;
                        }
                        long long v46 = *(const char **)v6;
                        uint64_t v19 = "Failed converting keytab entry to memory block for keytab %s";
                        goto LABEL_28;
                      }
                      uint64_t v18 = v40;
                      krb5_set_error_message(a1, v40, "Failed storing extended kvno in keytab %s");
                    }
                  }
                }
                goto LABEL_21;
              }
            }
          }
        }
        krb5_set_error_message(a1, v18, "Failed storing principal in keytab %s");
LABEL_21:
        krb5_storage_free(v27);
        goto LABEL_30;
      }
      uint64_t v19 = "malloc: out of memory";
LABEL_26:
      uint64_t v18 = 12;
      uint64_t v32 = a1;
      krb5_error_code v33 = 12;
LABEL_29:
      krb5_set_error_message(v32, v33, v19, v46, v47);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  int v20 = open(*(const char **)v6, 16779778, 384);
  if ((v20 & 0x80000000) == 0)
  {
    int v8 = v20;
    sub_213CB79C8(v20);
    uint64_t v9 = sub_213C87D70(a1, v8, 1);
    if (!v9)
    {
      uint64_t v11 = krb5_storage_from_fd(v8);
      krb5_storage_set_eof_code((uint64_t)v11, -1765328202);
      uint64_t v24 = sub_213C950C0(a2, (uint64_t)v11);
      if (v24)
      {
        uint64_t v18 = v24;
LABEL_30:
        krb5_storage_free((uint64_t)v11);
        sub_213C87E88(a1, v8);
        goto LABEL_31;
      }
      goto LABEL_14;
    }
LABEL_9:
    uint64_t v18 = v9;
LABEL_31:
    close(v8);
    return v18;
  }
  uint64_t v21 = __error();
  uint64_t v18 = *v21;
  uint64_t v22 = *(const char **)v6;
  uint64_t v23 = strerror(*v21);
  krb5_set_error_message(a1, v18, "open(%s): %s", v22, v23);
  return v18;
}

uint64_t sub_213C946AC(_krb5_context *a1, _krb5_kt *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  krb5_kt_cursor cursor = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (sub_213C948AC(a1, (uint64_t)a2, 16777218, 1, (uint64_t)&cursor)) {
    goto LABEL_4;
  }
  if (sub_213C94B08(a1, (uint64_t)a2, (uint64_t)v16, (uint64_t)&cursor, &v12, &v11))
  {
    krb5_kt_end_seq_get(a1, a2, &cursor);
LABEL_4:
    krb5_clear_error_message(a1);
    return 2529639093;
  }
  int v7 = 0;
  do
  {
    if (krb5_kt_compare((uint64_t)a1, (uint64_t)v16, *(_DWORD **)a3, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 16)))
    {
      uint64_t v8 = v14;
      krb5_storage_seek(v14);
      unint64_t v9 = v11 - v12 - 4;
      krb5_store_int32(v8, 4 - (v11 - v12));
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      for (long long i = 0u; v9; v9 -= v10)
      {
        if (v9 >= 0x80) {
          uint64_t v10 = 128;
        }
        else {
          uint64_t v10 = v9;
        }
        krb5_storage_write(v8);
      }
      int v7 = 1;
    }
    krb5_kt_free_entry(a1, (uint64_t)v16);
  }
  while (!sub_213C94B08(a1, (uint64_t)a2, (uint64_t)v16, (uint64_t)&cursor, &v12, &v11));
  krb5_kt_end_seq_get(a1, a2, &cursor);
  if (!v7) {
    goto LABEL_4;
  }
  return 0;
}

uint64_t sub_213C94874(_krb5_context *a1, const char *a2, uint64_t a3)
{
  uint64_t result = sub_213C94064(a1, a2, a3);
  if (!result) {
    *(_DWORD *)(*(void *)(a3 + 88) + 8) |= 1u;
  }
  return result;
}

uint64_t sub_213C948AC(_krb5_context *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(const char ***)(a2 + 88);
  if (a3) {
    int v11 = 2;
  }
  else {
    int v11 = 4;
  }
  if ((a3 & 2) != 0) {
    int v12 = 6;
  }
  else {
    int v12 = v11;
  }
  if (access(*v10, v12))
  {
    uint64_t v13 = __error();
    uint64_t v14 = *v13;
    uint64_t v29 = *v10;
    __int16 v30 = strerror(*v13);
    uint64_t v15 = "keytab %s access failed: %s";
LABEL_9:
    krb5_set_error_message(a1, v14, v15, v29, v30);
    return v14;
  }
  int v17 = open(*v10, a3);
  *(_DWORD *)a5 = v17;
  if (v17 < 0)
  {
    long long v19 = __error();
    uint64_t v14 = *v19;
    uint64_t v29 = *v10;
    __int16 v30 = strerror(*v19);
    uint64_t v15 = "keytab %s open failed: %s";
    goto LABEL_9;
  }
  sub_213CB79C8(v17);
  uint64_t v14 = sub_213C87D70(a1, *(_DWORD *)a5, a4);
  int v18 = *(_DWORD *)a5;
  if (v14)
  {
    close(v18);
  }
  else
  {
    long long v20 = krb5_storage_from_fd(v18);
    *(void *)(a5 + 8) = v20;
    if (v20)
    {
      __int16 v31 = 0;
      krb5_storage_set_eof_code((uint64_t)v20, -1765328202);
      uint64_t v21 = krb5_ret_int8(*(void *)(a5 + 8), (uint64_t)&v31 + 1);
      if (v21)
      {
        uint64_t v14 = v21;
      }
      else
      {
        uint64_t v22 = *(void *)(a5 + 8);
        if (HIBYTE(v31) != 5)
        {
          krb5_storage_free(v22);
          sub_213C87E88(a1, *(_DWORD *)a5);
          close(*(_DWORD *)a5);
          krb5_clear_error_message(a1);
          return 2529639125;
        }
        uint64_t v14 = krb5_ret_int8(v22, (uint64_t)&v31);
        if (!v14)
        {
          uint64_t v28 = (char)v31;
          *(_DWORD *)(a2 + 96) = v28;
          sub_213C94AA0(a1, *(void *)(a5 + 8), v28, v23, v24, v25, v26, v27);
          return v14;
        }
      }
      krb5_storage_free(*(void *)(a5 + 8));
      sub_213C87E88(a1, *(_DWORD *)a5);
      close(*(_DWORD *)a5);
      krb5_clear_error_message(a1);
    }
    else
    {
      sub_213C87E88(a1, *(_DWORD *)a5);
      close(*(_DWORD *)a5);
      uint64_t v14 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }
  return v14;
}

uint64_t sub_213C94AA0(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      int v9 = 7;
      goto LABEL_6;
    }
    krb5_warnx(a1, "storage_set_flags called with bad vno (%d)", a3, a4, a5, a6, a7, a8, a3);
  }
  int v9 = 0;
LABEL_6:

  return krb5_storage_set_flags(a2, v9);
}

uint64_t sub_213C94B08(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  int v11 = *(const char ***)(a2 + 88);
  int v42 = 0;
  char v41 = 0;
  uint64_t v40 = 0;
  uint64_t v12 = krb5_storage_seek(*(void *)(a4 + 8));
  uint64_t v13 = krb5_ret_int32(*(void *)(a4 + 8), (unsigned int *)&v42);
  if (!v13)
  {
    while (v42 < 0)
    {
      uint64_t v12 = krb5_storage_seek(*(void *)(a4 + 8));
      uint64_t v14 = krb5_ret_int32(*(void *)(a4 + 8), (unsigned int *)&v42);
      if (v14) {
        return v14;
      }
    }
    uint64_t v15 = *(void *)(a4 + 8);
    uint64_t v16 = (krb5_principal_data *)malloc_type_calloc(1uLL, 0x20uLL, 0x10900408A8AD7E9uLL);
    if (!v16)
    {
      uint64_t v13 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_11;
    }
    int v17 = v16;
    LOWORD(count) = 0;
    uint64_t v18 = krb5_ret_int16(v15, &count);
    if (v18)
    {
      uint64_t v13 = v18;
      uint64_t v37 = *v11;
      long long v19 = "Failed decoding length of keytab principal in keytab file %s";
LABEL_8:
      krb5_set_error_message(a1, v13, v19, v37);
LABEL_9:
      krb5_free_principal(a1, v17);
LABEL_11:
      krb5_kt_free_entry(a1, a3);
LABEL_12:
      krb5_storage_seek(*(void *)(a4 + 8));
      return v13;
    }
    is_krb5_flags flags = krb5_storage_is_flags(v15, 2);
    __int16 v22 = count;
    if (is_flags)
    {
      __int16 v22 = count - 1;
      LOWORD(count) = count - 1;
    }
    if (v22 < 0)
    {
      uint64_t v13 = 2529639094;
      krb5_set_error_message(a1, -1765328202, "Keytab principal contains invalid length in keytab %s");
      goto LABEL_9;
    }
    uint64_t v23 = sub_213C94FD8(a1, v15, &v17->data);
    if (v23)
    {
      uint64_t v13 = v23;
      uint64_t v37 = *v11;
      long long v19 = "Can't read realm from keytab: %s";
      goto LABEL_8;
    }
    uint64_t v24 = (char *)malloc_type_calloc((__int16)count, 8uLL, 0x10040436913F5uLL);
    v17->realm.data = v24;
    if (!v24)
    {
      uint64_t v13 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      goto LABEL_9;
    }
    uint64_t v38 = a6;
    uint64_t v39 = a3;
    int v25 = (__int16)count;
    v17->realm.krb5_magic magic = (__int16)count;
    if (v25)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      while (1)
      {
        uint64_t v28 = sub_213C94FD8(a1, v15, &v17->realm.data[v26]);
        if (v28) {
          break;
        }
        ++v27;
        v26 += 8;
        if (v27 >= v17->realm.magic) {
          goto LABEL_26;
        }
      }
      uint64_t v13 = v28;
      krb5_set_error_message(a1, v28, "Can't read principal from keytab: %s", *v11);
      a3 = v39;
      goto LABEL_9;
    }
LABEL_26:
    if (krb5_storage_is_flags(v15, 4))
    {
      v17->krb5_magic magic = 0;
      a3 = v39;
    }
    else
    {
      krb5_magic v43 = 0;
      uint64_t v34 = krb5_ret_int32(v15, (unsigned int *)&v43);
      v17->krb5_magic magic = v43;
      a3 = v39;
      if (v34)
      {
        uint64_t v13 = v34;
        uint64_t v37 = *v11;
        long long v19 = "Can't read name-type from keytab: %s";
        goto LABEL_8;
      }
    }
    *(void *)a3 = v17;
    uint64_t v13 = krb5_ret_uint32(*(void *)(a4 + 8), &v40);
    *(_DWORD *)(a3 + 40) = v40;
    if (v13) {
      goto LABEL_11;
    }
    uint64_t v13 = krb5_ret_int8(*(void *)(a4 + 8), (uint64_t)&v41);
    if (v13) {
      goto LABEL_11;
    }
    *(_DWORD *)(a3 + 8) = v41;
    uint64_t v29 = *(void *)(a4 + 8);
    LOWORD(count) = 0;
    uint64_t v13 = krb5_ret_int16(v29, &count);
    if (v13) {
      goto LABEL_47;
    }
    *(_DWORD *)(a3 + 16) = (__int16)count;
    LOWORD(v43) = 0;
    uint64_t v13 = krb5_ret_int16(v29, &v43);
    if (v13) {
      goto LABEL_47;
    }
    if ((__int16)v43 < 0)
    {
      uint64_t v35 = "bad size value";
    }
    else
    {
      size_t v30 = (unsigned __int16)v43;
      *(void *)(a3 + 24) = (unsigned __int16)v43;
      __int16 v31 = malloc_type_calloc(1uLL, v30, 0xC9E831FCuLL);
      *(void *)(a3 + 32) = v31;
      if (v31)
      {
        uint64_t v32 = krb5_storage_read(v29);
        if (v32 == (__int16)v43) {
          goto LABEL_35;
        }
        if ((v32 & 0x8000000000000000) == 0)
        {
          uint64_t v13 = 2529639094;
          goto LABEL_46;
        }
        uint64_t v13 = *__error();
        a3 = v39;
        if (!v13)
        {
LABEL_35:
          uint64_t v33 = v12 - krb5_storage_seek(*(void *)(a4 + 8));
          if (v42 + v33 + 4 < 4)
          {
            uint64_t v13 = 0;
          }
          else
          {
            uint64_t v13 = krb5_ret_int32(*(void *)(a4 + 8), (unsigned int *)&v40 + 1);
            if (!v13 && HIDWORD(v40))
            {
              uint64_t v13 = 0;
              *(_DWORD *)(v39 + 8) = HIDWORD(v40);
            }
          }
          if (v42 + v33 + 4 < 8)
          {
            int v36 = 0;
          }
          else
          {
            uint64_t v13 = krb5_ret_uint32(*(void *)(a4 + 8), &v40);
            if (v13) {
              goto LABEL_56;
            }
            int v36 = v40;
          }
          *(_DWORD *)(v39 + 44) = v36;
LABEL_56:
          *(void *)(v39 + 48) = 0;
          if (a5) {
            *a5 = v12;
          }
          if (v38) {
            void *v38 = v12 + v42 + 4;
          }
          a3 = v39;
          if (!v13) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
LABEL_47:
        krb5_set_error_message(a1, v13, "Cant read keyblock from file %s");
        goto LABEL_11;
      }
      uint64_t v35 = "malloc: out of memory";
    }
    uint64_t v13 = 12;
    krb5_set_error_message(a1, 12, v35);
LABEL_46:
    a3 = v39;
    goto LABEL_47;
  }
  return v13;
}

uint64_t sub_213C94FD8(_krb5_context *a1, uint64_t a2, void *a3)
{
  unsigned __int16 v11 = 0;
  uint64_t v6 = krb5_ret_int16(a2, &v11);
  if (v6) {
    return v6;
  }
  if ((__int16)v11 < 0)
  {
    int v9 = "bad size value";
LABEL_9:
    uint64_t v6 = 12;
    krb5_set_error_message(a1, 12, v9);
    return v6;
  }
  int v7 = malloc_type_calloc(1uLL, v11 + 1, 0xB00A5488uLL);
  *a3 = v7;
  if (!v7)
  {
    int v9 = "malloc: out of memory";
    goto LABEL_9;
  }
  uint64_t v8 = krb5_storage_read(a2);
  uint64_t v6 = 0;
  *(unsigned char *)(*a3 + (__int16)v11) = 0;
  if (v8 != (__int16)v11)
  {
    if (v8 < 0) {
      return *__error();
    }
    else {
      return 2529639094;
    }
  }
  return v6;
}

uint64_t sub_213C950C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = krb5_store_int8(a2, 5);
  if (!result)
  {
    int v5 = *(_DWORD *)(a1 + 96);
    if (!v5)
    {
      LOBYTE(v5) = 2;
      *(_DWORD *)(a1 + 96) = 2;
    }
    return krb5_store_int8(a2, v5);
  }
  return result;
}

uint64_t sub_213C95128(_krb5_context *a1, const char **a2, uint64_t a3, __int16 *a4)
{
  uint64_t v8 = krb5_store_int16(a3, *a4);
  if (!v8)
  {
    uint64_t v10 = *((void *)a4 + 1);
    uint64_t v11 = krb5_store_int16(a3, (__int16)v10);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v8 = v11;
    }
    else
    {
      uint64_t v12 = krb5_storage_write(a3);
      if (v12 == v10) {
        return 0;
      }
      if (v12 < 0)
      {
        uint64_t v8 = *__error();
        if (!v8) {
          return v8;
        }
      }
      else
      {
        uint64_t v8 = 2529639094;
      }
    }
  }
  krb5_set_error_message(a1, v8, "Cant store keyblock to file %s", *a2);
  return v8;
}

uint64_t sub_213C951FC(uint64_t a1, char *__s)
{
  size_t v3 = strlen(__s);
  uint64_t result = krb5_store_int16(a1, (__int16)v3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = krb5_storage_write(a1);
    if (v5 == v3)
    {
      return 0;
    }
    else if (v5 < 0)
    {
      return *__error();
    }
    else
    {
      return 2529639094;
    }
  }
  return result;
}

uint64_t krb5_kt_register(uint64_t a1, long long *a2)
{
  if (strlen(*(const char **)a2) < 0x1E)
  {
    uint64_t v5 = (char *)malloc_type_realloc(*(void **)(a1 + 264), 104 * *(int *)(a1 + 256) + 104, 0x10D00400BBDB9B3uLL);
    if (v5)
    {
      uint64_t v4 = 0;
      uint64_t v6 = &v5[104 * *(int *)(a1 + 256)];
      long long v7 = *a2;
      long long v8 = a2[2];
      *((_OWORD *)v6 + 1) = a2[1];
      *((_OWORD *)v6 + 2) = v8;
      *(_OWORD *)uint64_t v6 = v7;
      long long v9 = a2[3];
      long long v10 = a2[4];
      long long v11 = a2[5];
      *((void *)v6 + 12) = *((void *)a2 + 12);
      *((_OWORD *)v6 + 4) = v10;
      *((_OWORD *)v6 + 5) = v11;
      *((_OWORD *)v6 + 3) = v9;
      *(void *)(a1 + 264) = v5;
      ++*(_DWORD *)(a1 + 256);
    }
    else
    {
      uint64_t v4 = 12;
      krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
    }
  }
  else
  {
    uint64_t v4 = 2529639091;
    krb5_set_error_message((krb5_context)a1, -1765328205, "can't register cache type, prefix too long");
  }
  return v4;
}

krb5_error_code krb5_kt_resolve(krb5_context a1, const char *a2, krb5_keytab *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = strchr((char *)a2, 58);
  if (v6)
  {
    int v7 = *(unsigned __int8 *)v4;
    if (v7 == 47) {
      long long v8 = "FILE";
    }
    else {
      long long v8 = v4;
    }
    if (v7 == 47) {
      size_t v9 = 4;
    }
    else {
      size_t v9 = v6 - v4;
    }
    if (v7 != 47) {
      uint64_t v4 = v6 + 1;
    }
  }
  else
  {
    long long v8 = "FILE";
    size_t v9 = 4;
  }
  uint64_t v10 = *((unsigned int *)a1 + 64);
  if ((int)v10 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = (const char **)*((void *)a1 + 33);
    while (strncasecmp(v8, *v12, v9))
    {
      ++v11;
      v12 += 13;
      if (v10 == v11) {
        goto LABEL_19;
      }
    }
  }
  if (v11 == v10)
  {
LABEL_19:
    krb5_error_code v13 = -1765328204;
    krb5_set_error_message(a1, -1765328204, "unknown keytab type %.*s");
  }
  else
  {
    uint64_t v14 = malloc_type_malloc(0x68uLL, 0x10D00400BBDB9B3uLL);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *((void *)a1 + 33) + 104 * v11;
      long long v17 = *(_OWORD *)(v16 + 48);
      long long v18 = *(_OWORD *)(v16 + 64);
      uint64_t v19 = *(void *)(v16 + 96);
      unsigned char v14[5] = *(_OWORD *)(v16 + 80);
      long long v21 = *(_OWORD *)(v16 + 16);
      long long v20 = *(_OWORD *)(v16 + 32);
      *uint64_t v14 = *(_OWORD *)v16;
      v14[1] = v21;
      v14[3] = v17;
      v14[4] = v18;
      uint64_t v14[2] = v20;
      *((void *)v14 + 11) = 0;
      *((void *)v14 + 12) = v19;
      krb5_error_code v13 = (*((uint64_t (**)(krb5_context, const char *, _OWORD *))v14 + 1))(a1, v4, v14);
      if (v13)
      {
        free(v15);
        uint64_t v15 = 0;
      }
      *a3 = (krb5_keytab)v15;
    }
    else
    {
      krb5_error_code v13 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }
  return v13;
}

krb5_error_code krb5_kt_default_name(krb5_context a1, char *a2, int a3)
{
  if (strlcpy(a2, *((const char **)a1 + 26), *(size_t *)&a3) < *(void *)&a3) {
    return 0;
  }
  krb5_clear_error_message(a1);
  return -1765328247;
}

uint64_t krb5_kt_default_modify_name(_krb5_context *a1, char *__dst, size_t __size)
{
  uint64_t v6 = (const char *)*((void *)a1 + 27);
  if (!v6)
  {
    uint64_t v6 = (const char *)*((void *)a1 + 26);
    if (!strncasecmp(v6, "ANY:", 4uLL))
    {
      long long v8 = v6 + 4;
      size_t v9 = strcspn(v8, ",");
      if (v9 < __size)
      {
        size_t v10 = v9;
        strlcpy(__dst, v8, __size);
        uint64_t v7 = 0;
        __dst[v10] = 0;
        return v7;
      }
LABEL_7:
      uint64_t v7 = 2529639049;
      krb5_clear_error_message(a1);
      return v7;
    }
  }
  if (strlcpy(__dst, v6, __size) >= __size) {
    goto LABEL_7;
  }
  return 0;
}

krb5_error_code krb5_kt_default(krb5_context a1, krb5_keytab *a2)
{
  return krb5_kt_resolve(a1, *((const char **)a1 + 26), a2);
}

krb5_error_code krb5_kt_read_service_key(krb5_context a1, krb5_pointer a2, krb5_principal a3, krb5_kvno a4, krb5_enctype a5, krb5_keyblock **a6)
{
  uint64_t v15 = 0;
  krb5_keytab keytab = 0;
  memset(&v14, 0, sizeof(v14));
  if (!a2) {
    a2 = (krb5_pointer)*((void *)a1 + 26);
  }
  krb5_error_code entry = krb5_kt_resolve(a1, (const char *)a2, &keytab);
  if (!entry)
  {
    krb5_keytab v12 = keytab;
    krb5_error_code entry = krb5_kt_get_entry(a1, keytab, a3, a4, a5, &v14);
    (*((void (**)(krb5_context, krb5_keytab))v12 + 3))(a1, v12);
    *(_OWORD *)krb5_keytab v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((void *)v12 + 12) = 0;
    free(v12);
    if (!entry)
    {
      krb5_error_code entry = krb5_copy_keyblock(a1, (const krb5_keyblock *)&v14.timestamp, a6);
      krb5_kt_free_entry(a1, (uint64_t)&v14);
    }
  }
  return entry;
}

krb5_error_code krb5_kt_get_entry(krb5_context context, krb5_keytab keytab, krb5_const_principal principal, krb5_kvno vno, krb5_enctype enctype, krb5_keytab_entry *entry)
{
  uint64_t v7 = *(char **)&enctype;
  krb5_keytab v12 = (uint64_t (*)(void))*((void *)keytab + 5);
  if (!v12)
  {
    krb5_keytab_entry v14 = (unsigned int (*)(krb5_context, krb5_keytab, krb5_kt_cursor *))*((void *)keytab + 6);
    if (v14)
    {
      uint64_t v23 = 0;
      memset(&entrya, 0, sizeof(entrya));
      memset(cursor, 0, sizeof(cursor));
      if (!v14(context, keytab, cursor))
      {
        LODWORD(entry->principal) = 0;
        if (!krb5_kt_next_entry(context, keytab, &entrya, cursor))
        {
          if ((int)vno <= 0) {
            int v15 = --(char)vno;
          }
          else {
            int v15 = vno;
          }
          do
          {
            if (krb5_kt_compare((uint64_t)context, (uint64_t)&entrya, principal, 0, (int)v7))
            {
              if (LODWORD(entrya.principal) == vno
                || (SLODWORD(entrya.principal) <= 255 ? (BOOL v16 = v15 == LODWORD(entrya.principal)) : (BOOL v16 = 0), v16))
              {
                krb5_kt_copy_entry_contents(context, (uint64_t)&entrya, (uint64_t)entry);
                krb5_kt_free_entry(context, (uint64_t)&entrya);
                long long v20 = (void (*)(krb5_context, krb5_keytab, krb5_kt_cursor *))*((void *)keytab + 8);
                if (v20) {
                  v20(context, keytab, cursor);
                }
                else {
                  krb5_set_error_message(context, -1980176636, "end_seq_get is not supported in the %s  keytab", *(const char **)keytab);
                }
                return 0;
              }
              if (!vno)
              {
                int v17 = (int)entry->principal;
                if (SLODWORD(entrya.principal) > v17)
                {
                  if (v17) {
                    krb5_kt_free_entry(context, (uint64_t)entry);
                  }
                  krb5_kt_copy_entry_contents(context, (uint64_t)&entrya, (uint64_t)entry);
                }
              }
            }
            krb5_kt_free_entry(context, (uint64_t)&entrya);
          }
          while (!krb5_kt_next_entry(context, keytab, &entrya, cursor));
        }
        long long v18 = (void (*)(krb5_context, krb5_keytab, krb5_kt_cursor *))*((void *)keytab + 8);
        if (v18) {
          v18(context, keytab, cursor);
        }
        else {
          krb5_set_error_message(context, -1980176636, "end_seq_get is not supported in the %s  keytab", *(const char **)keytab);
        }
        if (LODWORD(entry->principal)) {
          return 0;
        }
        krb5_error_code v19 = -1765328203;
        sub_213C95CC4(context, 2529639093, (uint64_t)keytab, (uint64_t)principal, v7, vno);
        return v19;
      }
    }
    else
    {
      krb5_set_error_message(context, -1980176636, "start_seq_get is not supported in the %s keytab type", *(const char **)keytab);
    }
    krb5_error_code v19 = -1765328203;
    *((_DWORD *)context + 72) = -1765328203;
    return v19;
  }

  return v12();
}

krb5_error_code krb5_kt_close(krb5_context context, krb5_keytab keytab)
{
  krb5_error_code v3 = (*((uint64_t (**)(krb5_context))keytab + 3))(context);
  *(_OWORD *)krb5_keytab keytab = 0u;
  *((_OWORD *)keytab + 1) = 0u;
  *((_OWORD *)keytab + 2) = 0u;
  *((_OWORD *)keytab + 3) = 0u;
  *((_OWORD *)keytab + 4) = 0u;
  *((_OWORD *)keytab + 5) = 0u;
  *((void *)keytab + 12) = 0;
  free(keytab);
  return v3;
}

uint64_t krb5_kt_free_entry(_krb5_context *a1, uint64_t a2)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return 0;
}

const char *__cdecl krb5_kt_get_type(krb5_context a1, krb5_keytab keytab)
{
  strlcpy(v2, *(const char **)keytab, v3);
  return 0;
}

krb5_error_code krb5_kt_get_name(krb5_context context, krb5_keytab keytab, char *name, unsigned int namelen)
{
  return (*((uint64_t (**)(krb5_context))keytab + 2))(context);
}

uint64_t krb5_kt_get_full_name(_krb5_context *a1, uint64_t a2, char **a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *a3 = 0;
  __strlcpy_chk();
  uint64_t v6 = (*(uint64_t (**)(_krb5_context *, uint64_t, char *, uint64_t))(a2 + 16))(a1, a2, v8, 1024);
  if (!v6)
  {
    if (asprintf(a3, "%s:%s", v9, v8) == -1)
    {
      uint64_t v6 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      *a3 = 0;
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t krb5_kt_destroy(uint64_t a1, uint64_t (**a2)(void))
{
  uint64_t v4 = a2[4]();
  ((void (*)(uint64_t, uint64_t (**)(void)))a2[3])(a1, a2);
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  a2[12] = 0;
  free(a2);
  return v4;
}

uint64_t krb5_kt_compare(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  if (!a3) {
    return (!a4 || *(_DWORD *)(a2 + 8) == a4) && (!a5 || *(_DWORD *)(a2 + 16) == a5);
  }
  if (*a3 == -1202)
  {
    uint64_t v10 = (unsigned int (*)(uint64_t, uint64_t, _DWORD *))krb5_principal_compare_any_realm;
    uint64_t result = ((uint64_t (*)(uint64_t, void))krb5_principal_compare_any_realm)(a1, *(void *)a2);
  }
  else
  {
    uint64_t v10 = (unsigned int (*)(uint64_t, uint64_t, _DWORD *))krb5_principal_compare;
    uint64_t result = ((uint64_t (*)(uint64_t, void))krb5_principal_compare)(a1, *(void *)a2);
  }
  if (result)
  {
    krb5_keytab v12 = *(unsigned int **)(a2 + 48);
    if (v12 && *v12)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      while (!v10(a1, *((void *)v12 + 1) + v13, a3))
      {
        ++v14;
        krb5_keytab v12 = *(unsigned int **)(a2 + 48);
        v13 += 32;
        if (v14 >= *v12) {
          return (!a4 || *(_DWORD *)(a2 + 8) == a4) && (!a5 || *(_DWORD *)(a2 + 16) == a5);
        }
      }
      return 0;
    }
    return (!a4 || *(_DWORD *)(a2 + 8) == a4) && (!a5 || *(_DWORD *)(a2 + 16) == a5);
  }
  return result;
}

uint64_t sub_213C95CC4(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v14 = 0;
  int v15 = 0;
  krb5_unparse_name_fixed(a1, a4, (uint64_t)v17, 0x100uLL);
  krb5_kt_get_full_name(a1, a3, (char **)&v15);
  if (a5) {
    krb5_enctype_to_string((krb5_enctype)a1, a5, (size_t)&v14);
  }
  if (a6) {
    snprintf(__str, 0x19uLL, "(kvno %d)", a6);
  }
  else {
    __str[0] = 0;
  }
  uint64_t v11 = (const char *)v15;
  if (!v15) {
    uint64_t v11 = "unknown keytab";
  }
  krb5_keytab v12 = (const char *)v14;
  if (!v14) {
    krb5_keytab v12 = "unknown enctype";
  }
  krb5_set_error_message(a1, a2, "Failed to find %s%s in keytab %s (%s)", v17, __str, v11, v12);
  free(v15);
  if (v14) {
    free(v14);
  }
  return a2;
}

krb5_error_code krb5_kt_start_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor)
{
  size_t v3 = (uint64_t (*)(krb5_context))*((void *)keytab + 6);
  if (v3)
  {
    return v3(context);
  }
  else
  {
    krb5_set_error_message(context, -1980176636, "start_seq_get is not supported in the %s keytab type", *(const char **)keytab);
    return -1980176636;
  }
}

krb5_error_code krb5_kt_next_entry(krb5_context context, krb5_keytab keytab, krb5_keytab_entry *entry, krb5_kt_cursor *cursor)
{
  *(void *)&entry[1].krb5_magic magic = 0;
  *(_OWORD *)&entry->timestamp = 0u;
  *(_OWORD *)&entry->key.CFIndex length = 0u;
  *(_OWORD *)&entry->krb5_magic magic = 0u;
  uint64_t v4 = (uint64_t (*)(krb5_context))*((void *)keytab + 7);
  if (v4)
  {
    return v4(context);
  }
  else
  {
    krb5_set_error_message(context, -1980176636, "next_entry is not supported in the %s  keytab", *(const char **)keytab);
    return -1980176636;
  }
}

uint64_t krb5_kt_copy_entry_contents(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = krb5_copy_principal(a1, *(krb5_const_principal *)a2, (krb5_principal *)a3);
  if (v6
    || (uint64_t v6 = krb5_copy_keyblock_contents(a1, (const krb5_keyblock *)(a2 + 16), (krb5_keyblock *)(a3 + 16)), v6))
  {
    krb5_kt_free_entry(a1, a3);
  }
  else
  {
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 40);
  }
  return v6;
}

krb5_error_code krb5_kt_end_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor)
{
  size_t v3 = (uint64_t (*)(krb5_context))*((void *)keytab + 8);
  if (v3)
  {
    return v3(context);
  }
  else
  {
    krb5_set_error_message(context, -1980176636, "end_seq_get is not supported in the %s  keytab", *(const char **)keytab);
    return -1980176636;
  }
}

krb5_error_code krb5_kt_add_entry(krb5_context a1, krb5_keytab a2, krb5_keytab_entry *a3)
{
  if (*((void *)a2 + 9))
  {
    LODWORD(a3->key.contents) = time(0);
    uint64_t v6 = (uint64_t (*)(krb5_context, krb5_keytab, krb5_keytab_entry *))*((void *)a2 + 9);
    return v6(a1, a2, a3);
  }
  else
  {
    krb5_set_error_message(a1, -1765328201, "Add is not supported in the %s keytab", *(const char **)a2);
    return -1765328201;
  }
}

krb5_error_code krb5_kt_remove_entry(krb5_context a1, krb5_keytab a2, krb5_keytab_entry *a3)
{
  size_t v3 = (uint64_t (*)(krb5_context))*((void *)a2 + 10);
  if (v3)
  {
    return v3(a1);
  }
  else
  {
    krb5_set_error_message(a1, -1765328201, "Remove is not supported in the %s keytab", *(const char **)a2);
    return -1765328201;
  }
}

uint64_t krb5_kt_have_content(krb5_context a1, const char **a2)
{
  uint64_t v11 = 0;
  memset(&entry, 0, sizeof(entry));
  memset(cursor, 0, sizeof(cursor));
  long long v8 = 0;
  uint64_t v4 = a2[6];
  if (v4)
  {
    if (!((unsigned int (*)(krb5_context, const char **, krb5_kt_cursor *))v4)(a1, a2, cursor))
    {
      uint64_t v5 = krb5_kt_next_entry(a1, (krb5_keytab)a2, &entry, cursor);
      uint64_t v6 = a2[8];
      if (v6)
      {
        ((void (*)(krb5_context, const char **, krb5_kt_cursor *))v6)(a1, a2, cursor);
        if (!v5) {
          goto LABEL_11;
        }
      }
      else
      {
        krb5_set_error_message(a1, -1980176636, "end_seq_get is not supported in the %s  keytab", *a2);
        if (!v5)
        {
LABEL_11:
          krb5_kt_free_entry(a1, (uint64_t)&entry);
          return v5;
        }
      }
    }
  }
  else
  {
    krb5_set_error_message(a1, -1980176636, "start_seq_get is not supported in the %s keytab type", *a2);
  }
  uint64_t v5 = 2529639093;
  if (!krb5_kt_get_full_name(a1, (uint64_t)a2, (char **)&v8))
  {
    krb5_set_error_message(a1, -1765328203, "No entry in keytab: %s", (const char *)v8);
    free(v8);
  }
  return v5;
}

void _krb5_state_srv_sort(uint64_t a1)
{
  size_t v1 = *(unsigned int *)(a1 + 96);
  if (v1 >= 2)
  {
    qsort(*(void **)(a1 + 88), v1, 8uLL, (int (__cdecl *)(const void *, const void *))sub_213C963A8);
    size_t v3 = *(unsigned int *)(a1 + 96);
    if (v3 >= 2)
    {
      unsigned int v4 = 0;
      unint64_t v5 = 0;
      for (unint64_t i = 1; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(a1 + 88);
        int v8 = *(unsigned __int16 *)(*(void *)(v7 + 8 * v5) + 34);
        uint64_t v9 = *(void *)(v7 + 8 * i);
        if (v8 == *(unsigned __int16 *)(v9 + 34))
        {
          unsigned int v10 = *(_DWORD *)(v9 + 36) + v4;
          unint64_t v11 = v5;
        }
        else
        {
          unsigned int v10 = 0;
          if (v5 >= i) {
            goto LABEL_18;
          }
          unint64_t v11 = i;
          if (v4)
          {
            unint64_t v12 = v5;
            do
            {
              int v13 = ~*(_DWORD *)(a1 + 96);
              uint32_t v14 = arc4random() % v4;
              unint64_t v15 = v5;
              do
              {
                uint64_t v16 = *(void *)(*(void *)(a1 + 88) + 8 * v15);
                uint32_t v17 = *(_DWORD *)(v16 + 36);
                if ((v17 & 0x80000000) == 0)
                {
                  BOOL v18 = v14 >= v17;
                  v14 -= v17;
                  if (v14 == 0 || !v18)
                  {
                    v4 -= v17;
                    *(_DWORD *)(v16 + 36) = v13;
                    goto LABEL_15;
                  }
                }
                ++v15;
              }
              while (i != v15);
              sub_213C9C004(*(void *)(a1 + 32), 2, "o too large: sum %d", v4);
LABEL_15:
              ++v12;
            }
            while (v12 < i && v4);
            unsigned int v10 = 0;
            size_t v3 = *(unsigned int *)(a1 + 96);
LABEL_18:
            unint64_t v11 = i;
          }
        }
        unsigned int v4 = v10;
        unint64_t v5 = v11;
      }
    }
    krb5_error_code v19 = *(void **)(a1 + 88);
    qsort(v19, v3, 8uLL, (int (__cdecl *)(const void *, const void *))sub_213C963A8);
  }
}

uint64_t sub_213C963A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  int v3 = *(unsigned __int16 *)(*a1 + 34);
  int v4 = *(unsigned __int16 *)(*(void *)a2 + 34);
  uint64_t result = (v3 - v4);
  if (v3 == v4) {
    return (*(_DWORD *)(v2 + 36) - *(_DWORD *)(*(void *)a2 + 36));
  }
  return result;
}

size_t sub_213C963D0(const char *a1)
{
  size_t result = strlen(a1);
  if (result)
  {
    if (a1[result - 1] == 46) {
      a1[result - 1] = 0;
    }
  }
  return result;
}

void sub_213C9640C(void *a1)
{
  uint64_t v2 = (addrinfo *)a1[1];
  if (v2)
  {
    freeaddrinfo(v2);
    a1[1] = 0;
  }
  int v3 = (void *)a1[5];
  if (v3) {
    free(v3);
  }

  free(a1);
}

uint64_t krb5_krbhst_format_string(int a1, int *a2, char *__str, size_t __size)
{
  *(_DWORD *)&__stra[3] = 0;
  *(_DWORD *)__stra = 0;
  int v7 = *a2;
  if ((*a2 - 1) > 2) {
    int v8 = "";
  }
  else {
    int v8 = off_2641E4138[v7 - 1];
  }
  if (*((unsigned __int16 *)a2 + 2) != *((unsigned __int16 *)a2 + 3))
  {
    snprintf(__stra, 7uLL, ":%d", *((unsigned __int16 *)a2 + 2));
    int v7 = *a2;
  }
  if (v7 == 3)
  {
    uint64_t v9 = (const char *)*((void *)a2 + 5);
    unsigned int v10 = "/";
  }
  else
  {
    unsigned int v10 = "";
    uint64_t v9 = "";
  }
  snprintf(__str, __size, "%s%s%s%s%s", v8, (const char *)a2 + 48, __stra, v10, v9);
  return 0;
}

uint64_t krb5_krbhst_get_addrinfo(uint64_t a1, uint64_t a2, addrinfo **a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v5 = (addrinfo **)(a2 + 8);
  int v4 = *(addrinfo **)(a2 + 8);
  if (v4)
  {
    uint64_t result = 0;
  }
  else
  {
    memset(&v14, 0, sizeof(v14));
    int v8 = (char *)(a2 + 48);
    int v12 = *(unsigned __int16 *)(a2 + 4);
    int v13 = (char *)(a2 + 48);
    snprintf(__str, 0x20uLL, "%d", v12);
    sub_213C966BC((uint64_t)&v14, *(_DWORD *)a2);
    v14.ai_flags |= 0x1004u;
    uint64_t result = getaddrinfo(v8, __str, &v14, v5);
    if (result)
    {
      v14.ai_flags &= ~4u;
      if (strchr(v8, 46) && v8[strlen(v8) - 1] != 46)
      {
        if (asprintf(&v13, "%s.", v8) < 0) {
          return 12;
        }
        uint64_t v9 = v13;
        if (!v13) {
          return 12;
        }
      }
      else
      {
        uint64_t v9 = v8;
      }
      uint64_t v10 = getaddrinfo(v9, __str, &v14, v5);
      if (v13 != v8) {
        free(v13);
      }
      if (v10)
      {
        unint64_t v11 = __error();
        uint64_t result = krb5_eai_to_heim_errno(v10, *v11);
      }
      else
      {
        uint64_t result = 0;
      }
    }
    int v4 = *v5;
  }
  *a3 = v4;
  return result;
}

uint64_t sub_213C966BC(uint64_t result, unsigned int a2)
{
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_DWORD *)(result + 4) = 0;
  if (a2 <= 3) {
    *(_DWORD *)(result + 8) = dword_213CDA3F0[a2];
  }
  return result;
}

uint64_t krb5_krbhst_init(_krb5_context *a1, char *a2, int a3, uint64_t *a4)
{
  return krb5_krbhst_init_flags(a1, a2, a3, 0, a4);
}

uint64_t krb5_krbhst_init_flags(_krb5_context *a1, char *a2, int a3, int a4, uint64_t *a5)
{
  *a5 = 0;
  switch(a3)
  {
    case 3:
      unsigned int v14 = krb5_getportbyname((int)a1, "kpasswd", "udp", 0x1D0u);
      unint64_t v15 = "change_password";
      uint64_t v16 = sub_213C96DC8;
      break;
    case 2:
      unsigned int v14 = krb5_getportbyname((int)a1, "kerberos-adm", "tcp", 0x2EDu);
      unint64_t v15 = "admin";
      uint64_t v16 = sub_213C96C14;
      break;
    case 1:
      unsigned int v14 = krb5_getportbyname((int)a1, "kerberos", "udp", 0x58u);
      unint64_t v15 = "kdc";
      uint64_t v16 = sub_213C96914;
      break;
    default:
      uint64_t v24 = 25;
      krb5_set_error_message(a1, 25, "unknown krbhst type (%u)", a3);
      return v24;
  }
  uint32_t v17 = v16;
  uint64_t v18 = heim_uniq_alloc(0xF0uLL, (uint64_t)"krbhst-context", (uint64_t)sub_213C99888, v9, v10, v11, v12, v13);
  if (!v18) {
    return 12;
  }
  uint64_t v19 = v18;
  long long v20 = strdup(a2);
  *(void *)(v19 + 96) = v20;
  if (!v20
    || (dispatch_queue_t v21 = sub_213CD8578("krbhst-srv"), (*(void *)(v19 + 200) = v21) == 0)
    || (dispatch_queue_t v22 = sub_213CD8578("krbhst-addrinfo"), (*(void *)(v19 + 208) = v22) == 0))
  {
    heim_release((CFTypeRef)v19);
    return 12;
  }
  unsigned int v23 = bswap32(v14);
  sub_213C9C004((uint64_t)a1, 2, "Trying to find service %s for realm %s flags %x", v15, a2, a4);
  if (!strchr(a2, 46)) {
    *(_DWORD *)(v19 + 104) |= 0x100u;
  }
  if ((a4 & 2) != 0) {
    *(_DWORD *)(v19 + 104) |= 0x200u;
  }
  *(void *)(v19 + 176) = v19 + 168;
  *(void *)(v19 + 184) = v19 + 168;
  pthread_mutex_init((pthread_mutex_t *)(v19 + 32), 0);
  uint64_t v24 = 0;
  *(void *)(v19 + 120) = v17;
  *(_DWORD *)(v19 + 108) = HIWORD(v23);
  *a5 = v19;
  return v24;
}

uint64_t sub_213C96914(_krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(a2 + 104);
  if ((v11 & 0x800) == 0)
  {
    *(_DWORD *)(a2 + 104) = v11 | 0x800;
    if (*(void *)(a2 + 128))
    {
      sub_213C9C004((uint64_t)a1, 5, "adding hostname: %s", *(const char **)(a2 + 128));
      sub_213C97AD4((uint64_t)a1, a2, (uint64_t)"hostname", *(char **)(a2 + 128), *(_DWORD *)(a2 + 108), *(_DWORD *)(a2 + 112));
    }
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 0x400) == 0)
  {
    sub_213C97364((uint64_t)a1, a2, 1u);
    *(_DWORD *)(a2 + 104) |= 0x400u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 1) == 0)
  {
    sub_213C973DC((uint64_t)a1, a2, (uint64_t)"kdc", a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 104) |= 1u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = 2529639068;
    sub_213C9C004((uint64_t)a1, 1, "Configuration exists for realm %s, wont go to DNS");
    return v12;
  }
  if (!*((_DWORD *)a1 + 61)) {
    goto LABEL_32;
  }
  if ((v11 & 0x10) == 0)
  {
    uint64_t v13 = *(void *)(a2 + 136);
    if (v13)
    {
      sub_213C974D8(a1, a2, v13, "tcp", "kerberos");
      *(_DWORD *)(a2 + 104) |= 0x10u;
      if (sub_213C9704C(a2, a3)) {
        return 0;
      }
      int v11 = *(_DWORD *)(a2 + 104);
    }
  }
  if ((v11 & 4) == 0)
  {
    sub_213C974D8(a1, a2, 0, "tcp", "kerberos");
    *(_DWORD *)(a2 + 104) |= 4u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 0x202) != 0)
  {
    if ((v11 & 0x40) != 0) {
      goto LABEL_30;
    }
  }
  else
  {
    sub_213C974D8(a1, a2, 0, "udp", "kerberos");
    *(_DWORD *)(a2 + 104) |= 2u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
    if ((v11 & 0x40) != 0) {
      goto LABEL_30;
    }
  }
  sub_213C974D8(a1, a2, 0, "kkdcp", "kerberos");
  *(_DWORD *)(a2 + 104) |= 0x40u;
  if (sub_213C9704C(a2, a3)) {
    return 0;
  }
  int v11 = *(_DWORD *)(a2 + 104);
LABEL_30:
  if ((v11 & 0x20) == 0)
  {
    sub_213C974D8(a1, a2, 0, "http", "kerberos");
    *(_DWORD *)(a2 + 104) |= 0x20u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
  }
LABEL_32:
  while (1)
  {
    unsigned int v15 = *(_DWORD *)(a2 + 104);
    if ((v15 & 0x80) != 0) {
      break;
    }
    uint64_t v12 = sub_213C978AC((uint64_t)a1, a2, *(_DWORD *)(a2 + 108), (v15 >> 9) & 1, a5, a6, a7, a8);
    if (v12 || sub_213C9704C(a2, a3)) {
      return v12;
    }
  }
  uint64_t v12 = 2529639068;
  sub_213C9C004((uint64_t)a1, 0, "No KDC entries found for %s");
  return v12;
}

uint64_t sub_213C96C14(_krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(a2 + 104);
  if ((v11 & 0x400) == 0)
  {
    sub_213C97364((uint64_t)a1, a2, 3u);
    *(_DWORD *)(a2 + 104) |= 0x400u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 1) == 0)
  {
    sub_213C973DC((uint64_t)a1, a2, (uint64_t)"admin_server", a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 104) |= 1u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = 2529639068;
    sub_213C9C004((uint64_t)a1, 1, "Configuration exists for realm %s, wont go to DNS");
    return v12;
  }
  if ((v11 & 4) != 0
    || !*((_DWORD *)a1 + 61)
    || (sub_213C974D8(a1, a2, 0, "tcp", "kerberos-adm"), *(_DWORD *)(a2 + 104) |= 4u, !sub_213C9704C(a2, a3)))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
    uint64_t v13 = *(void *)(a2 + 176);
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 32));
    if (v13 != a2 + 168) {
      goto LABEL_17;
    }
    unsigned int v18 = *(_DWORD *)(a2 + 104);
    if ((v18 & 0x80) != 0) {
      goto LABEL_17;
    }
    uint64_t v12 = sub_213C978AC((uint64_t)a1, a2, *(_DWORD *)(a2 + 108), (v18 >> 9) & 1, v14, v15, v16, v17);
    if (v12) {
      return v12;
    }
    *(_DWORD *)(a2 + 104) |= 0x80u;
    if (!sub_213C9704C(a2, a3))
    {
LABEL_17:
      uint64_t v12 = 2529639068;
      sub_213C9C004((uint64_t)a1, 0, "No admin entries found for realm %s");
      return v12;
    }
  }
  return 0;
}

uint64_t sub_213C96DC8(_krb5_context *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(a2 + 104);
  if ((v11 & 0x400) == 0)
  {
    sub_213C97364((uint64_t)a1, a2, 5u);
    *(_DWORD *)(a2 + 104) |= 0x400u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 1) == 0)
  {
    sub_213C973DC((uint64_t)a1, a2, (uint64_t)"kpasswd_server", a4, a5, a6, a7, a8);
    *(_DWORD *)(a2 + 104) |= 1u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
    int v11 = *(_DWORD *)(a2 + 104);
  }
  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = 2529639068;
    sub_213C9C004((uint64_t)a1, 1, "Configuration exists for realm %s, wont go to DNS");
    return v12;
  }
  if (*((_DWORD *)a1 + 61))
  {
    if ((v11 & 0x202) != 0)
    {
      if ((v11 & 4) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_213C974D8(a1, a2, 0, "udp", "kpasswd");
      *(_DWORD *)(a2 + 104) |= 2u;
      if (sub_213C9704C(a2, a3)) {
        return 0;
      }
      if ((*(_DWORD *)(a2 + 104) & 4) != 0) {
        goto LABEL_17;
      }
    }
    sub_213C974D8(a1, a2, 0, "tcp", "kpasswd");
    *(_DWORD *)(a2 + 104) |= 4u;
    if (sub_213C9704C(a2, a3)) {
      return 0;
    }
  }
LABEL_17:
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
  uint64_t v13 = *(void *)(a2 + 176);
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 32));
  if (v13 == a2 + 168)
  {
    *(_DWORD *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 108);
    *(void *)(a2 + 120) = sub_213C96C14;
    uint64_t v12 = sub_213C96C14(a1, a2, a3, v14, v15, v16, v17, v18);
    if (!v12) {
      *(_DWORD *)*a3 = (*(_DWORD *)(a2 + 104) >> 9) & 1;
    }
  }
  else
  {
    uint64_t v12 = 2529639068;
    sub_213C9C004((uint64_t)a1, 0, "No kpasswd entries found for realm %s");
  }
  return v12;
}

uint64_t krb5_krbhst_next(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_213C9704C(a2, a3)) {
    return 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, void *))(a2 + 120);

  return v7(a1, a2, a3);
}

BOOL sub_213C9704C(uint64_t a1, void *a2)
{
  int v4 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  uint64_t v5 = **(void **)(a1 + 176);
  if (v5)
  {
    *a2 = v5;
    *(void *)(a1 + 176) = **(void **)(a1 + 176) + 16;
  }
  BOOL v6 = v5 != 0;
  pthread_mutex_unlock(v4);
  return v6;
}

uint64_t krb5_krbhst_next_as_string(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  *(void *)uint64_t v9 = 0;
  LODWORD(result) = sub_213C9704C(a2, v9);
  if (result
    || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(a2 + 120))(a1, a2, v9), !result))
  {
    krb5_krbhst_format_string(result, *(int **)v9, a3, a4);
    return 0;
  }
  return result;
}

uint64_t krb5_krbhst_set_hostname(_krb5_context *a1, uint64_t a2, char *__s1)
{
  BOOL v6 = *(void **)(a2 + 128);
  if (v6) {
    free(v6);
  }
  int v7 = strdup(__s1);
  *(void *)(a2 + 128) = v7;
  if (v7) {
    return 0;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_krbhst_set_sitename(_krb5_context *a1, uint64_t a2, char *__s1)
{
  BOOL v6 = *(void **)(a2 + 136);
  if (v6) {
    free(v6);
  }
  int v7 = strdup(__s1);
  *(void *)(a2 + 136) = v7;
  if (v7) {
    return 0;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_krbhst_set_delgated_uuid(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (a3)
  {
    *(_DWORD *)(a2 + 104) |= 0x1000u;
    *(_OWORD *)(a2 + 144) = *(_OWORD *)a3;
    sub_213C9C004(a1, 5, "krb5_krbhst_set_delegated_uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", *a3, a3[1], a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], a3[12], a3[13], a3[14], a3[15]);
  }
  return 0;
}

uint64_t krb5_krbhst_set_delgated_pid(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    *(_DWORD *)(a2 + 104) |= 0x1000u;
    *(_DWORD *)(a2 + 160) = a3;
    sub_213C9C004(a1, 5, "krb5_krbhst_set_delegated_pid: %d", a3);
  }
  return 0;
}

uint64_t krb5_krbhst_reset(uint64_t a1, uint64_t a2)
{
  int v3 = (pthread_mutex_t *)(a2 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
  *(void *)(a2 + 176) = a2 + 168;

  return pthread_mutex_unlock(v3);
}

void krb5_krbhst_free(uint64_t a1, const void *a2)
{
}

uint64_t sub_213C97364(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v5[1] = a2;
  v5[0] = a3;
  v5[2] = krb5_homedir_access(a1) != 0;
  return krb5_plugin_run_f(a1, "krb5", "service_locator", 0, 0, (uint64_t)v5, (uint64_t)sub_213C97EC4);
}

void sub_213C973DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  strings = (void **)krb5_config_get_strings(a1, 0, a3, a4, a5, a6, a7, a8, (uint64_t)"realms");
  int v11 = "";
  if (!strings) {
    int v11 = " not";
  }
  sub_213C9C004(a1, 2, "configuration file for realm %s%s found", *(const char **)(a2 + 96), v11);
  if (strings)
  {
    *(_DWORD *)(a2 + 104) |= 0x100u;
    uint64_t v12 = (char *)*strings;
    if (*strings)
    {
      uint64_t v13 = (char **)(strings + 1);
      do
      {
        sub_213C97AD4(a1, a2, (uint64_t)"config", v12, *(_DWORD *)(a2 + 108), *(_DWORD *)(a2 + 112));
        uint64_t v14 = *v13++;
        uint64_t v12 = v14;
      }
      while (v14);
    }
    krb5_config_free_strings(strings);
  }
}

void sub_213C974D8(_krb5_context *a1, uint64_t a2, uint64_t a3, char *a4, char *a5)
{
  unint64_t v27 = 0;
  if (!krb5_realm_is_lkdc(*(const char **)(a2 + 96)))
  {
    if (!strcasecmp(a4, "udp"))
    {
      int v10 = 0;
    }
    else
    {
      if (strcasecmp(a4, "tcp"))
      {
        if (!strcasecmp(a4, "http"))
        {
          uint64_t v12 = 0;
          unsigned int v11 = bswap32(krb5_getportbyname((int)a1, "http", "tcp", 0x50u)) >> 16;
          int v10 = 2;
        }
        else
        {
          if (strcasecmp(a4, "kkdcp"))
          {
            return;
          }
          unsigned int v11 = bswap32(krb5_getportbyname((int)a1, "https", "tcp", 0x1BBu)) >> 16;
          uint64_t v12 = "kkdcp";
          int v10 = 3;
        }
LABEL_13:
        if (a3) {
          asprintf(&v27, "_%s._%s.%s._sites.%s.");
        }
        else {
          asprintf(&v27, "_%s._%s.%s.");
        }
        if (v27)
        {
          uint64_t v18 = heim_uniq_alloc(0x68uLL, (uint64_t)"heim-query-ctx", (uint64_t)sub_213C981B8, v13, v14, v15, v16, v17);
          if (v18)
          {
            uint64_t v19 = v18;
            *(void *)(v18 + 32) = a1;
            dispatch_semaphore_t v20 = j__dispatch_semaphore_create(0);
            *(void *)(v19 + 40) = v20;
            *(void *)(v19 + 56) = v27;
            if (v20)
            {
              dispatch_queue_t v21 = (char **)heim_retain((CFTypeRef)a2);
              *(void *)(v19 + 48) = v21;
              *(_DWORD *)(v19 + 64) = v11;
              *(_DWORD *)(v19 + 68) = v10;
              *(void *)(v19 + 72) = v12;
              *(void *)(v19 + 88) = 0;
              *(_DWORD *)(v19 + 96) = 0;
              int v29 = 69632;
              if (*(void *)(a2 + 216)) {
                goto LABEL_20;
              }
              if ((*(unsigned char *)(a2 + 105) & 0x10) != 0) {
                int DelegateConnection = DNSServiceCreateDelegateConnection();
              }
              else {
                int DelegateConnection = DNSServiceCreateConnection((DNSServiceRef *)(a2 + 216));
              }
              if (DelegateConnection)
              {
                sub_213C9C004((uint64_t)a1, 2, "Failed setting up search context for domain %s failed: %d");
              }
              else
              {
                if (!DNSServiceSetDispatchQueue(*(DNSServiceRef *)(a2 + 216), *(dispatch_queue_t *)(a2 + 200)))
                {
                  dispatch_queue_t v21 = *(char ***)(v19 + 48);
LABEL_20:
                  uint32_t v22 = sub_213C9833C((uint64_t)a1, v21[12], a2, &v29);
                  DNSServiceRef sdRef = *(DNSServiceRef *)(a2 + 216);
                  heim_retain((CFTypeRef)v19);
                  if (DNSServiceQueryRecord(&sdRef, v29 | 0x4000, v22, *(const char **)(v19 + 56), 0x21u, 1u, (DNSServiceQueryRecordReply)sub_213C98674, (void *)v19))
                  {
                    sub_213C9C004((uint64_t)a1, 2, "searching DNS for domain %s failed: %d");
                  }
                  else
                  {
                    uint64_t v24 = *(NSObject **)(v19 + 40);
                    dispatch_time_t v25 = dispatch_time(0, 10000000000);
                    if (dispatch_semaphore_wait(v24, v25)) {
                      sub_213C9C004((uint64_t)a1, 2, "searching DNS %s for domain timed out", *(const char **)(v19 + 56));
                    }
                    uint64_t v26 = *(NSObject **)(a2 + 200);
                    block[0] = MEMORY[0x263EF8330];
                    block[1] = 0x40000000;
                    block[2] = sub_213C98F34;
                    block[3] = &unk_2641E4010;
                    block[4] = sdRef;
                    void block[5] = v19;
                    dispatch_sync(v26, block);
                  }
                  goto LABEL_35;
                }
                DNSServiceRefDeallocate(*(DNSServiceRef *)(a2 + 216));
                sub_213C9C004((uint64_t)a1, 2, "Failed setting run queue for SRV query: %d");
              }
LABEL_35:
              heim_release((CFTypeRef)v19);
              return;
            }
            heim_release((CFTypeRef)v19);
          }
          else
          {
            free(v27);
          }
        }
        krb5_enomem(a1);
        return;
      }
      int v10 = 1;
    }
    unsigned int v11 = *(_DWORD *)(a2 + 112);
    uint64_t v12 = 0;
    if (!v11) {
      unsigned int v11 = bswap32(krb5_getportbyname((int)a1, a5, a4, 0x58u)) >> 16;
    }
    goto LABEL_13;
  }
}

uint64_t sub_213C978AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  uint64_t v24 = *MEMORY[0x263EF8340];
  __s = 0;
  uint64_t result = krb5_config_get_BOOL_default(a1, 0, 0, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  if (!result) {
    goto LABEL_5;
  }
  sub_213C9C004(a1, 2, "fallback lookup %d for realm %s (service %s)", *(_DWORD *)(a2 + 164), *(const char **)(a2 + 96), "kerberos");
  if (*(_DWORD *)(a2 + 164) > 4u || krb5_realm_is_lkdc(*(const char **)(a2 + 96)))
  {
LABEL_4:
    uint64_t result = 0;
LABEL_5:
    *(_DWORD *)(a2 + 104) |= 0x80u;
    return result;
  }
  dispatch_queue_t v21 = 0;
  memset(&v20, 0, sizeof(v20));
  if (*(_DWORD *)(a2 + 164)) {
    int v13 = asprintf(&__s, "%s-%d.%s.");
  }
  else {
    int v13 = asprintf(&__s, "%s.%s.");
  }
  int v14 = v13;
  uint64_t result = 12;
  if ((v14 & 0x80000000) == 0 && __s)
  {
    sub_213C966BC((uint64_t)&v20, v8);
    snprintf(__str, 0x20uLL, "%d", a3);
    if (getaddrinfo(__s, __str, &v20, &v21))
    {
      free(__s);
      goto LABEL_4;
    }
    size_t v15 = strlen(__s);
    uint64_t v16 = (int *)malloc_type_calloc(1uLL, v15 + 56, 0x5B6B3234uLL);
    if (v16)
    {
      uint64_t v17 = v16;
      int *v16 = v8;
      *((_WORD *)v16 + 3) = a3;
      *((_WORD *)v16 + 2) = a3;
      uint64_t v18 = __s;
      *((void *)v16 + 1) = v21;
      *((void *)v16 + 4) = "fallback";
      uint64_t v19 = (char *)(v16 + 12);
      memmove(v16 + 12, v18, v15);
      v19[v15] = 0;
      free(__s);
      sub_213C97DBC(a1, a2, v17);
      uint64_t result = 0;
      ++*(_DWORD *)(a2 + 164);
    }
    else
    {
      free(__s);
      return 12;
    }
  }
  return result;
}

uint64_t sub_213C97AD4(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, __int16 a5, int a6)
{
  LOWORD(v7) = a5;
  unsigned int v8 = __s;
  size_t v12 = strlen(__s);
  int v13 = malloc_type_calloc(1uLL, v12 + 56, 0x9128AF0AuLL);
  if (!v13) {
    return 12;
  }
  int v14 = v13;
  _DWORD *v13 = (*(_DWORD *)(a2 + 104) >> 9) & 1;
  if (!strncmp(v8, "http://", 7uLL))
  {
    *(_DWORD *)int v14 = 2;
    v8 += 7;
    goto LABEL_14;
  }
  if (!strncmp(v8, "http/", 5uLL))
  {
    *(_DWORD *)int v14 = 2;
    v8 += 5;
    size_t v15 = "http";
    int v16 = a1;
    unsigned int v17 = 80;
LABEL_11:
    unsigned int v7 = bswap32(krb5_getportbyname(v16, v15, "tcp", v17)) >> 16;
    goto LABEL_14;
  }
  if (!strncmp(v8, "kkdcp://", 8uLL))
  {
    *(_DWORD *)int v14 = 3;
    v8 += 8;
    size_t v15 = "https";
    int v16 = a1;
    unsigned int v17 = 443;
    goto LABEL_11;
  }
  if (!strncmp(v8, "tcp/", 4uLL))
  {
    *(_DWORD *)int v14 = 1;
    goto LABEL_13;
  }
  if (!strncmp(v8, "udp/", 4uLL))
  {
    *(_DWORD *)int v14 = 0;
LABEL_13:
    v8 += 4;
  }
LABEL_14:
  *((void *)v14 + 4) = a3;
  if (*v8 == 91)
  {
    uint64_t v18 = strchr(v8, 93);
    if (v18)
    {
      uint64_t v19 = v18;
      addrinfo v20 = v8 + 1;
      size_t v21 = (size_t)&v18[~(unint64_t)v8];
      memcpy(v14 + 24, v20, v21);
      *((unsigned char *)v14 + v21 + 48) = 0;
      int v23 = v19[1];
      uint32_t v22 = v19 + 1;
      BOOL v24 = v23 == 58;
      if (v23 == 58) {
        unsigned int v8 = v22 + 1;
      }
      else {
        unsigned int v8 = v22;
      }
      if (v24) {
        dispatch_time_t v25 = v22 + 1;
      }
      else {
        dispatch_time_t v25 = 0;
      }
LABEL_25:
      unsigned int v8 = strchr(v8, 47);
      if (!v8) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
  }
  dispatch_time_t v25 = (const char *)strcspn(v8, ":/");
  if (!v25)
  {
    size_t v28 = strlen(v8);
    memcpy(v14 + 24, v8, v28 + 1);
LABEL_28:
    int v27 = *v8;
    goto LABEL_30;
  }
  memcpy(v14 + 24, v8, (size_t)v25);
  v25[(void)v14 + 48] = 0;
  uint64_t v26 = &v25[(void)v8];
  int v27 = v25[(void)v8];
  if (v27 == 58)
  {
    dispatch_time_t v25 = v26 + 1;
    goto LABEL_25;
  }
  dispatch_time_t v25 = 0;
  unsigned int v8 = (char *)v26;
LABEL_30:
  if (v27 == 47) {
    *((void *)v14 + 5) = strdup(v8 + 1);
  }
LABEL_32:
  rk_strlwr((unsigned __int8 *)v14 + 48);
  v14[3] = v7;
  uint64_t v14[2] = v7;
  if (v25)
  {
    if (*v25)
    {
      __endptr = 0;
      uint64_t v14[2] = strtol(v25, &__endptr, 0);
      if (__endptr == v25)
      {
        size_t v30 = (void *)*((void *)v14 + 5);
        if (v30) {
          free(v30);
        }
        free(v14);
        return 12;
      }
    }
  }
  if (a6) {
    uint64_t v14[2] = a6;
  }
  sub_213C97DBC(a1, a2, (int *)v14);
  return 0;
}

uint64_t sub_213C97DBC(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v11 = (pthread_mutex_t *)(a2 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 32));
  if (a3)
  {
    do
    {
      uint64_t v5 = (int *)*((void *)a3 + 2);
      *((void *)a3 + 2) = 0;
      BOOL v6 = *(int **)(a2 + 168);
      if (v6)
      {
        int v7 = *a3;
        while (1)
        {
          int v8 = *v6;
          if (*v6 == v7)
          {
            int v9 = *((unsigned __int16 *)v6 + 2);
            if (v9 == *((unsigned __int16 *)a3 + 2) && !strcasecmp((const char *)v6 + 48, (const char *)a3 + 48)) {
              break;
            }
          }
          BOOL v6 = (int *)*((void *)v6 + 2);
          if (!v6) {
            goto LABEL_8;
          }
        }
        sub_213C9C004(a1, 10, "dropping dup KDC host: %s:%d (proto %d)", (const char *)v6 + 48, v9, v8);
        sub_213C9640C(a3);
      }
      else
      {
LABEL_8:
        **(void **)(a2 + 184) = a3;
        *(void *)(a2 + 184) = a3 + 4;
      }
      a3 = v5;
    }
    while (v5);
  }

  return pthread_mutex_unlock(v11);
}

uint64_t sub_213C97EC4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(int *)a2 >= 3)
  {
    int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void *))(a2 + 40);
    if (v4)
    {
      uint64_t v5 = *a4;
      uint64_t v6 = *((void *)a4 + 2);
      uint64_t v7 = *(void *)(*((void *)a4 + 1) + 96);
      int v8 = sub_213C97F78;
      return v4(a3, v6, v5, v7, 0, 0, v8);
    }
LABEL_5:
    int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void *))(a2 + 32);
    uint64_t v5 = *a4;
    uint64_t v6 = *((void *)a4 + 2);
    uint64_t v7 = *(void *)(*((void *)a4 + 1) + 96);
    int v8 = sub_213C97F94;
    return v4(a3, v6, v5, v7, 0, 0, v8);
  }
  if (*(_DWORD *)a2 == 2) {
    goto LABEL_5;
  }
  if (a4[4]) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t (*)(_DWORD *, uint64_t, const sockaddr *)))(a2 + 24))(a3, *a4, *(void *)(*((void *)a4 + 1) + 96), 0, 0, sub_213C97F94);
  }
  else {
    return 2529639161;
  }
}

uint64_t sub_213C97F78(uint64_t a1, char *__s)
{
  return sub_213C97AD4(*(void *)(a1 + 192), a1, (uint64_t)"plugin", __s, *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 112));
}

uint64_t sub_213C97F94(_DWORD *a1, uint64_t a2, const sockaddr *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  socklen_t v5 = rk_socket_sockaddr_size((uint64_t)a3);
  __int16 v6 = sub_213CB9448((uint64_t)a3);
  if (getnameinfo(a3, v5, v11, 0x401u, __str, 0x20u, 10)) {
    return 0;
  }
  int v8 = a1[28];
  if (!v8)
  {
    if (atoi(__str)) {
      goto LABEL_6;
    }
    int v8 = a1[27];
  }
  snprintf(__str, 0x20uLL, "%d", v8);
LABEL_6:
  unsigned int v9 = (a1[26] >> 9) & 1;
  uint64_t result = sub_213C980C0((uint64_t)a1, v11, __str, v6, v9);
  if (!result)
  {
    if (v9) {
      return 0;
    }
    uint64_t result = sub_213C980C0((uint64_t)a1, v11, __str, v6, 1u);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_213C980C0(uint64_t a1, const char *a2, const char *a3, __int16 a4, unsigned int a5)
{
  memset(&v16, 0, sizeof(v16));
  size_t v15 = 0;
  sub_213C966BC((uint64_t)&v16, a5);
  if (!getaddrinfo(a2, a3, &v16, &v15))
  {
    size_t v10 = strlen(a2);
    unsigned int v11 = (int *)malloc_type_calloc(1uLL, v10 + 56, 0x22497B9CuLL);
    if (!v11) {
      return 12;
    }
    uint64_t v12 = v11;
    *unsigned int v11 = a5;
    *((_WORD *)v11 + 3) = a4;
    *((_WORD *)v11 + 2) = a4;
    *((void *)v11 + 1) = v15;
    *((void *)v11 + 4) = "plugin";
    int v13 = (char *)(v11 + 12);
    memmove(v11 + 12, a2, v10);
    v13[v10] = 0;
    sub_213C97DBC(*(void *)(a1 + 192), a1, v12);
  }
  return 0;
}

void sub_213C981B8(uint64_t a1)
{
  free(*(void **)(a1 + 56));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  int v3 = *(void **)(a1 + 88);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 96))
    {
      unint64_t v4 = 0;
      uint64_t v5 = MEMORY[0x263EF8330];
      do
      {
        __int16 v6 = *(NSObject **)(*(void *)(a1 + 48) + 208);
        v7[0] = v5;
        v7[1] = 0x40000000;
        v7[2] = sub_213C982B0;
        v7[3] = &unk_2641E3FF0;
        v7[4] = a1;
        v7[5] = v4;
        dispatch_sync(v6, v7);
        heim_release(*(CFTypeRef *)(*(void *)(a1 + 88) + 8 * v4++));
      }
      while (v4 < *(unsigned int *)(a1 + 96));
      int v3 = *(void **)(a1 + 88);
    }
    free(v3);
    *(_DWORD *)(a1 + 96) = 0;
  }
  heim_release(*(CFTypeRef *)(a1 + 48));
}

void sub_213C982B0(uint64_t a1)
{
  uint64_t v2 = *(_DNSServiceRef_t **)(*(void *)(*(void *)(*(void *)(a1 + 32) + 88) + 8 * *(void *)(a1 + 40)) + 64);
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    uint64_t v3 = *(void *)(a1 + 40);
    *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 88) + 8 * v3) + 64) = 0;
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 88) + 8 * v3);
    if ((*(unsigned char *)(v4 + 96) & 1) == 0)
    {
      *(unsigned char *)(v4 + 96) |= 1u;
      uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 88) + 8 * *(void *)(a1 + 40));
      heim_release(v5);
    }
  }
}

uint64_t sub_213C9833C(uint64_t a1, char *__s1, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = (unsigned __int8 *)strdup(__s1);
  rk_strlwr(v7);
  nw_endpoint_t host = nw_endpoint_create_host((const char *)v7, "88");
  if (host)
  {
    nw_endpoint_t v9 = host;
    nw_parameters_t v10 = nw_parameters_create();
    if (v10)
    {
      nw_parameters_t v11 = v10;
      if ((*(unsigned char *)(a3 + 105) & 0x10) != 0)
      {
        sub_213C9C004(a1, 5, "host_create(%s): have delegate uuid", (const char *)v7);
        nw_parameters_set_e_proc_uuid();
      }
      else
      {
        getpid();
        nw_parameters_set_pid();
      }
      uint64_t evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
      if (evaluator_for_endpoint)
      {
        size_t v15 = evaluator_for_endpoint;
        uint64_t v16 = nw_path_evaluator_copy_path();
        if (v16)
        {
          unsigned int v17 = (void *)v16;
          if (nw_path_is_flow_divert())
          {
            if (nw_path_get_vpn_config_id())
            {
              sub_213C9C004(a1, 5, "host_create(%s): vpn config uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", (const char *)v7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0);
              nw_path_is_per_app_vpn();
              dns_service_krb5_ccache id = ne_session_service_get_dns_service_id();
              sub_213C9C004(a1, 5, "host_create(%s): AppVPN: %d", (const char *)v7, dns_service_id);
              if (dns_service_id) {
                *a4 |= 0x10000000u;
              }
            }
            else
            {
              sub_213C9C004(a1, 5, "host_create(%s): path have no config id", (const char *)v7);
              dns_service_krb5_ccache id = 0;
            }
            addrinfo v20 = 0;
          }
          else
          {
            uint64_t v19 = nw_path_copy_scoped_interface();
            addrinfo v20 = v19;
            if (v19)
            {
              dns_service_krb5_ccache id = nw_interface_get_index(v19);
              sub_213C9C004(a1, 5, "host_create(%s): use dns_service_id %d", (const char *)v7, dns_service_id);
            }
            else
            {
              sub_213C9C004(a1, 5, "host_create(%s): no interface", (const char *)v7);
              dns_service_krb5_ccache id = 0;
            }
          }
          nw_release(v17);
          nw_release(v9);
          nw_release(v15);
          if (v20) {
            nw_release(v20);
          }
LABEL_27:
          nw_release(v11);
          if (!v7) {
            return dns_service_id;
          }
          goto LABEL_8;
        }
        sub_213C9C004(a1, 5, "host_create(%s): path is NULL", (const char *)v7);
        nw_release(v9);
        nw_endpoint_t v18 = v15;
      }
      else
      {
        sub_213C9C004(a1, 5, "host_create(%s): nw_path_evaluator_t is NULL", (const char *)v7);
        nw_endpoint_t v18 = v9;
      }
      nw_release(v18);
      dns_service_krb5_ccache id = 0;
      goto LABEL_27;
    }
    sub_213C9C004(a1, 5, "host_create(%s): nw_parameters_t is NULL", (const char *)v7);
    nw_release(v9);
  }
  else
  {
    sub_213C9C004(a1, 5, "host_create(%s): nw_endpoint_t host is NULL", (const char *)v7);
  }
  dns_service_krb5_ccache id = 0;
  if (v7) {
LABEL_8:
  }
    free(v7);
  return dns_service_id;
}

void sub_213C98674(uint64_t a1, char a2, uint64_t a3, int a4, const char *a5, int a6, uint64_t a7, unsigned int a8, const u_char *a9, uint64_t a10, uint64_t a11)
{
  if (*(unsigned char *)(a11 + 80))
  {
    uint64_t v13 = *(void *)(a11 + 32);
    sub_213C9C004(v13, 10, "Got SRV callback after MoreComing == 0 was already set!");
    return;
  }
  if (a4)
  {
    sub_213C9C004(*(void *)(a11 + 32), 10, "SRV callback: error: %d", a4);
    char v12 = 0;
LABEL_11:
    size_t v15 = (uint64_t *)(a11 + 32);
    sub_213C9C004(*(void *)(a11 + 32), 10, "SRV callback end: %s", a5);
    goto LABEL_12;
  }
  char v12 = a2;
  if (a6 != 33)
  {
    sub_213C9C004(*(void *)(a11 + 32), 10, "SRV callback: rd_len no srv query");
    goto LABEL_11;
  }
  if (a8 <= 6)
  {
    sub_213C9C004(*(void *)(a11 + 32), 10, "SRV callback: rd_len too short: %d");
    goto LABEL_11;
  }
  unsigned int v40 = __rev16(*(unsigned __int16 *)a9);
  unsigned int v41 = __rev16(*((unsigned __int16 *)a9 + 1));
  unsigned int v42 = __rev16(*((unsigned __int16 *)a9 + 2));
  size_t v15 = (uint64_t *)(a11 + 32);
  sub_213C9C004(*(void *)(a11 + 32), 10, "Got SRV callback: %s:%d prio: %d weight: %d", a5, v42, v40, v41);
  krb5_magic v43 = (char *)malloc_type_malloc(a8 + 1, 0x30EA6D39uLL);
  if (!v43)
  {
    sub_213C9C004(*v15, 10, "SRV callback: failed to allocate hostname", v71);
    goto LABEL_11;
  }
  uint64_t v44 = v43;
  unsigned int v45 = res_9_dn_expand(a9, &a9[a8], a9 + 6, v43, a8);
  if ((v45 & 0x80000000) != 0 || (unint64_t)v45 + 6 > a8)
  {
    sub_213C9C004(*v15, 10, "SRV callback: dn_expand: %d");
LABEL_64:
    sub_213C9C004(*v15, 10, "SRV callback end: %s", a5);
    free(v44);
    goto LABEL_12;
  }
  size_t v46 = strlen(v44);
  if (v46 && v44[v46 - 1] == 46) {
    v44[v46 - 1] = 0;
  }
  if (sub_213C98F90(*v15, (uint64_t)v44)) {
    goto LABEL_64;
  }
  uint64_t v52 = heim_uniq_alloc(0x68uLL, (uint64_t)"heim-srv-object", (uint64_t)sub_213C9905C, v47, v48, v49, v50, v51);
  if (!v52)
  {
    sub_213C9C004(*v15, 10, "SRV callback: alloc heim-srv-object");
    goto LABEL_64;
  }
  uint64_t v53 = v52;
  *(_WORD *)(v52 + 32) = v42;
  *(_WORD *)(v52 + 34) = v40;
  *(_DWORD *)(v52 + 36) = v41;
  *(void *)(v52 + 40) = a11;
  *(void *)(v52 + 80) = v44;
  uint64_t v54 = *(_krb5_context **)(a11 + 32);
  if ((*(unsigned char *)(*(void *)(a11 + 48) + 105) & 0x10) != 0)
  {
    char v58 = sub_213C89F14(v54);
    uint64_t v59 = *(void *)(a11 + 48);
    LODWORD(v74[0]) = 69632;
    v75[0] = 0;
    sub_213C9C004(*(void *)(a11 + 32), 10, "Got delegated query on: %s", *(const char **)(v53 + 80));
    *(void *)(v53 + 72) = heim_retain(*(CFTypeRef *)(v59 + 208));
    int DelegateConnection = DNSServiceCreateDelegateConnection();
    uint64_t v61 = *(void *)(a11 + 32);
    if (DelegateConnection)
    {
      sub_213C9C004(v61, 2, "Failed setting up search context for addrinfo resolving for %s failed: %d");
      goto LABEL_72;
    }
    sub_213C9C004(v61, 10, "setting queue");
    DNSServiceErrorType v63 = DNSServiceSetDispatchQueue(*(DNSServiceRef *)(v53 + 56), *(dispatch_queue_t *)(v53 + 72));
    uint64_t v64 = *v15;
    if (v63)
    {
      sub_213C9C004(v64, 2, "Failed setting run queue for SRV query: %d");
      goto LABEL_72;
    }
    uint32_t v65 = sub_213C9833C(v64, *(char **)(*(void *)(a11 + 48) + 96), v59, v74);
    dispatch_semaphore_t v66 = j__dispatch_semaphore_create(0);
    *(void *)(v53 + 48) = v66;
    if (!v66) {
      goto LABEL_72;
    }
    heim_retain((CFTypeRef)v53);
    if (v58)
    {
      if ((v58 & 2) != 0)
      {
        DNSServiceProtocol v68 = 3;
      }
      else
      {
        *(unsigned char *)(v53 + 96) |= 0x20u;
        DNSServiceProtocol v68 = 1;
      }
    }
    else
    {
      char v67 = *(unsigned char *)(v53 + 96);
      *(unsigned char *)(v53 + 96) = v67 | 0x10;
      if ((v58 & 2) == 0)
      {
        *(unsigned char *)(v53 + 96) = v67 | 0x30;
        sub_213C9C004(*v15, 10, "No support address families: %s");
        goto LABEL_84;
      }
      DNSServiceProtocol v68 = 2;
    }
    sub_213C9C004(*v15, 10, "DNS SRV using address flags: %08x", v68);
    asprintf(v75, "%s.", *(const char **)(v53 + 80));
    *(void *)(v53 + 64) = *(void *)(v53 + 56);
    DNSServiceErrorType AddrInfo = DNSServiceGetAddrInfo((DNSServiceRef *)(v53 + 64), LODWORD(v74[0]) | 0x4000, v65, v68, v75[0], (DNSServiceGetAddrInfoReply)sub_213C99154, (void *)v53);
    free(v75[0]);
    if (AddrInfo)
    {
      sub_213C9C004(*v15, 10, "Failed doing A/AAAA lookup: %s: %d");
      goto LABEL_84;
    }
  }
  else
  {
    sub_213C9C004((uint64_t)v54, 10, "Adding host: %s:%d", v44, v42);
    sub_213C994D0(v53, *(char **)(v53 + 80), 0, (uint64_t)"srv", a11);
  }
  long long v55 = malloc_type_realloc(*(void **)(a11 + 88), 8 * (*(_DWORD *)(a11 + 96) + 1), 0x2004093837F09uLL);
  if (!v55)
  {
    sub_213C9C004(*v15, 10, "SRV callback: realloc failed");
    if (*(void *)(v53 + 64))
    {
      uint64_t v62 = *(NSObject **)(v53 + 72);
      v72[0] = MEMORY[0x263EF8330];
      v72[1] = 0x40000000;
      v72[2] = sub_213C995BC;
      v72[3] = &unk_2641E4030;
      v72[4] = v53;
      dispatch_sync(v62, v72);
      goto LABEL_72;
    }
LABEL_84:
    heim_release((CFTypeRef)v53);
    goto LABEL_72;
  }
  *(void *)(a11 + 88) = v55;
  CFTypeRef v56 = heim_retain((CFTypeRef)v53);
  uint64_t v57 = *(unsigned int *)(a11 + 96);
  *(void *)(*(void *)(a11 + 88) + 8 * v57) = v56;
  *(_DWORD *)(a11 + 96) = v57 + 1;
LABEL_72:
  sub_213C9C004(*v15, 10, "SRV callback end: %s", a5);
  heim_release((CFTypeRef)v53);
LABEL_12:
  if ((v12 & 1) == 0)
  {
    sub_213C9C004(*(void *)(a11 + 32), 10, "SRV callback no more coming");
    time_t v16 = time(0);
    if (*(unsigned char *)(a11 + 80)) {
      heim_abort("DNS-SD invariant not true, canceled but got error message:!query->state.srvQueryDone", v17, v18, v19, v20, v21, v22, v23, v70);
    }
    *(unsigned char *)(a11 + 80) |= 1u;
    if (*(_DWORD *)(a11 + 96))
    {
      unint64_t v24 = 0;
      time_t v25 = v16 + 10;
      do
      {
        uint64_t v26 = *(void *)(*(void *)(a11 + 88) + 8 * v24);
        uint64_t v27 = *(void *)(v26 + 88);
        if (v27)
        {
          size_t v28 = (const char *)(v27 + 48);
        }
        else
        {
          int v29 = *(const char **)(v26 + 80);
          if (v29) {
            size_t v28 = v29;
          }
          else {
            size_t v28 = "<no-hostname>";
          }
        }
        uint64_t v30 = v25 - time(0);
        uint64_t v31 = *(void *)(*(void *)(*(void *)(a11 + 88) + 8 * v24) + 48);
        if (v31) {
          BOOL v32 = v30 < 1;
        }
        else {
          BOOL v32 = 1;
        }
        if (v32)
        {
          if (!v31) {
            goto LABEL_38;
          }
        }
        else if (v24 < *(unsigned int *)(*v15 + 344))
        {
          sub_213C9C004(*v15, 10, "SRV waiting for addrinfo: %s", v28);
          if (sub_213CD8594(*(NSObject **)(*(void *)(*(void *)(a11 + 88) + 8 * v24) + 48), v30))
          {
            uint64_t v33 = *(NSObject **)(*(void *)(a11 + 48) + 208);
            v74[0] = MEMORY[0x263EF8330];
            v74[1] = 0x40000000;
            v74[2] = sub_213C99788;
            v74[3] = &unk_2641E4098;
            v74[4] = a11;
            v74[5] = v24;
            uint64_t v34 = v74;
LABEL_33:
            dispatch_sync(v33, v34);
            uint64_t v35 = *v15;
            if (qword_2678013D8 != -1) {
              dispatch_once(&qword_2678013D8, &unk_26C4C8BF8);
            }
            if (qword_2678013C8 && qword_2678013D0)
            {
              sub_213C9C004(v35, 10, " DNS adding negative cache for %s for %ld seconds", v28, 3600);
              v75[0] = (char *)MEMORY[0x263EF8330];
              v75[1] = (char *)0x40000000;
              v75[2] = (char *)sub_213C997FC;
              v75[3] = (char *)&unk_2641E40F8;
              v75[4] = (char *)3600;
              v75[5] = (char *)v28;
              dispatch_sync((dispatch_queue_t)qword_2678013C8, v75);
            }
            goto LABEL_38;
          }
          goto LABEL_38;
        }
        if (*(void *)(*(void *)(a11 + 48) + 208))
        {
          sub_213C9C004(*(void *)(a11 + 32), 10, "SRV timeout waiting for addrinfo: %s", v28);
          uint64_t v33 = *(NSObject **)(*(void *)(a11 + 48) + 208);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 0x40000000;
          block[2] = sub_213C997A4;
          block[3] = &unk_2641E40B8;
          block[4] = a11;
          void block[5] = v24;
          uint64_t v34 = block;
          goto LABEL_33;
        }
LABEL_38:
        ++v24;
      }
      while (v24 < *(unsigned int *)(a11 + 96));
    }
    _krb5_state_srv_sort(a11);
    sub_213C9C004(*(void *)(a11 + 32), 10, "SRV order after sorting");
    if (*(_DWORD *)(a11 + 96))
    {
      unint64_t v36 = 0;
      do
      {
        uint64_t v37 = *(void *)(*(void *)(a11 + 88) + 8 * v36);
        uint64_t v38 = *(void *)(v37 + 88);
        if (v38)
        {
          uint64_t v39 = (const char *)(v38 + 48);
          LODWORD(v38) = *(unsigned __int16 *)(v38 + 4);
        }
        else
        {
          uint64_t v39 = *(const char **)(v37 + 80);
          if (!v39) {
            uint64_t v39 = "<no-hostname>";
          }
        }
        sub_213C9C004(*(void *)(a11 + 32), 10, "  SRV%lu kdc: %s:%d prio: %d weight: %d", v36, v39, v38, *(unsigned __int16 *)(v37 + 34), *(_DWORD *)(v37 + 36));
        if (v36 < *(unsigned int *)(*v15 + 344))
        {
          sub_213C97DBC(*v15, *(void *)(a11 + 48), *(int **)(*(void *)(*(void *)(a11 + 88) + 8 * v36) + 88));
          *(void *)(*(void *)(*(void *)(a11 + 88) + 8 * v36) + 88) = 0;
        }
        ++v36;
      }
      while (v36 < *(unsigned int *)(a11 + 96));
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a11 + 40));
    heim_release((CFTypeRef)a11);
  }
}

void sub_213C98F34(uint64_t a1)
{
  DNSServiceRefDeallocate(*(DNSServiceRef *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  if ((*(unsigned char *)(v2 + 80) & 1) == 0)
  {
    *(unsigned char *)(v2 + 80) |= 1u;
    uint64_t v3 = *(const void **)(a1 + 40);
    heim_release(v3);
  }
}

uint64_t sub_213C98F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (qword_2678013C8) {
    BOOL v3 = qword_2678013D0 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  if (!v3)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_213C99628;
    block[3] = &unk_2641E4058;
    block[4] = &v6;
    void block[5] = a2;
    void block[6] = a1;
    dispatch_sync((dispatch_queue_t)qword_2678013C8, block);
    uint64_t v2 = v7[3];
  }
  _Block_object_dispose(&v6, 8);
  return v2;
}

void *sub_213C9905C(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 96) & 1) == 0) {
    sub_213C9C004(0, 10, "srv_release w/o getAddrDone set");
  }
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    heim_release(v2);
  }
  BOOL v3 = *(NSObject **)(a1 + 72);
  if (v3)
  {
    int8x16_t v7 = *(int8x16_t *)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    heim_retain(v3);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_213C9973C;
    block[3] = &unk_2641E4078;
    int8x16_t v9 = vextq_s8(v7, v7, 8uLL);
    nw_parameters_t v10 = v3;
    dispatch_async(v3, block);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4) {
    free(v4);
  }
  uint64_t result = *(void **)(a1 + 88);
  if (result)
  {
    do
    {
      uint64_t v6 = (void *)result[2];
      sub_213C9640C(result);
      uint64_t result = v6;
    }
    while (v6);
  }
  return result;
}

void sub_213C99154(uint64_t a1, char a2, uint64_t a3, int a4, char *a5, const sockaddr *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a8 + 40);
  size_t v28 = 0;
  if (*(unsigned char *)(a8 + 96)) {
    return;
  }
  if ((*(unsigned char *)(a8 + 96) & 2) != 0)
  {
    sub_213C9C004(*(void *)(v8 + 32), 10, "SRV getaddrinfo: canceled: %s");
    goto LABEL_13;
  }
  if (!a4)
  {
    sub_213C9C004(*(void *)(v8 + 32), 10, "DNS getaddrinfo callback on: %s for af = %d", a5, a6->sa_family);
    int sa_family = a6->sa_family;
    if (sa_family == 2)
    {
      char v16 = 4;
    }
    else
    {
      if (sa_family != 30)
      {
        int v17 = 1;
LABEL_41:
        socklen_t v23 = sub_213CB9408((uint64_t)a6);
        if (!getnameinfo(a6, v23, v30, 0x401u, 0, 0, 2))
        {
          memset(&v27, 0, sizeof(v27));
          snprintf(__str, 0x20uLL, "%d", *(unsigned __int16 *)(a8 + 32));
          unsigned int v24 = *(_DWORD *)(v8 + 68);
          sub_213C966BC((uint64_t)&v27, v24);
          int v25 = a6->sa_family;
          v27.ai_krb5_flags flags = 4100;
          v27.ai_family = v25;
          sub_213C9C004(*(void *)(v8 + 32), 10, " SRV getaddrinfo: %s domain: proto: %d addr: %s:%d", *(const char **)(v8 + 56), v24, v30, *(unsigned __int16 *)(a8 + 32));
          int v26 = getaddrinfo(v30, __str, &v27, &v28);
          if (v26) {
            sub_213C9C004(*(void *)(v8 + 32), 10, " SRV getaddrinfo: failed to parse host: [%s]:%s error: %d", v30, __str, v26);
          }
          if (v28)
          {
            sub_213C9C004(*(void *)(v8 + 32), 10, " Adding srv-addrinfo host: %s:%d", a5, *(unsigned __int16 *)(a8 + 32));
            sub_213C994D0(a8, a5, v28, (uint64_t)"srv-addrinfo", v8);
          }
        }
        goto LABEL_14;
      }
      char v16 = 8;
    }
    int v17 = 0;
    *(unsigned char *)(a8 + 96) |= v16;
    goto LABEL_41;
  }
  if (a4 == -65554)
  {
    int v13 = a6->sa_family;
    if (v13 == 2)
    {
      char v14 = 16;
    }
    else
    {
      if (v13 != 30)
      {
        int v17 = 1;
        goto LABEL_37;
      }
      char v14 = 32;
    }
    int v17 = 0;
    *(unsigned char *)(a8 + 96) |= v14;
LABEL_37:
    sub_213C9C004(*(void *)(v8 + 32), 10, "SRV callback: getaddrinfo on %s: no such record for af = %d", a5, a6->sa_family);
    goto LABEL_14;
  }
  sub_213C9C004(*(void *)(v8 + 32), 10, "SRV getaddrinfo other error: %d");
LABEL_13:
  int v17 = 1;
LABEL_14:
  uint64_t v18 = "more coming";
  if ((a2 & 1) == 0) {
    uint64_t v18 = "done";
  }
  uint64_t v19 = "yes";
  if ((*(unsigned char *)(a8 + 96) & 4) != 0) {
    uint64_t v20 = "yes";
  }
  else {
    uint64_t v20 = "waiting";
  }
  if ((*(unsigned char *)(a8 + 96) & 0x10) != 0) {
    uint64_t v20 = "no-rr";
  }
  if ((*(unsigned char *)(a8 + 96) & 8) == 0) {
    uint64_t v19 = "waiting";
  }
  if ((*(unsigned char *)(a8 + 96) & 0x20) != 0) {
    uint64_t v21 = "no-rr";
  }
  else {
    uint64_t v21 = v19;
  }
  sub_213C9C004(*(void *)(v8 + 32), 10, " SRV getaddrinfo end: %s (%s) (IPv4:%s) (IPv6:%s)", a5, v18, v20, v21);
  if (v17)
  {
    uint64_t v22 = "failed";
LABEL_28:
    sub_213C9C004(*(void *)(v8 + 32), 10, " DNS getaddrinfo done: %s %s", *(const char **)(a8 + 80), v22);
    *(unsigned char *)(a8 + 96) |= 1u;
    j__dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a8 + 48));
    heim_release((CFTypeRef)a8);
    return;
  }
  if ((*(unsigned char *)(a8 + 96) & 0x14) != 0 && (a2 & 1) == 0 && (*(unsigned char *)(a8 + 96) & 0x28) != 0)
  {
    uint64_t v22 = "success";
    goto LABEL_28;
  }
}

void sub_213C994D0(uint64_t a1, char *__s, addrinfo *a3, uint64_t a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  nw_parameters_t v11 = (char *)malloc_type_calloc(1uLL, v10 + 56, 0x2A9CC98DuLL);
  if (v11)
  {
    char v12 = v11;
    int v13 = v11 + 48;
    size_t v14 = strlen(__s);
    memcpy(v13, __s, v14 + 1);
    *(_DWORD *)char v12 = *(_DWORD *)(a5 + 68);
    *((_WORD *)v12 + 3) = 0;
    *((_WORD *)v12 + 2) = *(_WORD *)(a1 + 32);
    size_t v15 = *(const char **)(a5 + 72);
    if (v15) {
      *((void *)v12 + 5) = strdup(v15);
    }
    *((void *)v12 + 4) = a4;
    uint64_t v16 = *(void *)(a1 + 88);
    *((void *)v12 + 1) = a3;
    *((void *)v12 + 2) = v16;
    *(void *)(a1 + 88) = v12;
  }
  else if (a3)
  {
    freeaddrinfo(a3);
  }
}

void sub_213C995BC(uint64_t a1)
{
  uint64_t v2 = *(_DNSServiceRef_t **)(*(void *)(a1 + 32) + 64);
  if (v2)
  {
    DNSServiceRefDeallocate(v2);
    *(void *)(*(void *)(a1 + 32) + 64) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    if ((*(unsigned char *)(v3 + 96) & 1) == 0)
    {
      *(unsigned char *)(v3 + 96) |= 1u;
      uint64_t v4 = *(const void **)(a1 + 32);
      heim_release(v4);
    }
  }
}

void sub_213C99628(uint64_t a1)
{
  CFStringRef v2 = heim_string_create(*(char **)(a1 + 40));
  if (v2)
  {
    CFStringRef v3 = v2;
    CFNumberRef v4 = (const __CFNumber *)heim_dict_copy_value((const __CFDictionary *)qword_2678013D0, v2);
    if (v4)
    {
      CFNumberRef v5 = v4;
      time_t v6 = time(0);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (int)heim_number_get_int(v5);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) -= v6;
      heim_release(v5);
    }
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v7 <= 0)
    {
      heim_dict_delete_key((CFMutableDictionaryRef)qword_2678013D0, v3);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    else
    {
      sub_213C9C004(*(void *)(a1 + 48), 10, " DNS negative cache for host %s for another %ld seconds", *(const char **)(a1 + 40), v7);
    }
    heim_release(v3);
  }
}

void sub_213C9973C(void *a1)
{
  CFStringRef v2 = (_DNSServiceRef_t *)a1[4];
  if (v2) {
    DNSServiceRefDeallocate(v2);
  }
  CFStringRef v3 = (_DNSServiceRef_t *)a1[5];
  if (v3) {
    DNSServiceRefDeallocate(v3);
  }
  CFNumberRef v4 = (const void *)a1[6];

  heim_release(v4);
}

uint64_t sub_213C99788(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 88) + 8 * *(void *)(result + 40));
  *(unsigned char *)(v1 + 96) |= 2u;
  return result;
}

uint64_t sub_213C997A4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 88) + 8 * *(void *)(result + 40));
  *(unsigned char *)(v1 + 96) |= 2u;
  return result;
}

dispatch_queue_t sub_213C997C0()
{
  qword_2678013D0 = (uint64_t)heim_dict_create();
  dispatch_queue_t result = dispatch_queue_create("krbhst-dns-cache", 0);
  qword_2678013C8 = (uint64_t)result;
  return result;
}

void sub_213C997FC(uint64_t a1)
{
  int v2 = time(0);
  CFNumberRef v3 = heim_number_create(*(_DWORD *)(a1 + 32) + v2);
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFStringRef v5 = heim_string_create(*(char **)(a1 + 40));
    if (v5)
    {
      CFStringRef v6 = v5;
      heim_dict_set_value((__CFDictionary *)qword_2678013D0, v5, v4);
      heim_release(v4);
      CFNumberRef v4 = (CFNumberRef)v6;
    }
    heim_release(v4);
  }
}

void sub_213C99888(uint64_t a1)
{
  int v2 = *(void **)(a1 + 168);
  if (v2)
  {
    do
    {
      CFNumberRef v3 = (void *)v2[2];
      sub_213C9640C(v2);
      int v2 = v3;
    }
    while (v3);
  }
  *(void *)(a1 + 168) = 0;
  CFNumberRef v4 = *(void **)(a1 + 128);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 128) = 0;
  }
  CFStringRef v5 = *(void **)(a1 + 136);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v6 = *(void *)(a1 + 216);
  if (v6)
  {
    *(void *)(a1 + 216) = 0;
    uint64_t v7 = *(NSObject **)(a1 + 200);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_213C99980;
    block[3] = &unk_2641E4118;
    void block[4] = v6;
    dispatch_async(v7, block);
  }
  uint64_t v8 = *(NSObject **)(a1 + 200);
  if (v8)
  {
    sub_213CD8580(v8);
    *(void *)(a1 + 200) = 0;
  }
  int8x16_t v9 = *(NSObject **)(a1 + 208);
  if (v9)
  {
    sub_213CD8580(v9);
    *(void *)(a1 + 208) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  free(*(void **)(a1 + 96));
  *(void *)(a1 + 96) = 0;
}

void sub_213C99980(uint64_t a1)
{
}

uint64_t sub_213C99988(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int *a11, krb5_keyblock **a12, uint64_t a13)
{
  uint64_t v79 = 0;
  krb5_auth_context v80 = 0;
  uint64_t v78 = 0;
  *(_OWORD *)a13 = 0u;
  *(_OWORD *)(a13 + 16) = 0u;
  *(_OWORD *)(a13 + 32) = 0u;
  *(_OWORD *)(a13 + 48) = 0u;
  *(_OWORD *)(a13 + 64) = 0u;
  *(_OWORD *)(a13 + 80) = 0u;
  *(_OWORD *)(a13 + 96) = 0u;
  *(void *)(a13 + 112) = 0;
  krb5_data_zero(&v78);
  unsigned int v24 = *(uint64_t (**)(_krb5_context *, uint64_t, long long *, _OWORD *))(*(void *)a2 + 240);
  if (v24)
  {
    uint64_t v76 = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    memset(v77, 0, sizeof(v77));
    uint64_t checksum = v24(a1, a2, &v50, v77);
    if (!checksum) {
      sub_213CBBF80((uint64_t)v77);
    }
    return checksum;
  }
  int v26 = *(_DWORD *)(a9 + 136);
  if (a6)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    v77[0] = 0uLL;
    long long v52 = 0uLL;
    long long v50 = *a6;
    uint64_t v27 = *((void *)a6 + 3);
    *(void *)&long long v51 = *((void *)a6 + 2);
    *((void *)&v51 + 1) = v27;
    *(void *)&long long v53 = 0;
    *((void *)&v53 + 1) = "Kerberos";
    uint64_t checksum = _krb5_s4u2self_to_checksumdata(a1, (uint64_t)&v50, (size_t *)v77);
    if (checksum) {
      goto LABEL_45;
    }
    uint64_t v28 = krb5_crypto_init(a1, (const krb5_keyblock *)(a9 + 16), 0, &v49);
    if (v28)
    {
      uint64_t checksum = v28;
      krb5_data_free(v77);
      goto LABEL_45;
    }
    uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v49, 0x11u, 0, *((uint64_t *)&v77[0] + 1), *(uint64_t *)&v77[0], (uint64_t)&v52);
    krb5_crypto_destroy(a1, (uint64_t)v49);
    krb5_data_free(v77);
    if (checksum) {
      goto LABEL_45;
    }
    uint64_t v29 = sub_213CBBD6C((uint64_t)&v50);
    uint64_t v30 = malloc_type_malloc(v29, 0x4BDAB54AuLL);
    if (!v30)
    {
      uint64_t checksum = 12;
      goto LABEL_13;
    }
    uint64_t v46 = v29;
    uint64_t v47 = v30;
    uint64_t v31 = sub_213CBBD4C((uint64_t)v30 + v29 - 1, v29, (uint64_t)&v50, (uint64_t)&v48);
    if (v31)
    {
      uint64_t checksum = v31;
      free(v47);
LABEL_13:
      sub_213CBB434((uint64_t)&v52);
      goto LABEL_45;
    }
    sub_213CBB434((uint64_t)&v52);
    if (v29 != v48) {
      krb5_abortx(a1, "internal asn1 error");
    }
    uint64_t checksum = krb5_padata_add(a1, a11, 129, (uint64_t)v47, v29);
    if (checksum) {
      goto LABEL_45;
    }
  }
  *(void *)a13 = 0xC00000005;
  if (*(_DWORD *)(a8 + 16))
  {
    *(_DWORD *)(a13 + 80) = 1;
    BOOL v32 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *(void *)(a13 + 88) = v32;
    if (!v32) {
      goto LABEL_44;
    }
    _DWORD *v32 = *(_DWORD *)(a8 + 16);
  }
  else
  {
    uint64_t checksum = _krb5_init_etype(a1, 4, (unsigned int *)(a13 + 80), (uint64_t *)(a13 + 88), 0, v21, v22, v23);
    if (checksum) {
      goto LABEL_45;
    }
  }
  *(_DWORD *)(a13 + 16) = v26 & 0xA | a5 & 0xFFFFFFF5;
  *(void *)(a13 + 96) = a4;
  uint64_t checksum = sub_213CBAF94();
  if (checksum) {
    goto LABEL_45;
  }
  uint64_t v33 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800407C14B876uLL);
  *(void *)(a13 + 40) = v33;
  if (!v33) {
    goto LABEL_44;
  }
  uint64_t checksum = sub_213CBB008();
  if (checksum) {
    goto LABEL_45;
  }
  uint64_t v34 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
  *(void *)(a13 + 56) = v34;
  if (!v34) {
    goto LABEL_44;
  }
  void *v34 = *(void *)(a8 + 56);
  *(_DWORD *)(a13 + 72) = a10;
  if (!a7) {
    goto LABEL_28;
  }
  uint64_t v35 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
  *(void *)(a13 + 112) = v35;
  if (!v35
    || (*uint64_t v35 = 1,
        unint64_t v36 = malloc_type_calloc(1uLL, 0x48uLL, 0x1090040DEC7D988uLL),
        (*(void *)(*(void *)(a13 + 112) + 8) = v36) == 0))
  {
LABEL_44:
    uint64_t checksum = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory", v46);
    goto LABEL_45;
  }
  uint64_t checksum = sub_213CBB38C();
  if (checksum) {
    goto LABEL_45;
  }
LABEL_28:
  if (a11)
  {
    if (!*(void *)(a13 + 8))
    {
      uint64_t v37 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
      *(void *)(a13 + 8) = v37;
      if (!v37)
      {
LABEL_51:
        uint64_t v44 = krb5_enomem(a1);
        goto LABEL_52;
      }
    }
    uint64_t checksum = sub_213CBB55C();
    if (checksum) {
      goto LABEL_45;
    }
  }
  uint64_t checksum = krb5_auth_con_init(a1, &v80);
  if (checksum) {
    goto LABEL_45;
  }
  uint64_t checksum = krb5_auth_con_generatelocalsubkey(a1, (uint64_t)v80, (unsigned int *)(a9 + 16));
  if (checksum) {
    goto LABEL_45;
  }
  uint64_t checksum = sub_213C99F4C(a1, a13 + 16, (_DWORD *)(a8 + 104), *((const krb5_keyblock **)v80 + 5));
  if (checksum) {
    goto LABEL_45;
  }
  if (!*(void *)(a13 + 8))
  {
    uint64_t v38 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    *(void *)(a13 + 8) = v38;
    if (!v38) {
      goto LABEL_51;
    }
  }
  uint64_t checksum = sub_213C9A0C4(a1, v80, a13 + 16, a2, a9, (uint64_t)&v78);
  if (!checksum)
  {
    if (a3)
    {
      *(void *)(a3 + 24) = v80;
      uint64_t checksum = sub_213CB6AC0(a1, a3, 0, v39, v40, v41, v42, v43);
      *(void *)(a3 + 24) = 0;
      if (checksum) {
        goto LABEL_45;
      }
      uint64_t checksum = sub_213CB6DD0(a1, a3, &v78, (uint64_t *)a13);
      if (checksum) {
        goto LABEL_45;
      }
      *(_DWORD *)(a3 + 4) &= ~0x20u;
    }
    uint64_t checksum = krb5_padata_add(a1, *(unsigned int **)(a13 + 8), 1, v79, v78);
    if (!checksum)
    {
      krb5_data_zero(&v78);
      uint64_t v44 = krb5_auth_con_getlocalsubkey(a1, (uint64_t)v80, a12);
LABEL_52:
      uint64_t checksum = v44;
    }
  }
LABEL_45:
  if (v80) {
    krb5_auth_con_free(a1, v80);
  }
  if (checksum)
  {
    *(void *)(a13 + 96) = 0;
    sub_213CBB648(a13);
  }
  krb5_data_free(&v78);
  return checksum;
}

uint64_t sub_213C99F4C(_krb5_context *a1, uint64_t a2, _DWORD *a3, const krb5_keyblock *a4)
{
  if (!*a3)
  {
    uint64_t v12 = 0;
LABEL_6:
    *(void *)(a2 + 88) = 0;
    return v12;
  }
  size_t v15 = 0;
  size_t v16 = 0;
  uint64_t v8 = sub_213CBB18C((uint64_t)a3);
  int8x16_t v9 = malloc_type_malloc(v8, 0xDDC2985EuLL);
  if (!v9) {
    return 12;
  }
  size_t v10 = v9;
  uint64_t v11 = sub_213CBB16C((uint64_t)v9 + v8 - 1, v8, (uint64_t)a3, (uint64_t)&v16);
  if (!v11)
  {
    if (v8 != v16) {
      krb5_abortx(a1, "internal error in ASN.1 encoder", v15);
    }
    size_t v14 = malloc_type_calloc(1uLL, 0x20uLL, 0x1090040863882BEuLL);
    *(void *)(a2 + 88) = v14;
    if (!v14)
    {
      free(v10);
      uint64_t v12 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory", v15);
      return v12;
    }
    uint64_t v12 = krb5_crypto_init(a1, a4, 0, &v15);
    if (!v12)
    {
      krb5_encrypt_EncryptedData(a1, (_DWORD **)v15, 5, v10, v16, 0, *(void *)(a2 + 88));
      free(v10);
      krb5_crypto_destroy(a1, (uint64_t)v15);
      return v12;
    }
    free(v10);
    free(*(void **)(a2 + 88));
    goto LABEL_6;
  }
  uint64_t v12 = v11;
  free(v10);
  return v12;
}

uint64_t sub_213C9A0C4(_krb5_context *a1, _krb5_auth_context *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  krb5_auth_context v18 = a2;
  uint64_t v16 = 0;
  uint64_t v11 = sub_213CBB590(a3);
  uint64_t v12 = malloc_type_malloc(v11, 0xBC45CE0FuLL);
  if (!v12) {
    return 12;
  }
  int v13 = v12;
  uint64_t v14 = sub_213CBB570((uint64_t)v12 + v11 - 1, v11, a3, (uint64_t)&v16);
  if (!v14)
  {
    if (v11 != v16) {
      krb5_abortx(a1, "internal error in ASN.1 encoder");
    }
    v17[0] = v11;
    v17[1] = (uint64_t)v13;
    uint64_t v14 = sub_213C9E2F4(a1, &v18, 0, v17, a4, a5, a6, 6u, 7u);
  }
  free(v13);
  return v14;
}

uint64_t sub_213C9A1C0(_krb5_context *a1, krb5_keyblock *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    sub_213CD8690();
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  memset(&v13, 0, sizeof(v13));
  krb5_data_zero(&v16);
  krb5_keyblock_zero((uint64_t)&v13);
  if (!*(void *)a4) {
    goto LABEL_12;
  }
  uint64_t v9 = sub_213C9A3B4(a1, *(void *)(a4 + 8), *(krb5_keyblock **)a4, &v13);
  if (v9) {
    return v9;
  }
  uint64_t v9 = krb5_crypto_init(a1, &v13, 0, &v14);
  krb5_free_keyblock_contents(a1, &v13);
  if (v9) {
    return v9;
  }
  if (krb5_decrypt_EncryptedData(a1, (uint64_t)v14, 9, a5 + 120, &v16)) {
    BOOL v10 = **(_DWORD **)a4 != 23 || krb5_decrypt_EncryptedData(a1, (uint64_t)v14, 8, a5 + 120, &v16) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  krb5_crypto_destroy(a1, (uint64_t)v14);
  if (!*(void *)a4 || v10)
  {
LABEL_12:
    uint64_t v9 = sub_213C9A3B4(a1, *(void *)(a4 + 8), a2, &v13);
    if (v9) {
      return v9;
    }
    uint64_t v9 = krb5_crypto_init(a1, &v13, 0, &v14);
    krb5_free_keyblock_contents(a1, &v13);
    if (v9) {
      return v9;
    }
    uint64_t v9 = krb5_decrypt_EncryptedData(a1, (uint64_t)v14, 8, a5 + 120, &v16);
    krb5_crypto_destroy(a1, (uint64_t)v14);
    if (v9) {
      return v9;
    }
  }
  uint64_t v11 = a5 + 152;
  if (sub_213CBB89C(v17, v16, v11, (uint64_t)&v15))
  {
    uint64_t v9 = sub_213CBB8CC(v17, v16, v11, (uint64_t)&v15);
    if (v9) {
      krb5_set_error_message(a1, v9, "Failed to decode encpart in ticket");
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  krb5_data_free(&v16);
  return v9;
}

uint64_t sub_213C9A3B4(_krb5_context *a1, uint64_t a2, krb5_keyblock *a3, krb5_keyblock *a4)
{
  if (a2 && *(void *)(a2 + 80))
  {
    sub_213C9C004((uint64_t)a1, 5, "_krb5_fast_tgs_strengthen_key");
    uint64_t v8 = *(_DWORD **)(a2 + 80);
    krb5_magic magic = a3->magic;
    if (*v8 != a3->magic)
    {
      uint64_t v11 = 2529638953;
      krb5_set_error_message(a1, -1765328343, "strengthen_key %d not same enctype as reply key %d", *v8, magic);
      return v11;
    }
    _krb5_debug_keyblock((uint64_t)a1, 10, "tkt: strengthen_key", (uint64_t)v8);
    _krb5_debug_keyblock((uint64_t)a1, 10, "tkt: old reply_key", (uint64_t)a3);
    uint64_t v10 = _krb5_fast_cf2(a1, *(const krb5_keyblock **)(a2 + 80), "strengthenkey", a3, "replykey", a4, 0);
  }
  else
  {
    uint64_t v10 = krb5_copy_keyblock_contents(a1, a3, a4);
  }
  uint64_t v11 = v10;
  if (!v10)
  {
    _krb5_debug_keyblock((uint64_t)a1, 10, "tkt: extract key", (uint64_t)a4);
    return 0;
  }
  return v11;
}

uint64_t krb5_tkt_creds_init(_krb5_context *a1, uint64_t a2, const krb5_creds *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  *a5 = 0;
  uint64_t v13 = heim_uniq_alloc(0x208uLL, (uint64_t)"tkt-ctx", (uint64_t)sub_213C9A5F8, a4, (uint64_t)a5, a6, a7, a8);
  if (!v13) {
    return 12;
  }
  uint64_t v14 = v13;
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = sub_213C9A678;
  *(_DWORD *)(v13 + 48) = v9;
  *(void *)(v13 + 88) = a2;
  if ((v9 & 0x10) == 0)
  {
    if ((v9 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    *(_DWORD *)(v13 + 68) |= 0x10000000u;
    *(_DWORD *)(v13 + 48) = v9 | 8;
    if ((v9 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  *(_DWORD *)(v13 + 68) |= 2u;
  if ((v9 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v9 & 0x80) != 0) {
LABEL_5:
  }
    *(_DWORD *)(v13 + 68) |= 0x8000u;
LABEL_6:
  uint64_t v15 = krb5_copy_creds(a1, a3, (krb5_creds **)(v13 + 96));
  if (v15)
  {
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v16 = krb5_unparse_name(a1, *(krb5_const_principal *)(*(void *)(v14 + 96) + 8), (char **)(v14 + 56));
    if (!v16)
    {
      *a5 = v14;
      return v16;
    }
  }
  heim_release((CFTypeRef)v14);
  return v16;
}

void sub_213C9A5F8(uint64_t a1)
{
  int v2 = *(krb5_creds **)(a1 + 512);
  if (v2) {
    krb5_free_creds(*(krb5_context *)(a1 + 32), v2);
  }
  sub_213C9A7EC(*(_krb5_context **)(a1 + 32), a1);
  CFNumberRef v3 = *(krb5_creds ***)(a1 + 408);
  if (v3)
  {
    CFNumberRef v4 = *v3;
    if (*v3)
    {
      uint64_t v5 = 1;
      do
      {
        krb5_free_creds(*(krb5_context *)(a1 + 32), v4);
        CFNumberRef v3 = *(krb5_creds ***)(a1 + 408);
        CFNumberRef v4 = v3[v5++];
      }
      while (v4);
    }
    free(v3);
  }
  uint64_t v6 = *(void **)(a1 + 56);

  free(v6);
}

uint64_t sub_213C9A678(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = sub_213C9A840;
  return 0;
}

uint64_t krb5_tkt_creds_step(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, _DWORD *a6)
{
  krb5_data_zero(a4);
  uint64_t result = 0;
  *a6 = 0;
  *a5 = 0;
  *(_DWORD *)(a2 + 64) = 0;
  if (!*a4)
  {
    while (1)
    {
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void *, _DWORD *))(a2 + 40);
      if (!v21) {
        return 0;
      }
      uint64_t result = v21(a1, a2, a3, a4, a5, a6);
      if (result) {
        break;
      }
      uint64_t v20 = *a4;
      if (*(unsigned char *)a6)
      {
        if (!v20) {
          heim_abort("no data to send to KDC:out->length != 0", v13, v14, v15, v16, v17, v18, v19, v22);
        }
        if (!*a5) {
          heim_abort("no realm to send data too:*realm != NULL", v13, v14, v15, v16, v17, v18, v19, v22);
        }
        return 0;
      }
      if (v20) {
        heim_abort("out state but not state continue:out->length == 0", v13, v14, v15, v16, v17, v18, v19, v22);
      }
    }
    if (*(_DWORD *)(a2 + 64) != result) {
      heim_abort("error not same as saved:ctx->error == ret", v13, v14, v15, v16, v17, v18, v19, v22);
    }
  }
  return result;
}

uint64_t krb5_tkt_creds_get_creds(_krb5_context *a1, uint64_t a2, krb5_creds **a3)
{
  if (*(void *)(a2 + 40)) {
    return 22;
  }
  if (*(void *)(a2 + 512)) {
    return krb5_copy_creds(a1, *(const krb5_creds **)(a2 + 512), a3);
  }
  return *(unsigned int *)(a2 + 64);
}

void krb5_tkt_creds_free(uint64_t a1, const void *a2)
{
}

void sub_213C9A7EC(_krb5_context *a1, uint64_t a2)
{
  *(void *)(a2 + 112) = 0;
}

uint64_t sub_213C9A840(_krb5_context *a1, uint64_t a2)
{
  krb5_principal v11 = 0;
  sub_213C9C004((uint64_t)a1, 10, "tkt_step_referrals: %s", *(const char **)(a2 + 56));
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_DWORD *)(a2 + 104) = 0x8000;
  realm = (char *)krb5_principal_get_realm((uint64_t)a1, **(void **)(a2 + 96));
  int principal = krb5_make_principal(a1, &v11, realm, "krbtgt", realm, 0);
  uint64_t v6 = sub_213C9AA64;
  if (principal) {
    goto LABEL_2;
  }
  uint64_t v8 = *(_krb5_ccache **)(a2 + 88);
  int v9 = v11;
  memset(mcreds, 0, sizeof(mcreds));
  krb5_cc_clear_mcred(mcreds);
  *(void *)&mcreds[8] = v9;
  if (krb5_cc_retrieve_cred(a1, v8, 0x80000000, (krb5_creds *)mcreds, (krb5_creds *)(a2 + 120)))
  {
    int v7 = -1765328243;
    uint64_t v13 = 0;
    if (krb5_unparse_name(a1, v9, &v13))
    {
      krb5_clear_error_message(a1);
    }
    else
    {
      krb5_set_error_message(a1, -1765328243, "Matching credential (%s) not found", v13);
      free(v13);
    }
    krb5_free_principal(a1, v11);
    uint64_t v6 = sub_213C9AA64;
  }
  else
  {
    krb5_free_principal(a1, v11);
    int principal = krb5_copy_principal(a1, **(krb5_const_principal **)(a2 + 96), (krb5_principal *)(a2 + 264));
    uint64_t v6 = sub_213C9AA64;
    if (principal
      || (principal = krb5_copy_principal(a1, *(krb5_const_principal *)(*(void *)(a2 + 96) + 8), (krb5_principal *)(a2 + 272)), uint64_t v6 = sub_213C9AA64, principal))
    {
LABEL_2:
      int v7 = principal;
      goto LABEL_13;
    }
    int v7 = krb5_principal_set_realm(a1, *(void *)(a2 + 272), *(char **)(*(void *)(a2 + 128) + 24));
    uint64_t v6 = sub_213C9AAD0;
    if (v7) {
      uint64_t v6 = sub_213C9AA64;
    }
  }
LABEL_13:
  *(_DWORD *)(a2 + 64) = v7;
  *(void *)(a2 + 40) = v6;
  return 0;
}

uint64_t sub_213C9AA64(_krb5_context *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 22;
  *(void *)(a2 + 40) = sub_213C9ACB0;
  return 0;
}

uint64_t sub_213C9AAD0(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  v20[1] = 0;
  uint64_t v21 = 0;
  v20[0] = 0;
  memset(v22, 0, sizeof(v22));
  long long v23 = 0u;
  uint64_t v24 = 0;
  krb5_generate_random_block(a2 + 108, 4);
  if (_krb5_have_debug((BOOL)a1))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    krb5_unparse_name(a1, *(krb5_const_principal *)(a2 + 128), &v18);
    krb5_unparse_name(a1, *(krb5_const_principal *)(a2 + 272), &v19);
    sub_213C9C004((uint64_t)a1, 10, "sending TGS-REQ for %s using %s", v19, v18);
  }
  uint64_t v11 = sub_213C99988(a1, *(void *)(a2 + 88), a2 + 424, *(void *)(a2 + 80), *(_DWORD *)(a2 + 104), *(long long **)(a2 + 72), 0, a2 + 264, a2 + 120, *(_DWORD *)(a2 + 108), (unsigned int *)v20, (krb5_keyblock **)(a2 + 112), (uint64_t)v22);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0;
  }
  else
  {
    size_t v15 = sub_213CBB638((uint64_t)v22);
    *(void *)a4 = v15;
    uint64_t v16 = malloc_type_malloc(v15, 0xFE0E7D5FuLL);
    *(void *)(a4 + 8) = v16;
    if (v16)
    {
      uint64_t v17 = sub_213CBB618((uint64_t)v16 + *(void *)a4 - 1, *(void *)a4, (uint64_t)v22, (uint64_t)&v21);
      if (v17)
      {
        uint64_t v12 = v17;
        free(*(void **)(a4 + 8));
        uint64_t v13 = 0;
        *(void *)(a4 + 8) = 0;
      }
      else
      {
        if (*(void *)a4 != v21) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        *(void *)&long long v23 = 0;
        sub_213CBB648((uint64_t)v22);
        uint64_t v12 = 0;
        *a5 = *(void *)(*(void *)(*(void *)(a2 + 128) + 16) + 8);
        *a6 |= 1u;
        uint64_t v13 = sub_213C9AD10;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v12 = 12;
    }
  }
  *(_DWORD *)(a2 + 64) = v12;
  *(void *)(a2 + 40) = v13;
  return v12;
}

uint64_t sub_213C9ACB0(_krb5_context *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 22;
  *(void *)(a2 + 40) = 0;
  return 0;
}

uint64_t sub_213C9AD10(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  memset(v29, 0, sizeof(v29));
  sub_213C9C004((uint64_t)a1, 10, "tkt_referral_recv: %s", *(const char **)(a2 + 56));
  uint64_t v41 = 0;
  memset(v42, 0, sizeof(v42));
  long long v43 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  if (*(void *)(**(void **)(a2 + 88) + 248))
  {
    krb5_error_code v6 = 22;
LABEL_3:
    sub_213C9C004((uint64_t)a1, 10, "tkt_referral_recv: parse_tgs_rep %d", v6);
    sub_213C9A7EC(a1, a2);
LABEL_4:
    uint64_t result = 0;
    uint64_t v8 = sub_213C9ACB0;
    goto LABEL_5;
  }
  if (sub_213CBB858(*(void *)(a3 + 8), *(void *)a3, (uint64_t)v42, (uint64_t)&v41))
  {
    if (krb5_rd_error(a1, (const krb5_data *)a3, (krb5_error **)&v42[18] + 1))
    {
      krb5_clear_error_message(a1);
      krb5_free_kdc_rep((uint64_t)a1, v42);
      krb5_error_code v6 = -1765328344;
      goto LABEL_3;
    }
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    if (*((void *)&v43 + 1)
      && (krb5_error_code v10 = sub_213CBB52C(*(void *)(*((void *)&v43 + 1) + 8), **((void **)&v43 + 1), (uint64_t)&v39, 0)) != 0)
    {
      krb5_error_code v6 = v10;
      krb5_set_error_message(a1, v10, "Failed to decode METHOD-DATA");
    }
    else
    {
      krb5_error_code v6 = sub_213CB7290(a1, a2 + 424, (uint64_t)&v39, (uint64_t)&v42[18] + 8);
      sub_213CBB54C((uint64_t)&v39);
      if (!v6)
      {
        krb5_error_code v6 = krb5_error_from_rd_error(a1, (uint64_t)&v42[18] + 8, *(uint64_t **)(a2 + 96));
        if (_krb5_have_debug((BOOL)a1))
        {
          error_message = krb5_get_error_message(a1, v6);
          sub_213C9C004((uint64_t)a1, 5, "parse_tgs_rep: KRB-ERROR %d/%s", v6, error_message);
          krb5_free_error_message(a1, error_message);
        }
      }
    }
  }
  else
  {
    krb5_error_code v6 = sub_213CB7500(a1, *(_DWORD *)(a2 + 108), 0, a2 + 424, (uint64_t)v42);
    if (v6) {
      goto LABEL_3;
    }
    krb5_error_code v6 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 264), v30);
    if (v6) {
      goto LABEL_3;
    }
    krb5_error_code v6 = krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 272), &v30[1]);
    if (v6) {
      goto LABEL_3;
    }
    *((void *)&v33 + 1) = *(void *)(*(void *)(a2 + 96) + 56);
    char v9 = (*(unsigned char *)(a2 + 106) & 1) != 0 || *(void *)(a2 + 72);
    uint64_t v39 = *(void *)(a2 + 112);
    uint64_t v40 = a2 + 424;
    krb5_error_code v6 = sub_213CB1364((uint64_t)a1, (uint64_t)v42, (uint64_t)v30, (const krb5_keyblock *)(a2 + 136), 0, (krb5_address *const *)(a2 + 240), *(_DWORD *)(a2 + 108), v9, 0, (uint64_t (*)(_krb5_context *, const krb5_keyblock *, uint64_t, uint64_t, uint64_t))sub_213C9A1C0, (uint64_t)&v39);
  }
  krb5_free_kdc_rep((uint64_t)a1, v42);
  if (v6) {
    goto LABEL_3;
  }
  if (!krb5_principal_compare_any_realm((uint64_t)a1, *(void *)(a2 + 272), (uint64_t)v30[1]))
  {
    if (krb5_principal_is_krbtgt((uint64_t)a1, (uint64_t)v30[1]))
    {
      sub_213C9C004((uint64_t)a1, 10, "KDC for realm %s sends a referrals to %s", *(const char **)(*(void *)(a2 + 128) + 24), *((const char **)v30[1]->realm.data + 1));
      krb5_cc_clear_mcred(v29);
      *((krb5_principal *)&v29[0] + 1) = v30[1];
      uint64_t v12 = *(uint64_t **)(a2 + 408);
      if (v12)
      {
        unint64_t v13 = 0;
        do
        {
          uint64_t v14 = v12[v13];
          BOOL v15 = v14 != 0;
          if (!v14) {
            break;
          }
          if (krb5_compare_creds(a1, 0x80000000, (uint64_t)v29, v14))
          {
            sub_213C9C004((uint64_t)a1, 5, "Referral from %s loops back to realm %s", *(const char **)(*(void *)(a2 + 128) + 24), (const char *)v30[1]->data);
            goto LABEL_4;
          }
          ++v13;
          uint64_t v12 = *(uint64_t **)(a2 + 408);
        }
        while (v12);
        if (v13 >= 0x10) {
          goto LABEL_4;
        }
      }
      else
      {
        BOOL v15 = 1;
      }
      int v16 = DWORD2(v38);
      if (*(_DWORD *)(a2 + 416)) {
        BOOL v17 = (WORD4(v38) & 0x2000) == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        *(_DWORD *)(a2 + 416) = 0;
        DWORD2(v38) = v16 & 0xFFFFDFFF;
      }
      if (v15)
      {
        unsigned int v18 = 0;
      }
      else
      {
        unsigned int v18 = -1;
        uint64_t v19 = v12;
        do
        {
          uint64_t v20 = *v19++;
          ++v18;
        }
        while (v20);
      }
      uint64_t v21 = (krb5_creds **)malloc_type_realloc(v12, 8 * (v18 + 2), 0x2004093837F09uLL);
      if (v21)
      {
        char v22 = v21;
        *(void *)(a2 + 408) = v21;
        krb5_error_code v23 = krb5_copy_creds(a1, (const krb5_creds *)v30, &v21[v18]);
        v22[v18 + 1] = 0;
        if (!v23)
        {
          krb5_free_cred_contents(a1, (krb5_creds *)(a2 + 120));
          long long v24 = v33;
          *(_OWORD *)(a2 + 152) = v32;
          *(_OWORD *)(a2 + 168) = v24;
          long long v25 = v38;
          long long v26 = v36;
          *(_OWORD *)(a2 + 232) = v37;
          *(_OWORD *)(a2 + 248) = v25;
          long long v27 = v35;
          *(_OWORD *)(a2 + 184) = v34;
          *(_OWORD *)(a2 + 200) = v27;
          *(_OWORD *)(a2 + 216) = v26;
          long long v28 = v31;
          *(_OWORD *)(a2 + 120) = *(_OWORD *)v30;
          *(_OWORD *)(a2 + 136) = v28;
          uint64_t result = krb5_principal_set_realm(a1, *(void *)(a2 + 272), *(char **)(*(void *)(a2 + 128) + 24));
          if (!result)
          {
            uint64_t v8 = (uint64_t (*)(_krb5_context *, uint64_t))sub_213C9AAD0;
            goto LABEL_5;
          }
        }
      }
      else
      {
        krb5_set_error_message(a1, 12, "malloc: out of memory");
      }
    }
    else
    {
      krb5_set_error_message(a1, -1765328349, "Got back an non krbtgt ticket referrals");
      krb5_free_cred_contents(a1, (krb5_creds *)v30);
    }
    goto LABEL_4;
  }
  uint64_t result = krb5_copy_creds(a1, (const krb5_creds *)v30, (krb5_creds **)(a2 + 512));
  if (result)
  {
    *(_DWORD *)(a2 + 64) = result;
    return result;
  }
  krb5_free_cred_contents(a1, (krb5_creds *)v30);
  uint64_t result = 0;
  uint64_t v8 = sub_213C9B240;
LABEL_5:
  *(void *)(a2 + 40) = v8;
  return result;
}

uint64_t sub_213C9B240(_krb5_context *a1, uint64_t a2)
{
  sub_213C9C004((uint64_t)a1, 10, "tkt_step_store: %s", *(const char **)(a2 + 56));
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a2 + 40) = 0;
  if ((*(unsigned char *)(a2 + 48) & 8) == 0)
  {
    krb5_error_code v10 = *(krb5_creds ***)(a2 + 408);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *(_krb5_ccache **)(a2 + 88);
        unint64_t v13 = v10 + 1;
        do
        {
          uint64_t client = (uint64_t)v11->client;
          if (krb5_principal_is_krbtgt((uint64_t)a1, client)
            && strcmp(*(const char **)(*(void *)(client + 16) + 8), *(const char **)(client + 24)))
          {
            krb5_cc_store_cred(a1, v12, *(v13 - 1));
          }
          BOOL v15 = *v13++;
          uint64_t v11 = v15;
        }
        while (v15);
        int v16 = *v10;
        if (*v10)
        {
          BOOL v17 = v10 + 1;
          do
          {
            krb5_free_creds(a1, v16);
            unsigned int v18 = *v17++;
            int v16 = v18;
          }
          while (v18);
        }
      }
      free(*(void **)(a2 + 408));
      *(void *)(a2 + 408) = 0;
    }
    uint64_t v19 = *(krb5_creds **)(a2 + 512);
    if (!v19) {
      heim_abort("store but no credential:ctx->cred != NULL", v4, 0, v5, v6, v7, v8, v9, v31);
    }
    krb5_cc_store_cred(a1, *(krb5_ccache *)(a2 + 88), v19);
    if (!krb5_principal_compare_any_realm((uint64_t)a1, *(void *)(*(void *)(a2 + 512) + 8), *(void *)(*(void *)(a2 + 96) + 8)))
    {
      uint64_t v20 = *(_OWORD **)(a2 + 512);
      creds[0] = *v20;
      long long v21 = v20[4];
      long long v23 = v20[1];
      long long v22 = v20[2];
      creds[3] = v20[3];
      creds[4] = v21;
      creds[1] = v23;
      creds[2] = v22;
      long long v24 = v20[8];
      long long v26 = v20[5];
      long long v25 = v20[6];
      creds[7] = v20[7];
      creds[8] = v24;
      creds[5] = v26;
      creds[6] = v25;
      long long v27 = *(_krb5_ccache **)(a2 + 88);
      long long v28 = *(long long **)(*(void *)(a2 + 96) + 8);
      uint64_t v29 = *((void *)v28 + 2);
      long long v32 = *v28;
      uint64_t v33 = v29;
      long long v34 = "";
      *((void *)&creds[0] + 1) = &v32;
      krb5_cc_store_cred(a1, v27, (krb5_creds *)creds);
    }
  }
  return 0;
}

krb5_BOOLean krb5_kuserok(krb5_context a1, krb5_principal a2, const char *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  LODWORD(__s) = 0;
  uint64_t v6 = getpwnam(a3);
  if (!v6) {
    goto LABEL_52;
  }
  uint64_t v7 = (uint64_t)v6;
  pw_dir = v6->pw_dir;
  size_t v9 = strlen(pw_dir) + 12;
  krb5_error_code v10 = (char *)malloc_type_malloc(v9, 0x3E1E8F29uLL);
  if (!v10) {
    goto LABEL_52;
  }
  uint64_t v11 = v10;
  strlcpy(v10, pw_dir, v9);
  strlcat(v11, "/.k5login", v9);
  int v12 = sub_213C9B810(a1, v11, v7, a2, (krb5_BOOLean *)&__s);
  if (v12) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = __s == 1;
  }
  if (v13)
  {
    free(v11);
    return 1;
  }
  int v14 = v12;
  strlcat(v11, ".d", v9);
  memset(&v35, 0, sizeof(v35));
  LODWORD(__s) = 0;
  if (lstat(v11, &v35) < 0) {
    goto LABEL_32;
  }
  if ((v35.st_mode & 0xF000) != 0x4000)
  {
    int v15 = 0;
    int v18 = 20;
    goto LABEL_37;
  }
  int v15 = 0;
  if (v35.st_uid) {
    BOOL v16 = v35.st_uid == *(_DWORD *)(v7 + 16);
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = v16;
  int v18 = 13;
  if ((v35.st_mode & 0x12) != 0 || !v17) {
    goto LABEL_37;
  }
  uint64_t v19 = opendir(v11);
  if (!v19)
  {
LABEL_32:
    int v15 = 0;
    int v18 = *__error();
    goto LABEL_37;
  }
  uint64_t v20 = v19;
  memset(&v36, 0, sizeof(v36));
  int v21 = dirfd(v19);
  if (fstat(v21, &v36) < 0)
  {
    closedir(v20);
    int v18 = *__error();
  }
  else
  {
    if (v35.st_dev == v36.st_dev && v35.st_ino == v36.st_ino)
    {
      long long v22 = readdir(v20);
      if (v22)
      {
        long long v23 = v22;
        int v15 = 0;
        do
        {
          if (strcmp(v23->d_name, "."))
          {
            if (strcmp(v23->d_name, ".."))
            {
              if (v23->d_name[0] != 35 && *(&v23->d_type + strlen(v23->d_name)) != 126)
              {
                snprintf((char *)&v36, 0x400uLL, "%s/%s", v11, v23->d_name);
                int v24 = sub_213C9B810(a1, (char *)&v36, v7, a2, (krb5_BOOLean *)&__s);
                int v15 = (int)__s;
                if (!v24 && __s == 1) {
                  break;
                }
              }
            }
          }
          long long v23 = readdir(v20);
        }
        while (v23);
      }
      else
      {
        int v15 = 0;
      }
      closedir(v20);
      int v18 = 0;
      goto LABEL_37;
    }
    closedir(v20);
    int v18 = 13;
  }
  int v15 = 0;
LABEL_37:
  free(v11);
  if (!v18 && v15 == 1) {
    return 1;
  }
  if ((v18 == 20 || v18 == 2) && v14 == 2 && !krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a2, 1u))
  {
    *(void *)&v36.st_dev = 0;
    if (!krb5_get_default_realms(a1, (char *const **)&v36))
    {
      long long v26 = *(char *const **)&v36.st_dev;
      if (**(void **)&v36.st_dev)
      {
        long long v27 = (void *)(*(void *)&v36.st_dev + 8);
        while (1)
        {
          realm = (const char *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a2);
          if (!strcmp(realm, (const char *)*(v27 - 1)))
          {
            comp_string = (const char *)krb5_principal_get_comp_string((uint64_t)a1, (uint64_t)a2, 0);
            if (!strcmp(comp_string, a3)) {
              break;
            }
          }
          if (!*v27++)
          {
            long long v26 = *(char *const **)&v36.st_dev;
            goto LABEL_51;
          }
        }
        krb5_free_host_realm(a1, *(char *const **)&v36.st_dev);
        return 1;
      }
LABEL_51:
      krb5_free_host_realm(a1, v26);
    }
  }
LABEL_52:
  *(void *)&v36.st_dev = 0;
  v36.st_ino = 0;
  *(void *)&v35.st_dev = 0;
  v35.st_ino = 0;
  __s = 0;
  krb5_BOOLean v25 = !krb5_unparse_name(a1, a2, &__s)
     && (size_t v31 = strlen(a3), !mbr_identifier_to_uuid(4, a3, v31, (unsigned __int8 *)&v35))
     && (size_t v32 = strlen(__s), !mbr_identifier_to_uuid(12, __s, v32, (unsigned __int8 *)&v36))
     && uuid_compare((const unsigned __int8 *)&v36, (const unsigned __int8 *)&v35) == 0;
  if (__s) {
    free(__s);
  }
  return v25;
}

uint64_t sub_213C9B810(_krb5_context *a1, char *__filename, uint64_t a3, const krb5_principal_data *a4, krb5_BOOLean *a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  memset(&v16, 0, sizeof(v16));
  *a5 = 0;
  size_t v9 = fopen(__filename, "r");
  if (!v9) {
    return *__error();
  }
  krb5_error_code v10 = v9;
  rk_cloexec_file(v9);
  int v11 = fileno(v10);
  if (fstat(v11, &v16))
  {
    fclose(v10);
    return *__error();
  }
  if ((v16.st_mode & 0xF000) == 0x4000)
  {
    fclose(v10);
    return 21;
  }
  else if (v16.st_uid && v16.st_uid != *(_DWORD *)(a3 + 16) || (v16.st_mode & 0x12) != 0)
  {
    fclose(v10);
    return 13;
  }
  else
  {
    while (fgets(__s, 1024, v10))
    {
      krb5_principal v15 = 0;
      size_t v13 = strcspn(__s, "\n");
      if (__s[v13] == 10 || (int v14 = fgetc(v10), v14 == -1))
      {
        __s[v13] = 0;
        if (!krb5_parse_name(a1, __s, &v15))
        {
          *a5 = krb5_principal_compare(a1, a4, v15);
          krb5_free_principal(a1, v15);
          if (*a5) {
            break;
          }
        }
      }
      else
      {
        while (v14 != -1 && v14 != 10)
          int v14 = fgetc(v10);
      }
    }
    fclose(v10);
    return 0;
  }
}

uint64_t krb5_initlog(_krb5_context *a1, const char *a2, char ***a3)
{
  uint64_t v6 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x1030040B20C17F8uLL);
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t v7 = v6;
  uint64_t v8 = strdup(a2);
  NSObject *v7 = v8;
  if (!v8)
  {
    free(v7);
LABEL_5:
    uint64_t v9 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v9;
  }
  uint64_t v9 = 0;
  *a3 = v7;
  return v9;
}

uint64_t krb5_addlog_func(_krb5_context *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = (char *)malloc_type_realloc(*(void **)(a2 + 16), 32 * *(int *)(a2 + 8) + 32, 0x10800409938AC02uLL);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(int *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v16 + 1;
    *(void *)(a2 + 16) = v14;
    int v17 = &v14[32 * v16];
    *(_DWORD *)int v17 = a3;
    *((_DWORD *)v17 + 1) = a4;
    *((void *)v17 + 1) = a5;
    *((void *)v17 + 2) = a6;
    *((void *)v17 + 3) = a7;
  }
  else
  {
    uint64_t v15 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v15;
}

uint64_t sub_213C9BB58(_krb5_context *a1, uint64_t a2, int a3, int a4, void *a5, uint64_t a6, uint64_t a7, int a8, int a9)
{
  int v17 = malloc_type_malloc(0x20uLL, 0x107004068A0B128uLL);
  if (v17)
  {
    *int v17 = a5;
    v17[1] = a6;
    uint64_t v17[2] = a7;
    *((_DWORD *)v17 + 6) = a8;
    *((_DWORD *)v17 + 7) = a9;
    return krb5_addlog_func(a1, a2, a3, a4, (uint64_t)sub_213C9C120, (uint64_t)sub_213C9C20C, (uint64_t)v17);
  }
  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    if (a5 && a9) {
      free(a5);
    }
    return 12;
  }
}

uint64_t krb5_openlog(_krb5_context *a1, const char *a2, char ***a3)
{
  uint64_t v11 = krb5_initlog(a1, a2, a3);
  if (v11) {
    return v11;
  }
  strings = (void **)krb5_config_get_strings((uint64_t)a1, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"logging");
  if (strings
    || (strings = (void **)krb5_config_get_strings((uint64_t)a1, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"logging")) != 0)
  {
    uint64_t v19 = (char *)*strings;
    if (*strings)
    {
      uint64_t v20 = (char **)(strings + 1);
      do
      {
        uint64_t v21 = krb5_addlog_dest(a1, (const char **)*a3, v19);
        long long v22 = *v20++;
        uint64_t v19 = v22;
        if (v22) {
          BOOL v23 = v21 == 0;
        }
        else {
          BOOL v23 = 0;
        }
      }
      while (v23);
      uint64_t v11 = v21;
    }
    else
    {
      uint64_t v11 = 0;
    }
    krb5_config_free_strings(strings);
    return v11;
  }
  krb5_BOOLean v25 = *a3;

  return krb5_addlog_dest(a1, (const char **)v25, "SYSLOG");
}

uint64_t krb5_closelog(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    do
    {
      (*(void (**)(void))(*(void *)(a2 + 16) + v3 + 16))(*(void *)(*(void *)(a2 + 16) + v3 + 24));
      ++v4;
      v3 += 32;
    }
    while (v4 < *(int *)(a2 + 8));
  }
  free(*(void **)(a2 + 16));
  free(*(void **)a2);
  free((void *)a2);
  return 0;
}

uint64_t krb5_vlog_msg(uint64_t a1, uint64_t a2, void **a3, int a4, char *a5, va_list a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if (a2 && *(int *)(a2 + 8) >= 1)
  {
    uint64_t v12 = 0;
    time_t v13 = 0;
    uint64_t v14 = 0;
    for (uint64_t i = 0; i < *(int *)(a2 + 8); ++i)
    {
      uint64_t v16 = *(void *)(a2 + 16);
      if (*(_DWORD *)(v16 + v12) > a4) {
        goto LABEL_10;
      }
      int v17 = *(_DWORD *)(v16 + v12 + 4);
      if ((v17 & 0x80000000) == 0 && v17 < a4) {
        goto LABEL_10;
      }
      if (v13)
      {
        if (!v14) {
          goto LABEL_13;
        }
      }
      else
      {
        time_t v13 = time(0);
        krb5_format_time(a1, v13, v22, 0x40uLL, 1);
        if (!v14)
        {
LABEL_13:
          int v18 = vasprintf((char **)&v21, a5, a6);
          if (v21) {
            BOOL v19 = v18 < 0;
          }
          else {
            BOOL v19 = 1;
          }
          if (v19) {
            uint64_t v14 = a5;
          }
          else {
            uint64_t v14 = (char *)v21;
          }
        }
      }
      (*(void (**)(char *, char *, void))(*(void *)(a2 + 16) + v12 + 8))(v22, v14, *(void *)(*(void *)(a2 + 16) + v12 + 24));
LABEL_10:
      v12 += 32;
    }
  }
  if (a3) {
    *a3 = v21;
  }
  else {
    free(v21);
  }
  return 0;
}

uint64_t krb5_vlog(uint64_t a1, uint64_t a2, int a3, char *a4, va_list a5)
{
  return 0;
}

uint64_t krb5_log_msg(uint64_t a1, uint64_t a2, int a3, void **a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return 0;
}

uint64_t krb5_log(uint64_t a1, uint64_t a2, int a3, char *a4, ...)
{
  va_start(va, a4);
  krb5_vlog_msg(a1, a2, 0, a3, a4, va);
  return 0;
}

uint64_t sub_213C9C004(uint64_t result, int a2, char *a3, ...)
{
  va_start(va, a3);
  if (result)
  {
    if (*(void *)(result + 160)) {
      return krb5_vlog_msg(result, *(void *)(result + 160), 0, a2, a3, va);
    }
  }
  return result;
}

void sub_213C9C050(uint64_t *a1, int a2, krb5_error_code a3, char *a4, ...)
{
  va_start(va, a4);
  v10[0] = 0;
  if (a1)
  {
    if (a1[20])
    {
      va_copy((va_list)&v10[1], va);
      vasprintf(v10, a4, va);
      if (v10[0])
      {
        error_message = krb5_get_error_message((krb5_context)a1, a3);
        uint64_t v8 = error_message;
        uint64_t v9 = "<unknown error>";
        if (error_message) {
          uint64_t v9 = error_message;
        }
        krb5_log((uint64_t)a1, a1[20], a2, "%s: %s", v10[0], v9);
        krb5_free_error_message((krb5_context)a1, v8);
        free(v10[0]);
      }
    }
  }
}

BOOL _krb5_have_debug(BOOL result)
{
  if (result) {
    return *(void *)(result + 160) != 0;
  }
  return result;
}

void sub_213C9C120(const char *a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  if (*(_DWORD *)(a3 + 24))
  {
    uint64_t v7 = *(FILE **)(a3 + 16);
    if (!v7) {
      return;
    }
  }
  else
  {
    uint64_t v7 = fopen(*(const char **)a3, *(const char **)(a3 + 8));
    if (!v7) {
      return;
    }
  }
  uint64_t v8 = (char *)malloc_type_malloc(4 * v6 + 4, 0xF8F1D59DuLL);
  if (v8)
  {
    uint64_t v9 = v8;
    strvisx(v8, __s, v6, 1);
    fprintf(v7, "%s %s\n", a1, v9);
    free(v9);
  }
  if (!*(_DWORD *)(a3 + 24))
  {
    fclose(v7);
  }
}

void sub_213C9C20C(FILE **a1)
{
  if (*((_DWORD *)a1 + 6))
  {
    if (!*a1) {
      goto LABEL_7;
    }
    fclose(a1[2]);
  }
  if (*a1 && *((_DWORD *)a1 + 7)) {
    free(*a1);
  }
LABEL_7:

  free(a1);
}

void sub_213C9C26C(uint64_t a1, const char *a2, int *a3)
{
}

void sub_213C9C29C(void *a1)
{
  free(a1);

  closelog();
}

uint64_t sub_213C9C2C4(uint64_t a1, const char *a2, uint64_t a3)
{
  return asl_log(*(asl_object_t *)a3, *(asl_object_t *)(a3 + 8), *(_DWORD *)(a3 + 16), "%s", a2);
}

void sub_213C9C2FC(void *a1)
{
  MEMORY[0x216694CB0](a1[1]);
  MEMORY[0x216694CA0](*a1);

  free(a1);
}

void sub_213C9C340(int a1, uint64_t a2, os_log_t oslog)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136446210;
    uint64_t v6 = a2;
    _os_log_impl(&dword_213C74000, oslog, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&v5, 0xCu);
  }
}

void sub_213C9C3DC(int a1, uint64_t a2, os_log_t oslog)
{
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG)) {
    sub_213CD86BC(a2, oslog);
  }
}

uint64_t sub_213C9C424(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 16);
}

uint64_t sub_213C9C430(uint64_t a1, uint64_t a2, const char *a3)
{
  pthread_mutex_lock(&stru_2677FE3B8);
  uint64_t v6 = (char **)off_2677FE3A8;
  if (off_2677FE3A8)
  {
    while (1)
    {
      uint64_t v7 = *v6;
      if (!strcmp(*v6, a3)) {
        break;
      }
      uint64_t v6 = (char **)v6[5];
      if (!v6) {
        goto LABEL_4;
      }
    }
    sub_213C9C004(a1, 20, "mcc_resolve, found: %s\n", v7);
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 11));
    ++*((_DWORD *)v6 + 2);
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 11));
  }
  else
  {
LABEL_4:
    uint64_t v6 = sub_213C9D3FC(a3);
    sub_213C9C004(a1, 20, "mcc_resolve, allocated: %s\n", *v6);
  }
  pthread_mutex_unlock(&stru_2677FE3B8);
  *(void *)(*(void *)a2 + 16) = v6;
  *(void *)(*(void *)a2 + 8) = 152;
  return 0;
}

uint64_t sub_213C9C52C(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(&stru_2677FE3B8);
  uint64_t v4 = sub_213C9D3FC(0);
  sub_213C9C004(a1, 20, "mcc_gen_new: %s\n", *v4);
  pthread_mutex_unlock(&stru_2677FE3B8);
  *(void *)(*(void *)a2 + 16) = v4;
  *(void *)(*(void *)a2 + 8) = 152;
  return 0;
}

uint64_t sub_213C9C5B8(_krb5_context *a1, uint64_t a2, const krb5_principal_data *a3)
{
  int v5 = *(const char ***)(a2 + 16);
  krb5_principal v14 = 0;
  pthread_mutex_lock(&stru_2677FE3B8);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 11));
  sub_213C9C004((uint64_t)a1, 20, "mcc_initialize: %s\n", *v5);
  int v6 = *((_DWORD *)v5 + 3);
  *((_DWORD *)v5 + 3) = 0;
  v5[7] = (const char *)time(0);
  uint64_t v7 = krb5_copy_principal(a1, a3, &v14);
  if (!v7)
  {
    uint64_t v8 = (krb5_principal_data *)v5[2];
    if (v8) {
      krb5_free_principal(a1, v8);
    }
    v5[2] = (const char *)v14;
    sub_213C9D53C(a1, (uint64_t)v5);
    if (v6)
    {
      sub_213C9C004((uint64_t)a1, 20, "mcc_initialize was dead: %s\n", *v5);
      uint64_t v9 = (const char *)off_2677FE3A8;
      if (off_2677FE3A8)
      {
        uint64_t v10 = *v5;
        uint64_t v11 = (const char **)off_2677FE3A8;
        while (strcmp(v10, *v11))
        {
          uint64_t v11 = (const char **)v11[5];
          if (!v11)
          {
            v5[5] = v9;
            *((void *)v9 + 6) = v5 + 5;
            goto LABEL_12;
          }
        }
        uint64_t v12 = (krb5_principal_data *)v5[2];
        if (v12)
        {
          krb5_free_principal(a1, v12);
          v5[2] = 0;
        }
        *((_DWORD *)v5 + 3) = 1;
        uint64_t v7 = 17;
      }
      else
      {
        v5[5] = 0;
        qword_2677FE3B0 = (uint64_t)(v5 + 5);
LABEL_12:
        uint64_t v7 = 0;
        off_2677FE3A8 = v5;
        v5[6] = (const char *)&off_2677FE3A8;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 11));
  pthread_mutex_unlock(&stru_2677FE3B8);
  return v7;
}

uint64_t sub_213C9C744(_krb5_context *a1, uint64_t a2)
{
  uint64_t v3 = *(const char ***)(a2 + 16);
  sub_213C9C004((uint64_t)a1, 20, "mcc_destroy: %s\n", *v3);
  pthread_mutex_lock(&stru_2677FE3B8);
  sub_213C9D5AC(a1, (uint64_t)v3);
  pthread_mutex_unlock(&stru_2677FE3B8);
  return 0;
}

uint64_t sub_213C9C7B8(uint64_t a1, uint64_t a2)
{
  if (sub_213C9D680(a1, *(const char ***)(a2 + 16))) {
    krb5_data_free((void *)(a2 + 8));
  }
  return 0;
}

uint64_t sub_213C9C7F0(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  if (*(_DWORD *)(v5 + 12))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
    return 2;
  }
  else
  {
    uint64_t v7 = malloc_type_calloc(1uLL, 0xA0uLL, 0x10A0040A2A4A3C5uLL);
    if (v7)
    {
      uint64_t v8 = v7;
      v7[18] = 0;
      uint64_t v9 = *(void **)(v5 + 32);
      v7[19] = v9;
      void *v9 = v7;
      *(void *)(v5 + 32) = v7 + 18;
      *((_OWORD *)v7 + 7) = 0u;
      *((_OWORD *)v7 + 8) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      *((_OWORD *)v7 + 6) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      *((_OWORD *)v7 + 2) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
      uint64_t v6 = krb5_copy_creds_contents(a1, a3, (uint64_t)v7);
      if (v6)
      {
        uint64_t v10 = v8[18];
        uint64_t v11 = (void *)v8[19];
        if (v10)
        {
          *(void *)(v10 + 152) = v11;
          uint64_t v11 = (void *)v8[19];
        }
        else
        {
          *(void *)(v5 + 32) = v11;
        }
        *uint64_t v11 = v10;
        free(v8);
      }
      else
      {
        *(void *)(v5 + 56) = time(0);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
    }
    else
    {
      uint64_t v6 = 2529639110;
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
      krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    }
  }
  return v6;
}

uint64_t sub_213C9C924(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  sub_213C9C004((uint64_t)a1, 20, "mcc_get_principal: %p\n", (const void *)v5);
  if (*(_DWORD *)(v5 + 12) || (uint64_t v7 = *(const krb5_principal_data **)(v5 + 16)) == 0) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = krb5_copy_principal(a1, v7, a3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
  return v6;
}

uint64_t sub_213C9C9B4(_krb5_context *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = (pthread_mutex_t *)(v5 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  if (*(_DWORD *)(v5 + 12))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 88));
    return 2;
  }
  else
  {
    uint64_t v9 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t *v9 = 0;
      v9[1] = (uint64_t)v9;
      uint64_t v11 = *(void *)(v5 + 24);
      if (v11)
      {
        while (1)
        {
          uint64_t v12 = *(void *)(v11 + 144);
          time_t v13 = (uint64_t *)malloc_type_calloc(1uLL, 0xA0uLL, 0x10A0040A2A4A3C5uLL);
          if (!v13)
          {
            uint64_t v7 = 2529639110;
            krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
            sub_213C9D760(a1, v10);
            int v17 = v10;
            goto LABEL_13;
          }
          krb5_principal v14 = v13;
          uint64_t v15 = krb5_copy_creds_contents(a1, v11, (uint64_t)v13);
          if (v15) {
            break;
          }
          v14[18] = 0;
          uint64_t v16 = (uint64_t **)v10[1];
          v14[19] = (uint64_t)v16;
          krb5_creds *v16 = v14;
          v10[1] = (uint64_t)(v14 + 18);
          uint64_t v11 = v12;
          if (!v12) {
            goto LABEL_9;
          }
        }
        uint64_t v7 = v15;
        int v17 = v14;
LABEL_13:
        free(v17);
        pthread_mutex_unlock(v6);
      }
      else
      {
LABEL_9:
        pthread_mutex_unlock(v6);
        uint64_t v7 = 0;
        *a3 = v10;
      }
    }
    else
    {
      uint64_t v7 = 2529639110;
      pthread_mutex_unlock(v6);
      krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
    }
  }
  return v7;
}

uint64_t sub_213C9CB30(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *a3;
  uint64_t v7 = (pthread_mutex_t *)(v5 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 88));
  LODWORD(v5) = *(_DWORD *)(v5 + 12);
  pthread_mutex_unlock(v7);
  if (v5) {
    return 2;
  }
  uint64_t v9 = *(_OWORD **)v6;
  if (!*(void *)v6) {
    return 2529639054;
  }
  *a4 = *v9;
  long long v10 = v9[1];
  long long v11 = v9[2];
  long long v12 = v9[4];
  a4[3] = v9[3];
  a4[4] = v12;
  a4[1] = v10;
  a4[2] = v11;
  long long v13 = v9[5];
  long long v14 = v9[6];
  long long v15 = v9[8];
  a4[7] = v9[7];
  a4[8] = v15;
  a4[5] = v13;
  a4[6] = v14;
  uint64_t v16 = *((void *)v9 + 18);
  int v17 = (void *)*((void *)v9 + 19);
  if (v16)
  {
    *(void *)(v16 + 152) = v17;
    int v17 = (void *)*((void *)v9 + 19);
  }
  else
  {
    *(void *)(v6 + 8) = v17;
  }
  *int v17 = v16;
  free(v9);
  return 0;
}

uint64_t sub_213C9CBE4(_krb5_context *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  sub_213C9D760(a1, v3);
  free(v3);
  return 0;
}

uint64_t sub_213C9CC1C(_krb5_context *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 88));
  uint64_t v8 = *(void *)(v7 + 24);
  if (v8)
  {
    do
    {
      uint64_t v9 = *(void *)(v8 + 144);
      if (krb5_compare_creds(a1, a3, a4, v8))
      {
        krb5_free_cred_contents(a1, (krb5_creds *)v8);
        uint64_t v10 = *(void *)(v8 + 144);
        long long v11 = *(void **)(v8 + 152);
        if (v10)
        {
          *(void *)(v10 + 152) = v11;
          long long v11 = *(void **)(v8 + 152);
        }
        else
        {
          *(void *)(v7 + 32) = v11;
        }
        *long long v11 = v10;
        free((void *)v8);
        *(void *)(v7 + 56) = time(0);
      }
      uint64_t v8 = v9;
    }
    while (v9);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 88));
  return 0;
}

uint64_t sub_213C9CCE0()
{
  return 0;
}

uint64_t sub_213C9CCE8(_krb5_context *a1, uint64_t *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    void *v4 = 0;
    v4[1] = v4;
    pthread_mutex_lock(&stru_2677FE3B8);
    uint64_t v6 = (const char **)off_2677FE3A8;
    if (off_2677FE3A8)
    {
      do
      {
        while (1)
        {
          uint64_t v7 = v6;
          uint64_t v6 = (const char **)v6[5];
          uint64_t v8 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040E93CF5C4uLL);
          if (!v8)
          {
            pthread_mutex_unlock(&stru_2677FE3B8);
            uint64_t v12 = 12;
            krb5_set_error_message(a1, 12, "malloc: out of memory");
            sub_213C9D7D0((uint64_t)a1, v5);
            return v12;
          }
          uint64_t v9 = v8;
          v8[1] = 0;
          *uint64_t v8 = v7;
          uint64_t v10 = *(void **)(v5 + 8);
          v8[2] = v10;
          void *v10 = v8;
          *(void *)(v5 + 8) = v8 + 1;
          sub_213C9C004((uint64_t)a1, 20, "mcc_get_cache_first, adding to cursor cache: %s\n", *v7);
          if (*v9) {
            break;
          }
LABEL_7:
          if (!v6) {
            goto LABEL_10;
          }
        }
        pthread_mutex_lock((pthread_mutex_t *)(*v9 + 88));
        uint64_t v11 = *v9;
        if (*(_DWORD *)(*v9 + 12))
        {
          pthread_mutex_unlock((pthread_mutex_t *)(v11 + 88));
          void *v9 = 0;
          goto LABEL_7;
        }
        ++*(_DWORD *)(v11 + 8);
        pthread_mutex_unlock((pthread_mutex_t *)(v11 + 88));
      }
      while (v6);
    }
LABEL_10:
    pthread_mutex_unlock(&stru_2677FE3B8);
    uint64_t v12 = 0;
    *a2 = v5;
  }
  else
  {
    uint64_t v12 = 2529639110;
    krb5_set_error_message(a1, -1765328186, "malloc: out of memory");
  }
  return v12;
}

uint64_t sub_213C9CE8C(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2529639054;
  if (!a2) {
    return v3;
  }
  uint64_t v7 = *(const char ****)a2;
  while (!v7)
  {
LABEL_10:
    uint64_t v7 = *(const char ****)a2;
    if (!*(void *)a2) {
      return v3;
    }
  }
  uint64_t v8 = v7[1];
  uint64_t v9 = v7[2];
  if (v8)
  {
    v8[2] = (const char *)v9;
    uint64_t v9 = v7[2];
  }
  else
  {
    *(void *)(a2 + 8) = v9;
  }
  void *v9 = (const char *)v8;
  uint64_t v10 = *v7;
  free(v7);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 11));
  int v11 = *((_DWORD *)v10 + 3);
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 11));
  if (v11)
  {
    sub_213C9C004((uint64_t)a1, 20, "mcc_get_cache_next, not returning, already dead: %s\n", *v10);
    if (sub_213C9D680((uint64_t)a1, v10))
    {
      sub_213C9C004((uint64_t)a1, 20, "mcc_get_cache_next, needs to be freed: %s\n", *v10);
      free(v10);
    }
    goto LABEL_10;
  }
  sub_213C9C004((uint64_t)a1, 20, "mcc_get_cache_next, returning: %s\n", *v10);
  uint64_t v3 = sub_213C7BFE4(a1, (uint64_t)&krb5_mcc_ops, a3);
  if (!v3)
  {
    *(void *)(*a3 + 16) = v10;
    *(void *)(*a3 + 8) = 152;
  }
  return v3;
}

uint64_t sub_213C9CFE0(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t sub_213C9D010(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const char ***)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  sub_213C9C004((uint64_t)a1, 20, "mcc_move, from: %s to: %s\n", *v5, *(const char **)v6);
  pthread_mutex_lock(&stru_2677FE3B8);
  uint64_t v7 = v5[5];
  uint64_t v8 = (char *)v5[6];
  if (v7)
  {
    *((void *)v7 + 6) = v8;
    uint64_t v8 = (char *)v5[6];
  }
  else
  {
    qword_2677FE3B0 = (uint64_t)v5[6];
  }
  *(void *)uint64_t v8 = v7;
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 11));
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 88));
  uint64_t v9 = *(void *)(v6 + 24);
  if (v9)
  {
    do
    {
      uint64_t v10 = *(void *)(v9 + 144);
      krb5_free_cred_contents(a1, (krb5_creds *)v9);
      uint64_t v11 = *(void *)(v9 + 144);
      uint64_t v12 = *(void **)(v9 + 152);
      if (v11)
      {
        *(void *)(v11 + 152) = v12;
        uint64_t v12 = *(void **)(v9 + 152);
      }
      else
      {
        *(void *)(v6 + 32) = v12;
      }
      void *v12 = v11;
      free((void *)v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  long long v13 = v5[3];
  if (v13)
  {
    long long v14 = v13 + 144;
    uint64_t v15 = *((void *)v13 + 18);
    if (v15)
    {
      do
      {
        uint64_t v16 = (const char *)v15;
        *(void *)(v15 + 152) = *((void *)v13 + 19);
        **((void **)v13 + 19) = v15;
        int v17 = *(const char ***)(v6 + 32);
        *((void *)v13 + 18) = 0;
        *((void *)v13 + 19) = v17;
        *int v17 = v13;
        *(void *)(v6 + 32) = v14;
        long long v14 = v16 + 144;
        uint64_t v15 = *((void *)v16 + 18);
        long long v13 = v16;
      }
      while (v15);
    }
    else
    {
      uint64_t v16 = v5[3];
    }
    int v18 = (const char *)*((void *)v16 + 19);
    void v5[4] = v18;
    *(void *)int v18 = 0;
    BOOL v19 = *(const char ***)(v6 + 32);
    *((void *)v16 + 18) = 0;
    *((void *)v16 + 19) = v19;
    *BOOL v19 = v16;
    *(void *)(v6 + 32) = v14;
  }
  uint64_t v20 = *(const char **)(v6 + 16);
  *(void *)(v6 + 16) = v5[2];
  v5[2] = v20;
  time_t v21 = time(0);
  v5[7] = (const char *)v21;
  *(void *)(v6 + 56) = v21;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 11));
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 88));
  sub_213C9D5AC(a1, (uint64_t)v5);
  pthread_mutex_unlock(&stru_2677FE3B8);
  if (sub_213C9D680((uint64_t)a1, v5))
  {
    krb5_data_free((void *)(a2 + 8));
    sub_213C9C004((uint64_t)a1, 20, "mcc_move, from freed\n");
  }
  else
  {
    sub_213C9C004((uint64_t)a1, 20, "mcc_move, from not freed\n");
  }
  return 0;
}

uint64_t sub_213C9D1F0(_krb5_context *a1, char **a2)
{
  uint64_t v4 = strdup("MEMORY:");
  *a2 = v4;
  if (v4) {
    return 0;
  }
  uint64_t v5 = 12;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v5;
}

uint64_t sub_213C9D24C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 88));
  *a3 = *(void *)(v4 + 56);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 88));
  return 0;
}

uint64_t sub_213C9D298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 88));
  *(void *)(v4 + 64) = a3;
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 88));
  return 0;
}

uint64_t sub_213C9D2E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 88));
  *a3 = *(void *)(v4 + 64);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 88));
  return 0;
}

uint64_t sub_213C9D32C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *a3 = *(_OWORD *)(*(void *)(a2 + 16) + 72);
  return 0;
}

uint64_t sub_213C9D340(_krb5_context *a1, uint64_t a2, void *a3)
{
  pthread_mutex_lock(&stru_2677FE3B8);
  uint64_t v6 = (char *)off_2677FE3A8;
  if (off_2677FE3A8)
  {
    while (*((void *)v6 + 9) != *a3 || *((void *)v6 + 10) != a3[1])
    {
      uint64_t v6 = (char *)*((void *)v6 + 5);
      if (!v6) {
        goto LABEL_7;
      }
    }
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 88));
    ++*((_DWORD *)v6 + 2);
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 88));
    pthread_mutex_unlock(&stru_2677FE3B8);
    uint64_t result = 0;
    *(void *)(a2 + 8) = 152;
    *(void *)(a2 + 16) = v6;
  }
  else
  {
LABEL_7:
    pthread_mutex_unlock(&stru_2677FE3B8);
    krb5_clear_error_message(a1);
    return 2529639054;
  }
  return result;
}

char **sub_213C9D3FC(const char *a1)
{
  int v2 = (char **)malloc_type_calloc(1uLL, 0x98uLL, 0x10B0040EEA56EF3uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    if (a1)
    {
      uint64_t v4 = strdup(a1);
      uint64_t *v3 = v4;
      if (!v4)
      {
LABEL_14:
        free(v3);
        return 0;
      }
    }
    else
    {
      if (asprintf(v2, "%p", v2) < 0) {
        goto LABEL_14;
      }
      uint64_t v4 = *v3;
      if (!*v3) {
        goto LABEL_14;
      }
    }
    uint64_t v5 = (const char **)off_2677FE3A8;
    if (off_2677FE3A8)
    {
      while (strcmp(v4, *v5))
      {
        uint64_t v5 = (const char **)v5[5];
        if (!v5) {
          goto LABEL_10;
        }
      }
      free(v4);
      goto LABEL_14;
    }
LABEL_10:
    v3[1] = (char *)1;
    v3[2] = 0;
    v3[3] = 0;
    v3[4] = (char *)(v3 + 3);
    v3[7] = (char *)time(0);
    v3[8] = 0;
    krb5_generate_random_block((uint64_t)(v3 + 9), 16);
    pthread_mutex_init((pthread_mutex_t *)(v3 + 11), 0);
    uint64_t v6 = (char *)off_2677FE3A8;
    v3[5] = (char *)off_2677FE3A8;
    uint64_t v7 = (uint64_t *)(v6 + 48);
    BOOL v8 = v6 == 0;
    off_2677FE3A8 = v3;
    uint64_t v9 = &qword_2677FE3B0;
    if (!v8) {
      uint64_t v9 = v7;
    }
    uint64_t *v9 = (uint64_t)(v3 + 5);
    v3[6] = (char *)&off_2677FE3A8;
  }
  return v3;
}

void sub_213C9D53C(krb5_context a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 + 144);
      krb5_free_cred_contents(a1, (krb5_creds *)v2);
      uint64_t v6 = *(void *)(v2 + 144);
      uint64_t v7 = *(void **)(v2 + 152);
      if (v6)
      {
        *(void *)(v6 + 152) = v7;
        uint64_t v7 = *(void **)(v2 + 152);
      }
      else
      {
        *(void *)(a2 + 32) = v7;
      }
      void *v7 = v6;
      free((void *)v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
}

uint64_t sub_213C9D5AC(_krb5_context *a1, uint64_t a2)
{
  uint64_t v4 = (pthread_mutex_t *)(a2 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 88));
  sub_213C9C004((uint64_t)a1, 20, "mcc_destroy_internal_locked: %s\n", *(const char **)a2);
  if (!*(_DWORD *)(a2 + 8)) {
    heim_abort("mcc_destroy: refcnt already 0:m->refcnt != 0", v5, v6, v7, v8, v9, v10, v11, v16);
  }
  if (!*(_DWORD *)(a2 + 12))
  {
    uint64_t v12 = *(void *)(a2 + 40);
    long long v13 = *(void **)(a2 + 48);
    if (v12)
    {
      *(void *)(v12 + 48) = v13;
      long long v13 = *(void **)(a2 + 48);
    }
    else
    {
      qword_2677FE3B0 = *(void *)(a2 + 48);
    }
    void *v13 = v12;
    long long v14 = *(krb5_principal_data **)(a2 + 16);
    if (v14)
    {
      krb5_free_principal(a1, v14);
      *(void *)(a2 + 16) = 0;
    }
    *(_DWORD *)(a2 + 12) = 1;
    sub_213C9D53C(a1, a2);
  }

  return pthread_mutex_unlock(v4);
}

uint64_t sub_213C9D680(uint64_t a1, const char **a2)
{
  pthread_mutex_lock(&stru_2677FE3B8);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 11));
  sub_213C9C004(a1, 20, "mcc_close_internal: %s, %d\n", *a2, *((_DWORD *)a2 + 2));
  int v4 = *((_DWORD *)a2 + 2) - 1;
  *((_DWORD *)a2 + 2) = v4;
  if (v4 || !*((_DWORD *)a2 + 3))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 11));
    uint64_t v5 = 0;
  }
  else
  {
    sub_213C9C004(a1, 20, "mcc_close_internal, dead: %s\n", *a2);
    pthread_mutex_unlock((pthread_mutex_t *)(a2 + 11));
    free((void *)*a2);
    *a2 = 0;
    pthread_mutex_destroy((pthread_mutex_t *)(a2 + 11));
    uint64_t v5 = 1;
  }
  pthread_mutex_unlock(&stru_2677FE3B8);
  return v5;
}

void sub_213C9D760(krb5_context a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    do
    {
      uint64_t v5 = *(void *)(v2 + 144);
      krb5_free_cred_contents(a1, (krb5_creds *)v2);
      uint64_t v6 = *(void *)(v2 + 144);
      uint64_t v7 = *(void **)(v2 + 152);
      if (v6)
      {
        *(void *)(v6 + 152) = v7;
        uint64_t v7 = *(void **)(v2 + 152);
      }
      else
      {
        a2[1] = (uint64_t)v7;
      }
      void *v7 = v6;
      free((void *)v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
}

void sub_213C9D7D0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(const char ****)a2; *(void *)a2; uint64_t i = *(const char ****)a2)
  {
    sub_213C9C004(a1, 20, "mcc_free_cache_cursor, closing cache: %s\n", **i);
    if (sub_213C9D680(a1, *i))
    {
      uint64_t v5 = *i;
      sub_213C9C004(a1, 20, "mcc_free_cache_cursor, needs to be freed: %s\n", **i);
      free(v5);
    }
    uint64_t v6 = i[1];
    uint64_t v7 = i[2];
    if (v6)
    {
      v6[2] = (const char *)v7;
      uint64_t v7 = i[2];
    }
    else
    {
      *(void *)(a2 + 8) = v7;
    }
    void *v7 = (const char *)v6;
    free(i);
  }
}

uint64_t _krb5_s4u2self_to_checksumdata(_krb5_context *a1, uint64_t a2, size_t *a3)
{
  uint64_t v6 = krb5_storage_emem();
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    krb5_storage_set_flags((uint64_t)v6, 32);
    uint64_t v8 = krb5_store_int32(v7, *(_DWORD *)a2);
    if (!v8)
    {
      if (*(_DWORD *)(a2 + 8))
      {
        uint64_t v9 = 0;
        while (1)
        {
          size_t v10 = strlen(*(const char **)(*(void *)(a2 + 16) + 8 * v9));
          if (krb5_storage_write(v7) != v10) {
            break;
          }
          if (++v9 >= (unint64_t)*(unsigned int *)(a2 + 8)) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        size_t v11 = strlen(*(const char **)(a2 + 24));
        if (krb5_storage_write(v7) == v11)
        {
          size_t v12 = strlen(*(const char **)(a2 + 56));
          if (krb5_storage_write(v7) == v12)
          {
            uint64_t v13 = krb5_storage_to_data(v7, a3);
            krb5_storage_free(v7);
            return v13;
          }
        }
      }
      uint64_t v8 = 12;
    }
    krb5_clear_error_message(a1);
  }
  else
  {
    krb5_clear_error_message(a1);
    return 12;
  }
  return v8;
}

uint64_t krb5_enomem(_krb5_context *a1)
{
  return 12;
}

uint64_t sub_213C9DA08()
{
  return 22;
}

unsigned char *krb5_uuid_to_string(uint64_t a1)
{
  uint64_t result = malloc_type_malloc(0x25uLL, 0x9A742ABuLL);
  if (result)
  {
    uint64_t v3 = 0;
    int v4 = result;
    do
    {
      if ((v3 & 0x7FFFFFFFFFFFFFFDLL) == 8 || (v3 & 0x7FFFFFFFFFFFFFFDLL) == 4) {
        *v4++ = 45;
      }
      unsigned char *v4 = byte_213CDA418[(unint64_t)*(unsigned __int8 *)(a1 + v3) >> 4];
      v4[1] = byte_213CDA418[*(unsigned char *)(a1 + v3) & 0xF];
      v4 += 2;
      ++v3;
    }
    while (v3 != 16);
    unsigned char *v4 = 0;
  }
  return result;
}

uint64_t krb5_string_to_uuid(const char *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)a1;
  if (strlen(a1) == 36)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if ((v4 & 0x7FFFFFFFFFFFFFFDLL) == 8 || (v4 & 0x7FFFFFFFFFFFFFFDLL) == 4)
      {
        int v6 = *v3++;
        if (v6 != 45) {
          break;
        }
      }
      char v7 = sub_213C9DB48(*v3);
      *(unsigned char *)(a2 + v4) = sub_213C9DB48(v3[1]) | (16 * v7);
      v3 += 2;
      if (++v4 == 16) {
        return 0;
      }
    }
  }
  return 22;
}

uint64_t sub_213C9DB48(unsigned __int8 a1)
{
  char v1 = __toupper(a1);
  uint64_t result = 0;
  LOBYTE(v3) = 48;
  while (v1 != (char)v3)
  {
    int v3 = byte_213CDA418[++result];
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

krb5_error_code krb5_mk_error(krb5_context a1, const krb5_error *a2, krb5_data *a3)
{
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  size_t v10 = v5;
  uint64_t v11 = v4;
  uint64_t v12 = v3;
  error_message = a3;
  krb5_error_code v14 = (int)a2;
  size_t v32 = a3;
  *(void *)krb5_BOOLean v25 = 0;
  krb5_int32 v24 = 0;
  uint64_t v23 = 0;
  krb5_us_timeofday(a1, v25, &v24);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v31 = 0;
  v26[0] = 0x1E00000005;
  void v26[2] = v8;
  v26[3] = *(void *)v25;
  LODWORD(v27) = v24;
  v26[1] = v9;
  if ((v14 + 1765328256) > 0xFFFFFF7F)
  {
    char v16 = 0;
    int v17 = v14 + 1765328384;
    goto LABEL_6;
  }
  if (!error_message)
  {
    error_message = (krb5_data *)krb5_get_error_message(a1, v14);
    size_t v32 = error_message;
    int v17 = 60;
    char v16 = (const char *)error_message;
LABEL_6:
    DWORD1(v27) = v17;
    if (!error_message) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  char v16 = 0;
  DWORD1(v27) = 60;
LABEL_7:
  *((void *)&v30 + 1) = &v32;
LABEL_8:
  if (v12) {
    uint64_t v31 = v12;
  }
  if (v10)
  {
    long long v29 = *v10;
    int v18 = (char *)*((void *)v10 + 3);
    *(void *)&long long v30 = *((void *)v10 + 2);
  }
  else
  {
    int v18 = aUnspecifiedRea;
  }
  *((void *)&v28 + 1) = v18;
  if (v11)
  {
    *((void *)&v27 + 1) = v11 + 24;
    *(void *)&long long v28 = v11;
  }
  size_t v19 = sub_213CBBC3C((uint64_t)v26);
  *(void *)uint64_t v33 = v19;
  uint64_t v20 = malloc_type_malloc(v19, 0xD9582E5EuLL);
  *(void *)(v33 + 8) = v20;
  if (!v20)
  {
    krb5_error_code v21 = 12;
    if (!v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  krb5_error_code v21 = sub_213CBBC1C((uint64_t)v20 + *(void *)v33 - 1, *(void *)v33, (uint64_t)v26, (uint64_t)&v23);
  if (v21)
  {
    free(*(void **)(v33 + 8));
    *(void *)(v33 + 8) = 0;
  }
  if (v16) {
LABEL_19:
  }
    krb5_free_error_message(a1, v16);
LABEL_20:
  if (!v21 && *(void *)v33 != v23) {
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  }
  return v21;
}

krb5_error_code krb5_mk_priv(krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  size_t size = 0;
  if (!a5 && (*(_DWORD *)a2 & 0xA) != 0) {
    return -1765328169;
  }
  size_t v10 = (const krb5_keyblock *)*((void *)a2 + 5);
  if (!v10)
  {
    size_t v10 = (const krb5_keyblock *)*((void *)a2 + 6);
    if (!v10) {
      size_t v10 = (const krb5_keyblock *)*((void *)a2 + 4);
    }
  }
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0uLL;
  uint64_t v26 = 0;
  long long v27 = 0;
  uint64_t v25 = 0;
  krb5_data v29 = *a3;
  krb5_us_timeofday(a1, (krb5_timestamp *)&v25, (krb5_int32 *)&v26);
  int v11 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    uint64_t v12 = &v25;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11) {
    uint64_t v13 = &v26;
  }
  else {
    uint64_t v13 = 0;
  }
  long long v30 = v12;
  uint64_t v31 = v13;
  if ((v11 & 2) != 0)
  {
    *(void *)&a5->timestamp = v25;
    a5->seq = v26;
  }
  if ((v11 & 4) != 0)
  {
    krb5_error_code v14 = (char *)&v26 + 4;
    HIDWORD(v26) = *((_DWORD *)a2 + 14);
  }
  else
  {
    krb5_error_code v14 = 0;
  }
  size_t v32 = v14;
  if ((v11 & 8) != 0) {
    a5[1].timestamp = *((_DWORD *)a2 + 14);
  }
  long long v33 = *(_OWORD *)((char *)a2 + 8);
  krb5_data_zero((void *)&v35 + 1);
  uint64_t v15 = sub_213CBBB1C((uint64_t)&v29);
  char v16 = (char *)malloc_type_malloc(v15, 0xA8A53C70uLL);
  if (!v16) {
    goto LABEL_33;
  }
  int v17 = v16;
  int v18 = &v16[v15];
  krb5_error_code v19 = sub_213CBBAFC((uint64_t)&v16[v15 - 1], v15, (uint64_t)&v29, (uint64_t)&size);
  if (v19)
  {
LABEL_22:
    krb5_error_code v9 = v19;
    free(v17);
LABEL_34:
    krb5_data_free((void *)&v35 + 1);
    return v9;
  }
  if (v15 != size) {
LABEL_38:
  }
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  *(void *)&long long v34 = 0x1500000005;
  DWORD2(v34) = v10->magic;
  *(void *)&long long v35 = 0;
  krb5_error_code v20 = krb5_crypto_init(a1, v10, 0, &v27);
  if (v20)
  {
    krb5_error_code v9 = v20;
LABEL_26:
    free(v17);
    return v9;
  }
  krb5_error_code v9 = krb5_encrypt(a1, v27, (krb5_pointer)0xD, (size_t)&v18[-size], (krb5_encrypt_block *)size, (char *)&v35 + 8);
  krb5_crypto_destroy(a1, (uint64_t)v27);
  free(v17);
  if (v9) {
    return v9;
  }
  uint64_t v21 = sub_213CBBABC((uint64_t)&v34);
  long long v22 = (char *)malloc_type_malloc(v21, 0xBFD430uLL);
  if (!v22)
  {
LABEL_33:
    krb5_error_code v9 = 12;
    goto LABEL_34;
  }
  int v17 = v22;
  uint64_t v23 = &v22[v21];
  krb5_error_code v19 = sub_213CBBA9C((uint64_t)&v22[v21 - 1], v21, (uint64_t)&v34, (uint64_t)&size);
  if (v19) {
    goto LABEL_22;
  }
  if (v21 != size) {
    goto LABEL_38;
  }
  krb5_data_free((void *)&v35 + 1);
  if (krb5_data_copy(a4, &v23[-size], size))
  {
    krb5_error_code v9 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_26;
  }
  free(v17);
  krb5_error_code v9 = 0;
  if ((*(unsigned char *)a2 & 4) != 0) {
    ++*((_DWORD *)a2 + 14);
  }
  return v9;
}

krb5_error_code krb5_mk_rep(krb5_context a1, krb5_auth_context a2, krb5_data *a3)
{
  long long v34 = 0;
  uint64_t v28 = 0;
  eblock = 0;
  long long v27 = 0u;
  long long v26 = 0u;
  size_t v32 = 0;
  long long v33 = 0;
  uint64_t v25 = 0xF00000005;
  uint64_t v11 = *((void *)a2 + 8);
  uint64_t v30 = *(void *)(v11 + 56);
  uint64_t v31 = 0;
  LODWORD(v31) = *(_DWORD *)(v11 + 48);
  int v12 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x20) != 0)
  {
    uint64_t v13 = (const krb5_keyblock *)*((void *)a2 + 5);
    if (!v13)
    {
      krb5_error_code v15 = krb5_auth_con_generatelocalsubkey(a1, (uint64_t)a2, *((unsigned int **)a2 + 4));
      if (v15) {
        goto LABEL_25;
      }
      uint64_t v13 = (const krb5_keyblock *)*((void *)a2 + 5);
    }
    if (krb5_copy_keyblock(a1, v13, &v32)) {
      goto LABEL_16;
    }
    int v12 = *(_DWORD *)a2;
  }
  if ((v12 & 4) != 0)
  {
    if (!*((_DWORD *)a2 + 14)) {
      krb5_generate_seq_number(a1, *((void *)a2 + 4), (int *)a2 + 14);
    }
    krb5_error_code v14 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    long long v33 = v14;
    if (v14)
    {
      *krb5_error_code v14 = *((_DWORD *)a2 + 14);
      goto LABEL_11;
    }
LABEL_16:
    krb5_error_code v15 = krb5_enomem(a1);
    goto LABEL_25;
  }
  long long v33 = 0;
LABEL_11:
  LODWORD(v26) = **((_DWORD **)a2 + 4);
  *((void *)&v26 + 1) = 0;
  if (*((void *)a2 + 13))
  {
    krb5_error_code v15 = sub_213CAE7D8(a1, (uint64_t)a2, (uint64_t)&v25, v3, v4, v5, v6, v7);
    if (v15) {
      goto LABEL_25;
    }
  }
  char v16 = (krb5_encrypt_block *)sub_213CBB9FC((uint64_t)&v30);
  int v17 = malloc_type_malloc((size_t)v16, 0x15D00830uLL);
  if (!v17)
  {
    krb5_error_code v15 = 12;
    goto LABEL_25;
  }
  int v18 = v17;
  krb5_error_code v19 = (char *)v16 + (void)v17;
  krb5_error_code v20 = sub_213CBB9DC((uint64_t)v16 + (void)v17 - 1, (uint64_t)v16, (uint64_t)&v30, (uint64_t)&eblock);
  if (v20)
  {
    krb5_error_code v15 = v20;
    free(v18);
    goto LABEL_25;
  }
  if (v16 != eblock) {
    goto LABEL_32;
  }
  krb5_error_code v15 = krb5_crypto_init(a1, *((const krb5_keyblock **)a2 + 4), 0, &v34);
  if (!v15)
  {
    krb5_error_code v15 = krb5_encrypt(a1, v34, (krb5_pointer)0xC, v19 - (char *)eblock, eblock, &v27);
    if (!v15)
    {
      size_t v22 = sub_213CBB99C((uint64_t)&v25);
      *(void *)&a3->krb5_magic magic = v22;
      uint64_t v23 = (char *)malloc_type_malloc(v22, 0x7E47B92EuLL);
      a3->data = v23;
      if (!v23)
      {
        krb5_error_code v15 = 12;
        goto LABEL_23;
      }
      krb5_error_code v24 = sub_213CBB97C((uint64_t)&v23[*(void *)&a3->magic - 1], *(void *)&a3->magic, (uint64_t)&v25, (uint64_t)&eblock);
      if (v24)
      {
        krb5_error_code v15 = v24;
        free(a3->data);
        a3->data = 0;
        goto LABEL_23;
      }
      if (*(krb5_encrypt_block **)&a3->magic == eblock)
      {
        krb5_error_code v15 = 0;
        goto LABEL_23;
      }
LABEL_32:
      krb5_abortx(a1, "internal error in ASN.1 encoder", v25, v26, v27, v28);
    }
  }
LABEL_23:
  free(v18);
  if (v34) {
    krb5_crypto_destroy(a1, (uint64_t)v34);
  }
LABEL_25:
  sub_213CBBA0C((uint64_t)&v30);
  sub_213CBB9AC((uint64_t)&v25);
  return v15;
}

uint64_t sub_213C9E2F4(krb5_context a1, krb5_auth_context *a2, char a3, uint64_t *a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  memset(v30, 0, sizeof(v30));
  krb5_auth_context v29 = 0;
  if (!a2)
  {
    uint64_t checksum = krb5_auth_con_init(a1, &v29);
    if (checksum) {
      return checksum;
    }
LABEL_8:
    krb5_auth_context v18 = v29;
    if ((a3 & 4) != 0 && !*((void *)v29 + 5))
    {
      uint64_t checksum = krb5_auth_con_generatelocalsubkey(a1, (uint64_t)v29, (unsigned int *)(a6 + 16));
      if (checksum) {
        goto LABEL_13;
      }
      krb5_auth_context v18 = v29;
    }
    krb5_free_keyblock(a1, *((krb5_keyblock **)v18 + 4));
    uint64_t checksum = krb5_copy_keyblock(a1, (const krb5_keyblock *)(a6 + 16), (krb5_keyblock **)v29 + 4);
    if (checksum)
    {
LABEL_13:
      if (!a2) {
        krb5_auth_con_free(a1, v29);
      }
      return checksum;
    }
    if (a2)
    {
      if ((a3 & 8) != 0)
      {
        uint64_t checksum = _krb5_auth_con_setup_pfs(a1, (uint64_t)v29, **((_DWORD **)v29 + 4));
        if (checksum) {
          return checksum;
        }
      }
    }
    if (!a4)
    {
      long long v26 = 0;
      goto LABEL_26;
    }
    krb5_error_code v20 = (const krb5_keyblock *)*((void *)v29 + 4);
    krb5_magic magic = v20->magic;
    if (v20->magic <= 0x18u)
    {
      if (((1 << magic) & 0x180000C) != 0)
      {
        uint64_t v23 = *a4;
        uint64_t v22 = a4[1];
        krb5_error_code v24 = a1;
        int v25 = 7;
        goto LABEL_23;
      }
      if (magic == 1)
      {
        uint64_t v23 = *a4;
        uint64_t v22 = a4[1];
        krb5_error_code v24 = a1;
        int v25 = 2;
LABEL_23:
        uint64_t checksum = krb5_create_checksum(v24, 0, 0, v25, v22, v23, (uint64_t)v30);
        if (checksum) {
          goto LABEL_13;
        }
LABEL_24:
        long long v26 = v30;
LABEL_26:
        uint64_t checksum = _krb5_build_authenticator(a1, (uint64_t)v29, (char *)**((unsigned int **)v29 + 4), a6, (uint64_t)v26, &v31, (void *)a9);
        if (v26) {
          sub_213CBB434((uint64_t)v26);
        }
        if (checksum) {
          goto LABEL_13;
        }
        uint64_t v27 = krb5_build_ap_req(a1, **((_DWORD **)v29 + 4), a6, a3, v31, v32, a7);
        goto LABEL_33;
      }
    }
    uint64_t v28 = 0;
    uint64_t v27 = krb5_crypto_init(a1, v20, 0, &v28);
    if (v27)
    {
LABEL_33:
      uint64_t checksum = v27;
      goto LABEL_13;
    }
    uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v28, a8, 0, a4[1], *a4, (uint64_t)v30);
    krb5_crypto_destroy(a1, (uint64_t)v28);
    if (checksum) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  char v16 = *a2;
  if (*a2)
  {
    uint64_t checksum = 0;
  }
  else
  {
    uint64_t checksum = krb5_auth_con_init(a1, a2);
    char v16 = *a2;
  }
  krb5_auth_context v29 = v16;
  if (!checksum) {
    goto LABEL_8;
  }
  return checksum;
}

krb5_error_code krb5_mk_req_extended(krb5_context a1, krb5_auth_context *a2, krb5_flags a3, krb5_data *a4, krb5_creds *a5, krb5_data *a6)
{
  return sub_213C9E2F4(a1, a2, a3, (uint64_t *)&a4->magic, (int)a5, (uint64_t)a5, (uint64_t)a6, 0xAu, 0xBu);
}

uint64_t krb5_mk_req_exact(_krb5_context *a1, krb5_auth_context *a2, krb5_flags a3, const krb5_principal_data *a4, krb5_data *a5, krb5_ccache cache, krb5_data *a7)
{
  int v17 = 0;
  *(_OWORD *)int principal = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t credentials = krb5_cc_get_principal(a1, cache, principal);
  if (!credentials)
  {
    uint64_t v15 = krb5_copy_principal(a1, a4, &principal[1]);
    if (v15)
    {
      uint64_t credentials = v15;
      krb5_free_cred_contents(a1, (krb5_creds *)principal);
    }
    else
    {
      *((void *)&v21 + 1) = 0;
      if (a2 && *a2 && *((_DWORD *)*a2 + 22)) {
        LODWORD(v19) = *((_DWORD *)*a2 + 22);
      }
      uint64_t credentials = krb5_get_credentials(a1, 0, cache, (krb5_creds *)principal, &v17);
      krb5_free_cred_contents(a1, (krb5_creds *)principal);
      if (!credentials)
      {
        uint64_t credentials = krb5_mk_req_extended(a1, a2, a3, a5, v17, a7);
        krb5_free_creds(a1, v17);
      }
    }
  }
  return credentials;
}

krb5_error_code krb5_mk_req(krb5_context a1, krb5_auth_context *a2, krb5_flags a3, char *a4, char *a5, krb5_data *a6, krb5_ccache a7, krb5_data *a8)
{
  krb5_auth_context v18 = 0;
  long long v19 = 0;
  krb5_principal v17 = 0;
  krb5_error_code principal = krb5_expand_hostname_realms(a1, a5, (unsigned __int8 **)&v18, &v19);
  if (!principal)
  {
    krb5_error_code principal = krb5_make_principal(a1, &v17, *v19, a4, v18, 0);
    free(v18);
    krb5_free_host_realm(a1, v19);
    if (!principal)
    {
      krb5_error_code principal = krb5_mk_req_exact(a1, a2, a3, v17, a6, a7, a8);
      krb5_free_principal(a1, v17);
    }
  }
  return principal;
}

krb5_error_code krb5_mk_safe(krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  uint64_t v27 = 0;
  if (!a5 && (*(_DWORD *)a2 & 0xA) != 0) {
    return -1765328169;
  }
  size_t v10 = (const krb5_keyblock *)*((void *)a2 + 5);
  if (!v10)
  {
    size_t v10 = (const krb5_keyblock *)*((void *)a2 + 6);
    if (!v10) {
      size_t v10 = (const krb5_keyblock *)*((void *)a2 + 4);
    }
  }
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v25 = 0;
  long long v26 = 0;
  uint64_t v28 = 0x1400000005;
  *(void *)long long v24 = 0;
  krb5_data v29 = *a3;
  krb5_us_timeofday(a1, v24, (krb5_int32 *)&v25);
  int v11 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    int v12 = v24;
  }
  else {
    int v12 = 0;
  }
  if (v11) {
    uint64_t v13 = &v25;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  if ((v11 & 2) != 0)
  {
    *(void *)&a5->timestamp = *(void *)v24;
    a5->seq = v25;
  }
  if ((v11 & 4) != 0)
  {
    krb5_error_code v14 = (char *)&v25 + 4;
    HIDWORD(v25) = *((_DWORD *)a2 + 14);
  }
  else
  {
    krb5_error_code v14 = 0;
  }
  uint64_t v32 = v14;
  if ((v11 & 8) != 0) {
    a5[1].timestamp = *((_DWORD *)a2 + 14);
  }
  long long v33 = *(_OWORD *)((char *)a2 + 8);
  LODWORD(v34) = 0;
  *((void *)&v34 + 1) = 0;
  uint64_t v35 = 0;
  uint64_t v15 = sub_213CBBA5C((uint64_t)&v28);
  char v16 = malloc_type_malloc(v15, 0xA7DDBABCuLL);
  if (!v16) {
    return 12;
  }
  krb5_principal v17 = v16;
  krb5_error_code v18 = sub_213CBBA3C((uint64_t)v16 + v15 - 1, v15, (uint64_t)&v28, (uint64_t)&v27);
  if (v18)
  {
LABEL_24:
    krb5_error_code checksum = v18;
    free(v17);
    return checksum;
  }
  if (v15 != v27) {
    goto LABEL_36;
  }
  krb5_error_code v18 = krb5_crypto_init(a1, v10, 0, &v26);
  if (v18) {
    goto LABEL_24;
  }
  krb5_error_code checksum = krb5_create_checksum(a1, (_DWORD **)v26, 0xFu, 0, (uint64_t)v17, v27, (uint64_t)&v34);
  krb5_crypto_destroy(a1, (uint64_t)v26);
  free(v17);
  if (checksum) {
    return checksum;
  }
  uint64_t v20 = sub_213CBBA5C((uint64_t)&v28);
  long long v21 = malloc_type_malloc(v20, 0x1FF53DFEuLL);
  if (!v21)
  {
    krb5_error_code checksum = 12;
    goto LABEL_32;
  }
  long long v22 = v21;
  krb5_error_code v23 = sub_213CBBA3C((uint64_t)v21 + v20 - 1, v20, (uint64_t)&v28, (uint64_t)&v27);
  if (v23)
  {
    krb5_error_code checksum = v23;
    free(v22);
LABEL_32:
    sub_213CBB434((uint64_t)&v34);
    return checksum;
  }
  sub_213CBB434((uint64_t)&v34);
  if (v20 != v27) {
LABEL_36:
  }
    krb5_abortx(a1, "internal error in ASN.1 encoder");
  *(void *)&a4->krb5_magic magic = v20;
  a4->data = (char *)v22;
  krb5_error_code checksum = 0;
  if ((*(unsigned char *)a2 & 4) != 0) {
    ++*((_DWORD *)a2 + 14);
  }
  return checksum;
}

uint64_t sub_213C9EA44(const void *a1, size_t a2, char *a3, size_t a4)
{
  size_t v6 = a2;
  if (a4 <= a2) {
    size_t v8 = a2;
  }
  else {
    size_t v8 = a4;
  }
  size_t v9 = 2 * v8;
  size_t v10 = (char *)malloc_type_malloc(2 * v8, 0xA840375AuLL);
  int v11 = malloc_type_malloc(v6, 0xEEE7A0D5uLL);
  int v12 = v11;
  if (v10) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    size_t v38 = v9;
    __src = v11;
    memcpy(v11, a1, v6);
    bzero(a3, a4);
    int v12 = __src;
    size_t v15 = 0;
    unint64_t v16 = 8 * v6;
    size_t v17 = v6 & 0x1FFFFFFFFFFFFFFFLL;
    if ((v6 & 0x1FFFFFFFFFFFFFFELL) != 0) {
      uint64_t v18 = v6 & 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v18 = 1;
    }
    size_t v40 = v6;
    uint64_t v41 = &v10[a4];
    long long v19 = v10 - 1;
    uint64_t v20 = a3 - 1;
    uint64_t v39 = v10;
    while (1)
    {
      memcpy(&v10[v15], v12, v6);
      if (v16)
      {
        long long v21 = malloc_type_malloc(v17, 0x584A9DA5uLL);
        if (!v21)
        {
          uint64_t v14 = 12;
          size_t v9 = v38;
          size_t v6 = v40;
          int v12 = __src;
          if (__src) {
            goto LABEL_38;
          }
          goto LABEL_39;
        }
        long long v22 = v21;
        memcpy(v21, __src, v17);
        uint64_t v23 = 0;
        do
        {
          unint64_t v24 = 8 * v23 - 0xD % v16;
          do
          {
            unint64_t v25 = v24;
            v24 += v16;
          }
          while ((v25 & 0x8000000000000000) != 0);
          unint64_t v26 = v25 >> 3;
          char v27 = v25 & 7;
          unint64_t v28 = v25 + 8;
          int v29 = -(int)v25 & 7;
          if (v28 <= v16) {
            LOBYTE(v29) = 8 - v27;
          }
          *((unsigned char *)__src + v23++) = (v22[(v26 + 1) % v17] >> v29) | (v22[v26] << v27);
        }
        while (v23 != v18);
        free(v22);
        size_t v10 = v39;
        size_t v6 = v40;
      }
      v15 += v6;
      if (v15 >= a4)
      {
        int v12 = __src;
        while (1)
        {
          if (((a4 - 1) & 0x8000000000000000) == 0)
          {
            BOOL v30 = 0;
            size_t v31 = a4;
            do
            {
              unsigned int v32 = v30 + v20[v31] + v19[v31];
              BOOL v30 = v32 > 0xFF;
              v20[v31--] = v32;
            }
            while (v31);
            size_t v33 = a4 - 1;
            if (v32 >= 0x100)
            {
              do
              {
                unsigned int v34 = a3[v33]++ + 1;
                BOOL v35 = v33-- != 0;
              }
              while (v35 && ((v34 >> 8) & 1) != 0);
            }
          }
          v15 -= a4;
          if (!v15) {
            break;
          }
          memmove(v10, v41, v15);
          int v12 = __src;
          if (v15 < a4) {
            goto LABEL_36;
          }
        }
LABEL_37:
        uint64_t v14 = 0;
        size_t v9 = v38;
        if (!v12) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      int v12 = __src;
LABEL_36:
      if (!v15) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v14 = 12;
  if (v11)
  {
LABEL_38:
    uint64_t v36 = v12;
    bzero(v12, v6);
    free(v36);
  }
LABEL_39:
  if (v10)
  {
    bzero(v10, v9);
    free(v10);
  }
  return v14;
}

ssize_t krb5_net_read(int a1, int *a2, char *a3, size_t a4)
{
  return sub_213CB7D14(*a2, a3, a4);
}

size_t krb5_net_write(int a1, int *a2, char *__buf, size_t __nbyte)
{
  return sub_213CB7D98(*a2, __buf, __nbyte);
}

uint64_t krb5_net_write_block(uint64_t a1, int *a2, char *a3, size_t a4, uint64_t a5)
{
  size_t v6 = a4;
  int v8 = *a2;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v9 = 1 << v8;
  unint64_t v10 = (unint64_t)v8 >> 5;
  size_t v11 = a4;
  while (1)
  {
    memset(&v17, 0, sizeof(v17));
    if (__darwin_check_fd_set_overflow(v8, &v17, 0)) {
      v17.fds_bits[v10] |= v9;
    }
    if (a5)
    {
      uint64_t v18 = a5;
      LODWORD(v19) = 0;
      int v12 = (timeval *)&v18;
    }
    else
    {
      int v12 = 0;
    }
    int v13 = select(v8 + 1, 0, &v17, 0, v12);
    if ((v13 & 0x80000000) == 0) {
      break;
    }
    if (*__error() != 4) {
      return -1;
    }
LABEL_16:
    if (!v11) {
      return v6;
    }
  }
  if (!v13) {
    return 0;
  }
  if (!__darwin_check_fd_set_overflow(v8, &v17, 0) || (v17.fds_bits[v10] & v9) == 0)
  {
    *__error() = 60;
    return -1;
  }
  ssize_t v14 = write(v8, a3, v11);
  ssize_t v15 = v14;
  if ((v14 & 0x8000000000000000) == 0)
  {
    a3 += v14;
    v11 -= v14;
    goto LABEL_16;
  }
  if (*__error() == 4) {
    goto LABEL_16;
  }
  return v15;
}

uint64_t krb5_pac_parse(_krb5_context *a1, const void *a2, size_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = (void *)heim_uniq_alloc(0x68uLL, (uint64_t)"krb5-pac", (uint64_t)sub_213C9F248, (uint64_t)a4, a5, a6, a7, a8);
  if (!v12)
  {
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_12;
  }
  uint64_t v33 = 0;
  int v13 = krb5_storage_from_readonly_mem((uint64_t)a2, a3);
  if (!v13)
  {
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_9;
  }
  uint64_t v14 = (uint64_t)v13;
  krb5_storage_set_flags((uint64_t)v13, 32);
  uint64_t v15 = krb5_ret_uint32(v14, (_DWORD *)&v33 + 1);
  if (v15 || (uint64_t v15 = krb5_ret_uint32(v14, &v33), v15))
  {
LABEL_5:
    uint64_t v16 = v15;
    krb5_clear_error_message(a1);
    goto LABEL_6;
  }
  if (!HIDWORD(v33))
  {
    uint64_t v19 = "PAC have too few buffers";
    goto LABEL_19;
  }
  if (HIDWORD(v33) >= 0x3E9)
  {
    uint64_t v16 = 2314790741;
    krb5_set_error_message(a1, -1980176555, "PAC have too many buffers");
    goto LABEL_6;
  }
  if (v33)
  {
    size_t v31 = (const char *)v33;
    uint64_t v19 = "PAC have wrong version %d";
    goto LABEL_19;
  }
  size_t v20 = (16 * HIDWORD(v33)) | 8;
  long long v21 = (unsigned int *)malloc_type_calloc(1uLL, v20, 0x18F7D02DuLL);
  _OWORD v12[4] = v21;
  if (!v21)
  {
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_6;
  }
  int v22 = HIDWORD(v33);
  *long long v21 = HIDWORD(v33);
  v21[1] = v33;
  if (v20 > a3)
  {
    uint64_t v16 = 22;
    goto LABEL_6;
  }
  if (!v22)
  {
LABEL_47:
    uint64_t v16 = krb5_data_copy(v12 + 5, a2, a3);
    if (v16) {
      goto LABEL_6;
    }
    krb5_storage_free(v14);
    goto LABEL_12;
  }
  unint64_t v23 = 0;
  uint64_t v24 = 3;
  while (2)
  {
    uint64_t v15 = krb5_ret_uint32(v14, &v21[v24 - 1]);
    if (v15) {
      goto LABEL_5;
    }
    uint64_t v15 = krb5_ret_uint32(v14, (_DWORD *)(v12[4] + v24 * 4));
    if (v15) {
      goto LABEL_5;
    }
    uint64_t v15 = krb5_ret_uint32(v14, (_DWORD *)(v12[4] + v24 * 4 + 8));
    if (v15) {
      goto LABEL_5;
    }
    uint64_t v15 = krb5_ret_uint32(v14, (_DWORD *)(v12[4] + v24 * 4 + 4));
    if (v15) {
      goto LABEL_5;
    }
    long long v21 = (unsigned int *)v12[4];
    unint64_t v25 = &v21[v24];
    size_t v26 = v21[v24 + 2];
    if ((v26 & 7) != 0)
    {
      uint64_t v19 = "PAC out of allignment";
      goto LABEL_19;
    }
    if (v25[1])
    {
      uint64_t v19 = "PAC high offset set";
      goto LABEL_19;
    }
    if (a3 < v26)
    {
      uint64_t v19 = "PAC offset off end";
      goto LABEL_19;
    }
    if (v26 < v20)
    {
      size_t v31 = (const char *)v21[v24 + 2];
      size_t v32 = v20;
      uint64_t v19 = "PAC offset inside header: %lu %lu";
      goto LABEL_19;
    }
    if (a3 - v26 < v21[v24])
    {
      uint64_t v19 = "PAC length off end";
      goto LABEL_19;
    }
    int v29 = *(v25 - 1);
    char v27 = v25 - 1;
    int v28 = v29;
    switch(v29)
    {
      case 2:
        if (!v12[10])
        {
          v12[10] = v27;
          goto LABEL_46;
        }
        BOOL v30 = "credential info";
        goto LABEL_58;
      case 6:
        if (v12[7])
        {
          BOOL v30 = "server checksum";
          goto LABEL_58;
        }
        v12[7] = v27;
        goto LABEL_46;
      case 7:
        if (v12[8])
        {
          BOOL v30 = "KDC checksum";
          goto LABEL_58;
        }
        v12[8] = v27;
        goto LABEL_46;
      case 10:
        if (!v12[9])
        {
          v12[9] = v27;
LABEL_46:
          ++v23;
          v24 += 4;
          if (v23 >= *v21) {
            goto LABEL_47;
          }
          continue;
        }
        BOOL v30 = "logon names";
LABEL_58:
        size_t v31 = v30;
        uint64_t v19 = "PAC have two %s";
LABEL_19:
        uint64_t v16 = 22;
        krb5_set_error_message(a1, 22, v19, v31, v32);
LABEL_6:
        krb5_storage_free(v14);
LABEL_9:
        fd_set v17 = (void *)v12[4];
        if (v17) {
          free(v17);
        }
        free(v12);
        int v12 = 0;
LABEL_12:
        *a4 = v12;
        return v16;
      default:
        sub_213C9C004((uint64_t)a1, 5, "krb5_pac_parse: unsupported pac type %d", v28);
        long long v21 = (unsigned int *)v12[4];
        goto LABEL_46;
    }
  }
}

void sub_213C9F248(void *a1)
{
  krb5_data_free(a1 + 5);
  krb5_data_free(a1 + 11);
  uint64_t v2 = (void *)a1[4];

  free(v2);
}

uint64_t krb5_pac_init(_krb5_context *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = heim_uniq_alloc(0x68uLL, (uint64_t)"krb5-pac", (uint64_t)sub_213C9F248, a4, a5, a6, a7, a8);
  if (v10)
  {
    uint64_t v11 = v10;
    int v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x1000040504FFAC1uLL);
    *(void *)(v11 + 32) = v12;
    if (v12)
    {
      uint64_t result = krb5_data_alloc((size_t *)(v11 + 40), 8uLL);
      if (!result)
      {
        *a2 = v11;
        return result;
      }
      free(*(void **)(v11 + 32));
    }
    free((void *)v11);
  }

  return krb5_enomem(a1);
}

uint64_t krb5_pac_add_buffer(krb5_context a1, void *a2, int a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 4) || (size_t v6 = (unsigned int *)a2[4], v7 = *v6, v7 == -1))
  {
LABEL_13:
    int v8 = "integer overrun";
    goto LABEL_14;
  }
  if (v7 >= 0x3E8)
  {
    int v8 = "PAC has too many buffers";
LABEL_14:
    uint64_t v20 = 22;
    krb5_set_error_message(a1, 22, v8);
    return v20;
  }
  int v11 = 16 * v7;
  int v12 = (char *)malloc_type_realloc(v6, 16 * v7 + 24, 0xA7EAE51AuLL);
  if (v12)
  {
    a2[4] = v12;
    if (v7)
    {
      int v13 = v12 + 20;
      uint64_t v14 = v7;
      while (*v13 < 0xFFFFFFF0)
      {
        *v13 += 16;
        v13 += 4;
        if (!--v14) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      unint64_t v15 = a2[5];
      if (v15 < 0xFFFFFFF0)
      {
        unint64_t v16 = (v15 + 16);
        fd_set v17 = &v12[16 * v7];
        size_t v18 = *(void *)a4;
        *((_DWORD *)v17 + 2) = a3;
        *(void *)(v17 + 12) = v18;
        *((_DWORD *)v17 + 5) = v16;
        if (0xFFFFFFFF - v18 >= v16)
        {
          unsigned int v19 = v16 + v18;
          if ((v16 + v18) < 0xFFFFFFF9)
          {
            uint64_t v20 = krb5_data_realloc((uint64_t)(a2 + 5), (v19 + 7) & 0xFFFFFFF8);
            if (v20)
            {
              krb5_set_error_message(a1, v20, "malloc: out of memory");
            }
            else
            {
              uint64_t v22 = v11 | 8u;
              memmove((void *)(a2[6] + v22 + 16), (const void *)(a2[6] + v22), (v15 - v22));
              unint64_t v23 = (void *)(a2[6] + v22);
              *unint64_t v23 = 0;
              v23[1] = 0;
              memcpy((void *)(a2[6] + v16), *(const void **)(a4 + 8), *(void *)a4);
              bzero((void *)(a2[6] + *(void *)a4 + v16), a2[5] - v19);
              ++*(_DWORD *)a2[4];
            }
            return v20;
          }
        }
      }
    }
    goto LABEL_13;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_pac_get_buffer(_krb5_context *a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = *(unsigned int **)(a2 + 32);
  uint64_t v6 = *v5;
  if (v6)
  {
    uint64_t v7 = v5 + 3;
    while (*(v7 - 1) != a3)
    {
      v7 += 4;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = krb5_data_copy(a4, (const void *)(*(void *)(a2 + 48) + v7[2]), *v7);
    if (v8) {
      krb5_set_error_message(a1, v8, "malloc: out of memory");
    }
  }
  else
  {
LABEL_5:
    uint64_t v8 = 2;
    krb5_set_error_message(a1, 2, "No PAC buffer of type %lu was found");
  }
  return v8;
}

uint64_t krb5_pac_get_types(_krb5_context *a1, uint64_t a2, unint64_t *a3, void *a4)
{
  uint64_t v8 = malloc_type_calloc(**(unsigned int **)(a2 + 32), 4uLL, 0x100004052888210uLL);
  *a4 = v8;
  if (v8)
  {
    int v9 = *(_DWORD **)(a2 + 32);
    if (*v9)
    {
      unint64_t v10 = 0;
      uint64_t v11 = 2;
      do
      {
        v8[v10++] = v9[v11];
        unint64_t v12 = *v9;
        v11 += 4;
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
    *a3 = v12;
    return 0;
  }
  else
  {
    *a3 = 0;
    return krb5_enomem(a1);
  }
}

void krb5_pac_free(uint64_t a1, const void *a2)
{
}

uint64_t krb5_pac_verify(krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, const krb5_keyblock *a5, const krb5_keyblock *a6)
{
  if (!*(void *)(a2 + 56))
  {
    fd_set v17 = "PAC missing server checksum";
LABEL_11:
    uint64_t v16 = 22;
    krb5_set_error_message(a1, 22, v17);
    return v16;
  }
  if (!*(void *)(a2 + 64))
  {
    fd_set v17 = "PAC missing kdc checksum";
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(a2 + 72);
  if (!v8)
  {
    fd_set v17 = "PAC missing logon name";
    goto LABEL_11;
  }
  int v13 = krb5_storage_from_readonly_mem(*(void *)(a2 + 48) + *(unsigned int *)(v8 + 12), *(unsigned int *)(v8 + 4));
  if (!v13)
  {
LABEL_24:
    uint64_t v16 = krb5_enomem(a1);
    goto LABEL_25;
  }
  uint64_t v14 = (uint64_t)v13;
  krb5_principal v34 = 0;
  memset(size, 0, sizeof(size));
  krb5_storage_set_flags((uint64_t)v13, 32);
  uint64_t v15 = krb5_ret_uint32(v14, &size[3]);
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v15 = krb5_ret_uint32(v14, &size[1]);
  if (v15) {
    goto LABEL_7;
  }
  if (10000000 * a3 + 116444736000000000 != (*(unsigned int *)&size[3] | ((unint64_t)*(unsigned int *)&size[1] << 32)))
  {
    krb5_storage_free(v14);
    fd_set v17 = "PAC timestamp mismatch";
    goto LABEL_11;
  }
  uint64_t v15 = krb5_ret_uint16(v14, size);
  if (v15)
  {
LABEL_7:
    uint64_t v16 = v15;
    krb5_clear_error_message(a1);
    return v16;
  }
  if (!size[0])
  {
    krb5_storage_free(v14);
    fd_set v17 = "PAC logon name length missing";
    goto LABEL_11;
  }
  unsigned int v19 = (unsigned __int16 *)malloc_type_malloc(size[0], 0x6D044D09uLL);
  if (!v19)
  {
    krb5_storage_free(v14);
    goto LABEL_24;
  }
  uint64_t v20 = v19;
  uint64_t v21 = krb5_storage_read(v14);
  uint64_t v22 = size[0];
  krb5_storage_free(v14);
  if (v21 != v22)
  {
    fd_set v17 = "Failed to read PAC logon name";
    goto LABEL_11;
  }
  unint64_t v31 = 0;
  unint64_t v32 = (unint64_t)size[0] >> 1;
  unsigned int v30 = 1;
  unint64_t v23 = (unsigned __int16 *)malloc_type_malloc(2 * v32, 0x1000040BDFB0063uLL);
  if (!v23) {
    goto LABEL_24;
  }
  uint64_t v24 = v23;
  uint64_t v16 = sub_213CBACC0(v20, size[0], &v30, v23, (uint64_t *)&v32);
  free(v20);
  if (!v16)
  {
    uint64_t v27 = wind_ucs2utf8_length(v24, v32, &v31);
    if (v27)
    {
      uint64_t v16 = v27;
      free(v24);
      krb5_set_error_message(a1, v16, "Failed to count length of UCS-2 string");
      goto LABEL_25;
    }
    int v28 = malloc_type_malloc(++v31, 0x9D3085B4uLL);
    if (v28)
    {
      int v29 = v28;
      uint64_t v16 = wind_ucs2utf8(v24, v32, v28, &v31);
      free(v24);
      if (v16)
      {
        free(v29);
        krb5_set_error_message(a1, v16, "Failed to convert to UTF-8");
      }
      else
      {
        uint64_t v16 = krb5_parse_name_flags(a1, (const char *)v29, 1, &v34);
        free(v29);
        if (v16) {
          return v16;
        }
        if (krb5_principal_compare_any_realm((uint64_t)a1, a4, (uint64_t)v34) == 1)
        {
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = 22;
          krb5_set_error_message(a1, 22, "PAC logon name mismatch");
        }
        krb5_free_principal(a1, v34);
      }
      goto LABEL_25;
    }
    free(v24);
    goto LABEL_24;
  }
  free(v24);
  krb5_set_error_message(a1, v16, "Failed to convert string to UCS-2");
LABEL_25:
  if (!v16)
  {
    krb5_principal v34 = 0;
    uint64_t v16 = krb5_copy_data(a1, (const krb5_data *)(a2 + 40), (krb5_data **)&v34);
    if (!v16)
    {
      uint64_t v25 = *(void *)(a2 + 56);
      unsigned int v26 = *(_DWORD *)(v25 + 4);
      if (v26 >= 4 && *(_DWORD *)(*(void *)(a2 + 64) + 4) > 3u)
      {
        bzero((void *)(*(void *)&v34->realm.magic + *(unsigned int *)(v25 + 12) + 4), v26 - 4);
        bzero((void *)(*(void *)&v34->realm.magic + *(unsigned int *)(*(void *)(a2 + 64) + 12) + 4), (*(_DWORD *)(*(void *)(a2 + 64) + 4) - 4));
        uint64_t v16 = sub_213C9FAC8(a1, *(void *)(a2 + 56), a2 + 40, *(const void **)&v34->realm.magic, *(void *)&v34->magic, a5);
        krb5_free_data(a1, (krb5_data *)v34);
        if (!v16)
        {
          if (!a6) {
            return 0;
          }
          uint64_t v16 = sub_213C9FAC8(a1, *(void *)(a2 + 64), a2 + 40, (const void *)(*(void *)(a2 + 48) + *(unsigned int *)(*(void *)(a2 + 56) + 12) + 4), (*(_DWORD *)(*(void *)(a2 + 56) + 4) - 4), a6);
          if (!v16) {
            return 0;
          }
        }
      }
      else
      {
        return 22;
      }
    }
  }
  return v16;
}

uint64_t sub_213C9FAC8(_krb5_context *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, const krb5_keyblock *a6)
{
  uint64_t seed = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  uint64_t v11 = krb5_storage_from_mem(*(void *)(a3 + 8) + *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 4));
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    unsigned int v32 = 0;
    krb5_storage_set_flags((uint64_t)v11, 32);
    uint64_t v13 = krb5_ret_uint32(v12, &v32);
    if (v13)
    {
      uint64_t v14 = v13;
      krb5_clear_error_message(a1);
LABEL_26:
      krb5_storage_free(v12);
      return v14;
    }
    uint64_t v16 = v32;
    LODWORD(seed) = v32;
    uint64_t v17 = *(unsigned int *)(a2 + 4);
    uint64_t v18 = krb5_storage_seek(v12);
    int v19 = v17 - v18;
    uint64_t v30 = v17 - v18;
    uint64_t v20 = malloc_type_malloc(v17 - v18, 0x94A962CDuLL);
    unint64_t v31 = v20;
    if (!v20)
    {
      uint64_t v14 = krb5_enomem(a1);
      goto LABEL_26;
    }
    uint64_t v21 = v20;
    if (krb5_storage_read(v12) == v19)
    {
      if (krb5_checksum_is_keyed((uint64_t)a1, v16))
      {
        if (v16 == -138)
        {
          *(void *)ctype = 0;
          v28[0] = 0;
          v28[1] = 0;
          if (sub_213CA08E4(a1, a6, (uint64_t)a4, a5, (uint64_t)ctype)
            || krb5_data_ct_cmp((uint64_t)v28, (uint64_t)&v30))
          {
            uint64_t v14 = 2529638943;
            krb5_set_error_message(a1, -1765328353, "PAC integrity check failed for hmac-md5 checksum");
          }
          else
          {
            uint64_t v14 = 0;
          }
          krb5_data_free(v28);
          goto LABEL_24;
        }
        *(void *)ctype = 0;
        uint64_t v24 = krb5_crypto_init(a1, a6, 0, (krb5_keyblock ***)ctype);
        if (!v24)
        {
          uint64_t v14 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0x11, a4, a5, &seed, v25);
          krb5_crypto_destroy(a1, *(uint64_t *)ctype);
LABEL_24:
          unint64_t v23 = v31;
          goto LABEL_25;
        }
        uint64_t v14 = v24;
        uint64_t v21 = v31;
        if (!v31) {
          goto LABEL_26;
        }
LABEL_19:
        unint64_t v23 = v21;
LABEL_25:
        free(v23);
        goto LABEL_26;
      }
      uint64_t v26 = v16;
      uint64_t v22 = "Checksum type %d not keyed";
    }
    else
    {
      uint64_t v22 = "PAC checksum missing checksum";
    }
    uint64_t v14 = 22;
    krb5_set_error_message(a1, 22, v22, v26);
    goto LABEL_19;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_pac_process_credentials_buffer(_krb5_context *a1, void *a2, const krb5_keyblock *a3)
{
  uint64_t v3 = 2314790736;
  krb5_const_pointer inptr = 0;
  uint64_t v19 = 0;
  uint64_t v4 = a2 + 11;
  if (a2[11]) {
    return 2314790739;
  }
  uint64_t v7 = a2[10];
  if (!v7) {
    return 2314790737;
  }
  uint64_t v8 = *(unsigned int *)(v7 + 4);
  if (v8 < 8) {
    return 2314790739;
  }
  if (v8 > 0x2710) {
    return 2314790741;
  }
  uint64_t v11 = krb5_storage_from_readonly_mem(a2[6] + *(unsigned int *)(v7 + 12), v8);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    krb5_storage_set_flags((uint64_t)v11, 32);
    uint64_t v13 = krb5_ret_uint32(v12, (_DWORD *)&v19 + 1);
    if (v13 || (uint64_t v13 = krb5_ret_int32(v12, (unsigned int *)&v19), v13))
    {
      uint64_t v14 = v13;
      krb5_clear_error_message(a1);
      uint64_t v3 = v14;
    }
    else if (HIDWORD(v19))
    {
      uint64_t v3 = 2314790738;
      krb5_set_error_message(a1, -1980176558, "unsupport pac credentail version: %d");
    }
    else
    {
      if (v19 <= 0x17 && ((1 << v19) & 0x86000A) != 0)
      {
        if (a3->magic == v19)
        {
          uint64_t v3 = krb5_crypto_init(a1, a3, 0, (krb5_keyblock ***)&inptr);
          if (!v3) {
            uint64_t v3 = krb5_decrypt(a1, inptr, (krb5_pointer)0x10, a2[6] + *(unsigned int *)(a2[10] + 12) + 8, (krb5_encrypt_block *)(*(_DWORD *)(a2[10] + 4) - 8), v4);
          }
          goto LABEL_14;
        }
        uint64_t magic = a3->magic;
        uint64_t v17 = v19;
        uint64_t v15 = "as key (%d) mismatch with PAC enctype (%d)";
      }
      else
      {
        uint64_t magic = v19;
        uint64_t v15 = "enctype: %d not support as pac enctype";
      }
      krb5_set_error_message(a1, -1980176560, v15, magic, v17);
    }
LABEL_14:
    krb5_storage_free(v12);
    if (inptr) {
      krb5_crypto_destroy(a1, (uint64_t)inptr);
    }
    return v3;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_pac_copy_credential_package()
{
  return 2314790737;
}

uint64_t _krb5_pac_sign(_krb5_context *a1, void *a2, uint64_t a3, const krb5_principal_data *a4, const krb5_keyblock *a5, const krb5_keyblock *a6, _OWORD *a7)
{
  unint64_t v65 = 0;
  unint64_t v66 = 0;
  v63[1] = 0;
  uint64_t v64 = 0;
  v63[0] = 0;
  long long v62 = 0uLL;
  krb5_data_zero(v63);
  if (a4)
  {
    int v14 = a2[9] == 0;
    if (!a5) {
      goto LABEL_5;
    }
  }
  else
  {
    int v14 = 0;
    if (!a5) {
      goto LABEL_5;
    }
  }
  if (!a2[7]) {
    ++v14;
  }
LABEL_5:
  if (a6 && !a2[8])
  {
    ++v14;
  }
  else if (!v14)
  {
    goto LABEL_8;
  }
  uint64_t v19 = (_DWORD *)a2[4];
  if (__CFADD__(v14, *v19))
  {
    uint64_t v20 = "integer overrun";
LABEL_23:
    uint64_t v18 = 22;
    krb5_set_error_message(a1, 22, v20);
    goto LABEL_24;
  }
  unsigned int v21 = *v19 + v14;
  if (v21 > 0x3E8)
  {
    uint64_t v20 = "PAC has too many buffers";
    goto LABEL_23;
  }
  unint64_t v23 = malloc_type_realloc(v19, (16 * v21) | 8, 0x7E3432CFuLL);
  if (!v23) {
    return krb5_enomem(a1);
  }
  a2[4] = v23;
  if (a4 && !a2[9])
  {
    uint64_t v24 = *v23;
    *unint64_t v23 = v24 + 1;
    size_t v25 = &v23[4 * v24];
    a2[9] = v25 + 2;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = 0;
    *(_DWORD *)a2[9] = 10;
  }
  if (a5 && !a2[7])
  {
    uint64_t v26 = (_DWORD *)a2[4];
    uint64_t v27 = *v26;
    _DWORD *v26 = v27 + 1;
    int v28 = &v26[4 * v27];
    a2[7] = v28 + 2;
    *((void *)v28 + 1) = 0;
    *((void *)v28 + 2) = 0;
    *(_DWORD *)a2[7] = 6;
  }
  if (a6 && !a2[8])
  {
    int v29 = (_DWORD *)a2[4];
    uint64_t v30 = *v29;
    _DWORD *v29 = v30 + 1;
    unint64_t v31 = &v29[4 * v30];
    a2[8] = v31 + 2;
    *((void *)v31 + 1) = 0;
    *((void *)v31 + 2) = 0;
    *(_DWORD *)a2[8] = 7;
  }
LABEL_8:
  if (!a4) {
    goto LABEL_37;
  }
  krb5_data_zero(v63);
  uint64_t v15 = krb5_storage_emem();
  if (!v15)
  {
    uint64_t v18 = krb5_enomem(a1);
    if (v18) {
      goto LABEL_24;
    }
    goto LABEL_37;
  }
  uint64_t v16 = (uint64_t)v15;
  __s = 0;
  krb5_storage_set_flags((uint64_t)v15, 32);
  uint64_t v17 = krb5_store_uint32(v16, 10000000 * a3 + 116444736000000000);
  if (v17
    || (uint64_t v17 = krb5_store_uint32(v16, (unint64_t)(10000000 * a3 + 116444736000000000) >> 32), v17))
  {
LABEL_12:
    uint64_t v18 = v17;
    krb5_clear_error_message(a1);
    goto LABEL_13;
  }
  uint64_t v18 = krb5_unparse_name_flags(a1, a4, 2, &__s);
  if (!v18)
  {
    size_t v37 = strlen(__s);
    size_t v38 = 2 * v37;
    uint64_t v17 = krb5_store_uint16(v16, 2 * (unsigned __int16)v37);
    if (!v17)
    {
      uint64_t v39 = (char *)malloc_type_malloc(v38, 0x3BE4CF34uLL);
      if (v39)
      {
        size_t v40 = v39;
        if (v37)
        {
          uint64_t v41 = 0;
          uint64_t v42 = v39 + 1;
          do
          {
            *(_WORD *)(v42 - 1) = __s[v41];
            v42 += 2;
            ++v41;
          }
          while (v37 != v41);
        }
        free(__s);
        uint64_t v43 = krb5_storage_write(v16);
        free(v40);
        if (v43 < 0 || v43 != v38)
        {
          uint64_t v18 = krb5_enomem(a1);
        }
        else
        {
          uint64_t v18 = krb5_storage_to_data(v16, v63);
          if (!v18)
          {
            krb5_storage_free(v16);
            if (!a5) {
              goto LABEL_39;
            }
LABEL_38:
            uint64_t v18 = sub_213CA0684(a1, a5, (_DWORD *)&v64 + 1, &v66);
            if (!v18) {
              goto LABEL_39;
            }
LABEL_24:
            krb5_data_free(v63);
            return v18;
          }
        }
      }
      else
      {
        uint64_t v18 = krb5_enomem(a1);
        free(__s);
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  krb5_storage_free(v16);
  if (v18) {
    goto LABEL_24;
  }
LABEL_37:
  if (a5) {
    goto LABEL_38;
  }
LABEL_39:
  if (a6)
  {
    if (a2[7])
    {
      uint64_t v18 = sub_213CA0684(a1, a6, &v64, &v65);
      if (v18) {
        goto LABEL_24;
      }
    }
  }
  unsigned int v32 = krb5_storage_emem();
  if (!v32) {
    return krb5_enomem(a1);
  }
  uint64_t v33 = (uint64_t)v32;
  krb5_storage_set_flags((uint64_t)v32, 32);
  krb5_principal v34 = krb5_storage_emem();
  if (!v34)
  {
    krb5_storage_free(v33);
    return krb5_enomem(a1);
  }
  uint64_t v35 = (uint64_t)v34;
  krb5_storage_set_flags((uint64_t)v34, 32);
  uint64_t v36 = krb5_store_uint32(v33, *(unsigned int *)a2[4]);
  if (v36 || (uint64_t v36 = krb5_store_uint32(v33, *(unsigned int *)(a2[4] + 4)), v36))
  {
LABEL_46:
    uint64_t v18 = v36;
    krb5_clear_error_message(a1);
    goto LABEL_47;
  }
  uint64_t v44 = (unsigned int *)a2[4];
  int v45 = *v44;
  if (*v44 >= 0x3E9)
  {
    uint64_t v46 = "PAC has too many buffers";
    goto LABEL_63;
  }
  if (v45)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v59 = 0;
    unint64_t v58 = __PAIR64__(v64, HIDWORD(v64));
    unsigned int v61 = (16 * v45) | 8;
    while (1)
    {
      unsigned int v49 = v44[v47 + 2];
      uint64_t v60 = v48;
      switch(v49)
      {
        case 0xAu:
          uint64_t v51 = krb5_storage_write(v35);
          if (v63[0] != v51)
          {
            uint64_t v18 = 22;
            goto LABEL_47;
          }
          break;
        case 7u:
          unint64_t v50 = v65;
          if (v65 > 0xFFFFFFFB) {
            goto LABEL_100;
          }
          uint64_t v36 = krb5_store_uint32(v35, HIDWORD(v58));
          if (v36) {
            goto LABEL_46;
          }
          uint64_t v36 = sub_213CA0740(a1, v35, v65);
          if (v36) {
            goto LABEL_46;
          }
          LODWORD(v59) = v61 + 4;
          goto LABEL_79;
        case 6u:
          unint64_t v50 = v66;
          if (v66 > 0xFFFFFFFB) {
            goto LABEL_100;
          }
          uint64_t v36 = krb5_store_uint32(v35, v58);
          if (v36) {
            goto LABEL_46;
          }
          uint64_t v36 = sub_213CA0740(a1, v35, v66);
          if (v36) {
            goto LABEL_46;
          }
          HIDWORD(v59) = v61 + 4;
LABEL_79:
          uint64_t v51 = v50 + 4;
          break;
        default:
          uint64_t v51 = v44[v47 + 3];
          uint64_t v52 = krb5_storage_write(v35);
          if (v52 < 0 || v52 != v51) {
            goto LABEL_99;
          }
          break;
      }
      uint64_t v36 = krb5_store_uint32(v33, *(unsigned int *)(a2[4] + v47 * 4 + 8));
      if (v36) {
        goto LABEL_46;
      }
      uint64_t v36 = krb5_store_uint32(v33, v51);
      if (v36) {
        goto LABEL_46;
      }
      uint64_t v36 = krb5_store_uint32(v33, v61);
      if (v36) {
        goto LABEL_46;
      }
      uint64_t v36 = krb5_store_uint32(v33, 0);
      if (v36) {
        goto LABEL_46;
      }
      if (0xFFFFFFFFLL - v51 < (unint64_t)v61 || (int v53 = v61 + v51, v61 + v51 >= 0xFFFFFFF9))
      {
LABEL_100:
        uint64_t v46 = "integer overrun";
LABEL_63:
        uint64_t v18 = 22;
        krb5_set_error_message(a1, 22, v46, v58, v59);
LABEL_47:
        krb5_data_free(v63);
        krb5_storage_free(v33);
        krb5_storage_free(v35);
        return v18;
      }
      unsigned int v61 = (v53 + 7) & 0xFFFFFFF8;
      if (v61 != v53)
      {
        uint64_t v36 = sub_213CA0740(a1, v35, v61 - v53);
        if (v36) {
          goto LABEL_46;
        }
      }
      uint64_t v48 = v60 + 1;
      uint64_t v44 = (unsigned int *)a2[4];
      v47 += 4;
      if (v60 + 1 >= (unint64_t)*v44) {
        goto LABEL_94;
      }
    }
  }
  uint64_t v59 = 0;
LABEL_94:
  uint64_t v54 = krb5_storage_to_data(v35, (size_t *)&v62);
  if (v54)
  {
    uint64_t v18 = v54;
    krb5_set_error_message(a1, v54, "malloc: out of memory", v58, v59);
    goto LABEL_47;
  }
  uint64_t v55 = krb5_storage_write(v33);
  uint64_t v56 = (int)v62;
  krb5_data_free(&v62);
  if (v55 != v56 || krb5_storage_to_data(v33, (size_t *)&v62))
  {
LABEL_99:
    uint64_t v18 = krb5_enomem(a1);
    goto LABEL_47;
  }
  if (a5
    && (uint64_t v57 = sub_213CA07D8(a1, a5, SHIDWORD(v64), *((uint64_t *)&v62 + 1), v62, (void *)(*((void *)&v62 + 1) + HIDWORD(v59)), v66), v57)|| a6&& a2[7]&& (uint64_t v57 = sub_213CA07D8(a1, a6, v64, *((void *)&v62 + 1) + HIDWORD(v59), v66, (void *)(*((void *)&v62 + 1) + v59), v65), v57))
  {
    uint64_t v18 = v57;
    krb5_data_free(&v62);
    goto LABEL_47;
  }
  *a7 = v62;
  krb5_data_free(v63);
  krb5_storage_free(v33);
  krb5_storage_free(v35);
  return 0;
}

uint64_t sub_213CA0684(_krb5_context *a1, const krb5_keyblock *a2, _DWORD *a3, void *a4)
{
  int v10 = 0;
  int v9 = 0;
  uint64_t checksum_type = krb5_crypto_init(a1, a2, 0, &v9);
  if (!checksum_type)
  {
    uint64_t checksum_type = krb5_crypto_get_checksum_type(a1, (uint64_t)v9, &v10);
    krb5_crypto_destroy(a1, (uint64_t)v9);
    if (!checksum_type)
    {
      if (!krb5_checksum_is_keyed((uint64_t)a1, v10))
      {
        *a3 = -138;
        *a4 = 16;
      }
      uint64_t checksum_type = krb5_checksumsize(a1, v10, a4);
      if (!checksum_type) {
        *a3 = v10;
      }
    }
  }
  return checksum_type;
}

uint64_t sub_213CA0740(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = a3;
  while (1)
  {
    uint64_t v6 = krb5_storage_write(a2);
    if (v6 <= 0) {
      break;
    }
    v3 -= v6;
    if (!v3) {
      return 0;
    }
  }

  return krb5_enomem(a1);
}

uint64_t sub_213CA07D8(_krb5_context *a1, const krb5_keyblock *a2, int a3, uint64_t a4, uint64_t a5, void *a6, size_t a7)
{
  __src = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (a3 == -138)
  {
    uint64_t checksum = sub_213CA08E4(a1, a2, a4, a5, (uint64_t)&v14);
    if (checksum) {
      return checksum;
    }
  }
  else
  {
    uint64_t checksum = krb5_crypto_init(a1, a2, 0, &v17);
    if (checksum) {
      return checksum;
    }
    uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v17, 0x11u, 0, a4, a5, (uint64_t)&v14);
    krb5_crypto_destroy(a1, (uint64_t)v17);
    if (checksum) {
      return checksum;
    }
  }
  if (v15 == a7)
  {
    memcpy(a6, __src, a7);
    uint64_t checksum = 0;
  }
  else
  {
    uint64_t checksum = 22;
    krb5_set_error_message(a1, 22, "pac checksum wrong length", v14);
  }
  sub_213CBB434((uint64_t)&v14);
  return checksum;
}

uint64_t sub_213CA08E4(_krb5_context *a1, const krb5_keyblock *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v9 = krb5_copy_keyblock(a1, a2, v11);
  if (!v9)
  {
    uint64_t v9 = krb5_data_alloc((size_t *)(a5 + 8), 0x10uLL);
    if (!v9)
    {
      *(_DWORD *)a5 = -138;
      uint64_t v9 = sub_213CB4508(a1, (uint64_t *)v11, a3, a4, 17, a5);
      if (v9) {
        krb5_data_free((void *)(a5 + 8));
      }
    }
    krb5_free_keyblock(a1, v11[0]);
  }
  return v9;
}

_DWORD *krb5_find_padata(uint64_t a1, int a2, int a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= a2) {
    return 0;
  }
  for (uint64_t result = (_DWORD *)(a1 + 24 * v4); *result != a3; result += 6)
  {
    *a4 = ++v4;
    if (a2 == v4) {
      return 0;
    }
  }
  return result;
}

uint64_t krb5_padata_add(_krb5_context *a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10 = (char *)malloc_type_realloc(*((void **)a2 + 1), 24 * (*a2 + 1), 0x10800404ACF7207uLL);
  if (v10)
  {
    uint64_t v11 = 0;
    *((void *)a2 + 1) = v10;
    int v12 = *a2;
    uint64_t v13 = &v10[24 * *a2];
    *(_DWORD *)uint64_t v13 = a3;
    *((void *)v13 + 1) = a5;
    *((void *)v13 + 2) = a4;
    *a2 = v12 + 1;
  }
  else
  {
    uint64_t v11 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v11;
}

uint64_t _krb5_pk_find_cert(uint64_t *a1, int a2, uint64_t a3, int *a4, void *a5)
{
  v19[9] = *MEMORY[0x263EF8340];
  v19[0] = 0x213CE0331;
  void v19[2] = "PKINIT EKU";
  v19[4] = 0x213CE0349;
  v18[0] = xmmword_213CDA450;
  v18[1] = unk_213CDA460;
  v17[0] = 8;
  v17[1] = v18;
  v19[1] = v17;
  void v19[3] = &unk_2641E7420;
  uint64_t v9 = 2 * (a2 == 0);
  v19[5] = &unk_2641E7470;
  v19[6] = "any (or no)";
  v19[7] = 0;
  while (1)
  {
    uint64_t match_eku = hx509_query_match_eku((uint64_t)a4, v19[v9 + 1]);
    if (match_eku) {
      break;
    }
    uint64_t v15 = hx509_certs_find(a1[47], a3, a4, a5, v11, v12, v13, v14);
    if (v15)
    {
      sub_213CA0BF4(a1, v15, "Failed finding certificate with %s OID", (const char *)v19[v9]);
      v9 += 2;
      if (v9 != 8) {
        continue;
      }
    }
    return v15;
  }
  uint64_t v15 = match_eku;
  sub_213CA0BF4(a1, match_eku, "Failed setting %s OID", (const char *)v19[v9]);
  return v15;
}

void sub_213CA0BF4(uint64_t *a1, int a2, char *a3, ...)
{
  va_start(va, a3);
  v8[0] = 0;
  va_copy((va_list)&v8[1], va);
  if (vasprintf(v8, a3, va) == -1 || v8[0] == 0)
  {
    krb5_clear_error_message((krb5_context)a1);
  }
  else
  {
    error_string = hx509_get_error_string(a1[47], a2);
    if (error_string)
    {
      uint64_t v7 = error_string;
      krb5_set_error_message((krb5_context)a1, a2, "%s: %s", v8[0], error_string);
      sub_213C9C004((uint64_t)a1, 5, "%s: %s: %d", v8[0], v7, a2);
      free(v7);
    }
    else
    {
      krb5_clear_error_message((krb5_context)a1);
    }
    free(v8[0]);
  }
}

uint64_t _krb5_pk_mk_ContentInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = der_copy_oid();
  if (!result)
  {
    uint64_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    *(void *)(a4 + 16) = v7;
    if (v7
      && (uint64_t v8 = malloc_type_malloc(*(void *)a2, 0x3911C12AuLL), (*(void *)(*(void *)(a4 + 16) + 8) = v8) != 0))
    {
      memcpy(v8, *(const void **)(a2 + 8), *(void *)a2);
      uint64_t result = 0;
      **(void **)(a4 + 16) = *(void *)a2;
    }
    else
    {
      return 12;
    }
  }
  return result;
}

uint64_t sub_213CA0D64(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8)
{
  int v9 = a6;
  if (*(void *)(*(void *)a2 + 16) || (*(unsigned char *)(a2 + 52) & 0x20) != 0)
  {
    if (krb5_config_get_BOOL_default((uint64_t)a1, 0, a4, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)"realms"))
    {
      int v20 = 1;
      *(unsigned char *)(a2 + 52) = *(unsigned char *)(a2 + 52) & 0xFE | krb5_config_get_BOOL_default((uint64_t)a1, 0, 1, v15, v16, v17, v18, v19, (uint64_t)"realms");
    }
    else
    {
      int v20 = 2;
    }
    *(_DWORD *)(a2 + 48) = v20;
    *(unsigned char *)(a2 + 52) = (2
                         * krb5_config_get_BOOL_default((uint64_t)a1, 0, 1, v15, v16, v17, v18, v19, (uint64_t)"realms")) | *(unsigned char *)(a2 + 52) & 0xFD;
    *(unsigned char *)(a2 + 52) = (4
                         * krb5_config_get_BOOL_default((uint64_t)a1, 0, 1, v21, v22, v23, v24, v25, (uint64_t)"realms")) | *(unsigned char *)(a2 + 52) & 0xFB;
    *(unsigned char *)(a2 + 52) = (8
                         * krb5_config_get_BOOL_default((uint64_t)a1, 0, 0, v26, v27, v28, v29, v30, (uint64_t)"realms")) | *(unsigned char *)(a2 + 52) & 0xF7;
    BOOL BOOL_default = krb5_config_get_BOOL_default((uint64_t)a1, 0, 1, v31, v32, v33, v34, v35, (uint64_t)"realms");
    char v37 = *(unsigned char *)(a2 + 52) & 0xEF | (16 * BOOL_default);
    if ((a3 & 8) != 0) {
      char v37 = *(unsigned char *)(a2 + 52) & 0xED | (16 * BOOL_default);
    }
    if ((a3 & 0x40) != 0) {
      v37 &= ~4u;
    }
    *(unsigned char *)(a2 + 52) = v37;
    if (*(unsigned char *)(*(void *)a2 + 48)) {
      *(unsigned char *)(a2 + 52) = v37 & 0xE9;
    }
    v113[1] = 0;
    v114 = 0;
    v112[1] = 0;
    v113[0] = 0;
    v112[0] = 0;
    krb5_data_zero(v113);
    krb5_data_zero(v112);
    memset(v115, 0, sizeof(v115));
    int v38 = *(_DWORD *)(a2 + 48);
    if (v38 != 2)
    {
      if (v38 != 1) {
        goto LABEL_91;
      }
      *(void *)size_t v107 = 0;
      v126[0] = 0;
      long long v117 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      uint64_t v39 = sub_213CBB008();
      if (v39 || (uint64_t v39 = sub_213CBAF94(), v39))
      {
        uint64_t checksum = v39;
        sub_213CBC574((uint64_t)&v117);
        krb5_clear_error_message((krb5_context)a1);
LABEL_116:
        free_ContentInfo((uint64_t)v115);
        return checksum;
      }
      krb5_us_timeofday((krb5_context)a1, v107, v126);
      *((void *)&v119 + 1) = *(void *)v107;
      LODWORD(v119) = v126[0];
      LODWORD(v120) = v9;
      v113[0] = (void *)sub_213CBC564((uint64_t)&v117);
      uint64_t v64 = malloc_type_malloc((size_t)v113[0], 0xA578B99FuLL);
      v113[1] = v64;
      if (!v64)
      {
        uint64_t checksum = 12;
        goto LABEL_38;
      }
      uint64_t v65 = sub_213CBC544((uint64_t)((uint64_t)v64 + (unint64_t)v113[0]) - 1, (uint64_t)v113[0], (uint64_t)&v117, (uint64_t)&v114);
      if (v65)
      {
        uint64_t checksum = v65;
        free(v113[1]);
        v113[1] = 0;
LABEL_38:
        sub_213CBC574((uint64_t)&v117);
        krb5_set_error_message((krb5_context)a1, checksum, "Failed encoding AuthPackWin: %d");
        goto LABEL_116;
      }
      sub_213CBC574((uint64_t)&v117);
      unint64_t v66 = v113[0];
      if (v113[0] == v114)
      {
        long long v67 = &asn1_oid_id_pkcs7_data;
        goto LABEL_41;
      }
      goto LABEL_122;
    }
    long long v110 = 0u;
    *(_OWORD *)uint64_t v111 = 0u;
    *(void *)&long long v108 = 0;
    long long v109 = 0u;
    *(_OWORD *)size_t v107 = 0u;
    *(void *)v130 = 0;
    uint64_t v131 = 0;
    krb5_int32 v129 = 0;
    krb5_clear_error_message((krb5_context)a1);
    *(void *)uint64_t v126 = 0;
    size_t v127 = 0;
    uint64_t v128 = 0;
    krb5_us_timeofday((krb5_context)a1, v130, &v129);
    *((void *)&v108 + 1) = *(void *)v130;
    LODWORD(v109) = v9;
    uint64_t v40 = sub_213CBB590(a5);
    uint64_t v41 = malloc_type_malloc(v40, 0xC3BDA4CAuLL);
    if (!v41) {
      goto LABEL_114;
    }
    uint64_t v42 = v41;
    uint64_t v43 = sub_213CBB570((uint64_t)v41 + v40 - 1, v40, a5, (uint64_t)&v131);
    if (v43)
    {
      uint64_t checksum = v43;
      free(v42);
      goto LABEL_115;
    }
    if (v40 != v131) {
      krb5_abortx((_krb5_context *)a1, "internal error in ASN.1 encoder");
    }
    uint64_t checksum = krb5_create_checksum((krb5_context)a1, 0, 0, 14, (uint64_t)v42, v40, (uint64_t)v126);
    free(v42);
    if (checksum) {
      goto LABEL_115;
    }
    uint64_t v44 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    *((void *)&v109 + 1) = v44;
    if (!v44)
    {
      uint64_t checksum = 12;
      krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
      goto LABEL_115;
    }
    uint64_t checksum = krb5_data_copy(v44, v128, v127);
    sub_213CBB434((uint64_t)v126);
    if (checksum)
    {
LABEL_115:
      sub_213CBC444((uint64_t)v107);
      goto LABEL_116;
    }
    if ((*(_DWORD *)(a2 + 8) - 1) > 1)
    {
LABEL_108:
      uint64_t v96 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
      *((void *)&v110 + 1) = v96;
      if (v96)
      {
        uint64_t checksum = hx509_crypto_available(a1[47], 0, *(void *)(*(void *)a2 + 16), v96 + 1, v96, v97, v98, v99);
        goto LABEL_110;
      }
LABEL_114:
      uint64_t checksum = 12;
      goto LABEL_115;
    }
    uint64_t v124 = 0;
    timeval v125 = 0;
    uint64_t v123 = 0;
    krb5_data_zero(&v124);
    krb5_config_get_string((uint64_t)a1, 0, v45, v46, v47, v48, v49, v50, (uint64_t)"libdefaults");
    int int_default = krb5_config_get_int_default((uint64_t)a1, 0, 0, v51, v52, v53, v54, v55, (uint64_t)"libdefaults");
    uint64_t v57 = (uint64_t **)(a2 + 32);
    uint64_t checksum = _krb5_parse_moduli();
    if (checksum) {
      goto LABEL_110;
    }
    unint64_t v58 = sub_213CD4B7C();
    *(void *)(a2 + 16) = v58;
    if (v58)
    {
      uint64_t v59 = v58;
      uint64_t v60 = *v57;
      uint64_t v61 = **v57;
      if (int_default)
      {
        if (!v61)
        {
LABEL_33:
          uint64_t checksum = 22;
          krb5_set_error_message((krb5_context)a1, 22, "Did not find a DH group parameter matching requirement of %lu bits");
          goto LABEL_110;
        }
        long long v62 = v60 + 1;
        while (*(void *)(v61 + 8) <= (unint64_t)int_default)
        {
          uint64_t v63 = *v62++;
          uint64_t v61 = v63;
          if (!v63) {
            goto LABEL_33;
          }
        }
      }
      long long v73 = sub_213CA3AD8((_krb5_context *)a1, "p", (const void **)(v61 + 16));
      v59[1] = v73;
      if (!v73) {
        goto LABEL_89;
      }
      long long v74 = sub_213CA3AD8((_krb5_context *)a1, "g", (const void **)(v61 + 40));
      v59[2] = v74;
      if (!v74) {
        goto LABEL_89;
      }
      long long v75 = sub_213CA3AD8((_krb5_context *)a1, "q", (const void **)(v61 + 64));
      v59[8] = v75;
      if (!v75) {
        goto LABEL_89;
      }
      if (sub_213CD4EA8(*(void *)(a2 + 16)) == 1)
      {
        uint64_t v76 = (krb5_data *)malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
        v111[0] = v76;
        if (v76)
        {
          krb5_data_alloc((size_t *)v76, 0x28uLL);
          krb5_generate_random_block((uint64_t)v111[0]->data, *(void *)v111[0]);
          uint64_t checksum = krb5_copy_data((krb5_context)a1, v111[0], (krb5_data **)(a2 + 24));
          if (checksum) {
            goto LABEL_110;
          }
          *(void *)&long long v110 = malloc_type_calloc(1uLL, 0x28uLL, 0x10B00401602C2DDuLL);
          if ((void)v110)
          {
            int v77 = *(_DWORD *)(a2 + 8);
            if (v77 == 2)
            {
              uint64_t checksum = 22;
              goto LABEL_110;
            }
            if (v77 != 1) {
              krb5_abortx((_krb5_context *)a1, "internal error");
            }
            uint64_t v78 = *(unsigned int ***)(a2 + 16);
            memset(v116, 0, sizeof(v116));
            uint64_t checksum = der_copy_oid();
            if (checksum) {
              goto LABEL_110;
            }
            uint64_t v122 = 0;
            long long v120 = 0u;
            long long v121 = 0u;
            long long v118 = 0u;
            long long v119 = 0u;
            long long v117 = 0u;
            uint64_t v79 = sub_213CA3A54((_krb5_context *)a1, v78[1], (uint64_t)&v117);
            if (v79
              || (uint64_t v79 = sub_213CA3A54((_krb5_context *)a1, v78[2], (uint64_t)&v118 + 8), v79)
              || (uint64_t v79 = sub_213CA3A54((_krb5_context *)a1, v78[8], (uint64_t)&v120), v79))
            {
              uint64_t checksum = v79;
LABEL_71:
              free_DomainParameters((uint64_t)&v117);
              goto LABEL_110;
            }
            *((void *)&v121 + 1) = 0;
            uint64_t v122 = 0;
            uint64_t v87 = malloc_type_malloc(0x10uLL, 0x108004057E67DB5uLL);
            *(void *)(v110 + 16) = v87;
            if (!v87)
            {
              free_DomainParameters((uint64_t)&v117);
              uint64_t checksum = 0;
              goto LABEL_110;
            }
            size_t v88 = sub_213CD27BC((uint64_t)&v117);
            **(void **)(v110 + 16) = v88;
            uint64_t v89 = malloc_type_malloc(v88, 0x154B486uLL);
            uint64_t v90 = *(uint64_t **)(v110 + 16);
            v90[1] = (uint64_t)v89;
            if (!v89)
            {
              uint64_t checksum = 12;
              goto LABEL_71;
            }
            uint64_t v91 = sub_213CD279C((uint64_t)v89 + *v90 - 1, *v90, (uint64_t)&v117, (uint64_t)&v123);
            if (v91)
            {
              uint64_t checksum = v91;
              free(*(void **)(*(void *)(v110 + 16) + 8));
              *(void *)(*(void *)(v110 + 16) + 8) = 0;
              goto LABEL_71;
            }
            free_DomainParameters((uint64_t)&v117);
            if (v123 != **(void **)(v110 + 16)) {
              goto LABEL_123;
            }
            uint64_t checksum = sub_213CA3A54((_krb5_context *)a1, v78[4], (uint64_t)v116);
            if (checksum)
            {
LABEL_110:
              if (!checksum)
              {
                v113[0] = (void *)sub_213CBC434((uint64_t)v107);
                v100 = malloc_type_malloc((size_t)v113[0], 0x5E8D175uLL);
                v113[1] = v100;
                if (v100)
                {
                  uint64_t v101 = sub_213CBC414((uint64_t)((uint64_t)v100 + (unint64_t)v113[0]) - 1, (uint64_t)v113[0], (uint64_t)v107, (uint64_t)&v114);
                  if (!v101)
                  {
                    sub_213CBC444((uint64_t)v107);
                    unint64_t v66 = v113[0];
                    if (v113[0] == v114)
                    {
                      long long v67 = &unk_2641E7400;
LABEL_41:
                      uint64_t signed_1 = hx509_cms_create_signed_1(a1[47], 4 * (*(void *)(*(void *)a2 + 16) == 0), v67, v113[1], (size_t)v66, 0, *(void *)(*(void *)a2 + 16), *(void *)(a2 + 40), 0, *(void *)(*(void *)a2 + 32), v112);
                      if (signed_1)
                      {
                        uint64_t checksum = signed_1;
                        sub_213CA0BF4(a1, signed_1, "Create CMS signedData");
                        krb5_data_free(v113);
                        goto LABEL_116;
                      }
                      krb5_data_free(v113);
                      uint64_t checksum = hx509_cms_wrap_ContentInfo((uint64_t)&asn1_oid_id_pkcs7_signedData, (uint64_t)v112, (uint64_t)v113);
                      krb5_data_free(v112);
                      if (checksum)
                      {
                        krb5_set_error_message((krb5_context)a1, checksum, "ContentInfo wrapping of signedData failed", v104, v105, v106);
                        goto LABEL_116;
                      }
                      int v69 = *(_DWORD *)(a2 + 48);
                      if (v69 != 2)
                      {
                        if (v69 == 1)
                        {
                          long long v118 = 0uLL;
                          *(void *)&long long v119 = 0;
                          long long v117 = *(_OWORD *)v113;
                          v113[0] = (void *)sub_213CBC5A4((uint64_t)&v117);
                          long long v70 = malloc_type_malloc((size_t)v113[0], 0xADFB73B4uLL);
                          v113[1] = v70;
                          if (v70)
                          {
                            uint64_t checksum = sub_213CBC584((uint64_t)((uint64_t)v70 + (unint64_t)v113[0]) - 1, (uint64_t)v113[0], (uint64_t)&v117, (uint64_t)&v114);
                            if (checksum)
                            {
                              free(v113[1]);
                              v113[1] = 0;
                            }
                          }
                          else
                          {
                            uint64_t checksum = 12;
                          }
                          sub_213CBC5B4((uint64_t)&v117);
                          int v86 = 15;
LABEL_79:
                          if (checksum)
                          {
                            krb5_set_error_message((krb5_context)a1, checksum, "PA-PK-AS-REQ %d");
                            goto LABEL_116;
                          }
                          if (v113[0] == v114)
                          {
                            uint64_t checksum = krb5_padata_add((_krb5_context *)a1, a7, v86, (uint64_t)v113[1], (uint64_t)v113[0]);
                            if (checksum) {
                              free(v113[1]);
                            }
                            else {
                              krb5_padata_add((_krb5_context *)a1, a7, 132, 0, 0);
                            }
                            goto LABEL_116;
                          }
LABEL_123:
                          krb5_abortx((_krb5_context *)a1, "Internal ASN1 encoder error");
                        }
LABEL_91:
                        krb5_abortx((_krb5_context *)a1, "internal pkinit error");
                      }
                      long long v118 = 0uLL;
                      long long v117 = *(_OWORD *)v113;
                      if ((*(unsigned char *)(a2 + 52) & 0x10) == 0)
                      {
LABEL_52:
                        *((void *)&v118 + 1) = 0;
                        v113[0] = (void *)sub_213CBC3F4((uint64_t)&v117);
                        long long v71 = malloc_type_malloc((size_t)v113[0], 0x89AD289FuLL);
                        v113[1] = v71;
                        if (v71)
                        {
                          uint64_t checksum = sub_213CBC3D4((uint64_t)((uint64_t)v71 + (unint64_t)v113[0]) - 1, (uint64_t)v113[0], (uint64_t)&v117, (uint64_t)&v114);
                          if (checksum)
                          {
                            free(v113[1]);
                            v113[1] = 0;
                          }
                        }
                        else
                        {
                          uint64_t checksum = 12;
                        }
                        sub_213CBC404((uint64_t)&v117);
                        int v86 = 16;
                        goto LABEL_79;
                      }
                      krb5_auth_context v80 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
                      *(void *)&long long v118 = v80;
                      if (v80)
                      {
                        uint64_t v85 = hx509_certs_iter_f(a1[47], *(void *)(*(void *)a2 + 24), (uint64_t (*)(uint64_t, uint64_t))sub_213CA3B54, (uint64_t)v80, v81, v82, v83, v84);
                        if (!v85) {
                          goto LABEL_52;
                        }
                        uint64_t checksum = v85;
                        krb5_set_error_message((krb5_context)a1, v85, "pk-init: failed to build trustedCertifiers");
                      }
                      else
                      {
                        uint64_t checksum = 12;
                        krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
                      }
                      sub_213CBC404((uint64_t)&v117);
                      goto LABEL_116;
                    }
LABEL_122:
                    krb5_abortx((_krb5_context *)a1, "internal ASN1 encoder error");
                  }
                  uint64_t checksum = v101;
                  free(v113[1]);
                  v113[1] = 0;
                }
                else
                {
                  uint64_t checksum = 12;
                }
                sub_213CBC444((uint64_t)v107);
                krb5_set_error_message((krb5_context)a1, checksum, "Failed encoding AuthPack: %d", checksum);
                goto LABEL_116;
              }
              goto LABEL_115;
            }
            uint64_t v124 = length_DHPublicKey((uint64_t)v116);
            uint64_t v92 = malloc_type_malloc(v124, 0x8C3932C9uLL);
            timeval v125 = v92;
            if (!v92)
            {
              uint64_t checksum = 12;
              goto LABEL_105;
            }
            uint64_t v93 = encode_DHPublicKey((uint64_t)v92 + v124 - 1, v124, (uint64_t)v116, (uint64_t)&v123);
            if (v93)
            {
              uint64_t checksum = v93;
              free(v125);
              timeval v125 = 0;
LABEL_105:
              der_free_heim_integer();
              goto LABEL_110;
            }
            der_free_heim_integer();
            if (v123 != v124) {
              krb5_abortx((_krb5_context *)a1, "asn1 internal error");
            }
            uint64_t v94 = v110;
            uint64_t v95 = v125;
            *(void *)(v110 + 24) = 8 * v123;
            *(void *)(v94 + 32) = v95;
            goto LABEL_108;
          }
        }
        else
        {
          krb5_clear_error_message((krb5_context)a1);
        }
LABEL_89:
        uint64_t checksum = 12;
        goto LABEL_110;
      }
      long long v72 = "pkinit: failed to generate DH key";
    }
    else
    {
      long long v72 = "malloc: out of memory";
    }
    uint64_t checksum = 12;
    krb5_set_error_message((krb5_context)a1, 12, v72, v103, "pkinit_dh_min_bits", 0, 0, *(void *)v107, *(void *)&v107[2], v108, v109, v110, v111[0], v111[1]);
    goto LABEL_110;
  }
  uint64_t checksum = 2314790721;
  krb5_set_error_message((krb5_context)a1, -1980176575, "PKINIT: No user certificate given");
  return checksum;
}

uint64_t sub_213CA19C4(uint64_t *a1, char *a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v37 = 0;
  int v16 = *(_DWORD *)(a3 + 48);
  if (v16 != 1)
  {
    if (v16 == 2)
    {
      uint64_t v36 = 0;
      memset(v35, 0, sizeof(v35));
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      v31[0] = 0;
      v31[1] = 0;
      if (*(_DWORD *)a8 == 17)
      {
        uint64_t v18 = sub_213CBC4B4(*(void *)(a8 + 16), *(void *)(a8 + 8), (uint64_t)v35, (uint64_t)&v37);
        if (v18)
        {
          uint64_t v19 = v18;
          int v20 = "Failed to decode pkinit AS rep";
LABEL_22:
          uint64_t v22 = (_krb5_context *)a1;
          krb5_error_code v23 = v19;
          goto LABEL_23;
        }
        if (LODWORD(v35[0]) == 2)
        {
          sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: using kinit enc reply key");
          goto LABEL_19;
        }
        if (LODWORD(v35[0]) == 1)
        {
          sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: using pkinit dh");
LABEL_19:
          long long v34 = *(_OWORD *)((char *)v35 + 8);
          uint64_t v24 = hx509_cms_unwrap_ContentInfo((uint64_t *)&v34, v31, &v32, 0);
          if (v24)
          {
            uint64_t v19 = v24;
            sub_213CBC4D4((uint64_t)v35);
            goto LABEL_21;
          }
          if (LODWORD(v35[0]) == 2)
          {
            uint64_t v26 = sub_213CA2140(a1, 2, &v32, (uint64_t)v31, a2, (_DWORD *)a3, a5, a6, a7, a9);
          }
          else
          {
            if (LODWORD(v35[0]) != 1) {
              krb5_abortx((_krb5_context *)a1, "pk-init as-rep case not possible to happen");
            }
            uint64_t v26 = sub_213CA1D28((_krb5_context *)a1, &v32, (uint64_t)v31, a2, a3, a4, a5, *(void *)(a3 + 24), *((uint64_t *)&v35[1] + 1), a6, a9);
          }
          uint64_t v19 = v26;
          der_free_octet_string();
          der_free_oid();
          sub_213CBC4D4((uint64_t)v35);
          return v19;
        }
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        sub_213CBC4D4((uint64_t)v35);
        uint64_t v36 = 0;
        memset(v35, 0, sizeof(v35));
        sub_213C9C004((uint64_t)a1, 5, "krb5_get_init_creds: using BTMM kinit enc reply key");
        if (sub_213CBC624(*(void *)(a8 + 16), *(void *)(a8 + 8), (uint64_t)&v29, (uint64_t)&v37))
        {
          int v20 = "PKINIT: -27 reply invalid content type";
        }
        else
        {
          if (!v29)
          {
            uint64_t v27 = v30;
            if (v30)
            {
              LODWORD(v35[0]) = 2;
              *(void *)&v35[1] = v30[1];
              *((void *)&v35[0] + 1) = *v30;
              void *v30 = 0;
              v27[1] = 0;
              sub_213CBC644((uint64_t)&v29);
              goto LABEL_19;
            }
          }
          sub_213CBC644((uint64_t)&v29);
          int v20 = "DH mode not supported for BTMM mode";
        }
      }
      else
      {
        int v20 = "PKINIT: wrong padata recv";
      }
    }
    else
    {
      int v20 = "PKINIT: unknown reply type";
    }
LABEL_17:
    uint64_t v19 = 22;
    uint64_t v22 = (_krb5_context *)a1;
    krb5_error_code v23 = 22;
LABEL_23:
    krb5_set_error_message(v22, v23, v20, v28);
    return v19;
  }
  memset(v35, 0, 24);
  uint64_t v21 = sub_213CBC5C4(*(void *)(a8 + 16), *(void *)(a8 + 8), (uint64_t)v35, (uint64_t)&v37);
  if (v21)
  {
    uint64_t v19 = v21;
    uint64_t v28 = v21;
    int v20 = "PKINIT: Failed decoding windows pkinit reply %d";
    goto LABEL_22;
  }
  krb5_clear_error_message((krb5_context)a1);
  if (LODWORD(v35[0]) != 2)
  {
    sub_213CBC5E4((uint64_t)v35);
    int v20 = "PKINIT: win2k reply invalid content type";
    goto LABEL_17;
  }
  long long v34 = 0uLL;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v19 = hx509_cms_unwrap_ContentInfo((uint64_t *)v35 + 1, &v32, &v34, 0);
  sub_213CBC5E4((uint64_t)v35);
  if (v19)
  {
LABEL_21:
    int v20 = "PKINIT: failed to unwrap CI";
    goto LABEL_22;
  }
  uint64_t v19 = sub_213CA2140(a1, 1, (uint64_t *)&v34, (uint64_t)&v32, a2, (_DWORD *)a3, a5, a6, a7, a9);
  der_free_octet_string();
  der_free_oid();
  return v19;
}

uint64_t sub_213CA1D28(_krb5_context *a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, void **a11)
{
  uint64_t v41 = 0;
  v38[0] = 0;
  v38[1] = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  size_t v35 = 0;
  krb5_data_zero(&v36);
  long long v39 = 0u;
  long long v40 = 0u;
  if (der_heim_oid_cmp())
  {
    uint64_t v18 = 22;
    krb5_set_error_message(a1, 22, "PKINIT: Invalid content type");
    return v18;
  }
  uint64_t v18 = sub_213CA3DA8((uint64_t *)a1, a2[1], *a2, *(void *)a5, v38, &v36, &v41);
  uint64_t v19 = v41;
  if (!v18)
  {
    uint64_t v18 = sub_213CA3EB4(a1, a4, a7, a5, v41);
    if (!v18)
    {
      if (der_heim_oid_cmp())
      {
        uint64_t v18 = 2529638952;
        int v20 = "pkinit - dh reply contains wrong oid";
LABEL_15:
        uint64_t v22 = a1;
        krb5_error_code v23 = v18;
LABEL_16:
        krb5_set_error_message(v22, v23, v20);
        goto LABEL_17;
      }
      uint64_t v21 = sub_213CBC4E4(v37, v36, (uint64_t)&v39, (uint64_t)&v35);
      if (v21)
      {
        uint64_t v18 = v21;
        int v20 = "pkinit - failed to decode KDC DH Key Info";
        goto LABEL_15;
      }
      if (v40 != a10)
      {
        uint64_t v18 = 2529638953;
        int v20 = "PKINIT: DH nonce is wrong";
        goto LABEL_15;
      }
      if (*((void *)&v40 + 1))
      {
        if (!a9)
        {
          uint64_t v18 = 2529638972;
          int v20 = "pkinit; got key expiration without server nonce";
          goto LABEL_24;
        }
        if (!a8)
        {
          uint64_t v18 = 2529638972;
          int v20 = "pkinit; got DH reuse but no client nonce";
LABEL_24:
          uint64_t v22 = a1;
          krb5_error_code v23 = -1765328324;
          goto LABEL_16;
        }
      }
      else
      {
        if (a9)
        {
          uint64_t v18 = 2529638972;
          int v20 = "pkinit: got server nonce without key expiration";
          goto LABEL_24;
        }
        a8 = 0;
      }
      size_t v35 = (unint64_t)(v39 + 7) >> 3;
      if (*(_DWORD *)(a5 + 8) != 1)
      {
        uint64_t v18 = 22;
        goto LABEL_17;
      }
      memset(v34, 0, sizeof(v34));
      uint64_t v25 = decode_DHPublicKey(*((uint64_t *)&v39 + 1), (unint64_t)(v39 + 7) >> 3, (uint64_t)v34, 0);
      if (v25)
      {
        uint64_t v18 = v25;
        int v20 = "pkinit: can't decode without key expiration";
        goto LABEL_15;
      }
      uint64_t v26 = sub_213CA3AD8(a1, "DHPublicKey", v34);
      sub_213CD286C((uint64_t)v34);
      if (!v26)
      {
        uint64_t v18 = 12;
        goto LABEL_17;
      }
      size_t v35 = (int)sub_213CD4D2C(*(void *)(a5 + 16));
      uint64_t v27 = (char *)malloc_type_malloc(v35, 0xDEBD8B32uLL);
      if (!v27)
      {
        uint64_t v18 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
        sub_213CD46FC(v26);
        goto LABEL_17;
      }
      uint64_t v28 = *(void *)(a5 + 16);
      uint64_t v29 = v27;
      int v30 = sub_213CD4EB4((uint64_t)v27, v26, v28);
      if (v30 < 1 || v30 < v35 >> 1)
      {
        uint64_t v18 = 2529638972;
        krb5_set_error_message(a1, -1765328324, "PKINIT: Can't compute Diffie-Hellman key");
LABEL_35:
        unsigned int v31 = 0;
LABEL_36:
        sub_213CD46FC(v26);
        bzero(v29, v31);
        free(v29);
        goto LABEL_17;
      }
      if (v30 >= (int)v35)
      {
        unsigned int v31 = v30;
      }
      else
      {
        size_t v32 = v35 - v30;
        memmove(&v29[v32], v29, v30);
        bzero(v29, v32);
        unsigned int v31 = v35;
        if ((int)v35 <= 0)
        {
          uint64_t v18 = 22;
          krb5_set_error_message(a1, 22, "PKINIT: resulting DH key <= 0");
          goto LABEL_35;
        }
      }
      uint64_t v33 = malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
      *a11 = v33;
      if (v33)
      {
        uint64_t v18 = _krb5_pk_octetstring2key(a1, a6, (uint64_t)v29, v31, a8, a9, (uint64_t)v33);
        if (v18)
        {
          krb5_set_error_message(a1, v18, "PKINIT: can't create key from DH key");
          free(*a11);
          *a11 = 0;
        }
      }
      else
      {
        uint64_t v18 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memory");
      }
      goto LABEL_36;
    }
  }
LABEL_17:
  hx509_cert_free(v19);
  if (v37) {
    krb5_data_free(&v36);
  }
  der_free_oid();
  sub_213CBC504((uint64_t)&v39);
  return v18;
}

uint64_t sub_213CA2140(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, char *a5, _DWORD *a6, uint64_t a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v33 = 0;
  v30[0] = 0;
  v30[1] = 0;
  if (!der_heim_oid_cmp())
  {
    size_t v31 = 0;
    size_t v32 = 0;
    if (a6[12] == 1) {
      char v18 = 3;
    }
    else {
      char v18 = 1;
    }
    uint64_t v19 = hx509_cms_unenvelope(a1[47], *(void *)(*(void *)a6 + 8), v18, a3[1], *a3, 0, 0, v30, &v31);
    if (v19)
    {
      uint64_t v17 = v19;
      sub_213CA0BF4(a1, v19, "Failed to unenvelope CMS data in PK-INIT reply");
      return v17;
    }
    der_free_oid();
    if (a2 == 1)
    {
      v29[0] = 0;
      v29[1] = 0;
      size_t v27 = 0;
      uint64_t v28 = 0;
      if (hx509_cms_unwrap_ContentInfo((uint64_t *)&v31, v29, &v27, 0))
      {
        uint64_t v20 = der_length_len() + 1;
        uint64_t v21 = (char *)malloc_type_malloc(v31 + v20, 0xB6CF9422uLL);
        memcpy(&v21[v20], v32, v31);
        uint64_t v22 = der_put_length_and_tag();
        if (v22) {
          return v22;
        }
        free(v32);
        v31 += v20;
        size_t v32 = v21;
        uint64_t v23 = hx509_cms_unwrap_ContentInfo((uint64_t *)&v31, v29, &v27, 0);
        if (v23)
        {
          uint64_t v17 = v23;
LABEL_18:
          uint64_t v24 = 0;
          goto LABEL_22;
        }
      }
      if (der_heim_oid_cmp())
      {
        uint64_t v17 = 22;
        krb5_set_error_message((krb5_context)a1, 22, "PKINIT: Invalid content type");
        der_free_oid();
        der_free_octet_string();
        goto LABEL_18;
      }
      der_free_oid();
      krb5_data_free(&v31);
      uint64_t v17 = krb5_data_copy(&v31, v28, v27);
      der_free_octet_string();
      if (v17)
      {
        krb5_set_error_message((krb5_context)a1, v17, "malloc: out of memory");
        goto LABEL_18;
      }
    }
    uint64_t v25 = sub_213CA3DA8(a1, (uint64_t)v32, v31, *(void *)a6, v30, (uint64_t *)&v31, &v33);
    uint64_t v24 = v33;
    if (!v25)
    {
      uint64_t v25 = sub_213CA3EB4((_krb5_context *)a1, a5, a7, (uint64_t)a6, v33);
      if (!v25)
      {
        if (a2 == 2)
        {
          uint64_t v25 = sub_213CA3FFC((_krb5_context *)a1, (uint64_t *)&v31, a9, a10);
        }
        else
        {
          if (a2 != 1)
          {
            uint64_t v17 = 0;
            goto LABEL_22;
          }
          uint64_t v17 = sub_213CA3FFC((_krb5_context *)a1, (uint64_t *)&v31, a9, a10);
          if (!v17 || (a6[13] & 1) != 0) {
            goto LABEL_22;
          }
          uint64_t v25 = sub_213CA4198((_krb5_context *)a1, (uint64_t *)&v31, a8, a10);
        }
      }
    }
    uint64_t v17 = v25;
LABEL_22:
    hx509_cert_free(v24);
    der_free_oid();
    krb5_data_free(&v31);
    return v17;
  }
  uint64_t v17 = 22;
  krb5_set_error_message((krb5_context)a1, 22, "PKINIT: Invalid content type");
  return v17;
}

uint64_t sub_213CA244C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a2 + 16);
  if (v6) {
    hx509_cert_free(v6);
  }
  uint64_t v7 = hx509_cert_ref(a3);
  uint64_t v8 = *a2;
  *(void *)(v8 + 16) = v7;
  if (*(void *)(v8 + 8))
  {
    hx509_certs_free((const void **)(v8 + 8));
    uint64_t v8 = *a2;
    uint64_t v7 = *(void *)(*a2 + 16);
  }
  if (!v7) {
    return 0;
  }
  uint64_t subject = hx509_certs_init(*(void *)(a1 + 376), "MEMORY:pkinit-set-user-id", 0, 0, (void *)(v8 + 8));
  if (subject) {
    return subject;
  }
  hx509_certs_add(*(void *)(a1 + 376), *(void *)(*a2 + 8), a3, v9, v10, v11, v12, v13);
  if (!*(void *)(*a2 + 16) || !_krb5_have_debug(a1)) {
    return 0;
  }
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t subject = hx509_cert_get_subject(*(void *)(*a2 + 16), &v20);
  if (!subject)
  {
    uint64_t subject = hx509_name_to_string(v20, &v19);
    hx509_name_free((uint64_t *)&v20);
    if (!subject)
    {
      uint64_t serialnumber = hx509_cert_get_serialnumber();
      if (serialnumber)
      {
        uint64_t subject = serialnumber;
        int v16 = &v19;
      }
      else
      {
        uint64_t subject = der_print_hex_heim_integer();
        der_free_heim_integer();
        if (!subject)
        {
          sub_213C9C004(a1, 2, "using cert: subject: %s sn: %s", (const char *)v19, 0);
          free(v19);
          char v18 = 0;
          goto LABEL_18;
        }
        int v16 = &v20;
      }
      char v18 = *v16;
LABEL_18:
      free(v18);
    }
  }
  return subject;
}

uint64_t _krb5_pk_load_id(uint64_t *a1, void *a2, char *a3, char *a4, char **a5, char **a6, uint64_t a7, uint64_t a8, char *__s1)
{
  *a2 = 0;
  if (a4)
  {
    uint64_t v17 = malloc_type_calloc(1uLL, 0x38uLL, 0x1020040DD5A6BABuLL);
    if (v17)
    {
      char v18 = v17;
      long long v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      if (a3)
      {
        *(void *)long long v39 = 0;
        uint64_t v19 = hx509_lock_init(a1[47], v39);
        if (v19)
        {
          uint64_t inited = v19;
          sub_213CA0BF4(a1, v19, "Failed init lock");
          goto LABEL_33;
        }
        if (__s1 && *__s1) {
          hx509_lock_add_password(*(uint64_t **)v39, __s1);
        }
        if (a7)
        {
          long long v40 = a1;
          uint64_t v41 = a7;
          uint64_t v42 = a8;
          uint64_t v22 = hx509_lock_set_prompter(*(uint64_t *)v39, (uint64_t)sub_213CA28F8, (uint64_t)&v40);
          if (v22)
          {
            uint64_t inited = v22;
            hx509_lock_free(*(const void ***)v39);
            goto LABEL_33;
          }
        }
        uint64_t inited = hx509_certs_init(a1[47], a3, 0, *(uint64_t *)v39, v18 + 1);
        hx509_lock_free(*(const void ***)v39);
        if (inited)
        {
          sub_213CA0BF4(a1, inited, "Failed to init cert certs");
          goto LABEL_33;
        }
      }
      else
      {
        v17[1] = 0;
      }
      uint64_t v21 = hx509_certs_init(a1[47], a4, 0, 0, v18 + 3);
      if (v21)
      {
        uint64_t inited = v21;
        sub_213CA0BF4(a1, v21, "Failed to init anchors");
      }
      else
      {
        uint64_t v23 = hx509_certs_init(a1[47], "MEMORY:pkinit-cert-chain", 0, 0, v18 + 4);
        if (!v23)
        {
          if (a5)
          {
            uint64_t v25 = *a5;
            if (*a5)
            {
              int v30 = a5 + 1;
              do
              {
                if (hx509_certs_append(a1[47], v18[4], 0, v25)) {
                  sub_213C9C004((uint64_t)a1, 5, "Failed to load cert pool: %s", *(v30 - 1));
                }
                size_t v31 = *v30++;
                uint64_t v25 = v31;
              }
              while (v31);
            }
          }
          uint64_t v32 = a1[47];
          if (a6)
          {
            uint64_t v33 = hx509_revoke_init(v32, v18 + 5, v24, (uint64_t)v25, v26, v27, v28, v29);
            if (v33)
            {
              uint64_t inited = v33;
              sub_213CA0BF4(a1, v33, "Failed init revoke list");
              goto LABEL_33;
            }
            size_t v35 = *a6;
            if (*a6)
            {
              uint64_t v36 = a6 + 1;
              while (1)
              {
                uint64_t v37 = hx509_revoke_add_crl(a1[47], v18[5], v35);
                if (v37) {
                  break;
                }
                int v38 = *v36++;
                size_t v35 = v38;
                if (!v38) {
                  goto LABEL_31;
                }
              }
              uint64_t inited = v37;
              sub_213CA0BF4(a1, v37, "Failed load revoke list");
              goto LABEL_33;
            }
          }
          else
          {
            hx509_context_set_missing_revoke(v32, 1);
          }
LABEL_31:
          uint64_t inited = hx509_verify_init_ctx(a1[47], v18);
          if (!inited)
          {
            hx509_verify_attach_anchors((const void **)*v18, (CFTypeRef)v18[3]);
            hx509_verify_attach_revoke(*v18, (CFTypeRef)v18[5]);
            *a2 = v18;
            return inited;
          }
          sub_213CA0BF4(a1, inited, "Failed init verify context");
          goto LABEL_33;
        }
        uint64_t inited = v23;
        sub_213CA0BF4(a1, v23, "Failed to init chain");
      }
LABEL_33:
      hx509_verify_destroy_ctx((const void **)*v18);
      hx509_certs_free((const void **)v18 + 1);
      hx509_certs_free((const void **)v18 + 3);
      hx509_certs_free((const void **)v18 + 4);
      hx509_revoke_free((CFTypeRef *)v18 + 5);
      free(v18);
      return inited;
    }
    uint64_t inited = 12;
    krb5_set_error_message((krb5_context)a1, 12, "malloc: out of memory");
  }
  else
  {
    uint64_t inited = 2314790722;
    krb5_set_error_message((krb5_context)a1, -1980176574, "PKINIT: No anchor given");
  }
  return inited;
}

uint64_t sub_213CA28F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v4 = a2[3];
  v8[0] = a2[2];
  v8[1] = v4;
  uint64_t v9 = *a2;
  uint64_t v10 = 0;
  LODWORD(v10) = hx509_prompt_hidden(*((_DWORD *)a2 + 2));
  uint64_t v11 = v8;
  int v5 = *((_DWORD *)a2 + 2);
  if ((v5 - 1) >= 2)
  {
    if (v5 != 4) {
      goto LABEL_6;
    }
    int v6 = 5;
  }
  else
  {
    int v6 = 1;
  }
  LODWORD(v12) = v6;
LABEL_6:
  uint64_t result = (*(uint64_t (**)(void, void, void, void, uint64_t, uint64_t *))(a1 + 8))(*(void *)a1, *(void *)(a1 + 16), 0, 0, 1, &v9);
  if (result)
  {
    bzero((void *)a2[3], a2[2]);
    return 1;
  }
  return result;
}

uint64_t sub_213CA29A0(_krb5_context *a1, uint64_t a2, uint64_t a3, char *a4, char ***a5)
{
  int v6 = a4;
  __stringp = a4;
  *a5 = 0;
  uint64_t v10 = (char **)malloc_type_calloc(1uLL, 0x58uLL, 0x109004044CB81CDuLL);
  if (!v10)
  {
    uint64_t v17 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v17;
  }
  uint64_t v11 = v10;
  uint64_t v12 = __stringp;
  uint64_t v13 = MEMORY[0x263EF8318];
  do
  {
    uint64_t v14 = v12;
    uint64_t v15 = *v6;
    if (*v6 < 0) {
      int v16 = __maskrune(*v6, 0x4000uLL);
    }
    else {
      int v16 = *(_DWORD *)(v13 + 4 * v15 + 60) & 0x4000;
    }
    uint64_t v12 = ++v6;
  }
  while (v16);
  __stringp = v14;
  if (v15 != 35)
  {
    char v18 = strsep(&__stringp, " \t");
    if (v18)
    {
      uint64_t v19 = strdup(v18);
      *uint64_t v11 = v19;
      if (!v19)
      {
        uint64_t v17 = 12;
        krb5_set_error_message(a1, 12, "malloc: out of memeory");
        goto LABEL_23;
      }
      uint64_t v20 = strsep(&__stringp, " \t");
      if (v20)
      {
        int v21 = atoi(v20);
        v11[1] = (char *)v21;
        if (v21)
        {
          uint64_t v17 = sub_213CA2BE8(a1, &__stringp);
          if (!v17)
          {
            uint64_t v17 = sub_213CA2BE8(a1, &__stringp);
            if (!v17)
            {
              uint64_t v17 = sub_213CA2BE8(a1, &__stringp);
              if (!v17)
              {
                *a5 = v11;
                return v17;
              }
            }
          }
LABEL_23:
          free(*v11);
          der_free_heim_integer();
          der_free_heim_integer();
          der_free_heim_integer();
          free(v11);
          return v17;
        }
        uint64_t v24 = a2;
        uint64_t v25 = a3;
        uint64_t v22 = "moduli file %s have un-parsable bits on line %d";
      }
      else
      {
        uint64_t v24 = a2;
        uint64_t v25 = a3;
        uint64_t v22 = "moduli file %s missing bits on line %d";
      }
    }
    else
    {
      uint64_t v24 = a2;
      uint64_t v25 = a3;
      uint64_t v22 = "moduli file %s missing name on line %d";
    }
    uint64_t v17 = 22;
    krb5_set_error_message(a1, 22, v22, v24, v25);
    goto LABEL_23;
  }
  free(v11);
  return 0;
}

uint64_t sub_213CA2BE8(_krb5_context *a1, char **__stringp)
{
  if (strsep(__stringp, " \t"))
  {
    uint64_t v3 = der_parse_hex_heim_integer();
    if (v3) {
      krb5_set_error_message(a1, v3, "moduli file %s failed parsing %s on line %d");
    }
  }
  else
  {
    uint64_t v3 = 22;
    krb5_set_error_message(a1, 22, "moduli file %s missing %s on line %d");
  }
  return v3;
}

void sub_213CA2C98(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1;
    do
    {
      free(*v2);
      der_free_heim_integer();
      der_free_heim_integer();
      der_free_heim_integer();
      free(*v3);
      uint64_t v4 = (void **)v3[1];
      ++v3;
      uint64_t v2 = v4;
    }
    while (v4);
  }

  free(a1);
}

uint64_t _krb5_parse_moduli()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  int v5 = (_krb5_context *)v0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  krb5_principal_data *v1 = 0;
  int v6 = (char ***)malloc_type_calloc(1uLL, 0x18uLL, 0x2004093837F09uLL);
  if (!v6) {
    goto LABEL_19;
  }
  uint64_t v7 = v6;
  __strlcpy_chk();
  uint64_t v8 = sub_213CA29A0(v5, (uint64_t)"builtin", 1, __s, v7);
  if (!v8)
  {
    __strlcpy_chk();
    uint64_t v8 = sub_213CA29A0(v5, (uint64_t)"builtin", 1, __s, v7 + 1);
    if (!v8)
    {
      if (!v4) {
        uint64_t v4 = "/etc/krb5.moduli";
      }
      __filename = 0;
      if (_krb5_expand_default_cc_name_0(v5, v4, (void **)&__filename)
        || (uint64_t v10 = fopen(__filename, "r"), krb5_xfree(__filename), !v10)
        || (rk_cloexec_file(v10), !fgets(__s, 4096, v10)))
      {
LABEL_8:
        uint64_t v9 = 0;
        void *v2 = v7;
        return v9;
      }
      LODWORD(v11) = 2;
      uint64_t v12 = 1;
      while (1)
      {
        __filename = 0;
        __s[strcspn(__s, "\n")] = 0;
        uint64_t v13 = (char ***)malloc_type_realloc(v7, 8 * ((int)v11 + 2), 0x2004093837F09uLL);
        if (!v13) {
          break;
        }
        uint64_t v7 = v13;
        v13[(int)v11] = 0;
        uint64_t v8 = sub_213CA29A0(v5, (uint64_t)v4, v12, __s, (char ***)&__filename);
        if (v8) {
          goto LABEL_4;
        }
        if (__filename)
        {
          v7[(int)v11] = (char **)__filename;
          uint64_t v11 = (int)v11 + 1;
          v7[v11] = 0;
        }
        uint64_t v12 = (v12 + 1);
        if (!fgets(__s, 4096, v10)) {
          goto LABEL_8;
        }
      }
      sub_213CA2C98((void ***)v7);
LABEL_19:
      uint64_t v9 = 12;
      krb5_set_error_message(v5, 12, "malloc: out of memory");
      return v9;
    }
  }
LABEL_4:
  uint64_t v9 = v8;
  sub_213CA2C98((void ***)v7);
  return v9;
}

uint64_t _krb5_dh_group_ok(krb5_context a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char ***a6, char **a7)
{
  uint64_t v8 = a6;
  if (a7) {
    *a7 = 0;
  }
  if (*a6)
  {
    while (der_heim_integer_cmp()
         || der_heim_integer_cmp()
         || a5 && der_heim_integer_cmp())
    {
      uint64_t v12 = v8[1];
      ++v8;
      if (!v12) {
        goto LABEL_9;
      }
    }
    if (a2 && (unint64_t)(*v8)[1] < a2)
    {
      uint64_t v13 = 2529638977;
      krb5_set_error_message(a1, -1765328319, "PKINIT: DH group parameter %s no accepted, not enough bits generated");
    }
    else if (a7)
    {
      uint64_t v15 = strdup(**v8);
      uint64_t v13 = 0;
      *a7 = v15;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_9:
    uint64_t v13 = 2529638977;
    krb5_set_error_message(a1, -1765328319, "PKINIT: DH group parameter no ok");
  }
  return v13;
}

void sub_213CA30B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 32);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 8) == 1)
      {
        uint64_t v4 = *(_DWORD **)(v2 + 16);
        if (v4) {
          sub_213CD4C48(v4);
        }
      }
      if (*(void *)v2)
      {
        hx509_verify_destroy_ctx(**(const void ****)v2);
        hx509_certs_free((const void **)(*(void *)v2 + 8));
        hx509_cert_free(*(void *)(*(void *)v2 + 16));
        hx509_certs_free((const void **)(*(void *)v2 + 24));
        hx509_certs_free((const void **)(*(void *)v2 + 32));
        int v5 = *(krb5_data **)(v2 + 24);
        if (v5)
        {
          krb5_free_data(0, v5);
          *(void *)(v2 + 24) = 0;
        }
        int v6 = *(void ****)(v2 + 32);
        if (v6) {
          sub_213CA2C98(v6);
        }
        free(*(void **)v2);
        *(void *)uint64_t v2 = 0;
      }
      free(*(void **)(*(void *)(a1 + 88) + 32));
      *(void *)(*(void *)(a1 + 88) + 32) = 0;
    }
  }
}

uint64_t _krb5_get_init_creds_opt_set_pkinit_user_cert(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char **strings, char **a7, char a8, uint64_t a9, uint64_t a10, char *__s1)
{
  return krb5_get_init_creds_opt_set_pkinit(a1, a2, a3, a4, a5, strings, a7, a8, a9, a10, __s1);
}

uint64_t krb5_get_init_creds_opt_set_pkinit(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char **strings, char **a7, char a8, uint64_t a9, uint64_t a10, char *__s1)
{
  ret_xpc_object_t value = 0;
  if (!*(void *)(a2 + 88))
  {
    int v30 = "PKINIT: on non extendable opt";
LABEL_16:
    uint64_t v29 = 22;
    size_t v31 = (_krb5_context *)a1;
    krb5_error_code v32 = 22;
LABEL_18:
    krb5_set_error_message(v31, v32, v30);
    return v29;
  }
  uint64_t v19 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A004070047ECAuLL);
  *(void *)(*(void *)(a2 + 88) + 32) = v19;
  if (!v19)
  {
    int v30 = "malloc: out of memory";
    uint64_t v29 = 12;
    size_t v31 = (_krb5_context *)a1;
    krb5_error_code v32 = 12;
    goto LABEL_18;
  }
  v19[52] &= ~1u;
  *(unsigned char *)(*(void *)(*(void *)(a2 + 88) + 32) + 52) |= 2u;
  *(unsigned char *)(*(void *)(*(void *)(a2 + 88) + 32) + 52) |= 4u;
  *(void *)(*(void *)(*(void *)(a2 + 88) + 32) + 40) = 0;
  if (!strings) {
    strings = (char **)krb5_config_get_strings((uint64_t)a1, 0, v20, v21, v22, v23, v24, v25, (uint64_t)"appdefaults");
  }
  if (!strings) {
    strings = &off_2677FE410;
  }
  if (!a7) {
    a7 = (char **)krb5_config_get_strings((uint64_t)a1, 0, v20, v21, v22, v23, v24, v25, (uint64_t)"appdefaults");
  }
  if (!a5)
  {
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, a3);
    krb5_appdefault_string((krb5_context)a1, "kinit", realm, "pkinit_anchors", 0, &ret_value);
    a5 = ret_value;
  }
  uint64_t v27 = *(void *)(a2 + 88);
  if ((a8 & 4) != 0)
  {
    *(unsigned char *)(*(void *)(v27 + 32) + 52) |= 0x20u;
    uint64_t v27 = *(void *)(a2 + 88);
  }
  uint64_t id = _krb5_pk_load_id(a1, *(void **)(v27 + 32), a4, a5, strings, a7, a9, a10, __s1);
  if (id)
  {
    uint64_t v29 = id;
    free(*(void **)(*(void *)(a2 + 88) + 32));
    *(void *)(*(void *)(a2 + 88) + 32) = 0;
    return v29;
  }
  if ((a8 & 8) != 0)
  {
    uint64_t v34 = **(void **)(*(void *)(a2 + 88) + 32);
    *(_DWORD *)(v34 + 48) |= 1u;
  }
  if (a3)
  {
    BOOL is_lkdc = krb5_principal_is_lkdc((uint64_t)a1, a3);
    uint64_t v36 = *(void *)(a2 + 88);
    if (is_lkdc) {
      *(_DWORD *)(**(void **)(v36 + 32) + 48) |= 1u;
    }
  }
  else
  {
    uint64_t v36 = *(void *)(a2 + 88);
  }
  uint64_t v37 = *(uint64_t **)(v36 + 32);
  int v38 = *(const void **)(*v37 + 8);
  if (v38)
  {
    uint64_t v44 = j__heim_retain(v38);
    v53[0] = 0;
    uint64_t v55 = 0;
    uint64_t v45 = *v37;
    if (*(void *)(*v37 + 8))
    {
      hx509_certs_free((const void **)(*v37 + 8));
      uint64_t v45 = *v37;
    }
    uint64_t v46 = *(void *)(v45 + 16);
    if (v46)
    {
      hx509_cert_free(v46);
      uint64_t v45 = *v37;
      *(void *)(*v37 + 16) = 0;
    }
    hx509_certs_merge(a1[47], *(void *)(v45 + 32), v44, v39, v40, v41, v42, v43);
    *(void *)(*v37 + 8) = v44;
    *((unsigned char *)v37 + 52) &= ~0x20u;
    int alloc = hx509_query_alloc(a1[47], v53);
    if (alloc)
    {
      sub_213CA0BF4(a1, alloc, "Allocate query to find signing certificate");
    }
    else
    {
      hx509_query_match_option((_DWORD *)v53[0], 1);
      hx509_query_match_option((_DWORD *)v53[0], 3);
      int cert = _krb5_pk_find_cert(a1, *(_DWORD *)(*v37 + 48) & 1, *(void *)(*v37 + 8), (int *)v53[0], &v55);
      hx509_query_free(a1[47], (void **)v53[0]);
      if (!cert)
      {
        sub_213CA244C((uint64_t)a1, v37, v55);
        hx509_cert_free(v55);
      }
    }
  }
  else
  {
    *(void *)(*v37 + 16) = 0;
  }
  if ((a8 & 2) != 0)
  {
    uint64_t v29 = 0;
    uint64_t v52 = *(_DWORD **)(*(void *)(a2 + 88) + 32);
    v52[2] = 0;
    if (*(void *)(*(void *)v52 + 8)) {
      return v29;
    }
    int v30 = "No anonymous pkinit support in RSA mode";
    goto LABEL_16;
  }
  uint64_t v49 = a1[47];
  uint64_t v50 = *(_DWORD **)(*(void *)(a2 + 88) + 32);
  uint64_t v51 = *(void *)(*(void *)v50 + 16);
  v50[2] = 1;
  if (v51)
  {
    memset(v53, 0, sizeof(v53));
    if (!sub_213CBFA68(v49))
    {
      if (!der_heim_oid_cmp()) {
        *(_DWORD *)(*(void *)(*(void *)(a2 + 88) + 32) + 8) = 2;
      }
      free_AlgorithmIdentifier((uint64_t)v53);
    }
  }
  return 0;
}

uint64_t krb5_get_init_creds_opt_set_pkinit_user_cert(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 88);
  if (!v3)
  {
    int v6 = "PKINIT: on non extendable opt";
LABEL_6:
    uint64_t v5 = 22;
    krb5_set_error_message(a1, 22, v6);
    return v5;
  }
  uint64_t v4 = *(uint64_t **)(v3 + 32);
  if (!v4)
  {
    int v6 = "PKINIT: on pkinit context";
    goto LABEL_6;
  }
  sub_213CA244C((uint64_t)a1, v4, a3);
  return 0;
}

uint64_t krb5_pk_enterprise_cert(uint64_t *a1, char *a2, char *a3, _DWORD **a4, void *a5)
{
  uint64_t v25 = 0;
  *a4 = 0;
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v9 = hx509_certs_init(a1[47], a2, 0, 0, &v27);
    if (v9)
    {
      int v10 = v9;
      uint64_t v11 = "Failed to init cert certs";
LABEL_6:
      sub_213CA0BF4(a1, v10, v11);
      goto LABEL_11;
    }
    krb5_error_code v13 = hx509_query_alloc(a1[47], &v24);
    if (v13)
    {
      krb5_set_error_message((krb5_context)a1, v13, "out of memory");
      hx509_certs_free((const void **)&v27);
      goto LABEL_11;
    }
    hx509_query_match_option(v24, 1);
    hx509_query_match_option(v24, 3);
    hx509_query_match_eku((uint64_t)v24, (uint64_t)&unk_2641E7470);
    hx509_query_match_cmp_func((uint64_t)v24, (uint64_t)sub_213CA3828, 0);
    uint64_t v12 = hx509_certs_filter(a1[47], v27, (int *)v24, &v26);
    hx509_query_free(a1[47], (void **)v24);
    hx509_certs_free((const void **)&v27);
    if (v12)
    {
      sub_213CA0BF4(a1, v12, "Failed to find PKINIT certificate");
      return v12;
    }
    one_int cert = hx509_get_one_cert(a1[47], v26, &v25, v15, v16, v17, v18, v19);
    hx509_certs_free((const void **)&v26);
    if (one_cert)
    {
      sub_213CA0BF4(a1, one_cert, "Failed to get one cert");
      goto LABEL_11;
    }
    int v21 = sub_213CA386C(a1[47], v25, &v23);
    if (v21)
    {
      int v10 = v21;
      uint64_t v11 = "Failed to get MS SAN";
      goto LABEL_6;
    }
    int principal = krb5_make_principal((krb5_context)a1, a4, a3, v23, 0);
    free(v23);
    if (principal)
    {
LABEL_11:
      uint64_t v12 = 2529638983;
      hx509_cert_free(v25);
      krb5_set_error_message((krb5_context)a1, -1765328313, "PK-INIT cert didn't contain principal SAN");
      return v12;
    }
    krb5_principal_set_type((uint64_t)a1, *a4, 10);
    if (a5) {
      *a5 = hx509_cert_ref(v25);
    }
    hx509_cert_free(v25);
    return 0;
  }
  else
  {
    uint64_t v12 = 2;
    krb5_set_error_message((krb5_context)a1, 2, "no user id");
  }
  return v12;
}

uint64_t sub_213CA3828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v2 = sub_213CA386C(a1, a2, &v4);
  if (!v2) {
    free(v4);
  }
  return v2;
}

uint64_t sub_213CA386C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *a3 = 0;
  if (hx509_cert_find_subjectAltName_otherName(a1, a2, (uint64_t)&unk_2641E7480, (uint64_t)&v6)) {
    return 0;
  }
  if (v6 && *v7) {
    uint64_t v4 = sub_213CBC3A4(v7[1], *v7, (uint64_t)a3, 0);
  }
  else {
    uint64_t v4 = 1;
  }
  hx509_free_octet_string_list((uint64_t)&v6);
  return v4;
}

uint64_t _krb5_pk_match_cert(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t subjectAltName_otherName = hx509_cert_find_subjectAltName_otherName(a1[47], a3, (uint64_t)&xmmword_2641E7460, (uint64_t)&v16);
  if (subjectAltName_otherName)
  {
    uint64_t v8 = subjectAltName_otherName;
    krb5_set_error_message((krb5_context)a1, subjectAltName_otherName, "Failed to find the PK-INIT subjectAltName in the certificate");
  }
  else
  {
    if (v16)
    {
      unint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        *(_OWORD *)unint64_t __s1 = 0u;
        long long v15 = 0u;
        uint64_t v11 = sub_213CBC454(*(void *)(v17 + 16 * v9 + 8), *(void *)(v17 + 16 * v9), (uint64_t)__s1, 0);
        if (v11)
        {
          uint64_t v8 = v11;
          krb5_set_error_message((krb5_context)a1, v11, "Failed to decode the PK-INIT subjectAltName in the KDC certificate");
          goto LABEL_16;
        }
        BOOL v12 = !sub_213CA5D38((uint64_t)a1, a2, (uint64_t)&__s1[1])
           || a4 && strcmp(__s1[0], *(const char **)(a2 + 24));
        sub_213CBC4A4((uint64_t)__s1);
        if (!v12) {
          break;
        }
        unint64_t v9 = v10++;
      }
      while (v16 > v9);
      if (v12) {
        goto LABEL_14;
      }
      uint64_t v8 = 0;
    }
    else
    {
LABEL_14:
      uint64_t v8 = 2529638983;
      krb5_set_error_message((krb5_context)a1, -1765328313, "PK-INIT cert didn't contain principal SAN");
    }
LABEL_16:
    hx509_free_octet_string_list((uint64_t)&v16);
  }
  return v8;
}

uint64_t sub_213CA3A54(_krb5_context *a1, unsigned int *a2, uint64_t a3)
{
  int v6 = sub_213CD480C(a2);
  *(void *)a3 = v6;
  uint64_t v7 = malloc_type_malloc(v6, 0x1932B0D9uLL);
  *(void *)(a3 + 8) = v7;
  if (v7)
  {
    sub_213CD48E0((const void **)a2, v7);
    BOOL v8 = sub_213CD4928((uint64_t)a2);
    uint64_t result = 0;
    *(_DWORD *)(a3 + 16) = v8;
  }
  else
  {
    krb5_clear_error_message(a1);
    return 12;
  }
  return result;
}

void *sub_213CA3AD8(_krb5_context *a1, const char *a2, const void **a3)
{
  int v6 = sub_213CD4814(a3[1], *(unsigned int *)a3, 0);
  uint64_t v7 = v6;
  if (v6) {
    sub_213CD4914((uint64_t)v6, *((_DWORD *)a3 + 4));
  }
  else {
    krb5_set_error_message(a1, 12, "PKINIT: parsing BN failed %s", a2);
  }
  return v7;
}

uint64_t sub_213CA3B54(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v19 = 0;
  if (*a2 <= 0xA)
  {
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    uint64_t subject = hx509_cert_get_subject(a3, (void **)&v19);
    if (subject) {
      return subject;
    }
    if (hx509_name_is_null_p(v19))
    {
      int v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
      *(void *)&long long v20 = v6;
      if (!v6)
      {
        hx509_name_free(&v19);
        goto LABEL_15;
      }
      uint64_t v7 = hx509_name_binary(v19, (uint64_t)v6);
      if (v7)
      {
        uint64_t subject = v7;
        hx509_name_free(&v19);
LABEL_13:
        sub_213CBC3C4((uint64_t)&v20);
        return subject;
      }
    }
    hx509_name_free(&v19);
    *((void *)&v20 + 1) = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    if (*((void *)&v20 + 1))
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      memset(v18, 0, sizeof(v18));
      uint64_t subject = hx509_cert_get_issuer(a3, &v17);
      if (subject) {
        goto LABEL_13;
      }
      uint64_t subject = hx509_name_to_Name();
      hx509_name_free((uint64_t *)&v17);
      if (subject) {
        goto LABEL_13;
      }
      uint64_t subject = hx509_cert_get_serialnumber();
      if (subject) {
        goto LABEL_12;
      }
      size_t v9 = length_IssuerAndSerialNumber((uint64_t)v18);
      **((void **)&v20 + 1) = v9;
      unsigned int v10 = malloc_type_malloc(v9, 0x89212A28uLL);
      uint64_t v11 = (uint64_t *)*((void *)&v20 + 1);
      *(void *)(*((void *)&v20 + 1) + 8) = v10;
      if (!v10)
      {
        uint64_t subject = 12;
        goto LABEL_12;
      }
      uint64_t v12 = encode_IssuerAndSerialNumber((uint64_t)v10 + *v11 - 1, *v11, (uint64_t)v18, (uint64_t)&v16);
      if (v12)
      {
        uint64_t subject = v12;
        free(*(void **)(*((void *)&v20 + 1) + 8));
        *(void *)(*((void *)&v20 + 1) + 8) = 0;
LABEL_12:
        free_IssuerAndSerialNumber((uint64_t)v18);
        goto LABEL_13;
      }
      free_IssuerAndSerialNumber((uint64_t)v18);
      if (**((void **)&v20 + 1) != v16) {
        abort();
      }
      uint64_t v21 = 0;
      krb5_error_code v13 = (char *)malloc_type_realloc(*((void **)a2 + 1), 24 * (*a2 + 1), 0x20040960023A9uLL);
      if (v13)
      {
        uint64_t subject = 0;
        *((void *)a2 + 1) = v13;
        uint64_t v14 = &v13[24 * *a2];
        long long v15 = v20;
        *((void *)v14 + 2) = v21;
        *(_OWORD *)uint64_t v14 = v15;
        ++*a2;
        return subject;
      }
    }
LABEL_15:
    sub_213CBC3C4((uint64_t)&v20);
    return 12;
  }
  return 0;
}

uint64_t sub_213CA3DA8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, void *a7)
{
  CFArrayRef theArray = 0;
  int v11 = ((int)(*(_DWORD *)(a4 + 48) << 31) >> 31) & 0xB;
  *a7 = 0;
  uint64_t v12 = hx509_cms_verify_signed(a1[47], *(void *)a4, v11, a2, a3, 0, *(void *)(a4 + 32), a5, a6, &theArray);
  if (!v12)
  {
    if (theArray)
    {
      uint64_t v13 = 2529638982;
      if (!heim_array_get_length(theArray))
      {
        long long v15 = 0;
        goto LABEL_12;
      }
      uint64_t v14 = heim_array_copy_value(theArray, 0);
      long long v15 = v14;
      if (!v14) {
        goto LABEL_12;
      }
      if (!hx509_evaluate_get_length((uint64_t)v14)) {
        goto LABEL_12;
      }
      int cert = hx509_evaluate_get_cert((uint64_t)v15, 0);
      *a7 = cert;
      if (!cert) {
        goto LABEL_12;
      }
    }
    else
    {
      long long v15 = 0;
    }
    uint64_t v13 = 0;
LABEL_12:
    heim_release(theArray);
    heim_release(v15);
    return v13;
  }
  uint64_t v13 = v12;
  sub_213CA0BF4(a1, v12, "CMS verify signed failed");
  return v13;
}

uint64_t sub_213CA3EB4(_krb5_context *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = *(unsigned char *)(a4 + 52);
  if ((v10 & 2) != 0)
  {
    uint64_t v11 = hx509_cert_check_eku(*((void *)a1 + 47), a5);
    if (v11)
    {
      uint64_t principal = v11;
      uint64_t v13 = "No PK-INIT KDC EKU in kdc certificate";
LABEL_9:
      krb5_set_error_message(a1, principal, v13);
      return principal;
    }
    char v10 = *(unsigned char *)(a4 + 52);
  }
  if ((v10 & 4) != 0)
  {
    krb5_principal v16 = 0;
    uint64_t principal = krb5_make_principal(a1, &v16, a2, "krbtgt", a2, 0);
    if (principal) {
      return principal;
    }
    int matched = _krb5_pk_match_cert((uint64_t *)a1, (uint64_t)v16, a5, 1);
    krb5_free_principal(a1, v16);
    if (matched)
    {
      uint64_t principal = 2529638983;
      krb5_set_error_message(a1, -1765328313, "KDC have wrong realm name in the certificate");
      return principal;
    }
  }
  if (!a3) {
    return 0;
  }
  uint64_t principal = hx509_verify_hostname(*((void *)a1 + 47), a5, (*(unsigned char *)(a4 + 52) & 8) != 0, 0, (const char *)(a3 + 48), *(void *)(*(void *)(a3 + 8) + 32), *(_DWORD *)(*(void *)(a3 + 8) + 16));
  if (principal)
  {
    uint64_t v13 = "Address mismatch in the KDC certificate";
    goto LABEL_9;
  }
  return principal;
}

uint64_t sub_213CA3FFC(_krb5_context *a1, uint64_t *a2, uint64_t a3, void **a4)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  uint64_t v12 = 0;
  uint64_t v7 = sub_213CBC514(a2[1], *a2, (uint64_t)&v13, (uint64_t)&v12);
  if (v7)
  {
    uint64_t v8 = v7;
    krb5_set_error_message(a1, v7, "PKINIT decoding reply key failed");
LABEL_11:
    sub_213CBC534((uint64_t)&v13);
    return v8;
  }
  uint64_t v9 = krb5_enctype_valid(a1, (char *)v13);
  if (v9)
  {
    uint64_t v8 = v9;
    goto LABEL_11;
  }
  uint64_t v8 = sub_213CA42CC(a1, (const krb5_keyblock *)&v13, (char *)&v14 + 8, a3);
  if (v8 && DWORD2(v14) == 12 && v13 == 18 && (void)v15 == 20)
  {
    DWORD2(v14) = 16;
    *(void *)&long long v15 = 12;
    uint64_t v8 = sub_213CA42CC(a1, (const krb5_keyblock *)&v13, (char *)&v14 + 8, a3);
  }
  if (v8) {
    goto LABEL_11;
  }
  uint64_t v11 = malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
  *a4 = v11;
  if (v11)
  {
    uint64_t v8 = copy_EncryptionKey();
    sub_213CBC534((uint64_t)&v13);
    if (v8)
    {
      krb5_set_error_message(a1, v8, "PKINIT failed copying reply key");
      free(*a4);
      *a4 = 0;
    }
  }
  else
  {
    sub_213CBC534((uint64_t)&v13);
    uint64_t v8 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v8;
}

uint64_t sub_213CA4198(_krb5_context *a1, uint64_t *a2, int a3, void **a4)
{
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v11 = 0;
  uint64_t v7 = sub_213CBC5F4(a2[1], *a2, (uint64_t)&v12, (uint64_t)&v11);
  if (v7)
  {
    uint64_t v8 = v7;
    krb5_set_error_message(a1, v7, "PKINIT decoding reply key failed");
    sub_213CBC614((uint64_t)&v12);
  }
  else if (DWORD2(v13) == a3)
  {
    uint64_t v9 = malloc_type_malloc(0x18uLL, 0x10800404ACF7207uLL);
    *a4 = v9;
    if (v9)
    {
      uint64_t v8 = copy_EncryptionKey();
      sub_213CBC614((uint64_t)&v12);
      if (v8)
      {
        krb5_set_error_message(a1, v8, "PKINIT failed copying reply key");
        free(*a4);
        *a4 = 0;
      }
    }
    else
    {
      sub_213CBC614((uint64_t)&v12);
      uint64_t v8 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
  }
  else
  {
    krb5_set_error_message(a1, 0, "PKINIT enckey nonce is wrong");
    sub_213CBC614((uint64_t)&v12);
    return 2529638953;
  }
  return v8;
}

uint64_t sub_213CA42CC(_krb5_context *a1, const krb5_keyblock *a2, const void *a3, uint64_t a4)
{
  *(void *)ctype = 0;
  uint64_t v8 = krb5_crypto_init(a1, a2, 0, (krb5_keyblock ***)ctype);
  if (!v8)
  {
    uint64_t v8 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)6, *(krb5_const_pointer *)(a4 + 8), *(void *)a4, a3, v7);
    krb5_crypto_destroy(a1, *(uint64_t *)ctype);
  }
  return v8;
}

uint64_t _krb5_plugin_get_symbol(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _krb5_plugin_get_next(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t _krb5_plugin_find(_krb5_context *a1, int a2, const char *a3, void *a4)
{
  *a4 = 0;
  pthread_mutex_lock((pthread_mutex_t *)&unk_26AA93E18);
  if ((byte_2678013E8 & 1) == 0)
  {
    int v43 = a2;
    __s2 = 0;
    byte_2678013E8 = 1;
    strings = (char **)krb5_config_get_strings((uint64_t)a1, 0, v8, v9, v10, v11, v12, v13, (uint64_t)"libdefaults");
    long long v15 = off_2677FE420;
    if (strings) {
      long long v15 = strings;
    }
    uint64_t v44 = (void **)v15;
    krb5_principal v16 = *v15;
    if (v16)
    {
      uint64_t v17 = v44;
      while (1)
      {
        __s = v16;
        if (!_krb5_expand_default_cc_name_0(a1, (char *)*v17, (void **)&__s))
        {
          uint64_t v18 = __s;
          size_t v19 = strlen(__s);
          if (v19)
          {
            long long v20 = __s - 1;
            do
            {
              if (v20[v19] != 47) {
                break;
              }
              v20[v19--] = 0;
            }
            while (v19);
            uint64_t v18 = __s;
          }
          uint64_t v21 = opendir(v18);
          if (v21) {
            break;
          }
        }
LABEL_44:
        if (__s != *v17) {
          free(__s);
        }
        uint64_t v34 = (char *)v17[1];
        ++v17;
        krb5_principal v16 = v34;
        if (!v34) {
          goto LABEL_47;
        }
      }
      uint64_t v22 = v21;
      sub_213C76C88(v21);
      while (1)
      {
        do
        {
          uint64_t v23 = readdir(v22);
          if (!v23)
          {
            closedir(v22);
            goto LABEL_44;
          }
          d_name = v23->d_name;
        }
        while (v23->d_name[0] == 46 && (!v23->d_name[1] || v23->d_name[1] == 46 && !v23->d_name[2]));
        __s2 = 0;
        size_t v25 = strlen(v23->d_name);
        if (v25 < 8) {
          goto LABEL_21;
        }
        int v26 = v25 - 7;
        if (strcmp(&d_name[v25 - 7], ".bundle")) {
          goto LABEL_21;
        }
        int v33 = asprintf(&__s2, "%s/%s/%.*s", __s, d_name, v26, d_name);
        int v27 = v33;
        uint64_t v28 = __s2;
        if (v33)
        {
          if (v33 < 0) {
            goto LABEL_21;
          }
        }
        else
        {
          if (access(__s2, 1))
          {
            __error();
            free(__s2);
            __s2 = 0;
LABEL_21:
            int v27 = asprintf(&__s2, "%s/%s", __s, d_name);
            uint64_t v28 = __s2;
            goto LABEL_22;
          }
          uint64_t v28 = __s2;
        }
        if (!v28) {
          goto LABEL_21;
        }
LABEL_22:
        if (v27 < 0 || !v28)
        {
          krb5_set_error_message(a1, 12, "malloc: out of memory");
          a2 = v43;
          goto LABEL_50;
        }
        uint64_t v29 = qword_2678013E0;
        if (qword_2678013E0)
        {
          while (*(_DWORD *)v29 || strcmp(*(const char **)(v29 + 8), v28))
          {
            uint64_t v29 = *(void *)(v29 + 32);
            if (!v29) {
              goto LABEL_28;
            }
          }
LABEL_29:
          free(v28);
        }
        else
        {
LABEL_28:
          int v47 = 0;
          if (csops()) {
            goto LABEL_29;
          }
          if ((v47 & 0x2810) == 0x800 && !sub_213CA4854((uint64_t)a1, (uint64_t)v28))
          {
            sub_213C9C004((uint64_t)a1, 2, "Since binary is restricted skipping plugin %s ", v28);
            goto LABEL_29;
          }
          int v30 = malloc_type_calloc(1uLL, 0x28uLL, 0x10B204067CB9950uLL);
          if (!v30)
          {
            krb5_set_error_message(a1, 12, "malloc: out of memory");
            goto LABEL_29;
          }
          size_t v31 = v30;
          _DWORD *v30 = 0;
          krb5_error_code v32 = dlopen(v28, 5);
          v31[1] = v28;
          void v31[2] = v32;
          v31[4] = qword_2678013E0;
          qword_2678013E0 = (uint64_t)v31;
        }
      }
    }
LABEL_47:
    a2 = v43;
    if (v44 != (void **)off_2677FE420) {
      krb5_config_free_strings(v44);
    }
  }
LABEL_50:
  uint64_t v35 = qword_2678013E0;
  if (qword_2678013E0)
  {
    uint64_t v36 = 0;
    while (*(_DWORD *)v35 != 1)
    {
      if (*(_DWORD *)v35) {
        goto LABEL_61;
      }
      uint64_t v37 = *(void **)(v35 + 16);
      if (v37)
      {
        int v38 = dlsym(v37, a3);
        if (v38)
        {
          uint64_t v39 = (uint64_t)v38;
          goto LABEL_60;
        }
        goto LABEL_61;
      }
LABEL_65:
      uint64_t v35 = *(void *)(v35 + 32);
      if (!v35)
      {
        pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
        if (!v36) {
          goto LABEL_69;
        }
        return v36;
      }
    }
    if (!strcmp(*(const char **)(v35 + 16), a3) && *(_DWORD *)(v35 + 8) == a2)
    {
      uint64_t v39 = *(void *)(v35 + 24);
LABEL_60:
      uint64_t v36 = sub_213CA479C(a1, a4, v39);
    }
LABEL_61:
    if (v36)
    {
      uint64_t v40 = (void *)*a4;
      if (*a4)
      {
        do
        {
          uint64_t v41 = (void *)v40[1];
          free(v40);
          uint64_t v40 = v41;
        }
        while (v41);
      }
      *a4 = 0;
    }
    goto LABEL_65;
  }
  pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
LABEL_69:
  if (*a4) {
    return 0;
  }
  uint64_t v36 = 2;
  krb5_set_error_message(a1, 2, "Did not find a plugin for %s", a3);
  return v36;
}

uint64_t sub_213CA479C(_krb5_context *a1, void *a2, uint64_t a3)
{
  int v6 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040BD48D6D6uLL);
  if (v6)
  {
    uint64_t v7 = 0;
    *int v6 = a3;
    v6[1] = *a2;
    *a2 = v6;
  }
  else
  {
    uint64_t v7 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v7;
}

void *_krb5_plugin_free(void *result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = (void *)result[1];
      free(result);
      uint64_t result = v1;
    }
    while (v1);
  }
  return result;
}

uint64_t sub_213CA4854(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  SecRequirementRef requirement = 0;
  SecStaticCodeRef staticCode = 0;
  if (!a2)
  {
    sub_213C9C004(a1, 2, "path cannot be null %s", 0);
    goto LABEL_23;
  }
  OSStatus v4 = SecRequirementCreateWithString(@"anchor apple", 0, &requirement);
  if (v4 || !requirement)
  {
    sub_213C9C004(a1, 2, "Error creating requirement %d ", v4);
    uint64_t v2 = 0;
    goto LABEL_23;
  }
  CFStringRef v5 = CFStringCreateWithCString(0, (const char *)v2, 0x8000100u);
  CFURLRef v6 = CFURLCreateWithFileSystemPath(0, v5, kCFURLPOSIXPathStyle, 0);
  if (SecStaticCodeCreateWithPath(v6, 0, &staticCode) || !staticCode)
  {
    sub_213C9C004(a1, 2, "Error creating static code for %s: %d ");
  }
  else
  {
    if (!SecStaticCodeCheckValidity(staticCode, 0x15u, requirement))
    {
      uint64_t v2 = 1;
      if (v6) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
    sub_213C9C004(a1, 2, "Error checking requirement for %s: %d ");
  }
  uint64_t v2 = 0;
  if (v6)
  {
LABEL_12:
    CFStringRef PathComponent = CFURLCopyLastPathComponent(v6);
    CStringPtr = CFStringGetCStringPtr(PathComponent, 0x8000100u);
    uint64_t v9 = "is not";
    if (v2) {
      uint64_t v9 = "is";
    }
    sub_213C9C004(a1, 2, "Plugin %s %s signed by Apple", CStringPtr, v9);
    if (PathComponent) {
      CFRelease(PathComponent);
    }
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v10 = v6;
    goto LABEL_22;
  }
LABEL_20:
  if (!v5) {
    goto LABEL_23;
  }
  uint64_t v10 = v5;
LABEL_22:
  CFRelease(v10);
LABEL_23:
  if (staticCode) {
    CFRelease(staticCode);
  }
  if (requirement) {
    CFRelease(requirement);
  }
  return v2;
}

void *sub_213CA4A18(uint64_t a1)
{
  heim_release(*(CFTypeRef *)(a1 + 32));
  heim_release(*(CFTypeRef *)(a1 + 48));
  uint64_t result = *(void **)(a1 + 40);
  if (result)
  {
    return (void *)dlclose(result);
  }
  return result;
}

uint64_t krb5_plugin_register_module(_krb5_context *a1, char *a2, int a3, char *a4, const void *a5)
{
  pthread_mutex_lock((pthread_mutex_t *)&unk_26AA93E18);
  if (!a2) {
    goto LABEL_11;
  }
  if (!qword_26AA95290)
  {
    qword_26AA95290 = (uint64_t)heim_dict_create();
    if (!qword_26AA95290)
    {
      pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
      return 1;
    }
  }
  CFStringRef v10 = heim_string_create(a2);
  CFDictionaryRef v11 = (const __CFDictionary *)heim_dict_copy_value((const __CFDictionary *)qword_26AA95290, v10);
  if (v11) {
    goto LABEL_7;
  }
  CFMutableDictionaryRef v12 = heim_dict_create();
  if (!v12)
  {
    pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
    heim_release(v10);
    return 1;
  }
  CFDictionaryRef v11 = v12;
  heim_dict_set_value((__CFDictionary *)qword_26AA95290, v10, v12);
LABEL_7:
  heim_release(v10);
  cStr = 0;
  asprintf(&cStr, "%p", a5);
  CFStringRef v13 = heim_string_create(cStr);
  size_t v19 = heim_dict_copy_value(v11, v13);
  if (!v19)
  {
    size_t v19 = (void *)heim_uniq_alloc(0x38uLL, (uint64_t)"krb5-plugin", (uint64_t)sub_213CA4A18, v14, v15, v16, v17, v18);
    if (v19)
    {
      v19[6] = heim_dict_create();
      heim_dict_set_value(v11, v13, v19);
      size_t v25 = (void *)heim_uniq_alloc(0x30uLL, (uint64_t)"struct-plug", (uint64_t)sub_213CA4D08, v20, v21, v22, v23, v24);
      v25[4] = a5;
      int v26 = (__CFDictionary *)v19[6];
      CFStringRef v27 = heim_string_create(a4);
      heim_dict_set_value(v26, v27, v25);
    }
  }
  heim_release(v19);
LABEL_11:
  uint64_t v28 = qword_2678013E0;
  if (qword_2678013E0)
  {
    while (*(_DWORD *)v28 != 1
         || strcmp(*(const char **)(v28 + 16), a4)
         || *(_DWORD *)(v28 + 8) != a3
         || *(const void **)(v28 + 24) != a5)
    {
      uint64_t v28 = *(void *)(v28 + 32);
      if (!v28) {
        goto LABEL_17;
      }
    }
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v29 = malloc_type_calloc(1uLL, 0x28uLL, 0x10B204067CB9950uLL);
  if (!v29)
  {
    pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
LABEL_23:
    uint64_t v33 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v33;
  }
  int v30 = v29;
  _DWORD *v29 = 1;
  void v29[2] = a3;
  size_t v31 = strdup(a4);
  void v30[2] = v31;
  if (!v31)
  {
    pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
    free(v30);
    goto LABEL_23;
  }
  uint64_t v32 = qword_2678013E0;
  void v30[3] = a5;
  v30[4] = v32;
  qword_2678013E0 = (uint64_t)v30;
LABEL_20:
  pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
  return 0;
}

uint64_t sub_213CA4D08(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    return (*(uint64_t (**)(void))(v1 + 16))(*(void *)(result + 40));
  }
  return result;
}

uint64_t krb5_plugin_register(_krb5_context *a1, int a2, char *a3, const void *a4)
{
  return krb5_plugin_register_module(a1, 0, a2, a3, a4);
}

uint64_t krb5_plugin_run_f(uint64_t a1, char *cStr, char *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = 2529639161;
  CFStringRef v13 = heim_string_create(cStr);
  pthread_mutex_lock((pthread_mutex_t *)&unk_26AA93E18);
  CFDictionaryRef v14 = (const __CFDictionary *)heim_dict_copy_value((const __CFDictionary *)qword_26AA95290, v13);
  heim_release(v13);
  if (v14)
  {
    uint64_t v23 = 0;
    uint64_t v16 = a1;
    uint64_t v18 = a3;
    CFStringRef v17 = heim_string_create(a3);
    uint64_t v19 = a4;
    CFArrayRef v20 = heim_array_create();
    uint64_t v21 = a7;
    uint64_t v22 = a6;
    sub_213CD8100(v14, (uint64_t)&v16, (uint64_t)sub_213CA4E70);
    heim_release(v14);
    pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
    LODWORD(v23) = -1765328135;
    heim_array_iterate_f(v20, (uint64_t)&v16, (uint64_t (*)(const void *, int *, uint64_t))sub_213CA4F70);
    heim_release(v20);
    heim_release(v17);
    return v23;
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)&unk_26AA93E18);
  }
  return v12;
}

void sub_213CA4E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5 = heim_dict_copy_value(*(const __CFDictionary **)(a2 + 48), *(const void **)(a3 + 8));
  if (v5)
  {
    CFDictionaryRef v11 = v5;
    uint64_t v12 = (_DWORD *)v5[4];
    if (!v12) {
      goto LABEL_11;
    }
LABEL_9:
    if (*v12 >= *(_DWORD *)(a3 + 24)) {
      heim_array_append_value(*(__CFArray **)(a3 + 32), v11);
    }
    goto LABEL_11;
  }
  if (!*(void *)(a2 + 40)) {
    return;
  }
  CFDictionaryRef v11 = (void *)heim_uniq_alloc(0x30uLL, (uint64_t)"struct-plug", (uint64_t)sub_213CA4D08, v6, v7, v8, v9, v10);
  CFStringRef v13 = dlsym(*(void **)(a2 + 40), *(const char **)(a3 + 16));
  uint64_t v12 = v13;
  v11[4] = v13;
  if (v13 && (*((unsigned int (**)(void, void *))v13 + 1))(*(void *)a3, v11 + 5))
  {
    uint64_t v12 = 0;
    v11[4] = 0;
  }
  heim_dict_set_value(*(__CFDictionary **)(a2 + 48), *(const void **)(a3 + 8), v11);
  if (v12) {
    goto LABEL_9;
  }
LABEL_11:

  heim_release(v11);
}

uint64_t sub_213CA4F70(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(a3 + 40))(*(void *)a3, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a3 + 48));
  *(_DWORD *)(a3 + 56) = result;
  if (result != -1765328135) {
    *a2 = 1;
  }
  return result;
}

void krb5_free_principal(krb5_context a1, krb5_principal a2)
{
  if (a2)
  {
    free_Principal((uint64_t)a2);
    free(a2);
  }
}

void krb5_principal_set_type(uint64_t a1, _DWORD *a2, int a3)
{
  *a2 = a3;
}

uint64_t krb5_principal_get_type(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t krb5_principal_get_realm(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t krb5_principal_get_comp_string(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(_DWORD *)(a2 + 8) <= a3) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a2 + 16) + 8 * a3);
  }
}

uint64_t krb5_principal_get_num_comp(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

krb5_error_code krb5_parse_name_flags(krb5_context a1, const char *a2, int a3, krb5_principal *a4)
{
  OSStatus v4 = a1;
  uint64_t v51 = 0;
  *a4 = 0;
  if ((~a3 & 3) == 0)
  {
    krb5_error_code v5 = -1765328138;
    krb5_set_error_message(a1, -1765328138, "Can't require both realm and no realm at the same time");
    return v5;
  }
  int v9 = 1;
  if ((a3 & 4) == 0)
  {
    for (uint64_t i = a2; ; ++i)
    {
      unsigned int v29 = *(unsigned __int8 *)i;
      if (v29 > 0x3F)
      {
        if (v29 == 92)
        {
          if (!*(unsigned __int8 *)++i)
          {
            krb5_error_code v5 = -1765328250;
            krb5_set_error_message(a1, -1765328250, "trailing \\ in principal name");
            return v5;
          }
        }
        else if (v29 == 64)
        {
          break;
        }
      }
      else if (v29 == 47)
      {
        ++v9;
      }
      else if (!*i)
      {
        break;
      }
    }
  }
  uint64_t v10 = (char *)malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  if (!v10)
  {
LABEL_50:
    krb5_error_code v5 = 12;
    krb5_set_error_message(v4, 12, "malloc: out of memory");
    return v5;
  }
  CFDictionaryRef v11 = v10;
  uint64_t v12 = strdup(a2);
  if (!v12)
  {
    free(v11);
    goto LABEL_50;
  }
  CFStringRef v13 = v12;
  uint64_t v41 = a4;
  unsigned int v14 = *v12;
  if (!*v12)
  {
    int v16 = 0;
    uint64_t v18 = v12;
    uint64_t v19 = v12;
    if ((a3 & 2) != 0) {
      goto LABEL_73;
    }
    goto LABEL_53;
  }
  uint64_t v42 = v4;
  BOOL v15 = 0;
  int v16 = 0;
  BOOL v17 = 1;
  uint64_t v18 = v12;
  uint64_t v19 = v12;
  uint64_t v50 = v12;
  int v47 = v12;
  uint64_t v48 = v11;
LABEL_8:
  uint64_t v20 = 0;
  uint64_t v44 = v18;
  BOOL v43 = v15;
  int v49 = v16;
  unsigned int v45 = v14;
  BOOL v46 = v17;
  unsigned int v21 = v17 & (a3 >> 2);
  uint64_t v22 = &v11[8 * v16];
  unsigned int v23 = v14;
  while (1)
  {
    uint64_t v24 = &v50[v20];
    if (v23 == 92)
    {
      int v16 = v49 + v20;
      uint64_t v50 = v24 + 2;
      unsigned int v27 = v24[1];
      if (v27 > 0x6D)
      {
        CFDictionaryRef v11 = v48;
        BOOL v17 = v46;
        if (v27 == 116)
        {
          unsigned int v27 = 9;
        }
        else if (v27 == 110)
        {
          unsigned int v27 = 10;
        }
      }
      else
      {
        CFDictionaryRef v11 = v48;
        BOOL v17 = v46;
        if (v27 == 48)
        {
          unsigned int v27 = 0;
        }
        else if (v27 == 98)
        {
          unsigned int v27 = 8;
        }
        else if (!v24[1])
        {
          krb5_error_code v5 = -1765328250;
          krb5_set_error_message(v42, -1765328250, "trailing \\ in principal name");
          int v16 = v49 + v20;
          CFStringRef v13 = v47;
          goto LABEL_76;
        }
      }
      CFStringRef v13 = v47;
      if (v15) {
        goto LABEL_34;
      }
      goto LABEL_36;
    }
    if (v21)
    {
      unsigned int v27 = v45;
      BOOL v17 = v45 != 64;
      int v16 = v49;
      v50 += v20 + 1;
      BOOL v15 = v43;
      uint64_t v18 = v44;
      CFStringRef v13 = v47;
      CFDictionaryRef v11 = v48;
      if (v43) {
        goto LABEL_34;
      }
LABEL_36:
      *v19++ = v27;
      unsigned int v14 = *v50;
      if (*v50) {
        goto LABEL_8;
      }
LABEL_59:
      if (v15)
      {
        if (a3)
        {
          krb5_error_code v5 = -1765328250;
          krb5_set_error_message(v42, -1765328250, "realm found in 'short' principal expected to be without one", v41);
          goto LABEL_76;
        }
        size_t v33 = v19 - v18;
        uint64_t v34 = (char *)malloc_type_malloc(v19 - v18 + 1, 0x49A0B1CDuLL);
        uint64_t v51 = v34;
        OSStatus v4 = v42;
        if (!v34) {
          goto LABEL_71;
        }
        uint64_t v35 = v34;
        memcpy(v34, v18, v33);
        v35[v33] = 0;
LABEL_66:
        uint64_t v37 = (krb5_principal_data *)malloc_type_malloc(0x20uLL, 0x10900408A8AD7E9uLL);
        krb5_principal *v41 = v37;
        if (v37)
        {
          if ((a3 & 4) != 0) {
            int v38 = 10;
          }
          else {
            int v38 = 1;
          }
          v37->uint64_t magic = v38;
          v37->realm.data = v11;
          krb5_principal v39 = *v41;
          v39->realm.uint64_t magic = v16;
          v39->data = (krb5_data *)v51;
          free(v13);
          return 0;
        }
LABEL_71:
        krb5_error_code v5 = 12;
        krb5_set_error_message(v4, 12, "malloc: out of memory", v41);
        goto LABEL_76;
      }
      OSStatus v4 = v42;
      if ((a3 & 2) != 0)
      {
LABEL_73:
        krb5_error_code v5 = -1765328250;
        krb5_set_error_message(v4, -1765328250, "realm NOT found in principal expected to be with one", v41);
        goto LABEL_76;
      }
LABEL_53:
      if (a3)
      {
        uint64_t v51 = 0;
      }
      else
      {
        krb5_error_code default_realm = krb5_get_default_realm(v4, &v51);
        if (default_realm)
        {
          krb5_error_code v5 = default_realm;
          goto LABEL_76;
        }
      }
      uint64_t v36 = malloc_type_malloc(v19 - v18 + 1, 0x334428DDuLL);
      *(void *)&v11[8 * v16] = v36;
      if (!v36) {
        goto LABEL_71;
      }
      memcpy(v36, v18, v19 - v18);
      *(unsigned char *)(*(void *)&v11[8 * v16++] + v19 - v18) = 0;
      goto LABEL_66;
    }
    unsigned int v25 = (a3 >> 2) & 1;
    if (v23 != 47) {
      LOBYTE(v25) = 1;
    }
    if (v23 != 64 && (v25 & 1) != 0) {
      break;
    }
    if (v15)
    {
      krb5_error_code v5 = -1765328250;
      int v16 = v49 + v20;
      krb5_set_error_message(v42, -1765328250, "part after realm in principal name", v41);
LABEL_58:
      CFStringRef v13 = v47;
      CFDictionaryRef v11 = v48;
      goto LABEL_76;
    }
    int v26 = malloc_type_malloc(v19 - v18 + 1, 0xA4B919A4uLL);
    *(void *)&v22[8 * v20] = v26;
    if (!v26)
    {
      int v16 = v49 + v20;
      krb5_error_code v5 = 12;
      krb5_set_error_message(v42, 12, "malloc: out of memory", v41);
      goto LABEL_58;
    }
    BOOL v15 = v23 == 64;
    memcpy(v26, v18, v19 - v18);
    *(unsigned char *)(*(void *)&v22[8 * v20] + v19 - v18) = 0;
    unsigned int v23 = v24[1];
    ++v20;
    uint64_t v18 = v19;
    if (!v24[1])
    {
      CFDictionaryRef v11 = v48;
      int v16 = v49 + v20;
      uint64_t v18 = v19;
      CFStringRef v13 = v47;
      goto LABEL_59;
    }
  }
  CFDictionaryRef v11 = v48;
  v50 += v20 + 1;
  unsigned int v27 = v23;
  int v16 = v49 + v20;
  CFStringRef v13 = v47;
  BOOL v17 = v46;
  if (!v15) {
    goto LABEL_36;
  }
LABEL_34:
  if (v27 != 47 && v27) {
    goto LABEL_36;
  }
  krb5_error_code v5 = -1765328250;
  krb5_set_error_message(v42, -1765328250, "part after realm in principal name", v41);
LABEL_76:
  if (v16 >= 1)
  {
    unint64_t v40 = v16 + 1;
    do
      free(*(void **)&v11[8 * (v40-- - 2)]);
    while (v40 > 1);
  }
  free(v11);
  free(v51);
  free(v13);
  return v5;
}

krb5_error_code krb5_parse_name(krb5_context a1, const char *a2, krb5_principal *a3)
{
  return krb5_parse_name_flags(a1, a2, 0, a3);
}

uint64_t krb5_unparse_name_fixed(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_213CA55C8(a1, a2, a3, a4, 0);
}

uint64_t sub_213CA55C8(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  if ((a5 & 2) == 0 && !*(void *)(a2 + 24))
  {
    int v16 = "Realm missing from principal, can't unparse";
LABEL_24:
    uint64_t v14 = 34;
    krb5_set_error_message(a1, 34, v16);
    return v14;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      if (v11 < a4 && v10) {
        *(unsigned char *)(a3 + v11++) = 47;
      }
      unint64_t v12 = sub_213CA632C(*(unsigned char **)(*(void *)(a2 + 16) + 8 * v10), a3, v11, a4, (a5 >> 2) & 1);
      if (v12 == a4) {
        break;
      }
      unint64_t v11 = v12;
      if (++v10 >= (unint64_t)*(unsigned int *)(a2 + 8)) {
        goto LABEL_12;
      }
    }
    int v16 = "Out of space printing principal";
    goto LABEL_24;
  }
  unint64_t v11 = 0;
LABEL_12:
  if ((a5 & 3) != 1)
  {
    int v15 = a5 & 1;
    goto LABEL_19;
  }
  __s2 = 0;
  uint64_t default_realm = krb5_get_default_realm(a1, &__s2);
  if (!default_realm)
  {
    BOOL v17 = __s2;
    int v15 = strcmp(*(const char **)(a2 + 24), __s2) == 0;
    free(v17);
LABEL_19:
    if (v15 | a5 & 2) {
      return 0;
    }
    if (v11 < a4) {
      *(unsigned char *)(a3 + v11++) = 64;
    }
    if (sub_213CA632C(*(unsigned char **)(a2 + 24), a3, v11, a4, (a5 >> 2) & 1) != a4) {
      return 0;
    }
    int v16 = "Out of space printing realm of principal";
    goto LABEL_24;
  }
  return default_realm;
}

uint64_t krb5_unparse_name_fixed_short(_krb5_context *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_213CA55C8(a1, a2, a3, a4, 1u);
}

uint64_t krb5_unparse_name_fixed_flags(_krb5_context *a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  return sub_213CA55C8(a1, a2, a4, a5, a3);
}

krb5_error_code krb5_unparse_name(krb5_context a1, krb5_const_principal a2, char **a3)
{
  return sub_213CA5788(a1, (uint64_t)a2, (void **)a3, 0);
}

uint64_t sub_213CA5788(_krb5_context *a1, uint64_t a2, void **a3, unsigned int a4)
{
  uint64_t v8 = *(const char **)(a2 + 24);
  if (v8)
  {
    size_t v9 = strlen(*(const char **)(a2 + 24));
    uint64_t v10 = (v9 << (strcspn(v8, " \n\t\b\\/@") != v9)) + 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(unsigned int *)(a2 + 8);
  if (v11)
  {
    unint64_t v12 = *(const char ***)(a2 + 16);
    do
    {
      CFStringRef v13 = *v12++;
      size_t v14 = strlen(v13);
      v10 += (v14 << (strcspn(v13, " \n\t\b\\/@") != v14)) + 1;
      --v11;
    }
    while (v11);
  }
  int v15 = malloc_type_malloc(v10 + 1, 0xD614332AuLL);
  *a3 = v15;
  if (v15)
  {
    uint64_t v16 = sub_213CA55C8(a1, a2, (uint64_t)v15, v10 + 1, a4);
    if (v16)
    {
      free(*a3);
      *a3 = 0;
    }
  }
  else
  {
    uint64_t v16 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v16;
}

krb5_error_code krb5_unparse_name_flags(krb5_context a1, krb5_const_principal a2, int a3, char **a4)
{
  return sub_213CA5788(a1, (uint64_t)a2, (void **)a4, a3);
}

uint64_t krb5_unparse_name_short(_krb5_context *a1, uint64_t a2, void **a3)
{
  return sub_213CA5788(a1, a2, a3, 1u);
}

uint64_t krb5_principal_set_realm(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v6 = *(void **)(a2 + 24);
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(__s1);
  *(void *)(a2 + 24) = v7;
  if (v7) {
    return 0;
  }
  uint64_t v8 = 12;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v8;
}

krb5_error_code krb5_build_principal(krb5_context a1, krb5_principal *a2, unsigned int a3, const char *a4, ...)
{
  va_start(va, a4);
  return sub_213CA5A3C(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_213CA5B00, (uint64_t)va);
}

uint64_t krb5_build_principal_va(_krb5_context *a1, void *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return sub_213CA5A3C(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_213CA5B00, a5);
}

uint64_t krb5_make_principal(krb5_context a1, void *a2, char *a3, ...)
{
  va_start(va, a3);
  uint64_t v7 = 0;
  if (!a3)
  {
    uint64_t default_realm = krb5_get_default_realm(a1, &v7);
    if (default_realm) {
      return default_realm;
    }
    a3 = v7;
  }
  uint64_t default_realm = sub_213CA5A3C(a1, a2, a3, (void (*)(_krb5_context *, void *, uint64_t))sub_213CA5B00, (uint64_t)va);
  if (v7) {
    free(v7);
  }
  return default_realm;
}

uint64_t sub_213CA5A3C(_krb5_context *a1, void *a2, const char *a3, void (*a4)(_krb5_context *, void *, uint64_t), uint64_t a5)
{
  uint64_t v10 = malloc_type_calloc(1uLL, 0x20uLL, 0x10900408A8AD7E9uLL);
  if (!v10) {
    goto LABEL_5;
  }
  uint64_t v11 = v10;
  _DWORD *v10 = 1;
  unint64_t v12 = strdup(a3);
  v11[3] = v12;
  if (!v12)
  {
    free(v11);
LABEL_5:
    uint64_t v13 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v13;
  }
  a4(a1, v11, a5);
  uint64_t v13 = 0;
  *a2 = v11;
  return v13;
}

void sub_213CA5B00(_krb5_context *a1, uint64_t a2, const char **a3)
{
  uint64_t v8 = a3 + 1;
  uint64_t v3 = *a3;
  if (*a3)
  {
    do
    {
      size_t v6 = strlen(v3);
      sub_213CA6428(a1, a2, v3, v6);
      uint64_t v7 = v8++;
      uint64_t v3 = *v7;
    }
    while (*v7);
  }
}

uint64_t krb5_build_principal_va_ext(_krb5_context *a1, void *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return sub_213CA5A3C(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_213CA5B8C, a5);
}

void sub_213CA5B8C(_krb5_context *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v7 = (const void **)(a3 + 2);
  for (int i = *a3; i; int i = *v6)
  {
    sub_213CA6428(a1, a2, *v7, i);
    size_t v6 = (int *)(v7 + 1);
    v7 += 2;
  }
}

krb5_error_code krb5_build_principal_ext(krb5_context a1, krb5_principal *a2, unsigned int a3, const char *a4, ...)
{
  va_start(va, a4);
  return sub_213CA5A3C(a1, a2, a4, (void (*)(_krb5_context *, void *, uint64_t))sub_213CA5B8C, (uint64_t)va);
}

krb5_error_code krb5_copy_principal(krb5_context a1, krb5_const_principal a2, krb5_principal *a3)
{
  krb5_error_code v5 = (krb5_principal_data *)malloc_type_malloc(0x20uLL, 0x10900408A8AD7E9uLL);
  if (v5)
  {
    size_t v6 = v5;
    if (!copy_Principal())
    {
      krb5_error_code v7 = 0;
      *a3 = v6;
      return v7;
    }
    free(v6);
  }
  krb5_error_code v7 = 12;
  krb5_set_error_message(a1, 12, "malloc: out of memory");
  return v7;
}

uint64_t krb5_principal_compare_any_realm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 == *(_DWORD *)(a3 + 8))
  {
    if (!v3) {
      return 1;
    }
    OSStatus v4 = *(const char ***)(a2 + 16);
    for (int i = *(const char ***)(a3 + 16); !strcmp(*v4, *i); ++i)
    {
      ++v4;
      if (!--v3) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_213CA5D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 == *(_DWORD *)(a3 + 8))
  {
    if (!v3) {
      return 1;
    }
    OSStatus v4 = *(const char ***)(a2 + 16);
    for (int i = *(const char ***)(a3 + 16); !strcmp(*v4, *i); ++i)
    {
      ++v4;
      if (!--v3) {
        return 1;
      }
    }
  }
  return 0;
}

krb5_BOOLean krb5_principal_compare(krb5_context a1, krb5_const_principal a2, krb5_const_principal a3)
{
  uint64_t v5 = strcmp((const char *)a2->data, (const char *)a3->data);
  if (v5) {
    return 0;
  }

  return krb5_principal_compare_any_realm(v5, (uint64_t)a2, (uint64_t)a3);
}

krb5_BOOLean krb5_realm_compare(krb5_context a1, krb5_const_principal a2, krb5_const_principal a3)
{
  return strcmp((const char *)a2->data, (const char *)a3->data) == 0;
}

uint64_t krb5_principal_match(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a3 + 8))
  {
    int v5 = fnmatch(*(const char **)(a3 + 24), *(const char **)(a2 + 24), 0);
    uint64_t result = 0;
    if (v5) {
      return result;
    }
    if (!*(_DWORD *)(a2 + 8)) {
      return 1;
    }
    uint64_t v7 = 0;
    while (!fnmatch(*(const char **)(*(void *)(a3 + 16) + 8 * v7), *(const char **)(*(void *)(a2 + 16) + 8 * v7), 0))
    {
      if (++v7 >= (unint64_t)*(unsigned int *)(a2 + 8)) {
        return 1;
      }
    }
  }
  return 0;
}

krb5_error_code krb5_sname_to_principal(krb5_context a1, const char *a2, const char *a3, krb5_int32 a4, krb5_principal *a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a4 && a4 != 3)
  {
    krb5_error_code host_realm = -1765328166;
    krb5_set_error_message(a1, -1765328166, "unsupported name type %d");
    return host_realm;
  }
  int v15 = 0;
  if (a2)
  {
    __strlcpy_chk();
  }
  else
  {
    if (gethostname(__s, 0xFFuLL))
    {
      krb5_error_code host_realm = *__error();
      krb5_set_error_message(a1, host_realm, "Failed to get local hostname");
      return host_realm;
    }
    __s[255] = 0;
  }
  if (!a3) {
    a3 = "host";
  }
  if (a4 == 3)
  {
    size_t v14 = 0;
    krb5_error_code v10 = krb5_expand_hostname_realms(a1, __s, (unsigned __int8 **)&v14, &v15);
    if (v10) {
      return v10;
    }
    rk_strlwr((unsigned __int8 *)v14);
    __strlcpy_chk();
    free(v14);
  }
  else
  {
    krb5_error_code host_realm = krb5_get_host_realm(a1, a2, &v15);
    if (host_realm) {
      return host_realm;
    }
  }
  size_t v12 = strlen(__s);
  if (v12 && __s[v12 - 1] == 46) {
    __s[v12 - 1] = 0;
  }
  krb5_error_code host_realm = krb5_make_principal(a1, a5, *v15, a3, __s, 0);
  krb5_free_host_realm(a1, v15);
  return host_realm;
}

uint64_t krb5_parse_nametype(_krb5_context *a1, char *a2, _DWORD *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = "UNKNOWN";
  while (strcasecmp(v7, a2))
  {
    uint64_t v7 = (&off_2641E43F0)[v6 + 2];
    v6 += 2;
    if (v6 == 24)
    {
      uint64_t v8 = 2529639046;
      krb5_set_error_message(a1, -1765328250, "Failed to find name type %s", a2);
      return v8;
    }
  }
  uint64_t v8 = 0;
  *a3 = (&off_2641E43F0)[v6 + 1];
  return v8;
}

BOOL krb5_principal_is_null(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(_DWORD *)a2 == 11 && *(_DWORD *)(a2 + 8) == 2)
  {
    uint64_t v2 = *(const char ***)(a2 + 16);
    if (!strcmp(*v2, "WELLKNOWN") && !strcmp(v2[1], "NULL")) {
      return 1;
    }
  }
  return result;
}

BOOL krb5_realm_is_lkdc(const char *a1)
{
  return !strncmp(a1, "LKDC:", 5uLL) || strncmp(a1, "WELLKNOWN:COM.APPLE.LKDC", 0x18uLL) == 0;
}

BOOL krb5_principal_is_lkdc(uint64_t a1, uint64_t a2)
{
  return krb5_realm_is_lkdc(*(const char **)(a2 + 24));
}

BOOL krb5_principal_is_pku2u(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a2 + 24), "WELLKNOWN:PKU2U") == 0;
}

BOOL krb5_principal_is_krbtgt(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == 2 && strcmp(**(const char ***)(a2 + 16), "krbtgt") == 0;
}

BOOL krb5_principal_is_gss_hostbased_service(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 8) == 2) {
    return strcmp(*(const char **)(*(void *)(a2 + 16) + 8), "WELLKNOWN:ORG.H5L.HOSTBASED-SERVICE") == 0;
  }
  return 0;
}

BOOL krb5_principal_is_root_krbtgt(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 2 && (uint64_t v3 = *(const char ***)(a2 + 16), !strcmp(*v3, "krbtgt"))) {
    return strcmp(v3[1], *(const char **)(a2 + 24)) == 0;
  }
  else {
    return 0;
  }
}

unint64_t sub_213CA632C(unsigned char *a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5)
{
  unint64_t v5 = a3;
  char v7 = *a1;
  BOOL v8 = a3 < a4;
  if (*a1) {
    BOOL v9 = a3 >= a4;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    size_t v12 = a1 + 1;
    do
    {
      uint64_t v13 = memchr(" \n\t\b\\/@", v7, 8uLL);
      if (a5 && v13)
      {
        *(unsigned char *)(a2 + v5++) = aNtb[v13 - " \n\t\b\\/@"];
        goto LABEL_14;
      }
      unint64_t v14 = v5 + 1;
      if (v13)
      {
        *(unsigned char *)(a2 + v5) = 92;
        if (v14 < a4)
        {
          v5 += 2;
          *(unsigned char *)(a2 + v14) = aNtb[v13 - " \n\t\b\\/@"];
          goto LABEL_14;
        }
      }
      else
      {
        *(unsigned char *)(a2 + v5) = v7;
      }
      ++v5;
LABEL_14:
      int v15 = *v12++;
      char v7 = v15;
      BOOL v8 = v5 < a4;
    }
    while (v15 && v5 < a4);
  }
  if (v8) {
    *(unsigned char *)(a2 + v5) = 0;
  }
  return v5;
}

void sub_213CA6428(_krb5_context *a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  BOOL v9 = malloc_type_realloc(*(void **)(a2 + 16), 8 * v8 + 8, 0x10040436913F5uLL);
  if (v9
    && (*(void *)(a2 + 16) = v9,
        *(void *)(*(void *)(a2 + 16) + 8 * v8) = malloc_type_malloc(a4 + 1, 0x7EE98086uLL),
        (krb5_error_code v10 = *(void **)(*(void *)(a2 + 16) + 8 * v8)) != 0))
  {
    memcpy(v10, a3, a4);
    *(unsigned char *)(*(void *)(*(void *)(a2 + 16) + 8 * v8) + a4) = 0;
    ++*(_DWORD *)(a2 + 8);
  }
  else
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
}

krb5_error_code krb5_prompter_posix(krb5_context context, void *data, const char *name, const char *banner, int num_prompts, krb5_prompt prompts[])
{
  BOOL v9 = (FILE **)MEMORY[0x263EF8348];
  if (name)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", name);
    if (!banner) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (banner)
  {
LABEL_5:
    fprintf(*v9, "%s\n", banner);
LABEL_6:
    fflush(*v9);
  }
  if (num_prompts < 1) {
    return 0;
  }
  uint64_t v10 = num_prompts;
  p_reply = (int **)&prompts->reply;
  size_t v12 = (FILE **)MEMORY[0x263EF8358];
  uint64_t v13 = (FILE **)MEMORY[0x263EF8350];
  while (1)
  {
    unint64_t v14 = (const char *)*((void *)*p_reply + 1);
    if (!*((_DWORD *)p_reply - 2)) {
      break;
    }
    if (hc_UI_UTIL_read_pw_string(*((char **)*p_reply + 1), **p_reply, (const char *)*(p_reply - 2), 0)) {
      return 1;
    }
LABEL_14:
    p_reply += 4;
    if (!--v10) {
      return 0;
    }
  }
  fputs((const char *)*(p_reply - 2), *v12);
  fflush(*v12);
  if (fgets(*((char **)*p_reply + 1), **p_reply, *v13))
  {
    v14[strcspn(v14, "\n")] = 0;
    goto LABEL_14;
  }
  return 1;
}

uint64_t krb5_prompter_print_only(uint64_t a1, uint64_t a2, const char *a3, const char *a4, int a5)
{
  uint64_t v8 = (FILE **)MEMORY[0x263EF8348];
  if (a3)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", a3);
    if (!a4) {
      goto LABEL_6;
    }
  }
  else if (!a4)
  {
    goto LABEL_7;
  }
  fprintf(*v8, "%s\n", a4);
LABEL_6:
  fflush(*v8);
LABEL_7:
  if (!a5) {
    return 0;
  }
  sub_213C9C004(a1, 10, "prompter disabled");
  return 1;
}

krb5_error_code krb5_rd_cred(krb5_context a1, krb5_auth_context a2, krb5_data *a3, krb5_creds ***a4, krb5_replay_data *a5)
{
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v57 = 0u;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v56 = 0;
  krb5_data_zero(&v51);
  if (!a5 && (*(_DWORD *)a2 & 0xA) != 0) {
    return -1765328169;
  }
  *a4 = 0;
  krb5_error_code v11 = sub_213CBBB3C((uint64_t)a3->data, *(void *)&a3->magic, (uint64_t)&v57, (uint64_t)&v61);
  if (v11)
  {
    krb5_error_code addrport = v11;
    krb5_clear_error_message(a1);
    return addrport;
  }
  if (v57 != 5)
  {
    krb5_clear_error_message(a1);
    krb5_error_code addrport = -1765328345;
    goto LABEL_22;
  }
  if (DWORD1(v57) != 22)
  {
    krb5_clear_error_message(a1);
    krb5_error_code addrport = -1765328344;
    goto LABEL_22;
  }
  if (DWORD2(v58))
  {
    krb5_error_code addrport = krb5_crypto_init(a1, *((const krb5_keyblock **)a2 + 4), 0, &v50);
    if (addrport) {
      goto LABEL_22;
    }
    krb5_error_code addrport = krb5_decrypt_EncryptedData(a1, (uint64_t)v50, 14, (uint64_t)&v58 + 8, &v51);
    krb5_crypto_destroy(a1, (uint64_t)v50);
    if (addrport)
    {
      size_t v12 = (const krb5_keyblock *)*((void *)a2 + 6);
      if (!v12) {
        goto LABEL_22;
      }
      krb5_error_code addrport = krb5_crypto_init(a1, v12, 0, &v50);
      if (addrport) {
        goto LABEL_22;
      }
      krb5_error_code addrport = krb5_decrypt_EncryptedData(a1, (uint64_t)v50, 14, (uint64_t)&v58 + 8, &v51);
      krb5_crypto_destroy(a1, (uint64_t)v50);
      if (addrport) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v51 = *((void *)&v59 + 1);
    uint64_t v52 = v60;
  }
  krb5_error_code addrport = sub_213CBBB9C(v52, v51, (uint64_t)&v53, (uint64_t)&v61);
  if (v52 != v60) {
    krb5_data_free(&v51);
  }
  if (addrport)
  {
    krb5_set_error_message(a1, addrport, "Failed to decode encrypte credential part");
    goto LABEL_22;
  }
  if (*((void *)&v55 + 1))
  {
    uint64_t v17 = *((void *)a2 + 2);
    if (v17)
    {
      __int16 v18 = *((_WORD *)a2 + 13);
      if (v18)
      {
        v48[0] = 0;
        krb5_error_code addrport = krb5_make_addrport(a1, v48, v17, v18);
        if (addrport
          || (krb5_error_code addrport = sub_213CA6CF8(a1, (const krb5_address *)v48[0], *((const krb5_address **)&v55 + 1), "sender address is wrong in received creds"), krb5_free_address((uint64_t)a1, (uint64_t)v48[0]), free(v48[0]), addrport))
        {
LABEL_22:
          sub_213CBBBEC((uint64_t)&v53);
          sub_213CBBB8C((uint64_t)&v57);
          uint64_t v13 = *a4;
          if (*a4)
          {
            unint64_t v14 = *v13;
            if (*v13)
            {
              uint64_t v15 = 1;
              do
              {
                krb5_free_creds(a1, v14);
                uint64_t v13 = *a4;
                unint64_t v14 = (*a4)[v15++];
              }
              while (v14);
            }
            free(v13);
            *a4 = 0;
          }
          return addrport;
        }
      }
    }
  }
  if (v56)
  {
    uint64_t v19 = *((void *)a2 + 1);
    if (v19)
    {
      __int16 v20 = *((_WORD *)a2 + 12);
      if (v20 && v56->magic == 256)
      {
        v48[0] = 0;
        krb5_error_code addrport = krb5_make_addrport(a1, v48, v19, v20);
        if (!addrport)
        {
          krb5_error_code addrport = sub_213CA6CF8(a1, (const krb5_address *)v48[0], v56, "receiver address is wrong in received creds");
          krb5_free_address((uint64_t)a1, (uint64_t)v48[0]);
          free(v48[0]);
          if (!addrport) {
            goto LABEL_41;
          }
        }
        goto LABEL_22;
      }
      krb5_error_code addrport = sub_213CA6CF8(a1, *((const krb5_address **)a2 + 1), v56, "receiver address is wrong in received creds");
      if (addrport) {
        goto LABEL_22;
      }
    }
  }
LABEL_41:
  int v21 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    v48[0] = 0;
    krb5_timeofday(a1, (krb5_timestamp *)v48);
    if (!*((void *)&v54 + 1)
      || !(void)v55
      || krb5_time_abs(**((void **)&v54 + 1), (uint64_t)v48[0]) > *((void *)a1 + 10))
    {
      krb5_clear_error_message(a1);
      krb5_error_code addrport = -1765328347;
      goto LABEL_22;
    }
    int v21 = *(_DWORD *)a2;
  }
  if ((v21 & 0xA) != 0)
  {
    *(void *)&a5->timestamp = 0;
    *(void *)&a5->seq = 0;
    if (*((void *)&v54 + 1)) {
      *(void *)&a5->timestamp = **((void **)&v54 + 1);
    }
    if ((void)v55) {
      a5->seq = *(_DWORD *)v55;
    }
    if ((void)v54) {
      a5[1].timestamp = *(_DWORD *)v54;
    }
  }
  uint64_t v22 = (krb5_creds **)malloc_type_calloc((v53 + 1), 8uLL, 0x2004093837F09uLL);
  *a4 = v22;
  if (!v22)
  {
LABEL_80:
    krb5_error_code addrport = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_22;
  }
  if (v53)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *((void *)&v53 + 1);
      unsigned int v27 = malloc_type_calloc(1uLL, 0x90uLL, 0x10A0040AAA52FDDuLL);
      if (!v27) {
        goto LABEL_80;
      }
      uint64_t v28 = v27;
      size_t v29 = sub_213CBB36C(v58 + v24);
      v28[9] = v29;
      int v30 = malloc_type_malloc(v29, 0x40D7D8ACuLL);
      v28[10] = v30;
      if (!v30) {
        break;
      }
      krb5_error_code v31 = sub_213CBB34C((uint64_t)v30 + v28[9] - 1, v28[9], v58 + v24, (uint64_t)&v61);
      if (v31)
      {
        krb5_error_code addrport = v31;
        free((void *)v28[10]);
        v28[10] = 0;
        goto LABEL_86;
      }
      if (v28[9] != v61) {
        krb5_abortx(a1, "internal error in ASN.1 encoder");
      }
      copy_EncryptionKey();
      uint64_t v32 = v26 + v23;
      size_t v33 = *(const char ***)(v26 + v23 + 24);
      if (v33)
      {
        uint64_t v34 = *(long long **)(v32 + 32);
        if (v34)
        {
          uint64_t v35 = *v33;
          long long v36 = *v34;
          uint64_t v49 = *((void *)v34 + 2);
          *(_OWORD *)uint64_t v48 = v36;
          _krb5_principalname2krb5_principal((uint64_t)a1, v28, (uint64_t)v48, v35);
        }
      }
      uint64_t v37 = *(_DWORD **)(v32 + 40);
      if (v37) {
        *((_DWORD *)v28 + 34) = *v37;
      }
      int v38 = *(void **)(v26 + v23 + 48);
      if (v38) {
        v28[5] = *v38;
      }
      krb5_principal v39 = *(void **)(v26 + v23 + 56);
      if (v39) {
        v28[6] = *v39;
      }
      unint64_t v40 = *(void **)(v26 + v23 + 64);
      if (v40) {
        v28[7] = *v40;
      }
      uint64_t v41 = *(void **)(v26 + v23 + 72);
      if (v41) {
        v28[8] = *v41;
      }
      uint64_t v42 = v26 + v23;
      BOOL v43 = *(const char ***)(v26 + v23 + 80);
      if (v43)
      {
        uint64_t v44 = *(long long **)(v42 + 88);
        if (v44)
        {
          unsigned int v45 = *v43;
          long long v46 = *v44;
          uint64_t v49 = *((void *)v44 + 2);
          *(_OWORD *)uint64_t v48 = v46;
          _krb5_principalname2krb5_principal((uint64_t)a1, v28 + 1, (uint64_t)v48, v45);
        }
      }
      int v47 = *(krb5_address *const **)(v42 + 96);
      if (v47) {
        krb5_copy_addresses(a1, v47, (krb5_address ***)v28 + 15);
      }
      (*a4)[v25++] = (krb5_creds *)v28;
      v24 += 72;
      v23 += 104;
      if (v25 >= v53)
      {
        uint64_t v22 = *a4;
        goto LABEL_82;
      }
    }
    krb5_error_code addrport = 12;
LABEL_86:
    free(v28);
    goto LABEL_22;
  }
  unint64_t v25 = 0;
LABEL_82:
  v22[v25] = 0;
  sub_213CBBB8C((uint64_t)&v57);
  sub_213CBBBEC((uint64_t)&v53);
  return 0;
}

uint64_t sub_213CA6CF8(_krb5_context *a1, const krb5_address *a2, const krb5_address *a3, const char *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (krb5_address_compare(a1, a2, a3)) {
    return 0;
  }
  uint64_t v8 = 2529638950;
  uint64_t v10 = 0;
  krb5_print_address((uint64_t)a2, __str, 0x40uLL, &v10);
  krb5_print_address((uint64_t)a3, v11, 0x40uLL, &v10);
  krb5_set_error_message(a1, -1765328346, "%s: %s != %s", a4, v11, __str);
  return v8;
}

uint64_t krb5_rd_cred2(_krb5_context *a1, _krb5_auth_context *a2, _krb5_ccache *a3, krb5_data *a4)
{
  krb5_error_code v11 = 0;
  uint64_t result = krb5_rd_cred(a1, a2, a4, &v11, 0);
  if (!result)
  {
    char v7 = v11;
    if (v11)
    {
      uint64_t v8 = *v11;
      if (*v11)
      {
        BOOL v9 = v11 + 1;
        do
        {
          krb5_cc_store_cred(a1, a3, v8);
          krb5_free_creds(a1, *(v9 - 1));
          uint64_t v10 = *v9++;
          uint64_t v8 = v10;
        }
        while (v10);
      }
    }
    free(v7);
    return 0;
  }
  return result;
}

krb5_error_code krb5_rd_error(krb5_context a1, const krb5_data *a2, krb5_error **a3)
{
  uint64_t v7 = 0;
  krb5_error_code v5 = sub_213CBBBFC((uint64_t)a2->data, *(void *)&a2->magic, (uint64_t)a3, (uint64_t)&v7);
  if (v5) {
    krb5_clear_error_message(a1);
  }
  else {
    *((_DWORD *)a3 + 9) -= 1765328384;
  }
  return v5;
}

double krb5_free_error_contents(uint64_t a1, uint64_t a2)
{
  sub_213CBBC4C(a2);
  *(void *)(a2 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

void krb5_free_error(krb5_context a1, krb5_error *a2)
{
  sub_213CBBC4C((uint64_t)a2);
  a2[1].uint64_t client = 0;
  *(_OWORD *)&a2->e_data.data = 0u;
  *(_OWORD *)&a2[1].cusec = 0u;
  *(_OWORD *)&a2->int server = 0u;
  *(_OWORD *)&a2->text.data = 0u;
  *(_OWORD *)&a2->uint64_t magic = 0u;
  *(_OWORD *)&a2->suint64_t time = 0u;

  free(a2);
}

uint64_t krb5_error_from_rd_error(krb5_context a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int *)(a2 + 36);
  if (*(void *)(a2 + 88))
  {
    krb5_set_error_message(a1, v4, "Error from KDC: %s");
  }
  else
  {
    if (a3)
    {
      krb5_unparse_name_fixed(a1, *a3, (uint64_t)v8, 0x100uLL);
      krb5_unparse_name_fixed(a1, a3[1], (uint64_t)v7, 0x100uLL);
    }
    switch(v4)
    {
      case 0x96C73A01:
        krb5_set_error_message(a1, -1765328383, "Client %s%s%s expired");
        break;
      case 0x96C73A02:
        krb5_set_error_message(a1, -1765328382, "Server %s%s%s expired");
        break;
      case 0x96C73A06:
        krb5_set_error_message(a1, -1765328378, "Client %s%s%s unknown");
        break;
      case 0x96C73A07:
        krb5_set_error_message(a1, -1765328377, "Server %s%s%s unknown");
        break;
      default:
        krb5_clear_error_message(a1);
        break;
    }
  }
  return v4;
}

krb5_error_code krb5_rd_priv(krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  krb5_data_zero(a4);
  if ((*(unsigned char *)a2 & 0xA) == 0)
  {
LABEL_4:
    unint64_t v25 = 0;
    long long v23 = 0u;
    *(_OWORD *)uint64_t v24 = 0u;
    long long v22 = 0u;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    __int16 v18 = 0;
    uint64_t v19 = 0;
    memset(v26, 0, sizeof(v26));
    uint64_t v27 = 0;
    krb5_error_code v10 = sub_213CBBA7C((uint64_t)a3->data, *(void *)&a3->magic, (uint64_t)v26, (uint64_t)&v21);
    if (v10)
    {
      krb5_error_code v11 = v10;
      goto LABEL_6;
    }
    if (LODWORD(v26[0]) != 5)
    {
      krb5_clear_error_message(a1);
      krb5_error_code v11 = -1765328345;
      goto LABEL_29;
    }
    if (DWORD1(v26[0]) != 21)
    {
      krb5_clear_error_message(a1);
      krb5_error_code v11 = -1765328344;
      goto LABEL_29;
    }
    size_t v12 = (const krb5_keyblock *)*((void *)a2 + 6);
    if (!v12)
    {
      size_t v12 = (const krb5_keyblock *)*((void *)a2 + 5);
      if (!v12) {
        size_t v12 = (const krb5_keyblock *)*((void *)a2 + 4);
      }
    }
    krb5_error_code v11 = krb5_crypto_init(a1, v12, 0, &v18);
    if (v11) {
      goto LABEL_29;
    }
    krb5_error_code v11 = krb5_decrypt_EncryptedData(a1, (uint64_t)v18, 13, (uint64_t)v26 + 8, &v19);
    krb5_crypto_destroy(a1, (uint64_t)v18);
    if (v11) {
      goto LABEL_29;
    }
    krb5_error_code v11 = sub_213CBBADC(v20, v19, (uint64_t)&v22, (uint64_t)&v21);
    krb5_data_free(&v19);
    if (v11)
    {
LABEL_6:
      krb5_clear_error_message(a1);
LABEL_29:
      sub_213CBBACC((uint64_t)v26);
      return v11;
    }
    if (v24[1] && (uint64_t v13 = (const krb5_address *)*((void *)a2 + 2)) != 0 && !krb5_address_compare(a1, v13, v24[1])
      || v25 && (unint64_t v14 = (const krb5_address *)*((void *)a2 + 1)) != 0 && !krb5_address_compare(a1, v14, v25))
    {
      krb5_error_code v11 = -1765328346;
      krb5_clear_error_message(a1);
      goto LABEL_48;
    }
    if (*(_DWORD *)a2)
    {
      *(void *)uint64_t v17 = 0;
      krb5_timeofday(a1, v17);
      if (!(void)v23
        || !*((void *)&v23 + 1)
        || krb5_time_abs(*(void *)v23, *(uint64_t *)v17) > *((void *)a1 + 10))
      {
        krb5_clear_error_message(a1);
        krb5_error_code v11 = -1765328347;
        goto LABEL_48;
      }
      if ((*(_DWORD *)a2 & 4) == 0)
      {
LABEL_37:
        krb5_error_code v11 = krb5_data_copy(a4, *((const void **)&v22 + 1), v22);
        if (!v11)
        {
          if ((*(unsigned char *)a2 & 0xA) == 0) {
            goto LABEL_47;
          }
          if ((void)v23) {
            *(void *)&a5->timestamp = *(void *)v23;
          }
          if (*((void *)&v23 + 1)) {
            a5->seq = **((_DWORD **)&v23 + 1);
          }
          if (v24[0])
          {
            krb5_error_code v11 = 0;
            a5[1].timestamp = v24[0]->magic;
          }
          else
          {
LABEL_47:
            krb5_error_code v11 = 0;
          }
        }
        goto LABEL_48;
      }
    }
    else if ((*(_DWORD *)a2 & 4) == 0)
    {
      goto LABEL_37;
    }
    if (v24[0])
    {
      krb5_magic magic = v24[0]->magic;
      if (v24[0]->magic == *((_DWORD *)a2 + 15))
      {
LABEL_25:
        *((_DWORD *)a2 + 15) = magic + 1;
        goto LABEL_37;
      }
    }
    else
    {
      krb5_magic magic = *((_DWORD *)a2 + 15);
      if (!magic) {
        goto LABEL_25;
      }
    }
    krb5_clear_error_message(a1);
    krb5_error_code v11 = -1765328342;
LABEL_48:
    sub_213CBBB2C((uint64_t)&v22);
    goto LABEL_29;
  }
  if (a5)
  {
    *(void *)&a5->timestamp = 0;
    *(void *)&a5->seq = 0;
    goto LABEL_4;
  }
  krb5_clear_error_message(a1);
  return -1765328169;
}

uint64_t sub_213CA749C(_krb5_context *a1, uint64_t a2, const char *a3, long long *a4, void *a5)
{
  uint64_t v38 = 0;
  uint64_t v39 = a2;
  uint64_t v34 = 0;
  long long v36 = *a4;
  uint64_t v37 = &v39;
  uint64_t v8 = length_KDC_PROXY_MESSAGE((uint64_t)&v36);
  v35[0] = v8;
  uint64_t v9 = malloc_type_malloc(v8, 0x4BB3E7AEuLL);
  v35[1] = v9;
  if (!v9) {
    return 12;
  }
  krb5_error_code v10 = v9;
  uint64_t v11 = encode_KDC_PROXY_MESSAGE((uint64_t)v9 + v8 - 1, v8, (uint64_t)&v36, (uint64_t)&v34);
  if (!v11)
  {
    if (v8 != v34) {
      heim_abort("internal asn1. encoder error:msgdata.length == size", v12, v13, v14, v15, v16, v17, v18, v33);
    }
    memset(v52, 0, sizeof(v52));
    uint64_t v48 = 0;
    uint64_t v49 = &v48;
    uint64_t v50 = 0x2020000000;
    int v51 = 0;
    uint64_t v47 = 0;
    uint64_t v20 = (void *)MEMORY[0x216695790]();
    uint64_t v41 = 0;
    uint64_t v42 = &v41;
    uint64_t v43 = 0x3052000000;
    uint64_t v44 = sub_213CA787C;
    unsigned int v45 = sub_213CA788C;
    uint64_t v46 = 0;
    uint64_t v21 = (void *)[NSString stringWithUTF8String:a3];
    sub_213C9C004((uint64_t)a1, 5, "kkdcp request to url: %s", (const char *)[v21 UTF8String]);
    uint64_t v22 = [NSURL URLWithString:v21];
    if (v22)
    {
      uint64_t v23 = [objc_alloc(MEMORY[0x263EFF8F8]) initWithBytesNoCopy:v10 length:v8];
      uint64_t v24 = (void *)[MEMORY[0x263F089E0] requestWithURL:v22];
      [v24 setHTTPMethod:@"POST"];
      [v24 setHTTPBody:v23];
      [v24 addValue:@"application/octet-stream" forHTTPHeaderField:@"Content-Type"];
      [v24 addValue:@"Heimdal 1.5.1apple1" forHTTPHeaderField:@"X-Kerberos-Client"];
      _CFURLRequestSetAllowedProtocolTypes();
      unint64_t v25 = dispatch_semaphore_create(0);
      uint64_t v26 = objc_msgSend(MEMORY[0x263F08BF8], "sessionWithConfiguration:", objc_msgSend(MEMORY[0x263F08C00], "ephemeralSessionConfiguration"));
      v40[0] = MEMORY[0x263EF8330];
      v40[1] = 3221225472;
      void v40[2] = sub_213CA7898;
      v40[3] = &unk_2641E44C8;
      v40[6] = &v41;
      v40[7] = a1;
      v40[4] = v25;
      v40[5] = &v48;
      objc_msgSend((id)objc_msgSend(v26, "dataTaskWithRequest:completionHandler:", v24, v40), "resume");
      dispatch_semaphore_wait(v25, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v27 = [(id)v42[5] bytes];
      krb5_error_code v28 = decode_KDC_PROXY_MESSAGE(v27, [(id)v42[5] length], (uint64_t)v52, (uint64_t)&v47);
      *((_DWORD *)v49 + 6) = v28;
      if (v28)
      {
        krb5_set_error_message(a1, v28, "failed to decode KDC_PROXY_MESSAGE");
        int v29 = 0;
      }
      else
      {
        int v29 = 1;
      }
    }
    else
    {
      int v29 = 0;
      *((_DWORD *)v49 + 6) = 12;
    }
    _Block_object_dispose(&v41, 8);
    if (v29)
    {
      int v30 = krb5_data_copy(a5, (const void *)v52[1], v52[0]);
      *((_DWORD *)v49 + 6) = v30;
      sub_213CBBF70((uint64_t)v52);
      krb5_error_code v31 = *((_DWORD *)v49 + 6);
      if (!v31)
      {
        uint64_t v19 = 0;
        *((_DWORD *)v49 + 6) = 0;
LABEL_17:
        _Block_object_dispose(&v48, 8);
        krb5_data_free(v35);
        return v19;
      }
    }
    else
    {
      krb5_error_code v31 = *((_DWORD *)v49 + 6);
      if (!v31)
      {
        uint64_t v19 = 0;
        goto LABEL_17;
      }
    }
    sub_213C9C050((uint64_t *)a1, 10, v31, "kkdcp to url (%s) failed", a3);
    uint64_t v19 = *((unsigned int *)v49 + 6);
    goto LABEL_17;
  }
  uint64_t v19 = v11;
  free(v10);
  return v19;
}

void sub_213CA784C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_213CA787C(uint64_t a1, uint64_t a2)
{
}

void sub_213CA788C(uint64_t a1)
{
}

intptr_t sub_213CA7898(void *a1, void *a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    sub_213C9C004(a1[7], 5, "kkdcp response error: %s", (const char *)objc_msgSend((id)objc_msgSend(a4, "localizedDescription"), "UTF8String"));
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = -1980176635;
    sub_213C87A1C((_krb5_context *)a1[7], *(unsigned int *)(*(void *)(a1[5] + 8) + 24), (__CFError *)a4, "Failure during kkdcp stream", v7, v8, v9, v10, v13);
  }
  if (a2)
  {
    *(void *)(*(void *)(a1[6] + 8) + 40) = [a2 copy];
    sub_213C9C004(a1[7], 5, "kkdcp response received: %lu", [a2 length]);
  }
  uint64_t v11 = a1[4];

  return dispatch_semaphore_signal(v11);
}

krb5_error_code krb5_rd_rep(krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_ap_rep_enc_part **a4)
{
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  krb5_data_zero(&v26);
  krb5_error_code v13 = sub_213CBB95C((uint64_t)a3->data, *(void *)&a3->magic, (uint64_t)v29, (uint64_t)&v28);
  if (!v13)
  {
    if (LODWORD(v29[0]) != 5)
    {
      krb5_error_code v13 = -1765328345;
      krb5_clear_error_message(a1);
      goto LABEL_13;
    }
    if (DWORD1(v29[0]) != 15)
    {
      krb5_clear_error_message(a1);
      krb5_error_code v13 = -1765328344;
      goto LABEL_13;
    }
    if (*((void *)&v30 + 1) && *((void *)a2 + 13))
    {
      krb5_error_code v13 = sub_213CAEB24(a1, (uint64_t)a2, (uint64_t)v29, v8, v9, v10, v11, v12);
      if (v13) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_213CADD20(a1, (uint64_t)a2);
    }
    krb5_error_code v13 = krb5_crypto_init(a1, *((const krb5_keyblock **)a2 + 4), 0, &v25);
    if (v13) {
      goto LABEL_13;
    }
    krb5_error_code v13 = krb5_decrypt_EncryptedData(a1, (uint64_t)v25, 12, (uint64_t)v29 + 8, &v26);
    krb5_crypto_destroy(a1, (uint64_t)v25);
    if (v13) {
      goto LABEL_13;
    }
    uint64_t v15 = (krb5_ap_rep_enc_part *)malloc_type_malloc(0x20uLL, 0x103004059AAC8DEuLL);
    *a4 = v15;
    if (v15)
    {
      krb5_error_code v16 = sub_213CBB9BC(v27, v26, (uint64_t)v15, (uint64_t)&v28);
      if (v16)
      {
        krb5_error_code v13 = v16;
        krb5_set_error_message(a1, v16, "Failed to decode EncAPRepPart");
        return v13;
      }
      uint64_t v21 = *a4;
      if (*(unsigned char *)a2)
      {
        uint64_t v24 = *((void *)a2 + 8);
        if (*(void *)&v21->magic != *(void *)(v24 + 56) || v21->cusec != *(_DWORD *)(v24 + 48))
        {
          sub_213CBBA0C((uint64_t)*a4);
          free(v21);
          *a4 = 0;
          krb5_clear_error_message(a1);
          krb5_error_code v13 = -1765328338;
          goto LABEL_13;
        }
      }
      uint64_t v22 = *(int **)&v21->seq_number;
      if (v22)
      {
        krb5_auth_con_setremoteseqnumber((uint64_t)a1, (uint64_t)a2, *v22);
        uint64_t v21 = *a4;
      }
      subkey = v21->subkey;
      if (!subkey)
      {
LABEL_32:
        krb5_error_code v13 = 0;
        goto LABEL_13;
      }
      if (!*((void *)&v30 + 1) || !*((void *)a2 + 13))
      {
        sub_213C9C004((uint64_t)a1, 10, "krb5_rd_rep not using PFS", v25);
LABEL_31:
        krb5_auth_con_setremotesubkey(a1, (krb5_keyblock **)a2, (*a4)->subkey);
        goto LABEL_32;
      }
      krb5_error_code v13 = sub_213CADD9C(a1, (uint64_t)a2, "server key", subkey, v17, v18, v19, v20);
      if (!v13) {
        goto LABEL_31;
      }
    }
    else
    {
      krb5_error_code v13 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
LABEL_13:
    sub_213CADD20(a1, (uint64_t)a2);
    krb5_data_free(&v26);
    sub_213CBB9AC((uint64_t)v29);
  }
  return v13;
}

void krb5_free_ap_rep_enc_part(krb5_context a1, krb5_ap_rep_enc_part *a2)
{
  if (a2)
  {
    sub_213CBBA0C((uint64_t)a2);
    free(a2);
  }
}

uint64_t krb5_decode_ap_req(_krb5_context *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v7 = 0;
  uint64_t v5 = sub_213CBB8FC(a2[1], *a2, (uint64_t)a3, (uint64_t)&v7);
  if (!v5)
  {
    uint64_t v5 = 2529638951;
    if (*a3 == 5)
    {
      if (a3[1] == 14)
      {
        if (a3[4] == 5) {
          return 0;
        }
      }
      else
      {
        uint64_t v5 = 2529638952;
      }
    }
    sub_213CBB94C((uint64_t)a3);
    krb5_clear_error_message(a1);
  }
  return v5;
}

uint64_t krb5_decrypt_ticket(_krb5_context *a1, uint64_t a2, const krb5_keyblock *a3, uint64_t a4, char a5)
{
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  long long v30 = 0;
  *(void *)krb5_error_code v31 = 0;
  uint64_t v9 = krb5_crypto_init(a1, a3, 0, &v30);
  if (!v9)
  {
    uint64_t v9 = krb5_decrypt_EncryptedData(a1, (uint64_t)v30, 2, a2 + 40, &v32);
    krb5_crypto_destroy(a1, (uint64_t)v30);
    if (!v9)
    {
      uint64_t v10 = sub_213CBB3A0(v33, (uint64_t)v32, (uint64_t)&v21, (uint64_t)v31);
      if (v10)
      {
        uint64_t v9 = v10;
        krb5_set_error_message(a1, v10, "Failed to decode encrypted ticket part");
        krb5_data_free(&v32);
        return v9;
      }
      krb5_data_free(&v32);
      *(void *)krb5_error_code v31 = 0;
      uint64_t v11 = *((void *)&v26 + 1);
      krb5_timeofday(a1, v31);
      if ((void)v27) {
        uint64_t v11 = *(void *)v27;
      }
      uint64_t v12 = *((void *)a1 + 10);
      if (v11 - *(void *)v31 > v12 || (a5 & 1) == 0 && (v21 & 0x80) != 0)
      {
        sub_213CBB3C0((uint64_t)&v21);
        krb5_clear_error_message(a1);
        return 2529638945;
      }
      if (*(void *)v31 - *((void *)&v27 + 1) > v12)
      {
        sub_213CBB3C0((uint64_t)&v21);
        krb5_clear_error_message(a1);
        return 2529638944;
      }
      if ((v21 & 0x1000) != 0) {
        goto LABEL_26;
      }
      if (v25 == 1)
      {
        if (!*((void *)&v25 + 1)) {
          goto LABEL_26;
        }
        uint64_t v32 = 0;
        LODWORD(v30) = 0;
        uint64_t v9 = krb5_domain_x500_decode(a1, *((uint64_t *)&v25 + 1), (char *)v26, &v32, &v30, (const char *)v23, *(const char **)(a2 + 8));
        if (!v9)
        {
          uint64_t v9 = krb5_check_transited(a1, v23, *(void *)(a2 + 8), (uint64_t)v32, v30, 0, v14, v15);
          if (v30)
          {
            unint64_t v16 = 0;
            do
              free(v32[v16++]);
            while (v16 < v30);
          }
          free(v32);
          if (!v9) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        uint64_t v9 = 2529638929;
        if (!v25 && !*((void *)&v25 + 1))
        {
LABEL_26:
          if (a4)
          {
            uint64_t v9 = 0;
            *(void *)(a4 + 128) = v29;
            long long v17 = v28;
            *(_OWORD *)(a4 + 96) = v27;
            *(_OWORD *)(a4 + 112) = v17;
            long long v18 = v24;
            *(_OWORD *)(a4 + 32) = v23;
            *(_OWORD *)(a4 + 48) = v18;
            long long v19 = v26;
            *(_OWORD *)(a4 + 64) = v25;
            *(_OWORD *)(a4 + 80) = v19;
            long long v20 = v22;
            *(_OWORD *)a4 = v21;
            *(_OWORD *)(a4 + 16) = v20;
          }
          else
          {
            sub_213CBB3C0((uint64_t)&v21);
            return 0;
          }
          return v9;
        }
      }
      sub_213CBB3C0((uint64_t)&v21);
    }
  }
  return v9;
}

uint64_t krb5_verify_authenticator_checksum(_krb5_context *a1, _krb5_auth_context *a2, const void *a3, size_t a4)
{
  *(void *)&v13.krb5_magic magic = 0;
  v13.uint64_t client = 0;
  uint64_t v12 = 0;
  uint64_t v8 = krb5_auth_con_getauthenticator(a1, a2, (krb5_authenticator **)&v13);
  if (!v8)
  {
    if (*(void *)(*(void *)&v13.magic + 40))
    {
      uint64_t v10 = krb5_auth_con_getkey(a1, a2, (krb5_keyblock **)&v13.client);
      if (v10)
      {
        uint64_t v8 = v10;
        krb5_free_authenticator(a1, &v13);
      }
      else
      {
        uint64_t v8 = krb5_crypto_init(a1, (const krb5_keyblock *)v13.client, 0, &v12);
        if (!v8)
        {
          uint64_t v8 = krb5_verify_checksum(a1, (krb5_cksumtype)v12, (const krb5_checksum *)0xA, a3, a4, *(krb5_const_pointer *)(*(void *)&v13.magic + 40), v11);
          krb5_crypto_destroy(a1, (uint64_t)v12);
        }
        krb5_free_authenticator(a1, &v13);
        krb5_free_keyblock(a1, (krb5_keyblock *)v13.client);
      }
    }
    else
    {
      krb5_free_authenticator(a1, &v13);
      return 4294967279;
    }
  }
  return v8;
}

uint64_t krb5_verify_ap_req(_krb5_context *a1, krb5_auth_context *a2, uint64_t a3, int a4, const krb5_keyblock *a5, char a6, int *a7, void *a8)
{
  return krb5_verify_ap_req2(a1, a2, a3, a4, a5, a6, a7, a8, 0xBu);
}

uint64_t krb5_verify_ap_req2(krb5_context a1, krb5_auth_context *a2, uint64_t a3, int a4, const krb5_keyblock *a5, char a6, int *a7, void *a8, unsigned int a9)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  if (a8) {
    *a8 = 0;
  }
  krb5_auth_context v43 = 0;
  if (a2 && *a2)
  {
    krb5_auth_context v43 = *a2;
  }
  else
  {
    uint64_t v16 = krb5_auth_con_init(a1, &v43);
    if (v16) {
      return v16;
    }
  }
  long long v17 = (char *)malloc_type_calloc(1uLL, 0x98uLL, 0x10B0040764A81A9uLL);
  if (!v17)
  {
    krb5_clear_error_message(a1);
    sub_213CBBD0C((uint64_t)&v41);
    uint64_t v16 = 12;
    if (!a2)
    {
LABEL_25:
      krb5_auth_con_free(a1, v43);
      return v16;
    }
    goto LABEL_24;
  }
  long long v18 = v17;
  if ((*(unsigned char *)(a3 + 8) & 2) != 0 && (long long v19 = (const krb5_keyblock *)*((void *)v43 + 4)) != 0)
  {
    uint64_t v16 = krb5_decrypt_ticket(a1, a3 + 16, v19, (uint64_t)v17, a6);
    krb5_free_keyblock(a1, *((krb5_keyblock **)v43 + 4));
    *((void *)v43 + 4) = 0;
    if (v16) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v16 = krb5_decrypt_ticket(a1, a3 + 16, a5, (uint64_t)v17, a6);
    if (v16) {
      goto LABEL_21;
    }
  }
  long long v20 = *(const char **)(a3 + 24);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)(a3 + 32);
  uint64_t v40 = *(void *)(a3 + 48);
  uint64_t v16 = _krb5_principalname2krb5_principal((uint64_t)a1, (void *)v18 + 18, (uint64_t)v39, v20);
  if (!v16)
  {
    long long v21 = (const char *)*((void *)v18 + 4);
    *(_OWORD *)uint64_t v39 = *(_OWORD *)(v18 + 40);
    uint64_t v40 = *((void *)v18 + 7);
    uint64_t v16 = _krb5_principalname2krb5_principal((uint64_t)a1, (void *)v18 + 17, (uint64_t)v39, v21);
    if (!v16)
    {
      uint64_t v22 = *((void *)v43 + 8);
      memset(v39, 0, sizeof(v39));
      krb5_principal v44 = 0;
      krb5_principal v45 = 0;
      uint64_t v16 = krb5_crypto_init(a1, (const krb5_keyblock *)(v18 + 8), 0, (krb5_keyblock ***)&v44);
      if (!v16)
      {
        uint64_t v23 = krb5_decrypt_EncryptedData(a1, (uint64_t)v44, a9, a3 + 88, v39);
        uint64_t v16 = v23;
        if (a9 == 7 && v23) {
          uint64_t v16 = krb5_decrypt_EncryptedData(a1, (uint64_t)v44, 11, a3 + 88, v39);
        }
        krb5_crypto_destroy(a1, (uint64_t)v44);
        if (!v16)
        {
          uint64_t v16 = sub_213CBB458(*(uint64_t *)&v39[2], *(uint64_t *)v39, v22, (uint64_t)&v45);
          krb5_data_free(v39);
          if (!v16)
          {
            krb5_principal v44 = 0;
            krb5_principal v45 = 0;
            uint64_t v25 = *((void *)v43 + 8);
            long long v26 = *(const char **)(v25 + 8);
            *(_OWORD *)uint64_t v39 = *(_OWORD *)(v25 + 16);
            uint64_t v40 = *(void *)(v25 + 32);
            _krb5_principalname2krb5_principal((uint64_t)a1, &v45, (uint64_t)v39, v26);
            long long v27 = (const char *)*((void *)v18 + 4);
            *(_OWORD *)uint64_t v39 = *(_OWORD *)(v18 + 40);
            uint64_t v40 = *((void *)v18 + 7);
            _krb5_principalname2krb5_principal((uint64_t)a1, &v44, (uint64_t)v39, v27);
            krb5_BOOLean v28 = krb5_principal_compare(a1, v45, v44);
            krb5_free_principal(a1, v45);
            krb5_free_principal(a1, v44);
            if (!v28)
            {
              uint64_t v16 = 2529638948;
              krb5_clear_error_message(a1);
              goto LABEL_21;
            }
            uint64_t v29 = (krb5_address *const *)*((void *)v18 + 15);
            if (!v29 || (long long v30 = (const krb5_address *)*((void *)v43 + 2)) == 0 || krb5_address_search(a1, v30, v29))
            {
              *(void *)uint64_t v39 = 0;
              krb5_timeofday(a1, v39);
              if (krb5_time_abs(*(void *)(*((void *)v43 + 8) + 56), *(uint64_t *)v39) > *((void *)a1 + 10))
              {
                krb5_clear_error_message(a1);
                uint64_t v16 = 2529638949;
                goto LABEL_21;
              }
              krb5_auth_context v31 = v43;
              if (*((void *)v43 + 10))
              {
                uint64_t v16 = krb5_rc_store((uint64_t)a1, *((void *)v43 + 10));
                if (v16) {
                  goto LABEL_21;
                }
                krb5_auth_context v31 = v43;
              }
              uint64_t v32 = *((void *)v31 + 8);
              uint64_t v33 = *(int **)(v32 + 72);
              if (v33)
              {
                krb5_auth_con_setremoteseqnumber((uint64_t)a1, (uint64_t)v31, *v33);
                krb5_auth_context v31 = v43;
                uint64_t v32 = *((void *)v43 + 8);
              }
              uint64_t v34 = *(krb5_keyblock **)(v32 + 64);
              if (v34)
              {
                uint64_t v16 = krb5_auth_con_setremotesubkey(a1, (krb5_keyblock **)v31, v34);
                if (v16) {
                  goto LABEL_21;
                }
                krb5_auth_context v31 = v43;
              }
              uint64_t v16 = sub_213CA85C4(a1, (uint64_t)v31, (uint64_t)&v41);
              if (!v16)
              {
                *((_DWORD *)v43 + 22) = 0;
                if (v42 && v41)
                {
                  uint64_t v35 = 0;
                  while (krb5_enctype_valid(a1, (char *)*(unsigned int *)(v42 + 4 * v35)))
                  {
                    if (++v35 >= (unint64_t)v41) {
                      goto LABEL_51;
                    }
                  }
                  int v36 = *(_DWORD *)(v42 + 4 * v35);
                  *((_DWORD *)v43 + 22) = v36;
                  sub_213C9C004((uint64_t)a1, 10, "ap_req2: upgrading to enctype: %d", v36);
                }
LABEL_51:
                uint64_t v16 = krb5_copy_keyblock(a1, (const krb5_keyblock *)(v18 + 8), (krb5_keyblock **)v43 + 4);
                if (!v16)
                {
                  if (a7)
                  {
                    int v37 = 4 * (*((_DWORD *)v43 + 22) != 0);
                    *a7 = v37;
                    int v38 = *(_DWORD *)(a3 + 8);
                    if ((v38 & 2) != 0)
                    {
                      v37 |= 1u;
                      *a7 = v37;
                      int v38 = *(_DWORD *)(a3 + 8);
                    }
                    if ((v38 & 4) != 0) {
                      *a7 = v37 | 2;
                    }
                  }
                  if (a8) {
                    *a8 = v18;
                  }
                  else {
                    krb5_free_ticket(a1, (krb5_ticket *)v18);
                  }
                  if (a2)
                  {
                    if (!*a2) {
                      *a2 = v43;
                    }
                  }
                  else
                  {
                    krb5_auth_con_free(a1, v43);
                  }
                  sub_213CBBD0C((uint64_t)&v41);
                  return 0;
                }
              }
              goto LABEL_21;
            }
            krb5_clear_error_message(a1);
            uint64_t v16 = 2529638950;
          }
        }
      }
    }
  }
LABEL_21:
  sub_213CBBD0C((uint64_t)&v41);
  krb5_free_ticket(a1, (krb5_ticket *)v18);
  if (!a2) {
    goto LABEL_25;
  }
LABEL_24:
  if (!*a2) {
    goto LABEL_25;
  }
  return v16;
}

uint64_t sub_213CA85C4(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (_krb5_get_ad(a1, *(unsigned int **)(*(void *)(a2 + 64) + 80), 0, 129, &v7)) {
    return 0;
  }
  uint64_t v5 = sub_213CBBCBC(v8, v7, a3, 0);
  krb5_data_free(&v7);
  if (v5) {
    krb5_clear_error_message(a1);
  }
  return v5;
}

uint64_t krb5_rd_req_in_ctx_alloc(_krb5_context *a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040261BCE2DuLL);
  *a2 = v4;
  if (v4)
  {
    uint64_t v5 = 0;
    v4[4] = (*((_DWORD *)a1 + 90) >> 1) & 1;
  }
  else
  {
    uint64_t v5 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v5;
}

uint64_t krb5_rd_req_in_set_keytab(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = a3;
  return 0;
}

uint64_t krb5_rd_req_in_set_pac_check(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a2 + 16) = a3;
  return 0;
}

uint64_t krb5_rd_req_in_set_as_reply_key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 24) = a3;
  return 0;
}

uint64_t krb5_rd_req_in_set_keyblock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 8) = a3;
  return 0;
}

uint64_t krb5_rd_req_out_get_ap_req_options(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = *(_DWORD *)(a2 + 12);
  return 0;
}

uint64_t krb5_rd_req_out_get_ticket(_krb5_context *a1, uint64_t a2, krb5_ticket **a3)
{
  return krb5_copy_ticket(a1, *(const krb5_ticket **)(a2 + 16), a3);
}

uint64_t krb5_rd_req_out_get_keyblock(_krb5_context *a1, const krb5_keyblock **a2, krb5_keyblock **a3)
{
  return krb5_copy_keyblock(a1, *a2, a3);
}

uint64_t krb5_rd_req_out_get_flags(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

CFTypeRef krb5_rd_req_out_copy_pac(uint64_t a1, uint64_t a2)
{
  return heim_retain(*(CFTypeRef *)(a2 + 32));
}

uint64_t krb5_rd_req_out_get_server(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  return krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 24), a3);
}

void krb5_rd_req_in_ctx_free(int a1, void *a2)
{
}

void krb5_rd_req_out_ctx_free(krb5_context a1, krb5_keyblock **a2)
{
  uint64_t v4 = (krb5_ticket *)a2[2];
  if (v4) {
    krb5_free_ticket(a1, v4);
  }
  if (*a2) {
    krb5_free_keyblock(a1, *a2);
  }
  uint64_t v5 = (krb5_principal_data *)a2[3];
  if (v5) {
    krb5_free_principal(a1, v5);
  }
  uint64_t v6 = a2[4];
  if (v6) {
    krb5_pac_free((uint64_t)a1, v6);
  }

  free(a2);
}

krb5_error_code krb5_rd_req(krb5_context a1, krb5_auth_context *a2, const krb5_data *a3, krb5_const_principal a4, krb5_keytab a5, krb5_flags *a6, krb5_ticket **a7)
{
  long long v19 = 0;
  krb5_error_code v14 = krb5_rd_req_in_ctx_alloc(a1, &v19);
  if (!v14)
  {
    uint64_t v18 = 0;
    uint64_t v15 = v19;
    *long long v19 = a5;
    krb5_error_code v14 = krb5_rd_req_ctx(a1, a2, (uint64_t *)&a3->magic, a4, (uint64_t)v15, &v18);
    free(v15);
    if (!v14)
    {
      uint64_t v16 = v18;
      if (a6) {
        *a6 = *(_DWORD *)(v18 + 12);
      }
      if (a7) {
        krb5_error_code v14 = krb5_copy_ticket(a1, *(const krb5_ticket **)(v16 + 16), a7);
      }
      else {
        krb5_error_code v14 = 0;
      }
      krb5_rd_req_out_ctx_free(a1, (krb5_keyblock **)v16);
    }
  }
  return v14;
}

uint64_t krb5_rd_req_ctx(_krb5_context *a1, krb5_auth_context *a2, uint64_t *a3, const krb5_principal_data *a4, uint64_t a5, void *a6)
{
  krb5_principal v35 = 0;
  krb5_keytab keytab = 0;
  *a6 = 0;
  uint64_t v12 = (_DWORD **)malloc_type_calloc(1uLL, 0x28uLL, 0x10200404A1ECDA0uLL);
  if (!v12)
  {
    uint64_t v14 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v14;
  }
  krb5_authenticator v13 = v12;
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  if (!*a2)
  {
    uint64_t v14 = krb5_auth_con_init(a1, a2);
    if (v14) {
      goto LABEL_14;
    }
  }
  uint64_t v14 = krb5_decode_ap_req(a1, a3, &v37);
  if (v14) {
    goto LABEL_14;
  }
  *(_OWORD *)&entry.krb5_magic magic = v39;
  *(void *)&entry.timestamp = v40;
  uint64_t v14 = _krb5_principalname2krb5_principal((uint64_t)a1, v13 + 3, (uint64_t)&entry, *((const char **)&v38 + 1));
  if (v14) {
    goto LABEL_14;
  }
  if ((BYTE8(v37) & 2) != 0 && !*((void *)*a2 + 4))
  {
    uint64_t v14 = 2529638957;
    krb5_set_error_message(a1, -1765328339, "krb5_rd_req: user to user auth without session key given");
    goto LABEL_14;
  }
  if (a5)
  {
    uint64_t v15 = *(_krb5_kt **)a5;
    uint64_t v16 = (const krb5_keyblock *)*((void *)*a2 + 4);
    if (!v16)
    {
      uint64_t v16 = *(const krb5_keyblock **)(a5 + 8);
      if (!v16)
      {
        if (v15) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
LABEL_22:
    uint64_t v14 = krb5_copy_keyblock(a1, v16, (krb5_keyblock **)v13);
    if (v14) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  uint64_t v16 = (const krb5_keyblock *)*((void *)*a2 + 4);
  if (v16)
  {
    uint64_t v15 = 0;
    goto LABEL_22;
  }
LABEL_38:
  krb5_kt_default(a1, &keytab);
  uint64_t v15 = keytab;
  if (!keytab) {
    goto LABEL_46;
  }
LABEL_39:
  if (!a4)
  {
    *(_OWORD *)&entry.krb5_magic magic = v39;
    *(void *)&entry.timestamp = v40;
    uint64_t v14 = _krb5_principalname2krb5_principal((uint64_t)a1, &v35, (uint64_t)&entry, *((const char **)&v38 + 1));
    if (v14) {
      goto LABEL_14;
    }
    a4 = v35;
  }
  uint64_t v24 = sub_213CA8EE4(a1, (uint64_t)&v37, a4, v15, (krb5_keyblock **)v13);
  if (!v24)
  {
LABEL_23:
    if (*v13)
    {
      uint64_t v14 = krb5_verify_ap_req2(a1, a2, (uint64_t)&v37, v18, (const krb5_keyblock *)*v13, 0, (int *)v13 + 3, v13 + 2, 0xBu);
      if (!v14) {
        goto LABEL_25;
      }
      goto LABEL_14;
    }
    goto LABEL_44;
  }
  if (!v35)
  {
    uint64_t v14 = v24;
    if ((*((unsigned char *)a1 + 360) & 0x10) == 0) {
      goto LABEL_14;
    }
  }
  const krb5_address *v13 = 0;
LABEL_44:
  uint64_t v34 = 0;
  memset(&entry, 0, sizeof(entry));
  memset(cursor, 0, sizeof(cursor));
  if ((void)v41) {
    int v25 = *(_DWORD *)v41;
  }
  else {
    int v25 = 0;
  }
  uint64_t v14 = krb5_kt_start_seq_get(a1, v15, cursor);
  if (v14) {
    goto LABEL_14;
  }
  krb5_principal v31 = 0;
  uint64_t v14 = krb5_kt_next_entry(a1, v15, &entry, cursor);
  if (v14)
  {
LABEL_56:
    sub_213C95CC4(a1, v14, (uint64_t)v15, (uint64_t)v13[3], (char *)DWORD2(v40), v25);
LABEL_57:
    krb5_kt_end_seq_get(a1, v15, cursor);
    goto LABEL_14;
  }
  long long v30 = v13 + 2;
  while (1)
  {
    if (entry.timestamp != DWORD2(v40)) {
      goto LABEL_54;
    }
    int v27 = krb5_verify_ap_req2(a1, a2, (uint64_t)&v37, v26, (const krb5_keyblock *)&entry.timestamp, 0, (int *)v13 + 3, v30, 0xBu);
    if (!v27) {
      break;
    }
    if (v27 == -1765328221)
    {
      krb5_kt_end_seq_get(a1, v15, cursor);
      krb5_kt_free_entry(a1, (uint64_t)&entry);
      uint64_t v14 = 2529639075;
      goto LABEL_14;
    }
LABEL_54:
    krb5_kt_free_entry(a1, (uint64_t)&entry);
    krb5_principal v31 = 0;
    uint64_t v28 = krb5_kt_next_entry(a1, v15, &entry, cursor);
    if (v28)
    {
      uint64_t v14 = v28;
      goto LABEL_56;
    }
  }
  uint64_t v29 = krb5_copy_keyblock(a1, (const krb5_keyblock *)&entry.timestamp, (krb5_keyblock **)v13);
  if (v29 || (uint64_t v29 = krb5_copy_principal(a1, *(krb5_const_principal *)&entry.magic, &v31), v29))
  {
    uint64_t v14 = v29;
    krb5_kt_free_entry(a1, (uint64_t)&entry);
    goto LABEL_57;
  }
  krb5_free_principal(a1, *(krb5_principal *)(*v30 + 144));
  *(void *)(*v30 + 144) = v31;
  krb5_kt_free_entry(a1, (uint64_t)&entry);
  krb5_kt_end_seq_get(a1, v15, cursor);
LABEL_25:
  uint64_t v14 = sub_213CAE218(a1, (uint64_t)*a2);
  if (v14) {
    goto LABEL_14;
  }
  sub_213C9C004((uint64_t)a1, 15, "krb5_rd_req: used enctype %d from keytab", **v13);
  if (a5 && !*(_DWORD *)(a5 + 16)) {
    goto LABEL_46;
  }
  cursor[0] = 0;
  *(void *)&entry.krb5_magic magic = 0;
  entry.uint64_t principal = 0;
  if (krb5_ticket_get_authorization_data_type(a1, (uint64_t)v13[2], 128, &entry)) {
    goto LABEL_46;
  }
  uint64_t v14 = krb5_pac_parse(a1, entry.principal, *(size_t *)&entry.magic, cursor, v19, v20, v21, v22);
  krb5_data_free(&entry);
  if (v14)
  {
LABEL_14:
    krb5_rd_req_out_ctx_free(a1, (krb5_keyblock **)v13);
    goto LABEL_15;
  }
  if (!krb5_pac_verify(a1, (uint64_t)cursor[0], *((void *)v13[2] + 11), *((void *)v13[2] + 17), (const krb5_keyblock *)*v13, 0))
  {
    *((_DWORD *)v13 + 2) |= 1u;
    v13[4] = heim_retain(cursor[0]);
  }
  if ((_BYTE)v13[1])
  {
    uint64_t v23 = *(const krb5_keyblock **)(a5 + 24);
    if (v23)
    {
      if (!krb5_pac_process_credentials_buffer(a1, (void *)cursor[0], v23)) {
        *((_DWORD *)v13 + 2) |= 2u;
      }
    }
  }
  krb5_pac_free((uint64_t)a1, cursor[0]);
LABEL_46:
  uint64_t v14 = 0;
  *a6 = v13;
LABEL_15:
  sub_213CBB94C((uint64_t)&v37);
  if (v35) {
    krb5_free_principal(a1, v35);
  }
  if (keytab) {
    krb5_kt_close(a1, keytab);
  }
  return v14;
}

uint64_t krb5_rd_req_with_keyblock(_krb5_context *a1, krb5_auth_context *a2, uint64_t *a3, const krb5_principal_data *a4, uint64_t a5, _DWORD *a6, krb5_ticket **a7)
{
  uint64_t v19 = 0;
  uint64_t v14 = krb5_rd_req_in_ctx_alloc(a1, &v19);
  if (!v14)
  {
    uint64_t v18 = 0;
    uint64_t v15 = v19;
    v19[1] = a5;
    uint64_t v14 = krb5_rd_req_ctx(a1, a2, a3, a4, (uint64_t)v15, &v18);
    free(v15);
    if (!v14)
    {
      uint64_t v16 = v18;
      if (a6) {
        *a6 = *(_DWORD *)(v18 + 12);
      }
      if (a7) {
        uint64_t v14 = krb5_copy_ticket(a1, *(const krb5_ticket **)(v16 + 16), a7);
      }
      else {
        uint64_t v14 = 0;
      }
      krb5_rd_req_out_ctx_free(a1, (krb5_keyblock **)v16);
    }
  }
  return v14;
}

uint64_t sub_213CA8EE4(krb5_context context, uint64_t a2, const krb5_principal_data *a3, krb5_keytab keytab, krb5_keyblock **a5)
{
  uint64_t v13 = 0;
  memset(&v12, 0, sizeof(v12));
  uint64_t v8 = *(krb5_kvno **)(a2 + 64);
  if (v8) {
    krb5_kvno v9 = *v8;
  }
  else {
    krb5_kvno v9 = 0;
  }
  uint64_t entry = krb5_kt_get_entry(context, keytab, a3, v9, *(_DWORD *)(a2 + 56), &v12);
  if (!entry)
  {
    uint64_t entry = krb5_copy_keyblock(context, (const krb5_keyblock *)&v12.timestamp, a5);
    krb5_kt_free_entry(context, (uint64_t)&v12);
  }
  return entry;
}

krb5_error_code krb5_rd_safe(krb5_context a1, krb5_auth_context a2, const krb5_data *a3, krb5_data *a4, krb5_replay_data *a5)
{
  krb5_data_zero(a4);
  if ((*(unsigned char *)a2 & 0xA) != 0)
  {
    if (!a5)
    {
      krb5_error_code v10 = -1765328169;
      krb5_set_error_message(a1, -1765328169, "rd_safe: need outdata to return data");
      return v10;
    }
    *(void *)&a5->timestamp = 0;
    *(void *)&a5->seq = 0;
  }
  uint64_t v25 = 0;
  *(_OWORD *)uint64_t v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)__src = 0u;
  long long v22 = 0u;
  *(_OWORD *)size_t size = 0u;
  uint64_t v19 = 0;
  krb5_error_code v10 = sub_213CBBA1C((uint64_t)a3->data, *(void *)&a3->magic, (uint64_t)size, (uint64_t)&v19);
  if (!v10)
  {
    if (LODWORD(size[0]) == 5)
    {
      if (HIDWORD(size[0]) == 20)
      {
        if (krb5_checksum_is_keyed((uint64_t)a1, v24)
          && krb5_checksum_is_collision_proof((uint64_t)a1, v24))
        {
          if (v23[0]
            && (size_t v11 = (const krb5_address *)*((void *)a2 + 2)) != 0
            && !krb5_address_compare(a1, v11, v23[0])
            || v23[1]
            && (krb5_keytab_entry v12 = (const krb5_address *)*((void *)a2 + 1)) != 0
            && !krb5_address_compare(a1, v12, v23[1]))
          {
            krb5_error_code v10 = -1765328346;
            krb5_clear_error_message(a1);
            goto LABEL_24;
          }
          if (*(_DWORD *)a2)
          {
            uint64_t v18 = 0;
            krb5_timeofday(a1, (krb5_timestamp *)&v18);
            if (!__src[1] || !(void)v22 || krb5_time_abs(*(void *)__src[1], v18) > *((void *)a1 + 10))
            {
              krb5_clear_error_message(a1);
              krb5_error_code v10 = -1765328347;
              goto LABEL_24;
            }
            if ((*(_DWORD *)a2 & 4) == 0)
            {
LABEL_32:
              krb5_error_code v10 = sub_213CA9274(a1, a2, (uint64_t)size);
              if (!v10)
              {
                size_t v15 = size[1];
                *(void *)&a4->krb5_magic magic = size[1];
                uint64_t v16 = (char *)malloc_type_malloc(v15, 0x8D09A6EuLL);
                a4->data = v16;
                size_t v17 = *(void *)&a4->magic;
                if (v16 || !v17)
                {
                  memcpy(v16, __src[0], v17);
                  if ((*(unsigned char *)a2 & 0xA) == 0) {
                    goto LABEL_45;
                  }
                  if (__src[1]) {
                    *(void *)&a5->timestamp = *(void *)__src[1];
                  }
                  if ((void)v22) {
                    a5->seq = *(_DWORD *)v22;
                  }
                  if (*((void *)&v22 + 1))
                  {
                    krb5_error_code v10 = 0;
                    a5[1].timestamp = **((_DWORD **)&v22 + 1);
                  }
                  else
                  {
LABEL_45:
                    krb5_error_code v10 = 0;
                  }
                }
                else
                {
                  krb5_error_code v10 = 12;
                  krb5_set_error_message(a1, 12, "malloc: out of memory");
                  krb5_data_zero(a4);
                }
              }
              goto LABEL_24;
            }
          }
          else if ((*(_DWORD *)a2 & 4) == 0)
          {
            goto LABEL_32;
          }
          if (*((void *)&v22 + 1))
          {
            int v13 = **((_DWORD **)&v22 + 1);
            if (**((_DWORD **)&v22 + 1) == *((_DWORD *)a2 + 15))
            {
LABEL_19:
              *((_DWORD *)a2 + 15) = v13 + 1;
              goto LABEL_32;
            }
          }
          else
          {
            int v13 = *((_DWORD *)a2 + 15);
            if (!v13) {
              goto LABEL_19;
            }
          }
          krb5_clear_error_message(a1);
          krb5_error_code v10 = -1765328342;
        }
        else
        {
          krb5_clear_error_message(a1);
          krb5_error_code v10 = -1765328334;
        }
      }
      else
      {
        krb5_clear_error_message(a1);
        krb5_error_code v10 = -1765328344;
      }
    }
    else
    {
      krb5_clear_error_message(a1);
      krb5_error_code v10 = -1765328345;
    }
LABEL_24:
    sub_213CBBA6C((uint64_t)size);
  }
  return v10;
}

uint64_t sub_213CA9274(_krb5_context *a1, void *a2, uint64_t a3)
{
  long long seed = *(_OWORD *)(a3 + 64);
  uint64_t v17 = *(void *)(a3 + 80);
  in_CFIndex length = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  uint64_t v6 = sub_213CBBA5C(a3);
  uint64_t v7 = (char *)malloc_type_malloc(v6, 0x833A7A7EuLL);
  if (!v7) {
    return 12;
  }
  uint64_t v8 = v7;
  *(void *)ctype = 0;
  krb5_kvno v9 = &v7[v6];
  uint64_t v10 = sub_213CBBA3C((uint64_t)&v7[v6 - 1], v6, a3, (uint64_t)&in_length);
  if (!v10)
  {
    if (v6 != in_length) {
      krb5_abortx(a1, "internal error in ASN.1 encoder");
    }
    size_t v11 = (const krb5_keyblock *)a2[6];
    if (!v11)
    {
      size_t v11 = (const krb5_keyblock *)a2[5];
      if (!v11) {
        size_t v11 = (const krb5_keyblock *)a2[4];
      }
    }
    uint64_t v12 = a3 + 64;
    uint64_t v10 = krb5_crypto_init(a1, v11, 0, (krb5_keyblock ***)ctype);
    if (!v10)
    {
      uint64_t v10 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xF, &v9[-in_length], in_length, &seed, v13);
      krb5_crypto_destroy(a1, *(uint64_t *)ctype);
    }
    *(_OWORD *)uint64_t v12 = seed;
    *(void *)(v12 + 16) = v17;
  }
  free(v8);
  return v10;
}

uint64_t krb5_read_message(_krb5_context *a1, int *a2, uint64_t a3)
{
  krb5_data_zero((void *)a3);
  ssize_t v6 = krb5_net_read((int)a1, a2, (char *)&v11, 4uLL);
  if (v6 == -1)
  {
    uint64_t v7 = *__error();
    goto LABEL_12;
  }
  if (v6 > 3)
  {
    if (v11 >> 4)
    {
      uint64_t v7 = 34;
      krb5_set_error_message(a1, 34, "packet to large");
      return v7;
    }
    size_t v8 = _byteswap_ulong(v11);
    uint64_t v9 = krb5_data_alloc((size_t *)a3, v8);
    if (v9)
    {
      uint64_t v7 = v9;
    }
    else
    {
      if (krb5_net_read((int)a1, a2, *(char **)(a3 + 8), v8) == v8) {
        return 0;
      }
      uint64_t v7 = *__error();
      krb5_data_free((void *)a3);
    }
LABEL_12:
    krb5_clear_error_message(a1);
    return v7;
  }
  krb5_clear_error_message(a1);
  return 2314790661;
}

uint64_t krb5_read_priv_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  *(void *)&v9.krb5_magic magic = 0;
  v9.data = 0;
  uint64_t message = krb5_read_message(a1, a3, (uint64_t)&v9);
  if (!message)
  {
    uint64_t message = krb5_rd_priv(a1, a2, &v9, a4, 0);
    krb5_data_free(&v9);
  }
  return message;
}

uint64_t krb5_read_safe_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  *(void *)&v9.krb5_magic magic = 0;
  v9.data = 0;
  uint64_t message = krb5_read_message(a1, a3, (uint64_t)&v9);
  if (!message)
  {
    uint64_t message = krb5_rd_safe(a1, a2, &v9, a4, 0);
    krb5_data_free(&v9);
  }
  return message;
}

krb5_error_code krb5_recvauth(krb5_context a1, krb5_auth_context *a2, krb5_pointer a3, char *a4, krb5_principal a5, krb5_int32 a6, krb5_keytab a7, krb5_ticket **a8)
{
  return krb5_recvauth_match_version(a1, a2, (int *)a3, (unsigned int (*)(uint64_t, char *))sub_213CA9AB0, (uint64_t)a4, a5, a6, a7, a8);
}

uint64_t krb5_recvauth_match_version(krb5_context a1, krb5_auth_context *a2, int *a3, unsigned int (*a4)(uint64_t, char *), uint64_t a5, const krb5_principal_data *a6, char a7, _krb5_kt *a8, krb5_ticket **a9)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v17 = *a2;
  if (!v17)
  {
    uint64_t v18 = krb5_auth_con_init(a1, a2);
    if (v18) {
      return v18;
    }
    uint64_t v17 = *a2;
  }
  uint64_t v18 = krb5_auth_con_setaddrs_from_fd(a1, v17, a3);
  if (!v18)
  {
    unsigned int v42 = 0;
    char __buf = 0;
    *(void *)&v40.krb5_magic magic = 0;
    v40.data = 0;
    krb5_flags v39 = 0;
    if ((a7 & 1) == 0)
    {
      ssize_t v19 = krb5_net_read((int)a1, a3, (char *)&v42, 4uLL);
      if (v19 < 0) {
        goto LABEL_16;
      }
      if (!v19)
      {
        uint64_t v18 = 2529639116;
        krb5_set_error_message(a1, -1765328180, "Failed to receive sendauth data");
        return v18;
      }
      unsigned int v20 = v42;
      unsigned int v42 = bswap32(v42);
      if (v20 != 318767104
        || (ssize_t v21 = krb5_net_read((int)a1, a3, v43, 0x13uLL), v21 != v42)
        || strncmp("KRB5_SENDAUTH_V1.0", v43, v21))
      {
        uint64_t v18 = 2529639116;
        char __buf = 1;
        krb5_net_write((int)a1, a3, &__buf, 1uLL);
        krb5_clear_error_message(a1);
        return v18;
      }
    }
    ssize_t v22 = krb5_net_read((int)a1, a3, (char *)&v42, 4uLL);
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (!v22)
      {
        krb5_clear_error_message(a1);
        return 2529639117;
      }
      size_t v23 = bswap32(v42);
      unsigned int v42 = v23;
      if (v23 >> 28)
      {
        uint64_t v18 = 34;
        krb5_set_error_message(a1, 34, "packet to large");
        return v18;
      }
      uint64_t v28 = (char *)malloc_type_malloc(v23, 0x2F7A00CAuLL);
      if (!v28)
      {
        char __buf = 2;
        krb5_net_write((int)a1, a3, &__buf, 1uLL);
        uint64_t v25 = "malloc: out of memory";
        uint64_t v18 = 12;
        int v26 = a1;
        krb5_error_code v27 = 12;
        goto LABEL_28;
      }
      uint64_t v29 = v28;
      ssize_t v30 = krb5_net_read((int)a1, a3, v28, v42);
      if (v30 != v42 || !a4(a5, v29))
      {
        char __buf = 2;
        krb5_net_write((int)a1, a3, &__buf, 1uLL);
        uint64_t v18 = 2529639117;
        krb5_set_error_message(a1, -1765328179, "wrong sendauth version (%s)", v29);
        free(v29);
        return v18;
      }
      free(v29);
      char __buf = 0;
      if (krb5_net_write((int)a1, a3, &__buf, 1uLL) != 1)
      {
        uint64_t v33 = __error();
        uint64_t v18 = *v33;
        long long v37 = strerror(*v33);
        uint64_t v25 = "write: %s";
        goto LABEL_17;
      }
      krb5_data_zero(&v40);
      uint64_t message = krb5_read_message(a1, a3, (uint64_t)&v40);
      if (message)
      {
        uint64_t v18 = message;
        uint64_t v25 = "krb5_recvauth: client closed connection";
        goto LABEL_17;
      }
      uint64_t v18 = krb5_rd_req(a1, a2, &v40, a6, a8, &v39, a9);
      krb5_data_free(&v40);
      if (v18)
      {
        v38[0] = 0;
        v38[1] = 0;
        if (krb5_mk_error(a1, (const krb5_error *)v18, 0)) {
          return v18;
        }
        krb5_write_message(a1, a3, v38);
        uint64_t v34 = (krb5_data *)v38;
LABEL_34:
        krb5_data_free(v34);
        return v18;
      }
      unsigned int v42 = 0;
      if (krb5_net_write((int)a1, a3, (char *)&v42, 4uLL) == 4)
      {
        if ((v39 & 2) == 0) {
          return 0;
        }
        uint64_t v36 = krb5_mk_rep(a1, *a2, &v40);
        if (v36)
        {
          uint64_t v18 = v36;
        }
        else
        {
          uint64_t v18 = krb5_write_message(a1, a3, (char **)&v40);
          if (!v18)
          {
            uint64_t v34 = &v40;
            goto LABEL_34;
          }
          krb5_set_error_message(a1, v18, "krb5_recvauth: server closed connection");
        }
      }
      else
      {
        krb5_principal v35 = __error();
        uint64_t v18 = *v35;
        strerror(*v35);
        krb5_set_error_message(a1, v18, "write: %s");
      }
      krb5_free_ticket(a1, *a9);
      *a9 = 0;
      return v18;
    }
LABEL_16:
    long long v24 = __error();
    uint64_t v18 = *v24;
    long long v37 = strerror(*v24);
    uint64_t v25 = "read: %s";
LABEL_17:
    int v26 = a1;
    krb5_error_code v27 = v18;
LABEL_28:
    krb5_set_error_message(v26, v27, v25, v37);
  }
  return v18;
}

BOOL sub_213CA9AB0(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t krb5_rc_resolve(_krb5_context *a1, void *a2, char *__s1, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2[1]) {
    krb5_abort(a1, 22, "called krb5_rc_resolve more then once", a4, a5, a6, a7, a8, v13);
  }
  a2[1] = strdup(__s1);
  unsigned int v11 = *(uint64_t (**)(_krb5_context *, char *, void *))(*a2 + 16);

  return v11(a1, __s1, a2);
}

uint64_t krb5_rc_resolve_type(_krb5_context *a1, void *a2, const char *a3)
{
  uint64_t v6 = 0;
  *a2 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v8 = i;
    krb5_data v9 = (const char **)&(&off_26AA95150)[9 * v6];
    size_t v10 = strlen(*v9);
    if (!strncmp(a3, *v9, v10) && (!a3[v10] || a3[v10] == 58)) {
      break;
    }
    uint64_t v6 = 1;
    if ((v8 & 1) == 0)
    {
      uint64_t v11 = 2529639073;
      krb5_set_error_message(a1, -1765328223, "replay cache type %s not supported", a3);
      return v11;
    }
  }
  uint64_t v12 = malloc_type_calloc(1uLL, (size_t)((&off_26AA95150)[9 * v6 + 1] + 16), 0xB0D57357uLL);
  *a2 = v12;
  if (v12)
  {
    uint64_t v11 = 0;
    void *v12 = v9;
    return v11;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_rc_resolve_full(_krb5_context *a1, const char ****a2, const char *a3)
{
  *a2 = 0;
  uint64_t v6 = krb5_rc_resolve_type(a1, a2, a3);
  if (!v6)
  {
    uint64_t v12 = &a3[strlen(***a2)];
    if (*v12 == 58)
    {
      uint64_t v6 = krb5_rc_resolve(a1, *a2, (char *)v12 + 1, v7, v8, v9, v10, v11);
      if (v6)
      {
        krb5_rc_close((uint64_t)a1, *a2);
        *a2 = 0;
      }
    }
    else
    {
      uint64_t v6 = 2529639073;
      krb5_set_error_message(a1, -1765328223, "replay have bad name: %s", a3);
    }
  }
  return v6;
}

uint64_t krb5_rc_close(uint64_t a1, void *a2)
{
  (*(void (**)(void))(*a2 + 64))();
  uint64_t v3 = (void *)a2[1];
  if (v3) {
    free(v3);
  }
  free(a2);
  return 0;
}

const char *krb5_rc_default_name()
{
  return "MEMORY:";
}

const char *krb5_rc_default_type()
{
  return "MEMORY";
}

uint64_t krb5_rc_default(_krb5_context *a1, const char ****a2)
{
  return krb5_rc_resolve_full(a1, a2, "MEMORY:");
}

uint64_t krb5_rc_initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a1, a3, a2);
}

uint64_t krb5_rc_recover()
{
  return 0;
}

uint64_t krb5_rc_destroy(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*a2 + 56))();
  if (!v4) {
    krb5_rc_close(a1, a2);
  }
  return v4;
}

uint64_t krb5_rc_store(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 40))();
}

uint64_t krb5_rc_expunge(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 48))();
}

uint64_t krb5_rc_get_lifespan(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 32))();
}

uint64_t krb5_rc_get_name(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

uint64_t krb5_rc_get_type(uint64_t a1, uint64_t a2)
{
  return **(void **)a2;
}

krb5_error_code krb5_get_server_rcache(krb5_context a1, const krb5_data *a2, krb5_rcache *a3)
{
  return krb5_rc_resolve_full(a1, (const char ****)a3, "MEMORY:");
}

uint64_t sub_213CA9E68()
{
  return 0;
}

uint64_t sub_213CA9E70(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = fopen(*(const char **)(a3 + 8), "w");
  long long v14 = 0u;
  long long v13 = 0u;
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t __ptr = a2;
    fwrite(&__ptr, 1uLL, 0x28uLL, v6);
    fclose(v7);
    return 0;
  }
  else
  {
    uint64_t v9 = __error();
    uint64_t v8 = *v9;
    strerror_r(*v9, __strerrbuf, 0x80uLL);
    krb5_set_error_message(a1, v8, "open(%s): %s", *(const char **)(a3 + 8), __strerrbuf);
  }
  return v8;
}

uint64_t sub_213CA9F68(_krb5_context *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v5 = fopen(*(const char **)(a2 + 8), "r");
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  size_t v6 = fread(v8, 0x28uLL, 1uLL, v5);
  fclose(v5);
  if (v6)
  {
    uint64_t result = 0;
    *a3 = *(void *)&v8[0];
  }
  else
  {
    krb5_clear_error_message(a1);
    return 2529639083;
  }
  return result;
}

uint64_t sub_213CAA02C(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  long long v28 = 0u;
  long long v27 = 0u;
  time_t v26 = time(0);
  sub_213CAA6A8(a3, (uint64_t)&v27);
  size_t v6 = fopen(*(const char **)(a2 + 8), "r");
  if (!v6)
  {
    uint64_t v16 = __error();
    uint64_t v14 = *v16;
    strerror_r(*v16, __strerrbuf, 0x80uLL);
    uint64_t v21 = *(void *)(a2 + 8);
    uint64_t v15 = "open(%s): %s";
    goto LABEL_19;
  }
  uint64_t v7 = v6;
  uint64_t v25 = 0;
  long long __ptr = 0u;
  long long v24 = 0u;
  rk_cloexec_file(v6);
  fread(&__ptr, 0x28uLL, 1uLL, v7);
  time_t v8 = v26;
  uint64_t v9 = __ptr;
  if (!fread(&__ptr, 0x28uLL, 1uLL, v7))
  {
LABEL_16:
    if (!ferror(v7))
    {
      fclose(v7);
      uint64_t v18 = fopen(*(const char **)(a2 + 8), "a");
      if (v18)
      {
        ssize_t v19 = v18;
        fwrite(&v26, 1uLL, 0x28uLL, v18);
        fclose(v19);
        return 0;
      }
      else
      {
        uint64_t v14 = 2529639083;
        unsigned int v20 = __error();
        strerror_r(*v20, __strerrbuf, 0x80uLL);
        krb5_set_error_message(a1, -1765328213, "open(%s): %s");
      }
      return v14;
    }
    uint64_t v14 = *__error();
    fclose(v7);
    strerror_r(v14, __strerrbuf, 0x80uLL);
    uint64_t v21 = *(void *)(a2 + 8);
    uint64_t v15 = "%s: %s";
LABEL_19:
    krb5_set_error_message(a1, v14, v15, v21, __strerrbuf);
    return v14;
  }
  uint64_t v10 = v8 - v9;
  while (1)
  {
    if ((uint64_t)__ptr >= v10)
    {
      BOOL v11 = *((void *)&__ptr + 1) == (void)v27 && (void)v24 == *((void *)&v27 + 1);
      BOOL v12 = v11 && *((void *)&v24 + 1) == (void)v28;
      if (v12 && v25 == *((void *)&v28 + 1)) {
        break;
      }
    }
    if (!fread(&__ptr, 0x28uLL, 1uLL, v7)) {
      goto LABEL_16;
    }
  }
  fclose(v7);
  krb5_clear_error_message(a1);
  return 2529639075;
}

uint64_t sub_213CAA290()
{
  return 0;
}

uint64_t sub_213CAA298(_krb5_context *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if ((remove(*(const std::__fs::filesystem::path **)(a2 + 8), (std::error_code *)a2) & 0x80000000) == 0) {
    return 0;
  }
  uint64_t v5 = __error();
  uint64_t v4 = *v5;
  strerror_r(*v5, __strerrbuf, 0x80uLL);
  krb5_set_error_message(a1, v4, "remove(%s): %s", *(const char **)(a2 + 8), __strerrbuf);
  return v4;
}

uint64_t sub_213CAA34C()
{
  return 0;
}

uint64_t sub_213CAA354(uint64_t a1, uint64_t a2)
{
  if (qword_2677FE440 != a2) {
    qword_2677FE440 = a2;
  }
  pthread_mutex_unlock(&stru_2677FE458);
  return 0;
}

uint64_t sub_213CAA3A8(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = qword_2677FE440;
  pthread_mutex_unlock(&stru_2677FE458);
  return 0;
}

uint64_t sub_213CAA3F8(_krb5_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = malloc_type_malloc(0x38uLL, 0x10A0040E90C3259uLL);
  if (v5)
  {
    size_t v6 = v5;
    *uint64_t v5 = *(void *)(a3 + 56);
    uint64_t v7 = v5 + 1;
    sub_213CAA6A8(a3, (uint64_t)(v5 + 1));
    time_t v8 = time(0);
    uint64_t v9 = qword_2677FE440;
    pthread_mutex_lock(&stru_2677FE458);
    uint64_t v10 = off_2677FE448;
    if (off_2677FE448)
    {
      uint64_t v11 = *(void *)(a3 + 56);
      do
      {
        BOOL v12 = (void *)v10[5];
        if (*v10 == v11)
        {
          BOOL v13 = v10[1] == *v7 && v10[2] == v7[1];
          BOOL v14 = v13 && v10[3] == v7[2];
          if (v14 && v10[4] == v7[3])
          {
            uint64_t v20 = 2529639075;
            pthread_mutex_unlock(&stru_2677FE458);
            krb5_set_error_message(a1, -1765328221, "replay detected");
            free(v6);
            return v20;
          }
        }
        if (*v10 < v8 - v9)
        {
          uint64_t v16 = (void *)v10[6];
          if (v12)
          {
            void v12[6] = v16;
            uint64_t v16 = (void *)v10[6];
          }
          else
          {
            qword_2677FE450 = v10[6];
          }
          void *v16 = v12;
        }
        uint64_t v10 = v12;
      }
      while (v12);
      uint64_t v17 = off_2677FE448;
      void v6[5] = off_2677FE448;
      uint64_t v18 = (uint64_t)(v6 + 5);
      if (!v17) {
        goto LABEL_27;
      }
      v17[6] = v18;
    }
    else
    {
      void v6[5] = 0;
      uint64_t v18 = (uint64_t)(v6 + 5);
LABEL_27:
      qword_2677FE450 = v18;
    }
    v6[6] = &off_2677FE448;
    off_2677FE448 = v6;
    pthread_mutex_unlock(&stru_2677FE458);
    return 0;
  }
  else
  {
    return krb5_enomem(a1);
  }
}

uint64_t sub_213CAA5A8()
{
  pthread_mutex_lock(&stru_2677FE458);
  time_t v0 = time(0);
  uint64_t v1 = (time_t *)off_2677FE448;
  if (off_2677FE448)
  {
    time_t v2 = v0 - qword_2677FE440;
    do
    {
      uint64_t v3 = (time_t *)v1[5];
      if (*v1 < v2)
      {
        uint64_t v4 = (time_t **)v1[6];
        if (v3)
        {
          v3[6] = (time_t)v4;
          uint64_t v4 = (time_t **)v1[6];
        }
        else
        {
          qword_2677FE450 = v1[6];
        }
        krb5_ticket *v4 = v3;
      }
      uint64_t v1 = v3;
    }
    while (v3);
  }
  pthread_mutex_unlock(&stru_2677FE458);
  return 0;
}

uint64_t sub_213CAA634()
{
  pthread_mutex_lock(&stru_2677FE458);
  for (char i = off_2677FE448; off_2677FE448; char i = off_2677FE448)
  {
    uint64_t v1 = i[5];
    time_t v2 = (void *)i[6];
    if (v1)
    {
      *(void *)(v1 + 48) = v2;
      time_t v2 = (void *)i[6];
    }
    else
    {
      qword_2677FE450 = i[6];
    }
    void *v2 = v1;
  }
  pthread_mutex_unlock(&stru_2677FE458);
  return 0;
}

uint64_t sub_213CAA6A8(uint64_t a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = ccsha256_di();
  MEMORY[0x270FA5388]();
  size_t v6 = (char *)v9 - v5;
  ccdigest_init();
  strlen(*(const char **)(a1 + 8));
  ccdigest_update();
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v7 = 0;
    do
    {
      strlen(*(const char **)(*(void *)(a1 + 32) + 8 * v7));
      ccdigest_update();
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 24));
  }
  ccdigest_update();
  ccdigest_update();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 56))(v4, v6, a2);
}

uint64_t krb5_sendto_ctx_alloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)a2 = heim_uniq_alloc(0xF8uLL, (uint64_t)"sendto-context", (uint64_t)sub_213CAA844, a4, a5, a6, a7, a8);
  *(void *)(*(void *)a2 + 136) = heim_array_create();
  return 0;
}

void sub_213CAA844(uint64_t a1)
{
  time_t v2 = *(void **)(a1 + 56);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4) {
    free(v4);
  }
  heim_release(*(CFTypeRef *)(a1 + 136));
  uint64_t v5 = *(const void **)(a1 + 104);

  heim_release(v5);
}

uint64_t krb5_sendto_ctx_add_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) |= a2;
  return result;
}

uint64_t krb5_sendto_ctx_get_flags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t krb5_sendto_ctx_set_type(uint64_t result, int a2)
{
  *(_DWORD *)(result + 36) = a2;
  return result;
}

uint64_t krb5_sendto_ctx_set_func(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 40) = a2;
  *(void *)(result + 48) = a3;
  return result;
}

uint64_t sub_213CAA8CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 160) = a2;
  *(void *)(result + 168) = a3;
  return result;
}

uint64_t sub_213CAA8D4(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v5 = strdup(__s1);
  *(void *)(a2 + 56) = v5;
  if (v5) {
    return 0;
  }

  return krb5_enomem(a1);
}

uint64_t sub_213CAA92C(_krb5_context *a1, uint64_t a2, char *__s1)
{
  uint64_t v5 = strdup(__s1);
  *(void *)(a2 + 64) = v5;
  if (v5) {
    return 0;
  }

  return krb5_enomem(a1);
}

uint64_t krb5_sendto_set_delegated_app(uint64_t a1, uint64_t a2, _OWORD *a3, int a4, char *__s1)
{
  *(_DWORD *)(a2 + 156) |= 1u;
  if (a3)
  {
    *(_OWORD *)(a2 + 72) = *a3;
    uint64_t v9 = "passed-in";
  }
  else if (__s1)
  {
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    uint64_t v12 = NEHelperCacheCopyAppUUIDMapping();
    if (v12)
    {
      BOOL v13 = (void *)v12;
      if (MEMORY[0x216695CE0]() == MEMORY[0x263EF86D8] && xpc_array_get_count(v13))
      {
        *(_OWORD *)(a2 + 72) = *(_OWORD *)xpc_array_get_uuid(v13, 0);
        uint64_t v9 = "NEHelperCacheCopyAppUUIDMapping";
      }
      else
      {
        uint64_t v9 = "NEHelperCacheCopyAppUUIDMapping-fail";
      }
      xpc_release(v13);
    }
    else
    {
      uint64_t v9 = "NEHelperCacheCopyAppUUIDMapping-fail";
    }
  }
  else
  {
    uint64_t v9 = "unknown";
  }
  uint64_t v10 = *(void **)(a2 + 96);
  if (v10)
  {
    free(v10);
    *(void *)(a2 + 96) = 0;
  }
  if (__s1) {
    *(void *)(a2 + 96) = strdup(__s1);
  }
  sub_213C9C004(a1, 5, "krb5_sendto_set_delegated_app: %s - %s, %d uuid: %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", v9, __s1, a4, *(unsigned __int8 *)(a2 + 72), *(unsigned __int8 *)(a2 + 73), *(unsigned __int8 *)(a2 + 74), *(unsigned __int8 *)(a2 + 75), *(unsigned __int8 *)(a2 + 76), *(unsigned __int8 *)(a2 + 77), *(unsigned __int8 *)(a2 + 78), *(unsigned __int8 *)(a2 + 79), *(unsigned __int8 *)(a2 + 80), *(unsigned __int8 *)(a2 + 81), *(unsigned __int8 *)(a2 + 82), *(unsigned __int8 *)(a2 + 83), *(unsigned __int8 *)(a2 + 84),
    *(unsigned __int8 *)(a2 + 85),
    *(unsigned __int8 *)(a2 + 86),
    *(unsigned __int8 *)(a2 + 87));
  return 0;
}

void krb5_sendto_ctx_free(uint64_t a1, const void *a2)
{
}

uint64_t sub_213CAAB1C(_krb5_context *a1, uint64_t a2, int a3, krb5_data *a4, int *a5)
{
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (!krb5_rd_error(a1, a4, (krb5_error **)v12))
  {
    int v8 = krb5_error_from_rd_error(a1, (uint64_t)v12, 0);
    krb5_free_error_contents((uint64_t)a1, (uint64_t)v12);
    if (v8 == -1765328355)
    {
      int v10 = 2;
      goto LABEL_7;
    }
    if (v8 == -1765328332)
    {
      int v9 = *(_DWORD *)(a2 + 32);
      if ((v9 & 2) == 0)
      {
        *(_DWORD *)(a2 + 32) = v9 | 2;
        int v10 = 1;
LABEL_7:
        *a5 = v10;
      }
    }
  }
  return 0;
}

uint64_t krb5_sendto_context(uint64_t a1, uint64_t a2, _DWORD *a3, char *a4, void *a5)
{
  uint64_t v161 = *MEMORY[0x263EF8340];
  uint64_t v101 = 2529639068;
  *(void *)long long v110 = 0;
  krb5_data_zero(a5);
  heim_warn_blocking("krb5_sendto_context", &qword_2678013F0);
  uint64_t v14 = a2;
  int v15 = -1765328228;
  uint64_t v99 = a2;
  if (!a2)
  {
    uint64_t v14 = heim_uniq_alloc(0xF8uLL, (uint64_t)"sendto-context", (uint64_t)sub_213CAA844, v9, v10, v11, v12, v13);
    int v15 = 0;
    *(void *)(v14 + 136) = heim_array_create();
  }
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  gettimeofday((timeval *)(v14 + 176), 0);
  *(void *)(v14 + 144) = a4;
  int v23 = *(_DWORD *)(a1 + 384);
  *(_DWORD *)(a1 + 384) = v23 + 1;
  *(_DWORD *)(v14 + 240) = v23 << 16;
  int v100 = *(_DWORD *)(v14 + 36);
  if (!v100)
  {
    if (*(unsigned char *)(v14 + 32))
    {
      int v24 = 2;
    }
    else if (*(_DWORD *)(a1 + 224))
    {
      int v24 = 2;
    }
    else
    {
      int v24 = 1;
    }
    int v100 = v24;
  }
  uint64_t v104 = a4;
  *(void *)(v14 + 112) = a3;
  if (*(_DWORD *)(a1 + 336) < *a3) {
    *(_DWORD *)(v14 + 32) |= 2u;
  }
  uint64_t v25 = 0;
  int v26 = 4;
  long long v27 = (void *)(v14 + 120);
  v109.tv_sec = 0;
  *(void *)&v109.tv_usec = 0;
  v108.tv_sec = 0;
  *(void *)&v108.tv_usec = 0;
  v107.tv_sec = 0;
  *(void *)&v107.tv_usec = 0;
  int v106 = 4;
  while (2)
  {
    if (v26 == 6) {
      goto LABEL_131;
    }
    uint64_t v105 = 0;
    switch(v26)
    {
      case 1:
        sub_213C9C004(a1, 5, "krb5_sendto trying over again (reset): %d", v25);
        sub_213CABA2C(v14);
        uint64_t v16 = *(const void **)v110;
        if (*(void *)v110)
        {
          krb5_krbhst_free(a1, *(const void **)v110);
          *(void *)long long v110 = 0;
        }
        int v15 = 0;
        if ((int)v25 > 1) {
          int v28 = 6;
        }
        else {
          int v28 = 7;
        }
        int v106 = v28;
        uint64_t v25 = (v25 + 1);
        goto LABEL_124;
      case 2:
        uint64_t v139 = 0;
        uint64_t v140 = &v139;
        uint64_t v141 = 0x2000000000;
        uint64_t v142 = 0;
        *(void *)uint64_t v154 = 0;
        *(void *)&v154[8] = v154;
        *(void *)&v154[16] = 0x9800000000;
        *(void *)__str = 0;
        uint64_t v144 = __str;
        uint64_t v145 = 0x9800000000;
        uint64_t v135 = 0;
        uint64_t v136 = &v135;
        uint64_t v137 = 0x2000000000;
        int v138 = 0;
        uint64_t v131 = 0;
        uint64_t v132 = &v131;
        uint64_t v133 = 0x2000000000;
        int v134 = 0;
        v130.tv_sec = 0;
        *(void *)&v130.tv_usec = 0;
        long long v159 = 0u;
        long long v160 = 0u;
        memset(&v154[24], 0, 32);
        long long v155 = 0u;
        long long v156 = 0u;
        long long v157 = 0u;
        long long v158 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        long long v151 = 0u;
        if (*v27)
        {
          int v15 = 0;
          int v106 = 5;
          goto LABEL_23;
        }
        krb5_principal v35 = a3;
        uint64_t v36 = (addrinfo *)time(0);
        CFArrayRef v37 = *(const __CFArray **)(v14 + 136);
        v120.tv_sec = MEMORY[0x263EF8330];
        *(void *)&v120.tv_usec = 0x40000000;
        long long v121 = sub_213CACAC8;
        uint64_t v122 = &unk_2641E4518;
        size_t v127 = v36;
        uint64_t v128 = a1;
        uint64_t v129 = v14;
        uint64_t v123 = &v139;
        uint64_t v124 = v154;
        timeval v125 = __str;
        uint64_t v126 = &v135;
        heim_array_iterate(v37, (uint64_t)&v120);
        if (!*((_DWORD *)v136 + 6))
        {
          uint64_t v61 = v140[3];
          if (v61)
          {
            long long v62 = (addrinfo *)(*(void *)(v61 + 88) - (void)v36);
            sub_213CABC84(a1, v14, v61, v38, v39, v40, v41, v42);
            sub_213CACC24(v140[3], (char *)(*(void *)&v154[8] + 24), (uint64_t)(v144 + 24), (_DWORD *)v136 + 6, v63, v64, v65, v66);
            if ((uint64_t)v62 >= 1)
            {
              CFArrayRef v67 = *(const __CFArray **)(v14 + 136);
              v119[0] = (addrinfo *)MEMORY[0x263EF8330];
              v119[1] = (addrinfo *)0x40000000;
              v119[2] = (addrinfo *)sub_213CACD34;
              v119[3] = (addrinfo *)&unk_2641E4538;
              v119[4] = v62;
              v119[5] = v36;
              heim_array_iterate(v67, (uint64_t)v119);
            }
          }
        }
        heim_array_filter(*(const __CFArray **)(v14 + 136), (uint64_t)&unk_26C4C8C18);
        if (heim_array_get_length(*(CFArrayRef *)(v14 + 136)))
        {
          v130.tv_sec = 1;
          v130.tv_usec = 0;
          int v43 = select(*((_DWORD *)v136 + 6) + 1, (fd_set *)(*(void *)&v154[8] + 24), (fd_set *)(v144 + 24), 0, &v130);
          uint64_t v44 = v132;
          *((_DWORD *)v132 + 6) = v43;
          if ((v43 & 0x80000000) == 0)
          {
            a3 = v35;
            long long v27 = (void *)(v14 + 120);
            if (!v43) {
              goto LABEL_87;
            }
            *((_DWORD *)v44 + 6) = 0;
            CFArrayRef v45 = *(const __CFArray **)(v14 + 136);
            v111.tv_sec = MEMORY[0x263EF8330];
            *(void *)&v111.tv_usec = 0x40000000;
            uint64_t v112 = sub_213CACD74;
            v113 = &unk_2641E4580;
            v114 = v154;
            uint64_t v115 = __str;
            uint64_t v116 = &v131;
            uint64_t v117 = a1;
            uint64_t v118 = v14;
            heim_array_iterate(v45, (uint64_t)&v111);
            int v15 = 0;
            if (*((_DWORD *)v132 + 6)) {
              int v46 = 5;
            }
            else {
              int v46 = 2;
            }
            goto LABEL_88;
          }
          a3 = v35;
          if (*__error() == 35 && *__error() == 4)
          {
            *((_DWORD *)v132 + 6) = 0;
            long long v27 = (void *)(v14 + 120);
LABEL_87:
            int v15 = 0;
            int v46 = 3;
LABEL_88:
            int v106 = v46;
            goto LABEL_23;
          }
          int v15 = *__error();
          long long v27 = (void *)(v14 + 120);
        }
        else
        {
          if (*(_DWORD *)(v14 + 152)) {
            long long v68 = "no more hosts to send/recv packets to/from trying to pulling more hosts";
          }
          else {
            long long v68 = "no more hosts to send/recv packets to/from and no more hosts -> failure";
          }
          if (*(_DWORD *)(v14 + 152)) {
            int v69 = 6;
          }
          else {
            int v69 = 3;
          }
          sub_213C9C004(a1, 5, v68);
          int v15 = 0;
          int v106 = v69;
          a3 = v35;
          long long v27 = (void *)(v14 + 120);
        }
LABEL_23:
        _Block_object_dispose(&v131, 8);
        _Block_object_dispose(&v135, 8);
        _Block_object_dispose(__str, 8);
        _Block_object_dispose(v154, 8);
        _Block_object_dispose(&v139, 8);
        if (v15) {
          goto LABEL_131;
        }
        goto LABEL_124;
      case 3:
        goto LABEL_51;
      case 4:
        uint64_t v29 = *(void *)(a1 + 88);
        *(_OWORD *)uint64_t v154 = (unint64_t)v104;
        *(void *)&v154[16] = v29;
        *(void *)&v154[24] = a3;
        *(void *)&v154[32] = a5;
        int v30 = krb5_plugin_run_f(a1, "krb5", "send_to_kdc", 2u, 0, (uint64_t)v154, (uint64_t)sub_213CABA68);
        if (v30 == -1765328135)
        {
          int v106 = 7;
          int v15 = -1765328135;
LABEL_27:
          krb5_principal v31 = *(const void **)(v14 + 104);
          if (v31)
          {
            *(void *)long long v110 = heim_retain(v31);
          }
          else
          {
            int inited = krb5_krbhst_init_flags((_krb5_context *)a1, v104, v100, *(_DWORD *)(v14 + 32), (uint64_t *)v110);
            if (inited
              || (uint64_t v34 = *(char **)(v14 + 56)) != 0
              && (int inited = krb5_krbhst_set_hostname((_krb5_context *)a1, *(uint64_t *)v110, v34)) != 0
              || (uint64_t v17 = *(char **)(v14 + 64)) != 0
              && (int inited = krb5_krbhst_set_sitename((_krb5_context *)a1, *(uint64_t *)v110, v17)) != 0)
            {
LABEL_130:
              int v15 = inited;
              goto LABEL_131;
            }
            if (*(unsigned char *)(v14 + 156))
            {
              int inited = krb5_krbhst_set_delgated_uuid(a1, *(uint64_t *)v110, (unsigned __int8 *)(v14 + 72));
              if (inited) {
                goto LABEL_130;
              }
              int v15 = krb5_krbhst_set_delgated_pid(a1, *(uint64_t *)v110, *(_DWORD *)(v14 + 88));
              if (v15) {
                goto LABEL_131;
              }
            }
            else
            {
              int v15 = 0;
            }
          }
          int v106 = 3;
LABEL_51:
          if ((*(unsigned char *)(v14 + 152) & 1) == 0)
          {
            gettimeofday(&v109, 0);
            int v15 = krb5_krbhst_next(a1, *(uint64_t *)v110, &v105);
            gettimeofday(&v108, 0);
            sub_213CD4680((uint64_t)&v108, (uint64_t)&v109);
            sub_213CD4620(v14 + 208, (uint64_t)&v108);
            int v106 = 2;
            if (v15)
            {
              sub_213C9C004(a1, 5, "out of hosts, waiting for replies");
              *(_DWORD *)(v14 + 152) |= 1u;
              goto LABEL_124;
            }
            uint64_t v98 = a3;
            sub_213C9C004(a1, 5, "submissing new requests to new host");
            uint64_t v47 = v105;
            v120.tv_sec = 0;
            *(void *)&v120.tv_usec = 0;
            v111.tv_sec = 0;
            *(void *)&v111.tv_usec = 0;
            v119[0] = 0;
            uint64_t v48 = *(void *)(a1 + 88);
            uint64_t v49 = *(void *)(v14 + 112);
            *(void *)uint64_t v154 = 0;
            *(void *)&v154[8] = v105;
            *(void *)&v154[16] = v48;
            *(void *)&v154[24] = v49;
            *(void *)&v154[32] = v27;
            int v50 = krb5_plugin_run_f(a1, "krb5", "send_to_kdc", 0, 0, (uint64_t)v154, (uint64_t)sub_213CABEA8);
            uint64_t v103 = v25;
            if (v50 != -1765328135)
            {
              int v51 = v50;
              if (!v50)
              {
LABEL_58:
                int v15 = 0;
                a3 = v98;
                long long v27 = (void *)(v14 + 120);
                uint64_t v25 = v103;
                goto LABEL_124;
              }
              sub_213C9C004(a1, 5, "send via plugin failed %s: %d", (const char *)(v47 + 48), v50);
              long long v27 = (void *)(v14 + 120);
LABEL_72:
              if (v51) {
                goto LABEL_122;
              }
              int v15 = 0;
              goto LABEL_123;
            }
            gettimeofday(&v120, 0);
            if (*(_DWORD *)v47 == 3)
            {
              v119[0] = 0;
            }
            else
            {
              if (*(_DWORD *)v47 == 2)
              {
                uint64_t v52 = *(const char **)(a1 + 184);
                if (v52)
                {
                  long long v53 = strdup(v52);
                  if (!v53)
                  {
                    int v51 = 12;
                    goto LABEL_72;
                  }
                  long long v54 = v53;
                  int v55 = strncmp(v53, "http://", 7uLL);
                  uint64_t v56 = 7;
                  if (v55) {
                    uint64_t v56 = 0;
                  }
                  long long v57 = &v54[v56];
                  long long v58 = strchr(&v54[v56], 47);
                  if (v58) {
                    *long long v58 = 0;
                  }
                  long long v59 = strchr(v57, 58);
                  if (v59)
                  {
                    *long long v59 = 0;
                    memset(v154, 0, 48);
                    *(_DWORD *)&v154[8] = 1;
                    LODWORD(v139) = 0;
                    sscanf(v59 + 1, "%d", &v139);
                    unsigned int v60 = bswap32((unsigned __int16)v139) >> 16;
                  }
                  else
                  {
                    memset(v154, 0, 48);
                    unsigned int v60 = 20480;
                    *(_DWORD *)&v154[8] = 1;
                  }
                  snprintf(__str, 0x20uLL, "%d", __rev16(v60), v96);
                  uint64_t v91 = getaddrinfo(v57, __str, (const addrinfo *)v154, v119);
                  free(v54);
                  if (v91)
                  {
                    uint64_t v92 = __error();
                    int v51 = krb5_eai_to_heim_errno(v91, *v92);
                    goto LABEL_72;
                  }
                  char v97 = 0;
LABEL_94:
                  gettimeofday(&v111, 0);
                  sub_213CD4680((uint64_t)&v111, (uint64_t)&v120);
                  sub_213CD4620(v14 + 192, (uint64_t)&v111);
                  ++*(void *)(v14 + 232);
                  long long v70 = v119[0];
                  if (!v119[0])
                  {
                    uint64_t v71 = 0;
LABEL_108:
                    if (*(_DWORD *)v47 == 3)
                    {
                      if (v119[0]) {
                        heim_abort("kkdcp host with ai ?:ai == NULL", (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22, v95);
                      }
                      if (socketpair(1, 1, 0, (int *)v154) < 0) {
                        goto LABEL_121;
                      }
                      rk_socket_set_nopipe(*(int *)v154, 1);
                      rk_socket_set_nopipe(*(int *)&v154[4], 1);
                      sub_213CB946C(*(int *)v154, 1);
                      sub_213CB946C(*(int *)&v154[4], 1);
                      uint64_t v88 = sub_213CABA98(a1, v14, (int *)v47, 0, *(unsigned int *)v154, v85, v86, v87);
                      if (!v88)
                      {
                        close(*(int *)v154);
                        close(*(int *)&v154[4]);
LABEL_121:
                        long long v27 = (void *)(v14 + 120);
                        uint64_t v25 = v103;
LABEL_122:
                        int v15 = 0;
                        int v106 = 3;
LABEL_123:
                        a3 = v98;
                        goto LABEL_124;
                      }
                      uint64_t v89 = (const void *)v88;
                      *(_DWORD *)(v88 + 68) = *(_DWORD *)&v154[4];
                      unint64_t v90 = *(void *)(a1 + 88) / *(int *)(*(void *)(v88 + 72) + 24);
                      if (v90 <= 1) {
                        unint64_t v90 = 1;
                      }
                      *(void *)(v88 + 88) = v90;
                      *(void *)(v88 + 88) += time(0);
                      sub_213CABDB4(a1, v14, (uint64_t)v89);
                      ++v71;
                      heim_release(v89);
                    }
                    if ((v97 & 1) == 0) {
                      freeaddrinfo(v119[0]);
                    }
                    if (!v71) {
                      goto LABEL_121;
                    }
                    goto LABEL_58;
                  }
                  uint64_t v71 = 0;
                  while (2)
                  {
                    uint64_t v72 = socket(v70->ai_family, v70->ai_socktype, v70->ai_protocol);
                    if ((v72 & 0x80000000) == 0)
                    {
                      uint64_t v73 = v72;
                      sub_213CB79C8(v72);
                      rk_socket_set_nopipe(v73, 1);
                      sub_213CB946C(v73, 1);
                      if (v73 >= 0x400)
                      {
                        sub_213C9C004(a1, 0, "fd too large for select");
                        goto LABEL_102;
                      }
                      uint64_t v77 = sub_213CABA98(a1, v14, (int *)v47, (uint64_t)v70, v73, v74, v75, v76);
                      if (v77)
                      {
                        uint64_t v84 = (void *)v77;
                        if (v71)
                        {
                          uint64_t v96 = v71 + 1;
                          sub_213CABD7C(a1, v78, v77, "Queuing host in future (in %ds), its the %lu address on the same name", v80, v81, v82, v83, *(unsigned char *)(a1 + 96) * v71);
                          v84[11] = time(0) + *(void *)(a1 + 96) * v71++;
                        }
                        else
                        {
                          sub_213CABC84(a1, v14, v77, v79, v80, v81, v82, v83);
                          uint64_t v71 = 1;
                        }
                        heim_release(v84);
                      }
                      else
                      {
LABEL_102:
                        close(v73);
                      }
                    }
                    long long v70 = v70->ai_next;
                    if (!v70) {
                      goto LABEL_108;
                    }
                    continue;
                  }
                }
              }
              if (krb5_krbhst_get_addrinfo(a1, v47, v119)) {
                goto LABEL_121;
              }
            }
            char v97 = 1;
            goto LABEL_94;
          }
          int v106 = 2;
        }
        else
        {
          int v15 = v30;
          int v106 = 0;
        }
        goto LABEL_124;
      case 5:
        int v106 = 0;
        uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, int *))(v14 + 40);
        if (!v32) {
          goto LABEL_124;
        }
        int inited = v32(a1, v14, *(void *)(v14 + 48), v27, &v106);
        if (inited) {
          goto LABEL_130;
        }
        int v15 = v106;
        if ((v106 - 1) < 2)
        {
          krb5_data_free(v27);
          int v15 = 0;
LABEL_124:
          int v26 = v106;
          if (!v106) {
            goto LABEL_131;
          }
          continue;
        }
        if (!v106) {
          goto LABEL_124;
        }
        krb5_set_error_message((krb5_context)a1, -1765328228, "sendto filter funcation return unsupported state: %d", v106);
        int v15 = -1765328228;
LABEL_131:
        gettimeofday(&v107, 0);
        sub_213CD4680((uint64_t)&v107, v14 + 176);
        if (v15 || !*v27)
        {
          krb5_data_free(v27);
          krb5_clear_error_message((krb5_context)a1);
          uint64_t v93 = "KDCs";
          if (*(void *)(v14 + 232) == 1) {
            uint64_t v93 = "KDC";
          }
          krb5_set_error_message((krb5_context)a1, -1765328228, "unable to reach any KDC in realm %s, tried %lu %s", v104, *(void *)(v14 + 232), v93);
        }
        else
        {
          *(_OWORD *)a5 = *(_OWORD *)v27;
          krb5_data_zero(v27);
          uint64_t v101 = 0;
        }
        sub_213C9C004(a1, 1, "krb5_sendto_context %s done: %d hosts %lu packets %lu wc: %lld.%06d nr: %lld.%06d kh: %lld.%06d tid: %08x", *(const char **)(v14 + 144), v101, *(void *)(v14 + 232), *(void *)(v14 + 224), v107.tv_sec, v107.tv_usec, *(void *)(v14 + 192), *(_DWORD *)(v14 + 200), *(void *)(v14 + 208), *(_DWORD *)(v14 + 216), *(_DWORD *)(v14 + 240));
        if (v99) {
          sub_213CABA2C(v14);
        }
        else {
          heim_release((CFTypeRef)v14);
        }
        if (*(void *)v110) {
          krb5_krbhst_free(a1, *(const void **)v110);
        }
        return v101;
      case 7:
        goto LABEL_27;
      default:
        heim_abort("invalid krb5_sendto_context action: %d", (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21, v22, v26);
    }
  }
}

CFMutableArrayRef sub_213CABA2C(uint64_t a1)
{
  krb5_data_free((void *)(a1 + 120));
  heim_release(*(CFTypeRef *)(a1 + 136));
  CFMutableArrayRef result = heim_array_create();
  *(void *)(a1 + 136) = result;
  *(_DWORD *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_213CABA68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void, void, void, void))(a2 + 32);
  if (v4) {
    return v4(a1, a3, *a4, a4[2], a4[3], a4[4]);
  }
  else {
    return 2529639161;
  }
}

uint64_t sub_213CABA98(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  uint64_t v13 = heim_uniq_alloc(0x78uLL, (uint64_t)"sendto-host", (uint64_t)sub_213CABED4, a4, a5, a6, a7, a8);
  uint64_t v14 = v13;
  if (v13)
  {
    *(_DWORD *)(v13 + 64) = v8;
    *(_DWORD *)(v13 + 68) = -1;
    *(void *)(v13 + 48) = a3;
    *(void *)(v13 + 56) = a4;
    *(void *)(v13 + 32) = a2;
    unsigned int v15 = ((unsigned __int16)*(_DWORD *)(a2 + 240) + 1) | *(_DWORD *)(a2 + 240) & 0xFFFF0000;
    *(_DWORD *)(a2 + 240) = v15;
    *(_DWORD *)(v13 + 112) = v15;
    *(_DWORD *)(v13 + 40) = 0;
    uint64_t v16 = *a3;
    if (v16 <= 3) {
      *(void *)(v13 + 72) = off_2641E45A0[v16];
    }
    if (*(unsigned char *)(a2 + 156))
    {
      uint64_t v17 = __error();
      sub_213C9C004(a1, 5, "host_create: setting host delegate uuid", *v17);
      if (setsockopt(*(_DWORD *)(v14 + 64), 0xFFFF, 4360, (const void *)(a2 + 72), 0x10u))
      {
        uint64_t v18 = __error();
        sub_213C9C004(a1, 5, "host_create: SO_DELEGATED_UUID failed: %d", *v18);
      }
      if (*(_DWORD *)(a2 + 88))
      {
        uint64_t v19 = __error();
        sub_213C9C004(a1, 5, "host_create: setting host delegate process", *v19);
        if (setsockopt(*(_DWORD *)(v14 + 64), 0xFFFF, 4359, (const void *)(a2 + 88), 4u))
        {
          uint64_t v20 = __error();
          sub_213C9C004(a1, 5, "host_create: SO_DELEGATED failed: %d", *v20);
        }
      }
    }
    uint64_t v21 = strdup((const char *)(*(void *)(v14 + 48) + 48));
    if (v21)
    {
      uint64_t v22 = v21;
      sub_213C963D0(v21);
      sub_213C9C004(a1, 5, "host_create: setting hostname %s", v22);
      ne_session_set_socket_attributes();
      free(v22);
    }
    *(_DWORD *)(v14 + 80) = *(_DWORD *)(*(void *)(v14 + 72) + 24);
    heim_array_append_value(*(__CFArray **)(a2 + 136), (const void *)v14);
  }
  return v14;
}

time_t sub_213CABC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a3 + 56);
  sub_213CABD7C(a1, a2, a3, "connecting to host", a5, a6, a7, a8, v25);
  if (connect(*(_DWORD *)(a3 + 64), *(const sockaddr **)(v11 + 32), *(_DWORD *)(v11 + 16)) < 0)
  {
    if (*__error() == 36)
    {
      sub_213CABD7C(a1, v12, a3, "connecting to %d (in progress)", v13, v14, v15, v16, *(_DWORD *)(a3 + 64));
      *(_DWORD *)(a3 + 40) = 1;
    }
    else
    {
      uint64_t v17 = __error();
      sub_213CAC93C(a1, a3, "failed to connect: %d", v18, v19, v20, v21, v22, *v17);
    }
  }
  else
  {
    sub_213CABDB4(a1, a2, a3);
  }
  unint64_t v23 = *(void *)(a1 + 88) / *(int *)(*(void *)(a3 + 72) + 24);
  if (v23 <= 1) {
    unint64_t v23 = 1;
  }
  *(void *)(a3 + 88) = v23;
  time_t result = time(0);
  *(void *)(a3 + 88) += result;
  return result;
}

void sub_213CABD7C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_213CABDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 40) = 2;
  if (*(void *)(a2 + 160))
  {
    v13[0] = 0;
    v13[1] = 0;
    krb5_data_zero(v13);
    int v12 = (*(uint64_t (**)(uint64_t, void, void, void, void *))(a2 + 160))(a1, **(unsigned int **)(a3 + 48), *(void *)(a2 + 168), *(unsigned int *)(a3 + 64), v13);
    if (!v12)
    {
      if (!v13[0])
      {
        sub_213CAC93C(a1, a3, "prexmit function didn't send data", v7, v8, v9, v10, v11, 0);
        return;
      }
      int v12 = (**(uint64_t (***)(uint64_t, uint64_t, void *))(a3 + 72))(a1, a3, v13);
      krb5_data_free(v13);
    }
  }
  else
  {
    int v12 = (**(uint64_t (***)(uint64_t, uint64_t, void))(a3 + 72))(a1, a3, *(void *)(a2 + 112));
  }
  if (v12) {
    sub_213CABD7C(a1, v6, a3, "failed to prexmit/prepare", v8, v9, v10, v11, v13[0]);
  }
}

uint64_t sub_213CABEA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void, void, void, void))(a2 + 24);
  if (v4) {
    return v4(a1, a3, a4[1], a4[2], a4[3], a4[4]);
  }
  else {
    return 2529639161;
  }
}

void sub_213CABED4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  int v3 = *(_DWORD *)(a1 + 68);
  if ((v3 & 0x80000000) == 0) {
    close(v3);
  }
  krb5_data_free((void *)(a1 + 96));
  *(void *)(a1 + 56) = 0;
}

uint64_t sub_213CABF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __s = 0;
  uint64_t v17 = 0;
  if (*(void *)(a2 + 96)) {
    heim_abort("prepare_http called twice:host->data.length == 0", a2, a3, a4, a5, a6, a7, a8, v15);
  }
  if ((base64_encode(*(void *)(a3 + 8), *(_DWORD *)a3, (const char **)&v17) & 0x80000000) != 0) {
    return 12;
  }
  if (*(void *)(a1 + 184)) {
    int v10 = asprintf(&__s, "GET http://%s/%s HTTP/1.0\r\n\r\n");
  }
  else {
    int v10 = asprintf(&__s, "GET /%s HTTP/1.0\r\n\r\n");
  }
  int v12 = v10;
  free(v17);
  uint64_t result = 12;
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v13 = __s;
    if (__s)
    {
      *(void *)(a2 + 104) = __s;
      size_t v14 = strlen(v13);
      uint64_t result = 0;
      *(void *)(a2 + 96) = v14;
    }
  }
  return result;
}

uint64_t sub_213CABFE8(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 96);
  unint64_t v4 = write(*(_DWORD *)(a2 + 64), *(const void **)(a2 + 104), *(void *)(a2 + 96));
  if ((v4 & 0x8000000000000000) != 0) {
    return *__error();
  }
  unint64_t v5 = *v3 - v4;
  if (*v3 <= v4)
  {
    krb5_data_free(v3);
    return 0;
  }
  else
  {
    *(void *)(a2 + 96) = v5;
    memmove(*(void **)(a2 + 104), (const void *)(*(void *)(a2 + 104) + v4), v5 - v4);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_213CAC064(int *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result = sub_213CAC138(a1, a2);
  if (!result)
  {
    uint64_t v6 = *(char **)(a2 + 104);
    uint64_t v7 = strstr(v6, "\r\n\r\n");
    if (!v7) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v8 = v7;
    uint64_t v9 = (unsigned __int8 *)(v7 + 4);
    size_t v10 = *(void *)(a2 + 96) + v6 - (char *)v9;
    if (v10 < 4) {
      return 2529638973;
    }
    size_t __len = 0;
    _krb5_get_int(v9, &__len, 4);
    if (v10 >= __len)
    {
      memmove(*(void **)(a2 + 104), v8 + 8, __len);
      *(void *)(a2 + 96) = __len;
      *a3 = *(_OWORD *)(a2 + 96);
      krb5_data_zero((void *)(a2 + 96));
      return 0;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_213CAC138(int *a1, uint64_t a2)
{
  LODWORD(v20) = 0;
  if (ioctl(*(_DWORD *)(a2 + 64), 0x4004667FuLL)) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = (int)v20 <= 0;
  }
  if (v9)
  {
    sub_213CABD7C((uint64_t)a1, v4, a2, "failed to get nbytes from socket, no bytes there?", v5, v6, v7, v8, (char)&v20);
    return 2314790848;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 96);
    if (a1[85] - v11 >= (unint64_t)v20)
    {
      uint64_t v10 = krb5_data_realloc(a2 + 96, v20 + v11 + 1);
      if (!v10)
      {
        ssize_t v12 = read(*(_DWORD *)(a2 + 64), (void *)(*(void *)(a2 + 104) + v11), (int)v20);
        if (v12 <= 0)
        {
          uint64_t v13 = __error();
          uint64_t v10 = *v13;
          sub_213CABD7C((uint64_t)a1, v14, a2, "failed to read bytes from stream: %d", v15, v16, v17, v18, *v13);
        }
        else
        {
          uint64_t v10 = 0;
          *(void *)(a2 + 96) = v12 + v11;
          *(unsigned char *)(*(void *)(a2 + 104) + v12 + v11) = 0;
        }
      }
    }
    else
    {
      uint64_t v10 = 2529638973;
      krb5_set_error_message((krb5_context)a1, -1765328323, "TCP message from KDC too large %d", v20 + v11);
    }
  }
  return v10;
}

uint64_t sub_213CAC268(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (size_t *)(a2 + 96);
  if (*(void *)(a2 + 96)) {
    heim_abort("prepare_kkdcp called twice:host->data.length == 0", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v18);
  }
  if (krb5_config_get_BOOL_default(a1, 0, 1, a4, a5, a6, a7, a8, (uint64_t)"libdefaults"))
  {
    uint64_t v10 = krb5_storage_emem();
    if (!v10) {
      return 12;
    }
    uint64_t v11 = (uint64_t)v10;
    uint64_t v12 = krb5_store_data((uint64_t)v10, *a3, a3[1]);
    if (v12)
    {
      uint64_t v13 = v12;
      krb5_storage_free(v11);
      return v13;
    }
    uint64_t v17 = krb5_storage_to_data(v11, v8);
    krb5_storage_free(v11);
    return v17;
  }
  else
  {
    size_t v15 = *a3;
    uint64_t v14 = (const void *)a3[1];
    return krb5_data_copy(v8, v14, v15);
  }
}

uint64_t sub_213CAC354(const void *a1, uint64_t a2)
{
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2800000000;
  uint64_t v16 = 0;
  global_queue = dispatch_get_global_queue(0, 0);
  heim_retain((CFTypeRef)a2);
  heim_retain(*(CFTypeRef *)(a2 + 32));
  if (*(unsigned __int16 *)(*(void *)(a2 + 48) + 6) == *(unsigned __int16 *)(*(void *)(a2 + 48) + 4)) {
    asprintf(&v18, "https://%s/%s");
  }
  else {
    asprintf(&v18, "https://%s:%d/%s");
  }
  if (v18)
  {
    *(_OWORD *)(v14 + 3) = *(_OWORD *)(a2 + 96);
    krb5_data_zero((void *)(a2 + 96));
    sub_213CABD7C((uint64_t)a1, v5, a2, "sending request to: %s", v6, v7, v8, v9, (char)v18);
    heim_retain(a1);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = sub_213CAC5BC;
    block[3] = &unk_2641E44F0;
    void block[6] = a2;
    void block[7] = v18;
    void block[4] = &v13;
    void block[5] = a1;
    dispatch_async(global_queue, block);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 12;
  }
  _Block_object_dispose(&v13, 8);
  return v10;
}

uint64_t sub_213CAC4DC(int *a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL BOOL_default = krb5_config_get_BOOL_default((uint64_t)a1, 0, 1, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  uint64_t result = sub_213CAC138(a1, a2);
  if (!result)
  {
    if (*(void *)(a2 + 96) < 4uLL) {
      return 0xFFFFFFFFLL;
    }
    size_t v14 = 0;
    if (BOOL_default)
    {
      _krb5_get_int(*(unsigned __int8 **)(a2 + 104), &v14, 4);
      size_t v13 = *(void *)(a2 + 96) - 4;
      if (v14 > v13) {
        return 0xFFFFFFFFLL;
      }
      memmove(*(void **)(a2 + 104), (const void *)(*(void *)(a2 + 104) + 4), v13);
      *(void *)(a2 + 96) -= 4;
    }
    *a3 = *(_OWORD *)(a2 + 96);
    krb5_data_zero((void *)(a2 + 96));
    return 0;
  }
  return result;
}

void sub_213CAC5BC(uint64_t a1)
{
  size_t v9 = 0;
  uint64_t v10 = 0;
  krb5_data_zero(&v9);
  int v2 = sub_213CA749C(*(_krb5_context **)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 48) + 32) + 144), *(const char **)(a1 + 56), (long long *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), &v9);
  krb5_data_free((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  free(*(void **)(a1 + 56));
  if (!v2)
  {
    sub_213CABD7C(*(void *)(a1 + 40), v3, *(void *)(a1 + 48), "kkdcp: got %d bytes, feeding them back", v4, v5, v6, v7, v9);
    krb5_net_write_block(*(void *)(a1 + 40), (int *)(*(void *)(a1 + 48) + 68), v10, v9, 2);
    krb5_data_free(&v9);
  }
  close(*(_DWORD *)(*(void *)(a1 + 48) + 68));
  uint64_t v8 = *(void *)(a1 + 48);
  *(_DWORD *)(v8 + 68) = -1;
  heim_release(*(CFTypeRef *)(v8 + 32));
  heim_release(*(CFTypeRef *)(a1 + 48));
  heim_release(*(CFTypeRef *)(a1 + 40));
}

uint64_t sub_213CAC694(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (size_t *)(a2 + 96);
  if (*(void *)(a2 + 96)) {
    heim_abort("prepare_tcp called twice:host->data.length == 0", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v14);
  }
  uint64_t v10 = krb5_storage_emem();
  if (!v10) {
    return 12;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = krb5_store_data((uint64_t)v10, *a3, a3[1]);
  if (!v12) {
    uint64_t v12 = krb5_storage_to_data(v11, v8);
  }
  krb5_storage_free(v11);
  return v12;
}

uint64_t sub_213CAC714(int *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result = sub_213CAC138(a1, a2);
  if (!result)
  {
    if (*(void *)(a2 + 96) >= 4uLL
      && (v7 = 0, _krb5_get_int(*(unsigned __int8 **)(a2 + 104), &v7, 4), size_t v6 = *(void *)(a2 + 96) - 4, v7 <= v6))
    {
      memmove(*(void **)(a2 + 104), (const void *)(*(void *)(a2 + 104) + 4), v6);
      *(void *)(a2 + 96) -= 4;
      *a3 = *(_OWORD *)(a2 + 96);
      krb5_data_zero((void *)(a2 + 96));
      return 0;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_213CAC7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return krb5_data_copy((void *)(a2 + 96), *(const void **)(a3 + 8), *(void *)a3);
}

uint64_t sub_213CAC7C8(uint64_t a1, uint64_t a2)
{
  ssize_t v2 = send(*(_DWORD *)(a2 + 64), *(const void **)(a2 + 104), *(void *)(a2 + 96), 0);
  uint64_t result = 0;
  if (v2 < 0) {
    return *__error();
  }
  return result;
}

uint64_t sub_213CAC804(uint64_t a1, uint64_t a2)
{
  int v9 = 0;
  ioctl(*(_DWORD *)(a2 + 64), 0x4004667FuLL);
  sub_213CABD7C(a1, 0, a2, "failed to get nbytes from socket, no bytes there?", v4, v5, v6, v7, (char)&v9);
  return 2314790848;
}

uint64_t sub_213CAC93C(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_213CAC98C(a1, a2, a3, &a9);
  uint64_t result = close(*(_DWORD *)(a2 + 64));
  *(_DWORD *)(a2 + 64) = -1;
  *(_DWORD *)(a2 + 40) = 4;
  return result;
}

void sub_213CAC98C(uint64_t a1, uint64_t a2, const char *a3, va_list a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  if (_krb5_have_debug(a1) && vasprintf(&v11, a3, a4) != -1 && v11)
  {
    uint64_t v8 = **(int **)(a2 + 48);
    if (v8 > 3) {
      int v9 = "unknown";
    }
    else {
      int v9 = off_2641E45C0[v8];
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (!v10 || getnameinfo(*(const sockaddr **)(v10 + 32), *(_DWORD *)(v10 + 16), v13, 0x401u, v12, 0x20u, 10))
    {
      v13[0] = 0;
      v12[0] = 0;
    }
    sub_213C9C004(a1, 5, "%s: %s %s:%s (%s) tid: %08x", v11, v9, v13, v12, (const char *)(*(void *)(a2 + 48) + 48), *(_DWORD *)(a2 + 112));
    free(v11);
  }
}

void *sub_213CACAC8(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = *(_DWORD *)(a2 + 40);
  if (v9 == 4) {
    return result;
  }
  uint64_t v11 = result;
  if (!v9)
  {
    uint64_t v12 = *(void *)(a2 + 88);
    if (v12 >= result[8])
    {
      uint64_t v20 = *(void *)(result[4] + 8);
      uint64_t v21 = *(void *)(v20 + 24);
      if (!v21 || *(void *)(v21 + 88) > v12) {
        *(void *)(v20 + 24) = a2;
      }
      return result;
    }
    sub_213CABC84(result[9], result[10], a2, a4, a5, a6, a7, a8);
  }
  if (*(void *)(a2 + 88) >= v11[8])
  {
LABEL_11:
    uint64_t v17 = (char *)(*(void *)(v11[5] + 8) + 24);
    uint64_t v18 = *(void *)(v11[6] + 8) + 24;
    uint64_t v19 = (_DWORD *)(*(void *)(v11[7] + 8) + 24);
    return (void *)sub_213CACC24(a2, v17, v18, v19, a5, a6, a7, a8);
  }
  int v13 = *(_DWORD *)(a2 + 80);
  if (!v13) {
    heim_abort("tries should not reach 0:h->tries != 0", a2, a3, a4, a5, a6, a7, a8, v22);
  }
  uint64_t v14 = v11[9];
  int v15 = v13 - 1;
  *(_DWORD *)(a2 + 80) = v15;
  if (v15)
  {
    sub_213CABD7C(v14, a2, a2, "retrying sending to", a5, a6, a7, a8, v22);
    unint64_t v16 = *(void *)(v11[9] + 88) / *(int *)(*(void *)(a2 + 72) + 24);
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    *(void *)(a2 + 88) = v16;
    *(void *)(a2 + 88) += time(0);
    sub_213CABDB4(v11[9], v11[10], a2);
    goto LABEL_11;
  }

  return (void *)sub_213CAC93C(v14, a2, "host timed out", a4, a5, a6, a7, a8, a9);
}

uint64_t sub_213CACC24(uint64_t result, char *a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(result + 64);
  if (v8 >= 1024) {
    heim_abort("fd too large:h->fd < FD_SETSIZE", (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, v15);
  }
  uint64_t v11 = result;
  int v12 = *(_DWORD *)(result + 40);
  if ((v12 - 1) >= 2)
  {
    if (v12 != 3) {
      goto LABEL_10;
    }
    uint64_t result = __darwin_check_fd_set_overflow(*(_DWORD *)(result + 64), a2, 0);
    int v13 = a2;
    if (!result) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int v13 = (char *)a3;
  if (__darwin_check_fd_set_overflow(*(_DWORD *)(result + 64), a2, 0)) {
    *(_DWORD *)&a2[((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v8;
  }
  int v8 = *(_DWORD *)(v11 + 64);
  uint64_t result = __darwin_check_fd_set_overflow(v8, v13, 0);
  if (result) {
LABEL_9:
  }
    *(_DWORD *)&v13[((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v8;
LABEL_10:
  int v14 = *(_DWORD *)(v11 + 64);
  if (v14 > *a4) {
    *a4 = v14 + 1;
  }
  return result;
}

uint64_t sub_213CACD34(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 40))
  {
    uint64_t v2 = *(void *)(a2 + 88) - *(void *)(result + 32);
    *(void *)(a2 + 88) = v2;
    if (v2 <= *(void *)(result + 40)) {
      uint64_t v2 = *(void *)(result + 40);
    }
    *(void *)(a2 + 88) = v2;
  }
  return result;
}

BOOL sub_213CACD64(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 40) == 4;
}

void sub_213CACD74(void *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a2 + 40) == 4) {
    heim_abort("dead host resurected:h->state != DEAD", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v34);
  }
  unint64_t v9 = *(int *)(a2 + 64);
  if ((int)v9 >= 1024) {
    heim_abort("fd too large:h->fd < FD_SETSIZE", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v34);
  }
  int v12 = (const void *)(*(void *)(a1[4] + 8) + 24);
  if (__darwin_check_fd_set_overflow(*(_DWORD *)(a2 + 64), v12, 0)) {
    int v13 = *(_DWORD *)((unsigned char *)v12 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) & (1 << v9);
  }
  else {
    int v13 = 0;
  }
  int v14 = *(_DWORD *)(a2 + 64);
  char v15 = (char *)(*(void *)(a1[5] + 8) + 24);
  if (__darwin_check_fd_set_overflow(v14, v15, 0))
  {
    int v21 = (*(_DWORD *)&v15[((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFFCLL] >> v14) & 1;
    if (v13) {
      goto LABEL_11;
    }
  }
  else
  {
    int v21 = 0;
    if (v13) {
      goto LABEL_11;
    }
  }
  if (!v21) {
    goto LABEL_28;
  }
LABEL_11:
  uint64_t v22 = a1[7];
  uint64_t v23 = a1[8];
  char v24 = v21 ^ 1;
  if (*(_DWORD *)(a2 + 40) != 1) {
    char v24 = 1;
  }
  if ((v24 & 1) == 0) {
    sub_213CABDB4(a1[7], a1[8], a2);
  }
  if (!v13
    || (sub_213CABD7C(v22, v16, a2, "reading packet", v17, v18, v19, v20, v34),
        int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 72) + 16))(v22, a2, v23 + 120),
        v25 == -1))
  {
LABEL_20:
    if (v21)
    {
      if (*(_DWORD *)(a2 + 40) == 2)
      {
        ++*(void *)(v23 + 224);
        sub_213CABD7C(v22, v16, a2, "writing packet", v17, v18, v19, v20, v34);
        int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 72) + 8))(v22, a2);
        if (v28 != -1)
        {
          if (!v28)
          {
            int v27 = 0;
            *(_DWORD *)(a2 + 40) = 3;
            goto LABEL_27;
          }
          sub_213CAC93C(v22, a2, "host dead, write failed", v29, v30, v31, v32, v33, v35);
        }
      }
    }
    int v27 = 0;
    goto LABEL_27;
  }
  if (v25)
  {
    sub_213CAC93C(v22, a2, "host disconnected", v26, v17, v18, v19, v20, v34);
    goto LABEL_20;
  }
  sub_213CABD7C(v22, v16, a2, "host completed", v17, v18, v19, v20, v34);
  int v27 = 1;
LABEL_27:
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) |= v27;
LABEL_28:
  if (*(_DWORD *)(*(void *)(a1[6] + 8) + 24)) {
    *a3 = 1;
  }
}

krb5_error_code krb5_sendauth(krb5_context a1, krb5_auth_context *a2, krb5_pointer a3, char *a4, krb5_principal a5, krb5_principal a6, krb5_flags a7, krb5_data *a8, krb5_creds *a9, krb5_ccache cache, krb5_error **a11, krb5_ap_rep_enc_part **a12, krb5_creds **a13)
{
  char v57 = 0;
  *(void *)&v56.krb5_magic magic = 0;
  v56.data = 0;
  *(void *)&v55.krb5_magic magic = 0;
  v55.data = 0;
  long long v54 = 0u;
  memset(v53, 0, sizeof(v53));
  int v51 = 0;
  krb5_principal principal = 0;
  *(_DWORD *)char __buf = 318767104;
  if (krb5_net_write((int)a1, (int *)a3, __buf, 4uLL) != 4
    || krb5_net_write((int)a1, (int *)a3, "KRB5_SENDAUTH_V1.0", 0x13uLL) != 19
    || (size_t v21 = strlen(a4),
        size_t v22 = v21 + 1,
        *(_DWORD *)char __buf = bswap32(v21 + 1),
        krb5_net_write((int)a1, (int *)a3, __buf, 4uLL) != 4)
    || krb5_net_write((int)a1, (int *)a3, a4, v22) != v22)
  {
    int v24 = *__error();
    strerror(v24);
    krb5_set_error_message(a1, v24, "write: %s");
    return v24;
  }
  ssize_t v23 = krb5_net_read((int)a1, (int *)a3, &v57, 1uLL);
  if (v23 < 0)
  {
    int v24 = *__error();
    strerror(v24);
    krb5_set_error_message(a1, v24, "read: %s");
    return v24;
  }
  if (v23 != 1)
  {
    int v24 = -1765328178;
    goto LABEL_13;
  }
  if (v57)
  {
    krb5_clear_error_message(a1);
    return -1765328177;
  }
  uint64_t v26 = a9;
  if (!a9)
  {
    krb5_ccache v27 = cache;
    if (cache)
    {
      int v42 = 0;
      if (!a5)
      {
LABEL_19:
        krb5_error_code v28 = krb5_cc_get_principal(a1, cache, &principal);
        if (v28)
        {
          int v24 = v28;
          if (v27) {
            return v24;
          }
LABEL_30:
          krb5_cc_close(a1, cache);
          return v24;
        }
        a5 = principal;
      }
    }
    else
    {
      int v24 = krb5_cc_default(a1, &cache);
      if (v24) {
        return v24;
      }
      int v42 = 1;
      if (!a5) {
        goto LABEL_19;
      }
    }
    long long v54 = 0u;
    memset(&v53[2], 0, 112);
    v53[0] = a5;
    v53[1] = a6;
    uint64_t v26 = (krb5_creds *)v53;
    int v29 = v42;
    goto LABEL_28;
  }
  if (a9->addresses)
  {
    int v51 = a9;
    goto LABEL_33;
  }
  int v29 = 0;
LABEL_28:
  krb5_error_code credentials = krb5_get_credentials(a1, 0, cache, v26, &v51);
  if (credentials)
  {
    int v24 = credentials;
    if (!v29) {
      return v24;
    }
    goto LABEL_30;
  }
  if (v29) {
    krb5_cc_close(a1, cache);
  }
LABEL_33:
  uint64_t v31 = a13;
  int v24 = krb5_mk_req_extended(a1, a2, a7, a8, v51, &v56);
  if (v31)
  {
    *uint64_t v31 = v51;
  }
  else if (v51)
  {
    krb5_free_creds(a1, v51);
  }
  if (principal) {
    krb5_free_principal(a1, principal);
  }
  if (!v24)
  {
    krb5_error_code message = krb5_write_message(a1, (int *)a3, (char **)&v56);
    if (message) {
      goto LABEL_42;
    }
    krb5_data_free(&v56);
    krb5_error_code message = krb5_read_message(a1, (int *)a3, (uint64_t)&v55);
    if (message) {
      goto LABEL_42;
    }
    if (*(void *)&v55.magic)
    {
      uint64_t v50 = 0;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      krb5_data v44 = (krb5_data)0;
      long long v45 = 0u;
      int v24 = krb5_rd_error(a1, &v55, (krb5_error **)&v44);
      krb5_data_free(&v55);
      if (!v24)
      {
        uint64_t v33 = a11;
        int v24 = krb5_error_from_rd_error(a1, (uint64_t)&v44, 0);
        if (v33 && (v34 = malloc_type_malloc(0x68uLL, 0x10B00406D2B8025uLL), (int *v33 = (krb5_error *)v34) != 0))
        {
          krb5_data v35 = v44;
          long long v36 = v46;
          v34[1] = v45;
          v34[2] = v36;
          _OWORD *v34 = v35;
          long long v37 = v47;
          long long v38 = v48;
          long long v39 = v49;
          *((void *)v34 + 12) = v50;
          v34[4] = v38;
          v34[5] = v39;
          v34[3] = v37;
        }
        else
        {
          krb5_free_error_contents((uint64_t)a1, (uint64_t)&v44);
        }
        return v24;
      }
LABEL_13:
      krb5_clear_error_message(a1);
      return v24;
    }
    krb5_data_free(&v55);
    if ((a7 & 2) == 0) {
      return 0;
    }
    *(void *)&v44.krb5_magic magic = 0;
    v44.data = 0;
    int v43 = 0;
    krb5_data_zero(&v44);
    krb5_error_code message = krb5_read_message(a1, (int *)a3, (uint64_t)&v44);
    if (message)
    {
LABEL_42:
      int v24 = message;
      krb5_set_error_message(a1, message, "krb5_sendauth: server closed connection");
      return v24;
    }
    uint64_t v40 = a12;
    if (a12) {
      uint64_t v41 = a12;
    }
    else {
      uint64_t v41 = &v43;
    }
    int v24 = krb5_rd_rep(a1, *a2, &v44, v41);
    krb5_data_free(&v44);
    if (!v24)
    {
      if (!v40) {
        krb5_free_ap_rep_enc_part(a1, v43);
      }
      return 0;
    }
  }
  return v24;
}

krb5_error_code krb5_set_default_realm(krb5_context a1, const char *a2)
{
  uint64_t v18 = 0;
  uint64_t v4 = heim_array_create();
  uint64_t v5 = v4;
  if (a2)
  {
    sub_213CAD540((int)v4, v4, (char *)a2);
  }
  else
  {
    krb5_plugin_run_f((uint64_t)a1, "krb5", "krb5_configuration", 0, 0, (uint64_t)v4, (uint64_t)sub_213CAD59C);
    strings = (char **)krb5_config_get_strings((uint64_t)a1, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"libdefaults");
    int v13 = strings;
    uint64_t v18 = strings;
    if (strings) {
      goto LABEL_4;
    }
    if (!heim_array_get_length(v5))
    {
      LODWORD(strings) = krb5_get_host_realm(a1, 0, &v18);
      if (strings)
      {
        krb5_error_code v16 = (int)strings;
        heim_release(v5);
        return v16;
      }
      int v13 = v18;
      if (v18)
      {
LABEL_4:
        int v14 = *v13;
        if (*v13)
        {
          uint64_t v15 = 1;
          do
          {
            sub_213CAD540((int)strings, v5, v14);
            int v13 = v18;
            int v14 = v18[v15++];
          }
          while (v14);
        }
        krb5_free_host_realm(a1, v13);
      }
    }
  }
  heim_release(*((CFTypeRef *)a1 + 9));
  krb5_error_code v16 = 0;
  *((void *)a1 + 9) = v5;
  return v16;
}

void sub_213CAD540(int a1, __CFArray *a2, char *cStr)
{
  CFStringRef v4 = heim_string_create(cStr);
  if (v4)
  {
    CFStringRef v5 = v4;
    heim_array_append_value(a2, v4);
    heim_release(v5);
  }
}

uint64_t sub_213CAD59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void (*)(int, __CFArray *, char *)))(a2 + 24);
  if (v4) {
    return v4(a1, a3, a4, sub_213CAD540);
  }
  else {
    return 2529639161;
  }
}

uint64_t krb5_sock_to_principal(_krb5_context *a1, int a2, const char *a3, krb5_int32 a4, krb5_principal *a5)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  sockaddr v17 = (sockaddr)0;
  long long v18 = 0u;
  socklen_t v15 = 128;
  if (getsockname(a2, &v17, &v15) < 0)
  {
    int v13 = __error();
    uint64_t v12 = *v13;
    strerror(*v13);
    krb5_set_error_message(a1, v12, "getsockname: %s");
  }
  else
  {
    uint64_t v9 = getnameinfo(&v17, v15, v16, 0x401u, 0, 0, 0);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = __error();
      uint64_t v12 = krb5_eai_to_heim_errno(v10, *v11);
      gai_strerror(v10);
      krb5_set_error_message(a1, v12, "getnameinfo: %s");
    }
    else
    {
      return krb5_sname_to_principal(a1, v16, a3, a4, a5);
    }
  }
  return v12;
}

void *krb5_storage_emem()
{
  time_t v0 = malloc_type_malloc(0x40uLL, 0x10800405C5E1C9BuLL);
  if (v0)
  {
    uint64_t v1 = malloc_type_malloc(0x20uLL, 0x101004038BDA701uLL);
    if (v1)
    {
      uint64_t v2 = v1;
      *time_t v0 = v1;
      v0[6] = 0x89F8E70500000000;
      v1[1] = 1024;
      uint64_t v3 = malloc_type_malloc(0x400uLL, 0xF239CFACuLL);
      void *v2 = v3;
      if (v3)
      {
        v2[2] = 0;
        v2[3] = v3;
        v0[1] = sub_213CAD820;
        v0[2] = sub_213CAD884;
        v0[3] = sub_213CAD93C;
        v0[4] = sub_213CAD9E8;
        v0[5] = sub_213CADAC8;
        v0[7] = 0x1FFFFFFFLL;
        return v0;
      }
      free(v0);
      CFStringRef v4 = v2;
    }
    else
    {
      CFStringRef v4 = v0;
    }
    free(v4);
    return 0;
  }
  return v0;
}

size_t sub_213CAD820(void **a1, void *__dst, size_t a3)
{
  CFStringRef v5 = (const void *)(*a1)[3];
  if (**a1 + (*a1)[2] - (void)v5 >= a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = **a1 + (*a1)[2] - (void)v5;
  }
  memmove(__dst, v5, v6);
  ((void (*)(void **, size_t, uint64_t))a1[3])(a1, v6, 1);
  return v6;
}

size_t sub_213CAD884(void ***a1, void *__src, size_t __len)
{
  size_t v3 = __len;
  size_t v6 = *a1;
  uint64_t v7 = **a1;
  uint64_t v8 = (char *)v6[3];
  if ((char *)v6[1] + (void)v7 - v8 < __len)
  {
    int64_t v9 = v8 - v7;
    size_t v10 = (v8 - v7 + __len) << (v8 - v7 + __len < 0x1000);
    uint64_t v11 = (char *)malloc_type_realloc(v7, v10, 0x9195CD2BuLL);
    if (!v11) {
      return -1;
    }
    *size_t v6 = v11;
    v6[1] = (void *)v10;
    uint64_t v8 = &v11[v9];
    v6[3] = &v11[v9];
  }
  memmove(v8, __src, v3);
  ((void (*)(void ***, size_t, uint64_t))a1[3])(a1, v3, 1);
  return v3;
}

uint64_t sub_213CAD93C(uint64_t a1, unint64_t a2, int a3)
{
  size_t v3 = *(void **)a1;
  switch(a3)
  {
    case 2:
      size_t v6 = *(void (**)(void))(a1 + 24);
LABEL_10:
      v6();
      return v3[3] - *v3;
    case 1:
      size_t v6 = *(void (**)(void))(a1 + 24);
      goto LABEL_10;
    case 0:
      uint64_t v4 = v3[1];
      if (v4 >= a2) {
        uint64_t v4 = a2;
      }
      unint64_t v5 = v4 & ~(v4 >> 63);
      v3[3] = *v3 + v5;
      if (v5 > v3[2]) {
        v3[2] = v5;
      }
      return v3[3] - *v3;
  }
  *__error() = 22;
  return -1;
}

uint64_t sub_213CAD9E8(void ***a1, size_t size)
{
  size_t v3 = *a1;
  if (size)
  {
    unint64_t v5 = *v3;
    size_t v4 = (size_t)v3[1];
    size_t v6 = (char *)v3[3];
    if (v4 < size || v4 >> 1 > size)
    {
      uint64_t v8 = (char *)malloc_type_realloc(*v3, size, 0x7DF3B92DuLL);
      if (!v8) {
        return 12;
      }
      uint64_t v11 = v8;
      uint64_t v9 = v6 - v5;
      size_t v10 = (char *)v3[1];
      if (size > (unint64_t)v10) {
        bzero(&v10[(void)v8], size - (void)v10);
      }
      void *v3 = v11;
      v3[1] = (void *)size;
      size_t v6 = &v11[v9];
      v3[3] = &v11[v9];
    }
    else
    {
      uint64_t v11 = (char *)*v3;
    }
  }
  else
  {
    free(*v3);
    uint64_t v11 = 0;
    size_t v6 = 0;
    v3[3] = 0;
    void *v3 = 0;
    v3[1] = 0;
  }
  v3[2] = (void *)size;
  uint64_t result = 0;
  if (v6 - v11 > (uint64_t)size) {
    v3[3] = &v11[size];
  }
  return result;
}

void sub_213CADAC8(void ***a1)
{
  uint64_t v1 = *a1;
  bzero(**a1, (size_t)(*a1)[2]);
  uint64_t v2 = *v1;

  free(v2);
}

uint64_t _krb5_auth_con_setup_pfs(_krb5_context *a1, uint64_t a2, unsigned int a3)
{
  size_t v6 = (void *)MEMORY[0x216694DC0]();
  ccDRBGGetRngState();
  sub_213C9C004((uint64_t)a1, 20, "Setting up PFS for auth context");
  uint64_t v7 = (krb5_keyblock *)malloc_type_calloc(1uLL, 0x90uLL, 0x10B0040D51C2B2DuLL);
  if (v7)
  {
    int v14 = v7;
    strings = (void **)krb5_config_get_strings((uint64_t)a1, 0, v8, v9, v10, v11, v12, v13, (uint64_t)"libdefaults");
    krb5_error_code v16 = strings;
    if (strings)
    {
      sockaddr v17 = (const char *)*strings;
      if (!*strings)
      {
        krb5_config_free_strings(strings);
        v14[5].krb5_magic magic = 0;
        goto LABEL_20;
      }
      uint64_t v18 = 0;
      long long v19 = (const char **)(strings + 1);
      do
      {
        uint64_t v18 = sub_213CAEDA8((uint64_t)a1, v18, v17);
        long long v20 = *v19++;
        sockaddr v17 = v20;
      }
      while (v20);
    }
    else
    {
      LODWORD(v18) = sub_213CAEDA8((uint64_t)a1, 0, "ALL");
    }
    krb5_config_free_strings(v16);
    v14[5].krb5_magic magic = v18;
    if (v18)
    {
      if (a3 <= 0x17 && ((1 << a3) & 0x870000) != 0)
      {
        *(_OWORD *)&v14[4].krb5_magic magic = xmmword_2641E7450;
        v14[4].contents = 0;
        long long v21 = (krb5_octet *)malloc_type_calloc(1uLL, (32 * *v6) | 0x10, 0x52847D2CuLL);
        v14[2].contents = v21;
        if (!v21)
        {
LABEL_15:
          free(v14);
          goto LABEL_16;
        }
        if (cccurve25519_make_key_pair() || ccec_generate_key_fips())
        {
          krb5_free_keyblock_contents(a1, v14 + 3);
          free(v14[2].contents);
          goto LABEL_15;
        }
        *(void *)(a2 + 104) = v14;
        return 0;
      }
LABEL_21:
      free(v14);
      return 0;
    }
LABEL_20:
    sub_213C9C004((uint64_t)a1, 10, "No PFS configuration");
    goto LABEL_21;
  }
LABEL_16:

  return krb5_enomem(a1);
}

void sub_213CADD20(_krb5_context *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 104);
  if (v2)
  {
    free(*(void **)(v2 + 64));
    krb5_free_keyblock_contents(a1, (krb5_keyblock *)(*(void *)(a2 + 104) + 72));
    krb5_free_principal(a1, *(krb5_principal *)(*(void *)(a2 + 104) + 128));
    unint64_t v5 = *(_OWORD **)(a2 + 104);
    v5[7] = 0u;
    v5[8] = 0u;
    v5[5] = 0u;
    v5[6] = 0u;
    void v5[3] = 0u;
    void v5[4] = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    *unint64_t v5 = 0u;
    free(*(void **)(a2 + 104));
    *(void *)(a2 + 104) = 0;
  }
}

uint64_t sub_213CADD9C(_krb5_context *a1, uint64_t a2, const char *a3, krb5_keyblock *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 104);
  memset(&v15, 0, sizeof(v15));
  if (!v8) {
    heim_abort("no PFS requestd:pfs", a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v14);
  }
  uint64_t v9 = (const krb5_keyblock *)(v8 + 72);
  if (!*(_DWORD *)(v8 + 72)) {
    heim_abort("shared secret completed:pfs->keyblock.keytype", a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v14);
  }
  if (!*(_DWORD *)(v8 + 136)) {
    heim_abort("no pfs group selected:pfs->group != KRB5_PFS_INVALID", a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v14);
  }
  sub_213C9C004((uint64_t)a1, 10, "krb5_pfs: updating to PFS key for direction %s", a3);
  uint64_t result = _krb5_fast_cf2(a1, a4, "AP PFS shared key", v9, a3, &v15, 0);
  if (result != -1980176606)
  {
    if (result) {
      return result;
    }
    krb5_free_keyblock_contents(a1, a4);
    *a4 = v15;
    _krb5_debug_keyblock((uint64_t)a1, 20, a3, (uint64_t)a4);
  }
  return 0;
}

uint64_t sub_213CADE9C(_krb5_context *a1, uint64_t a2, const krb5_principal_data *a3, unsigned int *a4)
{
  uint64_t v8 = *(void *)(a2 + 104);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  uint64_t v35 = 0;
  long long v36 = 0;
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v31 = 0;
  krb5_data_zero(&v28);
  if (!sub_213CAE190(a1, a2)) {
    return 0;
  }
  int v9 = *(_DWORD *)(v8 + 120);
  if ((v9 & 1) == 0)
  {
    if ((v9 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v12 = sub_213CAEA8C(a1, (uint64_t)&v37);
    if (v12) {
      goto LABEL_11;
    }
    uint64_t checksum = sub_213CBB6F8((unsigned int *)v32);
    sub_213CBB6E8((uint64_t)&v37);
    if (checksum) {
      goto LABEL_12;
    }
    goto LABEL_4;
  }
  uint64_t v37 = 2;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v12 = krb5_data_copy(&v38, (const void *)(v8 + 32), 0x20uLL);
  if (v12)
  {
LABEL_11:
    uint64_t checksum = v12;
    sub_213CBB6E8((uint64_t)&v37);
    goto LABEL_12;
  }
  uint64_t checksum = sub_213CBB6F8((unsigned int *)v32);
  sub_213CBB6E8((uint64_t)&v37);
  if (checksum) {
    goto LABEL_12;
  }
  if ((*(_DWORD *)(v8 + 120) & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v10 = krb5_copy_principal(a1, a3, (krb5_principal *)(v8 + 128));
  if (v10)
  {
    uint64_t checksum = v10;
    sub_213CADD20(a1, a2);
    sub_213CBB7C8((uint64_t)&v31);
    return checksum;
  }
  uint64_t checksum = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 32), 0, &v33);
  if (!checksum)
  {
    uint64_t v28 = sub_213CBB7B8((uint64_t)&v31);
    char v14 = malloc_type_malloc(v28, 0x964C2981uLL);
    int v29 = v14;
    if (v14)
    {
      uint64_t v15 = sub_213CBB798((uint64_t)v14 + v28 - 1, v28, (uint64_t)&v31, (uint64_t)&v30);
      if (v15)
      {
        uint64_t checksum = v15;
        free(v29);
        int v29 = 0;
        goto LABEL_12;
      }
      if (v30 != v28) {
        heim_abort("internal asn1 error:size == data.length", v16, v17, v18, v19, v20, v21, v22, v27);
      }
      long long v23 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
      uint64_t v31 = v23;
      if (!v23)
      {
        uint64_t v26 = krb5_enomem(a1);
        goto LABEL_30;
      }
      uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v33, 0xFFFFFFE5, 0, (uint64_t)v29, v28, (uint64_t)v23);
      if (checksum) {
        goto LABEL_12;
      }
      LODWORD(v34) = 513;
      uint64_t v35 = sub_213CBB7B8((uint64_t)&v31);
      long long v24 = malloc_type_malloc(v35, 0x85E7BBC6uLL);
      long long v36 = v24;
      if (v24)
      {
        uint64_t v25 = sub_213CBB798((uint64_t)v24 + v35 - 1, v35, (uint64_t)&v31, (uint64_t)&v30);
        if (v25)
        {
          uint64_t checksum = v25;
          free(v36);
          long long v36 = 0;
          goto LABEL_12;
        }
        if (v35 != v30) {
          krb5_abortx(a1, "internal error in ASN.1 encoder");
        }
        uint64_t v26 = sub_213CBB1C0(a4);
LABEL_30:
        uint64_t checksum = v26;
        goto LABEL_12;
      }
    }
    uint64_t checksum = 12;
  }
LABEL_12:
  if (v33) {
    krb5_crypto_destroy(a1, (uint64_t)v33);
  }
  sub_213CBB7C8((uint64_t)&v31);
  sub_213CBB13C((uint64_t)&v34);
  free(v29);
  return checksum;
}

BOOL sub_213CAE190(_krb5_context *a1, uint64_t a2)
{
  uint64_t v7 = 0;
  int v4 = krb5_crypto_prf_length(a1, **(_DWORD **)(a2 + 32), &v7);
  if (v4 == -1980176606)
  {
    sub_213C9C004((uint64_t)a1, 10, "Enctype %d doesn't support PFS", **(_DWORD **)(a2 + 32));
    return 0;
  }
  else
  {
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v7 == 0;
    }
    return !v6;
  }
}

uint64_t sub_213CAE218(_krb5_context *a1, uint64_t a2)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v44 = 0;
  long long v45 = 0;
  int v43 = 0;
  krb5_data_zero(&v41);
  uint64_t v11 = *(void *)(a2 + 64);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(v11 + 80);
  if (!v12) {
    return v12;
  }
  if (!*(void *)(a2 + 32)) {
    heim_abort("pfs: don't have keyblock:auth_context->keyblock", v4, v5, v6, v7, v8, v9, v10, ctype[0]);
  }
  if (!sub_213CAE190(a1, a2) || _krb5_get_ad(a1, (unsigned int *)v12, 0, 513, &v41)) {
    return 0;
  }
  uint64_t v12 = sub_213CBB778(v42, v41, (uint64_t)&v43, (uint64_t)&v40);
  krb5_data_free(&v41);
  if (v12) {
    goto LABEL_18;
  }
  char v14 = *(const krb5_keyblock **)(a2 + 32);
  uint64_t v46 = 0;
  uint64_t v15 = v43;
  if (!v43)
  {
    uint64_t v12 = 2314790689;
    char v27 = "peer sent no checksum";
LABEL_14:
    krb5_set_error_message(a1, -1980176607, v27, *(void *)ctype);
    goto LABEL_18;
  }
  int v43 = 0;
  uint64_t v16 = sub_213CBB7B8((uint64_t)&v43);
  uint64_t v17 = malloc_type_malloc(v16, 0xD3F2F2BFuLL);
  if (!v17)
  {
    uint64_t v12 = 12;
    goto LABEL_17;
  }
  uint64_t v18 = v17;
  *(void *)ctype = 0;
  uint64_t v19 = sub_213CBB798((uint64_t)v17 + v16 - 1, v16, (uint64_t)&v43, (uint64_t)&v46);
  if (v19)
  {
    uint64_t v12 = v19;
    free(v18);
LABEL_17:
    int v43 = v15;
    goto LABEL_18;
  }
  int v43 = v15;
  if (v16 != v46) {
    heim_abort("internal asn1 encode error:data.length == size", v20, v21, v22, v23, v24, v25, v26, ctype[0]);
  }
  uint64_t v28 = krb5_crypto_init(a1, v14, 0, (krb5_keyblock ***)ctype);
  if (v28)
  {
    uint64_t v12 = v28;
    free(v18);
    goto LABEL_18;
  }
  if (!krb5_checksum_is_keyed((uint64_t)a1, *v15))
  {
    uint64_t v12 = 2314790689;
    free(v18);
    char v27 = "checksum not keyed";
    goto LABEL_14;
  }
  uint64_t v12 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xFFFFFFE5, v18, v16, v15, v29);
  krb5_crypto_destroy(a1, *(uint64_t *)ctype);
  free(v18);
  if (v12) {
    goto LABEL_18;
  }
  uint64_t v12 = _krb5_auth_con_setup_pfs(a1, a2, **(_DWORD **)(a2 + 32));
  if (v12) {
    goto LABEL_18;
  }
  if (!v44)
  {
LABEL_44:
    uint64_t v12 = 2314790688;
    krb5_set_error_message(a1, -1980176608, "No acceptable PFS group sent", *(void *)ctype);
    goto LABEL_18;
  }
  uint64_t v30 = v45;
  unint64_t v31 = 1;
  do
  {
    if (*v30 == 2)
    {
      int v32 = 1;
    }
    else
    {
      if (*v30 != 1)
      {
        uint64_t v33 = 0;
        goto LABEL_35;
      }
      int v32 = 2;
    }
    if ((*(_DWORD *)(*(void *)(a2 + 104) + 120) & v32) != 0) {
      uint64_t v33 = (uint64_t)v30;
    }
    else {
      uint64_t v33 = 0;
    }
LABEL_35:
    if (v33) {
      break;
    }
    v30 += 6;
  }
  while (v31++ < v44);
  if (!v33) {
    goto LABEL_44;
  }
  uint64_t v35 = (void *)(*(void *)(a2 + 104) + 128);
  uint64_t v36 = *(void *)(a2 + 64);
  uint64_t v37 = *(const char **)(v36 + 8);
  *(_OWORD *)ctype = *(_OWORD *)(v36 + 16);
  uint64_t v39 = *(void *)(v36 + 32);
  uint64_t v12 = _krb5_principalname2krb5_principal((uint64_t)a1, v35, (uint64_t)ctype, v37);
  if (!v12)
  {
    uint64_t v12 = sub_213CAE550(a1, a2, **(unsigned int **)(a2 + 32), v33);
    if (!v12)
    {
      sub_213CBB7C8((uint64_t)&v43);
      sub_213C9C004((uint64_t)a1, 10, "PFS server made selected");
      return v12;
    }
  }
LABEL_18:
  sub_213CBB7C8((uint64_t)&v43);
  sub_213CADD20(a1, a2);
  return v12;
}

uint64_t sub_213CAE550(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a2 + 104);
  ccDRBGGetRngState();
  if (!v7) {
    heim_abort("no PFS requestd:pfs", v8, v9, v10, v11, v12, v13, v14, v23[0]);
  }
  size_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v15 = krb5_data_zero(&v24);
  if (*(_DWORD *)a4 == 1)
  {
    if ((*(unsigned char *)(v7 + 120) & 2) != 0)
    {
      uint64_t v18 = (void *)MEMORY[0x216694DC0](v15);
      uint64_t v19 = MEMORY[0x270FA5388]();
      if (MEMORY[0x216694DF0](v19, *(void *)(a4 + 8), *(void *)(a4 + 16), &v23[-v20]))
      {
        uint64_t v21 = "failed to import public key";
      }
      else
      {
        uint64_t v22 = krb5_data_alloc(&v24, 8 * *v18);
        if (v22)
        {
          uint64_t v16 = v22;
          goto LABEL_22;
        }
        if (!ccec_compute_key())
        {
LABEL_20:
          uint64_t v16 = _krb5_pk_kdf(a1, (long long *)(v7 + 96), (uint64_t)v25, v24, *(long long **)(v7 + 128), 0, a3, 0, 0, 0, v7 + 72);
          if (!v16)
          {
            _krb5_debug_keyblock((uint64_t)a1, 20, "PFS shared keyblock", v7 + 72);
            *(_DWORD *)(v7 + 136) = *(_DWORD *)a4;
          }
          goto LABEL_22;
        }
        uint64_t v21 = "Failed to complete share key";
      }
      uint64_t v16 = 2314790688;
      krb5_set_error_message(a1, -1980176608, v21);
      return v16;
    }
LABEL_10:
    uint64_t v16 = 2314790688;
    krb5_set_error_message(a1, -1980176608, "Group %d not accepted", *(_DWORD *)a4);
    return v16;
  }
  if (*(_DWORD *)a4 != 2 || (*(unsigned char *)(v7 + 120) & 1) == 0) {
    goto LABEL_10;
  }
  if (*(void *)(a4 + 8) != 32)
  {
    uint64_t v16 = 2314790688;
    krb5_set_error_message(a1, -1980176608, "public key of wrong length");
    return v16;
  }
  uint64_t v16 = krb5_data_alloc(&v24, 0x20uLL);
  if (v16)
  {
LABEL_22:
    bzero(v25, v24);
    krb5_data_free(&v24);
    return v16;
  }
  if (!cccurve25519_with_rng()) {
    goto LABEL_20;
  }
  uint64_t v16 = 2314790688;
  krb5_set_error_message(a1, -1980176608, "Failed to complete share key");
  return v16;
}

uint64_t sub_213CAE7D8(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 104);
  long long v48 = 0;
  uint64_t v45 = 0;
  if (!v8) {
    heim_abort("no pfs:pfs", a2, a3, a4, a5, a6, a7, a8, v45);
  }
  if (!*(_DWORD *)(v8 + 136)) {
    heim_abort("no pfs group selected:pfs->group != KRB5_PFS_INVALID", a2, a3, a4, a5, a6, a7, a8, v45);
  }
  uint64_t v46 = 0;
  long long v47 = 0;
  krb5_data_zero(&v46);
  uint64_t v12 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040E158D9E9uLL);
  *(void *)(a3 + 40) = v12;
  if (!v12) {
    return krb5_enomem(a1);
  }
  int v20 = *(_DWORD *)(v8 + 136);
  if (v20 == 1)
  {
    uint64_t v21 = sub_213CAEA8C(a1, (uint64_t)(v12 + 2));
  }
  else
  {
    if (v20 != 2) {
      heim_abort("Invalid PFS group:0", v13, v14, v15, v16, v17, v18, v19, v45);
    }
    krb5_deltat v12[2] = 2;
    uint64_t v21 = krb5_data_copy((void *)v12 + 2, (const void *)(v8 + 32), 0x20uLL);
  }
  uint64_t checksum = v21;
  if (!v21)
  {
    uint64_t checksum = krb5_crypto_init(a1, *(const krb5_keyblock **)(a2 + 32), 0, &v48);
    if (!checksum)
    {
      uint64_t v46 = sub_213CBB7F8(*(void *)(a3 + 40));
      uint64_t v25 = malloc_type_malloc(v46, 0xA753E2DFuLL);
      long long v47 = v25;
      if (v25)
      {
        uint64_t v26 = sub_213CBB7D8((uint64_t)v25 + v46 - 1, v46, *(void *)(a3 + 40), (uint64_t)&v45);
        if (v26)
        {
          uint64_t checksum = v26;
          free(v47);
          long long v47 = 0;
        }
        else
        {
          if (v45 != v46) {
            heim_abort("internal asn1 error:size == data.length", v27, v28, v29, v30, v31, v32, v33, v45);
          }
          uint64_t v34 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
          **(void **)(a3 + 40) = v34;
          if (v34)
          {
            uint64_t checksum = krb5_create_checksum(a1, (_DWORD **)v48, 0xFFFFFFE3, 0, (uint64_t)v47, v46, (uint64_t)v34);
            if (!checksum)
            {
              sub_213C9C004((uint64_t)a1, 20, "PFS deriving new keys on server");
              uint64_t checksum = sub_213CADD9C(a1, a2, "session key", *(krb5_keyblock **)(a2 + 32), v35, v36, v37, v38);
              if (!checksum)
              {
                int v43 = *(krb5_keyblock **)(a2 + 40);
                if (!v43
                  || (uint64_t checksum = sub_213CADD9C(a1, a2, "server key", v43, v39, v40, v41, v42), !checksum))
                {
                  uint64_t v44 = *(krb5_keyblock **)(a2 + 48);
                  if (!v44
                    || (uint64_t checksum = sub_213CADD9C(a1, a2, "client key", v44, v39, v40, v41, v42), !checksum))
                  {
                    uint64_t checksum = 0;
                    *(_DWORD *)a2 |= 0x100u;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t checksum = krb5_enomem(a1);
          }
        }
      }
      else
      {
        uint64_t checksum = 12;
      }
    }
  }
  sub_213CADD20(a1, a2);
  krb5_crypto_destroy(a1, (uint64_t)v48);
  if (v47) {
    free(v47);
  }
  if (checksum)
  {
    uint64_t v23 = *(void *)(a3 + 40);
    if (v23)
    {
      sub_213CBB808(v23);
      free(*(void **)(a3 + 40));
      *(void *)(a3 + 40) = 0;
    }
  }
  return checksum;
}

uint64_t sub_213CAEA8C(_krb5_context *a1, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  size_t v4 = ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
  *(void *)(a2 + 8) = v4;
  uint64_t v5 = malloc_type_malloc(v4, 0xCAF25E8EuLL);
  *(void *)(a2 + 16) = v5;
  if (v5)
  {
    ccec_export_pub();
    return 0;
  }
  else
  {
    return krb5_enomem(a1);
  }
}

uint64_t sub_213CAEB24(krb5_context a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a2 + 104)) {
    heim_abort("no pfs:auth_context->pfs", a2, a3, a4, a5, a6, a7, a8, v40);
  }
  uint64_t v9 = *(int ***)(a3 + 40);
  if (!v9) {
    heim_abort("no pfs from server:ap_rep->pfs", a2, a3, a4, a5, a6, a7, a8, v40);
  }
  uint64_t v12 = *(const krb5_keyblock **)(a2 + 32);
  uint64_t v40 = 0;
  uint64_t v13 = *v9;
  if (!*v9)
  {
    uint64_t v25 = 2314790689;
    krb5_set_error_message(a1, -1980176607, "peer sent no checksum", v40);
LABEL_10:
    sub_213CADD20(a1, a2);
    return v25;
  }
  const krb5_keyblock *v9 = 0;
  uint64_t v14 = sub_213CBB7F8((uint64_t)v9);
  uint64_t v15 = malloc_type_malloc(v14, 0x41B42D71uLL);
  if (!v15)
  {
    uint64_t v25 = 12;
    goto LABEL_9;
  }
  uint64_t v16 = v15;
  *(void *)ctype = 0;
  uint64_t v17 = sub_213CBB7D8((uint64_t)v15 + v14 - 1, v14, (uint64_t)v9, (uint64_t)&v40);
  if (v17)
  {
    uint64_t v25 = v17;
    free(v16);
LABEL_9:
    const krb5_keyblock *v9 = v13;
    goto LABEL_10;
  }
  const krb5_keyblock *v9 = v13;
  if (v14 != v40) {
    heim_abort("internal asn1 encode error:data.length == size", v18, v19, v20, v21, v22, v23, v24, v40);
  }
  uint64_t v27 = krb5_crypto_init(a1, v12, 0, (krb5_keyblock ***)ctype);
  if (v27)
  {
    uint64_t v25 = v27;
    free(v16);
    goto LABEL_10;
  }
  if (!krb5_checksum_is_keyed((uint64_t)a1, *v13))
  {
    uint64_t v25 = 2314790689;
    free(v16);
    krb5_set_error_message(a1, -1980176607, "checksum not keyed", v40);
    goto LABEL_10;
  }
  uint64_t v25 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xFFFFFFE3, v16, v14, v13, v28);
  krb5_crypto_destroy(a1, *(uint64_t *)ctype);
  free(v16);
  if (v25) {
    goto LABEL_10;
  }
  uint64_t v25 = sub_213CAE550(a1, a2, **(unsigned int **)(a2 + 32), *(void *)(a3 + 40) + 8);
  if (v25) {
    goto LABEL_10;
  }
  sub_213C9C004((uint64_t)a1, 10, "PFS client made secret");
  sub_213C9C004((uint64_t)a1, 20, "PFS deriving new keys on client");
  uint64_t v25 = sub_213CADD9C(a1, a2, "session key", *(krb5_keyblock **)(a2 + 32), v29, v30, v31, v32);
  if (v25) {
    goto LABEL_10;
  }
  uint64_t v39 = *(krb5_keyblock **)(a2 + 40);
  if (v39)
  {
    uint64_t v25 = sub_213CADD9C(a1, a2, "client key", v39, v35, v36, v37, v38);
    if (v25) {
      goto LABEL_10;
    }
  }
  if (!*(_DWORD *)(*(void *)(a2 + 104) + 136)) {
    heim_abort("no pfs group selected:auth_context->pfs->group != KRB5_PFS_INVALID", v33, v34, (uint64_t)v39, v35, v36, v37, v38, v40);
  }
  uint64_t v25 = 0;
  *(_DWORD *)a2 |= 0x100u;
  return v25;
}

uint64_t sub_213CAEDA8(uint64_t a1, uint64_t a2, const char *a3)
{
  int v5 = *(unsigned __int8 *)a3;
  if (v5 == 45) {
    uint64_t v6 = a3 + 1;
  }
  else {
    uint64_t v6 = a3;
  }
  if (!strcasecmp(v6, "ALL"))
  {
    int v7 = 3;
  }
  else if (!strcasecmp(v6, "dh25519"))
  {
    int v7 = 1;
  }
  else
  {
    if (strcasecmp(v6, "nist-p256") && strcasecmp(v6, "p256") && strcasecmp(v6, "all-nist"))
    {
      sub_213C9C004(a1, 10, "unsupported dh curve(s): %s", v6);
      return a2;
    }
    int v7 = 2;
  }
  unsigned int v8 = a2 & ~v7;
  unsigned int v9 = v7 | a2;
  if (v5 == 45) {
    return v8;
  }
  else {
    return v9;
  }
}

void *krb5_storage_from_fd(int a1)
{
  int v1 = dup(a1);
  if (v1 < 0) {
    return 0;
  }
  int v2 = v1;
  size_t v3 = malloc_type_malloc(0x40uLL, 0x10800405C5E1C9BuLL);
  if (!v3)
  {
    close(v2);
    return v3;
  }
  size_t v4 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  void *v3 = v4;
  if (!v4)
  {
    close(v2);
    free(v3);
    return 0;
  }
  v3[6] = 0x89F8E70500000000;
  _DWORD *v4 = v2;
  v3[1] = sub_213CAEF8C;
  v3[2] = sub_213CAEF98;
  v3[3] = sub_213CAEFA4;
  v3[4] = sub_213CAEFB0;
  v3[5] = sub_213CAEFE8;
  v3[7] = 0x1FFFFFFFLL;
  return v3;
}

ssize_t sub_213CAEF8C(int **a1, char *a2, size_t a3)
{
  return sub_213CB7D14(**a1, a2, a3);
}

size_t sub_213CAEF98(int **a1, char *a2, size_t a3)
{
  return sub_213CB7D98(**a1, a2, a3);
}

off_t sub_213CAEFA4(int **a1, off_t a2, int a3)
{
  return lseek(**a1, a2, a3);
}

uint64_t sub_213CAEFB0(int **a1, off_t a2)
{
  if (ftruncate(**a1, a2) == -1) {
    return *__error();
  }
  else {
    return 0;
  }
}

uint64_t sub_213CAEFE8(int **a1)
{
  return close(**a1);
}

void *krb5_storage_from_mem(uint64_t a1, uint64_t a2)
{
  size_t v4 = malloc_type_malloc(0x40uLL, 0x10800405C5E1C9BuLL);
  if (v4)
  {
    int v5 = malloc_type_malloc(0x18uLL, 0x10100406AB5462FuLL);
    if (v5)
    {
      void *v4 = v5;
      void v4[6] = 0x89F8E70500000000;
      *int v5 = a1;
      v5[1] = a2;
      v5[2] = a1;
      v4[1] = sub_213CAF0D0;
      v4[2] = sub_213CAF134;
      v4[3] = sub_213CAF190;
      v4[4] = sub_213CAF228;
      void v4[5] = 0;
      v4[7] = 0x1FFFFFFFLL;
    }
    else
    {
      free(v4);
      return 0;
    }
  }
  return v4;
}

size_t sub_213CAF0D0(void **a1, void *__dst, size_t a3)
{
  int v5 = (const void *)(*a1)[2];
  if (**a1 + (*a1)[1] - (void)v5 >= a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = **a1 + (*a1)[1] - (void)v5;
  }
  memmove(__dst, v5, v6);
  ((void (*)(void **, size_t, uint64_t))a1[3])(a1, v6, 1);
  return v6;
}

size_t sub_213CAF134(void **a1, const void *a2, size_t a3)
{
  uint64_t v4 = **a1 + (*a1)[1];
  int v5 = (void *)(*a1)[2];
  if (v4 - (uint64_t)v5 >= a3) {
    size_t v6 = a3;
  }
  else {
    size_t v6 = v4 - (void)v5;
  }
  memmove(v5, a2, v6);
  ((void (*)(void **, size_t, uint64_t))a1[3])(a1, v6, 1);
  return v6;
}

uint64_t sub_213CAF190(uint64_t a1, unint64_t a2, int a3)
{
  size_t v3 = *(void **)a1;
  if (a3 == 2)
  {
    size_t v6 = *(uint64_t (**)(void))(a1 + 24);
  }
  else
  {
    if (a3 != 1)
    {
      if (a3)
      {
        *__error() = 22;
        return -1;
      }
      else
      {
        uint64_t v4 = v3[1];
        if (v4 >= a2) {
          uint64_t v4 = a2;
        }
        uint64_t result = v4 & ~(v4 >> 63);
        v3[2] = *v3 + result;
      }
      return result;
    }
    size_t v6 = *(uint64_t (**)(void))(a1 + 24);
  }

  return v6();
}

uint64_t sub_213CAF228(uint64_t a1, unint64_t a2)
{
  int v2 = *(void **)a1;
  if (*(void *)(*(void *)a1 + 8) < a2) {
    return 34;
  }
  v2[1] = a2;
  uint64_t result = 0;
  if (v2[2] - *v2 > (int64_t)a2) {
    v2[2] = *v2 + a2;
  }
  return result;
}

void *krb5_storage_from_data(uint64_t *a1)
{
  return krb5_storage_from_mem(a1[1], *a1);
}

void *krb5_storage_from_readonly_mem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_malloc(0x40uLL, 0x10800405C5E1C9BuLL);
  if (v4)
  {
    int v5 = malloc_type_malloc(0x18uLL, 0x10100406AB5462FuLL);
    if (v5)
    {
      void *v4 = v5;
      void v4[6] = 0x89F8E70500000000;
      *int v5 = a1;
      v5[1] = a2;
      v5[2] = a1;
      v4[1] = sub_213CAF0D0;
      v4[2] = sub_213CAF358;
      v4[3] = sub_213CAF190;
      v4[4] = sub_213CAF360;
      void v4[5] = 0;
      v4[7] = 0x1FFFFFFFLL;
    }
    else
    {
      free(v4);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_213CAF358()
{
  return -1;
}

uint64_t sub_213CAF360()
{
  return 22;
}

void *krb5_storage_from_mem_copy(const void *a1, size_t a2)
{
  uint64_t v4 = malloc_type_malloc(0x40uLL, 0x10800405C5E1C9BuLL);
  if (v4)
  {
    int v5 = (uint64_t *)malloc_type_malloc(0x18uLL, 0x10100406AB5462FuLL);
    if (v5)
    {
      size_t v6 = v5;
      void *v4 = v5;
      void v4[6] = 0x89F8E70500000000;
      int v7 = malloc_type_malloc(a2, 0x21F6CBB3uLL);
      *size_t v6 = (uint64_t)v7;
      if (v7)
      {
        memcpy(v7, a1, a2);
        uint64_t v8 = *v6;
        v6[1] = a2;
        v6[2] = v8;
        v4[1] = sub_213CAF0D0;
        v4[2] = sub_213CAF134;
        v4[3] = sub_213CAF190;
        v4[4] = sub_213CAF228;
        void v4[5] = sub_213CAF484;
        return v4;
      }
      free(v4);
      unsigned int v9 = v6;
    }
    else
    {
      unsigned int v9 = v4;
    }
    free(v9);
    return 0;
  }
  return v4;
}

void sub_213CAF484(void ***a1)
{
  int v1 = *a1;
  bzero(**a1, (size_t)(*a1)[1]);
  int v2 = *v1;

  free(v2);
}

uint64_t krb5_storage_set_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) |= a2;
  return result;
}

uint64_t krb5_storage_clear_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) &= ~a2;
  return result;
}

BOOL krb5_storage_is_flags(uint64_t a1, int a2)
{
  return (a2 & ~*(_DWORD *)(a1 + 48)) == 0;
}

uint64_t krb5_storage_set_byteorder(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(result + 48) & 0xFFFFFF9F | a2;
  return result;
}

uint64_t krb5_storage_get_byteorder(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) & 0x60;
}

uint64_t krb5_storage_seek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t krb5_storage_truncate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t krb5_storage_read(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t krb5_storage_write(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t krb5_storage_set_eof_code(uint64_t result, int a2)
{
  *(_DWORD *)(result + 52) = a2;
  return result;
}

uint64_t krb5_storage_get_eof_code(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t krb5_storage_free(uint64_t a1)
{
  int v2 = *(void (**)(uint64_t))(a1 + 40);
  if (v2) {
    v2(a1);
  }
  free(*(void **)a1);
  free((void *)a1);
  return 0;
}

uint64_t krb5_storage_to_data(uint64_t a1, size_t *a2)
{
  uint64_t v4 = 2314790665;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a1 + 24))(a1, 0, 1);
  if (v5 < 0) {
    return 2314790664;
  }
  uint64_t v6 = v5;
  int64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a1 + 24))(a1, 0, 2);
  if (v7 <= 102400)
  {
    int64_t v8 = v7;
    int64_t v9 = *(void *)(a1 + 56);
    if (!v9 || v9 >= v7)
    {
      uint64_t v4 = krb5_data_alloc(a2, v7);
      if (!v4)
      {
        if (!v8) {
          return 0;
        }
        (*(void (**)(uint64_t, void, void))(a1 + 24))(a1, 0, 0);
        (*(void (**)(uint64_t, size_t, size_t))(a1 + 8))(a1, a2[1], *a2);
        uint64_t v4 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, void))(a1 + 24))(a1, v6, 0);
    }
  }
  return v4;
}

uint64_t krb5_store_int32(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1 + 48) & 0x60) != 0x40 && (*(_DWORD *)(a1 + 48) & 1) == 0)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20) {
      a2 = sub_213CB9564(a2);
    }
  }
  else
  {
    a2 = bswap32(a2);
  }

  return sub_213CAF6DC(a1, a2, 4);
}

uint64_t sub_213CAF6DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  _krb5_put_int((uint64_t)v8, a2, a3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(a1 + 16))(a1, v8, a3);
  if (v5 < 0)
  {
    int64_t v7 = __error();
  }
  else
  {
    if (v5 == a3) {
      return 0;
    }
    int64_t v7 = (int *)(a1 + 52);
  }
  return *v7;
}

uint64_t krb5_ret_int32(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = sub_213CAF7F4(a1, a2, 4);
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 48) & 0x60) == 0x40 || (*(_DWORD *)(a1 + 48))
    {
      unsigned int v6 = bswap32(*a2);
LABEL_9:
      *a2 = v6;
      return v4;
    }
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20)
    {
      unsigned int v6 = sub_213CB9564(*a2);
      goto LABEL_9;
    }
  }
  return v4;
}

uint64_t sub_213CAF7F4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v8 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 8))(a1, v9);
  if (v6 < 0) {
    return *__error();
  }
  if (v6 != a3) {
    return *(unsigned int *)(a1 + 52);
  }
  _krb5_get_int(v9, &v8, a3);
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

uint64_t krb5_ret_uint32(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = 0;
  uint64_t result = krb5_ret_int32(a1, &v4);
  if (!result) {
    *a2 = v4;
  }
  return result;
}

uint64_t krb5_store_int16(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1 + 48) & 0x60) != 0x40 && (*(_DWORD *)(a1 + 48) & 1) == 0)
  {
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20) {
      LOWORD(a2) = sub_213CB956C((unsigned __int16)a2);
    }
  }
  else
  {
    a2 = bswap32(a2) >> 16;
  }

  return sub_213CAF6DC(a1, (__int16)a2, 2);
}

uint64_t krb5_store_uint16(uint64_t a1, __int16 a2)
{
  return krb5_store_int16(a1, a2);
}

uint64_t krb5_ret_int16(uint64_t a1, _WORD *a2)
{
  unsigned int v9 = 0;
  uint64_t v4 = sub_213CAF7F4(a1, &v9, 2);
  if (!v4)
  {
    unsigned int v5 = v9;
    *a2 = v9;
    if (*(_DWORD *)(a1 + 48) & 0x60) == 0x40 || (*(_DWORD *)(a1 + 48))
    {
      unsigned int v7 = bswap32(v5) >> 16;
LABEL_9:
      *a2 = v7;
      return v4;
    }
    if ((*(_DWORD *)(a1 + 48) & 0x60) == 0x20)
    {
      LOWORD(v7) = sub_213CB956C((unsigned __int16)v5);
      goto LABEL_9;
    }
  }
  return v4;
}

uint64_t krb5_ret_uint16(uint64_t a1, _WORD *a2)
{
  __int16 v4 = 0;
  uint64_t result = krb5_ret_int16(a1, &v4);
  if (!result) {
    *a2 = v4;
  }
  return result;
}

uint64_t krb5_store_int8(uint64_t a1, char a2)
{
  char v6 = a2;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 16))(a1, &v6, 1);
  if (v3 == 1) {
    return 0;
  }
  if (v3 < 0) {
    unsigned int v5 = __error();
  }
  else {
    unsigned int v5 = (int *)(a1 + 52);
  }
  return *v5;
}

uint64_t krb5_store_uint8(uint64_t a1, char a2)
{
  return krb5_store_int8(a1, a2);
}

uint64_t krb5_ret_int8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, a2, 1);
  if (v3 == 1) {
    return 0;
  }
  if (v3 < 0) {
    unsigned int v5 = __error();
  }
  else {
    unsigned int v5 = (int *)(a1 + 52);
  }
  return *v5;
}

uint64_t krb5_ret_uint8(uint64_t a1, unsigned char *a2)
{
  char v7 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v7, 1);
  if (v4 == 1 || (v4 < 0 ? (unsigned int v5 = __error()) : (unsigned int v5 = (int *)(a1 + 52)), result = *v5, !result))
  {
    uint64_t result = 0;
    *a2 = v7;
  }
  return result;
}

uint64_t krb5_store_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 2314790665;
  if (a2 <= 102400)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (!v6 || v6 >= a2)
    {
      uint64_t result = krb5_store_int32(a1, a2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a1, a3, a2);
        if (v9 < 0)
        {
          uint64_t v10 = __error();
        }
        else
        {
          if (v9 == a2) {
            return 0;
          }
          uint64_t v10 = (int *)(a1 + 52);
        }
        return *v10;
      }
    }
  }
  return result;
}

uint64_t krb5_ret_data(uint64_t a1, size_t *a2)
{
  int v9 = 0;
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v9);
  if (!result)
  {
    uint64_t result = 2314790665;
    uint64_t v5 = v9;
    if (v9 <= 102400)
    {
      uint64_t v6 = *(void *)(a1 + 56);
      if (!v6 || v6 >= v9)
      {
        uint64_t result = krb5_data_alloc(a2, v9);
        if (!result)
        {
          if (v5
            && (uint64_t v7 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(a1 + 8))(a1, a2[1], v5), v7 != v5))
          {
            if (v7 < 0) {
              unint64_t v8 = __error();
            }
            else {
              unint64_t v8 = (int *)(a1 + 52);
            }
            return *v8;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t krb5_store_string(uint64_t a1, char *__s)
{
  int64_t v4 = strlen(__s);
  v8[0] = v4;
  v8[1] = __s;
  if (v4 > 2048 || ((v5 = *(void *)(a1 + 56)) != 0 ? (BOOL v6 = v5 < v4) : (BOOL v6 = 0), v6))
  {
    krb5_data_free(v8);
    return 2314790665;
  }
  else
  {
    return krb5_store_data(a1, v4, (uint64_t)__s);
  }
}

uint64_t krb5_ret_string(uint64_t a1, void *a2)
{
  uint64_t v8 = 0;
  ptr = 0;
  uint64_t result = krb5_ret_data(a1, (size_t *)&v8);
  if (!result)
  {
    if (v8 > 2048 || (int64_t v5 = *(void *)(a1 + 56)) != 0 && v5 < v8)
    {
      krb5_data_free(&v8);
      return 2314790665;
    }
    else
    {
      BOOL v6 = malloc_type_realloc(ptr, v8 + 1, 0x81D058A7uLL);
      *a2 = v6;
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t result = 0;
        v7[v8] = 0;
      }
      else
      {
        free(ptr);
        return 12;
      }
    }
  }
  return result;
}

uint64_t krb5_store_stringz(uint64_t a1, char *__s)
{
  uint64_t v4 = 2314790665;
  int64_t v5 = strlen(__s) + 1;
  if (v5 <= 2048)
  {
    int64_t v6 = *(void *)(a1 + 56);
    if (!v6 || v6 >= v5)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, char *, int64_t))(a1 + 16))(a1, __s, v5);
      if (v8 < 0 || v8 != v5) {
        return *(unsigned int *)(a1 + 52);
      }
      else {
        return 0;
      }
    }
  }
  return v4;
}

uint64_t krb5_ret_stringz(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  char v11 = 0;
  while (1)
  {
    if ((*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v11, 1) != 1)
    {
      free(v4);
      return *(unsigned int *)(a1 + 52);
    }
    if (v5 == 2048 || ((uint64_t v6 = *(void *)(a1 + 56)) != 0 ? (v7 = v6 <= v5) : (v7 = 0), v7))
    {
      free(v4);
      return 2314790665;
    }
    uint64_t v8 = malloc_type_realloc(v4, v5 + 1, 0xAB045BA3uLL);
    if (!v8) {
      break;
    }
    int v9 = v8;
    v8[v5++] = v11;
    uint64_t v4 = v8;
    if (!v11)
    {
      uint64_t result = 0;
      *a2 = v9;
      return result;
    }
  }
  free(v4);
  return 12;
}

uint64_t krb5_store_stringnl(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, char *, size_t))(a1 + 16))(a1, __s, v4);
  if ((v5 & 0x8000000000000000) == 0
    && v5 == v4
    && (*(uint64_t (**)(uint64_t, const char *, uint64_t))(a1 + 16))(a1, "\n", 1) == 1)
  {
    return 0;
  }
  else
  {
    return *(unsigned int *)(a1 + 52);
  }
}

uint64_t krb5_ret_stringnl(uint64_t a1, void *a2)
{
  char v11 = 0;
  if ((*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v11, 1) == 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    while (1)
    {
      if (v11 == 13)
      {
        int v6 = 1;
      }
      else
      {
        if (v6 && v11 != 10)
        {
          free(v5);
          return 2529639050;
        }
        if (v4 + 1 > 2048 || (uint64_t v7 = *(void *)(a1 + 56)) != 0 && v7 < v4 + 1)
        {
          free(v5);
          return 2314790665;
        }
        uint64_t v8 = malloc_type_realloc(v5, v4 + 1, 0xC251BC83uLL);
        if (!v8)
        {
          free(v5);
          return 12;
        }
        int v9 = v8;
        if (v11 == 10)
        {
          uint64_t result = 0;
          v9[v4] = 0;
          *a2 = v9;
          return result;
        }
        v8[v4] = v11;
        uint64_t v5 = v8;
        ++v4;
      }
      if ((*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v11, 1) != 1) {
        goto LABEL_16;
      }
    }
  }
  uint64_t v5 = 0;
LABEL_16:
  free(v5);
  return *(unsigned int *)(a1 + 52);
}

uint64_t krb5_store_principal(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 4) == 0)
  {
    uint64_t result = krb5_store_int32(a1, *(_DWORD *)a2);
    if (result) {
      return result;
    }
    unsigned int v4 = *(_DWORD *)(a1 + 48);
  }
  uint64_t result = krb5_store_int32(a1, *(_DWORD *)(a2 + 8) + ((v4 >> 1) & 1));
  if (!result)
  {
    uint64_t result = krb5_store_string(a1, *(char **)(a2 + 24));
    if (!result)
    {
      if (*(_DWORD *)(a2 + 8))
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t result = krb5_store_string(a1, *(char **)(*(void *)(a2 + 16) + 8 * v6));
          if (result) {
            break;
          }
          ++v6;
        }
        while (v6 < *(unsigned int *)(a2 + 8));
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t krb5_ret_principal(uint64_t a1, void *a2)
{
  unsigned int v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10900408A8AD7E9uLL);
  if (!v4) {
    return 12;
  }
  uint64_t v5 = v4;
  unsigned int v17 = 0;
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    unsigned int v17 = 0;
  }
  else
  {
    uint64_t v6 = krb5_ret_int32(a1, &v17);
    if (v6)
    {
LABEL_7:
      uint64_t v7 = v6;
      goto LABEL_8;
    }
  }
  unsigned int v16 = 0;
  uint64_t v6 = krb5_ret_int32(a1, &v16);
  if (v6) {
    goto LABEL_7;
  }
  int v8 = *(_DWORD *)(a1 + 48) << 30;
  size_t v9 = v16 + (v8 >> 31);
  if ((int)(v16 + (v8 >> 31)) < 0)
  {
    free(v5);
    return 22;
  }
  unint64_t v10 = *(void *)(a1 + 56);
  if (v10 && v10 >> 3 < v9)
  {
    free(v5);
    return 2314790665;
  }
  *uint64_t v5 = v17;
  v5[2] = v9;
  uint64_t v6 = krb5_ret_string(a1, (void *)v5 + 3);
  if (v6) {
    goto LABEL_7;
  }
  char v11 = malloc_type_calloc(v9, 8uLL, 0x10040436913F5uLL);
  *((void *)v5 + 2) = v11;
  if (v9 && !v11)
  {
    free(*((void **)v5 + 3));
    free(v5);
    return 12;
  }
  if (!v9)
  {
LABEL_24:
    uint64_t v7 = 0;
    *a2 = v5;
    return v7;
  }
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t v14 = krb5_ret_string(a1, (void *)(*((void *)v5 + 2) + 8 * v13));
    if (v14) {
      break;
    }
    if (++v13 == v9) {
      goto LABEL_24;
    }
  }
  uint64_t v7 = v14;
  do
    free(*(void **)(*((void *)v5 + 2) + 8 * v13));
  while (v13-- > 0);
  free(*((void **)v5 + 3));
LABEL_8:
  free(v5);
  return v7;
}

uint64_t krb5_store_keyblock(uint64_t a1, __int16 *a2)
{
  uint64_t result = krb5_store_int16(a1, *a2);
  if (!result)
  {
    if ((*(unsigned char *)(a1 + 48) & 8) == 0 || (uint64_t result = krb5_store_int16(a1, *a2), !result))
    {
      uint64_t v5 = *((void *)a2 + 1);
      uint64_t v6 = *((void *)a2 + 2);
      return krb5_store_data(a1, v5, v6);
    }
  }
  return result;
}

uint64_t krb5_ret_keyblock(uint64_t a1, uint64_t a2)
{
  __int16 v5 = 0;
  uint64_t result = krb5_ret_int16(a1, &v5);
  if (!result)
  {
    *(_DWORD *)a2 = v5;
    if ((*(unsigned char *)(a1 + 48) & 8) == 0 || (uint64_t result = krb5_ret_int16(a1, &v5), !result))
    {
      return krb5_ret_data(a1, (size_t *)(a2 + 8));
    }
  }
  return result;
}

uint64_t krb5_store_times(uint64_t a1, unsigned int *a2)
{
  uint64_t result = krb5_store_int32(a1, *a2);
  if (!result)
  {
    uint64_t result = krb5_store_int32(a1, a2[2]);
    if (!result)
    {
      uint64_t result = krb5_store_int32(a1, a2[4]);
      if (!result)
      {
        unsigned int v5 = a2[6];
        return krb5_store_int32(a1, v5);
      }
    }
  }
  return result;
}

uint64_t krb5_ret_times(uint64_t a1, void *a2)
{
  int v5 = 0;
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
  *a2 = v5;
  if (!result)
  {
    uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
    a2[1] = v5;
    if (!result)
    {
      uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
      a2[2] = v5;
      if (!result)
      {
        uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v5);
        a2[3] = v5;
      }
    }
  }
  return result;
}

uint64_t krb5_store_address(uint64_t a1, __int16 *a2)
{
  uint64_t result = krb5_store_int16(a1, *a2);
  if (!result)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *((void *)a2 + 2);
    return krb5_store_data(a1, v5, v6);
  }
  return result;
}

uint64_t krb5_ret_address(uint64_t a1, uint64_t a2)
{
  __int16 v5 = 0;
  uint64_t result = krb5_ret_int16(a1, &v5);
  if (!result)
  {
    *(_DWORD *)a2 = v5;
    return krb5_ret_data(a1, (size_t *)(a2 + 8));
  }
  return result;
}

uint64_t krb5_store_addrs(uint64_t a1, unsigned int a2, long long *a3)
{
  LODWORD(v4) = a2;
  uint64_t result = krb5_store_int32(a1, a2);
  if (!result)
  {
    uint64_t v4 = v4;
    if (v4)
    {
      while (1)
      {
        long long v7 = *a3;
        uint64_t v8 = *((void *)a3 + 2);
        uint64_t result = krb5_store_address(a1, (__int16 *)&v7);
        if (result) {
          break;
        }
        a3 = (long long *)((char *)a3 + 24);
        if (!--v4) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t krb5_ret_addrs(uint64_t a1, unsigned int *a2)
{
  LODWORD(count) = 0;
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&count);
  if (!result)
  {
    size_t v5 = count;
    unint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      BOOL v7 = v6 / 0x18 >= (int)count;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      *a2 = count;
      uint64_t v8 = malloc_type_calloc(v5, 0x18uLL, 0x10800404ACF7207uLL);
      *((void *)a2 + 1) = v8;
      int v9 = *a2;
      if (v8)
      {
        if (v9)
        {
          uint64_t v10 = 0;
          unint64_t v11 = 0;
          while (1)
          {
            uint64_t result = krb5_ret_address(a1, *((void *)a2 + 1) + v10);
            if (result) {
              break;
            }
            ++v11;
            v10 += 24;
            if (v11 >= *a2) {
              return 0;
            }
          }
        }
        else
        {
          return 0;
        }
      }
      else if (v9)
      {
        return 12;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 2314790665;
    }
  }
  return result;
}

uint64_t krb5_store_authdata(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result = krb5_store_int32(a1, a2);
  if (!result)
  {
    if (a2)
    {
      uint64_t v7 = a2 - 1;
      uint64_t v8 = (uint64_t *)(a3 + 16);
      do
      {
        if (krb5_store_int16(a1, *((__int16 *)v8 - 8))) {
          break;
        }
        BOOL v9 = krb5_store_data(a1, *(v8 - 1), *v8) || v7-- == 0;
        v8 += 3;
      }
      while (!v9);
    }
    return 0;
  }
  return result;
}

uint64_t krb5_ret_authdata(uint64_t a1, uint64_t a2)
{
  int v15 = 0;
  uint64_t result = krb5_ret_int32(a1, (unsigned int *)&v15);
  if (!result)
  {
    uint64_t v5 = v15;
    size_t v6 = v15;
    unint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      BOOL v8 = v7 / 0x18 >= v15;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      *(_DWORD *)a2 = v15;
      BOOL v9 = malloc_type_calloc(v6, 0x18uLL, 0x10800404ACF7207uLL);
      *(void *)(a2 + 8) = v9;
      if (v9) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v5 == 0;
      }
      if (v10)
      {
        if ((int)v5 < 1)
        {
          return 0;
        }
        else
        {
          uint64_t v11 = 0;
          __int16 v14 = 0;
          uint64_t v12 = 24 * v5;
          do
          {
            uint64_t result = krb5_ret_int16(a1, &v14);
            if (result) {
              break;
            }
            uint64_t v13 = *(void *)(a2 + 8);
            *(_DWORD *)(v13 + v11) = v14;
            uint64_t result = krb5_ret_data(a1, (size_t *)(v13 + v11 + 8));
            if (result) {
              break;
            }
            v11 += 24;
          }
          while (v12 != v11);
        }
      }
      else
      {
        return 12;
      }
    }
    else
    {
      return 2314790665;
    }
  }
  return result;
}

uint64_t krb5_store_creds(uint64_t a1, uint64_t a2)
{
  uint64_t result = krb5_store_principal(a1, *(void *)a2);
  if (!result)
  {
    uint64_t result = krb5_store_principal(a1, *(void *)(a2 + 8));
    if (!result)
    {
      long long v12 = *(_OWORD *)(a2 + 16);
      *(void *)&long long v13 = *(void *)(a2 + 32);
      uint64_t result = krb5_store_keyblock(a1, (__int16 *)&v12);
      if (!result)
      {
        long long v5 = *(_OWORD *)(a2 + 56);
        long long v12 = *(_OWORD *)(a2 + 40);
        long long v13 = v5;
        uint64_t result = krb5_store_times(a1, (unsigned int *)&v12);
        if (!result)
        {
          uint64_t result = krb5_store_int8(a1, *(void *)(a2 + 88) != 0);
          if (!result)
          {
            unsigned int v6 = *(_DWORD *)(a2 + 136);
            if ((*(unsigned char *)(a1 + 48) & 0x80) != 0)
            {
              uint64_t v9 = a1;
            }
            else
            {
              int v7 = TicketFlags2int(*(unsigned int *)(a2 + 136));
              unsigned int v6 = 0;
              int v8 = 32;
              do
              {
                unsigned int v6 = v7 & 1 | (2 * v6);
                v7 >>= 1;
                --v8;
              }
              while (v8);
              uint64_t v9 = a1;
            }
            uint64_t result = krb5_store_int32(v9, v6);
            if (!result)
            {
              uint64_t result = krb5_store_addrs(a1, *(void *)(a2 + 120), *(long long **)(a2 + 128));
              if (!result)
              {
                uint64_t result = krb5_store_authdata(a1, *(void *)(a2 + 104), *(void *)(a2 + 112));
                if (!result)
                {
                  uint64_t result = krb5_store_data(a1, *(void *)(a2 + 72), *(void *)(a2 + 80));
                  if (!result)
                  {
                    uint64_t v10 = *(void *)(a2 + 88);
                    uint64_t v11 = *(void *)(a2 + 96);
                    return krb5_store_data(a1, v10, v11);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t krb5_ret_creds(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t result = krb5_ret_principal(a1, (void *)a2);
  if (!result)
  {
    uint64_t result = krb5_ret_principal(a1, (void *)(a2 + 8));
    if (!result)
    {
      uint64_t result = krb5_ret_keyblock(a1, a2 + 16);
      if (!result)
      {
        uint64_t result = krb5_ret_times(a1, (void *)(a2 + 40));
        if (!result)
        {
          char v11 = 0;
          uint64_t v5 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v11, 1);
          if (v5 == 1
            || (v5 < 0 ? (unsigned int v6 = __error()) : (unsigned int v6 = (int *)(a1 + 52)), result = *v6, !result))
          {
            unsigned int v10 = 0;
            uint64_t result = krb5_ret_int32(a1, &v10);
            if (!result)
            {
              int v7 = v10;
              if (v10 >= 0x10000)
              {
                int v8 = 0;
                int v9 = 32;
                do
                {
                  int v8 = v7 & 1 | (2 * v8);
                  v7 >>= 1;
                  --v9;
                }
                while (v9);
              }
              else
              {
                int v8 = v10;
              }
              *(_DWORD *)(a2 + 136) = v8;
              uint64_t result = krb5_ret_addrs(a1, (unsigned int *)(a2 + 120));
              if (!result)
              {
                uint64_t result = krb5_ret_authdata(a1, a2 + 104);
                if (!result)
                {
                  uint64_t result = krb5_ret_data(a1, (size_t *)(a2 + 72));
                  if (!result) {
                    return krb5_ret_data(a1, (size_t *)(a2 + 88));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t krb5_store_creds_tag(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void *)a2 != 0;
  if (*(void *)(a2 + 8)) {
    v4 |= 2u;
  }
  uint64_t v5 = (long long *)(a2 + 16);
  if (*(_DWORD *)(a2 + 16)) {
    v4 |= 4u;
  }
  if (*(void *)(a2 + 80)) {
    v4 |= 8u;
  }
  if (*(void *)(a2 + 88)) {
    v4 |= 0x10u;
  }
  if (*(_DWORD *)(a2 + 104)) {
    v4 |= 0x20u;
  }
  if (*(_DWORD *)(a2 + 120)) {
    unsigned int v6 = v4 | 0x40;
  }
  else {
    unsigned int v6 = v4;
  }
  uint64_t result = krb5_store_int32(a1, v6);
  if (!result)
  {
    if (!*(void *)a2 || (uint64_t result = krb5_store_principal(a1, *(void *)a2), !result))
    {
      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8 || (uint64_t result = krb5_store_principal(a1, v8), !result))
      {
        if (!*(_DWORD *)v5
          || (long long v15 = *v5,
              *(void *)&long long v16 = *((void *)v5 + 2),
              uint64_t result = krb5_store_keyblock(a1, (__int16 *)&v15),
              !result))
        {
          long long v9 = *(_OWORD *)(a2 + 56);
          long long v15 = *(_OWORD *)(a2 + 40);
          long long v16 = v9;
          uint64_t result = krb5_store_times(a1, (unsigned int *)&v15);
          if (!result)
          {
            uint64_t result = krb5_store_int8(a1, *(void *)(a2 + 88) != 0);
            if (!result)
            {
              int v10 = TicketFlags2int(*(unsigned int *)(a2 + 136));
              unsigned int v11 = 0;
              int v12 = 32;
              do
              {
                unsigned int v11 = v10 & 1 | (2 * v11);
                v10 >>= 1;
                --v12;
              }
              while (v12);
              uint64_t result = krb5_store_int32(a1, v11);
              if (!result)
              {
                if (!*(_DWORD *)(a2 + 120)
                  || (uint64_t result = krb5_store_addrs(a1, *(void *)(a2 + 120), *(long long **)(a2 + 128)), !result))
                {
                  if (!*(_DWORD *)(a2 + 104)
                    || (uint64_t result = krb5_store_authdata(a1, *(void *)(a2 + 104), *(void *)(a2 + 112)), !result))
                  {
                    uint64_t v13 = *(void *)(a2 + 80);
                    if (!v13 || (uint64_t result = krb5_store_data(a1, *(void *)(a2 + 72), v13), !result))
                    {
                      uint64_t v14 = *(void *)(a2 + 96);
                      if (!v14) {
                        return 0;
                      }
                      uint64_t result = krb5_store_data(a1, *(void *)(a2 + 88), v14);
                      if (!result) {
                        return 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t krb5_ret_creds_tag(uint64_t a1, uint64_t a2)
{
  char v13 = 0;
  unsigned int v11 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  uint64_t result = krb5_ret_int32(a1, &v11);
  if (!result)
  {
    char v5 = v11;
    if ((v11 & 1) == 0 || (uint64_t result = krb5_ret_principal(a1, (void *)a2), !result))
    {
      if ((v5 & 2) == 0 || (uint64_t result = krb5_ret_principal(a1, (void *)(a2 + 8)), !result))
      {
        if ((v5 & 4) == 0 || (uint64_t result = krb5_ret_keyblock(a1, a2 + 16), !result))
        {
          uint64_t result = krb5_ret_times(a1, (void *)(a2 + 40));
          if (!result)
          {
            uint64_t v6 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 8))(a1, &v13, 1);
            if (v6 == 1
              || (v6 < 0 ? (int v7 = __error()) : (int v7 = (int *)(a1 + 52)), result = *v7, !result))
            {
              unsigned int v12 = 0;
              uint64_t result = krb5_ret_int32(a1, &v12);
              if (!result)
              {
                int v8 = v12;
                if (v12 >= 0x10000)
                {
                  int v9 = 0;
                  int v10 = 32;
                  do
                  {
                    int v9 = v8 & 1 | (2 * v9);
                    v8 >>= 1;
                    --v10;
                  }
                  while (v10);
                }
                else
                {
                  int v9 = v12;
                }
                *(_DWORD *)(a2 + 136) = v9;
                if ((v5 & 0x40) == 0 || (uint64_t result = krb5_ret_addrs(a1, (unsigned int *)(a2 + 120)), !result))
                {
                  if ((v5 & 0x20) == 0 || (uint64_t result = krb5_ret_authdata(a1, a2 + 104), !result))
                  {
                    if ((v5 & 8) == 0 || (uint64_t result = krb5_ret_data(a1, (size_t *)(a2 + 72)), !result))
                    {
                      if ((v5 & 0x10) != 0) {
                        return krb5_ret_data(a1, (size_t *)(a2 + 88));
                      }
                      else {
                        return 0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t krb5_store_uuid(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(a1, a2, 16) == 16) {
    return 0;
  }
  else {
    return 2314790666;
  }
}

uint64_t krb5_ret_uuid(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, a2, 16) == 16) {
    return 0;
  }
  else {
    return 2314790666;
  }
}

void krb5_free_ticket(krb5_context a1, krb5_ticket *a2)
{
}

krb5_error_code krb5_copy_ticket(krb5_context a1, const krb5_ticket *a2, krb5_ticket **a3)
{
  *a3 = 0;
  uint64_t v6 = malloc_type_malloc(0x98uLL, 0x10B0040764A81A9uLL);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    krb5_error_code v8 = sub_213CBB3D0();
    if (v8)
    {
      krb5_error_code v9 = v8;
    }
    else
    {
      krb5_error_code v10 = krb5_copy_principal(a1, *(krb5_const_principal *)&a2[2].enc_part.kvno, (krb5_principal *)(v7 + 136));
      if (v10)
      {
        krb5_error_code v9 = v10;
      }
      else
      {
        krb5_error_code v9 = krb5_copy_principal(a1, *(krb5_const_principal *)&a2[2].enc_part.ciphertext.magic, (krb5_principal *)(v7 + 144));
        if (!v9)
        {
          *a3 = (krb5_ticket *)v7;
          return v9;
        }
        krb5_free_principal(a1, *(krb5_principal *)(v7 + 136));
      }
      sub_213CBB3C0(v7);
    }
    free((void *)v7);
  }
  else
  {
    krb5_error_code v9 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v9;
}

uint64_t krb5_ticket_get_client(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  return krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 136), a3);
}

uint64_t krb5_ticket_get_server(_krb5_context *a1, uint64_t a2, krb5_principal *a3)
{
  return krb5_copy_principal(a1, *(krb5_const_principal *)(a2 + 144), a3);
}

uint64_t krb5_ticket_get_endtime(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t _krb5_get_ad(_krb5_context *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v13 = 0;
  krb5_data_zero(a5);
  if (!a2)
  {
    krb5_error_code v10 = "No authorization data";
    goto LABEL_7;
  }
  uint64_t v9 = sub_213CB10F8(a1, a4, a5, &v13, 1, a2, 0);
  if (!v9)
  {
    if (v13) {
      return 0;
    }
    uint64_t v12 = a4;
    krb5_error_code v10 = "Have no authorization data of type %d";
LABEL_7:
    uint64_t v9 = 2;
    krb5_set_error_message(a1, 2, v10, v12);
  }
  return v9;
}

uint64_t sub_213CB10F8(_krb5_context *a1, uint64_t a2, void *a3, _DWORD *a4, int a5, unsigned int *a6, int a7)
{
  if (a7 > 9)
  {
    uint64_t v25 = 10;
    krb5_error_code v10 = "Authorization data nested deeper then %d levels, stop searching";
LABEL_3:
    uint64_t v11 = 2;
    uint64_t v12 = a1;
    krb5_error_code v13 = 2;
    goto LABEL_4;
  }
  if (!*a6) {
    return 0;
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  unsigned int v26 = a7 + 1;
  while (1)
  {
    uint64_t v19 = *((void *)a6 + 1);
    int v20 = *(_DWORD *)(v19 + v17);
    if (*a4 || v20 != a2) {
      break;
    }
    uint64_t v23 = der_copy_octet_string();
    if (v23)
    {
      uint64_t v11 = v23;
      krb5_error_code v10 = "malloc: out of memory";
      goto LABEL_29;
    }
    *a4 = 1;
LABEL_23:
    ++v18;
    v17 += 24;
    if (v18 >= *a6) {
      return 0;
    }
  }
  if (v20 == 5)
  {
    if (a5)
    {
      krb5_error_code v10 = "Authorization data contains AND-OR element that is unknown to the application";
      goto LABEL_3;
    }
    goto LABEL_23;
  }
  if (v20 != 1)
  {
    if (a5)
    {
      uint64_t v25 = *(unsigned int *)(v19 + v17);
      krb5_error_code v10 = "Authorization data contains unknown type (%d) ";
      goto LABEL_3;
    }
    goto LABEL_23;
  }
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v22 = sub_213CBB14C(*(void *)(v19 + v17 + 16), *(void *)(v19 + v17 + 8), (uint64_t)v27, 0);
  if (!v22)
  {
    uint64_t v11 = sub_213CB10F8(a1, a2, a3, a4, 0, v27, v26);
    sub_213CBB19C((uint64_t)v27);
    if (v11) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
  uint64_t v11 = v22;
  uint64_t v25 = v22;
  krb5_error_code v10 = "Failed to decode IF_RELEVANT with %d";
LABEL_29:
  uint64_t v12 = a1;
  krb5_error_code v13 = v11;
LABEL_4:
  krb5_set_error_message(v12, v13, v10, v25);
LABEL_5:
  if (*a4)
  {
    krb5_data_free(a3);
    *a4 = 0;
  }
  return v11;
}

uint64_t krb5_ticket_get_authorization_data_type(_krb5_context *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v13 = 0;
  krb5_data_zero(a4);
  krb5_error_code v8 = *(unsigned int **)(a2 + 128);
  if (!v8)
  {
    krb5_error_code v10 = "Ticket have not authorization data";
    goto LABEL_7;
  }
  uint64_t v9 = sub_213CB10F8(a1, a3, a4, &v13, 1, v8, 0);
  if (!v9)
  {
    if (v13) {
      return 0;
    }
    uint64_t v12 = a3;
    krb5_error_code v10 = "Ticket have not authorization data of type %d";
LABEL_7:
    uint64_t v9 = 2;
    krb5_set_error_message(a1, 2, v10, v12);
  }
  return v9;
}

uint64_t sub_213CB1364(uint64_t a1, uint64_t a2, uint64_t a3, const krb5_keyblock *a4, uint64_t a5, krb5_address *const *a6, int a7, char a8, uint64_t a9, uint64_t (*a10)(_krb5_context *a1, const krb5_keyblock *a2, uint64_t a3, uint64_t a4, uint64_t a5), uint64_t a11)
{
  unint64_t v18 = a10;
  uint64_t v66 = 0;
  krb5_principal v67 = 0;
  *(void *)uint64_t v65 = 0;
  if (!a10) {
    unint64_t v18 = sub_213CB193C;
  }
  uint64_t v19 = v18((_krb5_context *)a1, a4, a5, a11, a2);
  if (v19) {
    goto LABEL_4;
  }
  if ((a8 & 0x20) != 0 && a9 && (*(_DWORD *)(a2 + 208) & 0x8000) != 0)
  {
    *(void *)ctype = 0;
    long long seed = 0uLL;
    uint64_t v63 = 0;
    int v61 = 0;
    sub_213C9C004(a1, 5, "processing enc-ap-rep");
    uint64_t v22 = *(void *)(a2 + 288);
    if (!v22 || (padata = krb5_find_padata(*(void *)(v22 + 8), *(_DWORD *)v22, 149, &v61)) == 0)
    {
      uint64_t v19 = 2529638953;
      sub_213C9C004(a1, 5, "KRB5_PADATA_REQ_ENC_PA_REP missing");
      goto LABEL_4;
    }
    uint64_t v24 = padata;
    uint64_t v19 = krb5_crypto_init((_krb5_context *)a1, a4, 0, (krb5_keyblock ***)ctype);
    if (v19)
    {
LABEL_4:
      sub_213C9C004(a1, 5, "_krb5_extract_ticket failed with %d", v19);
      goto LABEL_5;
    }
    uint64_t v25 = sub_213CBB3E4(*((void *)v24 + 2), *((void *)v24 + 1), (uint64_t)&seed, 0);
    if (v25)
    {
      uint64_t v19 = v25;
      krb5_crypto_destroy((_krb5_context *)a1, *(uint64_t *)ctype);
      goto LABEL_4;
    }
    uint64_t v19 = krb5_verify_checksum((krb5_context)a1, ctype[0], (const krb5_checksum *)0x38, *(krb5_const_pointer *)(a9 + 8), *(void *)a9, &seed, v26);
    krb5_crypto_destroy((_krb5_context *)a1, *(uint64_t *)ctype);
    sub_213CBB434((uint64_t)&seed);
    uint64_t v27 = "in";
    if (!v19) {
      uint64_t v27 = "";
    }
    sub_213C9C050((uint64_t *)a1, 5, v19, "enc-ap-rep: %svalid", v27);
    if (v19) {
      goto LABEL_4;
    }
  }
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a2 + 152);
  uint64_t v28 = krb5_data_copy((void *)(a3 + 24), *(const void **)(a2 + 168), *(void *)(a2 + 160));
  if (v28)
  {
    uint64_t v19 = v28;
LABEL_22:
    krb5_clear_error_message((krb5_context)a1);
    goto LABEL_4;
  }
  uint64_t v29 = *(const char **)(a2 + 16);
  long long seed = *(_OWORD *)(a2 + 24);
  uint64_t v63 = *(void *)(a2 + 40);
  uint64_t v19 = _krb5_principalname2krb5_principal(a1, &v67, (uint64_t)&seed, v29);
  if (v19) {
    goto LABEL_4;
  }
  if ((a8 & 1) == 0)
  {
    uint64_t v30 = sub_213CB1A20((krb5_context)a1, a2, *(krb5_const_principal *)a3, v67, (const krb5_keyblock *)(a3 + 16));
    if (v30) {
      goto LABEL_29;
    }
  }
  krb5_free_principal((krb5_context)a1, *(krb5_principal *)a3);
  *(void *)a3 = v67;
  uint64_t v31 = *(const char **)(a2 + 248);
  long long seed = *(_OWORD *)(a2 + 256);
  uint64_t v63 = *(void *)(a2 + 272);
  uint64_t v19 = _krb5_principalname2krb5_principal(a1, &v67, (uint64_t)&seed, v31);
  if (v19) {
    goto LABEL_4;
  }
  if ((a8 & 2) == 0)
  {
    uint64_t v30 = sub_213CB1CBC((krb5_context)a1, a2, a8, *(krb5_const_principal *)(a3 + 8), v67, (const krb5_keyblock *)(a3 + 16));
    if (v30)
    {
LABEL_29:
      uint64_t v19 = v30;
      krb5_free_principal((krb5_context)a1, v67);
      goto LABEL_4;
    }
  }
  krb5_free_principal((krb5_context)a1, *(krb5_principal *)(a3 + 8));
  krb5_principal v32 = v67;
  *(void *)(a3 + 8) = v67;
  if ((a8 & 4) != 0)
  {
    realm = (const char *)krb5_principal_get_realm(a1, (uint64_t)v32);
    int v43 = (const char *)krb5_principal_get_realm(a1, *(void *)a3);
    uint64_t v44 = *(const char **)(a2 + 248);
    if (strcmp(v44, realm) || strcmp(v44, v43))
    {
      uint64_t v19 = 2529638953;
      krb5_set_error_message((krb5_context)a1, -1765328343, "server realm (%s) doesn't match client's (%s)", realm, v43);
      goto LABEL_22;
    }
  }
  if (*(_DWORD *)(a2 + 192) != a7)
  {
    uint64_t v19 = 2529638953;
    uint64_t v45 = "malloc: out of memory";
LABEL_46:
    uint64_t v46 = (_krb5_context *)a1;
    krb5_error_code v47 = -1765328343;
LABEL_57:
    krb5_set_error_message(v46, v47, v45, v58, v59, v60);
    goto LABEL_4;
  }
  krb5_timeofday((krb5_context)a1, v65);
  if ((a8 & 0x10) != 0 && (*(_DWORD *)(a2 + 208) & 0x200) != 0 && !*(_DWORD *)(a1 + 108))
  {
    long long v59 = "kdc_timesync";
    uint64_t v60 = 0;
    if (krb5_config_get_BOOL(a1, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"libdefaults"))
    {
      *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 216) - v65[0];
      krb5_timeofday((krb5_context)a1, v65);
    }
  }
  uint64_t v39 = *(uint64_t **)(a2 + 224);
  if (!v39) {
    uint64_t v39 = (uint64_t *)(a2 + 216);
  }
  uint64_t v40 = *v39;
  uint64_t v41 = *(void *)(a3 + 48);
  if (!v41)
  {
    if (krb5_time_abs(v40, *(uint64_t *)v65) > *(void *)(a1 + 80))
    {
      krb5_time_abs(v40, *(uint64_t *)v65);
      uint64_t v19 = 2529638949;
      krb5_set_error_message((krb5_context)a1, -1765328347, "time skew (%ld) larger than max (%d)");
      goto LABEL_4;
    }
    uint64_t v41 = *(void *)(a3 + 48);
  }
  if (v41 && v40 != v41)
  {
    uint64_t v19 = 2529638953;
    krb5_clear_error_message((krb5_context)a1);
    uint64_t v45 = "startime is not the requested startime";
LABEL_56:
    uint64_t v46 = (_krb5_context *)a1;
    krb5_error_code v47 = 0;
    goto LABEL_57;
  }
  *(void *)(a3 + 48) = v40;
  long long v48 = *(void **)(a2 + 240);
  if (v48) {
    long long v48 = (void *)*v48;
  }
  uint64_t v49 = *(void *)(a3 + 64);
  if (v49 && (uint64_t)v48 > v49)
  {
    uint64_t v19 = 2529638953;
    krb5_clear_error_message((krb5_context)a1);
    uint64_t v45 = "renewtime is past the requested renewtime";
    goto LABEL_56;
  }
  *(void *)(a3 + 64) = v48;
  *(void *)(a3 + 40) = *(void *)(a2 + 216);
  uint64_t v50 = *(void *)(a3 + 56);
  uint64_t v51 = *(void *)(a2 + 232);
  if (v50 && v51 > v50)
  {
    uint64_t v19 = 2529638953;
    krb5_clear_error_message((krb5_context)a1);
    uint64_t v45 = "endtime is past the requested endtime";
    goto LABEL_46;
  }
  *(void *)(a3 + 56) = v51;
  uint64_t v52 = *(krb5_address *const **)(a2 + 280);
  if (v52)
  {
    long long v53 = (krb5_address ***)(a3 + 120);
    long long v54 = (_krb5_context *)a1;
LABEL_66:
    krb5_copy_addresses(v54, v52, v53);
    goto LABEL_67;
  }
  if (a6)
  {
    long long v53 = (krb5_address ***)(a3 + 120);
    long long v54 = (_krb5_context *)a1;
    uint64_t v52 = a6;
    goto LABEL_66;
  }
  *(_DWORD *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
LABEL_67:
  *(_DWORD *)(a3 + 136) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  size_t v55 = sub_213CBB36C(a2 + 48);
  *(void *)(a3 + 72) = v55;
  krb5_data v56 = malloc_type_malloc(v55, 0x699259FEuLL);
  *(void *)(a3 + 80) = v56;
  if (!v56)
  {
    uint64_t v19 = 12;
    goto LABEL_4;
  }
  uint64_t v57 = sub_213CBB34C((uint64_t)v56 + *(void *)(a3 + 72) - 1, *(void *)(a3 + 72), a2 + 48, (uint64_t)&v66);
  if (v57)
  {
    uint64_t v19 = v57;
    free(*(void **)(a3 + 80));
    *(void *)(a3 + 80) = 0;
    goto LABEL_4;
  }
  if (*(void *)(a3 + 72) != v66) {
    krb5_abortx((_krb5_context *)a1, "internal error in ASN.1 encoder");
  }
  uint64_t v19 = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
LABEL_5:
  bzero(*(void **)(a2 + 168), *(void *)(a2 + 160));
  return v19;
}

uint64_t sub_213CB193C(_krb5_context *a1, const krb5_keyblock *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v8 = krb5_crypto_init(a1, a2, 0, &v11);
  if (!v8)
  {
    uint64_t v8 = krb5_decrypt_EncryptedData(a1, (uint64_t)v11, a3, a5 + 120, &v13);
    krb5_crypto_destroy(a1, (uint64_t)v11);
    if (!v8)
    {
      uint64_t v10 = a5 + 152;
      if (sub_213CBB89C(v14, v13, v10, (uint64_t)&v12))
      {
        uint64_t v8 = sub_213CBB8CC(v14, v13, v10, (uint64_t)&v12);
        krb5_data_free(&v13);
        if (v8) {
          krb5_set_error_message(a1, v8, "Failed to decode encpart in ticket");
        }
      }
      else
      {
        krb5_data_free(&v13);
        return 0;
      }
    }
  }
  return v8;
}

uint64_t sub_213CB1A20(krb5_context a1, uint64_t a2, krb5_const_principal a3, krb5_const_principal a4, const krb5_keyblock *a5)
{
  uint64_t v31 = 0;
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  uint64_t v27 = 0;
  *(void *)ctype = 0;
  int v26 = 0;
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9)
  {
    padata = krb5_find_padata(*(void *)(v9 + 8), *(_DWORD *)v9, 133, &v26);
    if (padata)
    {
      uint64_t v12 = sub_213CBBDAC(*((void *)padata + 2), *((void *)padata + 1), (uint64_t)v29, (uint64_t)&v27);
      if (v12)
      {
        uint64_t v13 = v12;
        data = a3->data;
        uint64_t v14 = "Failed to decode ClientCanonicalized from realm %s";
        long long v15 = a1;
        krb5_error_code v16 = v13;
LABEL_5:
        krb5_set_error_message(v15, v16, v14, data);
        return v13;
      }
      uint64_t v18 = sub_213CBBD9C((uint64_t)v29);
      uint64_t v19 = malloc_type_malloc(v18, 0xB2513FC4uLL);
      if (!v19)
      {
        uint64_t v13 = 12;
        goto LABEL_17;
      }
      int v20 = v19;
      uint64_t v21 = sub_213CBBD7C((uint64_t)v19 + v18 - 1, v18, (uint64_t)v29, (uint64_t)&v27);
      if (v21) {
        goto LABEL_15;
      }
      if (v18 != v27) {
        krb5_abortx(a1, "internal asn.1 error");
      }
      uint64_t v21 = krb5_crypto_init(a1, a5, 0, (krb5_keyblock ***)ctype);
      if (v21)
      {
LABEL_15:
        uint64_t v13 = v21;
        free(v20);
LABEL_17:
        sub_213CBBDCC((uint64_t)v29);
        return v13;
      }
      uint64_t v13 = krb5_verify_checksum(a1, ctype[0], (const krb5_checksum *)0xFFFFFFE9, v20, v18, &v30, v22);
      krb5_crypto_destroy(a1, *(uint64_t *)ctype);
      free(v20);
      if (v13)
      {
        krb5_set_error_message(a1, v13, "Failed to verify client canonicalized data from realm %s", (const char *)a3->data);
        goto LABEL_17;
      }
      if (sub_213CA5D38((uint64_t)a1, (uint64_t)a3, (uint64_t)v29))
      {
        if (sub_213CA5D38((uint64_t)a1, (uint64_t)a4, (uint64_t)&v29[1] + 8)) {
          return 0;
        }
        uint64_t v13 = 2529639058;
        sub_213CBBDCC((uint64_t)v29);
        uint64_t v14 = "Mapped name doesn't match in client referral";
      }
      else
      {
        uint64_t v13 = 2529639058;
        sub_213CBBDCC((uint64_t)v29);
        uint64_t v14 = "Requested name doesn't match in client referral";
      }
      long long v15 = a1;
      krb5_error_code v16 = -1765328238;
      goto LABEL_5;
    }
  }
  if (krb5_principal_compare(a1, a3, a4) || (*(unsigned char *)(a2 + 209) & 0x80) != 0) {
    return 0;
  }
  uint64_t v25 = 0;
  krb5_unparse_name(a1, a4, &v25);
  uint64_t v17 = v25;
  if (!v25) {
    uint64_t v17 = "<unknown name>";
  }
  uint64_t v13 = 2529638953;
  krb5_set_error_message(a1, -1765328343, "Not same client principal returned (%s)as requested", v17);
  krb5_xfree(v25);
  return v13;
}

uint64_t sub_213CB1CBC(krb5_context a1, uint64_t a2, char a3, krb5_const_principal a4, krb5_const_principal a5, const krb5_keyblock *a6)
{
  size_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  int v17 = 0;
  uint64_t v9 = *(void *)(a2 + 8);
  if (!v9 || (padata = krb5_find_padata(*(void *)(v9 + 8), *(_DWORD *)v9, 25, &v17)) == 0)
  {
    if (krb5_principal_compare(a1, a4, a5) != 1
      && krb5_realm_compare(a1, a4, a5) != 1
      && !krb5_principal_is_krbtgt((uint64_t)a1, (uint64_t)a5))
    {
      uint64_t v14 = 2529638953;
      krb5_set_error_message(a1, -1765328343, "Not same server principal returned as requested");
      return v14;
    }
    return 0;
  }
  uint64_t v13 = padata;
  memset(v21, 0, sizeof(v21));
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v14 = sub_213CBB258(*((void *)padata + 2), *((void *)padata + 1), (uint64_t)v21, (uint64_t)&v20);
  if (!v14)
  {
    if (v20 != *((void *)v13 + 1))
    {
      uint64_t v14 = 2529638953;
      sub_213CBB2A8((uint64_t)v21);
      krb5_set_error_message(a1, -1765328343, "Referral EncryptedData wrong for realm %s");
      return v14;
    }
    uint64_t v15 = krb5_crypto_init(a1, a6, 0, &v22);
    if (v15)
    {
      uint64_t v14 = v15;
      sub_213CBB2A8((uint64_t)v21);
      return v14;
    }
    uint64_t v14 = krb5_decrypt_EncryptedData(a1, (uint64_t)v22, 26, (uint64_t)v21, &v18);
    sub_213CBB2A8((uint64_t)v21);
    krb5_crypto_destroy(a1, (uint64_t)v22);
    if (!v14)
    {
      uint64_t v14 = sub_213CBBDDC(v19, v18, (uint64_t)&v23, (uint64_t)&v20);
      krb5_data_free(&v18);
      if (!v14)
      {
        if (strcmp((const char *)a4->data, (const char *)a5->data))
        {
          uint64_t v14 = 2529638953;
          sub_213CBBDFC((uint64_t)&v23);
          krb5_set_error_message(a1, -1765328343, "server ref realm mismatch, requested realm %s got back %s");
          return v14;
        }
        if (krb5_principal_is_krbtgt((uint64_t)a1, (uint64_t)a5))
        {
          if (!(void)v23 || strcmp(*(const char **)v23, *((const char **)a5->realm.data + 1)))
          {
            uint64_t v14 = 2529638953;
            sub_213CBBDFC((uint64_t)&v23);
            krb5_set_error_message(a1, -1765328343, "tgt returned with wrong ref");
            return v14;
          }
        }
        else if (!krb5_principal_compare(a1, a5, a4))
        {
          uint64_t v14 = 2529638953;
          sub_213CBBDFC((uint64_t)&v23);
          krb5_set_error_message(a1, -1765328343, "req princ no same as returned");
          return v14;
        }
        if ((void)v24)
        {
          if (!sub_213CA5D38((uint64_t)a1, (uint64_t)a4, v24))
          {
            uint64_t v14 = 2529638953;
            sub_213CBBDFC((uint64_t)&v23);
            krb5_set_error_message(a1, -1765328343, "referred principal not same as requested");
            return v14;
          }
        }
        else if ((a3 & 8) != 0)
        {
          uint64_t v14 = 2529638953;
          sub_213CBBDFC((uint64_t)&v23);
          krb5_set_error_message(a1, -1765328343, "Requested principal missing on AS-REQ");
          return v14;
        }
        sub_213CBBDFC((uint64_t)&v23);
        return 0;
      }
    }
  }
  return v14;
}

krb5_error_code krb5_set_real_time(krb5_context a1, krb5_timestamp a2, krb5_int32 a3)
{
  v10.tv_sec = 0;
  *(void *)&v10.__darwin_suseconds_t tv_usec = 0;
  gettimeofday(&v10, 0);
  __darwin_suseconds_t tv_usec = v10.tv_usec;
  int v7 = a2 - LODWORD(v10.tv_sec);
  *((_DWORD *)a1 + 27) = a2 - LODWORD(v10.tv_sec);
  if (a3 < 0) {
    goto LABEL_4;
  }
  int v8 = a3 - tv_usec;
  *((_DWORD *)a1 + 28) = v8;
  if (v8 < 0)
  {
    __darwin_suseconds_t tv_usec = v8 + 1000000;
    *((_DWORD *)a1 + 27) = v7 - 1;
LABEL_4:
    *((_DWORD *)a1 + 28) = tv_usec;
  }
  return 0;
}

krb5_error_code krb5_timeofday(krb5_context a1, krb5_timestamp *a2)
{
  time_t v4 = time(0);
  *(void *)a2 = v4;
  if (a1) {
    *(void *)a2 = v4 + *((int *)a1 + 27);
  }
  return 0;
}

krb5_error_code krb5_us_timeofday(krb5_context a1, krb5_timestamp *a2, krb5_int32 *a3)
{
  v8.__darwin_time_t tv_sec = 0;
  *(void *)&v8.__darwin_suseconds_t tv_usec = 0;
  gettimeofday(&v8, 0);
  __darwin_time_t tv_sec = v8.tv_sec;
  *(void *)a2 = v8.tv_sec;
  if (a1) {
    *(void *)a2 = tv_sec + *((int *)a1 + 27);
  }
  *a3 = v8.tv_usec;
  return 0;
}

uint64_t krb5_format_time(uint64_t a1, time_t a2, char *a3, size_t a4, int a5)
{
  time_t v12 = a2;
  if (*(_DWORD *)(a1 + 200)) {
    uint64_t v9 = gmtime(&v12);
  }
  else {
    uint64_t v9 = localtime(&v12);
  }
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v10 = 192;
  if (!a5) {
    uint64_t v10 = 272;
  }
  if (!strftime(a3, a4, *(const char **)(a1 + v10), v9)) {
LABEL_8:
  }
    snprintf(a3, a4, "%ld", v12);
  return 0;
}

krb5_error_code krb5_string_to_deltat(char *a1, krb5_deltat *a2)
{
  int v3 = parse_time(a1, "s");
  *(void *)a2 = v3;
  if (v3 == -1) {
    return -1765328136;
  }
  else {
    return 0;
  }
}

uint64_t krb5_time_abs(uint64_t a1, uint64_t a2)
{
  if (a1 - a2 >= 0) {
    return a1 - a2;
  }
  else {
    return a2 - a1;
  }
}

uint64_t krb5_domain_x500_decode(_krb5_context *a1, uint64_t a2, char *a3, void *a4, _DWORD *a5, const char *a6, const char *a7)
{
  if (!a2)
  {
    uint64_t v30 = 0;
    *a4 = 0;
    *a5 = 0;
    return v30;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = a3;
  do
  {
    if (v13)
    {
LABEL_4:
      int v13 = 0;
      goto LABEL_5;
    }
    uint64_t v15 = &a3[v12];
    int v16 = a3[v12];
    if (v16 == 92)
    {
      int v13 = 1;
    }
    else
    {
      if (v16 != 44) {
        goto LABEL_4;
      }
      int v17 = (unsigned __int8 *)malloc_type_malloc(v15 - v14 + 1, 0xBD2F6DFCuLL);
      if (!v17)
      {
        krb5_principal v67 = v11;
        goto LABEL_31;
      }
      uint64_t v18 = v17;
      memcpy(v17, v14, v15 - v14);
      v18[v15 - v14] = 0;
      uint64_t v19 = sub_213CB2A94(v18);
      if (!v19)
      {
        krb5_principal v67 = v11;
        goto LABEL_30;
      }
      if (v11)
      {
        uint64_t v20 = v11;
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (unsigned char *)*((void *)v20 + 2);
        }
        while (v20);
        size_t v22 = v19;
      }
      else
      {
        size_t v22 = 0;
        uint64_t v21 = v19;
        uint64_t v11 = v19;
      }
      int v13 = 0;
      *((void *)v21 + 2) = v22;
      uint64_t v14 = v15 + 1;
    }
LABEL_5:
    ++v12;
  }
  while (v12 != a2);
  krb5_principal v67 = v11;
  size_t v23 = &a3[a2] - v14;
  long long v24 = (unsigned __int8 *)malloc_type_malloc(v23 + 1, 0x9DCDE67DuLL);
  if (!v24)
  {
    free(v11);
    goto LABEL_31;
  }
  uint64_t v25 = v24;
  memcpy(v24, v14, v23);
  v25[v23] = 0;
  int v26 = sub_213CB2A94(v25);
  if (v26)
  {
    if (v11)
    {
      uint64_t v27 = v11;
      do
      {
        uint64_t v28 = v27;
        uint64_t v27 = (unsigned char *)*((void *)v27 + 2);
      }
      while (v27);
      uint64_t v29 = v26;
      int v26 = v11;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v28 = v26;
      uint64_t v11 = v26;
    }
    *((void *)v28 + 2) = v29;
    krb5_principal v67 = v26;
    goto LABEL_32;
  }
LABEL_30:
  sub_213CB2B90((uint64_t)v11);
LABEL_31:
  uint64_t v30 = krb5_enomem(a1);
  if (v30) {
    return v30;
  }
LABEL_32:
  if (!v11)
  {
    *a5 = 0;
LABEL_83:
    unsigned int v58 = 1;
    goto LABEL_84;
  }
  uint64_t v31 = 0;
  krb5_principal v32 = (const char **)v11;
  while (2)
  {
    if (((_BYTE)v32[1] & 4) == 0)
    {
      if (((_BYTE)v32[1] & 2) != 0 && ((_BYTE)v32[1] & 1) == 0 && v31)
      {
        size_t v33 = strlen(*v32);
        size_t v34 = v33 + strlen(v31) + 1;
        uint64_t v35 = (char *)malloc_type_malloc(v34, 0x7E620E67uLL);
        if (!v35) {
          break;
        }
        uint64_t v36 = v35;
        strlcpy(v35, v31, v34);
        strlcat(v36, *v32, v34);
        free((void *)*v32);
        void *v32 = v36;
      }
      goto LABEL_44;
    }
    if (!v31) {
      uint64_t v31 = a6;
    }
    size_t v37 = strlen(*v32);
    size_t v38 = v37 + strlen(v31) + 1;
    uint64_t v39 = (char *)malloc_type_realloc((void *)*v32, v38, 0xC2ED25DAuLL);
    if (v39)
    {
      void *v32 = v39;
      strlcat(v39, v31, v38);
LABEL_44:
      uint64_t v31 = *v32;
      krb5_principal v32 = (const char **)v32[2];
      if (!v32) {
        goto LABEL_45;
      }
      continue;
    }
    break;
  }
  sub_213CB2B90((uint64_t)v11);
  uint64_t v30 = krb5_enomem(a1);
  if (v30) {
    return v30;
  }
LABEL_45:
  uint64_t v40 = (const char **)v11;
  do
  {
    if (!**v40)
    {
      while (1)
      {
        uint64_t v41 = v40;
        uint64_t v40 = (const char **)v40[2];
        if (!v40) {
          break;
        }
        uint64_t v42 = *v40;
        if (**v40) {
          goto LABEL_52;
        }
      }
      uint64_t v42 = a7;
LABEL_52:
      size_t v43 = strlen(a6);
      size_t v44 = strlen(v42);
      if (v43 >= v44) {
        uint64_t v45 = (char *)a6;
      }
      else {
        uint64_t v45 = (char *)v42;
      }
      if (v43 >= v44) {
        a6 = v42;
      }
      uint64_t v46 = &v45[strlen(v45)];
      size_t v47 = strlen(a6);
      if (!strcmp(&v46[-v47], a6))
      {
        while (1)
        {
          uint64_t v52 = strchr(v45, 46);
          if (!v52) {
            break;
          }
          uint64_t v45 = v52 + 1;
          if (!strcmp(v52 + 1, a6)) {
            goto LABEL_73;
          }
          long long v53 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x10300401532B4FEuLL);
          if (!v53) {
            goto LABEL_72;
          }
          uint64_t v50 = v53;
          v53[2] = (char *)v41[2];
          v41[2] = (const char *)v53;
          long long v54 = strdup(v45);
          *uint64_t v50 = v54;
          if (!v54)
          {
LABEL_71:
            v41[2] = v50[2];
            free(v50);
LABEL_72:
            uint64_t v55 = krb5_enomem(a1);
            if (!v55) {
              goto LABEL_73;
            }
            uint64_t v30 = v55;
            goto LABEL_95;
          }
        }
      }
      else if (!strncmp(v45, a6, v47))
      {
        while (1)
        {
          if (v46 < v45 || *v46 == 47)
          {
            int64_t v48 = v46 - v45;
            if (v46 == v45)
            {
              uint64_t v30 = 2529638924;
              goto LABEL_95;
            }
            if (!strncmp(a6, v45, v46 - v45)) {
              goto LABEL_73;
            }
            uint64_t v49 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x10300401532B4FEuLL);
            if (!v49) {
              goto LABEL_72;
            }
            uint64_t v50 = v49;
            void v49[2] = (char *)v41[2];
            v41[2] = (const char *)v49;
            uint64_t v51 = (char *)malloc_type_malloc(v48 + 1, 0xBAD9D264uLL);
            *uint64_t v50 = v51;
            if (!v51) {
              goto LABEL_71;
            }
            memcpy(v51, v45, v46 - v45);
            (*v50)[v48] = 0;
          }
          --v46;
        }
      }
      uint64_t v30 = 2529638924;
      krb5_clear_error_message(a1);
LABEL_95:
      sub_213CB2B90((uint64_t)v11);
      return v30;
    }
    uint64_t v41 = v40;
LABEL_73:
    a6 = *v41;
    uint64_t v40 = (const char **)v41[2];
  }
  while (v40);
  krb5_data v56 = (char *)v67;
  *a5 = 0;
  if (!v56) {
    goto LABEL_83;
  }
  uint64_t v57 = &v67;
  do
  {
    if (**(unsigned char **)v56)
    {
      ++*a5;
      uint64_t v57 = (void **)(v56 + 16);
    }
    else
    {
      *uint64_t v57 = (void *)*((void *)v56 + 2);
      free(*(void **)v56);
      free(v56);
    }
    krb5_data v56 = (char *)*v57;
  }
  while (*v57);
  unsigned int v58 = *a5 + 1;
  if (v58 >> 29) {
    return 34;
  }
LABEL_84:
  long long v59 = malloc_type_malloc(8 * v58, 0x10040436913F5uLL);
  if (v59)
  {
    uint64_t v60 = v59;
    *a4 = v59;
    int v61 = v67;
    if (v67)
    {
      do
      {
        *v60++ = *v61;
        long long v62 = (void *)v61[2];
        free(v61);
        int v61 = v62;
      }
      while (v62);
    }
    return 0;
  }
  else
  {
    return krb5_enomem(a1);
  }
}

uint64_t krb5_domain_x500_encode(const char **a1, unsigned int a2, size_t *a3)
{
  krb5_data_zero(a3);
  if (!a2) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = a2;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  do
  {
    uint64_t v10 = *v9++;
    int v11 = v6 + strlen(v10);
    if (*v10 == 47) {
      int v6 = v11 + 1;
    }
    else {
      int v6 = v11;
    }
    --v8;
  }
  while (v8);
  int v12 = v6 + a2;
  size_t v13 = (int)(v6 + a2);
  uint64_t v14 = (char *)malloc_type_malloc(v12, 0xD07C6E37uLL);
  if (!v14) {
    return 12;
  }
  uint64_t v15 = v14;
  uint64_t v16 = 0;
  *uint64_t v14 = 0;
  do
  {
    if (v16 * 8) {
      strlcat(v15, ",", v13);
    }
    int v17 = a1[v16];
    if (*v17 == 47)
    {
      strlcat(v15, " ", v13);
      int v17 = a1[v16];
    }
    strlcat(v15, v17, v13);
    ++v16;
  }
  while (v7 != v16);
  a3[1] = (size_t)v15;
  size_t v18 = strlen(v15);
  uint64_t result = 0;
  *a3 = v18;
  return result;
}

uint64_t krb5_check_transited(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a5;
  if (a5)
  {
    strings = (void **)krb5_config_get_strings((uint64_t)a1, 0, a3, a4, a5, (uint64_t)a6, a7, a8, (uint64_t)"capaths");
    uint64_t v13 = 0;
LABEL_3:
    if (strings)
    {
      uint64_t v14 = (const char **)strings;
      while (1)
      {
        uint64_t v15 = *v14;
        if (!*v14) {
          break;
        }
        ++v14;
        if (!strcmp(v15, *(const char **)(a4 + 8 * v13)))
        {
          if (++v13 != v8) {
            goto LABEL_3;
          }
          krb5_config_free_strings(strings);
          return 0;
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v8 = 2529638955;
    krb5_config_free_strings(strings);
    krb5_set_error_message(a1, -1765328341, "no transit allowed through realm %s", *(const char **)(a4 + 8 * v13));
    if (a6) {
      *a6 = v13;
    }
  }
  return v8;
}

uint64_t krb5_check_transited_realms(_krb5_context *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a3;
  strings = (void **)krb5_config_get_strings((uint64_t)a1, 0, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
  if (!strings) {
    return 0;
  }
  int v12 = strings;
  uint64_t v13 = 0;
  if (v9)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v9;
    do
    {
      uint64_t v16 = (const char *)*v12;
      if (*v12)
      {
        int v17 = *(const char **)(a2 + 8 * v14);
        size_t v18 = (const char **)(v12 + 1);
        while (strcmp(v16, v17))
        {
          uint64_t v19 = *v18++;
          uint64_t v16 = v19;
          if (!v19) {
            goto LABEL_11;
          }
        }
        krb5_set_error_message(a1, -1765328341, "no transit allowed through realm %s", v16);
        uint64_t v13 = 2529638955;
        if (a4) {
          *a4 = v14;
        }
      }
LABEL_11:
      ++v14;
    }
    while (v14 != v15);
  }
  krb5_config_free_strings(v12);
  return v13;
}

unsigned char *sub_213CB2A94(unsigned __int8 *a1)
{
  int v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x10300401532B4FEuLL);
  int v3 = v2;
  if (v2)
  {
    *(void *)int v2 = a1;
    int v4 = *a1;
    if (*a1)
    {
      int v5 = 0;
      int v6 = a1;
      do
      {
        uint64_t v7 = *(unsigned __int8 **)v2;
        if (v4 == 32 && v6 == v7)
        {
          v2[8] |= 1u;
        }
        else
        {
          if (v4 == 47 && a1 == v7) {
            v2[8] |= 2u;
          }
          int v8 = *v6;
          if (v5) {
            goto LABEL_17;
          }
          if (v8 != 92)
          {
            if (v8 == 46)
            {
              if (v6[1])
              {
                LOBYTE(v8) = 46;
              }
              else
              {
                v2[8] |= 4u;
                LOBYTE(v8) = *v6;
              }
            }
LABEL_17:
            int v5 = 0;
            *a1++ = v8;
            goto LABEL_18;
          }
          int v5 = 1;
        }
LABEL_18:
        int v9 = *++v6;
        int v4 = v9;
      }
      while (v9);
    }
    *a1 = 0;
  }
  else
  {
    free(a1);
  }
  return v3;
}

void sub_213CB2B90(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = *(void *)(v1 + 16);
      free(*(void **)v1);
      free((void *)v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void krb5_verify_init_creds_opt_init(krb5_verify_init_creds_opt *k5_vic_options)
{
  *k5_vic_options = 0;
  k5_vic_options[1] = 0;
}

void krb5_verify_init_creds_opt_set_ap_req_nofail(krb5_verify_init_creds_opt *k5_vic_options, int ap_req_nofail)
{
  k5_vic_options->flags |= 1u;
  k5_vic_options->ap_req_nofail = ap_req_nofail;
}

uint64_t sub_213CB2BEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

krb5_error_code krb5_verify_init_creds(krb5_context context, krb5_creds *creds, krb5_principal ap_req_server, krb5_keytab ap_req_keytab, krb5_ccache *ccache, krb5_verify_init_creds_opt *k5_vic_options)
{
  uint64_t v35 = 0;
  krb5_ccache id = 0;
  krb5_principal v33 = 0;
  krb5_auth_context v34 = 0;
  int v12 = "host";
  krb5_keytab v32 = 0;
  if (k5_vic_options && *(void *)&k5_vic_options[1]) {
    int v12 = (const char *)k5_vic_options[1];
  }
  *(void *)&v37.krb5_magic magic = 0;
  v37.data = 0;
  krb5_data_zero(&v37);
  if (ap_req_server)
  {
    krb5_principal v33 = ap_req_server;
  }
  else
  {
    krb5_error_code v21 = krb5_sname_to_principal(context, 0, v12, 3, &v33);
    if (v21)
    {
      krb5_error_code v13 = v21;
      if (sub_213CB2EB4((uint64_t)context, (uint64_t)k5_vic_options, v22, v23, v24, v25, v26, v27)) {
        krb5_error_code v13 = 0;
      }
      goto LABEL_29;
    }
  }
  if (ap_req_keytab)
  {
    krb5_keytab v32 = ap_req_keytab;
  }
  else
  {
    krb5_error_code v13 = krb5_kt_default(context, &v32);
    if (v13) {
      goto LABEL_29;
    }
  }
  if (ccache && *ccache)
  {
    krb5_ccache id = *ccache;
  }
  else
  {
    krb5_error_code v13 = krb5_cc_new_unique(context, krb5_cc_type_memory[0], 0, &id);
    if (v13) {
      goto LABEL_29;
    }
    krb5_error_code v13 = krb5_cc_initialize(context, id, *(krb5_principal *)&creds->magic);
    if (v13) {
      goto LABEL_29;
    }
    krb5_error_code v13 = krb5_cc_store_cred(context, id, creds);
    if (v13) {
      goto LABEL_29;
    }
  }
  if (!krb5_principal_compare(context, v33, creds->client))
  {
    long long v31 = 0u;
    memset(&v30[16], 0, 112);
    *(void *)uint64_t v30 = *(void *)&creds->magic;
    *(void *)&v30[8] = v33;
    krb5_error_code credentials = krb5_get_credentials(context, 0, id, (krb5_creds *)v30, &v35);
    if (credentials)
    {
      int v14 = credentials;
LABEL_26:
      if (sub_213CB2EB4((uint64_t)context, (uint64_t)k5_vic_options, v15, v16, v17, v18, v19, v20)) {
        krb5_error_code v13 = 0;
      }
      else {
        krb5_error_code v13 = v14;
      }
      goto LABEL_29;
    }
    krb5_creds creds = v35;
  }
  krb5_error_code v13 = krb5_mk_req_extended(context, &v34, 0, 0, creds, &v37);
  krb5_auth_con_free(context, v34);
  krb5_auth_context v34 = 0;
  if (v13) {
    goto LABEL_31;
  }
  int v14 = -1765328203;
  krb5_error_code v13 = krb5_rd_req(context, &v34, &v37, v33, v32, 0, 0);
  if (v13 == -1765328203) {
    goto LABEL_26;
  }
LABEL_29:
  if (v34) {
    krb5_auth_con_free(context, v34);
  }
LABEL_31:
  krb5_data_free(&v37);
  if (v35) {
    krb5_free_creds(context, v35);
  }
  if (!ap_req_server && v33) {
    krb5_free_principal(context, v33);
  }
  if (!ap_req_keytab && v32) {
    krb5_kt_close(context, v32);
  }
  if (!id) {
    goto LABEL_44;
  }
  if (!ccache) {
    goto LABEL_43;
  }
  if (v13)
  {
    if (*ccache) {
      return v13;
    }
LABEL_43:
    krb5_cc_destroy(context, id);
  }
LABEL_44:
  if (ccache && !v13 && !*ccache) {
    *krb5_ccache ccache = id;
  }
  return v13;
}

BOOL sub_213CB2EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ((*(unsigned char *)a2 & 1) == 0 || !*(_DWORD *)(a2 + 4))
      && !krb5_config_get_BOOL(a1, 0, a3, a4, a5, a6, a7, a8, (uint64_t)"libdefaults");
}

krb5_error_code krb5_get_validated_creds(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service)
{
  if (krb5_principal_compare(context, *(krb5_const_principal *)&creds->magic, client) == 1)
  {
    ap_req_int server = 0;
    krb5_error_code inited = krb5_sname_to_principal(context, 0, in_tkt_service, 3, &ap_req_server);
    if (!inited)
    {
      krb5_verify_init_creds_opt k5_vic_options = 0;
      uint64_t v12 = 0;
      krb5_error_code inited = krb5_verify_init_creds(context, creds, ap_req_server, 0, 0, &k5_vic_options);
      krb5_free_principal(context, ap_req_server);
    }
  }
  else
  {
    krb5_error_code inited = -1765328238;
    krb5_set_error_message(context, -1765328238, "Validation credentials and client doesn't match");
  }
  return inited;
}

double krb5_verify_opt_init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = "host";
  *(void *)(a1 + 48) = krb5_prompter_posix;
  return result;
}

uint64_t krb5_verify_opt_alloc(_krb5_context *a1, void *a2)
{
  int v4 = malloc_type_calloc(1uLL, 0x40uLL, 0x10F0040986054B4uLL);
  *a2 = v4;
  if (v4)
  {
    uint64_t v5 = 0;
    v4[2] = 0u;
    v4[3] = 0u;
    _OWORD *v4 = 0u;
    v4[1] = 0u;
    *((_DWORD *)v4 + 6) = 1;
    *((void *)v4 + 4) = "host";
    *((void *)v4 + 6) = krb5_prompter_posix;
  }
  else
  {
    uint64_t v5 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v5;
}

uint64_t krb5_verify_opt_set_ccache(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_server(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_keytab(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_secure(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t krb5_verify_opt_set_service(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

_DWORD *krb5_verify_opt_set_flags(_DWORD *result, int a2)
{
  *result |= a2;
  return result;
}

uint64_t krb5_verify_opt_set_prompter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 48) = a2;
  *(void *)(result + 56) = a3;
  return result;
}

uint64_t krb5_verify_user_opt(_krb5_context *a1, krb5_principal_data *a2, char *a3, unsigned char *a4)
{
  if (a4 && (*a4 & 1) != 0)
  {
    uint64_t v15 = 0;
    uint64_t default_realms = krb5_get_default_realms(a1, (char *const **)&v15);
    if (!default_realms)
    {
      uint64_t v10 = *v15;
      if (*v15)
      {
        int v11 = v15 + 1;
        do
        {
          uint64_t v12 = krb5_principal_set_realm(a1, (uint64_t)a2, v10);
          if (v12) {
            break;
          }
          uint64_t v12 = sub_213CB31FC(a1, a2, a3, (uint64_t)a4);
          krb5_error_code v13 = *v11++;
          uint64_t v10 = v13;
        }
        while (v13 && v12 != 0);
        uint64_t default_realms = v12;
        krb5_free_host_realm(a1, v15);
      }
      else
      {
        krb5_free_host_realm(a1, v15);
        return 2529639136;
      }
    }
    return default_realms;
  }
  else
  {
    return sub_213CB31FC(a1, a2, a3, (uint64_t)a4);
  }
}

uint64_t sub_213CB31FC(_krb5_context *a1, krb5_principal_data *a2, char *a3, uint64_t a4)
{
  opt = 0;
  memset(creds, 0, sizeof(creds));
  uint64_t init_creds_opt_alloc = krb5_get_init_creds_opt_alloc(a1, &opt);
  if (!init_creds_opt_alloc)
  {
    realm = (const krb5_data *)krb5_principal_get_realm((uint64_t)a1, (uint64_t)a2);
    krb5_get_init_creds_opt_set_default_flags(a1, 0, realm, (uint64_t)opt, v10, v11, v12, v13);
    uint64_t init_creds_opt_alloc = krb5_get_init_creds_password(a1, (krb5_creds *)creds, a2, a3, *(krb5_prompter_fct *)(a4 + 48), *(void **)(a4 + 56), 0, 0, opt);
    if (init_creds_opt_alloc)
    {
LABEL_15:
      krb5_get_init_creds_opt_free(a1, opt);
      return init_creds_opt_alloc;
    }
    uint64_t v15 = *(_krb5_ccache **)(a4 + 8);
    int v14 = *(_krb5_kt **)(a4 + 16);
    int v16 = *(_DWORD *)(a4 + 24);
    uint64_t v17 = *(krb5_principal_data **)(a4 + 40);
    if (*(void *)(a4 + 32)) {
      uint64_t v18 = *(const char **)(a4 + 32);
    }
    else {
      uint64_t v18 = "host";
    }
    krb5_verify_init_creds_opt k5_vic_options = 0;
    uint64_t v25 = 0;
    krb5_ccache v23 = 0;
    krb5_verify_init_creds_opt_init(&k5_vic_options);
    krb5_verify_init_creds_opt_set_ap_req_nofail(&k5_vic_options, v16);
    sub_213CB2BEC((uint64_t)&k5_vic_options, (uint64_t)v18);
    uint64_t init_creds_opt_alloc = krb5_verify_init_creds(a1, (krb5_creds *)creds, v17, v14, 0, &k5_vic_options);
    if (!init_creds_opt_alloc)
    {
      if (v15)
      {
        krb5_ccache v23 = v15;
        uint64_t v19 = v15;
LABEL_9:
        uint64_t init_creds_opt_alloc = krb5_cc_initialize(a1, v19, a2);
        if (!init_creds_opt_alloc) {
          uint64_t init_creds_opt_alloc = krb5_cc_store_cred(a1, v23, (krb5_creds *)creds);
        }
        if (!v15) {
          krb5_cc_close(a1, v23);
        }
        goto LABEL_14;
      }
      uint64_t init_creds_opt_alloc = krb5_cc_default(a1, &v23);
      if (!init_creds_opt_alloc)
      {
        uint64_t v19 = v23;
        goto LABEL_9;
      }
    }
LABEL_14:
    krb5_free_cred_contents(a1, (krb5_creds *)creds);
    goto LABEL_15;
  }
  return init_creds_opt_alloc;
}

uint64_t krb5_verify_user(_krb5_context *a1, krb5_principal_data *a2, uint64_t a3, char *a4, int a5, unint64_t a6)
{
  v7[0] = 0;
  long long v8 = 0u;
  uint64_t v11 = 0;
  v7[1] = a3;
  DWORD2(v8) = a5;
  uint64_t v10 = krb5_prompter_posix;
  long long v9 = a6;
  return krb5_verify_user_opt(a1, a2, a4, v7);
}

uint64_t krb5_verify_user_lrealm(_krb5_context *a1, krb5_principal_data *a2, uint64_t a3, char *a4, int a5, unint64_t a6)
{
  long long v8 = 0u;
  uint64_t v11 = 0;
  v7[1] = a3;
  DWORD2(v8) = a5;
  uint64_t v10 = krb5_prompter_posix;
  long long v9 = a6;
  v7[0] = 1;
  return krb5_verify_user_opt(a1, a2, a4, v7);
}

uint64_t krb5_vwarn(_krb5_context *a1, krb5_error_code a2, const char *a3, va_list a4)
{
  return sub_213CB3478(a1, 1, a2, 1, 0, a3, a4);
}

uint64_t sub_213CB3478(_krb5_context *a1, int a2, krb5_error_code a3, int a4, void (*a5)(char *), const char *a6, va_list a7)
{
  *(_DWORD *)&v26[3] = 0;
  *(_DWORD *)uint64_t v26 = 0;
  krb5_ccache v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (!a6)
  {
    int v16 = &v25;
    goto LABEL_8;
  }
  __strlcat_chk();
  if (a2) {
    __strlcat_chk();
  }
  int v14 = vasprintf(&v23, a6, a7);
  uint64_t result = 12;
  if ((v14 & 0x80000000) == 0 && v23)
  {
    uint64_t v25 = v23;
    int v16 = (char **)&v24;
LABEL_8:
    uint64_t v17 = 0;
    if (a1 && a2)
    {
      __strlcat_chk();
      error_krb5_error_code message = krb5_get_error_message(a1, a3);
      uint64_t v17 = error_message;
      uint64_t v19 = "<unknown error>";
      if (error_message) {
        uint64_t v19 = error_message;
      }
      const char *v16 = (char *)v19;
    }
    if (a5)
    {
      a5(v26);
LABEL_18:
      free(v23);
      krb5_free_error_message(a1, v17);
      return 0;
    }
    if (a1)
    {
      uint64_t v20 = *((void *)a1 + 19);
      uint64_t v22 = v24;
      krb5_error_code v21 = v25;
      if (v20)
      {
        krb5_log((uint64_t)a1, v20, a4, v26, v25, v24);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v22 = v24;
      krb5_error_code v21 = v25;
    }
    warnx(v26, v21, v22);
    goto LABEL_18;
  }
  return result;
}

uint64_t krb5_warn(_krb5_context *a1, krb5_error_code a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_213CB3478(a1, 1, a2, 1, 0, a3, &a9);
}

uint64_t krb5_vwarnx(_krb5_context *a1, const char *a2, va_list a3)
{
  return sub_213CB3478(a1, 0, 0, 1, 0, a2, a3);
}

uint64_t krb5_warnx(_krb5_context *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_213CB3478(a1, 0, 0, 1, 0, a2, &a9);
}

void krb5_verr(_krb5_context *a1, int a2, krb5_error_code a3, const char *a4, va_list a5)
{
}

void krb5_err(_krb5_context *a1, int a2, krb5_error_code a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void krb5_verrx(_krb5_context *a1, int a2, const char *a3, va_list a4)
{
}

void krb5_errx(_krb5_context *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void krb5_vabort(_krb5_context *a1, krb5_error_code a2, const char *a3, va_list a4)
{
}

void krb5_abort(_krb5_context *a1, krb5_error_code a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void krb5_vabortx(_krb5_context *a1, const char *a2, va_list a3)
{
}

void krb5_abortx(_krb5_context *a1, const char *a2, ...)
{
  va_start(va, a2);
  sub_213CB3478(a1, 0, 0, 0, 0, a2, va);
  abort();
}

uint64_t krb5_set_warn_dest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4) {
    krb5_closelog(a1, v4);
  }
  *(void *)(a1 + 152) = a2;
  return 0;
}

uint64_t krb5_get_warn_dest(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

uint64_t krb5_set_debug_dest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4) {
    krb5_closelog(a1, v4);
  }
  *(void *)(a1 + 160) = a2;
  return 0;
}

uint64_t krb5_get_debug_dest(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t krb5_write_message(_krb5_context *a1, int *a2, char **a3)
{
  unint64_t v6 = *(unsigned int *)a3;
  _krb5_put_int((uint64_t)__buf, v6, 4);
  if (krb5_net_write((int)a1, a2, __buf, 4uLL) == 4 && krb5_net_write((int)a1, a2, a3[1], v6) == v6) {
    return 0;
  }
  long long v8 = __error();
  uint64_t v7 = *v8;
  long long v9 = strerror(*v8);
  krb5_set_error_message(a1, v7, "write: %s", v9);
  return v7;
}

uint64_t krb5_write_priv_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  *(void *)&v8.krb5_magic magic = 0;
  v8.data = 0;
  uint64_t v6 = krb5_mk_priv(a1, a2, a4, &v8, 0);
  if (!v6)
  {
    uint64_t v6 = krb5_write_message(a1, a3, (char **)&v8);
    krb5_data_free(&v8);
  }
  return v6;
}

uint64_t krb5_write_safe_message(_krb5_context *a1, _krb5_auth_context *a2, int *a3, krb5_data *a4)
{
  *(void *)&v8.krb5_magic magic = 0;
  v8.data = 0;
  uint64_t v6 = krb5_mk_safe(a1, a2, a4, &v8, 0);
  if (!v6)
  {
    uint64_t v6 = krb5_write_message(a1, a3, (char **)&v8);
    krb5_data_free(&v8);
  }
  return v6;
}

uint64_t _krb5_expand_default_cc_name_0(_krb5_context *a1, char *__s1, void **a3)
{
  if (!__s1 || (uint64_t v4 = (uint64_t)__s1, !*__s1))
  {
    uint64_t v4 = 0;
    *a3 = strdup("");
    return v4;
  }
  __s = 0;
  uint64_t v5 = 0;
  *a3 = 0;
  while (1)
  {
    if (!*(unsigned char *)v4) {
      return 0;
    }
    uint64_t v6 = strstr((char *)v4, "%{");
    uint64_t v7 = (uint64_t)v6;
    if (!v6) {
      break;
    }
    krb5_data v8 = &v6[-v4];
    if (v6 == (char *)v4) {
      break;
    }
    long long v9 = (char *)malloc_type_malloc((size_t)(v8 + 1), 0x6366017CuLL);
    __s = v9;
    if (!v9)
    {
      int v16 = *a3;
LABEL_39:
      if (v16) {
        free(v16);
      }
      *a3 = 0;
      if (a1)
      {
        uint64_t v4 = 12;
        uint64_t v19 = a1;
        goto LABEL_43;
      }
      return 12;
    }
    memcpy(v9, (const void *)v4, v7 - v4);
    v8[(void)__s] = 0;
LABEL_22:
    int v14 = __s;
    uint64_t v4 = v7;
LABEL_23:
    int v16 = *a3;
    if (!v14) {
      goto LABEL_39;
    }
    size_t v17 = strlen(v14);
    uint64_t v18 = (char *)malloc_type_realloc(v16, v17 + v5 + 1, 0x354F9AA8uLL);
    if (!v18)
    {
      free(__s);
      if (*a3) {
        free(*a3);
      }
      *a3 = 0;
      uint64_t v19 = a1;
      if (a1)
      {
        uint64_t v4 = 12;
LABEL_43:
        krb5_set_error_message(v19, 12, "malloc - out of memory");
        return v4;
      }
      return 12;
    }
    *a3 = v18;
    memcpy(&v18[v5], __s, v17 + 1);
    free(__s);
    v5 += v17;
    if (!v4) {
      return v4;
    }
  }
  if (!v6)
  {
    int v14 = strdup((const char *)v4);
    uint64_t v4 = 0;
    __s = v14;
    goto LABEL_23;
  }
  uint64_t v10 = strchr(v6, 125);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (uint64_t)&v10[-v7];
    __s = 0;
    if (*(unsigned char *)v7 != 37 || *(unsigned char *)(v7 + 1) != 123 || v12 < 3 || *v10 != 125)
    {
LABEL_28:
      uint64_t v4 = 22;
      if (a1) {
        krb5_set_error_message(a1, 22, "Invalid token: %.*s", v12, (const char *)v7);
      }
      goto LABEL_30;
    }
    uint64_t v13 = 0;
    while (strncmp((const char *)(v7 + 2), (&off_26C4CA8E8)[v13], v12 - 2))
    {
      v13 += 4;
      if (v13 == 44) {
        goto LABEL_28;
      }
    }
    uint64_t v15 = ((uint64_t (*)(_krb5_context *, void, char *, char **))(&off_26C4CA8E8)[v13 + 3])(a1, 0, (&off_26C4CA8E8)[v13 + 2], &__s);
    if (v15)
    {
      uint64_t v4 = v15;
LABEL_30:
      if (*a3) {
        free(*a3);
      }
      *a3 = 0;
      return v4;
    }
    uint64_t v7 = (uint64_t)(v11 + 1);
    goto LABEL_22;
  }
  if (*a3) {
    free(*a3);
  }
  *a3 = 0;
  uint64_t v4 = 22;
  if (a1) {
    krb5_set_error_message(a1, 22, "variable missing }");
  }
  return v4;
}

uint64_t sub_213CB3D6C(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = 2529639048;
  MainBundle = CFBundleGetMainBundle();
  if (MainBundle)
  {
    uint64_t v7 = MainBundle;
    CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(MainBundle);
    if (InfoDictionary)
    {
      if (CFDictionaryGetCount(InfoDictionary))
      {
        CFURLRef v9 = CFBundleCopyResourcesDirectoryURL(v7);
        if (v9)
        {
          CFURLRef v10 = v9;
          int v11 = CFURLGetFileSystemRepresentation(v9, 1u, buffer, 1024);
          CFRelease(v10);
          uint64_t v5 = 12;
          if (v11)
          {
            uint64_t v12 = strdup((const char *)buffer);
            *a4 = v12;
            if (v12) {
              return 0;
            }
            else {
              return 12;
            }
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_213CB3E40(int a1, int a2, char *a3, char **a4)
{
  uint64_t v5 = getenv(a3);
  if (!v5) {
    uint64_t v5 = "";
  }
  uint64_t v6 = strdup(v5);
  *a4 = v6;
  if (v6) {
    return 0;
  }
  else {
    return 12;
  }
}

uint64_t sub_213CB3E88(_krb5_context *a1, int a2, char *__s1, char **a4)
{
  uint64_t v6 = strdup(__s1);
  *a4 = v6;
  if (v6) {
    return 0;
  }
  uint64_t v7 = 12;
  krb5_set_error_message(a1, 12, "malloc - out of memory");
  return v7;
}

uint64_t sub_213CB3EE0(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  if (issuid() || (uint64_t v5 = getenv("TEMP")) == 0) {
    uint64_t v5 = "/tmp";
  }
  uint64_t v6 = strdup(v5);
  *a4 = v6;
  if (v6) {
    return 0;
  }
  else {
    return 12;
  }
}

uint64_t sub_213CB3F34(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uid_t v5 = getuid();
  int v6 = asprintf(a4, "%ld", v5);
  uint64_t result = 12;
  if ((v6 & 0x80000000) == 0)
  {
    if (*a4) {
      return 0;
    }
    else {
      return 12;
    }
  }
  return result;
}

uint64_t sub_213CB3F90(_krb5_context *a1, uint64_t a2, uint64_t a3, char **a4)
{
  memset(&v8, 0, sizeof(v8));
  if (getaudit_addr(&v8, 48))
  {
    if (asprintf(a4, "%ld", v8.ai_asid) < 0 || !*a4) {
      return krb5_enomem(a1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = *__error();
    krb5_set_error_message(a1, v6, "cant get audit information for the session");
  }
  return v6;
}

uint64_t sub_213CB4034(_krb5_context *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v6 = strdup("");
  *a4 = v6;
  if (v6) {
    return 0;
  }
  uint64_t v7 = 12;
  if (a1) {
    krb5_set_error_message(a1, 12, "Out of memory");
  }
  return v7;
}

uint64_t sub_213CB409C(_krb5_context *a1, void *a2, void *dataOut, size_t size, int a5, uint64_t a6, const void *a7)
{
  uint64_t v7 = *(void *)(a2[1] + 8);
  size_t dataOutMoved = 0;
  if (size > 0xF)
  {
    if (size == 16)
    {
      if (CCCrypt(a5 == 0, *(_DWORD *)(*(void *)(v7 + 16) + 80), 0, *(const void **)(*a2 + 16), *(void *)(*a2 + 8), 0, dataOut, 0x10uLL, dataOut, 0x10uLL, &dataOutMoved))
      {
        heim_abort("CCCrypt failed:s == 0", v11, v12, v13, v14, v15, v16, v17, dataOutb);
      }
      if (dataOutMoved != 16) {
        heim_abort("moved == len:moved == len", v11, v12, v13, v14, v15, v16, v17, dataOutb);
      }
    }
    else
    {
      uint64_t v19 = *(_CCCryptor **)(v7 + 8 * (a5 == 0));
      uint64_t v20 = (char *)malloc_type_malloc(size, 0xE680274DuLL);
      if (!v20) {
        return 12;
      }
      krb5_error_code v21 = v20;
      if (a7) {
        uint64_t v22 = a7;
      }
      else {
        uint64_t v22 = &unk_213CDA4C0;
      }
      CCCryptorReset(v19, v22);
      if (CCCryptorUpdate(v19, dataOut, size, v21, size, &dataOutMoved)) {
        heim_abort("CCCryptorUpdate failed:s == 0", v23, v24, v25, v26, v27, v28, v29, dataOuta);
      }
      size_t v30 = size - dataOutMoved;
      if (CCCryptorFinal(v19, &v21[dataOutMoved], size - dataOutMoved, &dataOutMoved)) {
        heim_abort("CCCryptorFinal failed:s == 0", v31, v32, v33, v34, v35, v36, v37, dataOuta);
      }
      if (v30 != dataOutMoved) {
        heim_abort("plen == 0:plen == 0", v31, v32, v33, v34, v35, v36, v37, dataOuta);
      }
      memcpy(dataOut, v21, size);
      free(v21);
    }
    return 0;
  }
  else
  {
    uint64_t v8 = 22;
    krb5_set_error_message(a1, 22, "message block too short");
  }
  return v8;
}

uint64_t sub_213CB424C(_krb5_context *a1, const krb5_keyblock **a2, void *a3, size_t *a4)
{
  uint64_t v8 = *(void *)&(*a2)[2].magic;
  uint64_t v30 = 0;
  size_t v31 = 0;
  dataIn = 0;
  LODWORD(v30) = *(_DWORD *)v8;
  uint64_t v9 = krb5_data_alloc(&v31, *(void *)(v8 + 24));
  if (v9)
  {
    uint64_t v10 = v9;
    krb5_set_error_message(a1, v9, "malloc: out memory");
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(_krb5_context *, void, void, void, void, uint64_t *))(v8 + 40))(a1, 0, a3[1], *a3, 0, &v30);
    if (v11)
    {
      uint64_t v10 = v11;
      krb5_data_free(&v31);
    }
    else
    {
      uint64_t v12 = *a2;
      if ((krb5_octet *)v31 < (*a2)->contents) {
        krb5_abortx(a1, "internal prf error");
      }
      uint64_t v29 = 0;
      if (krb5_derive_key(a1, a2[1], (krb5_keyblock *)v12->magic, "prf", 3uLL, &v29)) {
        krb5_abortx(a1, "krb5_derive_key");
      }
      size_t contents = (size_t)(*a2)->contents;
      size_t v20 = v31 / contents * contents;
      if (v20 != *(void *)&(*a2)[3].length) {
        heim_abort("prfsize not same ?:prfsize == crypto->et->prf_length", contents, v13, v14, v15, v16, v17, v18, dataOut);
      }
      if (krb5_data_alloc(a4, contents)) {
        krb5_abortx(a1, "malloc failed");
      }
      krb5_error_code v21 = (*a2)[1].contents;
      CCAlgorithm v22 = *((_DWORD *)v21 + 20);
      uint64_t v23 = v29->contents;
      size_t v24 = *((void *)v21 + 3);
      uint64_t v25 = (void *)a4[1];
      size_t dataOutMoved = 0;
      if (CCCrypt(0, v22, 0, v23, v24, 0, dataIn, v20, v25, v20, &dataOutMoved) || dataOutMoved != v20) {
        krb5_abortx(a1, "encrypt failed");
      }
      krb5_data_free(&v31);
      krb5_free_keyblock(a1, v29);
      return 0;
    }
  }
  return v10;
}

uint64_t sub_213CB4424(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a3;
  uint64_t cryptorRef = *(void *)(a3[1] + 8);
  CCAlgorithm v6 = *(_DWORD *)(a2 + 80);
  *(void *)(cryptorRef + 16) = a2;
  if (CCCryptorCreateWithMode(0, 2u, v6, 0xCu, 0, *(const void **)(v4 + 16), *(void *)(v4 + 8), 0, 0, 0, 0, (CCCryptorRef *)cryptorRef)|| (uint64_t result = CCCryptorCreateWithMode(1u, 2u, v6, 0xCu, 0, *(const void **)(*a3 + 16),
                   *(void *)(*a3 + 8),
                   0,
                   0,
                   0,
                   0,
                   (CCCryptorRef *)(cryptorRef + 8)),
        result))
  {
    abort();
  }
  return result;
}

uint64_t sub_213CB44C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(CCCryptorRef **)(*(void *)(a2 + 8) + 8);
  CCCryptorRelease(*v2);
  int v3 = v2[1];

  return CCCryptorRelease(v3);
}

uint64_t sub_213CB4508(_krb5_context *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v9 = sub_213C82148(7);
  strcpy(v19, "signaturekey");
  if (CCDigestCreate())
  {
    v15[1] = 0;
    uint64_t v13 = 0;
    *(_OWORD *)uint64_t v16 = xmmword_213CDA4E0;
    *(void *)&v16[16] = &v17;
    uint64_t v10 = sub_213C81EB0((uint64_t)a1, (uint64_t)v9, v19, 0xDuLL, 0, a2, (uint64_t)v16);
    if (v10)
    {
      uint64_t v11 = v10;
      CCDigestDestroy();
    }
    else
    {
      v15[0] = (uint64_t)&v13;
      long long v14 = *(_OWORD *)&v16[8];
      CCDigestUpdate();
      CCDigestUpdate();
      CCDigestFinal();
      CCDigestDestroy();
      return sub_213C81EB0((uint64_t)a1, (uint64_t)v9, v18, 0x10uLL, 0, v15, a6);
    }
  }
  else
  {
    uint64_t v11 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  return v11;
}

uint64_t sub_213CB4698(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 22)
  {
    if (v2 == 23)
    {
      int v3 = 15;
      goto LABEL_10;
    }
    if (v2 == 24)
    {
      int v3 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    if (v2 == 3)
    {
      int v3 = 8;
      goto LABEL_10;
    }
    if (v2 == 22)
    {
      int v3 = 13;
LABEL_10:
      *a2 = v3;
    }
  }
  return 0;
}

uint64_t sub_213CB46EC(_krb5_context *a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v6 = a6;
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (a6 > 22)
  {
    if (a6 == 23)
    {
      int v6 = 15;
    }
    else if (a6 == 24)
    {
      int v6 = 0;
    }
  }
  else if (a6 == 3)
  {
    int v6 = 8;
  }
  else if (a6 == 22)
  {
    int v6 = 13;
  }
  if (a5)
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v11 = sub_213C82148(7);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    *(void *)uint64_t v28 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    v30[0] = v6;
    *(_OWORD *)uint64_t v29 = xmmword_213CDA4E0;
    *(void *)&v29[16] = &v33;
    if (!sub_213C81EB0(0, (uint64_t)v11, v30, 4uLL, 0, a2, (uint64_t)v29))
    {
      long long v32 = v33;
      *(void *)&long long v20 = 16;
      *((void *)&v20 + 1) = &v32;
      krb5_error_code v21 = &v19;
      uint64_t v24 = 16;
      uint64_t v25 = a3;
      if (!sub_213C81EB0(0, (uint64_t)v11, a3 + 16, a4 - 16, 0, (uint64_t *)&v21, (uint64_t)&v23))
      {
        krb5_error_code v21 = &v19;
        long long v20 = *(_OWORD *)&v29[8];
        uint64_t v27 = 16;
        *(void *)uint64_t v28 = v31;
        if (!sub_213C81EB0(0, (uint64_t)v11, a3, 0x10uLL, 0, (uint64_t *)&v21, (uint64_t)&v26))
        {
          hc_EVP_CIPHER_CTX_init((uint64_t)&v34);
          uint64_t v13 = hc_EVP_rc4(v12);
          hc_EVP_CipherInit_ex((uint64_t)&v34, (uint64_t)v13, 0, *(uint64_t *)v28, 0, 1);
          hc_EVP_Cipher((uint64_t)&v34);
          hc_EVP_CIPHER_CTX_cleanup((uint64_t *)&v34);
          return 0;
        }
      }
    }
LABEL_21:
    krb5_abortx(a1, "hmac failed");
  }
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v15 = sub_213C82148(7);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  *(void *)uint64_t v28 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  int v18 = v6;
  *(_OWORD *)uint64_t v29 = xmmword_213CDA4E0;
  *(void *)&v29[16] = &v33;
  if (sub_213C81EB0(0, (uint64_t)v15, &v18, 4uLL, 0, a2, (uint64_t)v29)) {
    goto LABEL_21;
  }
  long long v32 = v33;
  krb5_error_code v21 = &v19;
  long long v20 = *(_OWORD *)&v29[8];
  uint64_t v27 = 16;
  *(void *)uint64_t v28 = v31;
  if (sub_213C81EB0(0, (uint64_t)v15, a3, 0x10uLL, 0, (uint64_t *)&v21, (uint64_t)&v26)) {
    goto LABEL_21;
  }
  hc_EVP_CIPHER_CTX_init((uint64_t)&v34);
  char v17 = hc_EVP_rc4(v16);
  hc_EVP_CipherInit_ex((uint64_t)&v34, (uint64_t)v17, 0, *(uint64_t *)v28, 0, 0);
  hc_EVP_Cipher((uint64_t)&v34);
  hc_EVP_CIPHER_CTX_cleanup((uint64_t *)&v34);
  *(void *)&long long v20 = 16;
  *((void *)&v20 + 1) = &v32;
  krb5_error_code v21 = &v19;
  uint64_t v24 = 16;
  uint64_t v25 = (unsigned __int8 *)v30;
  if (sub_213C81EB0(0, (uint64_t)v15, a3 + 16, a4 - 16, 0, (uint64_t *)&v21, (uint64_t)&v23)) {
    goto LABEL_21;
  }
  long long v33 = 0uLL;
  long long v32 = 0uLL;
  v31[0] = 0;
  v31[1] = 0;
  uint64_t result = ct_memcmp(v25, a3, 16);
  if (result)
  {
    krb5_clear_error_message(a1);
    return 2529638943;
  }
  return result;
}

uint64_t sub_213CB4A94(uint64_t a1, uint64_t a2, uint64_t a3, size_t *a4)
{
  uint64_t v8 = sub_213C82148(14);
  uint64_t v9 = krb5_data_alloc(a4, *((void *)v8 + 3));
  if (!v9)
  {
    size_t v10 = a4[1];
    v12[1] = *a4;
    krb5_deltat v12[2] = v10;
    v12[0] = 0;
    if (sub_213C81EB0(a1, (uint64_t)v8, *(const void **)(a3 + 8), *(void *)a3, 0, (uint64_t *)(a2 + 8), (uint64_t)v12))krb5_data_free(a4); {
  }
    }
  return v9;
}

unsigned char *sub_213CB4B30(unsigned char *result, unsigned char *a2)
{
  *result ^= *a2;
  result[1] ^= a2[1];
  result[2] ^= a2[2];
  result[3] ^= a2[3];
  result[4] ^= a2[4];
  result[5] ^= a2[5];
  result[6] ^= a2[6];
  result[7] ^= a2[7];
  return result;
}

uint64_t sub_213CB4BB4(_krb5_context *a1)
{
  uint64_t result = CCDigest();
  if (result) {
    krb5_abortx(a1, "md5 checksum failed");
  }
  return result;
}

uint64_t sub_213CB4C00(_krb5_context *a1, const krb5_keyblock **a2, void *a3, size_t *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)&(*a2)[2].magic;
  uint64_t v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  LODWORD(v23) = *(_DWORD *)v8;
  uint64_t v9 = krb5_data_alloc(v24, *(void *)(v8 + 24));
  if (v9)
  {
    uint64_t v10 = v9;
    krb5_set_error_message(a1, v9, "malloc: out memory");
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(_krb5_context *, void, void, void, void, uint64_t *))(v8 + 40))(a1, 0, a3[1], *a3, 0, &v23);
    if (v11)
    {
      uint64_t v10 = v11;
      krb5_data_free(v24);
    }
    else
    {
      uint64_t v12 = *a2;
      if ((krb5_octet *)v24[0] < (*a2)->contents) {
        krb5_abortx(a1, "internal prf error");
      }
      uint64_t v22 = 0;
      if (krb5_derive_key(a1, a2[1], (krb5_keyblock *)v12->magic, "prf", 3uLL, &v22)) {
        krb5_abortx(a1, "krb5_derive_key");
      }
      if (v24[0] / (size_t)(*a2)->contents * (size_t)(*a2)->contents != *(void *)&(*a2)[3].length) {
        heim_abort("prfsize not same ?:prfsize == crypto->et->prf_length", v13, v14, v15, v16, v17, v18, v19, (char)v22);
      }
      if (krb5_data_alloc(a4, v24[0] / (size_t)(*a2)->contents * (size_t)(*a2)->contents)) {
        krb5_abortx(a1, "malloc failed");
      }
      uint64_t v20 = (*((uint64_t (**)(void))(*a2)[1].contents + 10))();
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      hc_EVP_CIPHER_CTX_init((uint64_t)v25);
      hc_EVP_CipherInit_ex((uint64_t)v25, v20, 0, (uint64_t)v22->contents, 0, 1);
      hc_EVP_Cipher((uint64_t)v25);
      hc_EVP_CIPHER_CTX_cleanup((uint64_t *)v25);
      krb5_data_free(v24);
      krb5_free_keyblock(a1, v22);
      return 0;
    }
  }
  return v10;
}

unsigned char *sub_213CB4E24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 <= 0x14) {
    abort();
  }
  bzero(*(void **)(a2 + 16), *(void *)(a2 + 8));
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = v7;
  do
  {
    for (uint64_t i = 0; i != 7; ++i)
      *(unsigned char *)(v8 + i) = *(unsigned char *)(a3 + i);
    char v10 = 0;
    for (uint64_t j = 6; j != -1; --j)
      char v10 = 2 * (*(unsigned char *)(a3 + j) & 1 | v10);
    *(unsigned char *)(v7 + ((8 * v6++) | 7)) = v10;
    v8 += 8;
    a3 += 7;
  }
  while (v6 != 3);
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a2 + 16);
  do
  {
    MEMORY[0x216694420](v13 + v12, 8);
    uint64_t result = (unsigned char *)MEMORY[0x216694410](v13 + v12, 8);
    if (result) {
      uint64_t result = sub_213CB4B30((unsigned char *)(v13 + v12), byte_213CDA4F0);
    }
    v12 += 8;
  }
  while (v12 != 24);
  return result;
}

uint64_t sub_213CB4F14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  for (uint64_t i = v3; ; uint64_t i = *(void *)(a2 + 16))
  {
    krb5_generate_random_block(i, *(void *)(a2 + 8));
    MEMORY[0x216694420](v3, 8);
    MEMORY[0x216694420](v3 + 8, 8);
    MEMORY[0x216694420](v3 + 16, 8);
    if (!MEMORY[0x216694410](v3, 8) && !MEMORY[0x216694410](v3 + 8, 8))
    {
      uint64_t result = MEMORY[0x216694410](v3 + 16, 8);
      if (!result) {
        break;
      }
    }
  }
  return result;
}

uint64_t sub_213CB4FB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[1] + 8);
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 80))();
  hc_EVP_CIPHER_CTX_init(v4);
  hc_EVP_CIPHER_CTX_init(v4 + 168);
  hc_EVP_CipherInit_ex(v4, v5, 0, *(void *)(*a3 + 16), 0, 1);
  uint64_t v6 = *(void *)(*a3 + 16);

  return hc_EVP_CipherInit_ex(v4 + 168, v5, 0, v6, 0, 0);
}

uint64_t sub_213CB504C(uint64_t a1, uint64_t a2)
{
  int v2 = *(uint64_t **)(*(void *)(a2 + 8) + 8);
  hc_EVP_CIPHER_CTX_cleanup(v2);

  return hc_EVP_CIPHER_CTX_cleanup(v2 + 21);
}

uint64_t sub_213CB508C(_krb5_context *a1, uint64_t a2, int a3, int a4, int a5, int a6, void *__src)
{
  if (a5) {
    uint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(a2 + 8) + 8) + 168;
  }
  if (__src)
  {
    hc_EVP_CipherInit_ex(v7, 0, 0, 0, __src, 0xFFFFFFFFLL);
LABEL_8:
    hc_EVP_Cipher(v7);
    return 0;
  }
  size_t v9 = hc_EVP_CIPHER_CTX_iv_length(v7);
  char v10 = malloc_type_malloc(v9, 0x84297860uLL);
  if (v10)
  {
    uint64_t v11 = v10;
    bzero(v10, v9);
    hc_EVP_CipherInit_ex(v7, 0, 0, 0, v11, 0xFFFFFFFFLL);
    free(v11);
    goto LABEL_8;
  }
  krb5_clear_error_message(a1);
  return 12;
}

uint64_t sub_213CB5170()
{
  return 0;
}

uint64_t sub_213CB5178()
{
  return 0;
}

uint64_t _krb5_pk_octetstring2key(_krb5_context *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v12 = sub_213C81CD4(a2);
  if (!v12)
  {
    uint64_t v19 = 2529639062;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
    return v19;
  }
  size_t v13 = (unint64_t)(*(void *)(*((void *)v12 + 5) + 16) + 7) >> 3;
  uint64_t v14 = malloc_type_malloc(v13, 0x11B00E76uLL);
  if (!v14)
  {
LABEL_16:
    uint64_t v19 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v19;
  }
  uint64_t v15 = v14;
  if (!CCDigestCreate())
  {
    free(v15);
    goto LABEL_16;
  }
  int v21 = a2;
  uint64_t v22 = a7;
  size_t v16 = 0;
  char v23 = 0;
  unint64_t v17 = v13;
  do
  {
    CCDigestReset();
    CCDigestUpdate();
    CCDigestUpdate();
    if (a5) {
      CCDigestUpdate();
    }
    if (a6) {
      CCDigestUpdate();
    }
    CCDigestFinal();
    if (v17 >= 0x14) {
      size_t v18 = 20;
    }
    else {
      size_t v18 = v17;
    }
    memcpy((char *)v15 + v16, __src, v18);
    v16 += 20;
    ++v23;
    v17 -= 20;
  }
  while (v16 < v13);
  __src[0] = 0;
  __src[1] = 0;
  int v25 = 0;
  CCDigestDestroy();
  uint64_t v19 = krb5_random_to_key(a1, v21, v15, v13, v22);
  *uint64_t v15 = 0;
  free(v15);
  return v19;
}

uint64_t _krb5_pk_kdf(_krb5_context *a1, long long *a2, uint64_t a3, uint64_t a4, long long *a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (!der_heim_oid_cmp())
  {
    uint64_t v19 = 20;
LABEL_6:
    uint64_t v41 = 0;
    long long v42 = 0;
    uint64_t v20 = *((void *)a2 + 2);
    if (v20 && (*(void *)v20 != 2 || **(_WORD **)(v20 + 8) != 5))
    {
      uint64_t v17 = 2529639062;
      size_t v18 = "kdf params not NULL or the NULL-type";
      goto LABEL_16;
    }
    int v21 = sub_213C81CD4(a7);
    if (!v21)
    {
      uint64_t v17 = 2529639062;
      uint64_t v37 = a7;
      size_t v18 = "encryption type %d not supported";
      goto LABEL_16;
    }
    size_t v22 = (unint64_t)(*(void *)(*((void *)v21 + 5) + 16) + 7) >> 3;
    char v23 = malloc_type_malloc(v22, 0x6D5FFD54uLL);
    if (v23)
    {
      size_t v38 = v19;
      unint64_t v39 = v22;
      long long v40 = v23;
      uint64_t v43 = 0;
      krb5_data_zero(&v41);
      uint64_t v51 = 0;
      *(_OWORD *)uint64_t v49 = 0u;
      *(_OWORD *)uint64_t v50 = 0u;
      long long __src = 0u;
      long long v48 = 0u;
      v46[1] = a8;
      v46[0] = a7;
      krb5_timestamp v46[2] = a9;
      v46[3] = a10;
      uint64_t v24 = sub_213CBC6A4((uint64_t)v46);
      uint64_t v44 = v24;
      int v25 = malloc_type_malloc(v24, 0x89238B24uLL);
      uint64_t v45 = v25;
      if (!v25)
      {
        uint64_t v17 = 12;
        goto LABEL_19;
      }
      uint64_t v26 = v25;
      uint64_t v27 = sub_213CBC684((uint64_t)v25 + v24 - 1, v24, (uint64_t)v46, (uint64_t)&v43);
      if (v27)
      {
        uint64_t v17 = v27;
        free(v26);
LABEL_19:
        krb5_set_error_message(a1, v17, "malloc: out of memory");
LABEL_20:
        uint64_t v29 = v40;
LABEL_21:
        free(v29);
        return v17;
      }
      if (v24 != v43) {
        goto LABEL_45;
      }
      if (a5)
      {
        uint64_t v30 = sub_213CB57AC(a1, a5, (uint64_t)&v48 + 8);
        if (v30)
        {
          uint64_t v17 = v30;
LABEL_29:
          free(v26);
          goto LABEL_20;
        }
      }
      if (a6)
      {
        uint64_t v31 = sub_213CB57AC(a1, a6, (uint64_t)&v49[1]);
        if (v31)
        {
          uint64_t v17 = v31;
          free(v49[0]);
          goto LABEL_29;
        }
      }
      long long __src = *a2;
      *(void *)&long long v48 = *((void *)a2 + 2);
      v50[1] = &v44;
      uint64_t v41 = sub_213CBC674((uint64_t)&__src);
      long long v32 = malloc_type_malloc(v41, 0xC54595E5uLL);
      long long v42 = v32;
      if (v32)
      {
        uint64_t v17 = sub_213CBC654((uint64_t)v32 + v41 - 1, v41, (uint64_t)&__src, (uint64_t)&v43);
        if (v17)
        {
          free(v42);
          long long v42 = 0;
        }
      }
      else
      {
        uint64_t v17 = 12;
      }
      free(v49[0]);
      free(v50[0]);
      free(v45);
      if (v17) {
        goto LABEL_19;
      }
      if (v41 != v43) {
LABEL_45:
      }
        krb5_abortx(a1, "asn1 compiler internal error");
      if (CCDigestCreate())
      {
        unint64_t v33 = 0;
        unsigned int v34 = 1;
        size_t v35 = v39;
        do
        {
          CCDigestReset();
          _krb5_put_int((uint64_t)v46, v34, 4);
          CCDigestUpdate();
          CCDigestUpdate();
          CCDigestUpdate();
          CCDigestFinal();
          if (v35 >= v38) {
            size_t v36 = v38;
          }
          else {
            size_t v36 = v35;
          }
          memcpy((char *)v40 + v33, &__src, v36);
          v33 += v38;
          ++v34;
          v35 -= v38;
        }
        while (v33 < v39);
        *(_OWORD *)uint64_t v49 = 0u;
        *(_OWORD *)uint64_t v50 = 0u;
        long long __src = 0u;
        long long v48 = 0u;
        CCDigestDestroy();
        free(v42);
        uint64_t v17 = krb5_random_to_key(a1, a7, v40, v39, a11);
        void *v40 = 0;
        uint64_t v29 = v40;
        goto LABEL_21;
      }
      free(v40);
      free(v42);
    }
    uint64_t v17 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v17;
  }
  if (!der_heim_oid_cmp())
  {
    uint64_t v19 = 64;
    goto LABEL_6;
  }
  uint64_t v17 = 2529639062;
  size_t v18 = "KDF not supported";
LABEL_16:
  krb5_set_error_message(a1, -1765328234, v18, v37);
  return v17;
}

uint64_t sub_213CB57AC(_krb5_context *a1, long long *a2, uint64_t a3)
{
  long long v13 = *a2;
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v14 = *((void *)a2 + 2);
  uint64_t v11 = 0;
  uint64_t v12 = v5;
  size_t v6 = sub_213CBC494((uint64_t)&v12);
  *(void *)a3 = v6;
  uint64_t v7 = malloc_type_malloc(v6, 0x408ADE4AuLL);
  *(void *)(a3 + 8) = v7;
  if (!v7)
  {
    uint64_t v9 = 12;
    goto LABEL_5;
  }
  uint64_t v8 = sub_213CBC474((uint64_t)v7 + *(void *)a3 - 1, *(void *)a3, (uint64_t)&v12, (uint64_t)&v11);
  if (v8)
  {
    uint64_t v9 = v8;
    free(*(void **)(a3 + 8));
    *(void *)(a3 + 8) = 0;
LABEL_5:
    krb5_data_zero((void *)a3);
    krb5_set_error_message(a1, v9, "Failed to encode KRB5PrincipalName");
    return v9;
  }
  if (*(void *)a3 != v11) {
    krb5_abortx(a1, "asn1 compiler internal error");
  }
  return 0;
}

uint64_t krb5_generate_random_block(uint64_t a1, uint64_t a2)
{
  uint64_t result = CCRandomCopyBytes();
  if (result) {
    krb5_abortx(0, "Failed reading %lu random bytes", a2);
  }
  return result;
}

uint64_t sub_213CB58E8(_krb5_context *a1, int a2, size_t a3, const char *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, krb5_keyblock *a8)
{
  uint64_t v14 = 2529639063;
  if (a6 == 4)
  {
    v23[0] = 0;
    _krb5_get_int(a7, (unint64_t *)v23, 4);
    unsigned int v15 = v23[0];
  }
  else
  {
    if (a6) {
      return v14;
    }
    unsigned int v15 = _krb5_AES_string_to_default_iterator;
  }
  size_t v16 = sub_213C81CD4(a2);
  if (v16)
  {
    uint64_t v17 = (uint64_t)v16;
    v23[1] = 0;
    size_t v18 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
    v23[0] = (krb5_keyblock *)v18;
    if (v18)
    {
      uint64_t v19 = (uint8_t **)v18;
      *(_DWORD *)size_t v18 = a2;
      uint64_t v20 = krb5_data_alloc((size_t *)v18 + 1, *(void *)(*(void *)(v17 + 40) + 24));
      if (v20)
      {
        uint64_t v21 = v20;
        krb5_set_error_message(a1, v20, "malloc: out of memory");
        return v21;
      }
      else if (hc_PKCS5_PBKDF2_HMAC_SHA1(a4, a3, *(uint8_t **)(a5 + 16), *(void *)(a5 + 8), v15, *(void *)(*(void *)(v17 + 40) + 24), v19[2]))
      {
        uint64_t v14 = sub_213C84658(a1, v17, (uint64_t)v23, "kerberos", 8uLL);
        if (!v14) {
          uint64_t v14 = krb5_copy_keyblock_contents(a1, v23[0], a8);
        }
        sub_213C849D0(a1, (uint64_t)v23, v17);
      }
      else
      {
        sub_213C849D0(a1, (uint64_t)v23, v17);
        krb5_set_error_message(a1, -1765328233, "Error calculating s2k", v23[0]);
      }
    }
    else
    {
      uint64_t v14 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory", 0);
    }
  }
  return v14;
}

uint64_t sub_213CB5AA4(_krb5_context *a1, int a2, size_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v23 = 0;
  if (getenv("KRB5_USE_BROKEN_ARCFOUR_STRING2KEY")) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = krb5_heim_use_broken_arcfour_string2key == 0;
  }
  if (v13)
  {
    unsigned int v15 = (char *)malloc_type_malloc(a3 + 1, 0x17AA4DEAuLL);
    if (!v15)
    {
      uint64_t v14 = 12;
      krb5_set_error_message(a1, 12, "malloc: out of memory");
      return v14;
    }
    size_t v16 = v15;
    memcpy(v15, a4, a3);
    v16[a3] = 0;
    if (CCDigestCreate())
    {
      uint64_t v17 = wind_utf8ucs2_length(v16, &v23);
      if (v17)
      {
        uint64_t v14 = v17;
        krb5_set_error_message(a1, v17, "Password not an UCS2 string");
LABEL_21:
        CCDigestDestroy();
LABEL_22:
        free(v16);
        return v14;
      }
      size_t v18 = malloc_type_malloc(2 * v23, 0x1000040BDFB0063uLL);
      uint64_t v19 = v18;
      if (!v23 || v18)
      {
        uint64_t v21 = wind_utf8ucs2(v16, (uint64_t)v18, &v23);
        if (v21)
        {
          uint64_t v14 = v21;
          krb5_set_error_message(a1, v21, "Password not an UCS2 string");
        }
        else
        {
          if (v23)
          {
            for (size_t i = 0; i < v23; ++i)
            {
              CCDigestUpdate();
              CCDigestUpdate();
            }
          }
          *(_DWORD *)a8 = a2;
          uint64_t v14 = krb5_data_alloc((size_t *)(a8 + 8), 0x10uLL);
          if (v14) {
            krb5_set_error_message(a1, 12, "malloc: out of memory");
          }
          else {
            CCDigestFinal();
          }
        }
        CCDigestDestroy();
        if (v19)
        {
          bzero(v19, v23);
          free(v19);
        }
        goto LABEL_22;
      }
    }
    uint64_t v14 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    goto LABEL_21;
  }
  if (CCDigestCreate())
  {
    for (; a3; --a3)
    {
      ++a4;
      CCDigestUpdate();
      char v24 = 0;
      CCDigestUpdate();
    }
    *(_DWORD *)a8 = a2;
    uint64_t v14 = krb5_data_alloc((size_t *)(a8 + 8), 0x10uLL);
    if (v14) {
      krb5_set_error_message(a1, 12, "malloc: out of memory");
    }
    else {
      CCDigestFinal();
    }
  }
  else
  {
    uint64_t v14 = 12;
    krb5_set_error_message(a1, 12, "malloc: out of memory");
  }
  CCDigestDestroy();
  return v14;
}

uint64_t sub_213CB5D68(_krb5_context *a1, int a2, size_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, krb5_keyblock *a8)
{
  size_t v14 = *(void *)(a5 + 8) + a3;
  unsigned int v15 = (char *)malloc_type_malloc(v14, 0xD3990A69uLL);
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (v16)
  {
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return 12;
  }
  else
  {
    uint64_t v17 = v15;
    memcpy(v15, a4, a3);
    memcpy(&v17[a3], *(const void **)(a5 + 16), *(void *)(a5 + 8));
    uint64_t v18 = krb5_string_to_key_derived(a1, v17, v14, a2, a8);
    bzero(v17, v14);
    free(v17);
    return v18;
  }
}

krb5_error_code krb5_salttype_to_string(krb5_int32 a1, char *a2, size_t a3)
{
  uint64_t v4 = v3;
  int v5 = a3;
  size_t v6 = *(_krb5_context **)&a1;
  uint64_t v7 = sub_213C81CD4((int)a2);
  if (v7)
  {
    uint64_t v8 = *(_DWORD **)(*((void *)v7 + 5) + 56);
    if (v8 && (int v9 = *v8) != 0)
    {
      char v10 = (const char **)(v8 + 6);
      while (v9 != v5)
      {
        int v11 = *(_DWORD *)v10;
        v10 += 3;
        int v9 = v11;
        if (!v11) {
          goto LABEL_7;
        }
      }
      size_t v14 = strdup(*(v10 - 2));
      _OWORD *v4 = v14;
      if (v14)
      {
        return 0;
      }
      else
      {
        krb5_error_code v12 = 12;
        krb5_set_error_message(v6, 12, "malloc: out of memory");
      }
    }
    else
    {
LABEL_7:
      krb5_error_code v12 = -1980176638;
      krb5_set_error_message(v6, -1980176638, "salttype %d not supported");
    }
  }
  else
  {
    krb5_error_code v12 = -1765328234;
    krb5_set_error_message(v6, -1765328234, "encryption type %d not supported");
  }
  return v12;
}

krb5_error_code krb5_string_to_salttype(char *a1, krb5_int32 *a2)
{
  uint64_t v4 = v3;
  int v5 = v2;
  uint64_t v7 = sub_213C81CD4((int)a2);
  if (v7)
  {
    uint64_t v8 = *(_DWORD **)(*((void *)v7 + 5) + 56);
    if (v8 && (int v9 = *v8) != 0)
    {
      char v10 = (const char **)(v8 + 6);
      while (strcasecmp(*(v10 - 2), v5))
      {
        int v11 = *(_DWORD *)v10;
        v10 += 3;
        int v9 = v11;
        if (!v11) {
          goto LABEL_7;
        }
      }
      krb5_error_code v12 = 0;
      _DWORD *v4 = v9;
    }
    else
    {
LABEL_7:
      krb5_error_code v12 = -1980176638;
      krb5_set_error_message((krb5_context)a1, -1980176638, "salttype %s not supported");
    }
  }
  else
  {
    krb5_error_code v12 = -1765328234;
    krb5_set_error_message((krb5_context)a1, -1765328234, "encryption type %d not supported");
  }
  return v12;
}

uint64_t krb5_get_pw_salt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 3;
  size_t v5 = strlen(*(const char **)(a2 + 24));
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(const char ***)(a2 + 16);
    do
    {
      uint64_t v8 = *v7++;
      v5 += strlen(v8);
      --v6;
    }
    while (v6);
  }
  uint64_t result = krb5_data_alloc((size_t *)(a3 + 8), v5);
  if (!result)
  {
    char v10 = *(char **)(a3 + 16);
    size_t v11 = strlen(*(const char **)(a2 + 24));
    memcpy(v10, *(const void **)(a2 + 24), v11);
    if (*(_DWORD *)(a2 + 8))
    {
      unint64_t v12 = 0;
      BOOL v13 = &v10[strlen(*(const char **)(a2 + 24))];
      uint64_t v14 = *(void *)(a2 + 16);
      do
      {
        unsigned int v15 = *(const char **)(v14 + 8 * v12);
        size_t v16 = strlen(v15);
        memcpy(v13, v15, v16);
        uint64_t v14 = *(void *)(a2 + 16);
        v13 += strlen(*(const char **)(v14 + 8 * v12++));
      }
      while (v12 < *(unsigned int *)(a2 + 8));
    }
    return 0;
  }
  return result;
}

uint64_t krb5_free_salt(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t krb5_string_to_key_data(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  uint64_t pw_salt = krb5_get_pw_salt((uint64_t)a1, a5, (uint64_t)&v15);
  if (!pw_salt)
  {
    long long v13 = v15;
    uint64_t v14 = v16;
    uint64_t pw_salt = krb5_string_to_key_data_salt(a1, a2, a3, a4, (uint64_t)&v13, a6);
    long long v13 = v15;
    uint64_t v14 = v16;
    krb5_data_free((void *)&v13 + 1);
  }
  return pw_salt;
}

uint64_t krb5_string_to_key_data_salt(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  krb5_data_zero(&v15);
  long long v13 = *(_OWORD *)a5;
  uint64_t v14 = *(void *)(a5 + 16);
  return krb5_string_to_key_data_salt_opaque(a1, a2, a3, a4, &v13, v15, v16, a6);
}

krb5_error_code krb5_string_to_key(krb5_context context, const krb5_encrypt_block *eblock, krb5_keyblock *keyblock, const krb5_data *data, const krb5_data *salt)
{
  size_t v10 = strlen((const char *)keyblock);

  return krb5_string_to_key_data(context, (uint64_t)eblock, v10, (uint64_t)keyblock, (uint64_t)data, (uint64_t)salt);
}

uint64_t krb5_string_to_key_data_salt_opaque(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = sub_213C81CD4(a2);
  if (v16)
  {
    uint64_t v17 = *(int **)(*((void *)v16 + 5) + 56);
    if (v17 && (int v18 = *v17) != 0)
    {
      uint64_t v19 = v17 + 6;
      while (v18 != *(_DWORD *)a5)
      {
        int v20 = *v19;
        v19 += 6;
        int v18 = v20;
        if (!v20) {
          goto LABEL_7;
        }
      }
      size_t v23 = (uint64_t (*)(_krb5_context *, uint64_t, uint64_t, uint64_t, long long *, uint64_t, uint64_t, uint64_t))*((void *)v19 - 1);
      long long v24 = *a5;
      uint64_t v25 = *((void *)a5 + 2);
      return v23(a1, a2, a3, a4, &v24, a6, a7, a8);
    }
    else
    {
LABEL_7:
      uint64_t v21 = 2314790658;
      krb5_set_error_message(a1, -1980176638, "salt type %d not supported");
    }
  }
  else
  {
    uint64_t v21 = 2529639062;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
  }
  return v21;
}

uint64_t krb5_string_to_key_salt(_krb5_context *a1, uint64_t a2, char *__s, long long *a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  long long v12 = *a4;
  uint64_t v13 = *((void *)a4 + 2);
  return krb5_string_to_key_data_salt(a1, a2, v10, (uint64_t)__s, (uint64_t)&v12, a5);
}

uint64_t krb5_string_to_key_salt_opaque(_krb5_context *a1, uint64_t a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  size_t v14 = strlen(__s);
  long long v16 = *(_OWORD *)a4;
  uint64_t v17 = *(void *)(a4 + 16);
  return krb5_string_to_key_data_salt_opaque(a1, a2, v14, (uint64_t)__s, &v16, a5, a6, a7);
}

uint64_t krb5_string_to_key_derived(_krb5_context *a1, const void *a2, size_t a3, int a4, krb5_keyblock *a5)
{
  size_t v10 = sub_213C81CD4(a4);
  if (!v10)
  {
    uint64_t v16 = 2529639062;
    krb5_set_error_message(a1, -1765328234, "encryption type %d not supported");
    return v16;
  }
  uint64_t v11 = (uint64_t)v10;
  unint64_t v12 = *(void *)(*((void *)v10 + 5) + 16);
  uint64_t v13 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
  v23[0] = (krb5_keyblock *)v13;
  if (!v13) {
    goto LABEL_10;
  }
  size_t v14 = (krb5_keyblock *)v13;
  uint64_t v15 = krb5_data_alloc((size_t *)v13 + 1, *(void *)(*(void *)(v11 + 40) + 24));
  if (v15)
  {
    uint64_t v16 = v15;
    free(v14);
    return v16;
  }
  size_t v17 = v12 >> 3;
  v14->krb5_magic magic = a4;
  int v18 = (char *)malloc_type_malloc(v17, 0xB3724923uLL);
  if (!v18)
  {
    krb5_free_keyblock(a1, v14);
LABEL_10:
    uint64_t v16 = 12;
    goto LABEL_11;
  }
  uint64_t v19 = v18;
  uint64_t v20 = sub_213C9EA44(a2, a3, v18, v17);
  if (v20)
  {
    uint64_t v16 = v20;
    free(v19);
LABEL_11:
    krb5_set_error_message(a1, 12, "malloc: out of memory");
    return v16;
  }
  v23[1] = 0;
  sub_213CB4E24((uint64_t)a1, (uint64_t)v14, (uint64_t)v19, v17);
  bzero(v19, v17);
  free(v19);
  uint64_t v22 = sub_213C84658(a1, v11, (uint64_t)v23, "kerberos", 8uLL);
  if (!v22) {
    uint64_t v22 = krb5_copy_keyblock_contents(a1, v23[0], a5);
  }
  uint64_t v16 = v22;
  sub_213C849D0(a1, (uint64_t)v23, v11);
  return v16;
}

uint64_t _krb5_put_int(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 - 1 >= 0)
  {
    uint64_t v3 = a3;
    do
    {
      *(unsigned char *)(a1 - 1 + v3) = a2;
      a2 >>= 8;
      --v3;
    }
    while (v3);
  }
  return a3;
}

uint64_t _krb5_get_int(unsigned __int8 *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = 0;
  if (a3)
  {
    uint64_t v4 = a3;
    do
    {
      unsigned int v5 = *a1++;
      unint64_t v3 = v5 | (v3 << 8);
      --v4;
    }
    while (v4);
  }
  *a2 = v3;
  return a3;
}

uint64_t sub_213CB6720(uint64_t a1)
{
  unsigned int v2 = 0;
  krb5_plugin_run_f(a1, "krb5", "ccache_ops", 0, 0, (uint64_t)&v2, (uint64_t)sub_213CB6774);
  return v2;
}

uint64_t sub_213CB6774(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4)
{
  if (!a2 || *a2 <= 7)
  {
    int v5 = krb5_cc_register(a1, (uint64_t)a2, 1);
    if (v5) {
      *a4 = v5;
    }
  }
  return 2529639161;
}

uint64_t _krb5_fast_cf2(_krb5_context *a1, const krb5_keyblock *a2, const char *a3, const krb5_keyblock *a4, const char *a5, krb5_keyblock *a6, krb5_keyblock ***a7)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v14 = krb5_crypto_init(a1, a2, 0, &v20);
  if (!v14)
  {
    uint64_t v15 = krb5_crypto_init(a1, a4, 0, &v19);
    if (v15)
    {
      uint64_t v14 = v15;
      krb5_crypto_destroy(a1, (uint64_t)v20);
    }
    else
    {
      v18[1] = a3;
      v17[1] = a5;
      v18[0] = strlen(a3);
      v17[0] = strlen(a5);
      uint64_t v14 = krb5_crypto_fx_cf2(a1, (uint64_t *)v20, (uint64_t *)v19, (uint64_t)v18, (uint64_t)v17, (char *)a2->magic, a6);
      krb5_crypto_destroy(a1, (uint64_t)v20);
      krb5_crypto_destroy(a1, (uint64_t)v19);
      if (!v14)
      {
        if (a7)
        {
          uint64_t v14 = krb5_crypto_init(a1, a6, 0, a7);
          if (v14) {
            krb5_free_keyblock_contents(a1, a6);
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v14;
}

uint64_t _krb5_fast_armor_key(_krb5_context *a1, const krb5_keyblock *a2, const krb5_keyblock *a3, krb5_keyblock *a4, krb5_keyblock ***a5)
{
  return _krb5_fast_cf2(a1, a2, "subkeyarmor", a3, "ticketarmor", a4, a5);
}

uint64_t sub_213CB690C(_krb5_context *a1, _krb5_ccache *a2, krb5_data *a3, krb5_keyblock *a4, krb5_keyblock ***a5)
{
  krb5_auth_context v24 = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  v13[0] = 0;
  krb5_data_zero(v13);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)krb5_principal principal = 0u;
  uint64_t credentials = krb5_auth_con_init(a1, &v24);
  if (!credentials)
  {
    uint64_t credentials = krb5_cc_get_principal(a1, a2, principal);
    if (!credentials)
    {
      uint64_t v11 = krb5_make_principal(a1, &principal[1], (char *)principal[0]->data, "krbtgt", principal[0]->data, 0);
      if (v11)
      {
        uint64_t credentials = v11;
        krb5_free_principal(a1, principal[0]);
      }
      else
      {
        uint64_t credentials = krb5_get_credentials(a1, 0, a2, (krb5_creds *)principal, &v14);
        krb5_free_principal(a1, principal[1]);
        krb5_free_principal(a1, principal[0]);
        if (!credentials)
        {
          uint64_t credentials = krb5_auth_con_add_AuthorizationData(a1, (uint64_t)v24);
          if (!credentials)
          {
            uint64_t credentials = krb5_mk_req_extended(a1, &v24, 4, 0, v14, a3);
            if (!credentials) {
              uint64_t credentials = _krb5_fast_cf2(a1, *((const krb5_keyblock **)v24 + 5), "subkeyarmor", *((const krb5_keyblock **)v24 + 4), "ticketarmor", a4, a5);
            }
          }
        }
      }
    }
  }
  if (v24) {
    krb5_auth_con_free(a1, v24);
  }
  if (v14) {
    krb5_free_creds(a1, v14);
  }
  return credentials;
}

uint64_t sub_213CB6AC0(krb5_context a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12 = (krb5_keyblock ***)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 48);
  if (v11)
  {
    if (*(_DWORD *)a2 != 1) {
      heim_abort("unknown state type: %d", v11, (uint64_t)a3, a4, a5, a6, a7, a8, *(_DWORD *)a2);
    }
    krb5_crypto_destroy(a1, v11);
  }
  else
  {
    if (!*(void *)(a2 + 16) && !*(void *)(a2 + 24))
    {
      int v13 = *(_DWORD *)(a2 + 4);
      if ((v13 & 0x100) == 0)
      {
        if ((v13 & 0x20) == 0) {
          return 0;
        }
        uint64_t v14 = 2529638953;
        krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
        return v14;
      }
    }
    *(_DWORD *)a2 = 1;
  }
  krb5_free_keyblock_contents(a1, (krb5_keyblock *)(a2 + 56));
  uint64_t v22 = *(void *)(a2 + 24);
  int v23 = *(_DWORD *)(a2 + 4);
  if (!v22)
  {
    if ((v23 & 0x1000) == 0) {
      heim_abort("FAST TGS without AC:(state->flags & KRB5_FAST_AS_REQ) != 0", v15, v16, v17, v18, v19, v20, v21, v33);
    }
    uint64_t v27 = *(void *)(a2 + 32);
    if (v27)
    {
      sub_213CBBE4C(v27);
      free(*(void **)(a2 + 32));
    }
    uint64_t v28 = (char *)malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
    if (!v28) {
      return 12;
    }
    uint64_t v29 = v28;
    if (*(unsigned char *)(a2 + 5))
    {
      memset(v37, 0, sizeof(v37));
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      heim_base_once_f(&qword_2678013F8, &qword_267801400, (dispatch_function_t)sub_213CB7758);
      if (!qword_267801400)
      {
        free(v29);
        uint64_t v14 = 2;
        krb5_set_error_message(a1, 2, "Failed to open fast armor service");
        return v14;
      }
      krb5_data_zero(&v34);
      v36[1] = a3;
      v36[0] = strlen(a3);
      uint64_t v31 = heim_ipc_call((void *)qword_267801400, (uint64_t)v36, (uint64_t)&v34, 0);
      if (v31)
      {
        uint64_t v14 = v31;
        krb5_set_error_message(a1, v31, "Failed to get armor service credential");
        goto LABEL_34;
      }
      uint64_t v14 = sub_213CBBF90(v35, v34, (uint64_t)v37, 0);
      krb5_data_free(&v34);
      if (v14) {
        goto LABEL_34;
      }
      uint64_t v32 = sub_213CBBE5C();
      if (v32)
      {
        uint64_t v14 = v32;
        sub_213CBBFB0((uint64_t)v37);
        goto LABEL_34;
      }
      uint64_t v14 = krb5_copy_keyblock_contents(a1, &v37[1], (krb5_keyblock *)(a2 + 56));
      sub_213CBBFB0((uint64_t)v37);
      if (v14) {
        goto LABEL_34;
      }
      uint64_t v30 = krb5_crypto_init(a1, (const krb5_keyblock *)(a2 + 56), 0, v12);
    }
    else
    {
      *(_DWORD *)uint64_t v28 = 1;
      uint64_t v30 = sub_213CB690C(a1, *(_krb5_ccache **)(a2 + 16), (krb5_data *)(v28 + 8), (krb5_keyblock *)(a2 + 56), v12);
    }
    uint64_t v14 = v30;
    if (!v30)
    {
      uint64_t v14 = 0;
      *(void *)(a2 + 32) = v29;
      return v14;
    }
LABEL_34:
    sub_213CBBE4C((uint64_t)v29);
    free(v29);
    return v14;
  }
  if ((v23 & 0x1000) != 0) {
    heim_abort("FAST AS with AC:(state->flags & KRB5_FAST_AS_REQ) == 0", v15, v16, v17, v18, v19, v20, v21, v33);
  }
  uint64_t v25 = *(const krb5_keyblock **)(v22 + 32);
  krb5_auth_context v24 = *(const krb5_keyblock **)(v22 + 40);

  return _krb5_fast_cf2(a1, v24, "subkeyarmor", v25, "ticketarmor", (krb5_keyblock *)(a2 + 56), v12);
}

uint64_t sub_213CB6DD0(_krb5_context *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v55 = 0;
  if ((*(unsigned char *)(a2 + 4) & 0x80) != 0)
  {
    sub_213C9C004((uint64_t)a1, 10, "fast disabled, not doing any fast wrapping");
    return 0;
  }
  uint64_t v58 = 0;
  long long v59 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  long long v61 = 0u;
  memset(v62, 0, sizeof(v62));
  uint64_t v63 = 0;
  memset(v60, 0, sizeof(v60));
  krb5_data_zero(&v58);
  krb5_data_zero(&v56);
  int v8 = *(_DWORD *)(a2 + 4);
  if (!*(void *)(a2 + 48))
  {
    if ((v8 & 0x20) != 0)
    {
      uint64_t checksum = 2529638953;
      krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
      return checksum;
    }
    return 0;
  }
  *(_DWORD *)(a2 + 4) = v8 | 0x20;
  LODWORD(v60[0]) |= 2u;
  uint64_t checksum = sub_213CBB5B0();
  if (!checksum)
  {
    if ((*(unsigned char *)(a2 + 5) & 0x10) == 0)
    {
LABEL_11:
      if (a4[1])
      {
        uint64_t checksum = sub_213CBB55C();
        sub_213CBB54C(a4[1]);
        if (checksum) {
          goto LABEL_4;
        }
LABEL_21:
        uint64_t v58 = sub_213CBBE2C((uint64_t)v60);
        uint64_t v19 = malloc_type_malloc(v58, 0xDBBE9656uLL);
        long long v59 = v19;
        if (v19)
        {
          uint64_t v20 = sub_213CBBE0C((uint64_t)v19 + v58 - 1, v58, (uint64_t)v60, (uint64_t)&v55);
          if (v20)
          {
LABEL_23:
            uint64_t checksum = v20;
            free(v59);
            long long v59 = 0;
            goto LABEL_4;
          }
          if (v58 != v55) {
LABEL_47:
          }
            heim_abort("ASN.1 internal error:data.length == size", v21, v22, v23, v24, v25, v26, v27, v54);
          LODWORD(v61) = *(_DWORD *)a2;
          if (v61 != 1)
          {
            krb5_data_free(&v58);
            heim_abort("unknown FAST type, internal error:false", v47, v48, v49, v50, v51, v52, v53, v54);
          }
          *((void *)&v61 + 1) = *(void *)(a2 + 32);
          *(void *)(a2 + 32) = 0;
          uint64_t v28 = *(_DWORD ***)(a2 + 48);
          if (!v28) {
            heim_abort("FAST armor key missing when FAST started:state->armor_crypto != NULL", 0, v22, v23, v24, v25, v26, v27, v54);
          }
          uint64_t checksum = krb5_create_checksum(a1, v28, 0x32u, 0, a3[1], *a3, (uint64_t)v62);
          if (checksum) {
            goto LABEL_4;
          }
          uint64_t checksum = krb5_encrypt_EncryptedData(a1, *(_DWORD ***)(a2 + 48), 51, v59, v58, 0, (uint64_t)&v62[1] + 8);
          krb5_data_free(&v58);
          if (checksum) {
            goto LABEL_4;
          }
          uint64_t v58 = sub_213CBBE90((uint64_t)&v61);
          uint64_t v29 = malloc_type_malloc(v58, 0x9C6D5AFAuLL);
          long long v59 = v29;
          if (v29)
          {
            uint64_t v20 = sub_213CBBE70((uint64_t)v29 + v58 - 1, v58, (uint64_t)&v61, (uint64_t)&v55);
            if (v20) {
              goto LABEL_23;
            }
            uint64_t v24 = v58;
            if (v58 == v55)
            {
              uint64_t checksum = krb5_padata_add(a1, (unsigned int *)a4[1], 136, (uint64_t)v59, v58);
              if (!checksum) {
                krb5_data_zero(&v58);
              }
              goto LABEL_4;
            }
            goto LABEL_47;
          }
        }
LABEL_43:
        uint64_t checksum = 12;
        goto LABEL_4;
      }
      uint64_t v18 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
      a4[1] = (uint64_t)v18;
      if (v18) {
        goto LABEL_21;
      }
LABEL_24:
      uint64_t checksum = krb5_enomem(a1);
      goto LABEL_4;
    }
    sub_213CBB5A0((uint64_t)(a4 + 2));
    uint64_t v11 = strdup("WELLKNOWN:ANONYMOUS");
    a4[4] = (uint64_t)v11;
    if (!v11) {
      goto LABEL_24;
    }
    unint64_t v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800407C14B876uLL);
    a4[3] = (uint64_t)v12;
    if (v12)
    {
      _DWORD *v12 = 1;
      krb5_deltat v12[2] = 2;
      *(void *)(a4[3] + 16) = malloc_type_calloc(2uLL, 8uLL, 0x10040436913F5uLL);
      int v13 = (void *)a4[3];
      uint64_t v14 = (char **)v13[2];
      if (v14)
      {
        *uint64_t v14 = strdup("WELLKNOWN");
        uint64_t v15 = *(void **)(a4[3] + 16);
        if (*v15)
        {
          v15[1] = strdup("ANONYMOUS");
          uint64_t v16 = *(void *)(a4[3] + 16);
          if (*(void *)(v16 + 8))
          {
LABEL_39:
            uint64_t v30 = malloc_type_calloc(1uLL, 8uLL, 0x100004000313F17uLL);
            a4[7] = (uint64_t)v30;
            void *v30 = 0;
            if (a3) {
              heim_abort("checksum data not NULL:checksum_data == NULL", v31, v32, v33, v34, v35, v36, v37, v54);
            }
            uint64_t v56 = sub_213CBB590((uint64_t)(a4 + 2));
            size_t v38 = malloc_type_malloc(v56, 0x8595DF09uLL);
            uint64_t v57 = v38;
            if (!v38) {
              goto LABEL_43;
            }
            uint64_t v39 = sub_213CBB570((uint64_t)v38 + v56 - 1, v56, (uint64_t)(a4 + 2), (uint64_t)&v55);
            if (v39)
            {
              uint64_t checksum = v39;
              free(v57);
              uint64_t v57 = 0;
              goto LABEL_4;
            }
            if (v56 != v55) {
              heim_abort("ASN.1 internal error:aschecksum_data.length == size", v40, v41, v42, v43, v44, v45, v46, v54);
            }
            a3 = &v56;
            goto LABEL_11;
          }
          uint64_t v17 = *(void **)v16;
        }
        else
        {
          uint64_t v17 = 0;
        }
        free(v17);
        free(*(void **)(*(void *)(a4[3] + 16) + 8));
        free(*(void **)(a4[3] + 16));
        int v13 = (void *)a4[3];
      }
      free(v13);
    }
    uint64_t checksum = krb5_enomem(a1);
    if (checksum) {
      goto LABEL_4;
    }
    goto LABEL_39;
  }
LABEL_4:
  sub_213CBBE3C((uint64_t)v60);
  sub_213CBBEA0((uint64_t)&v61);
  krb5_data_free(&v58);
  krb5_data_free(&v56);
  return checksum;
}

uint64_t sub_213CB7290(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 48))
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    if (*(_DWORD *)(a4 + 36) != -1765328293) {
      sub_213C9C004((uint64_t)a1, 10, "using fast but no FAST error code ?");
    }
    int v14 = 0;
    padata = krb5_find_padata(*(void *)(a3 + 8), *(_DWORD *)a3, 136, &v14);
    if (padata)
    {
      uint64_t v9 = sub_213CB743C(a1, a2, (uint64_t)padata, (uint64_t)v15);
      if (v9)
      {
LABEL_15:
        sub_213CBBED0((uint64_t)v15);
        return v9;
      }
      int v14 = 0;
      size_t v10 = krb5_find_padata(*((uint64_t *)&v15[0] + 1), v15[0], 137, &v14);
      if (v10)
      {
        uint64_t v11 = v10;
        sub_213CBBC4C(a4);
        uint64_t v9 = krb5_rd_error(a1, (const krb5_data *)(v11 + 2), (krb5_error **)a4);
        if (!v9)
        {
          unint64_t v12 = *(void **)(a4 + 96);
          if (v12) {
            sub_213C9C004((uint64_t)a1, 10, "FAST wrapped KBB_ERROR contained e_data: %d", *v12);
          }
          sub_213CBB54C(a3);
          uint64_t v9 = 0;
          *(void *)(a3 + 8) = *((void *)&v15[0] + 1);
          *(_DWORD *)a3 = v15[0];
          *((void *)&v15[0] + 1) = 0;
          LODWORD(v15[0]) = 0;
        }
        goto LABEL_15;
      }
      krb5_set_error_message(a1, -1765328237, "No wrapped error");
    }
    else
    {
      krb5_set_error_message(a1, -1765328237, "FAST fast respons is missing fx-fast data");
    }
    uint64_t v9 = 2529639059;
    goto LABEL_15;
  }
  if ((*(unsigned char *)(a2 + 4) & 0x20) == 0) {
    return 0;
  }
  uint64_t v9 = 2529638953;
  krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
  return v9;
}

uint64_t sub_213CB743C(_krb5_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v7 = sub_213CBBEE0(*(void *)(a3 + 16), *(void *)(a3 + 8), (uint64_t)v11, 0);
  if (!v7)
  {
    if (LODWORD(v11[0]) == 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = krb5_decrypt_EncryptedData(a1, *(void *)(a2 + 48), 52, (uint64_t)v11 + 8, &v9);
      if (!v7)
      {
        uint64_t v7 = sub_213CBBEB0(v10, v9, a4, 0);
        krb5_data_free(&v9);
      }
    }
    else
    {
      uint64_t v7 = 2529638936;
    }
    sub_213CBBF00((uint64_t)v11);
  }
  return v7;
}

uint64_t sub_213CB7500(krb5_context a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v18 = 0;
  if (!a4) {
    return 0;
  }
  if (!*(void *)(a4 + 48)
    || (uint64_t v8 = *(void *)(a5 + 8)) == 0
    || (padata = krb5_find_padata(*(void *)(v8 + 8), *(_DWORD *)v8, 136, &v18)) == 0)
  {
    if ((*(unsigned char *)(a4 + 4) & 0x20) != 0)
    {
      uint64_t v12 = 2529638953;
      krb5_set_error_message(a1, -1765328343, "Expected FAST, but no FAST was in the response from the KDC");
      return v12;
    }
    return 0;
  }
  uint64_t v21 = 0;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  uint64_t v12 = sub_213CB743C(a1, a4, (uint64_t)padata, (uint64_t)&v19);
  if (!v12)
  {
    sub_213CBB54C(*(void *)(a5 + 8));
    uint64_t v12 = sub_213CBB55C();
    if (!v12)
    {
      int v14 = v20[0];
      if (!v20[0]) {
        goto LABEL_16;
      }
      uint64_t v17 = *(krb5_keyblock **)(a4 + 80);
      uint64_t v16 = (krb5_keyblock **)(a4 + 80);
      uint64_t v15 = v17;
      if (v17)
      {
        krb5_free_keyblock(a1, v15);
        int v14 = v20[0];
      }
      uint64_t v12 = krb5_copy_keyblock(a1, v14, v16);
      if (!v12)
      {
LABEL_16:
        uint64_t v12 = 2529638936;
        if (v21 == a2)
        {
          if (v20[1])
          {
            uint64_t v12 = sub_213CBAF94();
            if (!v12)
            {
              sub_213CBAF84(a5 + 16);
              *(void *)(a5 + 16) = 0;
              uint64_t v12 = sub_213CBB008();
              if (!v12)
              {
                sub_213CBAFF8(a5 + 24);
                *(_OWORD *)(a5 + 24) = 0uLL;
                *(void *)(a5 + 40) = 0;
              }
            }
          }
          else if (a3)
          {
            uint64_t v12 = 2529638936;
          }
          else
          {
            uint64_t v12 = 0;
          }
        }
      }
    }
  }
  sub_213CBBED0((uint64_t)&v19);
  return v12;
}

double sub_213CB76C0(krb5_context a1, uint64_t a2)
{
  uint64_t v4 = *(_krb5_ccache **)(a2 + 16);
  if (v4) {
    krb5_cc_close(a1, v4);
  }
  int v5 = *(krb5_principal_data **)(a2 + 40);
  if (v5) {
    krb5_free_principal(a1, v5);
  }
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6) {
    krb5_crypto_destroy(a1, v6);
  }
  uint64_t v7 = *(krb5_keyblock **)(a2 + 80);
  if (v7) {
    krb5_free_keyblock(a1, v7);
  }
  krb5_free_keyblock_contents(a1, (krb5_keyblock *)(a2 + 56));
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    sub_213CBBE4C(v8);
    free(*(void **)(a2 + 32));
  }
  *(void *)(a2 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_213CB7758(void *a1)
{
  return heim_ipc_init_context("ANY:org.h5l.armor-service", a1);
}

size_t base64_encode(uint64_t a1, unsigned int a2, const char **a3)
{
  if (a2 >> 29 || (uint64_t v6 = (const char *)malloc_type_malloc(4 * a2 / 3 + 4, 0x89873ABCuLL)) == 0)
  {
    *a3 = 0;
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (char *)v6;
    if (a2)
    {
      unint64_t v8 = 1;
      uint64_t v7 = (char *)v6;
      do
      {
        int v9 = *(unsigned __int8 *)(a1 + v8 - 1) << 8;
        if (v8 < a2) {
          v9 |= *(unsigned __int8 *)(a1 + v8);
        }
        unint64_t v10 = (v9 << 8);
        if (v8 + 1 < a2) {
          unint64_t v10 = v10 | *(unsigned __int8 *)(a1 + v8 + 1);
        }
        unint64_t v11 = v8 + 2;
        char *v7 = aAbcdefghijklmn[(unint64_t)v10 >> 18];
        v7[1] = aAbcdefghijklmn[(v10 >> 12) & 0x3F];
        void v7[2] = aAbcdefghijklmn[(v10 >> 6) & 0x3F];
        char v12 = aAbcdefghijklmn[v10 & 0x3F];
        if (v8 + 2 > a2) {
          char v12 = 61;
        }
        v7[3] = v12;
        if (v8 + 1 > a2) {
          void v7[2] = 61;
        }
        v7 += 4;
        v8 += 3;
      }
      while (v11 < a2);
    }
    char *v7 = 0;
    *a3 = v6;
    return strlen(v6);
  }
}

uint64_t base64_decode(char *__s, unsigned char *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = a2;
  while (1)
  {
    int v5 = *__s;
    if (v5 != 61
      && (!*__s || !memchr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", (char)v5, 0x41uLL)))
    {
      return (v4 - v2);
    }
    if (strlen(__s) < 4) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    do
    {
      v8 <<= 6;
      int v9 = __s[v6];
      if (v9 == 61)
      {
        ++v7;
      }
      else
      {
        if (v7 > 0) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v10 = 0;
        int v11 = 65;
        while (v11 != v9)
        {
          int v11 = aAbcdefghijklmn[++v10];
          if (v10 == 64)
          {
            LODWORD(v10) = -1;
            break;
          }
        }
        v8 += v10;
      }
      ++v6;
    }
    while (v6 != 4);
    if (v7 > 2) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v12 = v8 | (v7 << 24);
    if (v12 == -1) {
      return 0xFFFFFFFFLL;
    }
    unsigned char *v4 = BYTE2(v8);
    if (v12 >> 25)
    {
      ++v4;
    }
    else
    {
      v4[1] = BYTE1(v8);
      if (HIBYTE(v12))
      {
        v4 += 2;
      }
      else
      {
        v4[2] = v8;
        v4 += 3;
      }
    }
    __s += 4;
  }
}

uint64_t sub_213CB79C8(int a1)
{
  uint64_t result = fcntl(a1, 1);
  if (result != -1) {
    return fcntl(a1, 2, result | 1);
  }
  return result;
}

uint64_t rk_cloexec_file(FILE *a1)
{
  int v1 = fileno(a1);

  return sub_213CB79C8(v1);
}

void *sub_213CB7A3C(size_t a1, size_t a2)
{
  uint64_t result = malloc_type_calloc(a1, a2, 0x8B05E375uLL);
  if (!result)
  {
    if (a2 * a1) {
      errx(1, "calloc %lu failed", a2 * a1);
    }
  }
  return result;
}

void *sub_213CB7A94(size_t a1)
{
  uint64_t result = malloc_type_malloc(a1, 0xF09CB13uLL);
  if (a1)
  {
    if (!result) {
      errx(1, "malloc %lu failed", a1);
    }
  }
  return result;
}

void *sub_213CB7AE4(void *a1, size_t a2)
{
  uint64_t result = malloc_type_realloc(a1, a2, 0x3AE5F225uLL);
  if (a2)
  {
    if (!result) {
      errx(1, "realloc %lu failed", a2);
    }
  }
  return result;
}

char *rk_estrdup(const char *a1)
{
  uint64_t result = strdup(a1);
  if (!result) {
    sub_213CD8734();
  }
  return result;
}

uint64_t rk_hex_encode(char *a1, uint64_t a2, void *a3)
{
  return sub_213CB7B64(a1, a2, (uint64_t)"0123456789ABCDEF", a3);
}

uint64_t sub_213CB7B64(char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 < 0)
  {
    int v8 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = a2;
  int v8 = (char *)malloc_type_malloc((2 * a2) | 1, 0x1E2051BBuLL);
  if (!v8)
  {
LABEL_8:
    uint64_t v9 = -1;
    goto LABEL_11;
  }
  if (v6)
  {
    uint64_t v9 = 2 * v6;
    uint64_t v10 = v8 + 1;
    do
    {
      *(v10 - 1) = *(unsigned char *)(a3 + ((unint64_t)*a1 >> 4));
      char v11 = *a1++;
      unsigned char *v10 = *(unsigned char *)(a3 + (v11 & 0xF));
      v10 += 2;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v9 = 0;
  }
  v8[v9] = 0;
LABEL_11:
  *a4 = v8;
  return v9;
}

uint64_t rk_hex_decode(const char *a1, unsigned char *a2, size_t a3)
{
  int v5 = (unsigned __int8 *)a1;
  size_t v6 = strlen(a1);
  size_t v7 = v6 & 1;
  if (v7 + (v6 >> 1) > a3) {
    return -1;
  }
  unint64_t v9 = v6;
  if (v6)
  {
    unsigned __int8 v10 = *v5++;
    *a2++ = sub_213CB7CC0(v10);
  }
  if (v9 >= 2)
  {
    if (v9 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v9 >> 1;
    }
    unsigned int v12 = v5 + 1;
    uint64_t v13 = v11;
    do
    {
      char v14 = sub_213CB7CC0(*(v12 - 1));
      *a2++ = sub_213CB7CC0(*v12) | (16 * v14);
      v12 += 2;
      --v13;
    }
    while (v13);
  }
  else
  {
    uint64_t v11 = 0;
  }
  return v11 + v7;
}

uint64_t sub_213CB7CC0(unsigned __int8 a1)
{
  char v1 = __toupper(a1);
  uint64_t result = 0;
  LOBYTE(v3) = 48;
  while (v1 != (char)v3)
  {
    int v3 = a0123456789abcd[++result];
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

ssize_t sub_213CB7D14(int a1, char *a2, size_t a3)
{
  if (!a3) {
    return a3;
  }
  size_t v6 = a3;
  while (1)
  {
    while (1)
    {
      ssize_t v7 = read(a1, a2, v6);
      ssize_t v8 = v7;
      if ((v7 & 0x8000000000000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        return v8;
      }
    }
    if (!v7) {
      break;
    }
    a2 += v7;
    v6 -= v7;
    if (!v6) {
      return a3;
    }
  }
  return v8;
}

size_t sub_213CB7D98(int __fd, char *__buf, size_t __nbyte)
{
  size_t v3 = __nbyte;
  if (__nbyte)
  {
    size_t v6 = __nbyte;
    do
    {
      while (1)
      {
        ssize_t v7 = write(__fd, __buf, v6);
        ssize_t v8 = v7;
        if (v7 < 0) {
          break;
        }
        __buf += v7;
        v6 -= v7;
        if (!v6) {
          return v3;
        }
      }
    }
    while (*__error() == 4);
    return v8;
  }
  return v3;
}

uint64_t parse_bytes(char *a1, char *a2)
{
  return parse_units(a1, (const char **)&off_2677FE5A8, a2);
}

uint64_t unparse_bytes(uint64_t a1, char *a2, size_t a3)
{
  return sub_213CB8188(a1, (uint64_t)&off_2677FE5A8, a2, a3);
}

uint64_t unparse_bytes_short(uint64_t a1, char *a2, size_t a3)
{
  return sub_213CB8310(a1, (uint64_t)&off_2677FE648, a2, a3);
}

uint64_t parse_time(char *a1, char *a2)
{
  return parse_units(a1, (const char **)&off_2677FE688, a2);
}

uint64_t unparse_time(uint64_t a1, char *a2, size_t a3)
{
  return (int)sub_213CB8188(a1, (uint64_t)&off_2677FE688, a2, a3);
}

const char *print_time_table(FILE *a1)
{
  return sub_213CB8348((const char *)&off_2677FE688, a1);
}

uint64_t parse_units(char *a1, const char **a2, char *a3)
{
  return sub_213CB7EBC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))sub_213CB8138, 0, 0);
}

uint64_t sub_213CB7EBC(char *a1, const char **a2, char *a3, uint64_t (*a4)(uint64_t, uint64_t, void), uint64_t a5, int a6)
{
  if (a3)
  {
    unint64_t v9 = *a2;
    if (!*a2) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = a2 + 2;
    while (strcasecmp(v9, a3))
    {
      unsigned int v12 = *v11;
      v11 += 2;
      unint64_t v9 = v12;
      if (!v12) {
        return 0xFFFFFFFFLL;
      }
    }
    int v13 = *((_DWORD *)v11 - 2);
  }
  else
  {
    int v13 = 1;
  }
  if (!*a1) {
    return a5;
  }
  unsigned int v33 = v13;
  uint64_t v14 = MEMORY[0x263EF8318];
  while (2)
  {
    __endptr = 0;
    uint64_t v15 = a1 - 1;
    do
    {
      uint64_t v16 = v15[1];
      if (v15[1] < 0) {
        int v17 = __maskrune(v15[1], 0x4000uLL);
      }
      else {
        int v17 = *(_DWORD *)(v14 + 4 * v16 + 60) & 0x4000;
      }
      ++v15;
    }
    while (v16 == 44 || v17 != 0);
    unsigned int v19 = strtol(v15, &__endptr, 0);
    uint64_t v20 = __endptr;
    if (v15 == __endptr) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v19;
    }
    if (!a6 && v15 == __endptr) {
      return 0xFFFFFFFFLL;
    }
    a1 = __endptr;
    do
    {
      uint64_t v22 = *a1;
      if (*a1 < 0) {
        int v23 = __maskrune(*a1, 0x4000uLL);
      }
      else {
        int v23 = *(_DWORD *)(v14 + 4 * v22 + 60) & 0x4000;
      }
      ++a1;
    }
    while (v23);
    switch(v22)
    {
      case 0x2B:
        LODWORD(v21) = 1;
        break;
      case 0x2D:
        LODWORD(v21) = -1;
        break;
      case 0:
        return a4(a5, v21, v33);
      default:
        --a1;
        break;
    }
    if (v21) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v15 == v20;
    }
    if (v24) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v21;
    }
    size_t v25 = strcspn(a1, ", \t");
    size_t v26 = v25;
    if (v25 >= 2 && a1[v25 - 1] == 115) {
      size_t v26 = v25 - 1;
    }
    uint64_t v27 = *a2;
    if (!*a2) {
      return 0xFFFFFFFFLL;
    }
    int v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = a2;
    while (strncasecmp(a1, v27, v26))
    {
LABEL_50:
      uint64_t v31 = v30[2];
      v30 += 2;
      uint64_t v27 = v31;
      if (!v31) {
        goto LABEL_51;
      }
    }
    if (v26 != strlen(v27))
    {
      ++v28;
      uint64_t v29 = v30;
      goto LABEL_50;
    }
    a5 = a4(a5, v21, *((unsigned int *)v30 + 2));
    if ((a5 & 0x80000000) != 0) {
      return a5;
    }
    a1 += v26;
    if (*v30) {
      goto LABEL_54;
    }
LABEL_51:
    if (v28 != 1) {
      return 0xFFFFFFFFLL;
    }
    a5 = a4(a5, v21, *((unsigned int *)v29 + 2));
    if ((a5 & 0x80000000) != 0) {
      return a5;
    }
    a1 += v26;
LABEL_54:
    if (*a1 == 115) {
      ++a1;
    }
    if (*a1) {
      continue;
    }
    return a5;
  }
}

uint64_t sub_213CB8138(int a1, int a2, int a3)
{
  return (a1 + a3 * a2);
}

uint64_t parse_flags(char *a1, const char **a2, uint64_t a3)
{
  return sub_213CB7EBC(a1, a2, 0, (uint64_t (*)(uint64_t, uint64_t, void))sub_213CB8160, a3, 1);
}

uint64_t sub_213CB8160(int a1, int a2, unsigned int a3)
{
  if (a2 == 1) {
    unsigned int v3 = a3 | a1;
  }
  else {
    unsigned int v3 = -1;
  }
  if (!a2) {
    unsigned int v3 = a3;
  }
  if (a2 == -1) {
    return a1 & ~a3;
  }
  else {
    return v3;
  }
}

uint64_t sub_213CB8188(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  return sub_213CB81B4(a1, a2, a3, a4, (uint64_t (*)(char *, size_t, uint64_t, void, uint64_t))sub_213CB82AC, (uint64_t (*)(uint64_t))sub_213CB8304, "0");
}

uint64_t sub_213CB81B4(uint64_t a1, uint64_t a2, char *__str, size_t __size, uint64_t (*a5)(char *, size_t, uint64_t, void, uint64_t), uint64_t (*a6)(uint64_t), const char *a7)
{
  size_t v7 = __size;
  ssize_t v8 = __str;
  if (!a1) {
    return snprintf(__str, __size, "%s", a7);
  }
  uint64_t v9 = a1;
  if ((int)a1 < 1) {
    return 0;
  }
  uint64_t v13 = 0;
  while (*(void *)a2)
  {
    unsigned int v14 = *(_DWORD *)(a2 + 8);
    if (v14 <= v9)
    {
      uint64_t v15 = v9 / v14;
      uint64_t v9 = a6(v9);
      uint64_t v16 = a5(v8, v7, v15, *(void *)a2, v9);
      if ((v16 & 0x80000000) != 0) {
        return v16;
      }
      BOOL v17 = (int)v16 <= (int)v7;
      if ((int)v16 <= (int)v7) {
        v7 -= v16;
      }
      else {
        size_t v7 = 0;
      }
      if (v17) {
        v8 += v16;
      }
      else {
        ssize_t v8 = 0;
      }
      uint64_t v13 = (v16 + v13);
    }
    a2 += 16;
    if ((int)v9 <= 0) {
      return v13;
    }
  }
  return v13;
}

uint64_t sub_213CB82AC(char *a1, size_t a2, int a3, const char *a4, int a5)
{
  int v5 = "s";
  size_t v6 = "";
  if (a3 == 1) {
    int v5 = "";
  }
  if (a5 > 0) {
    size_t v6 = " ";
  }
  return snprintf(a1, a2, "%u %s%s%s", a3, a4, v5, v6);
}

uint64_t sub_213CB8304(unsigned int a1, unsigned int a2)
{
  return a1 % a2;
}

uint64_t sub_213CB8310(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  return sub_213CB81B4(a1, a2, a3, a4, (uint64_t (*)(char *, size_t, uint64_t, void, uint64_t))sub_213CB82AC, (uint64_t (*)(uint64_t))sub_213CB833C, "0");
}

uint64_t sub_213CB833C(uint64_t result, unsigned int a2)
{
  if (a2 <= result) {
    return 0;
  }
  else {
    return result;
  }
}

const char *sub_213CB8348(const char *result, FILE *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v4 = result;
    size_t v5 = 0;
    uint64_t v6 = 16;
    uint64_t result = *(const char **)result;
    do
    {
      size_t v7 = strlen(result);
      if (v5 <= v7) {
        size_t v5 = v7;
      }
      uint64_t result = *(const char **)&v4[v6];
      v6 += 16;
    }
    while (result);
    if (v2)
    {
      do
      {
        ssize_t v8 = v4;
        uint64_t v9 = v4 + 16;
        do
        {
          uint64_t v4 = v9;
          if (!*(void *)v9)
          {
            uint64_t result = (const char *)fprintf(a2, "1 %s\n");
            goto LABEL_18;
          }
          uint64_t v10 = *((unsigned int *)v8 + 2);
          v9 += 16;
        }
        while (*((_DWORD *)v4 + 2) == v10);
        uint64_t v11 = v4;
        do
        {
          unsigned int v12 = v10 % *((_DWORD *)v11 + 2);
          if (!v12) {
            break;
          }
          uint64_t v13 = *((void *)v11 + 2);
          v11 += 16;
        }
        while (v13);
        if (v12) {
          uint64_t v14 = -1;
        }
        else {
          uint64_t v14 = 0;
        }
        sub_213CB81B4(v10, (uint64_t)&v11[16 * v14], __str, 0x400uLL, (uint64_t (*)(char *, size_t, uint64_t, void, uint64_t))sub_213CB82AC, (uint64_t (*)(uint64_t))sub_213CB8304, "0");
        uint64_t result = (const char *)fprintf(a2, "1 %*s = %s\n");
LABEL_18:
        ;
      }
      while (*(void *)v4);
    }
  }
  return result;
}

uint64_t unparse_flags(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  return sub_213CB81B4(a1, a2, a3, a4, (uint64_t (*)(char *, size_t, uint64_t, void, uint64_t))sub_213CB84E8, (uint64_t (*)(uint64_t))sub_213CB852C, "");
}

uint64_t sub_213CB84E8(char *a1, size_t a2, uint64_t a3, const char *a4, int a5)
{
  size_t v5 = "";
  if (a5 > 0) {
    size_t v5 = ", ";
  }
  return snprintf(a1, a2, "%s%s", a4, v5);
}

uint64_t sub_213CB852C(int a1, int a2)
{
  return (a1 - a2);
}

const char **print_flags_table(const char **result, FILE *a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    uint64_t v4 = result + 2;
    do
    {
      if (*v4) {
        size_t v5 = ", ";
      }
      else {
        size_t v5 = "\n";
      }
      uint64_t result = (const char **)fprintf(a2, "%s%s", v2, v5);
      uint64_t v6 = *v4;
      v4 += 2;
      uint64_t v2 = v6;
    }
    while (v6);
  }
  return result;
}

unsigned __int8 *rk_strlwr(unsigned __int8 *a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2)
  {
    unsigned int v3 = a1 + 1;
    do
    {
      *(v3 - 1) = __tolower(v2);
      __darwin_ct_rune_t v4 = *v3++;
      __darwin_ct_rune_t v2 = v4;
    }
    while (v4);
  }
  return a1;
}

void sub_213CB85F4(void **a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2) {
    free(v2);
  }

  free(a1);
}

void **rk_strpoolprintf(void **a1, char *a2, ...)
{
  va_start(va, a2);
  unsigned int v3 = a1;
  if (!a1)
  {
    __darwin_ct_rune_t v4 = (void **)malloc_type_malloc(0x10uLL, 0x1010040FDD9F14CuLL);
    unsigned int v3 = v4;
    if (!v4) {
      return v3;
    }
    const char *v4 = 0;
    v4[1] = 0;
  }
  __src[0] = 0;
  va_copy((va_list)&__src[1], va);
  int v5 = vasprintf((char **)__src, a2, va);
  if (__src[0] && (int v6 = v5, (v7 = (char *)malloc_type_realloc(*v3, (size_t)v3[1] + v5 + 1, 0x21DB7AF2uLL)) != 0))
  {
    unsigned __int8 *v3 = v7;
    memcpy((char *)v3[1] + (void)v7, __src[0], v6 + 1);
    v3[1] = (char *)v3[1] + v6;
    free(__src[0]);
  }
  else
  {
    sub_213CB85F4(v3);
    return 0;
  }
  return v3;
}

char *rk_strpoolcollect(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    free(a1);
    return (char *)v2;
  }
  else
  {
    return strdup("");
  }
}

uint64_t rk_strsep_copy(const char **a1, const char *a2, void *a3, size_t a4)
{
  __darwin_ct_rune_t v4 = *a1;
  if (!*a1) {
    return -1;
  }
  size_t v8 = strcspn(*a1, a2);
  uint64_t v9 = &v4[v8];
  *a1 = &v4[v8];
  if (a4)
  {
    if (v8 < a4) {
      a4 = v8;
    }
    memcpy(a3, v4, a4);
    *((unsigned char *)a3 + a4) = 0;
    uint64_t v9 = *a1;
  }
  uint64_t result = v9 - v4;
  int v12 = *(unsigned __int8 *)v9;
  uint64_t v11 = v9 + 1;
  if (!v12) {
    uint64_t v11 = 0;
  }
  *a1 = v11;
  return result;
}

unsigned __int8 *rk_strupr(unsigned __int8 *a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2)
  {
    unsigned int v3 = a1 + 1;
    do
    {
      *(v3 - 1) = __toupper(v2);
      __darwin_ct_rune_t v4 = *v3++;
      __darwin_ct_rune_t v2 = v4;
    }
    while (v4);
  }
  return a1;
}

void sub_213CB8824(void *a1)
{
  __darwin_ct_rune_t v2 = (void *)a1[4];
  if (v2) {
    free(v2);
  }
  uint64_t v3 = a1[6];
  if (v3)
  {
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      sub_213CB887C((void **)v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }

  free(a1);
}

void sub_213CB887C(void **a1)
{
  __darwin_ct_rune_t v2 = *a1;
  if (v2) {
    free(v2);
  }
  uint64_t v3 = a1[3];
  if (v3) {
    free(v3);
  }

  free(a1);
}

_DWORD *sub_213CB88C8(const u_char *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = malloc_type_calloc(1uLL, 0x38uLL, 0x1030040EB7735E0uLL);
  int v5 = v4;
  if (!v4) {
    return v5;
  }
  uint64_t v20 = a1;
  _DWORD *v4 = __rev16(*(unsigned __int16 *)a1);
  v4[1] = 0;
  int v6 = a1[2] & 1;
  v4[1] = v6;
  v4[2] = (a1[2] >> 1) & 0xF;
  u_char v7 = a1[2];
  if ((v7 & 0x20) == 0)
  {
    if ((a1[2] & 0x40) == 0) {
      goto LABEL_4;
    }
LABEL_15:
    v6 |= 4u;
    v4[1] = v6;
    if ((a1[2] & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  v6 |= 2u;
  v4[1] = v6;
  u_char v7 = a1[2];
  if ((v7 & 0x40) != 0) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v7 & 0x80) == 0) {
    goto LABEL_5;
  }
LABEL_16:
  v6 |= 8u;
  v4[1] = v6;
LABEL_5:
  unsigned int v8 = a1[3];
  if ((v8 & 1) == 0)
  {
    if ((v8 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_18:
    v6 |= 2u;
    v4[1] = v6;
    unsigned int v8 = a1[3];
    if ((v8 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v6 |= 0x10u;
  v4[1] = v6;
  unsigned int v8 = a1[3];
  if ((v8 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_7:
  if ((v8 & 8) != 0)
  {
LABEL_8:
    v4[1] = v6 | 0x40;
    unsigned int v8 = a1[3];
  }
LABEL_9:
  v4[3] = v8 >> 4;
  unsigned int v9 = __rev16(*((unsigned __int16 *)a1 + 2));
  v4[4] = v9;
  void v4[5] = __rev16(*((unsigned __int16 *)a1 + 3));
  void v4[6] = __rev16(*((unsigned __int16 *)a1 + 4));
  v4[7] = __rev16(*((unsigned __int16 *)a1 + 5));
  if (v9 == 1)
  {
    uint64_t v10 = &a1[a2];
    int v11 = res_9_dn_expand(a1, v10, a1 + 12, __s1, 1025);
    if ((v11 & 0x80000000) == 0)
    {
      unsigned int v12 = v11;
      uint64_t v13 = strdup(__s1);
      *((void *)v5 + 4) = v13;
      if (v13)
      {
        uint64_t v14 = &a1[v12 + 12];
        if (v14 + 4 <= v10)
        {
          v5[10] = __rev16(*(unsigned __int16 *)v14);
          v5[11] = __rev16(*((unsigned __int16 *)v14 + 1));
          uint64_t v20 = v14 + 4;
          uint64_t v16 = (void ***)(v5 + 12);
          if (v5[5])
          {
            uint64_t v17 = 0;
            while (!sub_213CB8B78(a1, v10, &v20, v16))
            {
              uint64_t v16 = (void ***)(*v16 + 4);
              if (++v17 >= (unint64_t)v5[5]) {
                goto LABEL_27;
              }
            }
          }
          else
          {
LABEL_27:
            if (v5[6])
            {
              uint64_t v18 = 0;
              while (!sub_213CB8B78(a1, v10, &v20, v16))
              {
                uint64_t v16 = (void ***)(*v16 + 4);
                if (++v18 >= (unint64_t)v5[6]) {
                  goto LABEL_31;
                }
              }
            }
            else
            {
LABEL_31:
              if (!v5[7])
              {
LABEL_35:
                _DWORD *v16 = 0;
                return v5;
              }
              uint64_t v19 = 0;
              while (!sub_213CB8B78(a1, v10, &v20, v16))
              {
                uint64_t v16 = (void ***)(*v16 + 4);
                if (++v19 >= (unint64_t)v5[7]) {
                  goto LABEL_35;
                }
              }
            }
          }
        }
      }
    }
    sub_213CB8824(v5);
  }
  else
  {
    free(v4);
  }
  return 0;
}

uint64_t sub_213CB8B78(const u_char *a1, const u_char *a2, const u_char **a3, void ***a4)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  unsigned int v8 = *a3;
  *a4 = 0;
  unsigned int v9 = res_9_dn_expand(a1, a2, v8, __s1, 1025);
  if ((v9 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = &v8[v9];
  int v11 = (unsigned __int8 *)(v10 + 10);
  if (v10 + 10 > a2) {
    return 0xFFFFFFFFLL;
  }
  size_t v12 = __rev16(*((unsigned __int16 *)v10 + 4));
  if (&v11[v12] > a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v45 = &v11[v12];
  unsigned int v13 = *(unsigned __int16 *)v10;
  unsigned int v14 = *((unsigned __int16 *)v10 + 1);
  unsigned int v15 = *((_DWORD *)v10 + 1);
  uint64_t v16 = malloc_type_calloc(1uLL, 0x28uLL, 0x10B2040F871B7ADuLL);
  if (!v16) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v46 = v16;
  uint64_t v17 = strdup(__s1);
  *(void *)uint64_t v46 = v17;
  if (!v17) {
    goto LABEL_50;
  }
  int v18 = __rev16(v13);
  krb5_timestamp v46[2] = v18;
  v46[3] = __rev16(v14);
  void v46[4] = bswap32(v15);
  v46[5] = v12;
  if (v18 <= 32)
  {
    switch(v18)
    {
      case 12:
        goto LABEL_23;
      case 13:
      case 14:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_31;
      case 15:
      case 18:
        unsigned int v19 = res_9_dn_expand(a1, a2, v10 + 12, __s1, 1025);
        if ((v19 & 0x80000000) != 0 || (unint64_t)v19 + 2 > v12) {
          goto LABEL_48;
        }
        size_t v20 = strlen(__s1);
        uint64_t v21 = malloc_type_malloc(v20 + 8, 0xFBC82BA4uLL);
        *((void *)v46 + 3) = v21;
        if (v21)
        {
          *uint64_t v21 = __rev16(*((unsigned __int16 *)v10 + 5));
          uint64_t v22 = (char *)(*((void *)v46 + 3) + 4);
          goto LABEL_59;
        }
        uint64_t v41 = (void **)v46;
        goto LABEL_51;
      case 16:
        if (!v12) {
          goto LABEL_50;
        }
        uint64_t v30 = *v11;
        if (v12 <= v30) {
          goto LABEL_50;
        }
        uint64_t v31 = (char *)malloc_type_malloc(v30 + 1, 0x969AA4F7uLL);
        *((void *)v46 + 3) = v31;
        if (v31)
        {
          strncpy(v31, (const char *)v10 + 11, v10[10]);
          BOOL v24 = (void **)v46;
          *(unsigned char *)(*((void *)v46 + 3) + v10[10]) = 0;
          goto LABEL_62;
        }
        uint64_t v41 = (void **)v46;
        break;
      case 24:
        if (v12 <= 0x12) {
          goto LABEL_50;
        }
        unsigned int v32 = res_9_dn_expand(a1, a2, v10 + 28, __s1, 1025);
        if ((v32 & 0x80000000) != 0) {
          goto LABEL_48;
        }
        uint64_t v33 = v32;
        if ((unint64_t)v32 + 18 > v12) {
          goto LABEL_48;
        }
        size_t v34 = v12 - v32 - 18;
        size_t v35 = strlen(__s1);
        uint64_t v36 = malloc_type_malloc(v34 + v35 + 56, 0xF7A76091uLL);
        BOOL v24 = (void **)v46;
        *((void *)v46 + 3) = v36;
        if (!v36) {
          goto LABEL_63;
        }
        _DWORD *v36 = __rev16(*((unsigned __int16 *)v10 + 5));
        *(_DWORD *)(*((void *)v46 + 3) + 4) = v10[12];
        *(_DWORD *)(*((void *)v46 + 3) + 8) = v10[13];
        *(_DWORD *)(*((void *)v46 + 3) + 12) = bswap32(*(_DWORD *)(v10 + 14));
        *(_DWORD *)(*((void *)v46 + 3) + 16) = bswap32(*(_DWORD *)(v10 + 18));
        *(_DWORD *)(*((void *)v46 + 3) + 20) = bswap32(*(_DWORD *)(v10 + 22));
        *(_DWORD *)(*((void *)v46 + 3) + 24) = __rev16(*((unsigned __int16 *)v10 + 13));
        *(void *)(*((void *)v46 + 3) + 40) = v34;
        memcpy((void *)(*((void *)v46 + 3) + 48), &v10[v33 + 28], v34);
        *(void *)(*((void *)v46 + 3) + 32) = *((void *)v46 + 3) + v34 + 48;
        uint64_t v22 = *(char **)(*((void *)v46 + 3) + 32);
        size_t v37 = v35 + 1;
        goto LABEL_60;
      case 25:
        if (v12 <= 3) {
          goto LABEL_50;
        }
        size_t v12 = (v12 - 4);
        size_t v38 = v12 + 31;
        malloc_type_id_t v39 = 399493579;
        goto LABEL_54;
      default:
        if (v18 != 2 && v18 != 5) {
          goto LABEL_31;
        }
LABEL_23:
        if (res_9_dn_expand(a1, a2, v10 + 10, __s1, 1025) < 0) {
          goto LABEL_48;
        }
        int v28 = strdup(__s1);
        BOOL v24 = (void **)v46;
        *((void *)v46 + 3) = v28;
        if (!v28) {
          goto LABEL_63;
        }
        goto LABEL_62;
    }
    goto LABEL_51;
  }
  if (v18 > 42)
  {
    if (v18 == 43)
    {
      if (v12 > 3)
      {
        size_t v12 = (v12 - 4);
        size_t v38 = v12 + 31;
        malloc_type_id_t v39 = 2013406956;
LABEL_54:
        uint64_t v43 = malloc_type_malloc(v38, v39);
        BOOL v24 = (void **)v46;
        *((void *)v46 + 3) = v43;
        if (v43)
        {
          _DWORD *v43 = __rev16(*((unsigned __int16 *)v10 + 5));
          *(_DWORD *)(*((void *)v46 + 3) + 4) = v10[12];
          *(_DWORD *)(*((void *)v46 + 3) + 8) = v10[13];
          *(void *)(*((void *)v46 + 3) + 16) = v12;
          size_t v25 = (void *)(*((void *)v46 + 3) + 24);
          size_t v26 = v10 + 14;
          goto LABEL_56;
        }
        goto LABEL_63;
      }
    }
    else
    {
      if (v18 != 44) {
        goto LABEL_31;
      }
      if (v12 > 1)
      {
        size_t v12 = (v12 - 2);
        uint64_t v29 = malloc_type_malloc(v12 + 23, 0x2A1AF827uLL);
        BOOL v24 = (void **)v46;
        *((void *)v46 + 3) = v29;
        if (v29)
        {
          _DWORD *v29 = v10[10];
          *(_DWORD *)(*((void *)v46 + 3) + 4) = v10[11];
          *(void *)(*((void *)v46 + 3) + 8) = v12;
          size_t v25 = (void *)(*((void *)v46 + 3) + 16);
          size_t v26 = v10 + 12;
          goto LABEL_56;
        }
        goto LABEL_63;
      }
    }
LABEL_50:
    uint64_t v41 = (void **)v46;
    goto LABEL_51;
  }
  if (v18 == 33)
  {
    unsigned int v40 = res_9_dn_expand(a1, a2, v10 + 16, __s1, 1025);
    if ((v40 & 0x80000000) != 0 || (unint64_t)v40 + 6 > v12)
    {
LABEL_48:
      uint64_t v41 = (void **)v46;
LABEL_51:
      sub_213CB887C(v41);
      return 0xFFFFFFFFLL;
    }
    size_t v20 = strlen(__s1);
    uint64_t v44 = malloc_type_malloc(v20 + 16, 0xD5BF297uLL);
    BOOL v24 = (void **)v46;
    *((void *)v46 + 3) = v44;
    if (v44)
    {
      _DWORD *v44 = __rev16(*((unsigned __int16 *)v10 + 5));
      *(_DWORD *)(*((void *)v46 + 3) + 4) = __rev16(*((unsigned __int16 *)v10 + 6));
      *(_DWORD *)(*((void *)v46 + 3) + 8) = __rev16(*((unsigned __int16 *)v10 + 7));
      uint64_t v22 = (char *)(*((void *)v46 + 3) + 12);
LABEL_59:
      size_t v37 = v20 + 1;
LABEL_60:
      strlcpy(v22, __s1, v37);
      goto LABEL_61;
    }
LABEL_63:
    uint64_t v41 = v24;
    goto LABEL_51;
  }
  if (v18 == 37)
  {
    if (v12 > 4)
    {
      size_t v12 = (v12 - 5);
      int v23 = malloc_type_malloc(v12 + 31, 0xD3DF6AB1uLL);
      BOOL v24 = (void **)v46;
      *((void *)v46 + 3) = v23;
      if (v23)
      {
        *int v23 = __rev16(*((unsigned __int16 *)v10 + 5));
        *(_DWORD *)(*((void *)v46 + 3) + 4) = __rev16(*((unsigned __int16 *)v10 + 6));
        *(_DWORD *)(*((void *)v46 + 3) + 8) = v10[14];
        *(void *)(*((void *)v46 + 3) + 16) = v12;
        size_t v25 = (void *)(*((void *)v46 + 3) + 24);
        size_t v26 = v10 + 15;
LABEL_56:
        memcpy(v25, v26, v12);
LABEL_61:
        BOOL v24 = (void **)v46;
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    goto LABEL_50;
  }
LABEL_31:
  size_t v25 = malloc_type_malloc(v12, 0xDB077A38uLL);
  BOOL v24 = (void **)v46;
  *((void *)v46 + 3) = v25;
  if (v12 && !v25) {
    goto LABEL_63;
  }
  if (v12)
  {
    size_t v26 = v10 + 10;
    goto LABEL_56;
  }
LABEL_62:
  uint64_t result = 0;
  *a3 = v45;
  *a4 = v24;
  return result;
}

_DWORD *sub_213CB9180(const char *a1, char *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = "a";
  int v5 = &off_2641E45F0;
  while (strcasecmp(a2, v4))
  {
    int v6 = *v5;
    v5 += 2;
    uint64_t v4 = v6;
    if (!v6) {
      goto LABEL_29;
    }
  }
  uint32_t v7 = *((_DWORD *)v5 - 2);
  if (v7 == -1)
  {
LABEL_29:
    if (dword_26780169C) {
    return 0;
    }
  }
  uint32_t fromlen = 128;
  dns_handle_t v8 = dns_open(0);
  if (v8)
  {
    unsigned int v9 = v8;
    uint64_t v10 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    int32_t v11 = 1500;
    sockaddr from = (sockaddr)0;
    long long v25 = 0u;
    size_t v12 = (FILE **)MEMORY[0x263EF8348];
    while (1)
    {
      do
      {
        int v13 = v11;
        if (v10) {
          free(v10);
        }
        if (dword_26780169C)
        {
          dns_set_debug(v9, 1u);
          unsigned int v14 = "a";
          if (v7 != 1)
          {
            unsigned int v15 = &dword_2641E45F8;
            do
            {
              unsigned int v14 = (const char *)*((void *)v15 - 1);
              if (!v14) {
                break;
              }
              int v16 = *v15;
              v15 += 4;
            }
            while (v16 != v7);
          }
          fprintf(*v12, "dns_lookup(%s, %d, %s), buffer size %d\n", a1, 1, v14, v11);
        }
        uint64_t v17 = (char *)malloc_type_malloc(v11, 0x29A30C81uLL);
        if (!v17)
        {
          dns_free(v9);
          return 0;
        }
        uint64_t v10 = v17;
        int32_t v11 = dns_search(v9, a1, 1u, v7, v17, v11, &from, &fromlen);
        if (dword_26780169C)
        {
          int v18 = "a";
          if (v7 != 1)
          {
            unsigned int v19 = &dword_2641E45F8;
            do
            {
              int v18 = (const char *)*((void *)v19 - 1);
              if (!v18) {
                break;
              }
              int v20 = *v19;
              v19 += 4;
            }
            while (v20 != v7);
          }
          fprintf(*v12, "dns_lookup(%s, %d, %s) --> %d\n", a1, 1, v18, v11);
        }
      }
      while (v11 > v13);
      if (v11 > 0)
      {
        uint64_t v21 = sub_213CB88C8((const u_char *)v10, v11);
        free(v10);
        dns_free(v9);
        return v21;
      }
      if (v13 > 65534) {
        break;
      }
      if ((2 * v13) >= 0xFFFF) {
        int32_t v11 = 0xFFFF;
      }
      else {
        int32_t v11 = 2 * v13;
      }
    }
    dns_free(v9);
    free(v10);
  }
  return 0;
}

uint64_t sub_213CB9408(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 2) {
    return 4;
  }
  else {
    return 16 * (v1 == 30);
  }
}

uint64_t rk_socket_sockaddr_size(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30) {
    unsigned int v2 = 28;
  }
  else {
    unsigned int v2 = 0;
  }
  if (v1 == 2) {
    return 16;
  }
  else {
    return v2;
  }
}

uint64_t sub_213CB9448(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 == 30 || v1 == 2) {
    return *(unsigned __int16 *)(a1 + 2);
  }
  else {
    return 0;
  }
}

uint64_t sub_213CB946C(int a1, int a2)
{
  uint64_t result = fcntl(a1, 3, 0);
  if (result != -1) {
    return fcntl(a1, 4, result & 0xFFFFFFFB | (4 * (a2 != 0)));
  }
  return result;
}

uint64_t rk_socket_set_nopipe(int a1, int a2)
{
  int v3 = a2;
  return setsockopt(a1, 0xFFFF, 4130, &v3, 4u);
}

uint64_t rk_socket_set_reuseaddr(int a1, int a2)
{
  int v3 = a2;
  return setsockopt(a1, 0xFFFF, 4, &v3, 4u);
}

uint64_t rk_socket_set_ipv6only(int a1, int a2)
{
  int v3 = a2;
  return setsockopt(a1, 41, 27, &v3, 4u);
}

uint64_t sub_213CB9564(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t sub_213CB956C(unsigned int a1)
{
  return __rev16(a1);
}

uint64_t sub_213CB9574(char *a1, const char *a2)
{
  int v13 = 0;
  unsigned int v12 = 0;
  uint64_t v10 = 0;
  int32_t v11 = 0;
  unsigned int v9 = 0;
  sub_213CB96E4(a2, (char **)&v11, &v9, (char **)&v10);
  int v3 = (const char *)v10;
  if (v10)
  {
    if (a1)
    {
      sub_213CB96E4(a1, &v13, &v12, 0);
      a1 = v13;
      unsigned int v4 = v12;
      int v3 = (const char *)v10;
    }
    else
    {
      unsigned int v4 = 0;
    }
    int v5 = (const char *)v11;
    unsigned int v6 = v9;
    xmmword_267801408 = 0uLL;
    if (qword_267801418) {
      free((void *)qword_267801418);
    }
    qword_267801418 = 0;
    if (a1)
    {
      if (sub_213CB9A30(a1)) {
        goto LABEL_13;
      }
      WORD1(xmmword_267801408) = bswap32(v4) >> 16;
      if (asprintf((char **)&qword_267801418, "http://%s:%d%s", v5, (__int16)v6, v3) < 0) {
        goto LABEL_13;
      }
LABEL_16:
      uint64_t v7 = 0;
      BYTE1(xmmword_267801408) = 2;
      goto LABEL_14;
    }
    if (!sub_213CB9A30(v5))
    {
      WORD1(xmmword_267801408) = bswap32(v6) >> 16;
      asprintf((char **)&qword_267801418, "%s", v3);
      goto LABEL_16;
    }
  }
  a1 = 0;
LABEL_13:
  uint64_t v7 = 0xFFFFFFFFLL;
LABEL_14:
  free(a1);
  free(v11);
  free(v10);
  return v7;
}

char *sub_213CB96E4(const char *a1, char **a2, _DWORD *a3, char **a4)
{
  uint64_t v7 = strdup(a1);
  *a2 = v7;
  dns_handle_t v8 = strchr(v7, 58);
  if (!v8)
  {
    unsigned int v9 = v7;
    goto LABEL_5;
  }
  *dns_handle_t v8 = 0;
  unsigned int v9 = v8 + 1;
  if (sscanf(v8 + 1, "%d", a3) != 1) {
LABEL_5:
  }
    *a3 = 80;
  uint64_t result = strchr(v9, 47);
  if (result)
  {
    int32_t v11 = result;
    if (a4)
    {
      uint64_t result = strdup(result);
      *a4 = result;
    }
    *int32_t v11 = 0;
  }
  else if (a4)
  {
    *a4 = 0;
  }
  return result;
}

uint64_t *sub_213CB979C(const char *a1)
{
  uint64_t result = (uint64_t *)gethostbyname(a1);
  if (!result)
  {
    return sub_213CB97E4(a1);
  }
  return result;
}

uint64_t *sub_213CB97E4(const char *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  __s = 0;
  if (!BYTE1(xmmword_267801408)) {
    return 0;
  }
  sockaddr v20 = (sockaddr)xmmword_267801408;
  int v1 = 0;
  if (asprintf(&__s, "GET %s?%s HTTP/1.0\r\n\r\n", (const char *)qword_267801418, a1) < 0 || !__s) {
    return v1;
  }
  int v2 = socket(2, 1, 0);
  if (v2 < 0) {
    goto LABEL_17;
  }
  int v3 = v2;
  rk_socket_set_nopipe(v2, 1);
  if (connect(v3, &v20, 0x10u) < 0 || (size_t v4 = strlen(__s), write(v3, __s, v4) != v4))
  {
    close(v3);
LABEL_17:
    free(__s);
    return 0;
  }
  free(__s);
  int v5 = 0;
  do
  {
    unsigned int v6 = &__s1[v5];
    ssize_t v7 = read(v3, v6, 1024 - v5);
    v5 += v7;
  }
  while (v7 > 0);
  *unsigned int v6 = 0;
  close(v3);
  dns_handle_t v8 = strstr(__s1, "\r\n\r\n");
  if (!v8) {
    return 0;
  }
  __lasts = 0;
  unsigned int v9 = strtok_r(v8 + 4, " \t\r\n", &__lasts);
  if (!v9) {
    return 0;
  }
  int v1 = &qword_267801420;
  qword_267801420 = (uint64_t)v9;
  *(void *)algn_267801428 = 0;
  qword_267801430 = 0x400000002;
  uint64_t v10 = strtok_r(0, " \t\r\n", &__lasts);
  if (v10)
  {
    unint64_t v11 = 0;
    unsigned int v12 = &unk_267801488;
    int v13 = &byte_267801440;
    do
    {
      v16.s_addr = 0;
      inet_aton(v10, &v16);
      unsigned int v14 = bswap32(v16.s_addr);
      *(v12 - 1) = v13;
      void *v12 = 0;
      char *v13 = HIBYTE(v14);
      v13[1] = BYTE2(v14);
      void v13[2] = BYTE1(v14);
      v13[3] = v14;
      uint64_t v10 = strtok_r(0, " \t\r\n", &__lasts);
      if (v11 > 0xE) {
        break;
      }
      ++v11;
      ++v12;
      v13 += 4;
    }
    while (v10);
  }
  qword_267801438 = (uint64_t)&qword_267801480;
  return v1;
}

uint64_t sub_213CB9A30(const char *a1)
{
  if (inet_aton(a1, (in_addr *)&xmmword_267801408 + 1)) {
    return 0;
  }
  int v3 = gethostbyname(a1);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  size_t v4 = v3;
  uint64_t result = 0;
  DWORD1(xmmword_267801408) = bswap32(**(_DWORD **)v4->h_addr_list);
  return result;
}

void *rtbl_create()
{
  return malloc_type_calloc(1uLL, 0x28uLL, 0x10900401E39FAC2uLL);
}

uint64_t rtbl_set_flags(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t rtbl_get_flags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void rtbl_destroy(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8 * v2);
      if (*(void *)(v3 + 24))
      {
        unint64_t v4 = 0;
        do
          free(*(void **)(*(void *)(v3 + 32) + 8 * v4++));
        while (v4 < *(void *)(v3 + 24));
      }
      free(*(void **)(v3 + 32));
      free(*(void **)v3);
      free(*(void **)(v3 + 8));
      free(*(void **)(v3 + 48));
      free((void *)v3);
      ++v2;
    }
    while (v2 < *(void *)(a1 + 8));
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 16));

  free((void *)a1);
}

uint64_t rtbl_add_column_by_id(uint64_t a1, int a2, const char *a3, int a4)
{
  dns_handle_t v8 = malloc_type_realloc(*(void **)(a1 + 16), 8 * *(void *)(a1 + 8) + 8, 0x2004093837F09uLL);
  if (v8)
  {
    *(void *)(a1 + 16) = v8;
    unsigned int v9 = (char **)malloc_type_malloc(0x38uLL, 0x10300402987294FuLL);
    if (v9)
    {
      uint64_t v10 = v9;
      unint64_t v11 = strdup(a3);
      char *v10 = v11;
      if (v11)
      {
        uint64_t result = 0;
        v10[1] = 0;
        *((_DWORD *)v10 + 4) = 0;
        *((_DWORD *)v10 + 5) = a4;
        void v10[3] = 0;
        v10[4] = 0;
        *((_DWORD *)v10 + 10) = a2;
        v10[6] = 0;
        uint64_t v14 = *(void *)(a1 + 8);
        uint64_t v13 = *(void *)(a1 + 16);
        *(void *)(a1 + 8) = v14 + 1;
        *(void *)(v13 + 8 * v14) = v10;
        return result;
      }
      free(v10);
    }
  }
  return 12;
}

uint64_t rtbl_add_column(uint64_t a1, const char *a2, int a3)
{
  return rtbl_add_column_by_id(a1, 0, a2, a3);
}

uint64_t rtbl_new_row(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(void *)(*(void *)(v5 + 8 * v3) + 24) > v4) {
      unint64_t v4 = *(void *)(*(void *)(v5 + 8 * v3) + 24);
    }
    ++v3;
  }
  while (v1 != v3);
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v8 = *(void *)(v7 + 8 * v6);
    if (*(void *)(v8 + 24) != v4) {
      break;
    }
LABEL_14:
    if (++v6 >= v1) {
      return 0;
    }
  }
  unsigned int v9 = malloc_type_realloc(*(void **)(v8 + 32), 8 * v4, 0x10040436913F5uLL);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(*(void *)(v7 + 8 * v6) + 32) = v9;
    while (1)
    {
      uint64_t v11 = *(void *)(v7 + 8 * v6);
      unint64_t v12 = *(void *)(v11 + 24);
      if (v12 >= v4) {
        break;
      }
      uint64_t v13 = strdup("");
      *(void *)(v11 + 24) = v12 + 1;
      v10[v12] = v13;
      if (!v13) {
        return 12;
      }
    }
    unint64_t v1 = *(void *)(a1 + 8);
    goto LABEL_14;
  }
  return 12;
}

uint64_t rtbl_set_prefix(void **a1, char *__s1)
{
  unint64_t v4 = *a1;
  if (v4) {
    free(v4);
  }
  uint64_t v5 = strdup(__s1);
  *a1 = v5;
  if (v5) {
    return 0;
  }
  else {
    return 12;
  }
}

uint64_t rtbl_set_separator(uint64_t a1, char *__s1)
{
  unint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    free(v4);
  }
  uint64_t v5 = strdup(__s1);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    return 0;
  }
  else {
    return 12;
  }
}

uint64_t rtbl_set_column_prefix(uint64_t a1, char *a2, const char *a3)
{
  unint64_t v4 = sub_213CB9E64(a1, a2);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (char *)v4[1];
  if (v6) {
    free(v6);
  }
  uint64_t v7 = strdup(a3);
  v5[1] = v7;
  if (v7) {
    return 0;
  }
  else {
    return 12;
  }
}

const char **sub_213CB9E64(uint64_t a1, char *__s2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  for (size_t i = *(const char ****)(a1 + 16); ; ++i)
  {
    uint64_t v5 = *i;
    if (!strcmp(**i, __s2)) {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return v5;
}

uint64_t rtbl_set_column_affix_by_id(uint64_t a1, int a2, char *__s1, const char *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  for (size_t i = *(uint64_t **)(a1 + 16); ; ++i)
  {
    uint64_t v8 = *i;
    if (*(_DWORD *)(*i + 40) == a2) {
      break;
    }
    if (!--v4) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v10 = *(void **)(v8 + 8);
  if (v10) {
    free(v10);
  }
  if (__s1)
  {
    uint64_t v11 = strdup(__s1);
    *(void *)(v8 + 8) = v11;
    if (!v11) {
      return 12;
    }
  }
  else
  {
    *(void *)(v8 + 8) = 0;
  }
  unint64_t v12 = *(void **)(v8 + 48);
  if (v12) {
    free(v12);
  }
  if (a4)
  {
    uint64_t v13 = strdup(a4);
    *(void *)(v8 + 48) = v13;
    if (!v13) {
      return 12;
    }
  }
  else
  {
    *(void *)(v8 + 48) = 0;
  }
  return 0;
}

uint64_t rtbl_add_column_entry_by_id(uint64_t a1, int a2, char *__s1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  for (size_t i = *(uint64_t **)(a1 + 16); *(_DWORD *)(*i + 40) != a2; ++i)
  {
    if (!--v3) {
      return 0xFFFFFFFFLL;
    }
  }
  return sub_213CB9FAC(*i, __s1);
}

uint64_t sub_213CB9FAC(uint64_t a1, char *__s1)
{
  uint64_t v3 = strdup(__s1);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = malloc_type_realloc(*(void **)(a1 + 32), 8 * *(void *)(a1 + 24) + 8, 0x10040436913F5uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t result = 0;
      uint64_t v8 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v8 + 1;
      *(void *)(a1 + 32) = v6;
      v6[v8] = v4;
      return result;
    }
    free(v4);
  }
  return 12;
}

uint64_t rtbl_add_column_entryv_by_id(uint64_t a1, int a2, char *a3, ...)
{
  va_start(va, a3);
  __s1[0] = 0;
  va_copy((va_list)&__s1[1], va);
  if (vasprintf(__s1, a3, va) == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = rtbl_add_column_entry_by_id(a1, a2, __s1[0]);
  free(__s1[0]);
  return v5;
}

uint64_t rtbl_add_column_entry(uint64_t a1, char *a2, char *a3)
{
  uint64_t v4 = sub_213CB9E64(a1, a2);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }

  return sub_213CB9FAC((uint64_t)v4, a3);
}

uint64_t rtbl_add_column_entryv(uint64_t a1, char *a2, char *a3, ...)
{
  va_start(va, a3);
  __s1[0] = 0;
  va_copy((va_list)&__s1[1], va);
  if (vasprintf(__s1, a3, va) == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = sub_213CB9E64(a1, a2);
  if (v5) {
    uint64_t v6 = sub_213CB9FAC((uint64_t)v5, __s1[0]);
  }
  else {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  free(__s1[0]);
  return v6;
}

uint64_t rtbl_format(uint64_t a1, FILE *a2)
{
  uint64_t v3 = rtbl_format_str(a1);
  if (!v3) {
    return 12;
  }
  uint64_t v4 = v3;
  fputs(v3, a2);
  free(v4);
  return 0;
}

char *rtbl_format_str(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 2) == 0)
  {
    if (*(void *)(a1 + 8))
    {
      unint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8 * v3);
        if (*(unsigned char *)(a1 + 24)) {
          int v5 = 0;
        }
        else {
          int v5 = strlen(*(const char **)v4);
        }
        *(_DWORD *)(v4 + 16) = v5;
        uint64_t v6 = *(void *)(v4 + 24);
        if (v6)
        {
          uint64_t v7 = *(const char ***)(v4 + 32);
          do
          {
            uint64_t v8 = *v7++;
            int v9 = strlen(v8);
            if (v5 <= v9) {
              int v5 = v9;
            }
            *(_DWORD *)(v4 + 16) = v5;
            --v6;
          }
          while (v6);
        }
        ++v3;
        unint64_t v10 = *(void *)(a1 + 8);
      }
      while (v3 < v10);
      if (*(unsigned char *)(a1 + 24))
      {
        size_t v34 = 0;
        if (!v10) {
          goto LABEL_85;
        }
LABEL_60:
        unint64_t v35 = 0;
        do
        {
          uint64_t v36 = 0;
          while (*(void *)(*(void *)(*(void *)(a1 + 16) + 8 * v36) + 24) <= v35)
          {
            if (v10 == ++v36) {
              goto LABEL_85;
            }
          }
          unint64_t v37 = 0;
          do
          {
            uint64_t v38 = *(void *)(*(void *)(a1 + 16) + 8 * v37);
            if (v37 && *(void *)(a1 + 32)) {
              size_t v34 = rk_strpoolprintf(v34, "%s", *(const char **)(a1 + 32));
            }
            int v39 = *(_DWORD *)(v38 + 16);
            if ((*(unsigned char *)(v38 + 20) & 1) == 0)
            {
              if (v37 == *(void *)(a1 + 8) - 1 && !*(void *)(v38 + 48)) {
                int v39 = 0;
              }
              else {
                int v39 = -v39;
              }
            }
            unsigned int v40 = *(const char **)(v38 + 8);
            if (!v40)
            {
              unsigned int v40 = *(const char **)a1;
              if (!*(void *)a1) {
                unsigned int v40 = "";
              }
            }
            rk_strpoolprintf(v34, "%s", v40);
            if (*(void *)(v38 + 24) <= v35) {
              uint64_t v41 = rk_strpoolprintf(v34, "%*s", v39, "");
            }
            else {
              uint64_t v41 = rk_strpoolprintf(v34, "%*s", v39, *(const char **)(*(void *)(v38 + 32) + 8 * v35));
            }
            uint64_t v42 = *(const char **)(v38 + 48);
            if (!v42) {
              uint64_t v42 = "";
            }
            size_t v34 = rk_strpoolprintf(v41, "%s", v42);
            ++v37;
          }
          while (v37 < *(void *)(a1 + 8));
          size_t v34 = rk_strpoolprintf(v34, "\n");
          ++v35;
          unint64_t v10 = *(void *)(a1 + 8);
        }
        while (v10);
        goto LABEL_85;
      }
      uint64_t v11 = 0;
      if (v10)
      {
        for (unint64_t i = 0; i < *(void *)(a1 + 8); ++i)
        {
          uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 8 * i);
          if (i && *(void *)(a1 + 32)) {
            uint64_t v11 = rk_strpoolprintf(v11, "%s", *(const char **)(a1 + 32));
          }
          if (v13)
          {
            uint64_t v14 = *(const char **)(v13 + 8);
            if (!v14)
            {
              uint64_t v14 = *(const char **)a1;
              if (!*(void *)a1) {
                uint64_t v14 = "";
              }
            }
            unsigned int v15 = rk_strpoolprintf(v11, "%s", v14);
            if (i != *(void *)(a1 + 8) - 1 || (uint64_t v16 = *(void *)(v13 + 48)) != 0) {
              LODWORD(v16) = *(_DWORD *)(v13 + 16);
            }
            uint64_t v17 = rk_strpoolprintf(v15, "%-*s", v16, *(const char **)v13);
            int v18 = *(const char **)(v13 + 48);
            if (v18) {
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v17 = rk_strpoolprintf(v11, "%s", "");
          }
          int v18 = "";
LABEL_30:
          uint64_t v11 = rk_strpoolprintf(v17, "%s", v18);
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      size_t v34 = 0;
      if (v2) {
        goto LABEL_85;
      }
    }
    size_t v34 = rk_strpoolprintf(v11, "\n");
    unint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      goto LABEL_85;
    }
    goto LABEL_60;
  }
  unsigned int v19 = rk_strpoolprintf(0, "[");
  uint64_t v20 = *(void *)(a1 + 8);
  if (v20)
  {
    unint64_t v21 = 0;
    uint64_t v22 = MEMORY[0x263EF8318];
    do
    {
      uint64_t v23 = *(void *)(a1 + 16);
      while (*(void *)(*(void *)v23 + 24) <= v21)
      {
        v23 += 8;
        if (!--v20) {
          goto LABEL_55;
        }
      }
      if (v21) {
        BOOL v24 = ",";
      }
      else {
        BOOL v24 = "";
      }
      long long v25 = rk_strpoolprintf(v19, "%s{", v24);
      unint64_t v26 = *(void *)(a1 + 8);
      if (v26)
      {
        int v27 = 0;
        for (unint64_t j = 0; j < v26; ++j)
        {
          long long v29 = *(void **)(*(void *)(a1 + 16) + 8 * j);
          if (v29[3] > v21)
          {
            uint64_t v30 = *v29 - 1;
            do
            {
              unsigned int v31 = *(char *)(v30 + 1);
              if ((v31 & 0x80000000) != 0) {
                int v32 = __maskrune(v31, 0x4000uLL);
              }
              else {
                int v32 = *(_DWORD *)(v22 + 4 * v31 + 60) & 0x4000;
              }
              ++v30;
            }
            while (v32);
            if (v27) {
              uint64_t v33 = ",";
            }
            else {
              uint64_t v33 = "";
            }
            long long v25 = rk_strpoolprintf(v25, "%s\"%s\" : \"%s\"", v33, (const char *)v30, *(const char **)(v29[4] + 8 * v21));
            unint64_t v26 = *(void *)(a1 + 8);
            int v27 = 1;
          }
        }
      }
      unsigned int v19 = rk_strpoolprintf(v25, "}");
      ++v21;
      uint64_t v20 = *(void *)(a1 + 8);
    }
    while (v20);
  }
LABEL_55:
  size_t v34 = rk_strpoolprintf(v19, "]");
LABEL_85:

  return rk_strpoolcollect((uint64_t *)v34);
}

uint64_t rk_dumpdata(const char *a1, char *a2, size_t a3)
{
  uint64_t result = open(a1, 1537, 416);
  if ((result & 0x80000000) == 0)
  {
    int v6 = result;
    sub_213CB7D98(result, a2, a3);
    return close(v6);
  }
  return result;
}

uint64_t rk_undumpdata(const char *a1, void **a2, off_t *a3)
{
  memset(&v12, 0, sizeof(v12));
  *a2 = 0;
  int v5 = open(a1, 0, 0);
  if (v5 < 0) {
    return *__error();
  }
  int v6 = v5;
  if (!fstat(v5, &v12))
  {
    int v9 = (char *)malloc_type_malloc(v12.st_size, 0xD05A572EuLL);
    *a2 = v9;
    if (!v9)
    {
      uint64_t v7 = 12;
      goto LABEL_4;
    }
    st_size_t size = v12.st_size;
    *a3 = v12.st_size;
    ssize_t v11 = sub_213CB7D14(v6, v9, st_size);
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v11 == *a3)
      {
        uint64_t v7 = 0;
      }
      else
      {
        free(*a2);
        *a2 = 0;
        uint64_t v7 = 22;
      }
      goto LABEL_4;
    }
  }
  uint64_t v7 = *__error();
LABEL_4:
  close(v6);
  return v7;
}

BOOL ct_memcmp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  int v3 = 0;
  do
  {
    int v5 = *a1++;
    int v4 = v5;
    int v6 = *a2++;
    v3 |= v6 ^ v4;
    --a3;
  }
  while (a3);
  return v3 != 0;
}

char *rk_cfstring2cstring(const __CFString *a1)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return strdup(CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    int v6 = malloc_type_malloc(v5, 0xCC12B4F2uLL);
    if (v6 && !CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
    {
      free(v6);
      return 0;
    }
    return (char *)v6;
  }
}

uint64_t wind_utf8ucs4(char *a1, uint64_t a2, unint64_t *a3)
{
  int v9 = a1;
  if (*a1)
  {
    unint64_t v5 = 0;
    while (1)
    {
      int v8 = 0;
      uint64_t result = sub_213CBA924(&v9, &v8);
      if (result) {
        break;
      }
      if (a2)
      {
        if (v5 >= *a3) {
          return 3325697538;
        }
        *(_DWORD *)(a2 + 4 * v5) = v8;
      }
      ++v5;
      if (!*++v9) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
LABEL_10:
    uint64_t result = 0;
    *a3 = v5;
  }
  return result;
}

uint64_t sub_213CBA924(char **a1, int *a2)
{
  int v2 = *a1;
  int v3 = **a1;
  if ((**a1 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v4 = 3325697542;
  if ((v3 & 0xE0) == 0xC0)
  {
    char v7 = *++v2;
    char v6 = v7;
    if ((v7 & 0xC0) != 0x80) {
      return v4;
    }
    int v3 = v6 & 0x3F | ((v3 & 0x1F) << 6);
    goto LABEL_2;
  }
  if ((v3 & 0xF0) == 0xE0)
  {
    char v8 = v2[1];
    if ((v8 & 0xC0) == 0x80)
    {
      char v10 = v2[2];
      v2 += 2;
      char v9 = v10;
      if ((v10 & 0xC0) == 0x80)
      {
        int v3 = ((v3 & 0xF) << 12) | ((v8 & 0x3F) << 6) | v9 & 0x3F;
LABEL_2:
        uint64_t v4 = 0;
        *a2 = v3;
        *a1 = v2;
      }
    }
  }
  else if ((v3 & 0xF8) == 0xF0)
  {
    char v11 = v2[1];
    if ((v11 & 0xC0) == 0x80)
    {
      char v12 = v2[2];
      if ((v12 & 0xC0) == 0x80)
      {
        char v14 = v2[3];
        v2 += 3;
        char v13 = v14;
        if ((v14 & 0xC0) == 0x80)
        {
          int v3 = ((v3 & 7) << 18) | ((v11 & 0x3F) << 12) | ((v12 & 0x3F) << 6) | v13 & 0x3F;
          goto LABEL_2;
        }
      }
    }
  }
  return v4;
}

uint64_t sub_213CBAA08(char *a1, unint64_t *a2)
{
  return wind_utf8ucs4(a1, 0, a2);
}

uint64_t wind_utf8ucs4_copy(char *a1, void **a2, unint64_t *a3)
{
  uint64_t v6 = wind_utf8ucs4(a1, 0, a3);
  if (!v6)
  {
    unint64_t v7 = *a3;
    if (!(*a3 >> 30))
    {
      if (!v7) {
        return 0;
      }
      char v8 = malloc_type_malloc(4 * v7, 0x100004052888210uLL);
      *a2 = v8;
      if (v8)
      {
        uint64_t v6 = wind_utf8ucs4(a1, (uint64_t)v8, a3);
        if (!v6) {
          return v6;
        }
        free(*a2);
        *a2 = 0;
      }
      else
      {
        uint64_t v6 = 12;
      }
      *a3 = 0;
      return v6;
    }
    return 34;
  }
  return v6;
}

uint64_t wind_ucs4utf8(unsigned int *a1, uint64_t a2, unsigned char *a3, unint64_t *a4)
{
  uint64_t result = 3325697538;
  for (unint64_t i = 0; a2; --a2)
  {
    unsigned int v8 = *a1++;
    unsigned int v7 = v8;
    if (v8 >= 0x80)
    {
      if (v7 >= 0x800)
      {
        if (v7 >= 0x10000)
        {
          if (HIWORD(v7) > 0x10u) {
            return 3325697544;
          }
          uint64_t v9 = 4u;
        }
        else
        {
          uint64_t v9 = 3u;
        }
      }
      else
      {
        uint64_t v9 = 2u;
      }
    }
    else
    {
      uint64_t v9 = 1u;
    }
    i += v9;
    if (a3)
    {
      if (i >= *a4) {
        return result;
      }
      switch(v9)
      {
        case 1:
          goto LABEL_16;
        case 2:
          goto LABEL_15;
        case 3:
          goto LABEL_14;
        case 4:
          a3[3] = v7 & 0x3F | 0x80;
          LOBYTE(v7) = (_BYTE)v7 << 6;
LABEL_14:
          char v10 = v7 & 0x3F | 0x80;
          LOBYTE(v7) = 0;
          a3[2] = v10;
LABEL_15:
          a3[1] = v7 & 0x3F | 0x80;
          LOBYTE(v7) = (_BYTE)v7 << 6;
LABEL_16:
          *a3 = *((unsigned char *)&unk_213CDA558 + v9 - 1) | v7;
          break;
        default:
          break;
      }
      a3 += v9;
    }
  }
  if (a3)
  {
    if (i >= *a4) {
      return result;
    }
    *a3 = 0;
  }
  uint64_t result = 0;
  *a4 = i;
  return result;
}

uint64_t sub_213CBABEC(unsigned int *a1, uint64_t a2, unint64_t *a3)
{
  return wind_ucs4utf8(a1, a2, 0, a3);
}

uint64_t wind_ucs4utf8_copy(unsigned int *a1, uint64_t a2, void **a3, void *a4)
{
  unint64_t v12 = 0;
  uint64_t v8 = wind_ucs4utf8(a1, a2, 0, &v12);
  if (!v8)
  {
    char v10 = malloc_type_malloc(++v12, 0xACAFD664uLL);
    *a3 = v10;
    if (v10)
    {
      uint64_t v11 = wind_ucs4utf8(a1, a2, v10, &v12);
      if (v11)
      {
        uint64_t v8 = v11;
        free(*a3);
        *a3 = 0;
      }
      else
      {
        uint64_t v8 = 0;
        if (a4) {
          *a4 = v12;
        }
      }
    }
    else
    {
      return 12;
    }
  }
  return v8;
}

uint64_t sub_213CBACC0(unsigned __int16 *a1, uint64_t a2, unsigned int *a3, _WORD *a4, uint64_t *a5)
{
  if (!a2)
  {
    uint64_t v15 = 0;
LABEL_30:
    uint64_t result = 0;
    *a5 = v15;
    return result;
  }
  uint64_t result = 3325697538;
  if (a2) {
    return 3325697540;
  }
  unsigned int v7 = *a3;
  int v8 = *a3 & 1;
  uint64_t v9 = *a5;
  uint64_t v10 = *a5;
  if ((*a3 & 4) == 0) {
    goto LABEL_21;
  }
  unsigned int v11 = __rev16(*a1);
  if (v11 == 65279 || v11 == 65534)
  {
    int v8 = v11 == 65534;
    unsigned int v13 = v7 & 0xFFFFFFF8;
    if (v11 == 65534) {
      int v14 = 1;
    }
    else {
      int v14 = 2;
    }
    *a3 = v14 | v13;
    a2 -= 2;
    if (a2)
    {
      ++a1;
      goto LABEL_21;
    }
LABEL_29:
    uint64_t v15 = v9 - v10;
    goto LABEL_30;
  }
  if ((v7 & 3) == 0) {
    return 3325697545;
  }
  unsigned int v16 = v7 & 0xFFFFFFF8;
  if (v8) {
    int v17 = 1;
  }
  else {
    int v17 = 2;
  }
  *a3 = v17 | v16;
LABEL_21:
  while (v10)
  {
    if (v8) {
      int v18 = (unsigned __int8 *)a1;
    }
    else {
      int v18 = (unsigned __int8 *)a1 + 1;
    }
    if (v8) {
      unsigned int v19 = (unsigned __int8 *)a1 + 1;
    }
    else {
      unsigned int v19 = (unsigned __int8 *)a1;
    }
    *a4++ = *v18 | (*v19 << 8);
    ++a1;
    --v10;
    a2 -= 2;
    if (!a2) {
      goto LABEL_29;
    }
  }
  return result;
}

uint64_t wind_utf8ucs2(char *a1, uint64_t a2, unint64_t *a3)
{
  unsigned int v11 = a1;
  if (*a1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 3325697538;
    while (1)
    {
      unsigned int v10 = 0;
      uint64_t v7 = sub_213CBA924(&v11, (int *)&v10);
      if (v7) {
        return v7;
      }
      if (HIWORD(v10)) {
        return 3325697546;
      }
      if (a2)
      {
        if (v5 >= *a3) {
          return v6;
        }
        *(_WORD *)(a2 + 2 * v5) = v10;
      }
      ++v5;
      if (!*++v11) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    unint64_t v5 = 0;
LABEL_11:
    uint64_t v6 = 0;
    *a3 = v5;
  }
  return v6;
}

uint64_t wind_utf8ucs2_length(char *a1, unint64_t *a2)
{
  return wind_utf8ucs2(a1, 0, a2);
}

uint64_t wind_ucs2utf8(unsigned __int16 *a1, uint64_t a2, unsigned char *a3, unint64_t *a4)
{
  for (unint64_t i = 0; a2; --a2)
  {
    unsigned int v6 = *a1++;
    unsigned int v5 = v6;
    if (v6 < 0x800) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = 3;
    }
    if (v5 < 0x80) {
      uint64_t v7 = 1;
    }
    i += v7;
    if (a3)
    {
      if (i >= *a4) {
        return 3325697538;
      }
      if (v7 != 1)
      {
        if (v7 != 2)
        {
          char v8 = v5 & 0x3F | 0x80;
          LOBYTE(v5) = 0;
          a3[2] = v8;
        }
        a3[1] = v5 & 0x3F | 0x80;
        LOBYTE(v5) = (_BYTE)v5 << 6;
      }
      *a3 = *((unsigned char *)&unk_213CDA558 + v7 - 1) | v5;
      a3 += v7;
    }
  }
  if (!a3) {
    goto LABEL_18;
  }
  if (i < *a4)
  {
    *a3 = 0;
LABEL_18:
    uint64_t result = 0;
    *a4 = i;
    return result;
  }
  return 3325697538;
}

uint64_t wind_ucs2utf8_length(unsigned __int16 *a1, uint64_t a2, unint64_t *a3)
{
  return wind_ucs2utf8(a1, a2, 0, a3);
}

uint64_t sub_213CBAF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E4800, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBAF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E4800, a1, a2, a3, a4);
}

uint64_t sub_213CBAF74(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E4800, a1);
}

uint64_t sub_213CBAF84(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4800, a1);
}

uint64_t sub_213CBAF94()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBAFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E48D0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBAFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E48D0, a1, a2, a3, a4);
}

uint64_t sub_213CBAFE8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E48D0, a1);
}

uint64_t sub_213CBAFF8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E48D0, a1);
}

uint64_t sub_213CBB008()
{
  return _asn1_copy_top();
}

uint64_t decode_Principal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E4960, 0, a1, a2, a3, a4);
}

uint64_t encode_Principal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E4960, a1, a2, a3, a4);
}

uint64_t length_Principal(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E4960, a1);
}

uint64_t free_Principal(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4960, a1);
}

uint64_t copy_Principal()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB090(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E49F0, a1);
}

uint64_t sub_213CBB0A0()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB0B4()
{
  return _asn1_copy_top();
}

uint64_t decode_KerberosTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E4A70, 0, a1, a2, a3, a4);
}

uint64_t encode_KerberosTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E4A70, a1, a2, a3, a4);
}

uint64_t length_KerberosTime(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E4A70, a1);
}

uint64_t free_KerberosTime(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4A70, a1);
}

uint64_t copy_KerberosTime()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB13C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4AC0, a1);
}

uint64_t sub_213CBB14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E4B20, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E4B20, a1, a2, a3, a4);
}

uint64_t sub_213CBB18C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E4B20, a1);
}

uint64_t sub_213CBB19C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4B20, a1);
}

uint64_t sub_213CBB1AC()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB1C0(unsigned int *a1)
{
  int v2 = malloc_type_realloc(*((void **)a1 + 1), 24 * *a1 + 24, 0xD518BC0uLL);
  if (!v2) {
    return 12;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!result) {
    ++*a1;
  }
  return result;
}

uint64_t TicketFlags2int(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t sub_213CBB248(int a1)
{
  return a1 & 0xDC01817F;
}

uint64_t sub_213CBB258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E4D50, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E4D50, a1, a2, a3, a4);
}

uint64_t sub_213CBB298(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E4D50, a1);
}

uint64_t sub_213CBB2A8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4D50, a1);
}

uint64_t decode_EncryptionKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E4DA0, 0, a1, a2, a3, a4);
}

uint64_t encode_EncryptionKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E4DA0, a1, a2, a3, a4);
}

uint64_t length_EncryptionKey(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E4DA0, a1);
}

uint64_t free_EncryptionKey(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4DA0, a1);
}

uint64_t copy_EncryptionKey()
{
  return _asn1_copy_top();
}

uint64_t decode_Ticket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E4EA0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E4EA0, a1, a2, a3, a4);
}

uint64_t sub_213CBB36C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E4EA0, a1);
}

uint64_t free_Ticket(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E4EA0, a1);
}

uint64_t sub_213CBB38C()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5040, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB3C0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5040, a1);
}

uint64_t sub_213CBB3D0()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E50B0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E50B0, a1, a2, a3, a4);
}

uint64_t sub_213CBB424(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E50B0, a1);
}

uint64_t sub_213CBB434(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E50B0, a1);
}

uint64_t sub_213CBB444()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E51D0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E51D0, a1, a2, a3, a4);
}

uint64_t sub_213CBB498(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E51D0, a1);
}

uint64_t sub_213CBB4A8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E51D0, a1);
}

uint64_t sub_213CBB4B8()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5300, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB4EC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5300, a1);
}

uint64_t sub_213CBB4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E53E0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB51C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E53E0, a1);
}

uint64_t sub_213CBB52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5440, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB54C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5440, a1);
}

uint64_t sub_213CBB55C()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E55F0, a1, a2, a3, a4);
}

uint64_t sub_213CBB590(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E55F0, a1);
}

uint64_t sub_213CBB5A0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E55F0, a1);
}

uint64_t sub_213CBB5B0()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5700, a1, a2, a3, a4);
}

uint64_t sub_213CBB5E4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5700, a1);
}

uint64_t sub_213CBB5F4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5700, a1);
}

uint64_t sub_213CBB604()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5720, a1, a2, a3, a4);
}

uint64_t sub_213CBB638(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5720, a1);
}

uint64_t sub_213CBB648(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5720, a1);
}

uint64_t sub_213CBB658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5770, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5770, a1, a2, a3, a4);
}

uint64_t sub_213CBB698(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5770, a1);
}

uint64_t sub_213CBB6A8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5770, a1);
}

uint64_t sub_213CBB6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E57D0, a1, a2, a3, a4);
}

uint64_t sub_213CBB6D8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E57D0, a1);
}

uint64_t sub_213CBB6E8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5860, a1);
}

uint64_t sub_213CBB6F8(unsigned int *a1)
{
  int v2 = malloc_type_realloc(*((void **)a1 + 1), 24 * *a1 + 24, 0x581C3A74uLL);
  if (!v2) {
    return 12;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_213CBB778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5930, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5930, a1, a2, a3, a4);
}

uint64_t sub_213CBB7B8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5930, a1);
}

uint64_t sub_213CBB7C8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5930, a1);
}

uint64_t sub_213CBB7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5980, a1, a2, a3, a4);
}

uint64_t sub_213CBB7F8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5980, a1);
}

uint64_t sub_213CBB808(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5980, a1);
}

uint64_t sub_213CBB818(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5A20, a1);
}

uint64_t sub_213CBB828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5A60, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB848(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5A60, a1);
}

uint64_t sub_213CBB858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5A80, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB878(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5BA0, a1);
}

uint64_t sub_213CBB888()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBB89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5BE0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB8BC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5BE0, a1);
}

uint64_t sub_213CBB8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5C00, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB8EC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5C00, a1);
}

uint64_t sub_213CBB8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5CC0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5CC0, a1, a2, a3, a4);
}

uint64_t sub_213CBB93C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5CC0, a1);
}

uint64_t sub_213CBB94C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5CC0, a1);
}

uint64_t sub_213CBB95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5D70, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5D70, a1, a2, a3, a4);
}

uint64_t sub_213CBB99C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5D70, a1);
}

uint64_t sub_213CBB9AC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5D70, a1);
}

uint64_t sub_213CBB9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5E00, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBB9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5E00, a1, a2, a3, a4);
}

uint64_t sub_213CBB9FC(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5E00, a1);
}

uint64_t sub_213CBBA0C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5E00, a1);
}

uint64_t sub_213CBBA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5F40, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5F40, a1, a2, a3, a4);
}

uint64_t sub_213CBBA5C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5F40, a1);
}

uint64_t sub_213CBBA6C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5F40, a1);
}

uint64_t sub_213CBBA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E5FC0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E5FC0, a1, a2, a3, a4);
}

uint64_t sub_213CBBABC(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E5FC0, a1);
}

uint64_t sub_213CBBACC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E5FC0, a1);
}

uint64_t sub_213CBBADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6070, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6070, a1, a2, a3, a4);
}

uint64_t sub_213CBBB1C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6070, a1);
}

uint64_t sub_213CBBB2C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6070, a1);
}

uint64_t sub_213CBBB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6140, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6140, a1, a2, a3, a4);
}

uint64_t sub_213CBBB7C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6140, a1);
}

uint64_t sub_213CBBB8C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6140, a1);
}

uint64_t sub_213CBBB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6330, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6330, a1, a2, a3, a4);
}

uint64_t sub_213CBBBDC(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6330, a1);
}

uint64_t sub_213CBBBEC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6330, a1);
}

uint64_t sub_213CBBBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6450, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6450, a1, a2, a3, a4);
}

uint64_t sub_213CBBC3C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6450, a1);
}

uint64_t sub_213CBBC4C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6450, a1);
}

uint64_t decode_ChangePasswdDataMS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E64B0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E64B0, a1, a2, a3, a4);
}

uint64_t sub_213CBBC9C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E64B0, a1);
}

uint64_t free_ChangePasswdDataMS(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E64B0, a1);
}

uint64_t sub_213CBBCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E64F0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E64F0, a1, a2, a3, a4);
}

uint64_t sub_213CBBCFC(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E64F0, a1);
}

uint64_t sub_213CBBD0C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E64F0, a1);
}

uint64_t sub_213CBBD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6510, a1, a2, a3, a4);
}

uint64_t sub_213CBBD3C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6510, a1);
}

uint64_t sub_213CBBD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E65A0, a1, a2, a3, a4);
}

uint64_t sub_213CBBD6C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E65A0, a1);
}

uint64_t sub_213CBBD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E65F0, a1, a2, a3, a4);
}

uint64_t sub_213CBBD9C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E65F0, a1);
}

uint64_t sub_213CBBDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6660, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBDCC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6660, a1);
}

uint64_t sub_213CBBDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E66D0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBDFC(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E66D0, a1);
}

uint64_t sub_213CBBE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6790, a1, a2, a3, a4);
}

uint64_t sub_213CBBE2C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6790, a1);
}

uint64_t sub_213CBBE3C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6790, a1);
}

uint64_t sub_213CBBE4C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E67E0, a1);
}

uint64_t sub_213CBBE5C()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBBE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E68E0, a1, a2, a3, a4);
}

uint64_t sub_213CBBE90(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E68E0, a1);
}

uint64_t sub_213CBBEA0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E68E0, a1);
}

uint64_t sub_213CBBEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E69F0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBED0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E69F0, a1);
}

uint64_t sub_213CBBEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6AB0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBF00(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6AB0, a1);
}

uint64_t free_KDCSRPState(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6B50, a1);
}

uint64_t decode_KDC_PROXY_MESSAGE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6BB0, 0, a1, a2, a3, a4);
}

uint64_t encode_KDC_PROXY_MESSAGE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6BB0, a1, a2, a3, a4);
}

uint64_t length_KDC_PROXY_MESSAGE(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6BB0, a1);
}

uint64_t sub_213CBBF70(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6BB0, a1);
}

uint64_t sub_213CBBF80(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6C20, a1);
}

uint64_t sub_213CBBF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6C70, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBBFB0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6C70, a1);
}

uint64_t decode_KRB5_SRP_PA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6CD0, 0, a1, a2, a3, a4);
}

uint64_t encode_KRB5_SRP_PA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6CD0, a1, a2, a3, a4);
}

uint64_t length_KRB5_SRP_PA(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6CD0, a1);
}

uint64_t free_KRB5_SRP_PA(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6CD0, a1);
}

uint64_t copy_KRB5_SRP_PA()
{
  return _asn1_copy_top();
}

uint64_t sub_213CBC034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6D80, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC054(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6D80, a1);
}

uint64_t sub_213CBC064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6DF0, a1, a2, a3, a4);
}

uint64_t sub_213CBC084(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6DF0, a1);
}

uint64_t sub_213CBC094(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6DF0, a1);
}

uint64_t sub_213CBC0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6E10, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC0C4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6E10, a1);
}

uint64_t sub_213CBC0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6E30, a1, a2, a3, a4);
}

uint64_t sub_213CBC0F4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6E30, a1);
}

uint64_t sub_213CBC104(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6E30, a1);
}

uint64_t sub_213CBC114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6E50, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC134(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6E50, a1);
}

uint64_t sub_213CBC144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6F40, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E6F40, a1, a2, a3, a4);
}

uint64_t sub_213CBC184(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E6F40, a1);
}

uint64_t sub_213CBC194(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6F40, a1);
}

uint64_t sub_213CBC1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E6FB0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC1C4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E6FB0, a1);
}

uint64_t sub_213CBC1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7090, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC1F4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7090, a1);
}

uint64_t sub_213CBC204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7180, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E7180, a1, a2, a3, a4);
}

uint64_t sub_213CBC244(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E7180, a1);
}

uint64_t sub_213CBC254(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7180, a1);
}

uint64_t sub_213CBC264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E71E0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E71E0, a1, a2, a3, a4);
}

uint64_t sub_213CBC2A4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E71E0, a1);
}

uint64_t sub_213CBC2B4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E71E0, a1);
}

uint64_t sub_213CBC2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7370, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC2E4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7370, a1);
}

uint64_t sub_213CBC2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E73C0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E73C0, a1, a2, a3, a4);
}

uint64_t sub_213CBC334(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E73C0, a1);
}

uint64_t sub_213CBC344(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E73C0, a1);
}

uint64_t sub_213CBC354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E73E0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E73E0, a1, a2, a3, a4);
}

uint64_t sub_213CBC394(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E73E0, a1);
}

uint64_t sub_213CBC3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7490, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC3C4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E75B0, a1);
}

uint64_t sub_213CBC3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E7690, a1, a2, a3, a4);
}

uint64_t sub_213CBC3F4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E7690, a1);
}

uint64_t sub_213CBC404(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7690, a1);
}

uint64_t sub_213CBC414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E78E0, a1, a2, a3, a4);
}

uint64_t sub_213CBC434(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E78E0, a1);
}

uint64_t sub_213CBC444(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E78E0, a1);
}

uint64_t sub_213CBC454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7970, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E7970, a1, a2, a3, a4);
}

uint64_t sub_213CBC494(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E7970, a1);
}

uint64_t sub_213CBC4A4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7970, a1);
}

uint64_t sub_213CBC4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7A80, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC4D4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7A80, a1);
}

uint64_t sub_213CBC4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7B00, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC504(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7B00, a1);
}

uint64_t sub_213CBC514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7B90, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC534(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7B90, a1);
}

uint64_t sub_213CBC544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E7CA0, a1, a2, a3, a4);
}

uint64_t sub_213CBC564(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E7CA0, a1);
}

uint64_t sub_213CBC574(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7CA0, a1);
}

uint64_t sub_213CBC584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E7E40, a1, a2, a3, a4);
}

uint64_t sub_213CBC5A4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E7E40, a1);
}

uint64_t sub_213CBC5B4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7E40, a1);
}

uint64_t sub_213CBC5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7EB0, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC5E4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7EB0, a1);
}

uint64_t sub_213CBC5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7F00, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC614(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7F00, a1);
}

uint64_t sub_213CBC624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E7F50, 0, a1, a2, a3, a4);
}

uint64_t sub_213CBC644(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E7F50, a1);
}

uint64_t sub_213CBC654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E7FD0, a1, a2, a3, a4);
}

uint64_t sub_213CBC674(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E7FD0, a1);
}

uint64_t sub_213CBC684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E8060, a1, a2, a3, a4);
}

uint64_t sub_213CBC6A4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E8060, a1);
}

const char *__cdecl error_message(errcode_t code)
{
  int v2 = com_right((void *)qword_2678016A0, code);
  if (!v2)
  {
    if (code < 0)
    {
      snprintf(byte_267801508, 0x80uLL, "Unknown error %ld", code);
      goto LABEL_8;
    }
    int v2 = strerror(code);
    if (!v2) {
      goto LABEL_8;
    }
  }
  if (!*v2)
  {
LABEL_8:
    snprintf(byte_267801508, 0x80uLL, "Unknown error %ld", code);
    return byte_267801508;
  }
  __strlcpy_chk();
  return byte_267801508;
}

uint64_t init_error_table(uint64_t a1, uint64_t a2, int a3)
{
  return 0;
}

void com_err_va(const char *progname, errcode_t code, const char *format, va_list args)
{
}

void com_err(const char *progname, errcode_t code, const char *format, ...)
{
  va_start(va, format);
  off_26AA946E8((int)progname, code, (char *)format, va);
}

com_err_handler_t set_com_err_hook(com_err_handler_t handler)
{
  unint64_t v1 = (void (__cdecl *)(const char *, errcode_t, const char *, va_list))off_26AA946E8;
  if (handler) {
    int v2 = (uint64_t (*)(int, errcode_t, char *, va_list))handler;
  }
  else {
    int v2 = (uint64_t (*)(int, errcode_t, char *, va_list))sub_213CBC800;
  }
  off_26AA946E8 = v2;
  return v1;
}

size_t sub_213CBC800(const char *a1, errcode_t code, char *a3, va_list a4)
{
  uint64_t v7 = (FILE **)MEMORY[0x263EF8348];
  if (a1) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s: ", a1);
  }
  if (code)
  {
    char v8 = *v7;
    error_message(code);
    fprintf(v8, "%s ", byte_267801508);
  }
  if (a3) {
    vfprintf(*v7, a3, a4);
  }
  uint64_t v9 = *v7;

  return fwrite("\r\n", 2uLL, 1uLL, v9);
}

com_err_handler_t reset_com_err_hook(void)
{
  com_err_handler_t result = (com_err_handler_t)off_26AA946E8;
  off_26AA946E8 = (uint64_t (*)(int, errcode_t, char *, va_list))sub_213CBC800;
  return result;
}

void *com_right(void *result, uint64_t a2)
{
  if (result)
  {
    while (1)
    {
      uint64_t v2 = result[1];
      uint64_t v3 = *(void *)(v2 + 8);
      if (a2 >= v3 && v3 + *(int *)(v2 + 16) > a2) {
        break;
      }
      com_err_handler_t result = (void *)*result;
      if (!result) {
        return result;
      }
    }
    return *(void **)(*(void *)v2 + 8 * (a2 - v3));
  }
  return result;
}

char *com_right_r(void *a1, uint64_t a2, char *__dst, size_t __size)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = __dst;
  while (1)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = a2 - v6;
    if (a2 >= v6 && v6 + *(int *)(v5 + 16) > a2) {
      break;
    }
    a1 = (void *)*a1;
    if (!a1) {
      return 0;
    }
  }
  uint64_t v9 = *(const char **)(*(void *)v5 + 8 * v7);
  if (v9) {
    strlcpy(__dst, v9, __size);
  }
  else {
    snprintf(__dst, __size, "Reserved error code %ld in base %ld", v7, v6);
  }
  return v4;
}

void *initialize_error_table_r(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = result;
  while (1)
  {
    char v8 = (void *)*v7;
    if (!*v7) {
      break;
    }
    uint64_t v7 = (void *)*v7;
    if (*(void *)v8[1] == a2) {
      return result;
    }
  }
  com_err_handler_t result = malloc_type_malloc(0x28uLL, 0x10E00406AA87185uLL);
  if (result)
  {
    result[2] = a2;
    *((_DWORD *)result + 8) = a3;
    result[3] = a4;
    uint64_t *result = 0;
    result[1] = result + 2;
    void *v7 = result;
  }
  return result;
}

void *sub_213CBCA3C(void *result)
{
  if (result)
  {
    do
    {
      unint64_t v1 = (void *)*result;
      free(result);
      com_err_handler_t result = v1;
    }
    while (v1);
  }
  return result;
}

void initialize_asn1_error_table(void)
{
}

void *initialize_gk5_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_2677FEB50, 137, 35224064);
}

uint64_t initialize_gk5_error_table()
{
  return init_error_table((uint64_t)off_2677FEB50, 35224064, 137);
}

void *initialize_hdb_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)&unk_2677FEFA0, 18, 36150272);
}

void *initialize_heim_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_2677FF038, 226, -1980176640);
}

uint64_t initialize_heim_error_table()
{
  return init_error_table((uint64_t)off_2677FF038, -1980176640, 226);
}

void *initialize_hx_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_2677FF750, 135, 569856);
}

uint64_t initialize_hx_error_table()
{
  return init_error_table((uint64_t)off_2677FF750, 569856, 135);
}

void *initialize_k524_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_2677FFB90, 8, -1750206208);
}

void initialize_k524_error_table(void)
{
}

void *initialize_krb5_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_2677FFBD8, 251, -1765328384);
}

void initialize_krb5_error_table(void)
{
}

void *initialize_wind_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_2678003B8, 11, -969269760);
}

uint64_t initialize_wind_error_table()
{
  return init_error_table((uint64_t)off_2678003B8, -969269760, 11);
}

void *initialize_krb_error_table_r(void *a1)
{
  return initialize_error_table_r(a1, (uint64_t)off_267800418, 82, 39525376);
}

uint64_t initialize_krb_error_table()
{
  return init_error_table((uint64_t)off_267800418, 39525376, 82);
}

uint64_t hx509_ca_tbs_init(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 0xC0uLL, 0x10B004050FA1AF2uLL);
  *a2 = v3;
  if (v3) {
    return 0;
  }
  else {
    return 12;
  }
}

void hx509_ca_tbs_free(uint64_t **a1)
{
  if (a1)
  {
    if (*a1)
    {
      free_SubjectPublicKeyInfo((uint64_t)(*a1 + 1));
      sub_213CD2940((uint64_t)(*a1 + 8));
      sub_213CD2BF0((uint64_t)(*a1 + 6));
      der_free_heim_integer();
      sub_213CD2CC0((uint64_t)(*a1 + 18));
      der_free_bit_string();
      der_free_bit_string();
      hx509_name_free(*a1);
      uint64_t v2 = *a1;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      *((_OWORD *)v2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      free(*a1);
      *a1 = 0;
    }
  }
}

uint64_t hx509_ca_tbs_set_notBefore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 120) = a3;
  return 0;
}

uint64_t hx509_ca_tbs_set_notAfter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a3;
  return 0;
}

uint64_t hx509_ca_tbs_set_notAfter_lifetime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = time(0) + a3;
  return 0;
}

char **hx509_ca_tbs_template_units()
{
  return &off_2641E8080;
}

uint64_t hx509_ca_tbs_set_template(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    if (*(void *)a2) {
      hx509_name_free((uint64_t *)a2);
    }
    uint64_t subject = hx509_cert_get_subject(a4, (void **)a2);
    if (subject)
    {
      uint64_t SPKI = subject;
      int v14 = "Failed to get subject from template";
LABEL_9:
      hx509_set_error_string(a1, 0, SPKI, v14, v9, v10, v11, v12, v21[0]);
      return SPKI;
    }
  }
  if ((a3 & 2) != 0)
  {
    der_free_heim_integer();
    uint64_t serialnumber = hx509_cert_get_serialnumber();
    *(unsigned char *)(a2 + 112) = *(unsigned char *)(a2 + 112) & 0xF7 | (8 * (serialnumber == 0));
    if (serialnumber)
    {
      uint64_t SPKI = serialnumber;
      int v14 = "Failed to copy serial number";
      goto LABEL_9;
    }
  }
  if ((a3 & 4) != 0)
  {
    *(void *)(a2 + 120) = hx509_cert_get_notBefore(a4);
    if ((a3 & 8) == 0)
    {
LABEL_12:
      if ((a3 & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((a3 & 8) == 0)
  {
    goto LABEL_12;
  }
  *(void *)(a2 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = hx509_cert_get_notAfter(a4);
  if ((a3 & 0x10) == 0) {
    goto LABEL_17;
  }
LABEL_16:
  free_SubjectPublicKeyInfo(a2 + 8);
  uint64_t SPKI = hx509_cert_get_SPKI(a1);
  *(unsigned char *)(a2 + 112) = *(unsigned char *)(a2 + 112) & 0xFB | (4 * (SPKI == 0));
  if (SPKI) {
    return SPKI;
  }
LABEL_17:
  if ((a3 & 0x20) != 0)
  {
    LODWORD(v21[0]) = 0;
    uint64_t v16 = sub_213CC1990(a1, a4, v21);
    if (v16) {
      return v16;
    }
    *(_DWORD *)(a2 + 80) = sub_213CD2A20(v21[0]);
  }
  if ((a3 & 0x40) == 0) {
    return 0;
  }
  v21[0] = 0;
  v21[1] = 0;
  uint64_t SPKI = sub_213CC1A1C(a1, a4, v21);
  if (SPKI) {
    return SPKI;
  }
  if (!LODWORD(v21[0]))
  {
LABEL_27:
    sub_213CD2BF0((uint64_t)v21);
    return 0;
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    uint64_t v19 = hx509_ca_tbs_add_eku(a1, a2);
    if (v19) {
      break;
    }
    ++v18;
    v17 += 16;
    if (v18 >= LODWORD(v21[0])) {
      goto LABEL_27;
    }
  }
  uint64_t SPKI = v19;
  sub_213CD2BF0((uint64_t)v21);
  return SPKI;
}

uint64_t hx509_ca_tbs_add_eku(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    while (der_heim_oid_cmp())
    {
      ++v5;
      unint64_t v6 = *(unsigned int *)(a2 + 48);
      v4 += 16;
      if (v5 >= v6)
      {
        size_t v7 = 16 * (v6 + 1);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
    size_t v7 = 16;
LABEL_7:
    char v8 = malloc_type_realloc(*(void **)(a2 + 56), v7, 0x1010040466105CCuLL);
    if (v8)
    {
      *(void *)(a2 + 56) = v8;
      uint64_t v13 = der_copy_oid();
      if (!v13)
      {
        ++*(_DWORD *)(a2 + 48);
        return v13;
      }
      uint64_t v14 = a1;
      int v15 = v13;
    }
    else
    {
      uint64_t v13 = 12;
      uint64_t v14 = a1;
      int v15 = 12;
    }
    hx509_set_error_string(v14, 0, v15, "out of memory", v9, v10, v11, v12, v17);
  }
  return v13;
}

uint64_t hx509_ca_tbs_set_ca(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a2 + 112) |= 2u;
  *(_DWORD *)(a2 + 136) = a3;
  return 0;
}

uint64_t hx509_ca_tbs_set_proxy(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a2 + 112) |= 1u;
  *(_DWORD *)(a2 + 136) = a3;
  return 0;
}

uint64_t hx509_ca_tbs_set_domaincontroller(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 112) |= 0x10u;
  return 0;
}

uint64_t hx509_ca_tbs_set_spki(uint64_t a1, uint64_t a2)
{
  free_SubjectPublicKeyInfo(a2 + 8);
  uint64_t result = copy_SubjectPublicKeyInfo();
  *(unsigned char *)(a2 + 112) = *(unsigned char *)(a2 + 112) & 0xFB | (4 * (result == 0));
  return result;
}

uint64_t hx509_ca_tbs_set_serialnumber(uint64_t a1, uint64_t a2)
{
  der_free_heim_integer();
  uint64_t result = der_copy_heim_integer();
  *(unsigned char *)(a2 + 112) = *(unsigned char *)(a2 + 112) & 0xF7 | (8 * (result == 0));
  return result;
}

uint64_t hx509_ca_tbs_add_crl_dp_uri(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  v31[1] = 0;
  void v31[2] = 0;
  char v8 = (uint64_t *)sub_213CB7A3C(1uLL, 0x10uLL);
  v31[0] = v8;
  v28[0] = 0u;
  uint64_t v27 = 0;
  v30[0] = 1;
  v30[1] = 1;
  void v30[2] = v28;
  LODWORD(v28[0]) = 5;
  uint64_t v29 = 0;
  v28[1] = (unint64_t)a3;
  *((void *)&v28[0] + 1) = strlen(a3);
  size_t v9 = sub_213CD2C40((uint64_t)v30);
  *char v8 = v9;
  uint64_t v10 = malloc_type_malloc(v9, 0xDDCF4B98uLL);
  v8[1] = (uint64_t)v10;
  if (!v10)
  {
    uint64_t v23 = 12;
    goto LABEL_5;
  }
  uint64_t v15 = sub_213CD2C20((uint64_t)v10 + *v8 - 1, *v8, (uint64_t)v30, (uint64_t)&v27);
  if (v15)
  {
    uint64_t v23 = v15;
    free(*(void **)(v31[0] + 8));
    *(void *)(v31[0] + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
LABEL_5:
    BOOL v24 = "Failed to encoded DistributionPointName";
LABEL_6:
    hx509_set_error_string(a1, 0, v23, v24, v11, v12, v13, v14, v26);
    goto LABEL_7;
  }
  if (*(void *)v31[0] != v27) {
    sub_213CC1B28("internal ASN.1 encoder error", v16, v17, v18, v19, v20, v21, v22, v26);
  }
  if (a4)
  {
    uint64_t v23 = 22;
    hx509_set_error_string(a1, 0, 22, "CRLDistributionPoints.name.issuername not yet supported", v19, v20, v21, v22, v26);
    return v23;
  }
  uint64_t v23 = sub_213CD2CD0((unsigned int *)(a2 + 144));
  if (v23)
  {
    BOOL v24 = "out of memory";
    goto LABEL_6;
  }
LABEL_7:
  sub_213CD2C60((uint64_t)v31);
  return v23;
}

uint64_t hx509_ca_tbs_add_san_otherName(uint64_t a1, uint64_t a2)
{
  return sub_213CD2950((unsigned int *)(a2 + 64));
}

uint64_t hx509_ca_tbs_add_san_pkinit(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1;
  uint64_t v46 = 0;
  long long v47 = 0u;
  *(_OWORD *)uint64_t v48 = 0u;
  int v11 = 1;
  for (unint64_t i = a3; ; ++i)
  {
    unsigned int v13 = *(unsigned __int8 *)i;
    if (v13 > 0x3F) {
      break;
    }
    if (v13 == 47)
    {
      ++v11;
    }
    else if (!*i)
    {
      goto LABEL_12;
    }
LABEL_11:
    ;
  }
  if (v13 == 92)
  {
    int v14 = *(unsigned __int8 *)++i;
    if ((v14 | 0x40) != 0x40) {
      goto LABEL_11;
    }
    uint64_t v38 = 569968;
    int v39 = "trailing \\ in principal name";
    int v40 = 569968;
LABEL_22:
    hx509_set_error_string(a1, 0, v40, v39, a5, a6, a7, a8, v45);
    uint64_t v22 = 0;
    goto LABEL_28;
  }
  if (v13 != 64) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v15 = malloc_type_calloc(v11, 8uLL, 0x10040436913F5uLL);
  v48[1] = v15;
  if (!v15)
  {
    int v39 = "malloc: out of memory";
    uint64_t v38 = 12;
    a1 = v10;
    int v40 = 12;
    goto LABEL_22;
  }
  uint64_t v16 = (char **)v15;
  LODWORD(v48[0]) = v11;
  DWORD2(v47) = 1;
  uint64_t v17 = strdup(a3);
  uint64_t v22 = v17;
  if (!v17)
  {
    uint64_t v41 = "malloc: out of memory";
    uint64_t v38 = 12;
    uint64_t v42 = v10;
    int v43 = 12;
LABEL_27:
    hx509_set_error_string(v42, 0, v43, v41, v18, v19, v20, v21, v45);
    goto LABEL_28;
  }
  uint64_t v23 = strrchr(v17, 64);
  *(void *)&long long v47 = v23;
  if (!v23)
  {
    uint64_t v38 = 569968;
    uint64_t v41 = "Missing @ in principal";
    uint64_t v42 = v10;
    int v43 = 569968;
    goto LABEL_27;
  }
  *(void *)&long long v47 = v23 + 1;
  *uint64_t v23 = 0;
  _DWORD *v16 = v22;
  BOOL v24 = strchr(v22, 47);
  if (v24)
  {
    long long v25 = v16 + 1;
    do
    {
      *BOOL v24 = 0;
      char v26 = v24 + 1;
      *v25++ = v26;
      BOOL v24 = strchr(v26, 47);
    }
    while (v24);
  }
  uint64_t v27 = sub_213CBC494((uint64_t)&v47);
  long long v28 = malloc_type_malloc(v27, 0x53A31F73uLL);
  if (!v28)
  {
    uint64_t v38 = 12;
LABEL_26:
    uint64_t v41 = "Out of memory";
    uint64_t v42 = v10;
    int v43 = v38;
    goto LABEL_27;
  }
  uint64_t v29 = v28;
  uint64_t v30 = sub_213CBC474((uint64_t)v28 + v27 - 1, v27, (uint64_t)&v47, (uint64_t)&v46);
  if (v30)
  {
    uint64_t v38 = v30;
    free(v29);
    goto LABEL_26;
  }
  if (v46 != v27) {
    sub_213CC1B28("internal ASN.1 encoder error", v31, v32, v33, v34, v35, v36, v37, v45);
  }
  uint64_t v49 = 1;
  long long v50 = xmmword_2641E7460;
  uint64_t v51 = v27;
  uint64_t v52 = v29;
  uint64_t v38 = sub_213CD2950((unsigned int *)(a2 + 64));
  free(v29);
LABEL_28:
  if (v48[1]) {
    free(v48[1]);
  }
  if (v22) {
    free(v22);
  }
  return v38;
}

uint64_t hx509_ca_tbs_add_san_ms_upn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_213CBD594(a1, a2, &xmmword_2641E7480, a3);
}

uint64_t sub_213CBD594(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v25 = 0;
  v26[0] = a4;
  uint64_t v7 = sub_213CD2FC8((uint64_t)v26);
  char v8 = malloc_type_malloc(v7, 0x4ABD8A49uLL);
  if (!v8)
  {
    uint64_t v22 = 12;
    goto LABEL_5;
  }
  unsigned int v13 = v8;
  uint64_t v14 = sub_213CD2FA8((uint64_t)v8 + v7 - 1, v7, (uint64_t)v26, (uint64_t)&v25);
  if (v14)
  {
    uint64_t v22 = v14;
    free(v13);
LABEL_5:
    hx509_set_error_string(a1, 0, v22, "Out of memory", v9, v10, v11, v12, v24);
    return v22;
  }
  if (v25 != v7) {
    sub_213CC1B28("internal ASN.1 encoder error", v15, v16, v17, v18, v19, v20, v21, v24);
  }
  v26[1] = 1;
  long long v27 = *a3;
  uint64_t v28 = v7;
  uint64_t v29 = v13;
  uint64_t v22 = sub_213CD2950((unsigned int *)(a2 + 64));
  free(v13);
  return v22;
}

uint64_t hx509_ca_tbs_add_san_jid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_213CBD594(a1, a2, &xmmword_2641EAC68, a3);
}

uint64_t hx509_ca_tbs_add_san_hostname(int a1, uint64_t a2, char *__s)
{
  return sub_213CD2950((unsigned int *)(a2 + 64));
}

uint64_t hx509_ca_tbs_add_san_rfc822name(int a1, uint64_t a2, char *__s)
{
  return sub_213CD2950((unsigned int *)(a2 + 64));
}

uint64_t hx509_ca_tbs_set_subject(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    hx509_name_free(a2);
  }

  return hx509_name_copy(a1, a3, (void **)a2);
}

uint64_t hx509_ca_tbs_subject_expand(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_name_expand(a1, *a2, a3, a4, a5, a6, a7, a8);
}

uint64_t hx509_ca_sign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v8 = sub_213CBE6DC(a3);
  v33[0] = 0;
  v33[1] = 0;
  if (!sub_213CBEB98(v8, v33))
  {
    uint64_t v23 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    if (!v23)
    {
      sub_213CD2AD8((uint64_t)v33);
      uint64_t v13 = 12;
      uint64_t v16 = a1;
      int v17 = 12;
      goto LABEL_13;
    }
    uint64_t v13 = der_copy_octet_string();
    sub_213CD2AD8((uint64_t)v33);
    if (!v13)
    {
LABEL_17:
      uint64_t v19 = _hx509_cert_private_key(a3);
      uint64_t v13 = sub_213CBD9B0(a1, a2, v19, (uint64_t)&v23, v8 + 144, a4, v20, v21);
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v16 = a1;
    int v17 = v13;
LABEL_13:
    hx509_set_error_string(v16, 0, v17, "Out of memory", v9, v10, v11, v12, v22);
    goto LABEL_14;
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v26 = 0u;
  memset(v27, 0, 24);
  char v24 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
  if (!v24) {
    goto LABEL_9;
  }
  uint64_t v25 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800409070E284uLL);
  if (!v25) {
    goto LABEL_9;
  }
  uint64_t v13 = hx509_name_to_Name_0();
  if (v13) {
    goto LABEL_12;
  }
  long long v28 = 0u;
  long long v29 = *(_OWORD *)((char *)v27 + 8);
  uint64_t v30 = 0;
  LODWORD(v2init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 4;
  DWORD2(v2init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 1;
  uint64_t v13 = sub_213CD2950((unsigned int *)&v31);
  if (v13) {
    goto LABEL_12;
  }
  uint64_t v14 = v24;
  *((void *)v24 + 1) = v32;
  *uint64_t v14 = v31;
  uint64_t v15 = der_copy_heim_integer();
  if (!v25)
  {
LABEL_9:
    uint64_t v13 = 12;
    goto LABEL_12;
  }
  uint64_t v13 = v15;
  if (!v15) {
    goto LABEL_17;
  }
LABEL_14:
  sub_213CD2A78((uint64_t)&v23);
LABEL_15:
  sub_213CD2A78((uint64_t)&v23);
  return v13;
}

uint64_t sub_213CBD9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v71 = 0;
  uint64_t v13 = off_2678006B0;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  memset(v76, 0, sizeof(v76));
  long long v77 = 0u;
  long long v78 = 0u;
  memset(v79, 0, sizeof(v79));
  long long v80 = 0u;
  memset(v81, 0, sizeof(v81));
  long long v82 = 0u;
  time_t v14 = *(void *)(a2 + 120);
  if (!v14) {
    time_t v14 = time(0) - 86400;
  }
  time_t v15 = *(void *)(a2 + 128);
  if (!v15) {
    time_t v15 = time(0) + 31536000;
  }
  int v16 = *(_DWORD *)(a2 + 80);
  if (!v16) {
    LOWORD(v16) = sub_213CD2A20(5);
  }
  char v17 = *(unsigned char *)(a2 + 112);
  if ((v17 & 2) != 0)
  {
    LOWORD(v16) = sub_213CD2A20(96) | v16;
    char v17 = *(unsigned char *)(a2 + 112);
  }
  if ((v17 & 4) != 0)
  {
    if ((v17 & 1) == 0)
    {
      if (!*(void *)a2)
      {
        uint64_t v18 = "No subject name set";
        goto LABEL_29;
      }
      if (hx509_name_is_null_p(*(void *)a2) && !*(_DWORD *)(a2 + 64))
      {
        uint64_t v18 = "NULL subject and no SubjectAltNames";
        goto LABEL_29;
      }
    }
    int v19 = *(unsigned __int8 *)(a2 + 112);
    if ((~v19 & 3) == 0)
    {
      uint64_t v18 = "Can't be proxy and CA at the same time";
      goto LABEL_29;
    }
    if ((v19 & 1) != 0 && *(_DWORD *)(a2 + 64))
    {
      uint64_t v18 = "Proxy certificate is not allowed to have SubjectAltNames";
      goto LABEL_29;
    }
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v20 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *(void *)&long long v73 = v20;
    if (!v20)
    {
LABEL_60:
      long long v28 = "Out of memory";
      uint64_t v27 = 12;
      uint64_t v29 = a1;
      char v26 = 0;
      goto LABEL_61;
    }
    *uint64_t v20 = 2;
    if ((*(unsigned char *)(a2 + 112) & 8) != 0)
    {
      krb5_principal v67 = (CFTypeRef *)a6;
      uint64_t v31 = der_copy_heim_integer();
      if (v31)
      {
        uint64_t v27 = v31;
        long long v28 = "Failed to copy integer";
LABEL_38:
        uint64_t v29 = a1;
        char v26 = 0;
        int v30 = v27;
        goto LABEL_62;
      }
    }
    else
    {
      *((void *)&v73 + 1) = 20;
      uint64_t v25 = malloc_type_malloc(0x14uLL, 0x1348069CuLL);
      char v26 = (char)v25;
      *(void *)&long long v74 = v25;
      if (!v25) {
        goto LABEL_53;
      }
      krb5_principal v67 = (CFTypeRef *)a6;
      if (CCRandomCopyBytes())
      {
        uint64_t v27 = 569935;
        long long v28 = "Out of random";
        uint64_t v29 = a1;
        char v26 = 0;
        int v30 = 569935;
LABEL_62:
        hx509_set_error_string(v29, v26, v30, v28, v21, v22, v23, v24, (char)v67);
        goto LABEL_63;
      }
    }
    uint64_t v33 = copy_AlgorithmIdentifier();
    if (v33)
    {
      uint64_t v27 = v33;
      long long v28 = "Failed to copy sigature alg";
      goto LABEL_38;
    }
    if (a5) {
      uint64_t v34 = hx509_name_to_Name_0();
    }
    else {
      uint64_t v34 = hx509_name_to_Name();
    }
    uint64_t v27 = v34;
    if (v34)
    {
      long long v28 = "Failed to copy issuer name";
      goto LABEL_38;
    }
    *((void *)&v77 + 1) = v14;
    LODWORD(v77) = 2;
    LODWORD(v7init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 2;
    *((void *)&v78 + 1) = v15;
    if (*(unsigned char *)(a2 + 112))
    {
      uint64_t v27 = sub_213CBE420(a1, (uint64_t)v76 + 8, (uint64_t)v79);
      if (v27)
      {
LABEL_63:
        sub_213CD2758((uint64_t)&v72);
        return v27;
      }
    }
    else
    {
      uint64_t v35 = hx509_name_to_Name();
      if (v35)
      {
        uint64_t v27 = v35;
        long long v28 = "Failed to copy subject name";
        goto LABEL_38;
      }
    }
    uint64_t v36 = copy_SubjectPublicKeyInfo();
    if (v36)
    {
      uint64_t v27 = v36;
      long long v28 = "Failed to copy spki";
      goto LABEL_38;
    }
    if (*(void *)(a2 + 176))
    {
      uint64_t v37 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
      char v26 = (char)v37;
      *(void *)&long long v80 = v37;
      if (!v37) {
        goto LABEL_53;
      }
      uint64_t v38 = der_copy_bit_string();
      if (v38)
      {
LABEL_51:
        uint64_t v27 = v38;
LABEL_52:
        long long v28 = "Out of memory";
        goto LABEL_38;
      }
    }
    if (!*(void *)(a2 + 160)) {
      goto LABEL_54;
    }
    int v39 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    char v26 = (char)v39;
    *((void *)&v80 + 1) = v39;
    if (v39)
    {
      uint64_t v38 = der_copy_bit_string();
      if (v38) {
        goto LABEL_51;
      }
LABEL_54:
      v81[0] = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
      if (v81[0])
      {
        if ((*(unsigned char *)(a2 + 112) & 0x10) != 0)
        {
          uint64_t v83 = 34;
          uint64_t v84 = &unk_213CDAA90;
          uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 0);
          if (v27) {
            goto LABEL_63;
          }
        }
        LODWORD(v85[0]) = 0;
        LODWORD(v85[0]) = sub_213CD2A20(v16);
        uint64_t v83 = sub_213CD2A10((uint64_t)v85);
        int v40 = malloc_type_malloc(v83, 0xDE3B8E58uLL);
        uint64_t v84 = v40;
        if (!v40) {
          goto LABEL_106;
        }
        uint64_t v41 = sub_213CD29F0((uint64_t)v40 + v83 - 1, v83, (uint64_t)v85, (uint64_t)&v71);
        if (v41)
        {
LABEL_59:
          uint64_t v27 = v41;
          free(v84);
          uint64_t v84 = 0;
          goto LABEL_52;
        }
        if (v71 != v83) {
          goto LABEL_119;
        }
        uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 1);
        free(v84);
        if (v27) {
          goto LABEL_63;
        }
        if (*(_DWORD *)(a2 + 48))
        {
          uint64_t v83 = sub_213CD2BE0(a2 + 48);
          uint64_t v49 = malloc_type_malloc(v83, 0xFA1A7F73uLL);
          uint64_t v84 = v49;
          if (!v49) {
            goto LABEL_106;
          }
          uint64_t v41 = sub_213CD2BC0((uint64_t)v49 + v83 - 1, v83, a2 + 48, (uint64_t)&v71);
          if (v41) {
            goto LABEL_59;
          }
          if (v71 != v83) {
            goto LABEL_119;
          }
          uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 0);
          free(v84);
          if (v27) {
            goto LABEL_63;
          }
        }
        if (*(_DWORD *)(a2 + 64))
        {
          uint64_t v83 = sub_213CD2930(a2 + 64);
          long long v50 = malloc_type_malloc(v83, 0x93098172uLL);
          uint64_t v84 = v50;
          if (!v50) {
            goto LABEL_106;
          }
          uint64_t v41 = sub_213CD2910((uint64_t)v50 + v83 - 1, v83, a2 + 64, (uint64_t)&v71);
          if (v41) {
            goto LABEL_59;
          }
          if (v71 != v83) {
            goto LABEL_119;
          }
          uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 0);
          free(v84);
          if (v27) {
            goto LABEL_63;
          }
        }
        if (a4)
        {
          uint64_t v83 = sub_213CD2A68(a4);
          uint64_t v51 = malloc_type_malloc(v83, 0x6E1B4676uLL);
          uint64_t v84 = v51;
          if (!v51) {
            goto LABEL_106;
          }
          uint64_t v41 = sub_213CD2A48((uint64_t)v51 + v83 - 1, v83, a4, (uint64_t)&v71);
          if (v41) {
            goto LABEL_59;
          }
          if (v71 != v83) {
            goto LABEL_119;
          }
          uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 0);
          free(v84);
          if (v27) {
            goto LABEL_63;
          }
        }
        CCDigestCreate();
        CCDigestUpdate();
        CCDigestFinal();
        CCDigestDestroy();
        v70[0] = 20;
        v70[1] = v85;
        uint64_t v83 = sub_213CD2AC8((uint64_t)v70);
        uint64_t v52 = malloc_type_malloc(v83, 0x10E7F71BuLL);
        uint64_t v84 = v52;
        if (!v52) {
          goto LABEL_106;
        }
        uint64_t v41 = sub_213CD2AA8((uint64_t)v52 + v83 - 1, v83, (uint64_t)v70, (uint64_t)&v71);
        if (v41) {
          goto LABEL_59;
        }
        if (v71 != v83) {
          goto LABEL_119;
        }
        uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 0);
        free(v84);
        if (v27) {
          goto LABEL_63;
        }
        int v69 = 0;
        LODWORD(v70[0]) = 1;
        v85[0] = 0uLL;
        if ((*(unsigned char *)(a2 + 112) & 2) != 0)
        {
          *(void *)&v85[0] = v70;
          if ((*(_DWORD *)(a2 + 136) & 0x80000000) == 0)
          {
            int v69 = *(_DWORD *)(a2 + 136);
            *((void *)&v85[0] + 1) = &v69;
          }
        }
        uint64_t v83 = sub_213CD2B3C((uint64_t)v85);
        uint64_t v53 = malloc_type_malloc(v83, 0x7D64F027uLL);
        uint64_t v84 = v53;
        if (!v53)
        {
LABEL_106:
          uint64_t v27 = 12;
          goto LABEL_52;
        }
        uint64_t v41 = sub_213CD2B1C((uint64_t)v53 + v83 - 1, v83, (uint64_t)v85, (uint64_t)&v71);
        if (v41) {
          goto LABEL_59;
        }
        if (v71 != v83) {
          goto LABEL_119;
        }
        uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, (*(unsigned __int8 *)(a2 + 112) >> 1) & 1);
        free(v84);
        if (v27) {
          goto LABEL_63;
        }
        if ((*(unsigned char *)(a2 + 112) & 1) == 0)
        {
LABEL_93:
          int v55 = *(_DWORD *)(a2 + 144);
          uint64_t v54 = a2 + 144;
          if (!v55)
          {
LABEL_98:
            uint64_t v83 = sub_213CD26F8((uint64_t)&v72);
            uint64_t v57 = malloc_type_malloc(v83, 0x31CFE0C3uLL);
            uint64_t v84 = v57;
            if (!v57)
            {
              uint64_t v27 = 12;
              goto LABEL_111;
            }
            uint64_t v58 = sub_213CD26D8((uint64_t)v57 + v83 - 1, v83, (uint64_t)&v72, (uint64_t)&v71);
            if (v58)
            {
              uint64_t v27 = v58;
              free(v84);
              uint64_t v84 = 0;
LABEL_111:
              long long v28 = "malloc out of memory";
              goto LABEL_38;
            }
            if (v83 == v71)
            {
              uint64_t v27 = sub_213CC4EF8(a1, a3, (uint64_t)v13, (uint64_t)&v83, (uint64_t)&v81[1], &v82);
              free(v84);
              if (!v27) {
                uint64_t v27 = hx509_cert_init(a1, (uint64_t)&v72, v67, v62, v63, v64, v65, v66);
              }
              goto LABEL_63;
            }
LABEL_119:
            sub_213CC1B28("internal ASN.1 encoder error", v42, v43, v44, v45, v46, v47, v48, (char)v67);
          }
          uint64_t v83 = sub_213CD2CB0(v54);
          uint64_t v56 = malloc_type_malloc(v83, 0x99F2EA55uLL);
          uint64_t v84 = v56;
          if (v56)
          {
            uint64_t v41 = sub_213CD2C90((uint64_t)v56 + v83 - 1, v83, v54, (uint64_t)&v71);
            if (v41) {
              goto LABEL_59;
            }
            if (v71 != v83) {
              goto LABEL_119;
            }
            uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 0);
            free(v84);
            if (v27) {
              goto LABEL_63;
            }
            goto LABEL_98;
          }
          goto LABEL_106;
        }
        memset(v85, 0, sizeof(v85));
        if ((*(_DWORD *)(a2 + 136) & 0x80000000) == 0)
        {
          long long v59 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
          *(void *)&v85[0] = v59;
          if (!v59) {
            goto LABEL_106;
          }
          *long long v59 = *(_DWORD *)(a2 + 136);
        }
        uint64_t v27 = der_copy_oid();
        if (!v27)
        {
          uint64_t v83 = sub_213CD3058((uint64_t)v85);
          uint64_t v60 = malloc_type_malloc(v83, 0xA5282E40uLL);
          uint64_t v84 = v60;
          if (v60)
          {
            uint64_t v61 = sub_213CD3038((uint64_t)v60 + v83 - 1, v83, (uint64_t)v85, (uint64_t)&v71);
            if (!v61)
            {
              sub_213CD3068((uint64_t)v85);
              if (v71 != v83) {
                goto LABEL_119;
              }
              uint64_t v27 = sub_213CBE4FC(a1, (uint64_t)&v72, 0);
              free(v84);
              if (v27) {
                goto LABEL_63;
              }
              goto LABEL_93;
            }
            uint64_t v27 = v61;
            free(v84);
            uint64_t v84 = 0;
          }
          else
          {
            uint64_t v27 = 12;
          }
        }
        sub_213CD3068((uint64_t)v85);
        goto LABEL_52;
      }
      goto LABEL_60;
    }
LABEL_53:
    long long v28 = "Out of memory";
    uint64_t v27 = 12;
    uint64_t v29 = a1;
LABEL_61:
    int v30 = 12;
    goto LABEL_62;
  }
  uint64_t v18 = "No public key set";
LABEL_29:
  uint64_t v27 = 22;
  hx509_set_error_string(a1, 0, 22, v18, a5, a6, a7, a8, (char)v67);
  return v27;
}

uint64_t hx509_ca_sign_self(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_213CBD9B0(a1, a2, a3, 0, 0, a4, a7, a8);
}

uint64_t sub_213CBE420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = hx509_name_to_Name_0();
  if (v5)
  {
    uint64_t v10 = v5;
    uint64_t v11 = a1;
    int v12 = v10;
LABEL_3:
    hx509_set_error_string(v11, 0, v12, "Failed to copy subject name", (uint64_t)v6, v7, v8, v9, v15);
    return v10;
  }
  int v16 = 0;
  time_t v14 = time(0);
  asprintf(&v16, "ts-%lu", v14);
  unint64_t v6 = v16;
  if (!v16)
  {
    uint64_t v10 = 12;
    uint64_t v11 = a1;
    int v12 = 12;
    goto LABEL_3;
  }
  uint64_t v10 = sub_213CCD3D0(a1, a3, 1, (uint64_t)&unk_2641E9858, v16);
  free(v16);
  if (v10) {
    sub_213CD24C8(a3);
  }
  return v10;
}

uint64_t sub_213CBE4FC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  if (a3)
  {
    uint64_t v5 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    *(void *)&long long v16 = v5;
    if (!v5)
    {
      uint64_t v11 = 12;
      uint64_t v12 = a1;
      int v13 = 12;
      goto LABEL_9;
    }
    *uint64_t v5 = 1;
  }
  uint64_t v10 = der_copy_oid();
  if (v10 || (uint64_t v10 = der_copy_octet_string(), v10))
  {
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = sub_213CD2658(*(unsigned int **)(a2 + 240));
    if (!v11) {
      goto LABEL_10;
    }
  }
  uint64_t v12 = a1;
  int v13 = v11;
LABEL_9:
  hx509_set_error_string(v12, 0, v13, "Out of memory", v6, v7, v8, v9, v15);
LABEL_10:
  sub_213CD25D4((uint64_t)&v15);
  return v11;
}

uint64_t hx509_context_init(uint64_t *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B0040F8078E03uLL);
  *a1 = (uint64_t)v2;
  if (!v2) {
    return 12;
  }
  ((void (*)(void))nullsub_1)();
  sub_213CCB004(*a1);
  sub_213CC95F4(*a1);
  sub_213CCB91C(*a1);
  nullsub_1(*a1);
  nullsub_1(*a1);
  uint64_t v3 = sub_213CCA7D4(*a1);
  uint64_t v4 = hc_ENGINE_add_conf_module(v3);
  hc_OpenSSL_add_all_algorithms(v4);
  uint64_t v5 = *a1;
  *(_DWORD *)(v5 + 16) = 300;
  initialize_hx_error_table_r((void *)(v5 + 32));
  initialize_asn1_error_table_r((void *)(*a1 + 32));
  hx509_certs_init(*a1, "KEYCHAIN:system-anchors", 0, 0, (void *)(*a1 + 48));
  return 0;
}

uint64_t hx509_context_set_missing_revoke(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = *(_DWORD *)(result + 12) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

uint64_t sub_213CBE6DC(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sub_213CBE6E4(uint64_t a1)
{
  unint64_t v1 = *(_DWORD **)(a1 + 16);
  if (v1) {
    return (*v1 + 1);
  }
  else {
    return 1;
  }
}

uint64_t hx509_cert_init(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = heim_uniq_alloc(0x70uLL, (uint64_t)"hx509-cert", (uint64_t)sub_213CBE7DC, a4, a5, a6, a7, a8);
  *a3 = (CFTypeRef)v9;
  if (!v9) {
    return 12;
  }
  *(void *)(v9 + 32) = 0;
  uint64_t v10 = *a3;
  v10[9] = 0;
  v10[10] = 0;
  *((void *)*a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  *((void *)*a3 + 11) = 0;
  *((void *)*a3 + 12) = 0;
  *((void *)*a3 + 13) = 0;
  *((void *)*a3 + 7) = malloc_type_calloc(1uLL, 0x120uLL, 0x10B004094F02C90uLL);
  if (!*((void *)*a3 + 7))
  {
    heim_release(*a3);
    uint64_t v11 = 12;
    goto LABEL_7;
  }
  uint64_t v11 = sub_213CD2768();
  if (v11)
  {
    heim_release(*a3);
LABEL_7:
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_213CBE7DC(uint64_t a1)
{
  uint64_t v2 = *(void (**)(uint64_t, void))(a1 + 96);
  if (v2) {
    v2(a1, *(void *)(a1 + 104));
  }
  if (*(void *)(a1 + 64)) {
    hx509_private_key_free((const void **)(a1 + 64));
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    sub_213CD2758(v3);
    free(*(void **)(a1 + 56));
  }
  if (*(void *)(a1 + 72))
  {
    unint64_t v4 = 0;
    do
    {
      der_free_octet_string();
      der_free_oid();
      free(*(void **)(*(void *)(a1 + 80) + 8 * v4++));
    }
    while (v4 < *(void *)(a1 + 72));
  }
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 32));
  if (*(void *)(a1 + 88)) {
    hx509_name_free((uint64_t *)(a1 + 88));
  }

  return der_free_octet_string();
}

uint64_t hx509_cert_init_data(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  memset(v20, 0, sizeof(v20));
  uint64_t v19 = 0;
  uint64_t v7 = sub_213CD2708(a2, a3, (uint64_t)v20, (uint64_t)&v19);
  if (v7)
  {
    uint64_t v13 = v7;
    time_t v14 = "Failed to decode certificate";
    uint64_t v15 = a1;
    int v16 = v13;
LABEL_6:
    hx509_set_error_string(v15, 0, v16, v14, v9, v10, v11, v12, v18);
    return v13;
  }
  if (v19 != a3)
  {
    uint64_t v13 = 569876;
    sub_213CD2758((uint64_t)v20);
    time_t v14 = "Extra data after certificate";
    uint64_t v15 = a1;
    int v16 = 569876;
    goto LABEL_6;
  }
  uint64_t v13 = hx509_cert_init(v7, (uint64_t)v20, a4, v8, v9, v10, v11, v12);
  sub_213CD2758((uint64_t)v20);
  return v13;
}

uint64_t sub_213CBE9A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 96) = a2;
  *(void *)(result + 104) = a3;
  return result;
}

uint64_t _hx509_cert_set_key(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 64);
  if (*(void *)(a1 + 64)) {
    hx509_private_key_free((const void **)(a1 + 64));
  }
  void *v3 = _hx509_private_key_ref(a2);
  return 0;
}

uint64_t hx509_verify_init_ctx(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040C34EC329uLL);
  if (!v3) {
    return 12;
  }
  unint64_t v4 = v3;
  uint64_t result = 0;
  void v4[6] = 30;
  *a2 = v4;
  return result;
}

void hx509_verify_destroy_ctx(const void **a1)
{
  if (a1)
  {
    hx509_certs_free(a1);
    hx509_revoke_free(a1 + 4);
    a1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }

  free(a1);
}

const void *hx509_verify_attach_anchors(const void **a1, CFTypeRef cf)
{
  if (*a1) {
    hx509_certs_free(a1);
  }
  uint64_t result = (const void *)j__heim_retain(cf);
  *a1 = result;
  return result;
}

uint64_t hx509_verify_attach_revoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3 = (void *)(a1 + 32);
  if (*(void *)(a1 + 32)) {
    hx509_revoke_free((CFTypeRef *)(a1 + 32));
  }
  uint64_t result = j__heim_retain(cf);
  void *v3 = result;
  return result;
}

uint64_t hx509_verify_set_time(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) |= 1u;
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t sub_213CBEB40(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t hx509_verify_set_max_depth(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t hx509_verify_set_proxy_certificate(uint64_t result, int a2)
{
  *(_DWORD *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = *(_DWORD *)(result + 8) & 0xFFFFFFFD | (2 * (a2 != 0));
  return result;
}

uint64_t hx509_verify_set_strict_rfc3280_verification(uint64_t result, int a2)
{
  *(_DWORD *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = *(_DWORD *)(result + 8) & 0xFFFFFFFB | (4 * (a2 != 0));
  return result;
}

uint64_t hx509_verify_ctx_f_allow_default_trustanchors(uint64_t result, int a2)
{
  *(_DWORD *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = *(_DWORD *)(result + 8) & 0xFFFFFFEF | (16 * (a2 == 0));
  return result;
}

uint64_t sub_213CBEB98(uint64_t a1, void *a2)
{
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = sub_213CBEBFC(a1, (uint64_t)&unk_2641EA4F8, &v5);
  if (v3) {
    return sub_213CD2A88(*(void *)(v3 + 32), *(void *)(v3 + 24), (uint64_t)a2, (uint64_t)&v6);
  }
  else {
    return 569857;
  }
}

uint64_t sub_213CBEBFC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *(_DWORD **)(a1 + 16);
  if (!v3) {
    return 0;
  }
  if (*v3 < 2u) {
    return 0;
  }
  unint64_t v5 = *(unsigned int **)(a1 + 240);
  if (!v5 || *a3 >= *v5) {
    return 0;
  }
  while (der_heim_oid_cmp())
  {
    unint64_t v7 = *a3 + 1;
    *a3 = v7;
    if (v7 >= **(unsigned int **)(a1 + 240)) {
      return 0;
    }
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 240) + 8);
  unint64_t v10 = (*a3)++;
  return v9 + 40 * v10;
}

void hx509_free_octet_string_list(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      der_free_octet_string();
      ++v3;
      v2 += 16;
    }
    while (v3 < *(void *)a1);
  }
  free(*(void **)(a1 + 8));
  *(void *)a1 = 0;
  *(void *)(a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
}

uint64_t hx509_cert_find_subjectAltName_otherName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  unint64_t v23 = 0;
  while (1)
  {
    uint64_t v7 = sub_213CBEEAC(*(void *)(a2 + 56), &v23, &v24);
    ++v23;
    if (v7)
    {
      uint64_t v20 = v7;
      if (v7 == 569857) {
        return 0;
      }
      hx509_set_error_string(a1, 0, v7, "Error searching for SAN", v8, v9, v10, v11, v22);
      hx509_free_octet_string_list(a4);
      return v20;
    }
    if (v24) {
      break;
    }
LABEL_11:
    sub_213CD2940((uint64_t)&v24);
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  while (1)
  {
    if (*(_DWORD *)(v25 + v12) != 1 || der_heim_oid_cmp()) {
      goto LABEL_10;
    }
    time_t v14 = malloc_type_realloc(*(void **)(a4 + 8), 16 * *(void *)a4 + 16, 0x108004057E67DB5uLL);
    if (!v14)
    {
      uint64_t v20 = 12;
      goto LABEL_14;
    }
    *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v14;
    uint64_t v19 = der_copy_octet_string();
    if (v19) {
      break;
    }
    ++*(void *)a4;
LABEL_10:
    ++v13;
    v12 += 40;
    if (v13 >= v24) {
      goto LABEL_11;
    }
  }
  uint64_t v20 = v19;
LABEL_14:
  hx509_set_error_string(a1, 0, v20, "Error adding an exra SAN to return list", v15, v16, v17, v18, v22);
  hx509_free_octet_string_list(a4);
  sub_213CD2940((uint64_t)&v24);
  return v20;
}

uint64_t sub_213CBEEAC(uint64_t a1, unint64_t *a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v4 = sub_213CBEBFC(a1, (uint64_t)&unk_2641EA6A8, a2);
  if (!v4) {
    return 569857;
  }
  uint64_t v6 = 0;
  return sub_213CD28F0(*(void *)(v4 + 32), *(void *)(v4 + 24), (uint64_t)a3, (uint64_t)&v6);
}

uint64_t sub_213CBEF10(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_213CBEF18(a1, *(void *)(a2 + 56), a3, a4);
}

uint64_t sub_213CBEF18(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unint64_t v23 = 0;
  uint64_t v4 = *(_DWORD **)(a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = 0;
  int v25 = 0;
  uint64_t v24 = 0;
  if (*v4 + 1 >= 3)
  {
    uint64_t v10 = sub_213CBEBFC(a2, (uint64_t)&unk_2641EA3F8, &v23);
    if (!v10)
    {
      if (a4)
      {
        uint64_t v5 = 569872;
        hx509_set_error_string(a1, 0, 569872, "Required extension key usage missing from certifiate", v11, v12, v13, v14, v21);
        return v5;
      }
      return 0;
    }
    uint64_t v5 = sub_213CD29D0(*(void *)(v10 + 32), *(void *)(v10 + 24), (uint64_t)&v25, (uint64_t)&v24);
    if (!v5)
    {
      int v15 = sub_213CD2A20(v25);
      if ((a3 & ~v15) != 0)
      {
        uint64_t v5 = 569872;
        char v22 = 0;
        unparse_flags(a3 & ~v15, (uint64_t)off_267800CA0, v26, 0x100uLL);
        sub_213CCDC40(a2 + 144, &v22);
        hx509_set_error_string(a1, 0, 569872, "Key usage %s required but missing from certifiate %s", v16, v17, v18, v19, (char)v26);
        free(v22);
        return v5;
      }
      return 0;
    }
  }
  return v5;
}

uint64_t sub_213CBF090(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v19 = 0;
  uint64_t v6 = a2 + 144;
  uint64_t result = sub_213CCD06C(a2 + 144, a1 + 72, (int *)&v19);
  if (!result)
  {
    uint64_t result = v19;
    if (!v19)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      v15[0] = 0;
      v15[1] = 0;
      int v8 = sub_213CBF21C(a1, &v16);
      int v9 = v8;
      if (v8 != 569857 && v8) {
        return 1;
      }
      int v10 = sub_213CBEB98(a2, v15);
      if (v10 == 569857 || !v10)
      {
        if (v9)
        {
LABEL_9:
          sub_213CD2A78((uint64_t)&v16);
          sub_213CD2AD8((uint64_t)v15);
          return v19;
        }
        if (v10)
        {
          if (a3)
          {
LABEL_13:
            unsigned int v19 = 0;
            goto LABEL_9;
          }
          if (v16)
          {
            unsigned int v19 = -1;
            goto LABEL_9;
          }
        }
        else if (v16)
        {
          unsigned int v19 = der_heim_octet_string_cmp();
          goto LABEL_9;
        }
        v12[0] = 0;
        v12[1] = 0;
        uint64_t v13 = 0;
        if (v17 && v18)
        {
          uint64_t result = der_heim_integer_cmp();
          unsigned int v19 = result;
          if (result) {
            return result;
          }
          if (*(_DWORD *)v17 == 1)
          {
            uint64_t v11 = *(void *)(v17 + 8);
            if (*(_DWORD *)v11 == 4)
            {
              LODWORD(v13) = *(_DWORD *)(v11 + 8);
              long long v14 = *(_OWORD *)(v11 + 16);
              uint64_t result = sub_213CCD06C(v6, (uint64_t)v12, (int *)&v19);
              if (result) {
                return result;
              }
              uint64_t result = v19;
              if (v19) {
                return result;
              }
              goto LABEL_13;
            }
          }
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_213CBF21C(uint64_t a1, void *a2)
{
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v3 = sub_213CBEBFC(a1, (uint64_t)&unk_2641EA448, &v5);
  if (v3) {
    return sub_213CD2A28(*(void *)(v3 + 32), *(void *)(v3 + 24), (uint64_t)a2, (uint64_t)&v6);
  }
  else {
    return 569857;
  }
}

uint64_t sub_213CBF284(uint64_t a1, uint64_t *a2, const void *a3)
{
  uint64_t v6 = malloc_type_realloc((void *)a2[1], 8 * *a2 + 8, 0x2004093837F09uLL);
  if (v6)
  {
    a2[1] = (uint64_t)v6;
    CFTypeRef v11 = heim_retain(a3);
    uint64_t v12 = 0;
    uint64_t v13 = *a2;
    *(void *)(a2[1] + 8 * *a2) = v11;
    *a2 = v13 + 1;
  }
  else
  {
    uint64_t v12 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v15);
  }
  return v12;
}

void sub_213CBF31C(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 0;
    unsigned int v3 = 1;
    do
    {
      heim_release(*(CFTypeRef *)(*(void *)(a1 + 8) + 8 * v2));
      uint64_t v2 = v3;
    }
    while (*(void *)a1 > (unint64_t)v3++);
  }
  free(*(void **)(a1 + 8));
  *(void *)a1 = 0;
  *(void *)(a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
}

uint64_t sub_213CBF378(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, const void *a6, uint64_t a7, uint64_t *a8)
{
  LODWORD(v11) = a5;
  uint64_t v16 = sub_213CBF284(a1, a8, a6);
  if (v16) {
    return v16;
  }
  uint64_t v43 = 0;
  if (v11) {
    unint64_t v11 = v11;
  }
  else {
    unint64_t v11 = 30;
  }
  char v22 = heim_retain(a6);
  while (!sub_213CBF668(a1, a4, (uint64_t)v22, v17, v18, v19, v20, v21))
  {
    uint64_t v43 = 0;
    memset(v54, 0, 24);
    uint64_t v53 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    memset(v46, 0, sizeof(v46));
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v28 = v22[7];
    if (*(_DWORD *)(v28 + 168))
    {
      *((void *)&v46[0] + 1) = v22[7];
      int v29 = 1;
    }
    else
    {
      if (sub_213CBF21C(v28, v54))
      {
        uint64_t v16 = 569880;
        int v40 = "Subjectless certificate missing AuthKeyID";
LABEL_31:
        hx509_set_error_string(a1, 0, 569880, v40, v24, v25, v26, v27, v42);
LABEL_33:
        heim_release(v22);
        return v16;
      }
      if (!v54[0])
      {
        uint64_t v16 = 569880;
        sub_213CD2A78((uint64_t)v54);
        int v40 = "Subjectless certificate missing keyIdentifier inside AuthKeyID";
        goto LABEL_31;
      }
      *(void *)&long long v47 = v54[0];
      int v29 = 16;
    }
    *(void *)&long long v49 = a8;
    LODWORD(v46[0]) = v29 | 0x20000;
    if (a7)
    {
      *((void *)&v51 + 1) = a3;
      LODWORD(v46[0]) = v29 | 0x220000;
      if (!hx509_certs_find(a1, a7, (int *)v46, &v43, v24, v25, v26, v27)) {
        goto LABEL_17;
      }
      LODWORD(v46[0]) &= ~0x200000u;
    }
    if (!a4 || hx509_certs_find(a1, a4, (int *)v46, &v43, v24, v25, v26, v27))
    {
      sub_213CD2A78((uint64_t)v54);
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      if (hx509_name_from_Name(v22[7] + 144, &v45)
        || (int v35 = hx509_name_to_string(v45, &v44), hx509_name_free((uint64_t *)&v45), v35))
      {
        hx509_clear_error_string(a1);
        uint64_t v16 = 569867;
      }
      else
      {
        uint64_t v16 = 569867;
        hx509_set_error_string(a1, 0, 569867, "Failed to find issuer for certificate with subject: '%s'", v36, v37, v38, v39, (char)v44);
        free(v44);
      }
      goto LABEL_33;
    }
LABEL_17:
    sub_213CD2A78((uint64_t)v54);
    heim_release(v22);
    uint64_t v30 = sub_213CBF284(a1, a8, v43);
    if (v30) {
      return v30;
    }
    char v22 = v43;
    if (*a8 > v11)
    {
      heim_release(v43);
      uint64_t v16 = 569871;
      hx509_set_error_string(a1, 0, 569871, "Path too long while bulding certificate chain", v31, v32, v33, v34, v42);
      return v16;
    }
  }
  if ((a2 & 1) != 0 && *a8 && sub_213CBF668(a1, a4, *(void *)(a8[1] + 8 * *a8 - 8), v23, v24, v25, v26, v27))
  {
    heim_release(*(CFTypeRef *)(a8[1] + 8 * *a8 - 8));
    --*a8;
  }
  heim_release(v22);
  return 0;
}

BOOL sub_213CBF668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  CFTypeRef v10 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  LODWORD(v11) = 0x8000;
  *(void *)&long long v12 = *(void *)(a3 + 56);
  int v8 = hx509_certs_find(a1, a2, (int *)&v11, &v10, a5, a6, a7, a8);
  if (!v8) {
    heim_release(v10);
  }
  return v8 == 0;
}

uint64_t sub_213CBF6EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = der_heim_oid_cmp();
  if (!result)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a1 + 16))
    {
      if (v5)
      {
        return der_heim_octet_string_cmp();
      }
      else
      {
        return 1;
      }
    }
    else if (v5)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_213CBF758(uint64_t a1, uint64_t a2)
{
  uint64_t result = der_heim_bit_string_cmp();
  if (!result)
  {
    uint64_t result = sub_213CBF6EC(a1 + 248, a2 + 248);
    if (!result)
    {
      return der_heim_octet_string_cmp();
    }
  }
  return result;
}

uint64_t hx509_cert_cmp(uint64_t a1, uint64_t a2)
{
  return sub_213CBF758(*(void *)(a1 + 56), *(void *)(a2 + 56));
}

uint64_t hx509_cert_get_issuer(uint64_t a1, void **a2)
{
  return hx509_name_from_Name(*(void *)(a1 + 56) + 72, a2);
}

uint64_t hx509_cert_get_subject(uint64_t a1, void **a2)
{
  return hx509_name_from_Name(*(void *)(a1 + 56) + 144, a2);
}

uint64_t hx509_cert_get_base_subject(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6 = *(void *)(a2 + 88);
  if (v6)
  {
    return hx509_name_copy(a1, v6, a3);
  }
  else if (sub_213CBF8A8(a1, *(void *)(a2 + 56), 0))
  {
    uint64_t v12 = *(void *)(a2 + 56) + 144;
    return hx509_name_from_Name(v12, a3);
  }
  else
  {
    hx509_set_error_string(a1, 0, 569882, "Proxy certificate have not been canonicalize yet, no base name", v8, v9, v10, v11, v13);
    return 569882;
  }
}

uint64_t sub_213CBF8A8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v11 = 0;
  if (a3)
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v12 = 0;
  uint64_t v5 = sub_213CBEBFC(a2, (uint64_t)&unk_2641EAD58, &v11);
  if (!v5)
  {
    uint64_t v8 = 569857;
    goto LABEL_7;
  }
  uint64_t v6 = v5;
  uint64_t v7 = sub_213CD3018(*(void *)(v5 + 32), *(void *)(v5 + 24), (uint64_t)&v13, (uint64_t)&v12);
  if (v7)
  {
    uint64_t v8 = v7;
LABEL_7:
    hx509_clear_error_string(a1);
    return v8;
  }
  if (v12 == *(void *)(v6 + 24))
  {
    if (a3)
    {
      uint64_t v8 = 0;
      long long v10 = v14;
      *a3 = v13;
      a3[1] = v10;
    }
    else
    {
      sub_213CD3068((uint64_t)&v13);
      return 0;
    }
  }
  else
  {
    sub_213CD3068((uint64_t)&v13);
    hx509_clear_error_string(a1);
    return 569876;
  }
  return v8;
}

uint64_t hx509_cert_get_serialnumber()
{
  return der_copy_heim_integer();
}

uint64_t hx509_cert_get_notBefore(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if ((*(_DWORD *)(v1 + 112) - 1) > 1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 120);
  }
}

uint64_t sub_213CBF9D0(uint64_t a1)
{
  if ((*(_DWORD *)a1 - 1) > 1) {
    return 0;
  }
  else {
    return *(void *)(a1 + 8);
  }
}

uint64_t hx509_cert_get_notAfter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if ((*(_DWORD *)(v1 + 128) - 1) > 1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 136);
  }
}

uint64_t hx509_cert_get_SPKI(uint64_t a1)
{
  uint64_t v6 = copy_SubjectPublicKeyInfo();
  if (v6) {
    hx509_set_error_string(a1, 0, v6, "Failed to copy SPKI", v2, v3, v4, v5, v8);
  }
  return v6;
}

uint64_t sub_213CBFA68(uint64_t a1)
{
  uint64_t v6 = copy_AlgorithmIdentifier();
  if (v6) {
    hx509_set_error_string(a1, 0, v6, "Failed to copy SPKI AlgorithmIdentifier", v2, v3, v4, v5, v8);
  }
  return v6;
}

uint64_t _hx509_cert_private_key(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t sub_213CBFAC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return sub_213CC5810(result);
  }
  return result;
}

uint64_t sub_213CBFAD4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  a5[1] = 0;
  uint64_t v8 = *(void *)(a4 + 64);
  if (v8)
  {
    return sub_213CC5094(a1, a2, a3, v8, a5, a6, a7, a8);
  }
  else
  {
    hx509_set_error_string(a1, 0, 569865, "Private key missing", (uint64_t)a5, a6, a7, a8, vars0);
    return 569865;
  }
}

uint64_t sub_213CBFB2C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_213CC4F3C(a1, a2, *(void *)(a3 + 56), a4, a5);
}

void *sub_213CBFB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (void *)heim_uniq_alloc(0x28uLL, (uint64_t)"hx509-evaluate", (uint64_t)sub_213CBFB94, a4, a5, a6, a7, a8);
  if (v8)
  {
    CFMutableArrayRef v9 = heim_array_create();
    v8[4] = v9;
    if (!v9)
    {
      heim_release(v8);
      return 0;
    }
  }
  return v8;
}

void sub_213CBFB94(uint64_t a1)
{
}

CFIndex hx509_evaluate_get_length(uint64_t a1)
{
  return heim_array_get_length(*(CFArrayRef *)(a1 + 32));
}

const void *hx509_evaluate_get_cert(uint64_t a1, CFIndex a2)
{
  return heim_array_copy_value(*(const __CFArray **)(a1 + 32), a2);
}

const void *hx509_evaluate_get_ta(uint64_t a1)
{
  uint64_t result = (const void *)heim_array_get_length(*(CFArrayRef *)(a1 + 32));
  if (result)
  {
    CFIndex v3 = (CFIndex)result - 1;
    CFArrayRef v4 = *(const __CFArray **)(a1 + 32);
    return heim_array_copy_value(v4, v3);
  }
  return result;
}

uint64_t hx509_verify_path(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_213CBFC0C(a1, a2, a3, a4, 0);
}

uint64_t sub_213CBFC0C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v153 = 0;
  uint64_t v154 = &v153;
  uint64_t v155 = 0x2000000000;
  uint64_t v149 = 0;
  long long v150 = &v149;
  uint64_t v151 = 0x2000000000;
  if (a5) {
    *a5 = 0;
  }
  uint64_t v156 = 0;
  uint64_t v152 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  v154[3] = (uint64_t)Mutable;
  if (!Mutable) {
    heim_abort("out of memory:certs != NULL", v11, v12, v13, v14, v15, v16, v17, v138);
  }
  uint64_t inited = 569878;
  SecCertificateRef v19 = sub_213CC0A08(a1, (uint64_t)a3);
  v150[3] = (uint64_t)v19;
  CFArrayAppendValue((CFMutableArrayRef)v154[3], v19);
  CFRelease((CFTypeRef)v150[3]);
  v148[0] = MEMORY[0x263EF8330];
  v148[1] = 0x40000000;
  v148[2] = sub_213CC0A98;
  v148[3] = &unk_2641E8108;
  v148[4] = &v149;
  v148[5] = &v153;
  v148[6] = a1;
  hx509_certs_iter(a1, a4, (uint64_t)v148, v20, v21, v22, v23, v24);
  SecPolicyRef BasicX509 = SecPolicyCreateBasicX509();
  SecTrustRef trust = 0;
  OSStatus v26 = SecTrustCreateWithCertificates((CFTypeRef)v154[3], BasicX509, &trust);
  CFRelease(BasicX509);
  CFRelease((CFTypeRef)v154[3]);
  if (v26)
  {
    hx509_set_error_string(a1, 0, 569867, "Failed to create trust", v27, v28, v29, v30, v138);
    CFRelease(trust);
  }
  int v146 = 0;
  int v31 = MEMORY[0x216694AB0](trust, &v146);
  if (v31)
  {
    uint64_t inited = 569867;
    hx509_set_error_string(a1, 0, 569867, "Failed to validate trust: %d", v32, v33, v34, v35, v31);
    CFRelease(trust);
    goto LABEL_135;
  }
  if (v146 != 1 && v146 != 4)
  {
    hx509_set_error_string(a1, 0, 569867, "Failed to validate trust", v32, v33, v34, v35, v138);
    CFRelease(trust);
    if (qword_267801588 != -1) {
      dispatch_once(&qword_267801588, &unk_26C4C8C38);
    }
    if (!byte_267801590)
    {
      uint64_t inited = 569867;
      goto LABEL_135;
    }
    long long v158 = 0;
    long long v159 = 0u;
    long long v160 = 0u;
    uint64_t v161 = 0;
    if (a5) {
      *a5 = 0;
    }
    unint64_t v163 = 0;
    uint64_t v164 = 0;
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      *(void *)(a2 + 16) = time(0);
    }
    int v162 = 0;
    uint64_t v66 = *(const void **)a2;
    if (*(void *)a2 || (uint64_t v66 = *(const void **)(a1 + 48)) != 0 && (*(unsigned char *)(a2 + 8) & 0x10) == 0)
    {
      krb5_principal v67 = (const void *)j__heim_retain(v66);
      long long v158 = v67;
    }
    else
    {
      uint64_t v68 = hx509_certs_init(a1, "MEMORY:no-TA", 0, 0, &v158);
      if (v68) {
        goto LABEL_130;
      }
      krb5_principal v67 = v158;
    }
    uint64_t v68 = sub_213CBF378(a1, 0, *(void *)(a2 + 16), (uint64_t)v67, *(_DWORD *)(a2 + 24), a3, a4, (uint64_t *)&v163);
    if (v68)
    {
LABEL_130:
      uint64_t v102 = 0;
      uint64_t v91 = 0;
      uint64_t inited = v68;
      goto LABEL_131;
    }
    if (!v163) {
      goto LABEL_136;
    }
    unint64_t v76 = 0;
    int ptr = 0;
    int v144 = 0;
    unsigned int v77 = ((*(_DWORD *)(a2 + 8) >> 1) & 1) == 0;
    uint64_t v140 = a3 + 11;
    while (1)
    {
      uint64_t v78 = *(void *)(*(void *)(v164 + 8 * v76) + 56);
      if (!v77) {
        break;
      }
      if (v77 == 1) {
        goto LABEL_38;
      }
      unint64_t v79 = v76;
      uint64_t v68 = sub_213CBEF18(a1, v78, 32, (*(_DWORD *)(a2 + 8) >> 2) & 1);
      if (v68)
      {
        uint64_t v114 = v68;
        uint64_t v115 = "Key usage missing from CA certificate";
        uint64_t v116 = a1;
        char v117 = 1;
        goto LABEL_154;
      }
      if (v79 + 1 != v163)
      {
        LODWORD(v157[0]) = 0;
        uint64_t v68 = sub_213CC1E9C(a1, v78, v157);
        if (LODWORD(v157[0])) {
          int v81 = ptr + 1;
        }
        else {
          int v81 = ptr;
        }
        int ptr = v81;
        if (v68) {
          goto LABEL_130;
        }
        unsigned int v77 = 2;
LABEL_65:
        unint64_t v76 = v79;
        goto LABEL_66;
      }
      unint64_t v76 = v79;
      unsigned int v77 = 2;
LABEL_66:
      unint64_t v166 = 0;
      uint64_t v84 = *(_DWORD **)(v78 + 16);
      if (v84)
      {
        v157[0] = 0uLL;
        v167[0] = 0;
        if (*v84 + 1 >= 3)
        {
          unint64_t v85 = v76;
          uint64_t v68 = sub_213CBEBFC(v78, (uint64_t)&unk_2641EA528, &v166);
          if (v68)
          {
            uint64_t v86 = sub_213CD2AFC(*(void *)(v68 + 32), *(void *)(v68 + 24), (uint64_t)v157, (uint64_t)v167);
            if (v86)
            {
              uint64_t inited = v86;
              goto LABEL_207;
            }
            if (v77 == 2)
            {
              if (!*(void *)&v157[0] || !**(_DWORD **)&v157[0])
              {
                uint64_t inited = 569859;
                goto LABEL_206;
              }
              if (*((void *)&v157[0] + 1) && ~(ptr + (uint64_t)v144) + v85 > **((_DWORD **)&v157[0] + 1))
              {
                uint64_t inited = 569860;
LABEL_206:
                sub_213CD2B4C((uint64_t)v157);
LABEL_207:
                uint64_t v102 = 0;
                uint64_t v91 = 0;
                goto LABEL_131;
              }
            }
            else if (!v77 && *(void *)&v157[0] && **(_DWORD **)&v157[0])
            {
              uint64_t inited = 569875;
              goto LABEL_206;
            }
            uint64_t v68 = sub_213CD2B4C((uint64_t)v157);
            unint64_t v76 = v85;
          }
          else
          {
            unint64_t v76 = v85;
            if (v77 >= 2)
            {
              uint64_t v165 = 0;
              if (sub_213CCDC40(v78 + 144, &v165)) {
                sub_213CD8750();
              }
              uint64_t inited = 569857;
              hx509_set_error_string(a1, 0, 569857, "basicConstraints missing from CA certifiacte %s", v133, v134, v135, v136, (char)v165);
              free(v165);
              goto LABEL_207;
            }
          }
        }
      }
      ++v76;
      unint64_t v87 = v163;
      if (v76 != v163 || (*(unsigned char *)(a2 + 8) & 8) != 0)
      {
        if ((*(_DWORD *)(v78 + 112) - 1) > 1) {
          uint64_t v88 = 0;
        }
        else {
          uint64_t v88 = *(void *)(v78 + 120);
        }
        uint64_t v89 = *(void *)(a2 + 16);
        if (v88 > v89)
        {
          hx509_clear_error_string(a1);
          uint64_t v102 = 0;
          uint64_t v91 = 0;
          uint64_t inited = 569863;
          goto LABEL_131;
        }
        uint64_t v90 = (*(_DWORD *)(v78 + 128) - 1) > 1 ? 0 : *(void *)(v78 + 136);
        if (v90 < v89)
        {
          hx509_clear_error_string(a1);
          uint64_t v102 = 0;
          uint64_t v91 = 0;
          uint64_t inited = 569864;
          goto LABEL_131;
        }
      }
      if (v77 == 1)
      {
        unsigned int v77 = 2;
      }
      else if (!v77)
      {
        ++v144;
      }
      if (v76 >= v163)
      {
        if (v163)
        {
          uint64_t v91 = 0;
          ptra = 0;
          while (1)
          {
            LODWORD(v165) = 0;
            unint64_t v141 = v87 - 1;
            uint64_t v145 = *(void *)(*(void *)(v164 + 8 * (v87 - 1)) + 56);
            uint64_t v68 = sub_213CC1E9C(a1, v145, &v165);
            if (v68)
            {
LABEL_188:
              uint64_t inited = v68;
              goto LABEL_204;
            }
            BOOL v92 = v165 && v87 == v163;
            if (!v92 && v91) {
              break;
            }
LABEL_114:
            unint64_t v166 = 0;
            v167[0] = 0;
            v157[0] = 0uLL;
            uint64_t v68 = sub_213CBEBFC(v145, (uint64_t)&unk_2641EA588, &v166);
            if (v68)
            {
              uint64_t v68 = sub_213CD2B5C(*(void *)(v68 + 32), *(void *)(v68 + 24), (uint64_t)v157, (uint64_t)v167);
              if (v68)
              {
                uint64_t v98 = v68;
                if (v68 != 569857)
                {
                  hx509_set_error_string(a1, 0, v68, "Failed getting NameConstraints", v72, v73, v74, v75, v139);
                  uint64_t inited = v98;
                  goto LABEL_204;
                }
              }
              else
              {
                if (!v141)
                {
                  uint64_t inited = 569868;
                  hx509_set_error_string(a1, 0, 569868, "Not a CA and have NameConstraints", v72, v73, v74, v75, v139);
LABEL_213:
                  sub_213CD2B7C((uint64_t)v157);
                  goto LABEL_204;
                }
                uint64_t v99 = (uint64_t *)malloc_type_realloc(ptra, 16 * v91 + 16, 0x20040A4A59CD2uLL);
                if (!v99)
                {
                  hx509_clear_error_string(a1);
                  uint64_t inited = 12;
                  goto LABEL_213;
                }
                int v100 = v99;
                uint64_t v101 = sub_213CD2B8C();
                if (v101)
                {
                  uint64_t v137 = v101;
                  hx509_clear_error_string(a1);
                  ptra = v100;
                  uint64_t inited = v137;
                  goto LABEL_213;
                }
                ++v91;
                uint64_t v68 = sub_213CD2B7C((uint64_t)v157);
                ptra = v100;
              }
            }
            unint64_t v87 = v141;
            if (!v141) {
              goto LABEL_137;
            }
          }
          LODWORD(v167[0]) = 0;
          uint64_t v93 = ptra + 1;
          uint64_t v94 = v91;
          while (1)
          {
            v157[0] = 0uLL;
            uint64_t v95 = *(v93 - 1);
            if (v95)
            {
              LODWORD(v157[0]) = *(_DWORD *)v95;
              *((void *)&v157[0] + 1) = *(void *)(v95 + 8);
              uint64_t v96 = sub_213CC1F30((unsigned int *)v157, v145, v167);
              if (v96) {
                goto LABEL_158;
              }
              if (!LODWORD(v167[0]) && *(_DWORD *)(v145 + 168)) {
                break;
              }
            }
            uint64_t v97 = *v93;
            if (*v93)
            {
              LODWORD(v157[0]) = *(_DWORD *)v97;
              *((void *)&v157[0] + 1) = *(void *)(v97 + 8);
              uint64_t v96 = sub_213CC1F30((unsigned int *)v157, v145, v167);
              if (v96)
              {
LABEL_158:
                uint64_t v118 = v96;
                hx509_clear_error_string(a1);
                uint64_t inited = v118;
                goto LABEL_204;
              }
              if (LODWORD(v167[0]))
              {
                uint64_t inited = 569868;
                long long v121 = "Error verify constraints, certificate included in excluded subtree";
                goto LABEL_202;
              }
            }
            v93 += 2;
            if (!--v94) {
              goto LABEL_114;
            }
          }
          uint64_t inited = 569868;
          long long v121 = "Error verify constraints, certificate didn't match any permitted subtree";
LABEL_202:
          uint64_t v128 = a1;
          char v129 = 0;
LABEL_203:
          hx509_set_error_string(v128, v129, inited, v121, v72, v73, v74, v75, v139);
LABEL_204:
          uint64_t v102 = ptra;
LABEL_131:
          hx509_certs_free(&v158);
          sub_213CD24C8((uint64_t)&v159);
          if (v91)
          {
            uint64_t v103 = (uint64_t)v102;
            do
            {
              sub_213CD2B7C(v103);
              v103 += 16;
              --v91;
            }
            while (v91);
          }
          free(v102);
          sub_213CBF31C((uint64_t)&v163);
          goto LABEL_135;
        }
LABEL_136:
        uint64_t v91 = 0;
        ptra = 0;
LABEL_137:
        if (*(void *)(a2 + 32))
        {
          *(void *)&v157[0] = 0;
          uint64_t inited = hx509_certs_init(a1, "MEMORY:revoke-certs", 0, 0, v157);
          if (inited) {
            goto LABEL_204;
          }
          if (v163)
          {
            uint64_t v110 = 0;
            while (1)
            {
              uint64_t v111 = hx509_certs_add(a1, *(uint64_t *)&v157[0], *(void *)(v164 + 8 * v110), v105, v106, v107, v108, v109);
              if (v111) {
                break;
              }
              if (++v110 >= v163) {
                goto LABEL_143;
              }
            }
LABEL_147:
            uint64_t inited = v111;
            goto LABEL_148;
          }
LABEL_143:
          uint64_t inited = hx509_certs_merge(a1, *(uint64_t *)&v157[0], a4, v105, v106, v107, v108, v109);
          if (inited)
          {
LABEL_148:
            hx509_certs_free((const void **)v157);
            goto LABEL_204;
          }
          unint64_t v112 = 0;
          while (v112 < v163 - 1)
          {
            unint64_t v113 = v112 + 1;
            uint64_t v111 = hx509_revoke_verify(a1, *(void **)(a2 + 32), *(uint64_t *)&v157[0], *(void *)(a2 + 16), *(void *)(v164 + 8 * v112), *(void *)(v164 + 8 * v112 + 8));
            unint64_t v112 = v113;
            if (v111) {
              goto LABEL_147;
            }
          }
          hx509_certs_free((const void **)v157);
        }
        unint64_t v122 = v163;
        if (!v163)
        {
LABEL_182:
          if (a5)
          {
            uint64_t v126 = sub_213CBFB34(v68, v69, v70, v71, v72, v73, v74, v75);
            *a5 = v126;
            if (!v126)
            {
              uint64_t inited = 12;
              goto LABEL_204;
            }
            if (v163)
            {
              for (unint64_t i = 0; i < v163; ++i)
                heim_array_append_value(*((__CFArray **)*a5 + 4), *(const void **)(v164 + 8 * i));
            }
          }
          uint64_t inited = 0;
          goto LABEL_204;
        }
        while (2)
        {
          uint64_t v123 = *(void *)(v164 + 8 * v122 - 8);
          uint64_t v124 = *(void *)(v123 + 56);
          if (v122 == v163)
          {
            LODWORD(v157[0]) = 0;
            uint64_t v68 = sub_213CC1E9C(a1, v124, v157);
            if (v68) {
              goto LABEL_188;
            }
            if (!LODWORD(v157[0]))
            {
LABEL_181:
              if (!--v122) {
                goto LABEL_182;
              }
              continue;
            }
          }
          else
          {
            uint64_t v123 = *(void *)(v164 + 8 * v122);
          }
          break;
        }
        uint64_t v68 = sub_213CC0B9C(a1, v123, v124 + 248, v124, (void *)(v124 + 272), v73, v74, v75);
        if (v68)
        {
          uint64_t inited = v68;
          long long v121 = "Failed to verify signature of certificate";
          uint64_t v128 = a1;
          char v129 = 1;
          goto LABEL_203;
        }
        if (v122 == 1) {
          goto LABEL_182;
        }
        if ((*(unsigned char *)(a2 + 8) & 0x20) == 0)
        {
          uint64_t v125 = (*(_DWORD *)(v124 + 112) - 1) > 1 ? 0 : *(void *)(v124 + 120);
          uint64_t v68 = sub_213CC4AF4(a1, v124 + 248, v125);
          if (v68) {
            goto LABEL_188;
          }
        }
        goto LABEL_181;
      }
    }
    unint64_t v79 = v76;
    memset(v157, 0, sizeof(v157));
    uint64_t v68 = sub_213CBF8A8(a1, v78, v157);
    if (!v68)
    {
      if (*(void *)&v157[0] && v79 > **(_DWORD **)&v157[0])
      {
        sub_213CD3068((uint64_t)v157);
        uint64_t inited = 569871;
        long long v119 = "Proxy certificate chain longer then allowed";
        goto LABEL_197;
      }
      sub_213CD3068((uint64_t)v157);
      v167[0] = 0;
      if (sub_213CBEBFC(v78, (uint64_t)&unk_2641EA6A8, v167))
      {
        uint64_t inited = 569877;
        long long v119 = "Proxy certificate have explicity forbidden subjectAltName";
LABEL_197:
        uint64_t v130 = a1;
        int v131 = inited;
        goto LABEL_200;
      }
      v167[0] = 0;
      if (sub_213CBEBFC(v78, (uint64_t)&unk_2641EA6B8, v167))
      {
        uint64_t inited = 569877;
        long long v119 = "Proxy certificate have explicity forbidden issuerAltName";
        goto LABEL_197;
      }
      if (v144)
      {
        uint64_t v68 = sub_213CCD06C((uint64_t)&v159, v78 + 144, &v162);
        if (v68) {
          goto LABEL_165;
        }
        if (v162)
        {
          long long v119 = "Base proxy name not right";
LABEL_199:
          uint64_t v130 = a1;
          int v131 = 569878;
LABEL_200:
          hx509_set_error_string(v130, 0, v131, v119, v72, v73, v74, v75, v139);
          goto LABEL_207;
        }
      }
      sub_213CD24C8((uint64_t)&v159);
      uint64_t v82 = hx509_name_to_Name_0();
      if (v82)
      {
        uint64_t v120 = v82;
        hx509_clear_error_string(a1);
LABEL_194:
        uint64_t inited = v120;
        goto LABEL_207;
      }
      if (DWORD2(v160) < 2
        || (uint64_t v83 = DWORD2(v160) - 1, *(_DWORD *)(v161 + 16 * v83) > 1u)
        || der_heim_oid_cmp())
      {
        long long v119 = "Proxy name too short or does not have Common name at the top";
        goto LABEL_199;
      }
      sub_213CD2468(v161 + 16 * v83);
      --DWORD2(v160);
      uint64_t v68 = sub_213CCD06C((uint64_t)&v159, v78 + 72, &v162);
      if (v68)
      {
LABEL_165:
        uint64_t v120 = v68;
        hx509_set_error_string(a1, 0, v68, "Out of memory", v72, v73, v74, v75, v139);
        goto LABEL_194;
      }
      if (v162)
      {
        long long v119 = "Proxy issuer name not as expected";
        goto LABEL_199;
      }
      unsigned int v77 = 0;
      goto LABEL_65;
    }
    unint64_t v76 = v79;
LABEL_38:
    if (v144)
    {
      unint64_t v79 = v76;
      uint64_t v80 = sub_213CCD06C((uint64_t)&v159, v78 + 144, &v162);
      if (v80)
      {
        uint64_t v114 = v80;
        uint64_t v115 = "out of memory";
        uint64_t v116 = a1;
        char v117 = 0;
LABEL_154:
        hx509_set_error_string(v116, v117, v114, v115, v72, v73, v74, v75, v139);
        goto LABEL_157;
      }
      if (v162)
      {
        hx509_clear_error_string(a1);
        goto LABEL_207;
      }
      if (*v140) {
        hx509_name_free(v140);
      }
      uint64_t v68 = hx509_name_from_Name((uint64_t)&v159, (void **)v140);
      if (v68)
      {
        uint64_t v114 = v68;
        hx509_clear_error_string(a1);
LABEL_157:
        uint64_t v102 = 0;
        uint64_t v91 = 0;
        uint64_t inited = v114;
        goto LABEL_131;
      }
      unsigned int v77 = 1;
      goto LABEL_65;
    }
    unsigned int v77 = 1;
    goto LABEL_66;
  }
  if (!a5) {
    goto LABEL_18;
  }
  CFIndex CertificateCount = SecTrustGetCertificateCount(trust);
  uint64_t v44 = sub_213CBFB34(CertificateCount, v37, v38, v39, v40, v41, v42, v43);
  *a5 = v44;
  if (!v44)
  {
    CFRelease(trust);
    uint64_t inited = 12;
    goto LABEL_135;
  }
  if (CertificateCount >= 1)
  {
    CFIndex v45 = 0;
    while (1)
    {
      CertificateAtIndex = SecTrustGetCertificateAtIndex(trust, v45);
      if (!CertificateAtIndex) {
        heim_abort("SecTrustGetCertificateAtIndex didn't return a cert:tc != NULL", v47, v48, v49, v50, v51, v52, v53, v138);
      }
      CFDataRef v54 = SecCertificateCopyData(CertificateAtIndex);
      if (!v54) {
        heim_abort("cert w/o data ?:data != NULL", v55, v56, v57, v58, v59, v60, v61, v138);
      }
      CFDataRef v62 = v54;
      *(void *)&long long v159 = 0;
      BytePtr = CFDataGetBytePtr(v54);
      CFIndex Length = CFDataGetLength(v62);
      uint64_t inited = hx509_cert_init_data(a1, (uint64_t)BytePtr, Length, (CFTypeRef *)&v159);
      CFRelease(v62);
      if (inited) {
        break;
      }
      uint64_t v65 = (const void *)v159;
      heim_array_append_value(*((__CFArray **)*a5 + 4), (const void *)v159);
      heim_release(v65);
      if (CertificateCount == ++v45) {
        goto LABEL_18;
      }
    }
    CFRelease(trust);
    heim_release(*a5);
    *a5 = 0;
  }
  else
  {
LABEL_18:
    CFRelease(trust);
    uint64_t inited = 0;
  }
LABEL_135:
  _Block_object_dispose(&v149, 8);
  _Block_object_dispose(&v153, 8);
  return inited;
}

SecCertificateRef sub_213CC0A08(uint64_t a1, uint64_t a2)
{
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  SecCertificateRef v2 = 0;
  if (!hx509_cert_binary(a1, a2, (uint64_t)&v7))
  {
    CFIndex v3 = v8;
    CFDataRef v4 = CFDataCreateWithBytesNoCopy(0, v8, v7, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    if (v4)
    {
      CFDataRef v5 = v4;
      SecCertificateRef v2 = SecCertificateCreateWithData(0, v4);
      CFRelease(v5);
    }
    else
    {
      SecCertificateRef v2 = 0;
    }
    free(v3);
  }
  return v2;
}

uint64_t sub_213CC0A98(void *a1, uint64_t a2)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = sub_213CC0A08(a1[6], a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1[5] + 8) + 24), *(const void **)(*(void *)(a1[4] + 8) + 24));
  CFRelease(*(CFTypeRef *)(*(void *)(a1[4] + 8) + 24));
  return 0;
}

void sub_213CC0AF8()
{
  CFBooleanRef v0 = (const __CFBoolean *)CFPreferencesCopyValue(@"AllowHX509Validation", @"org.h5l.hx509", (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1)) {
      byte_267801590 = CFBooleanGetValue(v1) != 0;
    }
    CFRelease(v1);
  }
}

uint64_t sub_213CC0B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*a5 & 7) != 0)
  {
    uint64_t v8 = 569925;
    hx509_set_error_string(a1, 0, 569925, "signature not multiple of 8 bits", (uint64_t)a5, a6, a7, a8, v11[0]);
  }
  else
  {
    uint64_t v9 = a5[1];
    v11[0] = *a5 >> 3;
    v11[1] = v9;
    return hx509_verify_signature_0(a1, a2, a3, a4, (uint64_t)v11);
  }
  return v8;
}

uint64_t hx509_verify_hostname(uint64_t a1, uint64_t a2, char a3, uint64_t a4, const char *a5, uint64_t a6, int a7)
{
  if (a6 && a7 < 1) {
    return 22;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v23 = 0;
  while (1)
  {
    int v11 = sub_213CBEEAC(*(void *)(a2 + 56), &v23, &v24);
    if (v11) {
      break;
    }
    unint64_t v12 = v24;
    if (v24)
    {
      uint64_t v13 = 0;
      for (unint64_t i = 0; i < v12; ++i)
      {
        if (*(_DWORD *)(v25 + v13) == 3)
        {
          strlen(a5);
          if (!der_printable_string_cmp())
          {
            sub_213CD2940((uint64_t)&v24);
            return 0;
          }
          unint64_t v12 = v24;
        }
        v13 += 40;
      }
    }
    sub_213CD2940((uint64_t)&v24);
  }
  if (v11 != 569857) {
    return 569968;
  }
  uint64_t v15 = *(void *)(a2 + 56);
  uint64_t v16 = *(unsigned int *)(v15 + 168);
  if (!v16)
  {
    unsigned int v21 = 0;
    goto LABEL_33;
  }
  while (1)
  {
    --v16;
    uint64_t v17 = *(void *)(v15 + 176);
    if (*(_DWORD *)(v17 + 16 * v16)) {
      break;
    }
LABEL_20:
    if (!v16)
    {
      unsigned int v21 = 0;
      goto LABEL_33;
    }
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  while (1)
  {
    uint64_t v20 = *(void *)(v17 + 16 * v16 + 8);
    if (!der_heim_oid_cmp()) {
      break;
    }
    ++v19;
    uint64_t v17 = *(void *)(v15 + 176);
    v18 += 40;
    if (v19 >= *(unsigned int *)(v17 + 16 * v16)) {
      goto LABEL_20;
    }
  }
  int v22 = *(_DWORD *)(v20 + v18 + 16);
  switch(v22)
  {
    case 1:
      strlen(a5);
      uint64_t result = der_ia5_string_cmp();
      goto LABEL_30;
    case 5:
      uint64_t result = strcasecmp(*(const char **)(v20 + v18 + 24), a5);
LABEL_30:
      unsigned int v21 = 569870;
      if (!result) {
        return result;
      }
      goto LABEL_33;
    case 3:
      strlen(a5);
      uint64_t result = der_printable_string_cmp();
      goto LABEL_30;
  }
  unsigned int v21 = 569870;
LABEL_33:
  if (a3) {
    return v21;
  }
  else {
    return 569870;
  }
}

uint64_t sub_213CC0E4C(uint64_t a1, uint64_t a2)
{
  if (hx509_cert_get_attribute(a2)) {
    return 0;
  }
  CFDataRef v5 = malloc_type_realloc(*(void **)(a2 + 80), 8 * *(void *)(a2 + 72) + 8, 0x2004093837F09uLL);
  if (v5)
  {
    *(void *)(a2 + 80) = v5;
    uint64_t v6 = malloc_type_malloc(0x20uLL, 0x10900401C8C3F62uLL);
    if (v6)
    {
      CFIndex v7 = v6;
      der_copy_octet_string();
      der_copy_oid();
      uint64_t result = 0;
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(*(void *)(a2 + 80) + 8 * vinit_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v7;
      *(void *)(a2 + 72) = v8 + 1;
      return result;
    }
  }
  else
  {
    hx509_clear_error_string(a1);
  }
  return 12;
}

uint64_t hx509_cert_get_attribute(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    return 0;
  }
  uint64_t v2 = 0;
  while (der_heim_oid_cmp())
  {
    if ((unint64_t)++v2 >= *(void *)(a1 + 72)) {
      return 0;
    }
  }
  return *(void *)(*(void *)(a1 + 80) + 8 * v2);
}

uint64_t hx509_cert_set_friendly_name(uint64_t a1, char *__s1)
{
  CFDataRef v4 = *(void **)(a1 + 32);
  if (v4) {
    free(v4);
  }
  CFDataRef v5 = strdup(__s1);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    return 0;
  }
  else {
    return 12;
  }
}

unsigned char *hx509_cert_get_friendly_name(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    uint64_t attribute = hx509_cert_get_attribute(a1);
    if (attribute)
    {
      if (!sub_213CBC1D4(*(void *)(attribute + 24), *(void *)(attribute + 16), (uint64_t)&v13, (uint64_t)&v12))
      {
        if (v13 == 1)
        {
          CFDataRef v5 = malloc_type_malloc(*v14 + 1, 0xFACB37E9uLL);
          *(void *)uint64_t v3 = v5;
          if (v5)
          {
            uint64_t v6 = v14;
            unint64_t v7 = *v14;
            if (*v14)
            {
              unint64_t v7 = 0;
              do
              {
                unsigned int v8 = *(unsigned __int16 *)(v6[1] + 2 * v7);
                if (v8 >= 0x100) {
                  LOBYTE(vinit_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 88;
                }
                *(unsigned char *)(*(void *)v3 + v7++) = v8;
                uint64_t v6 = v14;
              }
              while (v7 < *v14);
              CFDataRef v5 = *(unsigned char **)v3;
            }
            v5[v7] = 0;
            sub_213CBC1F4((uint64_t)&v13);
            return *(unsigned char **)v3;
          }
        }
        sub_213CBC1F4((uint64_t)&v13);
      }
    }
    else
    {
      int v11 = 0;
      int v9 = hx509_name_from_Name(*(void *)(a1 + 56) + 144, &v11);
      uint64_t result = 0;
      if (v9) {
        return result;
      }
      int v10 = hx509_name_to_string(v11, v3);
      hx509_name_free((uint64_t *)&v11);
      if (!v10) {
        return *(unsigned char **)v3;
      }
    }
    return 0;
  }
  return result;
}

uint64_t hx509_cert_get_persistent(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    return der_copy_octet_string();
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 216);
    v6[0] = *(void *)(*(void *)(a1 + 56) + 208) >> 3;
    v6[1] = v4;
    CFDataRef v5 = hx509_signature_sha1();
    uint64_t result = sub_213CC4DCC(0, 0, (uint64_t)v5, (uint64_t)v6, 0, a2);
    if (!result)
    {
      der_free_octet_string();
      der_copy_octet_string();
      return 0;
    }
  }
  return result;
}

double sub_213CC11B0(uint64_t a1)
{
  *(void *)(a1 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t hx509_query_alloc(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 0x88uLL, 0x10B004077450F5CuLL);
  *a2 = v3;
  if (v3) {
    return 0;
  }
  else {
    return 12;
  }
}

_DWORD *hx509_query_match_option(_DWORD *result, int a2)
{
  if ((a2 - 1) <= 3) {
    *result |= dword_213CDAAE0[a2 - 1];
  }
  return result;
}

uint64_t hx509_query_match_issuer_serial(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    der_free_heim_integer();
    free(*(void **)(a1 + 24));
  }
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x10800409070E284uLL);
  *(void *)(a1 + 24) = v2;
  if (!v2) {
    return 12;
  }
  uint64_t v3 = der_copy_heim_integer();
  if (v3)
  {
    uint64_t v4 = v3;
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    return v4;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    sub_213CD24C8(v5);
    free(*(void **)(a1 + 48));
  }
  uint64_t v6 = malloc_type_malloc(0x28uLL, 0x10A0040F20C3E80uLL);
  *(void *)(a1 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v6;
  if (!v6) {
    return 12;
  }
  uint64_t v4 = hx509_name_to_Name_0();
  if (v4)
  {
    free(*(void **)(a1 + 48));
    *(void *)(a1 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  }
  else
  {
    *(_DWORD *)a1 |= 6u;
  }
  return v4;
}

uint64_t hx509_query_match_friendly_name(uint64_t a1, char *__s1)
{
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4) {
    free(v4);
  }
  uint64_t v5 = strdup(__s1);
  *(void *)(a1 + 72) = v5;
  if (!v5) {
    return 12;
  }
  uint64_t result = 0;
  *(_DWORD *)a1 |= 0x40000u;
  return result;
}

uint64_t hx509_query_match_eku(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 112);
  if (!a2)
  {
    if (v3)
    {
      der_free_oid();
      free(*(void **)(a1 + 112));
      *(void *)(a1 + 112) = 0;
    }
    unsigned int v4 = *(_DWORD *)a1 & 0xFFBFFFFF;
    goto LABEL_11;
  }
  if (v3)
  {
    der_free_oid();
  }
  else
  {
    uint64_t v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040466105CCuLL);
    *(void *)(a1 + 112) = v5;
    if (!v5) {
      return 12;
    }
  }
  uint64_t v6 = der_copy_oid();
  if (!v6)
  {
    unsigned int v4 = *(_DWORD *)a1 | 0x400000;
LABEL_11:
    uint64_t v7 = 0;
    *(_DWORD *)a1 = v4;
    return v7;
  }
  uint64_t v7 = v6;
  free(*(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  return v7;
}

uint64_t hx509_query_match_cmp_func(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFF7FFFF | ((a2 != 0) << 19);
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 8init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a3;
  return 0;
}

uint64_t hx509_query_match_persistent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFEFFFFFF | ((a2 != 0) << 24);
  *(void *)(a1 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a2;
  return 0;
}

void hx509_query_free(int a1, void **a2)
{
  if (a2)
  {
    if (a2[3])
    {
      der_free_heim_integer();
      free(a2[3]);
    }
    uint64_t v3 = (uint64_t)a2[6];
    if (v3)
    {
      sub_213CD24C8(v3);
      free(a2[6]);
    }
    if (a2[14])
    {
      der_free_oid();
      free(a2[14]);
    }
    unsigned int v4 = a2[9];
    if (v4) {
      free(v4);
    }
    a2[16] = 0;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 7) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    free(a2);
  }
}

const char *sub_213CC152C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 56);
  unsigned int v7 = *a2;
  if (*a2)
  {
    int v8 = sub_213CBF090(*((void *)a2 + 1), *(void *)(a3 + 56), 0);
    uint64_t result = 0;
    if (v8) {
      return result;
    }
    unsigned int v7 = *a2;
  }
  if ((v7 & 0x8000) != 0)
  {
    if (sub_213CBF758(*((void *)a2 + 2), v6)) {
      return 0;
    }
    unsigned int v7 = *a2;
  }
  if ((v7 & 2) != 0)
  {
    if (der_heim_integer_cmp()) {
      return 0;
    }
    unsigned int v7 = *a2;
  }
  int v24 = 0;
  if ((v7 & 4) != 0)
  {
    int v10 = sub_213CCD06C(v6 + 72, *((void *)a2 + 6), &v24);
    if (v10 | v24) {
      return 0;
    }
    unsigned int v7 = *a2;
  }
  if ((v7 & 8) != 0)
  {
    int v11 = sub_213CCD06C(v6 + 144, *((void *)a2 + 7), &v24);
    if (v11 | v24) {
      return 0;
    }
    unsigned int v7 = *a2;
  }
  if ((v7 & 0x10) != 0)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if (sub_213CBEB98(v6, &v22)) {
      return 0;
    }
    int v15 = der_heim_octet_string_cmp();
    sub_213CD2AD8((uint64_t)&v22);
    if (v15) {
      return 0;
    }
    unsigned int v7 = *a2;
    if ((*a2 & 0x20) != 0) {
      return 0;
    }
  }
  else if ((v7 & 0x20) != 0)
  {
    return 0;
  }
  if ((v7 & 0x40) != 0 && !*(void *)(a3 + 64)) {
    return 0;
  }
  int v12 = (v7 >> 10) & 2 | (v7 >> 8) & 1 | (v7 >> 5) & 4 | (v7 >> 10) & 8 | (v7 >> 8) & 0x10 | (v7 >> 4) & 0x60;
  if (v12)
  {
    if (sub_213CBEF18(a1, v6, v12, 1)) {
      return 0;
    }
    unsigned int v7 = *a2;
  }
  if ((v7 & 0x4000) != 0) {
    return 0;
  }
  if ((v7 & 0x10000) != 0)
  {
    uint64_t result = (const char *)hx509_cert_get_attribute(a3);
    if (!result) {
      return result;
    }
    if (der_heim_octet_string_cmp()) {
      return 0;
    }
    unsigned int v7 = *a2;
    if ((*a2 & 0x20000) == 0)
    {
LABEL_38:
      if ((v7 & 0x40000) != 0)
      {
        uint64_t result = hx509_cert_get_friendly_name(a3);
        if (!result) {
          return result;
        }
        if (strcasecmp(*((const char **)a2 + 9), result)) {
          return 0;
        }
        unsigned int v7 = *a2;
        if ((*a2 & 0x80000) != 0) {
          goto LABEL_40;
        }
      }
      else if ((v7 & 0x80000) != 0)
      {
LABEL_40:
        if ((*((unsigned int (**)(uint64_t, uint64_t, void))a2 + 10))(a1, a3, *((void *)a2 + 11))) {
          return 0;
        }
        unsigned int v7 = *a2;
      }
      if ((v7 & 0x100000) != 0)
      {
        uint64_t v16 = *(void *)(v6 + 216);
        uint64_t v22 = *(void *)(v6 + 208) >> 3;
        uint64_t v23 = v16;
        uint64_t v17 = hx509_signature_sha1();
        if (hx509_verify_signature_0(a1, 0, (uint64_t)v17, (uint64_t)&v22, *((void *)a2 + 12))) {
          return 0;
        }
        unsigned int v7 = *a2;
      }
      if ((v7 & 0x200000) != 0)
      {
        uint64_t v18 = (*(_DWORD *)(v6 + 112) - 1) > 1 ? 0 : *(void *)(v6 + 120);
        uint64_t v19 = *((void *)a2 + 13);
        if (v18 > v19) {
          return 0;
        }
        uint64_t v20 = (*(_DWORD *)(v6 + 128) - 1) > 1 ? 0 : *(void *)(v6 + 136);
        if (v20 < v19) {
          return 0;
        }
      }
      if ((v7 & 0x400000) != 0)
      {
        if (hx509_cert_check_eku(a1, a3)) {
          return 0;
        }
        unsigned int v7 = *a2;
      }
      if ((v7 & 0x800000) == 0)
      {
        if ((v7 & 0x1000000) == 0) {
          return (const char *)(v7 >> 25 == 0);
        }
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        if (!hx509_cert_get_persistent(a3, (uint64_t)&v22))
        {
          int v21 = der_heim_octet_string_cmp();
          der_free_octet_string();
          if (!v21)
          {
            unsigned int v7 = *a2;
            return (const char *)(v7 >> 25 == 0);
          }
        }
      }
      return 0;
    }
  }
  else if ((v7 & 0x20000) == 0)
  {
    goto LABEL_38;
  }
  uint64_t v13 = (unint64_t *)*((void *)a2 + 8);
  if (!*v13) {
    goto LABEL_38;
  }
  unint64_t v14 = 0;
  while (1)
  {
    uint64_t result = (const char *)sub_213CBF758(*(void *)(*(void *)(v13[1] + 8 * v14) + 56), *(void *)(a3 + 56));
    if (!result) {
      return result;
    }
    ++v14;
    uint64_t v13 = (unint64_t *)*((void *)a2 + 8);
    if (v14 >= *v13)
    {
      unsigned int v7 = *a2;
      goto LABEL_38;
    }
  }
}

uint64_t hx509_cert_check_eku(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v3 = sub_213CC192C(*(void *)(a2 + 56), v8);
  if (v3)
  {
    uint64_t v4 = v3;
    hx509_clear_error_string(a1);
  }
  else if (LODWORD(v8[0]))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (der_heim_oid_cmp())
    {
      ++v6;
      v5 += 16;
      if (v6 >= LODWORD(v8[0])) {
        goto LABEL_7;
      }
    }
    sub_213CD2BF0((uint64_t)v8);
    return 0;
  }
  else
  {
LABEL_7:
    sub_213CD2BF0((uint64_t)v8);
    hx509_clear_error_string(a1);
    return 569881;
  }
  return v4;
}

uint64_t sub_213CC192C(uint64_t a1, void *a2)
{
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = sub_213CBEBFC(a1, (uint64_t)&unk_2641EA6E8, &v5);
  if (v3) {
    return sub_213CD2BA0(*(void *)(v3 + 32), *(void *)(v3 + 24), (uint64_t)a2, (uint64_t)&v6);
  }
  else {
    return 569857;
  }
}

uint64_t sub_213CC1990(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v8 = 0;
  *a3 = 0;
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v4 = *(_DWORD **)(v3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v9 = 0;
  if (*v4 + 1 < 3) {
    return 0;
  }
  uint64_t v7 = sub_213CBEBFC(v3, (uint64_t)&unk_2641EA3F8, &v8);
  if (v7) {
    return sub_213CD29D0(*(void *)(v7 + 32), *(void *)(v7 + 24), (uint64_t)a3, (uint64_t)&v9);
  }
  else {
    return 569872;
  }
}

uint64_t sub_213CC1A1C(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v4 = sub_213CC192C(*(void *)(a2 + 56), a3);
  if (v4) {
    BOOL v5 = v4 == 569857;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  uint64_t v6 = v4;
  hx509_clear_error_string(a1);
  return v6;
}

uint64_t hx509_cert_binary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  size_t v5 = sub_213CD2748(*(void *)(a2 + 56));
  *(void *)a3 = v5;
  uint64_t v6 = malloc_type_malloc(v5, 0xEE4CC4E8uLL);
  *(void *)(a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v6;
  if (!v6)
  {
    uint64_t v15 = 12;
    goto LABEL_5;
  }
  uint64_t v7 = sub_213CD2728((uint64_t)v6 + *(void *)a3 - 1, *(void *)a3, *(void *)(a2 + 56), (uint64_t)&v18);
  if (v7)
  {
    uint64_t v15 = v7;
    free(*(void **)(a3 + 8));
LABEL_5:
    *(void *)a3 = 0;
    *(void *)(a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
    return v15;
  }
  if (*(void *)a3 != v18) {
    sub_213CC1B28("internal ASN.1 encoder error", v8, v9, v10, v11, v12, v13, v14, v17);
  }
  return 0;
}

void sub_213CC1B28(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t hx509_print_cert(uint64_t a1, uint64_t a2, FILE *a3)
{
  uint64_t v11 = 0;
  uint64_t v10 = 0;
  if (a3) {
    size_t v5 = a3;
  }
  else {
    size_t v5 = (FILE *)*MEMORY[0x263EF8348];
  }
  uint64_t result = hx509_name_from_Name(*(void *)(a2 + 56) + 72, &v11);
  if (!result)
  {
    hx509_name_to_string(v11, &v10);
    hx509_name_free((uint64_t *)&v11);
    fprintf(v5, "    issuer:  \"%s\"\n", (const char *)v10);
    free(v10);
    uint64_t result = hx509_name_from_Name(*(void *)(a2 + 56) + 144, &v11);
    if (!result)
    {
      hx509_name_to_string(v11, &v10);
      hx509_name_free((uint64_t *)&v11);
      fprintf(v5, "    subject: \"%s\"\n", (const char *)v10);
      free(v10);
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t result = der_copy_heim_integer();
      if (!result)
      {
        uint64_t result = der_print_hex_heim_integer();
        if (!result)
        {
          der_free_heim_integer();
          fprintf(v5, "    serial: %s\n", (const char *)v10);
          free(v10);
          fwrite("    keyusage: ", 0xEuLL, 1uLL, v5);
          if (hx509_cert_keyusage_print(a1, a2, (char **)&v10))
          {
            fwrite("no\n", 3uLL, 1uLL, v5);
          }
          else
          {
            fprintf(v5, "%s\n", (const char *)v10);
            free(v10);
          }
          uint64_t v7 = 0;
          uint64_t v8 = 0;
          fwrite("    persistent: ", 0x10uLL, 1uLL, v5);
          if (hx509_cert_get_persistent(a2, (uint64_t)&v7))
          {
            fwrite("no\n", 3uLL, 1uLL, v5);
          }
          else
          {
            if ((int)rk_hex_encode(v8, v7, &v10) < 1)
            {
              fwrite("out of memory\n", 0xEuLL, 1uLL, v5);
            }
            else
            {
              fprintf(v5, "%s\n", (const char *)v10);
              free(v10);
            }
            der_free_octet_string();
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t hx509_cert_get_appleid(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v12[0] = xmmword_213CDAAB4;
  v12[1] = unk_213CDAAC4;
  uint64_t v10 = 8;
  uint64_t v11 = v12;
  int v9 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  *a3 = 0;
  uint64_t v5 = hx509_cert_check_eku(a1, a2);
  if (!v5)
  {
    uint64_t v5 = hx509_name_from_Name(*(void *)(a2 + 56) + 144, &v8);
    if (!v5)
    {
      uint64_t v5 = sub_213CCD1C0((uint64_t)v8, 3u, (uint64_t)&unk_2641E9858, &v9, &v7);
      hx509_name_free((uint64_t *)&v8);
      if (!v5)
      {
        asprintf(a3, "%s@me.com", (const char *)v7);
        free(v7);
        if (*a3) {
          return 0;
        }
        else {
          return 12;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_213CC1E9C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v13 = 0;
  uint64_t v5 = sub_213CCD06C(a2 + 144, a2 + 72, &v13);
  *a3 = v13 == 0;
  if (!v5) {
    return sub_213CC4BC0(a1);
  }
  uint64_t v10 = v5;
  hx509_set_error_string(a1, 0, v5, "Failed to check if self signed", v6, v7, v8, v9, v12);
  return v10;
}

uint64_t sub_213CC1F30(unsigned int *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v20 = 0;
  if (!*a1) {
    return 0;
  }
  unint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = (long long *)(a2 + 168);
  do
  {
    uint64_t v8 = *((void *)a1 + 1);
    if (*(void *)(v8 + 56 * v5 + 40) && *(void *)(v8 + 56 * v5 + 48)) {
      return 569869;
    }
    uint64_t v9 = (_DWORD *)(v8 + 56 * v5);
    if (*v9 == 4 && *(_DWORD *)v7)
    {
      uint64_t v19 = 0;
      long long v17 = 0u;
      long long v18 = 0u;
      int v10 = *(_DWORD *)(a2 + 160);
      LODWORD(v17) = 4;
      DWORD2(v17) = v10;
      long long v18 = *v7;
      sub_213CC20E0((uint64_t)v9, (uint64_t)&v17, (_DWORD *)&v20 + 1);
      uint64_t v8 = *((void *)a1 + 1);
    }
    uint64_t v11 = (_DWORD *)(v8 + 56 * v5);
    long long v17 = 0uLL;
    unint64_t v21 = 0;
    while (1)
    {
      LODWORD(result) = sub_213CBEEAC(a2, &v21, &v17);
      if (result) {
        break;
      }
      unint64_t v13 = v17;
      if (v17)
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        do
        {
          if (*v11 == *(_DWORD *)(*((void *)&v17 + 1) + v14))
          {
            sub_213CC20E0((uint64_t)v11, *((void *)&v17 + 1) + v14, &v20);
            unint64_t v13 = v17;
            int v6 = 1;
          }
          ++v15;
          v14 += 40;
        }
        while (v15 < v13);
      }
      sub_213CD2940((uint64_t)&v17);
    }
    if (result == 569857) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    ++v5;
  }
  while (v5 < *a1);
  if (HIDWORD(v20) && (!v6 || v20)) {
    *a3 = 1;
  }
  return result;
}

uint64_t sub_213CC20E0(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)result != *(_DWORD *)a2) {
    sub_213CD877C();
  }
  switch(*(_DWORD *)result)
  {
    case 1:
      uint64_t result = der_heim_oid_cmp();
      if (!result)
      {
        uint64_t result = der_heim_octet_string_cmp();
        if (!result) {
          goto LABEL_19;
        }
      }
      return result;
    case 2:
      size_t v5 = *(void *)(result + 8);
      int v6 = *(void **)(result + 16);
      if (memchr(v6, 64, v5))
      {
        uint64_t result = der_printable_string_cmp();
        if (!result) {
          goto LABEL_19;
        }
      }
      else
      {
        size_t v27 = *(void *)(a2 + 8);
        OSStatus v26 = *(char **)(a2 + 16);
        uint64_t result = (uint64_t)memchr(v26, 64, v27);
        if (result)
        {
          uint64_t v28 = result;
          uint64_t v29 = &v26[v27 - result];
          if ((unint64_t)v29 >= v5)
          {
            uint64_t result = memcmp(&v29[result - v5 + 1], v6, v5);
            if (!result)
            {
              if ((unint64_t)v29 <= v5) {
                goto LABEL_19;
              }
              int v11 = v29[v28 - v5 + 1];
              goto LABEL_13;
            }
          }
        }
      }
      return result;
    case 3:
      unint64_t v7 = *(void *)(result + 8);
      unint64_t v8 = *(void *)(a2 + 8);
      unint64_t v9 = v8 - v7;
      if (v8 >= v7)
      {
        uint64_t v10 = *(void *)(a2 + 16);
        uint64_t result = memcmp((const void *)(v10 + v9), *(const void **)(result + 16), *(void *)(result + 8));
        if (!result)
        {
          if (v8 == v7) {
            goto LABEL_19;
          }
          int v11 = *(unsigned __int8 *)(v9 + v10 - 1);
LABEL_13:
          if (v11 == 46) {
            goto LABEL_19;
          }
        }
      }
      return result;
    case 4:
      if (*(_DWORD *)(result + 8) != 1 || *(_DWORD *)(a2 + 8) != 1) {
        goto LABEL_19;
      }
      uint64_t v13 = *(unsigned int *)(result + 16);
      if (v13 <= *(_DWORD *)(a2 + 16))
      {
        if (!v13)
        {
LABEL_19:
          *a3 = 1;
          return result;
        }
        uint64_t v14 = 0;
        uint64_t v15 = *(void *)(result + 24);
        uint64_t v16 = *(void *)(a2 + 24);
        while (1)
        {
          long long v17 = (_DWORD *)(v16 + 16 * v14);
          int v18 = *(_DWORD *)(v15 + 16 * v14);
          if (v18 != *v17) {
            break;
          }
          if (v18)
          {
            unint64_t v19 = 0;
            uint64_t v20 = 16;
            do
            {
              int v30 = 0;
              uint64_t result = der_heim_oid_cmp();
              if (result) {
                return result;
              }
              uint64_t result = sub_213CCCC94(*(void *)(v15 + 16 * v14 + 8) + v20, *(void *)(v16 + 16 * v14 + 8) + v20, &v30, v21, v22, v23, v24, v25);
              if (result || v30) {
                return result;
              }
              ++v19;
              v20 += 40;
            }
            while (v19 < *v17);
          }
          if (++v14 == v13) {
            goto LABEL_19;
          }
        }
      }
      return result;
    default:
      return result;
  }
}

uint64_t hx509_cms_wrap_ContentInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = 0;
  v19[0] = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  v19[1] = 0;
  uint64_t v20 = 0;
  uint64_t v5 = der_copy_oid();
  if (v5) {
    return v5;
  }
  if (a2)
  {
    uint64_t v20 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    if (!v20) {
      goto LABEL_9;
    }
    int v6 = malloc_type_malloc(*(void *)a2, 0xCF26A46EuLL);
    v20[1] = v6;
    if (!v6) {
      goto LABEL_9;
    }
    memcpy(v6, *(const void **)(a2 + 8), *(void *)a2);
    *uint64_t v20 = *(void *)a2;
  }
  size_t v7 = length_ContentInfo((uint64_t)v19);
  *(void *)a3 = v7;
  unint64_t v8 = malloc_type_malloc(v7, 0xBFBFC088uLL);
  *(void *)(a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v8;
  if (!v8)
  {
LABEL_9:
    uint64_t v5 = 12;
    goto LABEL_10;
  }
  uint64_t v9 = encode_ContentInfo((uint64_t)v8 + *(void *)a3 - 1, *(void *)a3, (uint64_t)v19, (uint64_t)&v18);
  if (v9)
  {
    uint64_t v5 = v9;
    free(*(void **)(a3 + 8));
    *(void *)(a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
LABEL_10:
    free_ContentInfo((uint64_t)v19);
    return v5;
  }
  free_ContentInfo((uint64_t)v19);
  if (*(void *)a3 != v18) {
    sub_213CC1B28("internal ASN.1 encoder error", v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return 0;
}

uint64_t hx509_cms_unwrap_ContentInfo(uint64_t *a1, void *a2, void *a3, _DWORD *a4)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  *a2 = 0;
  a2[1] = 0;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v6 = sub_213CD1FD8(a1[1], *a1, (uint64_t)v10, (uint64_t)&v9);
  if (!v6)
  {
    uint64_t v6 = der_copy_oid();
    if (v6)
    {
LABEL_3:
      free_ContentInfo((uint64_t)v10);
      return v6;
    }
    if (v11)
    {
      uint64_t v8 = der_copy_octet_string();
      if (v8)
      {
        uint64_t v6 = v8;
        der_free_oid();
        goto LABEL_3;
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    uint64_t v6 = 0;
    if (a4) {
      *a4 = v11 != 0;
    }
    goto LABEL_3;
  }
  return v6;
}

uint64_t hx509_cms_unenvelope(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, time_t a7, void *a8, size_t *a9)
{
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v48 = 0;
  v49[0] = 0;
  size_t v59 = 0;
  uint64_t v60 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v58 = 0;
  v49[1] = 0;
  *a9 = 0;
  a9[1] = 0;
  if (a3) {
    int v14 = 64;
  }
  else {
    int v14 = 192;
  }
  *a8 = 0;
  a8[1] = 0;
  uint64_t v15 = sub_213CD2190(a4, a5, (uint64_t)&v53, (uint64_t)&v48);
  if (v15)
  {
    uint64_t v20 = v15;
    hx509_set_error_string(a1, 0, v15, "Failed to decode EnvelopedData", v16, v17, v18, v19, v45);
    return v20;
  }
  if (v54)
  {
    if (*((void *)&v57 + 1))
    {
      if (a6)
      {
        uint64_t v20 = 569891;
        uint64_t v21 = "Both internal and external encrypted data";
LABEL_13:
        uint64_t v22 = a1;
        int v23 = v20;
        goto LABEL_14;
      }
      a6 = *((void *)&v57 + 1);
    }
    else if (!a6)
    {
      uint64_t v20 = 569891;
      uint64_t v21 = "Content missing from encrypted data";
      goto LABEL_13;
    }
    uint64_t v46 = a6;
    unint64_t v25 = 0;
    int v26 = 0;
    uint64_t v52 = 0;
    uint64_t v27 = 104;
    do
    {
      uint64_t v47 = 0;
      uint64_t v28 = (unsigned int *)(*((void *)&v54 + 1) + v27);
      uint64_t v29 = (int *)(*((void *)&v54 + 1) + v27 - 96);
      if (!sub_213CC2924(a1, v29, a2, a7, &v52, v14))
      {
        uint64_t v34 = v52;
        int v35 = sub_213CBFAD4(a1, v28, (uint64_t)(v28 - 6), v52, &v59, v31, v32, v33);
        hx509_cert_free(v34);
        if (!v35) {
          goto LABEL_29;
        }
        uint64_t v52 = 0;
        int v26 = 1;
        if (!sub_213CC2AAC(v29, &v47))
        {
          hx509_set_error_string(a1, 1, v35, "Failed to decrypt with %s", v30, v31, v32, v33, (char)v47);
          free(v47);
        }
      }
      ++v25;
      v27 += 120;
    }
    while (v25 < v54);
    if (v26)
    {
      uint64_t v34 = v52;
LABEL_29:
      if (v34)
      {
        uint64_t v36 = der_copy_oid();
        if (v36)
        {
          uint64_t v20 = v36;
          hx509_set_error_string(a1, 0, v36, "Failed to copy EnvelopedData content oid", v37, v38, v39, v40, v45);
          goto LABEL_15;
        }
        if ((void)v57)
        {
          uint64_t v51 = *(void *)(v57 + 8);
          uint64_t v50 = *(void *)v57;
          uint64_t v42 = &v50;
        }
        else
        {
          uint64_t v42 = 0;
        }
        uint64_t v47 = 0;
        uint64_t v20 = hx509_crypto_init(a1, 0, (uint64_t)&v56, (void **)&v47);
        if (v20) {
          goto LABEL_15;
        }
        if ((a3 & 2) != 0) {
          sub_213CC5A58((uint64_t)v47);
        }
        if (v42)
        {
          uint64_t v43 = hx509_crypto_set_params(a1, (uint64_t)v47, (uint64_t)v42);
          if (v43)
          {
            uint64_t v20 = v43;
            hx509_crypto_destroy(v47);
            goto LABEL_15;
          }
        }
        uint64_t v20 = hx509_crypto_set_key_data((uint64_t *)v47, v60, v59);
        if (v20)
        {
          hx509_crypto_destroy(v47);
          uint64_t v21 = "Failed to set key for decryption of EnvelopedData";
        }
        else
        {
          if (v49[0]) {
            uint64_t v44 = v49;
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v20 = hx509_crypto_decrypt((uint64_t)v47, *(void *)(v46 + 8), *(void *)v46, v44, a9);
          hx509_crypto_destroy(v47);
          if (!v20) {
            goto LABEL_15;
          }
          uint64_t v21 = "Failed to decrypt EnvelopedData";
        }
        goto LABEL_13;
      }
      uint64_t v20 = 569894;
      uint64_t v41 = "No private key decrypted the transfer key";
    }
    else
    {
      uint64_t v20 = 569894;
      uint64_t v41 = "No matching certificate found in the enveloped data";
    }
    hx509_set_error_string(a1, 1, 569894, v41, v30, v31, v32, v33, v45);
    goto LABEL_15;
  }
  uint64_t v20 = 569894;
  uint64_t v21 = "No recipient info in enveloped data";
  uint64_t v22 = a1;
  int v23 = 569894;
LABEL_14:
  hx509_set_error_string(v22, 0, v23, v21, v16, v17, v18, v19, v45);
LABEL_15:
  sub_213CD21E0((uint64_t)&v53);
  der_free_octet_string();
  if (v49[0]) {
    der_free_octet_string();
  }
  if (v20)
  {
    der_free_oid();
    der_free_octet_string();
  }
  return v20;
}

uint64_t sub_213CC2924(uint64_t a1, int *a2, uint64_t a3, time_t a4, void *a5, int a6)
{
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v26 = 0;
  sub_213CC11B0((uint64_t)&v27);
  *a5 = 0;
  int v16 = *a2;
  if (!*a2)
  {
    uint64_t v18 = 569894;
    uint64_t v19 = "unknown CMS identifier element";
LABEL_17:
    uint64_t v21 = a1;
    char v22 = 0;
    goto LABEL_18;
  }
  if (v16 == 1)
  {
    *((void *)&v28 + 1) = a2 + 12;
    *(void *)&long long v30 = a2 + 2;
    int v17 = 6;
  }
  else if (v16 == 2)
  {
    *(void *)&long long v29 = a2 + 2;
    int v17 = 16;
  }
  else
  {
    int v17 = v27;
  }
  LODWORD(v27) = v17 | a6 | 0x200000;
  if (!a4) {
    a4 = time(0);
  }
  *((void *)&v33 + 1) = a4;
  int v20 = hx509_certs_find(a1, a3, (int *)&v27, &v26, v12, v13, v14, v15);
  if (!v20)
  {
    uint64_t v18 = 0;
    *a5 = v26;
    return v18;
  }
  uint64_t v18 = 569894;
  if (v20 != 569873)
  {
    uint64_t v19 = "Failed to find CMS id in cert store";
    uint64_t v21 = a1;
    char v22 = 1;
LABEL_18:
    hx509_set_error_string(v21, v22, 569894, v19, v12, v13, v14, v15, v24);
    return v18;
  }
  unint64_t v25 = 0;
  if (!sub_213CC2AAC(a2, &v25))
  {
    char v24 = (char)v25;
    uint64_t v19 = "Failed to find %s";
    goto LABEL_17;
  }
  hx509_clear_error_string(a1);
  return v18;
}

uint64_t sub_213CC2AAC(int *a1, char **a2)
{
  *a2 = 0;
  int v3 = *a1;
  if (*a1)
  {
    if (v3 == 2)
    {
      size_t v7 = 0;
      if (rk_hex_encode(*((char **)a1 + 2), *((void *)a1 + 1), &v7) < 0) {
        return 12;
      }
      asprintf(a2, "certificate with id %s", (const char *)v7);
    }
    else
    {
      if (v3 != 1) {
        goto LABEL_11;
      }
      uint64_t v6 = 0;
      size_t v7 = 0;
      uint64_t v4 = sub_213CCC758((uint64_t)(a1 + 2), &v6);
      if (v4) {
        return v4;
      }
      uint64_t v4 = der_print_hex_heim_integer();
      if (v4)
      {
        free(v6);
        return v4;
      }
      asprintf(a2, "certificate issued by %s with serial number %s", (const char *)v6, (const char *)v7);
      free(v6);
    }
    free(v7);
  }
  else
  {
    asprintf(a2, "certificate have unknown CMSidentifier type");
  }
LABEL_11:
  if (*a2) {
    return 0;
  }
  else {
    return 12;
  }
}

uint64_t hx509_cms_envelope_1(uint64_t a1, unsigned int a2, uint64_t a3, const void *a4, size_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  long long v53 = 0;
  v54[0] = 0;
  uint64_t v46 = 0;
  v55[0] = 0;
  v55[1] = 0;
  v54[1] = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v52 = 0;
  if (a6) {
    uint64_t v14 = a6;
  }
  else {
    uint64_t v14 = &unk_2641E97D8;
  }
  *(void *)a8 = 0;
  *(void *)(a8 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  if ((a2 & 1) == 0)
  {
    uint64_t params = sub_213CBEF10(a1, a3, 4, 1);
    if (params) {
      goto LABEL_20;
    }
  }
  uint64_t params = hx509_crypto_init(a1, 0, (uint64_t)v14, &v53);
  if (params) {
    goto LABEL_20;
  }
  if ((a2 & 2) != 0) {
    sub_213CC5A58((uint64_t)v53);
  }
  uint64_t v16 = hx509_crypto_set_random_key((uint64_t)v53, (uint64_t)v54);
  if (v16)
  {
    uint64_t params = v16;
    uint64_t v21 = "Create random key for EnvelopedData content";
LABEL_17:
    uint64_t v25 = a1;
    char v26 = 0;
LABEL_18:
    int v27 = params;
LABEL_19:
    hx509_set_error_string(v25, v26, v27, v21, v17, v18, v19, v20, v45);
    goto LABEL_20;
  }
  uint64_t v22 = sub_213CC5BF0((uint64_t)v53, (uint64_t)v55);
  if (v22)
  {
    uint64_t params = v22;
    uint64_t v21 = "Failed to create a random iv";
    goto LABEL_17;
  }
  uint64_t v23 = hx509_crypto_encrypt((uint64_t)v53, a4, a5, (uint64_t)v55, (void ***)&v51 + 1);
  if (v23)
  {
    uint64_t params = v23;
    uint64_t v21 = "Failed to encrypt EnvelopedData content";
    goto LABEL_17;
  }
  uint64_t v24 = der_copy_oid();
  if (v24)
  {
    uint64_t params = v24;
    uint64_t v21 = "Failed to set crypto oid for EnvelopedData";
    goto LABEL_17;
  }
  *(void *)&long long v51 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
  if (!(void)v51)
  {
    uint64_t v21 = "Failed to allocate crypto paramaters for EnvelopedData";
LABEL_31:
    uint64_t params = 12;
    uint64_t v25 = a1;
    char v26 = 0;
    int v27 = 12;
    goto LABEL_19;
  }
  uint64_t params = hx509_crypto_get_params(a1, (uint64_t)v53);
  if (params) {
    goto LABEL_20;
  }
  LODWORD(v4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 1;
  long long v29 = malloc_type_calloc(1uLL, 0x78uLL, 0x10B00405CFCCFD2uLL);
  *((void *)&v48 + 1) = v29;
  if (!v29)
  {
    uint64_t v21 = "Failed to allocate recipients info for EnvelopedData";
    goto LABEL_31;
  }
  long long v31 = v29;
  _DWORD *v29 = ((a2 & 4) >> 1) ^ 2;
  uint64_t v32 = sub_213CC2F1C(a3, (a2 >> 2) & 1, (uint64_t)(v29 + 2), v30, v17, v18, v19, v20);
  if (v32)
  {
    uint64_t params = v32;
    uint64_t v21 = "Failed to set CMS identifier info for EnvelopedData";
    goto LABEL_17;
  }
  uint64_t v33 = sub_213CBFB2C(a1, (unsigned int *)v54, a3, (uint64_t)(v31 + 20), (void *)v31 + 13);
  if (v33)
  {
    uint64_t params = v33;
    uint64_t v21 = "Failed to encrypt transport key for EnvelopedData";
    uint64_t v25 = a1;
    char v26 = 1;
    goto LABEL_18;
  }
  LODWORD(v47) = 0;
  *((void *)&v47 + 1) = 0;
  uint64_t v34 = der_copy_oid();
  if (v34)
  {
    uint64_t params = v34;
    uint64_t v21 = "Failed to copy content oid for EnvelopedData";
    goto LABEL_17;
  }
  uint64_t v52 = 0;
  size_t v35 = sub_213CD21D0((uint64_t)&v47);
  *(void *)a8 = v35;
  uint64_t v36 = malloc_type_malloc(v35, 0xC9B3D09FuLL);
  *(void *)(a8 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v36;
  if (!v36)
  {
    uint64_t params = 12;
    goto LABEL_41;
  }
  uint64_t v37 = sub_213CD21B0((uint64_t)v36 + *(void *)a8 - 1, *(void *)a8, (uint64_t)&v47, (uint64_t)&v46);
  if (v37)
  {
    uint64_t params = v37;
    free(*(void **)(a8 + 8));
    *(void *)(a8 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
LABEL_41:
    uint64_t v21 = "Failed to encode EnvelopedData";
    goto LABEL_17;
  }
  if (v46 != *(void *)a8) {
    sub_213CC1B28("internal ASN.1 encoder error", v38, v39, v40, v41, v42, v43, v44, v45);
  }
  uint64_t params = 0;
LABEL_20:
  if (v53) {
    hx509_crypto_destroy(v53);
  }
  if (params) {
    der_free_octet_string();
  }
  der_free_octet_string();
  der_free_octet_string();
  sub_213CD21E0((uint64_t)&v47);
  return params;
}

uint64_t sub_213CC2F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1) {
    goto LABEL_4;
  }
  if (a2) {
    sub_213CC1B28("CMS fill identifier with unknown type", a2, a3, a4, a5, a6, a7, a8, v13);
  }
  *(_DWORD *)a3 = 2;
  uint64_t v10 = sub_213CBE6DC(a1);
  if (!sub_213CBEB98(v10, (void *)(a3 + 8))) {
    return 0;
  }
LABEL_4:
  uint64_t v14 = 0;
  *(_DWORD *)a3 = 1;
  uint64_t issuer = hx509_cert_get_issuer(a1, &v14);
  if (!issuer)
  {
    uint64_t issuer = hx509_name_to_Name();
    hx509_name_free((uint64_t *)&v14);
    if (!issuer) {
      return hx509_cert_get_serialnumber();
    }
  }
  return issuer;
}

uint64_t hx509_cms_verify_signed(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, __CFArray **a10)
{
  uint64_t v97 = 0;
  v98[0] = 0;
  uint64_t v92 = 0;
  *a10 = 0;
  *a9 = 0;
  a9[1] = 0;
  *a8 = 0;
  a8[1] = 0;
  memset(v93, 0, sizeof(v93));
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  uint64_t v15 = sub_213CD2100(a4, a5, (uint64_t)v93, (uint64_t)&v92);
  if (v15)
  {
    uint64_t appended = v15;
    uint64_t v21 = "Failed to decode SignedData";
    goto LABEL_3;
  }
  if (!(a6 | *((void *)&v94 + 1)))
  {
    uint64_t appended = 569891;
    uint64_t v21 = "No content data in SignedData";
LABEL_9:
    uint64_t v22 = a1;
    int v23 = 569891;
    goto LABEL_10;
  }
  if (a6 && *((void *)&v94 + 1))
  {
    uint64_t appended = 569891;
    uint64_t v21 = "Both external and internal SignedData";
    goto LABEL_9;
  }
  uint64_t appended = der_copy_octet_string();
  if (appended)
  {
    uint64_t v21 = "malloc: out of memory";
    goto LABEL_3;
  }
  uint64_t appended = hx509_certs_init(a1, "MEMORY:cms-cert-buffer", 0, 0, &v97);
  if (!appended)
  {
    CFMutableArrayRef v25 = heim_array_create();
    *a10 = v25;
    if (!v25)
    {
      uint64_t appended = 12;
      goto LABEL_11;
    }
    uint64_t appended = sub_213CC3740(a1, (uint64_t)v93, v97);
    if (!appended)
    {
      if (!a7 || (uint64_t appended = hx509_certs_merge(a1, v97, a7, v26, v16, v17, v18, v19), !appended))
      {
        if (!v96)
        {
          if ((a3 & 4) == 0) {
            goto LABEL_106;
          }
          goto LABEL_107;
        }
        uint64_t v27 = 0;
        int v81 = 0;
        while (1)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          v89[0] = 0;
          v89[1] = 0;
          uint64_t v88 = 0;
          uint64_t v28 = *((void *)&v96 + 1) + 160 * v27;
          uint64_t v30 = *(void *)(v28 + 136);
          uint64_t v29 = v28 + 136;
          if (v30)
          {
            uint64_t v84 = *((void *)&v96 + 1);
            long long v31 = (int *)(*((void *)&v96 + 1) + 160 * v27 + 8);
            uint64_t v32 = v97;
            time_t v33 = sub_213CBEB40(a2);
            uint64_t v34 = sub_213CC2924(a1, v31, v32, v33, v98, 256);
            if (!v34
              || (a3 & 2) != 0
              && (uint64_t v35 = v97, v36 = sub_213CBEB40(a2), v34 = sub_213CC2924(a1, v31, v35, v36, v98, 0), !v34))
            {
              uint64_t v37 = v84 + 160 * v27;
              uint64_t v39 = *(void *)(v37 + 104);
              uint64_t v38 = (void *)(v37 + 104);
              uint64_t v83 = v38;
              if (!v39)
              {
                uint64_t v43 = (void *)a9[1];
                uint64_t v90 = *a9;
                uint64_t v91 = v43;
                uint64_t v44 = &asn1_oid_id_pkcs7_data;
                goto LABEL_42;
              }
              uint64_t v86 = 0;
              uint64_t v87 = 0;
              v85[0] = 0;
              v85[1] = 0;
              uint64_t v40 = (_DWORD *)*v38;
              uint64_t v87 = *(void *)(*v38 + 8);
              LODWORD(v86) = *v40;
              if (!v86) {
                goto LABEL_48;
              }
              uint64_t v41 = 0;
              unint64_t v42 = 0;
              while (der_heim_oid_cmp())
              {
                ++v42;
                v41 += 32;
                if (v42 >= v86) {
                  goto LABEL_48;
                }
              }
              if (v87)
              {
                if (*(_DWORD *)(v87 + v41 + 16) == 1)
                {
                  uint64_t v50 = sub_213CD1F88(*(void *)(*(void *)(v87 + v41 + 24) + 8), **(void **)(v87 + v41 + 24), (uint64_t)v85, (uint64_t)&v92);
                  if (v50)
                  {
                    uint64_t appended = v50;
                    uint64_t v55 = a1;
                    char v56 = 0;
                    int v57 = appended;
                    uint64_t v58 = "Failed to decode messageDigest (signature)";
                    goto LABEL_78;
                  }
                  uint64_t appended = hx509_verify_signature_0(a1, 0, v84 + 160 * v27 + 80, (uint64_t)a9, (uint64_t)v85);
                  der_free_octet_string();
                  if (appended)
                  {
                    uint64_t v55 = a1;
                    char v56 = 1;
                    int v57 = appended;
                    uint64_t v58 = "Failed to verify messageDigest";
LABEL_78:
                    hx509_set_error_string(v55, v56, v57, v58, v51, v52, v53, v54, v80);
LABEL_59:
                    CFDataRef v62 = v98[0];
                    if (v98[0]) {
LABEL_60:
                    }
                      hx509_cert_free(v62);
LABEL_61:
                    v98[0] = 0;
                    goto LABEL_62;
                  }
                  if (!v86) {
                    goto LABEL_88;
                  }
                  uint64_t v66 = 0;
                  unint64_t v67 = 0;
                  while (der_heim_oid_cmp())
                  {
                    ++v67;
                    v66 += 32;
                    if (v67 >= v86) {
                      goto LABEL_88;
                    }
                  }
                  if (v87)
                  {
                    uint64_t v68 = v87 + v66;
                    if (*(_DWORD *)(v87 + v66 + 16) != 1)
                    {
                      uint64_t appended = 569895;
                      uint64_t v59 = a1;
                      int v60 = 569895;
                      uint64_t v61 = "More then one oid in signedAttrs";
                      goto LABEL_49;
                    }
                    uint64_t v69 = v89;
                    uint64_t v70 = sub_213CD1F38(*(void *)(*(void *)(v68 + 24) + 8), **(void **)(v68 + 24), (uint64_t)v89, (uint64_t)&v92);
                    if (v70)
                    {
                      uint64_t appended = v70;
                      uint64_t v59 = a1;
                      int v60 = appended;
                      uint64_t v61 = "Failed to decode oid in signedAttrs";
                      goto LABEL_49;
                    }
                  }
                  else
                  {
LABEL_88:
                    uint64_t v69 = &asn1_oid_id_pkcs7_data;
                  }
                  uint64_t v90 = sub_213CD20E0((uint64_t)&v86);
                  uint64_t v71 = malloc_type_malloc(v90, 0x34E3E92EuLL);
                  uint64_t v91 = v71;
                  if (!v71)
                  {
                    uint64_t appended = 12;
                    goto LABEL_93;
                  }
                  uint64_t v72 = sub_213CD20C0((uint64_t)v71 + v90 - 1, v90, (uint64_t)&v86, (uint64_t)&v92);
                  if (v72)
                  {
                    uint64_t appended = v72;
                    free(v91);
                    uint64_t v91 = 0;
LABEL_93:
                    if (v69 == v89) {
                      der_free_oid();
                    }
                    hx509_clear_error_string(a1);
                    goto LABEL_59;
                  }
                  if (v92 != v90) {
                    sub_213CC1B28("internal ASN.1 encoder error", v73, v74, v75, v76, v77, v78, v79, v80);
                  }
                  uint64_t v44 = v69;
LABEL_42:
                  uint64_t v82 = v44;
                  uint64_t v45 = der_heim_oid_cmp();
                  char v49 = a3 | (v45 == 0);
                  if (a3 & 1 | (v45 == 0))
                  {
                    uint64_t appended = 0;
                  }
                  else
                  {
                    uint64_t appended = 569895;
                    hx509_set_error_string(a1, 0, 569895, "Oid in message mismatch from the expected", v16, v17, v18, v19, v80);
                  }
                  if (v82 == v89) {
                    uint64_t v45 = der_free_oid();
                  }
                  if (v49)
                  {
                    uint64_t v45 = hx509_verify_signature(a1, (uint64_t)v98[0], v84 + 160 * v27 + 112, (uint64_t)&v90, v29);
                    uint64_t appended = v45;
                    if (v45) {
                      hx509_set_error_string(a1, 1, v45, "Failed to verify signature in CMS SignedData", v16, v17, v18, v19, v80);
                    }
                  }
                  if (*v83)
                  {
                    free(v91);
                    uint64_t v91 = 0;
                  }
                  if (appended) {
                    goto LABEL_59;
                  }
                  if ((a3 & 8) != 0)
                  {
                    uint64_t v64 = (__CFArray **)sub_213CBFB34(v45, v46, v47, v48, v16, v17, v18, v19);
                    uint64_t v88 = v64;
                    if (!v64)
                    {
                      uint64_t appended = 0;
                      goto LABEL_59;
                    }
                    uint64_t appended = heim_array_append_value(v64[4], v98[0]);
                    if (!appended) {
                      goto LABEL_70;
                    }
                  }
                  else
                  {
                    CFDataRef v62 = v98[0];
                    uint64_t v63 = sub_213CBFC0C(a1, a2, v98[0], v97, (CFTypeRef *)&v88);
                    if (v63)
                    {
                      uint64_t appended = v63;
                      if (v62) {
                        goto LABEL_60;
                      }
                      goto LABEL_61;
                    }
LABEL_70:
                    uint64_t appended = heim_array_append_value(*a10, v88);
                  }
                  heim_release(v88);
                  int v65 = v81;
                  if (!appended) {
                    int v65 = v81 + 1;
                  }
                  int v81 = v65;
                  goto LABEL_59;
                }
                uint64_t appended = 569922;
                uint64_t v59 = a1;
                int v60 = 569922;
                uint64_t v61 = "SignerInfo have more then one messageDigest (signature)";
              }
              else
              {
LABEL_48:
                uint64_t appended = 569922;
                uint64_t v59 = a1;
                int v60 = 569922;
                uint64_t v61 = "SignerInfo have signed attributes but messageDigest (signature) is missing";
              }
LABEL_49:
              hx509_set_error_string(v59, 0, v60, v61, v16, v17, v18, v19, v80);
              goto LABEL_59;
            }
            uint64_t appended = v34;
          }
          else
          {
            uint64_t appended = 569889;
            hx509_set_error_string(a1, 0, 569889, "SignerInfo %d in SignedData missing sigature", v16, v17, v18, v19, v27);
          }
LABEL_62:
          if (++v27 >= (unint64_t)v96)
          {
            if ((a3 & 4) == 0 || v96)
            {
              if (!v81)
              {
                if (!appended)
                {
LABEL_106:
                  uint64_t appended = 569890;
                  uint64_t v21 = "No signers where found";
LABEL_3:
                  uint64_t v22 = a1;
                  int v23 = appended;
LABEL_10:
                  hx509_set_error_string(v22, 0, v23, v21, v16, v17, v18, v19, v80);
                }
                break;
              }
LABEL_108:
              uint64_t appended = der_copy_oid();
              if (appended) {
                hx509_clear_error_string(a1);
              }
              break;
            }
LABEL_107:
            heim_release(*a10);
            *a10 = 0;
            goto LABEL_108;
          }
        }
      }
    }
  }
LABEL_11:
  sub_213CD2150((uint64_t)v93);
  if (v97) {
    hx509_certs_free((const void **)&v97);
  }
  if (appended)
  {
    if (a9[1]) {
      der_free_octet_string();
    }
    if (*a10)
    {
      heim_release(*a10);
      *a10 = 0;
    }
    der_free_oid();
    der_free_octet_string();
  }
  return appended;
}

uint64_t sub_213CC3740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned int **)(a2 + 48);
  if (!v3 || !*v3) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t v17 = 0;
    uint64_t inited = hx509_cert_init_data(a1, *(void *)(*((void *)v3 + 1) + v7 + 8), *(void *)(*((void *)v3 + 1) + v7), (CFTypeRef *)&v17);
    if (inited) {
      break;
    }
    uint64_t v15 = hx509_certs_add(a1, a3, v17, v10, v11, v12, v13, v14);
    hx509_cert_free(v17);
    if (v15) {
      return v15;
    }
    ++v8;
    int v3 = *(unsigned int **)(a2 + 48);
    v7 += 16;
    if (v8 >= *v3) {
      return 0;
    }
  }
  return inited;
}

uint64_t hx509_cms_create_signed_1(uint64_t a1, char a2, void *a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v26 = 0;
  *a11 = 0;
  a11[1] = 0;
  uint64_t v24 = hx509_certs_init(a1, "MEMORY:certs", 0, 0, &v26);
  if (!v24)
  {
    uint64_t v24 = hx509_certs_add(a1, v26, a7, v19, v20, v21, v22, v23);
    if (!v24) {
      uint64_t v24 = hx509_cms_create_signed(a1, a2, a3, a4, a5, a6, v26, a8, a9, a10, (uint64_t)a11);
    }
    hx509_certs_free((const void **)&v26);
  }
  return v24;
}

uint64_t hx509_cms_create_signed(uint64_t a1, char a2, void *a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v54 = 0;
  if (a3) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = &asn1_oid_id_pkcs7_data;
  }
  uint64_t v53 = 0;
  long long v52 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  memset(v42, 0, sizeof(v42));
  size_t v48 = a5;
  char v49 = a4;
  uint64_t v46 = a6;
  uint64_t v47 = v16;
  uint64_t v50 = a8;
  int8x8_t v51 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(a2), (uint32x2_t)0xFFFFFFFDFFFFFFFFLL), (int8x8_t)0x100000001);
  if ((a2 & 0x10) != 0 || (uint64_t v17 = hx509_certs_init(a1, "MEMORY:certs", 0, 0, &v52), !v17))
  {
    *((void *)&v52 + 1) = a9;
    uint64_t v53 = a10;
    LODWORD(v42[0]) = 3;
    der_copy_oid();
    if ((a2 & 1) == 0)
    {
      *((void *)&v43 + 1) = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
      if (!*((void *)&v43 + 1)) {
        goto LABEL_27;
      }
      uint64_t v22 = malloc_type_malloc(a5, 0xCE3E4B8EuLL);
      *(void *)(*((void *)&v43 + 1) + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v22;
      if (!v22) {
        goto LABEL_27;
      }
      memcpy(v22, a4, a5);
      **((void **)&v43 + 1) = a5;
    }
    if ((a2 & 4) == 0)
    {
      uint64_t v17 = hx509_certs_iter_f(a1, a7, (uint64_t (*)(uint64_t, uint64_t))sub_213CC3BDC, (uint64_t)v42, v18, v19, v20, v21);
      if (v17) {
        goto LABEL_30;
      }
    }
    if (v45)
    {
      uint64_t v23 = 0;
      while (1)
      {
        if (!DWORD2(v42[0])) {
          goto LABEL_37;
        }
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        do
        {
          if (!der_heim_oid_cmp()) {
            break;
          }
          ++v25;
          v24 += 24;
        }
        while (v25 < DWORD2(v42[0]));
        if (DWORD2(v42[0]) == v25)
        {
LABEL_37:
          uint64_t v26 = sub_213CD1EB8((unsigned int *)v42 + 2);
          if (v26) {
            break;
          }
        }
        if (++v23 >= (unint64_t)v45) {
          goto LABEL_21;
        }
      }
      uint64_t v17 = v26;
      goto LABEL_29;
    }
LABEL_21:
    if (!(void)v52) {
      goto LABEL_24;
    }
    *(void *)&long long v44 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    if ((void)v44)
    {
      uint64_t v17 = hx509_certs_iter_f(a1, v52, (uint64_t (*)(uint64_t, uint64_t))sub_213CC40C8, (uint64_t)v42, v27, v28, v29, v30);
      if (v17)
      {
LABEL_30:
        hx509_certs_free((const void **)&v52);
        sub_213CD2150((uint64_t)v42);
        return v17;
      }
LABEL_24:
      size_t v31 = sub_213CD2140((uint64_t)v42);
      *(void *)a11 = v31;
      uint64_t v32 = malloc_type_malloc(v31, 0xAB1A4366uLL);
      *(void *)(a11 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v32;
      if (v32)
      {
        uint64_t v33 = sub_213CD2120((uint64_t)v32 + *(void *)a11 - 1, *(void *)a11, (uint64_t)v42, (uint64_t)&v54);
        if (!v33)
        {
          if (*(void *)a11 != v54) {
            sub_213CC1B28("internal ASN.1 encoder error", v34, v35, v36, v37, v38, v39, v40, v42[0]);
          }
          uint64_t v17 = 0;
          goto LABEL_30;
        }
        uint64_t v17 = v33;
        free(*(void **)(a11 + 8));
        *(void *)(a11 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
        goto LABEL_29;
      }
    }
LABEL_27:
    uint64_t v17 = 12;
LABEL_29:
    hx509_clear_error_string(a1);
    goto LABEL_30;
  }
  return v17;
}

uint64_t sub_213CC3BDC(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v70 = 0;
  memset(v71, 0, sizeof(v71));
  unint64_t v68 = 0;
  uint64_t v69 = 0;
  if (!_hx509_cert_private_key((uint64_t)a3))
  {
    uint64_t v11 = 569865;
    hx509_set_error_string(a1, 0, 569865, "Private key missing for signing", v6, v7, v8, v9, v63);
    return v11;
  }
  if (!*(void *)(a2 + 80))
  {
    uint64_t v12 = (char *)_hx509_cert_private_key((uint64_t)a3);
    uint64_t v11 = hx509_crypto_select(a1, 1, v12, *(void *)(a2 + 112), v71, v13, v14, v15);
    if (v11) {
      goto LABEL_15;
    }
LABEL_8:
    uint64_t v16 = (char *)malloc_type_realloc(*(void **)(a2 + 72), 160 * (*(_DWORD *)(a2 + 64) + 1), 0x10B0040C24DB5AAuLL);
    if (!v16)
    {
      uint64_t v11 = 12;
      goto LABEL_15;
    }
    uint64_t v22 = v16;
    *(void *)(a2 + 72) = v16;
    int v23 = *(_DWORD *)(a2 + 64);
    uint64_t v24 = &v16[160 * v23];
    *((_OWORD *)v24 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
    *((_OWORD *)v24 + 9) = 0u;
    *((_OWORD *)v24 + 6) = 0u;
    *((_OWORD *)v24 + 7) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 5) = 0u;
    *((_OWORD *)v24 + 2) = 0u;
    *((_OWORD *)v24 + 3) = 0u;
    *(_OWORD *)uint64_t v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    *(_DWORD *)uint64_t v24 = 1;
    uint64_t v25 = sub_213CC2F1C((uint64_t)a3, *(unsigned int *)(a2 + 120), (uint64_t)(v24 + 8), v17, v18, v19, v20, v21);
    if (v25
      || (uint64_t v26 = &v22[160 * v23],
          *((void *)v26 + 13) = 0,
          uint64_t v27 = (_DWORD **)(v26 + 104),
          v27[6] = 0,
          uint64_t v25 = copy_AlgorithmIdentifier(),
          v25))
    {
      uint64_t v11 = v25;
LABEL_12:
      hx509_clear_error_string(a1);
      goto LABEL_13;
    }
    if (der_heim_oid_cmp())
    {
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      v67[0] = 0;
      v67[1] = 0;
      uint64_t v29 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
      const char *v27 = v29;
      if (!v29) {
        goto LABEL_39;
      }
      uint64_t v11 = sub_213CC4DCC(a1, 0, (uint64_t)v71, a2 + 96, 0, (uint64_t)v67);
      if (v11) {
        goto LABEL_13;
      }
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      uint64_t v30 = sub_213CD1FC8((uint64_t)v67);
      uint64_t v74 = v30;
      size_t v31 = malloc_type_malloc(v30, 0x10D79C97uLL);
      uint64_t v75 = v31;
      if (!v31)
      {
        uint64_t v11 = 12;
        goto LABEL_32;
      }
      uint64_t v32 = v31;
      uint64_t v33 = sub_213CD1FA8((uint64_t)v31 + v30 - 1, v30, (uint64_t)v67, (uint64_t)&v70);
      if (v33)
      {
        uint64_t v11 = v33;
        free(v32);
LABEL_32:
        der_free_octet_string();
        goto LABEL_12;
      }
      der_free_octet_string();
      if (v70 != v30) {
        goto LABEL_54;
      }
      uint64_t v52 = sub_213CC42A8((void **)*v27 + 1, *v27, (uint64_t)&unk_2641E6FF0, &v74);
      if (v52)
      {
LABEL_35:
        uint64_t v11 = v52;
        free(v32);
        goto LABEL_12;
      }
      uint64_t v53 = sub_213CD1F78(*(void *)(a2 + 88));
      uint64_t v74 = v53;
      uint64_t v54 = malloc_type_malloc(v53, 0x97F8D380uLL);
      uint64_t v75 = v54;
      if (!v54)
      {
LABEL_39:
        uint64_t v11 = 12;
        goto LABEL_13;
      }
      uint64_t v32 = v54;
      uint64_t v55 = sub_213CD1F58((uint64_t)v54 + v53 - 1, v53, *(void *)(a2 + 88), (uint64_t)&v70);
      if (v55)
      {
        uint64_t v11 = v55;
        free(v32);
        goto LABEL_13;
      }
      if (v70 != v53) {
        goto LABEL_54;
      }
      uint64_t v52 = sub_213CC42A8((void **)*v27 + 1, *v27, (uint64_t)&unk_2641E6FE0, &v74);
      if (v52) {
        goto LABEL_35;
      }
      int v60 = *v27;
      uint64_t v65 = *((void *)*v27 + 1);
      LODWORD(v64) = *v60;
      uint64_t v72 = sub_213CD20E0((uint64_t)&v64);
      uint64_t v61 = malloc_type_malloc(v72, 0x374F05E2uLL);
      uint64_t v73 = v61;
      if (!v61)
      {
        uint64_t v11 = 12;
        goto LABEL_12;
      }
      uint64_t v62 = sub_213CD20C0((uint64_t)v61 + v72 - 1, v72, (uint64_t)&v64, (uint64_t)&v70);
      if (v62)
      {
        uint64_t v11 = v62;
        free(v73);
        uint64_t v73 = 0;
        goto LABEL_12;
      }
      if (v70 != v72) {
LABEL_54:
      }
        sub_213CC1B28("internal ASN.1 encoder error", v45, v46, v47, v48, v49, v50, v51, v63);
    }
    else
    {
      uint64_t v34 = *(void **)(a2 + 104);
      uint64_t v72 = *(void *)(a2 + 96);
      uint64_t v73 = v34;
    }
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v35 = (char *)_hx509_cert_private_key((uint64_t)a3);
    uint64_t v11 = hx509_crypto_select(a1, 2, v35, *(void *)(a2 + 112), &v64, v36, v37, v38);
    if (!v11)
    {
      uint64_t v39 = _hx509_cert_private_key((uint64_t)a3);
      uint64_t v11 = sub_213CC4DCC(a1, v39, (uint64_t)&v64, (uint64_t)&v72, (uint64_t)&v22[160 * v23 + 112], (uint64_t)&v22[160 * v23 + 136]);
      free_AlgorithmIdentifier((uint64_t)&v64);
      if (!v11)
      {
        ++*(_DWORD *)(a2 + 64);
        if (*(void *)(a2 + 144) && !*(_DWORD *)(a2 + 124))
        {
          time_t v56 = time(0);
          sub_213CBF378(a1, 1, v56, *(void *)(a2 + 136), 0, a3, *(void *)(a2 + 144), (uint64_t *)&v68);
        }
        else
        {
          sub_213CBF284(a1, (uint64_t *)&v68, a3);
        }
        if (!v68)
        {
          uint64_t v11 = 0;
          goto LABEL_15;
        }
        uint64_t v57 = 0;
        unsigned int v58 = 1;
        while (1)
        {
          uint64_t v11 = hx509_certs_add(a1, *(void *)(a2 + 128), *(void *)(v69 + 8 * v57), v40, v41, v42, v43, v44);
          if (v11) {
            goto LABEL_5;
          }
          uint64_t v57 = v58;
          if (v68 <= v58++) {
            goto LABEL_15;
          }
        }
      }
    }
LABEL_13:
    sub_213CD20F0((uint64_t)v24);
    goto LABEL_15;
  }
  uint64_t v10 = copy_AlgorithmIdentifier();
  if (!v10) {
    goto LABEL_8;
  }
  uint64_t v11 = v10;
LABEL_5:
  hx509_clear_error_string(a1);
LABEL_15:
  if (v73 != *(void **)(a2 + 104)) {
    der_free_octet_string();
  }
  sub_213CBF31C((uint64_t)&v68);
  free_AlgorithmIdentifier((uint64_t)v71);
  return v11;
}

uint64_t sub_213CC40C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void ***)(a2 + 48);
  uint64_t v7 = *(unsigned int *)v6;
  uint64_t v8 = malloc_type_realloc(v6[1], 16 * (v7 + 1), 0x108004057E67DB5uLL);
  if (!v8) {
    return 12;
  }
  *(void *)(*(void *)(a2 + 48) + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v8;
  uint64_t result = hx509_cert_binary(a1, a3, (uint64_t)v8 + 16 * v7);
  if (!result) {
    ++**(_DWORD **)(a2 + 48);
  }
  return result;
}

uint64_t hx509_cms_decrypt_encrypted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *a6 = 0;
  a6[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v9 = sub_213CD2160(a3, a4, (uint64_t)&v20, 0);
  if (v9)
  {
    uint64_t v14 = v9;
    hx509_set_error_string(a1, 0, v9, "Failed to decode CMSEncryptedData", v10, v11, v12, v13, v20);
  }
  else
  {
    if ((void)v23)
    {
      uint64_t v15 = der_copy_oid();
      if (v15)
      {
        uint64_t v14 = v15;
        hx509_clear_error_string(a1);
      }
      else if (*((void *)&v22 + 1))
      {
        uint64_t v14 = sub_213CC60E8(a1, a2, (uint64_t)&v21 + 8, v23, v24, v16, v17, v18);
        if (v14)
        {
          if (v24[1]) {
            free(v24[1]);
          }
        }
        else
        {
          *(_OWORD *)a6 = *(_OWORD *)v24;
        }
      }
      else
      {
        hx509_clear_error_string(a1);
        uint64_t v14 = 569866;
      }
    }
    else
    {
      uint64_t v14 = 569891;
      hx509_set_error_string(a1, 0, 569891, "No content in EncryptedData", v10, v11, v12, v13, v20);
    }
    sub_213CD2180((uint64_t)&v20);
  }
  return v14;
}

uint64_t sub_213CC42A8(void **a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = malloc_type_realloc(*a1, 32 * (*a2 + 1), 0x10300406495394CuLL);
  if (v7)
  {
    *a1 = v7;
    uint64_t result = der_copy_oid();
    if (result) {
      return result;
    }
    *((_DWORD *)*a1 + 8 * *a2 + 4) = 1;
    uint64_t v9 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    uint64_t v10 = *a2;
    *((void *)*a1 + 4 * v10 + 3) = v9;
    uint64_t v11 = *((void *)*a1 + 4 * v10 + 3);
    if (v11)
    {
      uint64_t result = 0;
      uint64_t v12 = *a4;
      *(void *)(v11 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a4[1];
      **((void **)*a1 + 4 * v10 + 3) = v12;
      *a2 = v10 + 1;
      return result;
    }
    der_free_oid();
  }
  return 12;
}

uint64_t sub_213CC439C(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  uint64_t v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040688ABBCCuLL);
  if (v6)
  {
    uint64_t v11 = v6;
    *uint64_t v6 = a2;
    uint64_t v12 = (const void **)(v6 + 1);
    uint64_t v13 = hx509_certs_init(a1, "MEMORY:collector-unenvelop-cert", 0, 0, v6 + 1);
    if (v13)
    {
      uint64_t v14 = v13;
    }
    else
    {
      v11[3] = 0;
      v11[4] = 0;
      uint64_t v14 = hx509_certs_init(a1, "MEMORY:collector-tmp-store", 0, 0, v11 + 2);
      if (!v14)
      {
        *a3 = v11;
        return v14;
      }
      hx509_certs_free(v12);
    }
    free(v11);
  }
  else
  {
    uint64_t v14 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v16);
  }
  return v14;
}

uint64_t sub_213CC4490(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_213CC4498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *(void *)(a2 + 16), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_213CC44A0(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x30uLL, 0x10B0040D89DD10BuLL);
  if (!v12) {
    return 12;
  }
  uint64_t v13 = v12;
  uint64_t v14 = malloc_type_realloc(*(void **)(a2 + 24), 8 * *(void *)(a2 + 32) + 8, 0x2004093837F09uLL);
  if (!v14)
  {
    free(v13);
    uint64_t v20 = 12;
    hx509_set_error_string(a1, 0, 12, "Out of memory", v22, v23, v24, v25, v29);
    return v20;
  }
  *(void *)(a2 + 24) = v14;
  uint64_t v15 = copy_AlgorithmIdentifier();
  if (!v15)
  {
    if (a4)
    {
      v13[3] = a4;
    }
    else
    {
      uint64_t v20 = sub_213CC51BC(a1, a3, a5[1], *a5, 1, v13 + 3);
      if (v20) {
        goto LABEL_6;
      }
    }
    if (a6)
    {
      uint64_t v26 = der_copy_octet_string();
      if (v26)
      {
        uint64_t v20 = v26;
        long long v21 = "Failed to copy localKeyId";
        goto LABEL_5;
      }
    }
    else
    {
      v13[4] = 0;
      v13[5] = 0;
    }
    uint64_t v20 = 0;
    uint64_t v27 = *(void *)(a2 + 32);
    *(void *)(*(void *)(a2 + 24) + 8 * v27) = v13;
    *(void *)(a2 + 32) = v27 + 1;
    return v20;
  }
  uint64_t v20 = v15;
  long long v21 = "Failed to copy AlgorithmIdentifier";
LABEL_5:
  hx509_set_error_string(a1, 0, v20, v21, v16, v17, v18, v19, v29);
LABEL_6:
  sub_213CC460C(v13);
  return v20;
}

void sub_213CC460C(const void **a1)
{
  free_AlgorithmIdentifier((uint64_t)a1);
  if (a1[3]) {
    hx509_private_key_free(a1 + 3);
  }
  der_free_octet_string();

  free(a1);
}

uint64_t sub_213CC465C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v40 = 0;
  *a3 = 0;
  uint64_t v11 = hx509_certs_init(a1, "MEMORY:collector-store", 0, 0, &v40);
  if (!v11)
  {
    uint64_t v12 = hx509_certs_merge(a1, v40, a2[2], v6, v7, v8, v9, v10);
    if (v12)
    {
      uint64_t v11 = v12;
      hx509_certs_free((const void **)&v40);
      return v11;
    }
    if (!a2[4])
    {
LABEL_28:
      uint64_t v11 = 0;
      *a3 = v40;
      return v11;
    }
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = *(void *)(a2[3] + 8 * v17);
      if (!*(void *)(v18 + 32)) {
        break;
      }
      uint64_t v19 = v40;
      v49[0] = 0;
      memset(v41, 0, sizeof(v41));
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      uint64_t v48 = 0;
      sub_213CC11B0((uint64_t)v41);
      LODWORD(v41[0]) |= 0x10000u;
      *((void *)&v42 + 1) = v18 + 32;
      if (hx509_certs_find(a1, v19, (int *)v41, v49, v20, v21, v22, v23)) {
        goto LABEL_12;
      }
      uint64_t v29 = *(void *)(v18 + 24);
      if (v29) {
        _hx509_cert_set_key(v49[0], v29);
      }
      hx509_cert_free(v49[0]);
LABEL_25:
      if (++v17 >= (unint64_t)a2[4]) {
        goto LABEL_28;
      }
    }
    hx509_set_error_string(a1, 0, 569964, "No local key attribute on private key", v13, v14, v15, v16, v39);
LABEL_12:
    uint64_t v30 = *(void *)(a2[3] + 8 * v17);
    if (*(void *)(v30 + 24))
    {
      uint64_t v31 = v40;
      *(void *)&v41[0] = 0;
      if (!hx509_certs_start_seq(a1, v40, (uint64_t)v41, v24, v25, v26, v27, v28))
      {
        v49[0] = 0;
        if (hx509_certs_next_cert(a1, v31, *(uint64_t *)&v41[0], v49) || (uint64_t v32 = v49[0]) == 0)
        {
LABEL_23:
          hx509_certs_end_seq(a1, v31, *(uint64_t *)&v41[0]);
          hx509_clear_error_string(a1);
        }
        else
        {
          while (1)
          {
            uint64_t v33 = _hx509_cert_private_key(v32);
            uint64_t v34 = v49[0];
            if (!v33)
            {
              unsigned int v35 = sub_213CC6120(v49[0], *(void *)(v30 + 24));
              uint64_t v34 = v49[0];
              if (v35) {
                break;
              }
            }
            hx509_cert_free(v34);
            int cert = hx509_certs_next_cert(a1, v31, *(uint64_t *)&v41[0], v49);
            uint64_t v32 = v49[0];
            if (cert) {
              BOOL v37 = 1;
            }
            else {
              BOOL v37 = v49[0] == 0;
            }
            if (v37) {
              goto LABEL_23;
            }
          }
          _hx509_cert_set_key(v49[0], *(void *)(v30 + 24));
          hx509_cert_free(v49[0]);
          hx509_certs_end_seq(a1, v31, *(uint64_t *)&v41[0]);
        }
      }
    }
    else
    {
      hx509_set_error_string(a1, 0, 569865, "No private key to compare with", v25, v26, v27, v28, v39);
    }
    goto LABEL_25;
  }
  return v11;
}

uint64_t sub_213CC48CC(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(uint64_t **)(a2 + 24);
    do
    {
      uint64_t v9 = *v8++;
      if (*(void *)(v9 + 24)) {
        ++v7;
      }
      --v6;
    }
    while (v6);
    size_t v10 = v7 + 1;
  }
  else
  {
    size_t v10 = 1;
  }
  uint64_t v11 = malloc_type_calloc(v10, 8uLL, 0x2004093837F09uLL);
  *a3 = v11;
  if (v11)
  {
    uint64_t v16 = *(void *)(a2 + 32);
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a2 + 24);
      do
      {
        uint64_t v20 = *(void *)(*(void *)(v19 + 8 * v18) + 24);
        if (v20)
        {
          *(void *)(*a3 + 8 * v17++) = v20;
          uint64_t v19 = *(void *)(a2 + 24);
          *(void *)(*(void *)(v19 + 8 * v18) + 24) = 0;
        }
        ++v18;
      }
      while (v16 != v18);
      uint64_t v11 = (void *)*a3;
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v21 = 0;
    v11[v17] = 0;
  }
  else
  {
    uint64_t v21 = 12;
    hx509_set_error_string(a1, 0, 12, "malloc - out of memory", v12, v13, v14, v15, v23);
  }
  return v21;
}

void sub_213CC49D0(char *a1)
{
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v2 = (const void **)(a1 + 8);
  if (v3) {
    hx509_certs_free(v2);
  }
  if (*((void *)a1 + 2)) {
    hx509_certs_free((const void **)a1 + 2);
  }
  if (*((void *)a1 + 4))
  {
    unint64_t v4 = 0;
    do
      sub_213CC460C(*(const void ***)(*((void *)a1 + 3) + 8 * v4++));
    while (v4 < *((void *)a1 + 4));
  }
  uint64_t v5 = (void *)*((void *)a1 + 3);
  if (v5) {
    free(v5);
  }

  free(a1);
}

void *sub_213CC4A54(const void **a1)
{
  uint64_t v2 = sub_213CD4814(a1[1], *(unsigned int *)a1, 0);
  sub_213CD4914((uint64_t)v2, *((_DWORD *)a1 + 4));
  return v2;
}

uint64_t sub_213CC4A94()
{
  uint64_t v0 = 0;
  while (1)
  {
    uint64_t v1 = *(uint64_t *)((char *)&off_2641E8308 + v0);
    if (*(void *)(v1 + 16))
    {
      if (!der_heim_oid_cmp()) {
        break;
      }
    }
    v0 += 8;
    if (v0 == 16) {
      return 0;
    }
  }
  return v1;
}

uint64_t sub_213CC4AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = (&off_2641E8320)[v5];
    if (!der_heim_oid_cmp()) {
      break;
    }
    if (++v5 == 15)
    {
      hx509_clear_error_string(a1);
      return 569861;
    }
  }
  uint64_t v12 = v6[6];
  if (v12) {
    BOOL v13 = (uint64_t)v12 < a3;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13) {
    return 0;
  }
  uint64_t v11 = 569933;
  hx509_set_error_string(a1, 0, 569933, "Algorithm %s has passed it best before date", v7, v8, v9, v10, (char)*v6);
  return v11;
}

uint64_t sub_213CC4BC0(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = (&off_2641E8320)[v2];
    if (!der_heim_oid_cmp()) {
      break;
    }
    if (++v2 == 15)
    {
      hx509_clear_error_string(a1);
      return 569861;
    }
  }
  if (((_BYTE)v3[5] & 4) != 0) {
    return 0;
  }
  uint64_t v8 = 569933;
  hx509_set_error_string(a1, 0, 569933, "Algorithm %s not trusted for self signatures", v4, v5, v6, v7, (char)*v3);
  return v8;
}

uint64_t hx509_verify_signature_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2) {
    uint64_t v9 = sub_213CBE6DC(a2);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = (&off_2641E8320)[v10];
    if (!der_heim_oid_cmp()) {
      break;
    }
    if (++v10 == 15)
    {
      uint64_t v12 = 569861;
      hx509_clear_error_string(a1);
      return v12;
    }
  }
  int v13 = *((_DWORD *)v11 + 10);
  if (v9)
  {
    if ((v13 & 1) == 0)
    {
      hx509_clear_error_string(a1);
      return 569924;
    }
    if (v11[3] && der_heim_oid_cmp())
    {
      hx509_clear_error_string(a1);
      return 569862;
    }
  }
  else if ((v13 & 2) != 0)
  {
    hx509_clear_error_string(a1);
    return 569928;
  }
  uint64_t v15 = v11[8];

  return ((uint64_t (*)(uint64_t, char **, uint64_t, uint64_t, uint64_t, uint64_t))v15)(a1, v11, v9, a3, a4, a5);
}

uint64_t sub_213CC4DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0;
  while (1)
  {
    int v13 = (&off_2641E8320)[v12];
    if (!der_heim_oid_cmp()) {
      break;
    }
    if (++v12 == 15)
    {
      uint64_t v18 = 569861;
      hx509_set_error_string(a1, 0, 569861, "algorithm no supported", v14, v15, v16, v17, v21);
      return v18;
    }
  }
  if (a2 && ((_BYTE)v13[5] & 1) == 0)
  {
    hx509_set_error_string(a1, 0, 569861, "algorithm provides no conf", v14, v15, v16, v17, v21);
    return 569924;
  }
  uint64_t v20 = v13[9];

  return ((uint64_t (*)(uint64_t, char **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v20)(a1, v13, a2, a3, a4, a5, a6);
}

uint64_t sub_213CC4EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t result = sub_213CC4DCC(a1, a2, a3, a4, a5, (uint64_t)&v9);
  if (!result)
  {
    uint64_t v8 = v10;
    *a6 = 8 * v9;
    a6[1] = v8;
  }
  return result;
}

uint64_t sub_213CC4F3C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a5 = 0;
  a5[1] = 0;
  unint64_t v8 = *(void *)(a3 + 208);
  uint64_t v33 = *(void *)(a3 + 216);
  uint64_t v9 = sub_213CD64A8(0, &v33, v8 >> 3);
  if (v9)
  {
    uint64_t v14 = v9;
    int v15 = sub_213CD5DDC((uint64_t)v9);
    uint64_t v16 = malloc_type_malloc(v15, 0xC77C482EuLL);
    if (v16)
    {
      uint64_t v17 = v16;
      int v18 = sub_213CD5DFC(*a2, *((void *)a2 + 1), (uint64_t)v16, (uint64_t)v14);
      sub_213CD5B74(v14);
      if (v18 <= 0)
      {
        uint64_t v26 = 569929;
        free(v17);
        hx509_set_error_string(a1, 0, 569929, "RSA public encrypt failed with %d", v28, v29, v30, v31, v18);
        return v26;
      }
      if (v18 > v15) {
        sub_213CC1B28("internal rsa decryption failure: ret > tosize", v19, v20, v21, v22, v23, v24, v25, v32);
      }
      *a5 = v18;
      a5[1] = v17;
      if (!der_copy_oid()) {
        return 0;
      }
      der_free_octet_string();
    }
    else
    {
      sub_213CD5B74(v14);
    }
  }
  uint64_t v26 = 12;
  hx509_set_error_string(a1, 0, 12, "out of memory", v10, v11, v12, v13, v32);
  return v26;
}

uint64_t sub_213CC5094(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  a5[1] = 0;
  uint64_t v9 = *(void *)(a4 + 56);
  if (!v9)
  {
    uint64_t v24 = 569865;
    uint64_t v25 = "Private RSA key missing";
    uint64_t v26 = a1;
    int v27 = 569865;
LABEL_9:
    hx509_set_error_string(v26, 0, v27, v25, (uint64_t)a5, a6, a7, a8, v29);
    return v24;
  }
  int v13 = sub_213CD5DDC(v9);
  *a5 = v13;
  uint64_t v14 = malloc_type_malloc(v13, 0xD912861BuLL);
  a5[1] = v14;
  if (!v14)
  {
    uint64_t v25 = "out of memory";
    uint64_t v24 = 12;
    uint64_t v26 = a1;
    int v27 = 12;
    goto LABEL_9;
  }
  int v15 = sub_213CD5E08(*a2, *((void *)a2 + 1), (uint64_t)v14, *(void *)(a4 + 56));
  char v23 = v15;
  if (v15 <= 0)
  {
    der_free_octet_string();
    uint64_t v24 = 569932;
    char v29 = v23;
    uint64_t v25 = "Failed to decrypt using private key: %d";
    uint64_t v26 = a1;
    int v27 = 569932;
    goto LABEL_9;
  }
  if (*a5 < (unint64_t)v15) {
    sub_213CC1B28("internal rsa decryption failure: ret > tosize", v16, v17, v18, v19, v20, v21, v22, v29);
  }
  uint64_t v24 = 0;
  *a5 = v15;
  return v24;
}

uint64_t sub_213CC51BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  *a6 = 0;
  uint64_t v12 = sub_213CC4A94();
  if (v12)
  {
    uint64_t v18 = v12;
    uint64_t v19 = heim_uniq_alloc(0x48uLL, (uint64_t)"hx509-private-key", (uint64_t)sub_213CC567C, v13, v14, v15, v16, v17);
    *a6 = (CFTypeRef)v19;
    if (v19)
    {
      *(void *)(v19 + 64) = v18;
      *((void *)*a6 + 7) = 0;
      *((_DWORD *)*a6 + 12) = *(_DWORD *)v18;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 48))(a1, a2, a3, a4, a5);
      if (v24 && *a6)
      {
        heim_release(*a6);
        *a6 = 0;
      }
    }
    else
    {
      uint64_t v24 = 12;
      hx509_set_error_string(a1, 0, 12, "out of memory", v20, v21, v22, v23, v26);
    }
  }
  else
  {
    hx509_clear_error_string(a1);
    return 569861;
  }
  return v24;
}

uint64_t sub_213CC52C8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = heim_uniq_alloc(0x48uLL, (uint64_t)"hx509-private-key", (uint64_t)sub_213CC567C, a4, a5, a6, a7, a8);
  *(void *)a1 = v11;
  if (!v11) {
    return 12;
  }
  *(void *)(v11 + 64) = a2;
  *(void *)(*(void *)a1 + 56) = a3;
  if (a2) {
    int v12 = *a2;
  }
  else {
    int v12 = 2;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)a1 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v12;
  return result;
}

uint64_t hx509_private_key_free(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      heim_release(v2);
      *a1 = 0;
    }
  }
  return 0;
}

uint64_t hx509_private_key2SPKI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8 && (uint64_t v9 = *(uint64_t (**)(void))(v8 + 32)) != 0)
  {
    return v9();
  }
  else
  {
    hx509_set_error_string(a1, 0, 569967, "Private key have no key2SPKI function", a5, a6, a7, a8, vars0);
    return 569967;
  }
}

uint64_t _hx509_generate_private_key_init(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (der_heim_oid_cmp())
  {
    uint64_t v10 = "private key not an RSA key";
    uint64_t v11 = 22;
    uint64_t v12 = a1;
    int v13 = 22;
  }
  else
  {
    uint64_t v14 = malloc_type_calloc(1uLL, 0x18uLL, 0x1060040C052FB36uLL);
    *a3 = v14;
    if (v14)
    {
      uint64_t v11 = 0;
      *uint64_t v14 = a2;
      return v11;
    }
    uint64_t v10 = "out of memory";
    uint64_t v11 = 12;
    uint64_t v12 = a1;
    int v13 = 12;
  }
  hx509_set_error_string(v12, 0, v13, v10, v6, v7, v8, v9, v16);
  return v11;
}

uint64_t _hx509_generate_private_key_is_ca(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 1;
  return 0;
}

uint64_t _hx509_generate_private_key_bits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a2 + 16) = a3;
  return 0;
}

void _hx509_generate_private_key_free(void **a1)
{
  *a1 = 0;
}

uint64_t _hx509_generate_private_key(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  *a3 = 0;
  uint64_t v6 = sub_213CC4A94();
  if (v6)
  {
    uint64_t v12 = v6;
    uint64_t v13 = heim_uniq_alloc(0x48uLL, (uint64_t)"hx509-private-key", (uint64_t)sub_213CC567C, v7, v8, v9, v10, v11);
    *a3 = (CFTypeRef)v13;
    if (v13)
    {
      *(void *)(v13 + 64) = v12;
      *((void *)*a3 + 7) = 0;
      *((_DWORD *)*a3 + 12) = *(_DWORD *)v12;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 56))(a1, a2);
      if (v18 && *a3)
      {
        heim_release(*a3);
        *a3 = 0;
      }
    }
    else
    {
      uint64_t v18 = 12;
      hx509_set_error_string(a1, 0, 12, "out of memory", v14, v15, v16, v17, v20);
    }
  }
  else
  {
    hx509_clear_error_string(a1);
    return 569861;
  }
  return v18;
}

void *hx509_signature_sha512()
{
  return &unk_2641E8158;
}

void *hx509_signature_sha384()
{
  return &unk_2641E8170;
}

void *hx509_signature_sha256()
{
  return &unk_2641E8188;
}

void *hx509_signature_sha1()
{
  return &unk_2641E81A0;
}

void *hx509_signature_md5()
{
  return &unk_2641E81B8;
}

void *sub_213CC5604()
{
  return &unk_2641E81D0;
}

void *hx509_signature_rsa_with_sha512()
{
  return &unk_2641E8218;
}

void *hx509_signature_rsa_with_sha384()
{
  return &unk_2641E8230;
}

void *hx509_signature_rsa_with_sha256()
{
  return &unk_2641E8248;
}

void *hx509_signature_rsa_with_sha1()
{
  return &unk_2641E8260;
}

void *hx509_signature_rsa_with_md5()
{
  return &unk_2641E8278;
}

void *hx509_signature_rsa()
{
  return &unk_2641E8290;
}

void *hx509_crypto_des_rsdi_ede3_cbc()
{
  return &unk_2641E82C0;
}

void *hx509_crypto_aes128_cbc()
{
  return &unk_2641E82D8;
}

void *hx509_crypto_aes256_cbc()
{
  return &unk_2641E82F0;
}

void sub_213CC567C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(a1 + 48);
  if (v8 == 3)
  {
    uint64_t v10 = *(_DWORD **)(a1 + 56);
    if (v10)
    {
      sub_213CD7534(v10);
    }
  }
  else if (v8 != 2)
  {
    if (v8 != 1) {
      sub_213CC1B28("unsupported keytype %d", a2, a3, a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 48));
    }
    uint64_t v9 = *(_DWORD **)(a1 + 56);
    if (v9)
    {
      sub_213CD5B74(v9);
    }
  }
}

uint64_t sub_213CC5710(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 64) + 8);
}

void sub_213CC571C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 56);
  if (v4) {
    sub_213CD5B74(v4);
  }
  *(_DWORD *)(a1 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 1;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 32) = &off_26C4CA4A0;
  *(void *)(a1 + 40) = &unk_2641E9718;
}

void sub_213CC576C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 56);
  if (v4) {
    sub_213CD7534(v4);
  }
  *(_DWORD *)(a1 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 3;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 32) = &off_26C4C98B0;
  *(void *)(a1 + 40) = &unk_2641E9828;
}

uint64_t sub_213CC57BC(uint64_t a1)
{
  uint64_t v6 = der_copy_oid();
  if (v6) {
    hx509_set_error_string(a1, 0, v6, "malloc out of memory", v2, v3, v4, v5, v8);
  }
  return v6;
}

BOOL sub_213CC5810(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 64) + 40) != 0;
}

uint64_t sub_213CC5824(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a2 + 64) + 40);
  if (v2)
  {
    return v2();
  }
  else
  {
    hx509_clear_error_string(a1);
    return 569967;
  }
}

char *hx509_crypto_enctype_by_name(char *a1)
{
  uint64_t v2 = 0;
  while (strcasecmp(a1, (&off_26C4C96F0)[v2]))
  {
    v2 += 7;
    if (v2 == 35) {
      return 0;
    }
  }
  return (&off_26C4C96F0)[v2 + 2];
}

uint64_t hx509_crypto_init(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v6 = 0;
  *a4 = 0;
  while (der_heim_oid_cmp())
  {
    v6 += 7;
    if (v6 == 35)
    {
      uint64_t v11 = 569866;
      hx509_set_error_string(a1, 0, 569866, "Algorithm not supported", v7, v8, v9, v10, v14);
      return v11;
    }
  }
  uint64_t v12 = malloc_type_calloc(1uLL, 0x48uLL, 0x10F0040F8F4EDAFuLL);
  *a4 = v12;
  if (v12)
  {
    *((_DWORD *)v12 + 2) = 4;
    _OWORD v12[2] = &(&off_26C4C96F0)[v6];
    (*a4)[3] = ((uint64_t (*)(void))(&off_26C4C96F0)[v6 + 4])();
    if (!der_copy_oid()) {
      return 0;
    }
    hx509_crypto_destroy(*a4);
    *a4 = 0;
  }
  hx509_clear_error_string(a1);
  return 12;
}

void hx509_crypto_destroy(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (v2) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3) {
    free(v3);
  }
  uint64_t v4 = (void *)a1[8];
  if (v4) {
    free(v4);
  }
  der_free_oid();
  a1[8] = 0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;

  free(a1);
}

const char *hx509_crypto_provider()
{
  return "unknown";
}

uint64_t hx509_crypto_set_key_name()
{
  return 0;
}

uint64_t sub_213CC5A58(uint64_t result)
{
  *(_DWORD *)(result + 8) |= 1u;
  return result;
}

uint64_t hx509_crypto_set_key_data(uint64_t *a1, const void *a2, size_t a3)
{
  if (hc_EVP_CIPHER_key_length(a1[3]) > a3) {
    return 569920;
  }
  uint64_t v7 = (size_t *)(a1 + 4);
  uint64_t v8 = (void *)a1[5];
  if (v8)
  {
    free(v8);
    size_t *v7 = 0;
    a1[5] = 0;
  }
  uint64_t v9 = malloc_type_malloc(a3, 0x162E7664uLL);
  a1[5] = (uint64_t)v9;
  if (!v9) {
    return 12;
  }
  memcpy(v9, a2, a3);
  uint64_t result = 0;
  size_t *v7 = a3;
  return result;
}

uint64_t hx509_crypto_set_random_key(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    free(v5);
    void *v4 = 0;
  }
  size_t v6 = hc_EVP_CIPHER_key_length(*(void *)(a1 + 24));
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = malloc_type_malloc(v6, 0x7E1481AFuLL);
  *(void *)(a1 + 40) = v7;
  if (v7)
  {
    if (CCRandomCopyBytes())
    {
      free(*(void **)(a1 + 40));
      void *v4 = 0;
      v4[1] = 0;
      return 569920;
    }
    else if (a2)
    {
      return der_copy_octet_string();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    void *v4 = 0;
    return 12;
  }
}

uint64_t hx509_crypto_set_params(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 16) + 48))(a1, a3, a2);
}

uint64_t hx509_crypto_get_params(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 40))();
}

uint64_t sub_213CC5BF0(uint64_t a1, uint64_t a2)
{
  size_t v3 = hc_EVP_CIPHER_iv_length(*(void *)(a1 + 24));
  *(void *)a2 = v3;
  uint64_t v4 = malloc_type_malloc(v3, 0x96D9D869uLL);
  *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v4;
  if (v4)
  {
    uint64_t result = CCRandomCopyBytes();
    if (result)
    {
      free(*(void **)(a2 + 8));
      *(void *)a2 = 0;
      *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
      return 569920;
    }
  }
  else
  {
    *(void *)a2 = 0;
    return 12;
  }
  return result;
}

uint64_t hx509_crypto_encrypt(uint64_t a1, const void *a2, size_t a3, uint64_t a4, void ***a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  *a5 = 0;
  if (*(unsigned char *)(*(void *)(a1 + 16) + 8) & 1) == 0 || (*(unsigned char *)(a1 + 8))
  {
    if (hc_EVP_CIPHER_iv_length(*(void *)(a1 + 24)) != *(void *)a4) {
      sub_213CD87D4();
    }
    hc_EVP_CIPHER_CTX_init((uint64_t)v17);
    if (hc_EVP_CipherInit_ex((uint64_t)v17, *(void *)(a1 + 24), 0, *(void *)(a1 + 40), *(void **)(a4 + 8), 1) == 1)
    {
      uint64_t v11 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
      *a5 = v11;
      if (!v11)
      {
        uint64_t v10 = 12;
LABEL_29:
        hc_EVP_CIPHER_CTX_cleanup((uint64_t *)v17);
        return v10;
      }
      if ((*(unsigned char *)(a1 + 8) & 6) == 0) {
        sub_213CD87A8();
      }
      unint64_t v12 = hc_EVP_CIPHER_block_size(*(void *)(a1 + 24));
      int v13 = *(_DWORD *)(a1 + 8);
      if ((v13 & 2) != 0)
      {
        if (v12 != 1 && a3 % v12) {
          return 569893;
        }
        size_t v14 = 0;
      }
      else
      {
        size_t v14 = 0;
        if ((v13 & 4) != 0 && v12 != 1) {
          size_t v14 = v12 + a3 / v12 * v12 - a3;
        }
      }
      **a5 = (void *)(v14 + a3);
      (*a5)[1] = malloc_type_malloc(v14 + a3, 0xAA266111uLL);
      uint64_t v15 = *a5;
      if (!(*a5)[1])
      {
        uint64_t v10 = 12;
        goto LABEL_26;
      }
      memcpy((*a5)[1], a2, a3);
      if (v14) {
        memset((char *)(*a5)[1] + a3, v14, v14);
      }
      if (hc_EVP_Cipher((uint64_t)v17) == 1)
      {
        uint64_t v10 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      hc_EVP_CIPHER_CTX_cleanup((uint64_t *)v17);
    }
    uint64_t v10 = 569920;
    uint64_t v15 = *a5;
    if (!*a5) {
      goto LABEL_29;
    }
LABEL_26:
    if (v15[1])
    {
      free(v15[1]);
      uint64_t v15 = *a5;
    }
    free(v15);
    *a5 = 0;
    goto LABEL_29;
  }
  return 569933;
}

uint64_t hx509_crypto_decrypt(uint64_t a1, uint64_t a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  *a5 = 0;
  a5[1] = 0;
  if ((*(unsigned char *)(*(void *)(a1 + 16) + 8) & 1) != 0 && (*(unsigned char *)(a1 + 8) & 1) == 0) {
    return 569933;
  }
  if (a4)
  {
    if ((unint64_t)hc_EVP_CIPHER_iv_length(*(void *)(a1 + 24)) < *a4 || !*(void *)(a1 + 40)) {
      return 569920;
    }
    uint64_t v10 = (void *)a4[1];
  }
  else
  {
    if (!*(void *)(a1 + 40)) {
      return 569920;
    }
    uint64_t v10 = 0;
  }
  hc_EVP_CIPHER_CTX_init((uint64_t)v20);
  if (hc_EVP_CipherInit_ex((uint64_t)v20, *(void *)(a1 + 24), 0, *(void *)(a1 + 40), v10, 0) != 1)
  {
    hc_EVP_CIPHER_CTX_cleanup((uint64_t *)v20);
    return 569920;
  }
  *a5 = a3;
  uint64_t v11 = malloc_type_malloc(a3, 0x51F77A67uLL);
  a5[1] = (size_t)v11;
  if (!v11)
  {
    hc_EVP_CIPHER_CTX_cleanup((uint64_t *)v20);
    *a5 = 0;
    return 12;
  }
  int v12 = hc_EVP_Cipher((uint64_t)v20);
  uint64_t v9 = 569920;
  if (v12 == 1)
  {
    hc_EVP_CIPHER_CTX_cleanup((uint64_t *)v20);
    if ((*(unsigned char *)(a1 + 8) & 4) != 0 && (unint64_t)hc_EVP_CIPHER_block_size(*(void *)(a1 + 24)) >= 2)
    {
      int v13 = hc_EVP_CIPHER_block_size(*(void *)(a1 + 24));
      size_t v15 = *a5;
      size_t v14 = (char *)a5[1];
      if ((int)*a5 < v13) {
        goto LABEL_16;
      }
      uint64_t v17 = &v14[v15 - 1];
      uint64_t v18 = *v17;
      if ((int)v18 > v13)
      {
LABEL_23:
        free(v14);
LABEL_24:
        *a5 = 0;
        a5[1] = 0;
        return 569893;
      }
      *a5 = v15 - v18;
      if (v18)
      {
        int v19 = v18;
        while (*v17 == v18)
        {
          uint64_t v9 = 0;
          --v17;
          if (!--v19) {
            return v9;
          }
        }
LABEL_16:
        if (!v14) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
    return 0;
  }
  return v9;
}

uint64_t sub_213CC60E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  a5[1] = 0;
  hx509_set_error_string(a1, 0, 569866, "String to key algorithm not supported", (uint64_t)a5, a6, a7, a8, vars0);
  return 569866;
}

void *sub_213CC6120(uint64_t a1, uint64_t a2)
{
  if (der_heim_oid_cmp()) {
    return (void *)(der_heim_oid_cmp() == 0);
  }
  if (*(_DWORD *)(a2 + 48) != 1) {
    return 0;
  }
  size_t v6 = *(void **)(a2 + 56);
  if (!v6 || !v6[6] || !v6[7] || !v6[8]) {
    return 0;
  }
  uint64_t v7 = sub_213CBE6DC(a1);
  uint64_t result = sub_213CD5AA8();
  if (!result) {
    return result;
  }
  uint64_t v8 = result;
  *(_OWORD *)size_t v14 = 0u;
  *(_OWORD *)size_t v15 = 0u;
  *(_OWORD *)size_t size = 0u;
  uint64_t v12 = 0;
  if (sub_213CD2D50(*(void *)(v7 + 216), *(void *)(v7 + 208) >> 3, (uint64_t)size, (uint64_t)&v12)) {
    goto LABEL_13;
  }
  uint64_t v9 = sub_213CD4814((const void *)size[1], LODWORD(size[0]), 0);
  sub_213CD4914((uint64_t)v9, v14[0]);
  v8[4] = v9;
  uint64_t v10 = sub_213CD4814(*(const void **)v15, LODWORD(v14[1]), 0);
  sub_213CD4914((uint64_t)v10, v15[2]);
  v8[5] = v10;
  sub_213CD2DA0((uint64_t)size);
  v8[6] = sub_213CD4774();
  v8[7] = sub_213CD4774();
  v8[8] = sub_213CD4774();
  v8[9] = sub_213CD4774();
  v8[10] = sub_213CD4774();
  v8[11] = sub_213CD4774();
  if (!v8[4] || !v8[5] || !v8[6] || !v8[7] || !v8[8] || !v8[9] || !v8[10])
  {
LABEL_13:
    sub_213CD5B74(v8);
    return 0;
  }
  BOOL v11 = sub_213CD5CD0(v8);
  sub_213CD5B74(v8);
  return (void *)v11;
}

uint64_t hx509_crypto_select(uint64_t a1, int a2, char *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a2 == 4)
  {
    char v23 = 0;
    int v11 = 1024;
    if (a4)
    {
LABEL_14:
      int v13 = sub_213CC65F4(a3);
      if (*(void *)(a4 + 16))
      {
        size_t v14 = v13;
        unint64_t v15 = 0;
        uint64_t v16 = &off_26C4C98B0;
        uint64_t v22 = v10;
LABEL_16:
        uint64_t v17 = 1u;
        while ((v16[5] & v11) == 0
             || der_heim_oid_cmp()
             || v14 && v16[3] && der_heim_oid_cmp())
        {
          uint64_t v16 = (&off_2641E8320)[v17++];
          if (v17 == 16)
          {
            if (v23) {
              goto LABEL_30;
            }
            uint64_t v18 = 0;
            int v19 = (void (**)(void))&qword_26C4C9708;
            while (der_heim_oid_cmp())
            {
              ++v18;
              v19 += 7;
              if (v18 == 5) {
                goto LABEL_30;
              }
            }
            if (!v18 || v18 == 3)
            {
LABEL_30:
              ++v15;
              uint64_t v10 = v22;
              uint64_t v16 = &off_26C4C98B0;
              if (v15 < *(void *)(a4 + 16)) {
                goto LABEL_16;
              }
              break;
            }
            (*v19)();
            uint64_t v12 = copy_AlgorithmIdentifier();
            if (!v12) {
              return v12;
            }
            uint64_t v20 = v22;
            goto LABEL_33;
          }
        }
      }
    }
  }
  else
  {
    if (a2 == 2)
    {
      if (a3) {
        sub_213CC654C((uint64_t)a3, 2);
      }
      int v11 = 512;
    }
    else
    {
      if (a2 != 1)
      {
        uint64_t v12 = 22;
        hx509_set_error_string(a1, 0, 22, "Unknown type %d of selection", (uint64_t)a5, a6, a7, a8, a2);
        return v12;
      }
      if (a3) {
        sub_213CC654C((uint64_t)a3, 1);
      }
      int v11 = 256;
    }
    char v23 = 1;
    if (a4) {
      goto LABEL_14;
    }
  }
  uint64_t v12 = copy_AlgorithmIdentifier();
  if (v12)
  {
    uint64_t v20 = v10;
LABEL_33:
    hx509_clear_error_string(v20);
  }
  return v12;
}

char *sub_213CC654C(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 64)) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (&off_2641E8320)[v4];
    if (v5[3])
    {
      if (!der_heim_oid_cmp())
      {
        size_t v6 = *(unsigned int (**)(uint64_t, char *))(*(void *)(a1 + 64) + 24);
        if (!v6 || v6(a1, v5[2])) {
          break;
        }
      }
    }
    if (++v4 == 15) {
      return 0;
    }
  }
  uint64_t v8 = 4;
  if (a2 == 2) {
    uint64_t v8 = 2;
  }
  return v5[v8];
}

char *sub_213CC65F4(char *result)
{
  if (result)
  {
    uint64_t v1 = 0;
    while (1)
    {
      uint64_t v2 = (&off_2641E8320)[v1];
      if (!der_heim_oid_cmp()) {
        break;
      }
      if (++v1 == 15) {
        return 0;
      }
    }
    return v2[3];
  }
  return result;
}

uint64_t hx509_crypto_available(uint64_t a1, int a2, uint64_t a3, void **a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a4 = 0;
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t v27 = a1;
      int v10 = 256;
    }
    else
    {
      if (a2 != 2)
      {
        char v23 = "Unknown type %d of available";
        char v26 = a2;
        uint64_t v21 = 22;
        int v24 = 22;
LABEL_34:
        hx509_set_error_string(a1, 0, v24, v23, (uint64_t)a5, a6, a7, a8, v26);
        return v21;
      }
      uint64_t v27 = a1;
      int v10 = 512;
    }
  }
  else
  {
    uint64_t v27 = a1;
    int v10 = 1792;
  }
  if (a3)
  {
    int v11 = (char *)_hx509_cert_private_key(a3);
    uint64_t v12 = sub_213CC65F4(v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
  size_t v14 = &off_26C4C98B0;
  uint64_t v15 = 1u;
  do
  {
    LODWORD(v16) = v13;
    if ((v14[5] & v10) != 0 && v14[2] && (!v12 || !v14[3] || !der_heim_oid_cmp()))
    {
      uint64_t v13 = (v13 + 1);
      uint64_t v17 = malloc_type_realloc(*a4, 24 * v13, 0x10300406712BA52uLL);
      if (!v17 || (*a4 = v17, copy_AlgorithmIdentifier()))
      {
LABEL_29:
        if (v16)
        {
          uint64_t v22 = 0;
          do
          {
            free_AlgorithmIdentifier((uint64_t)*a4 + v22);
            v22 += 24;
          }
          while (24 * v16 != v22);
        }
        free(*a4);
        *a4 = 0;
        char v23 = "out of memory";
        uint64_t v21 = 12;
        a1 = v27;
        int v24 = 12;
        goto LABEL_34;
      }
    }
    size_t v14 = (&off_2641E8320)[v15++];
  }
  while (v15 != 16);
  if (!a2)
  {
    uint64_t v18 = 0;
    uint64_t v16 = v13;
    int v19 = (void (**)(void))&qword_26C4C9708;
    do
    {
      if (v18 && v18 != 3)
      {
        uint64_t v13 = (v16 + 1);
        uint64_t v20 = malloc_type_realloc(*a4, 24 * v13, 0x10300406712BA52uLL);
        if (!v20) {
          goto LABEL_29;
        }
        *a4 = v20;
        (*v19)();
        if (copy_AlgorithmIdentifier()) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v13 = v16;
      }
      ++v18;
      v19 += 7;
      uint64_t v16 = v13;
    }
    while (v18 != 5);
  }
  uint64_t v21 = 0;
  *a5 = v13;
  return v21;
}

void hx509_crypto_free_algs(char *a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    do
    {
      free_AlgorithmIdentifier((uint64_t)v4);
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  free(a1);
}

BOOL sub_213CC68FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 48) != 1) {
    heim_abort("internal error passing private key to wrong ops:signer->keytype == KEYTYPE_RSA", a2, a3, a4, a5, a6, a7, a8, v12);
  }
  uint64_t v9 = 0;
  while (1)
  {
    int v10 = (&off_2641E8320)[v9];
    if (!der_heim_oid_cmp()) {
      break;
    }
    if (++v9 == 15) {
      return 0;
    }
  }
  if (*((_DWORD *)v10 + 20)) {
    return (int)sub_213CD5DDC(*(void *)(a1 + 56)) > *((_DWORD *)v10 + 20);
  }
  return 0;
}

uint64_t sub_213CC699C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int v6 = sub_213CD6390(*(void *)(a2 + 56), 0);
  uint64_t v7 = malloc_type_malloc(v6, 0x6AA5989CuLL);
  *(void *)(a3 + 32) = v7;
  if (v7)
  {
    *(void *)(a3 + 24) = 8 * v6;
    uint64_t v16 = sub_213CC6D44(a3);
    if (v16)
    {
      hx509_set_error_string(a1, 0, v16, "malloc - out of memory", v12, v13, v14, v15, v18);
      free(*(void **)(a3 + 32));
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
    }
    else
    {
      int v19 = *(void **)(a3 + 32);
      sub_213CD6390(*(void *)(a2 + 56), &v19);
    }
  }
  else
  {
    uint64_t v16 = 12;
    hx509_set_error_string(a1, 0, 12, "malloc - out of memory", v8, v9, v10, v11, v18);
  }
  return v16;
}

uint64_t sub_213CC6A90(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  *a4 = 0;
  a4[1] = 0;
  if (a3 != 1) {
    return 569934;
  }
  int v7 = sub_213CD6190(*(unsigned int ***)(a2 + 56), 0);
  if (v7 <= 0)
  {
    uint64_t v15 = "Private key is not exportable";
    uint64_t v14 = 22;
    uint64_t v16 = a1;
    int v17 = 22;
LABEL_8:
    hx509_set_error_string(v16, 0, v17, v15, v8, v9, v10, v11, v19);
    return v14;
  }
  uint64_t v12 = v7;
  uint64_t v13 = malloc_type_malloc(v7, 0x4659A2F0uLL);
  a4[1] = v13;
  if (!v13)
  {
    uint64_t v15 = "malloc out of memory";
    uint64_t v14 = 12;
    uint64_t v16 = a1;
    int v17 = 12;
    goto LABEL_8;
  }
  *a4 = v12;
  uint64_t v20 = v13;
  sub_213CD6190(*(unsigned int ***)(a2 + 56), &v20);
  return 0;
}

uint64_t sub_213CC6B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6 = 569965;
  if (a5 != 1) {
    return 569934;
  }
  uint64_t v16 = a3;
  uint64_t v9 = sub_213CD6000(0, &v16, a4);
  *(void *)(a6 + 56) = v9;
  if (v9)
  {
    uint64_t v6 = 0;
    *(void *)(a6 + 40) = &unk_2641E9718;
  }
  else
  {
    hx509_set_error_string(a1, 0, 569965, "Failed to parse RSA key", v10, v11, v12, v13, v15);
  }
  return v6;
}

uint64_t sub_213CC6C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_213CD5AA8();
  *(void *)(a3 + 56) = v5;
  if (v5
    && (uint64_t v10 = sub_213CD46E0(),
        sub_213CD497C(v10, 0x10001uLL),
        int v11 = sub_213CD5FE8(*(void *)(a3 + 56)),
        sub_213CD46FC(v10),
        v11 == 1))
  {
    uint64_t v12 = 0;
    *(void *)(a3 + 40) = &unk_2641E9718;
  }
  else
  {
    uint64_t v12 = 569965;
    hx509_set_error_string(a1, 0, 569965, "Failed to generate RSA key", v6, v7, v8, v9, v14);
  }
  return v12;
}

void *sub_213CC6CC0(int a1, int a2, char *a3)
{
  if (strcasecmp(a3, "rsa-modulus") && strcasecmp(a3, "rsa-exponent")) {
    return 0;
  }

  return sub_213CD4774();
}

uint64_t sub_213CC6D44(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x10uLL, 0x108004057E67DB5uLL);
  *(void *)(a1 + 16) = v2;
  if (!v2) {
    return 12;
  }
  uint64_t v3 = malloc_type_malloc(2uLL, 0x3C53B193uLL);
  uint64_t v4 = *(void **)(a1 + 16);
  v4[1] = v3;
  if (!v3)
  {
    free(v4);
    uint64_t v5 = 12;
    goto LABEL_8;
  }
  _WORD *v3 = 5;
  **(void **)(a1 + 16) = 2;
  uint64_t v5 = der_copy_oid();
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      free(*(void **)(v6 + 8));
      free(*(void **)(a1 + 16));
LABEL_8:
      *(void *)(a1 + 16) = 0;
    }
  }
  return v5;
}

BOOL sub_213CC6E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 48) != 3) {
    sub_213CC1B28("internal error passing private key to wrong ops", a2, a3, a4, a5, a6, a7, a8, v11);
  }
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = (&off_2641E8320)[v8];
    if (!der_heim_oid_cmp()) {
      break;
    }
    if (++v8 == 15) {
      return 0;
    }
  }
  return *((_DWORD *)v9 + 20) != 0;
}

uint64_t sub_213CC6E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v40 = 0;
  uint64_t v10 = *(void *)(a3 + 216);
  uint64_t v11 = *(void *)(a3 + 208) >> 3;
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  uint64_t v12 = sub_213CD64A8(0, &v36, v11);
  if (v12)
  {
    int v17 = v12;
    int v18 = sub_213CD5DDC((uint64_t)v12);
    char v19 = malloc_type_malloc(v18, 0x178515CCuLL);
    if (!v19)
    {
      uint64_t v31 = "out of memory";
      uint64_t v30 = 12;
      uint64_t v32 = a1;
      int v33 = 12;
      goto LABEL_16;
    }
    int v24 = v19;
    int v25 = sub_213CD5DF0(*a6, *((void *)a6 + 1), (uint64_t)v19, (uint64_t)v17);
    if (v25 <= 0)
    {
      uint64_t v30 = 569925;
      hx509_set_error_string(a1, 0, 569925, "RSA public decrypt failed: %d", v20, v21, v22, v23, v25);
      free(v24);
LABEL_17:
      sub_213CD2E60((uint64_t)&v38);
      sub_213CD5B74(v17);
      return v30;
    }
    if (v25 > v18) {
      sub_213CC1B28("internal rsa decryption failure: ret > tosize", v26, v27, v28, v20, v21, v22, v23, v35);
    }
    uint64_t v29 = v25;
    if ((*(unsigned char *)(a2 + 43) & 1) == 0)
    {
      if (*(void *)a5 == v25 && !ct_memcmp((unsigned __int8 *)v24, *(unsigned __int8 **)(a5 + 8), v25))
      {
        free(v24);
        uint64_t v30 = 0;
        goto LABEL_17;
      }
      uint64_t v30 = 569925;
      uint64_t v31 = "RSA Signature incorrect";
      goto LABEL_9;
    }
    uint64_t v30 = sub_213CD2E10((uint64_t)v24, v25, (uint64_t)&v38, (uint64_t)&v37);
    free(v24);
    if (v30)
    {
      uint64_t v31 = "Failed to decode RSA DigestInfo";
LABEL_15:
      uint64_t v32 = a1;
      int v33 = v30;
      goto LABEL_16;
    }
    if (v37 == v29)
    {
      if (*(void *)(a2 + 32) && der_heim_oid_cmp())
      {
        uint64_t v30 = 569926;
        uint64_t v31 = "object identifier in RSA sig mismatch";
        goto LABEL_15;
      }
      if (!(void)v39 || *(void *)v39 == 2 && **(_WORD **)(v39 + 8) == 5)
      {
        uint64_t v30 = hx509_verify_signature_0(a1, 0, (uint64_t)&v38, a5, (uint64_t)&v39 + 8);
        goto LABEL_17;
      }
      uint64_t v30 = 569925;
      uint64_t v31 = "Extra parameters inside RSA signature";
    }
    else
    {
      uint64_t v30 = 569925;
      uint64_t v31 = "size from decryption mismatch";
    }
LABEL_9:
    uint64_t v32 = a1;
    int v33 = 569925;
LABEL_16:
    hx509_set_error_string(v32, 0, v33, v31, v20, v21, v22, v23, v35);
    goto LABEL_17;
  }
  uint64_t v30 = 12;
  hx509_set_error_string(a1, 0, 12, "out of memory", v13, v14, v15, v16, v35);
  sub_213CD2E60((uint64_t)&v38);
  return v30;
}

uint64_t sub_213CC7120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, void *a7)
{
  if (*(void *)(a3 + 64) && der_heim_oid_cmp()) {
    return 569866;
  }
  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    int v14 = 7;
    uint64_t v13 = &unk_2641E8158;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    int v14 = 6;
    uint64_t v13 = &unk_2641E8170;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    int v14 = 5;
    uint64_t v13 = &unk_2641E8188;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (!der_heim_oid_cmp()) {
    goto LABEL_18;
  }
  if (!der_heim_oid_cmp())
  {
    char v15 = 0;
    int v14 = 2;
    uint64_t v13 = &unk_2641E81B8;
    if (!a6) {
      goto LABEL_25;
    }
LABEL_23:
    uint64_t v16 = sub_213CC6D44(a6);
    if (v16)
    {
      uint64_t v12 = v16;
      hx509_clear_error_string(a1);
      return v12;
    }
    goto LABEL_25;
  }
  if (!der_heim_oid_cmp() || !der_heim_oid_cmp())
  {
LABEL_18:
    char v15 = 0;
    int v14 = 4;
    uint64_t v13 = &unk_2641E81A0;
    if (!a6) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (der_heim_oid_cmp()) {
    return 569866;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  char v15 = 1;
  if (a6) {
    goto LABEL_23;
  }
LABEL_25:
  long long v39 = 0uLL;
  if (v15)
  {
    unint64_t v17 = *a5;
    if (v17 > (int)sub_213CD5DDC(*(void *)(a3 + 56)))
    {
      uint64_t v12 = 569888;
      hx509_set_error_string(a1, 0, 569888, "RSA private decrypt failed: %d", v18, v19, v20, v21, 32);
      return v12;
    }
    long long v39 = *(_OWORD *)a5;
  }
  else
  {
    uint64_t v12 = sub_213CC4DCC(a1, 0, (uint64_t)v13, (uint64_t)a5, 0, (uint64_t)&v39);
    if (v12) {
      return v12;
    }
  }
  int v22 = sub_213CD5DDC(*(void *)(a3 + 56));
  *a7 = v22;
  uint64_t v23 = malloc_type_malloc(v22, 0x7E0EBE16uLL);
  a7[1] = v23;
  if (v23)
  {
    if (v15)
    {
      int v35 = sub_213CD5DE4(v39, *((uint64_t *)&v39 + 1), (uint64_t)v23, *(void *)(a3 + 56));
    }
    else
    {
      int v38 = 0;
      if (sub_213CD5E14(v14, *((uint64_t *)&v39 + 1), v39, (uint64_t)v23, &v38, *(void *)(a3 + 56)) == 1) {
        int v35 = v38;
      }
      else {
        int v35 = -1;
      }
    }
    if (a5[1] != *((void *)&v39 + 1)) {
      der_free_octet_string();
    }
    if (v35 <= 0)
    {
      uint64_t v12 = 569888;
      hx509_set_error_string(a1, 0, 569888, "RSA private encrypt failed: %d", v31, v32, v33, v34, 32);
    }
    else
    {
      if (*a7 < (unint64_t)v35) {
        sub_213CC1B28("RSA signature prelen longer the output len", v28, v29, v30, v31, v32, v33, v34, v37);
      }
      uint64_t v12 = 0;
      *a7 = v35;
    }
  }
  else
  {
    if (a5[1] != *((void *)&v39 + 1)) {
      der_free_octet_string();
    }
    uint64_t v12 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v24, v25, v26, v27, v37);
  }
  return v12;
}

uint64_t sub_213CC7490()
{
  return 0;
}

uint64_t sub_213CC7498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (*(void *)(a3 + 64) && der_heim_oid_cmp()) {
    sub_213CC1B28("internal error passing private key to wrong ops", v13, v14, v15, v16, v17, v18, v19, v38);
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unsigned int v39 = 0;
  uint64_t v20 = *(void *)(a2 + 32);
  if (a6)
  {
    uint64_t v21 = sub_213CC6D44(a6);
    if (v21)
    {
      uint64_t v22 = v21;
      hx509_clear_error_string(a1);
LABEL_17:
      free_AlgorithmIdentifier(a6);
      return v22;
    }
    uint64_t v23 = sub_213CC4DCC(a1, 0, v20, a5, 0, (uint64_t)&v40);
    if (v23)
    {
      uint64_t v22 = v23;
      free_AlgorithmIdentifier(a6);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v22 = sub_213CC4DCC(a1, 0, *(void *)(a2 + 32), a5, 0, (uint64_t)&v40);
    if (v22) {
      return v22;
    }
  }
  int v24 = sub_213CD763C();
  *a7 = v24;
  uint64_t v25 = malloc_type_malloc(v24, 0x6C4BCFAFuLL);
  a7[1] = v25;
  if (v25)
  {
    int v26 = sub_213CD7624(0xFFFFFFFFLL, v41, v40, (uint64_t)v25, (uint64_t)&v39, *(void *)(a3 + 56));
    der_free_octet_string();
    if (v26 == 1)
    {
      if (*a7 < (unint64_t)v39) {
        sub_213CC1B28("ECDSA signature prelen longer the output len", v27, v28, v29, v30, v31, v32, v33, v38);
      }
      uint64_t v22 = 0;
      *a7 = v39;
      return v22;
    }
    uint64_t v22 = 569888;
    char v38 = 32;
    uint64_t v34 = "ECDSA sign failed: %d";
    uint64_t v35 = a1;
    int v36 = 569888;
  }
  else
  {
    der_free_octet_string();
    uint64_t v34 = "out of memory";
    uint64_t v22 = 12;
    uint64_t v35 = a1;
    int v36 = 12;
  }
  hx509_set_error_string(v35, 0, v36, v34, v30, v31, v32, v33, v38);
  if (a6) {
    goto LABEL_17;
  }
  return v22;
}

uint64_t sub_213CC7674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(int *)(a2 + 80);
  if (v10 <= 0x80 && *(void *)a6 == v10)
  {
    if (CCDigestCreate())
    {
      CCDigestUpdate();
      CCDigestFinal();
      CCDigestDestroy();
      if (ct_memcmp(v19, *(unsigned __int8 **)(a6 + 8), v10))
      {
        uint64_t v12 = 569923;
        hx509_set_error_string(a1, 0, 569923, "Bad %s sigature", v14, v15, v16, v17, *(void *)a2);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 12;
    }
  }
  else
  {
    uint64_t v12 = 569925;
    hx509_set_error_string(a1, 0, 569925, "%s sigature have wrong length (%lu)", a5, a6, a7, a8, *(void *)a2);
  }
  return v12;
}

uint64_t sub_213CC77A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, size_t *a7)
{
  *a7 = 0;
  a7[1] = 0;
  if (!CCDigestCreate()) {
    return 12;
  }
  if (!a6 || (uint64_t v9 = sub_213CC6D44(a6), !v9))
  {
    size_t v11 = CCDigestOutputSize();
    *a7 = v11;
    uint64_t v12 = malloc_type_malloc(v11, 0xF32FC355uLL);
    a7[1] = (size_t)v12;
    if (v12)
    {
      CCDigestUpdate();
      CCDigestFinal();
      CCDigestDestroy();
      return 0;
    }
    CCDigestDestroy();
    *a7 = 0;
    return 12;
  }
  uint64_t v10 = v9;
  CCDigestDestroy();
  return v10;
}

uint64_t sub_213CC7874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = 0;
  if (*(void *)(a2 + 64)) {
    sub_213CD8800();
  }
  uint64_t v4 = a3;
  if (a3)
  {
    size_t v7 = sub_213CD2230(a3);
    *(void *)a4 = v7;
    uint64_t v8 = malloc_type_malloc(v7, 0x17E651FEuLL);
    *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v8;
    if (!v8)
    {
      uint64_t v4 = 12;
      goto LABEL_7;
    }
    uint64_t v9 = sub_213CD2210((uint64_t)v8 + *(void *)a4 - 1, *(void *)a4, v4, (uint64_t)&v19);
    if (v9)
    {
      uint64_t v4 = v9;
      free(*(void **)(a4 + 8));
      *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
LABEL_7:
      hx509_clear_error_string(a1);
      return v4;
    }
    if (v19 != *(void *)a4) {
      sub_213CC1B28("Internal asn1 encoder failure", v10, v11, v12, v13, v14, v15, v16, v18);
    }
    return 0;
  }
  return v4;
}

uint64_t sub_213CC7944(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v5 = sub_213CD21F0(a2[1], *a2, a4, 0);
  if (v5) {
    hx509_clear_error_string(a1);
  }
  return v5;
}

uint64_t hx509_env_add(uint64_t a1, uint64_t *a2, const char *a3, const char *a4)
{
  uint64_t v8 = malloc_type_malloc(0x20uLL, 0x1032040EBA6683AuLL);
  if (!v8)
  {
    uint64_t v19 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v9, v10, v11, v12, v21);
    return v19;
  }
  uint64_t v13 = v8;
  *(_DWORD *)uint64_t v8 = 0;
  void v8[2] = 0;
  uint64_t v14 = strdup(a3);
  v13[1] = v14;
  if (!v14)
  {
LABEL_9:
    free(v13);
    return 12;
  }
  uint64_t v15 = v14;
  uint64_t v16 = strdup(a4);
  v13[3] = v16;
  if (!v16)
  {
    free(v15);
    goto LABEL_9;
  }
  uint64_t v17 = *a2;
  if (*a2)
  {
    do
    {
      uint64_t v18 = v17;
      uint64_t v17 = *(void *)(v17 + 16);
    }
    while (v17);
    uint64_t v19 = 0;
    *(void *)(v18 + 16) = v13;
  }
  else
  {
    uint64_t v19 = 0;
    *a2 = (uint64_t)v13;
  }
  return v19;
}

uint64_t hx509_env_add_binding(uint64_t a1, uint64_t *a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = malloc_type_malloc(0x20uLL, 0x1032040EBA6683AuLL);
  if (v8)
  {
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v8 = 1;
    void v8[2] = 0;
    uint64_t v14 = strdup(a3);
    v13[1] = v14;
    if (v14)
    {
      v13[3] = a4;
      uint64_t v15 = *a2;
      if (*a2)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(void *)(v15 + 16);
        }
        while (v15);
        uint64_t v17 = 0;
        *(void *)(v16 + 16) = v13;
      }
      else
      {
        uint64_t v17 = 0;
        *a2 = (uint64_t)v13;
      }
    }
    else
    {
      free(v13);
      return 12;
    }
  }
  else
  {
    uint64_t v17 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v9, v10, v11, v12, v19);
  }
  return v17;
}

uint64_t hx509_env_lfind(int a1, uint64_t a2, char *__s1, size_t __n)
{
  if (!a2) {
    return 0;
  }
  uint64_t v6 = a2;
  while (1)
  {
    size_t v7 = *(const char **)(v6 + 8);
    if (!strncmp(__s1, v7, __n) && !v7[__n] && !*(_DWORD *)v6) {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 16);
    if (!v6) {
      return 0;
    }
  }
  return *(void *)(v6 + 24);
}

uint64_t hx509_env_find(int a1, uint64_t a2, char *__s1)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a2;
  while (strcmp(__s1, *(const char **)(v4 + 8)) || *(_DWORD *)v4)
  {
    uint64_t v4 = *(void *)(v4 + 16);
    if (!v4) {
      return 0;
    }
  }
  return *(void *)(v4 + 24);
}

uint64_t hx509_env_find_binding(int a1, uint64_t a2, char *__s1)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a2;
  while (strcmp(__s1, *(const char **)(v4 + 8)) || *(_DWORD *)v4 != 1)
  {
    uint64_t v4 = *(void *)(v4 + 16);
    if (!v4) {
      return 0;
    }
  }
  return *(void *)(v4 + 24);
}

void hx509_env_free(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_213CC7CC8(v2);
  }
  *a1 = 0;
}

void sub_213CC7CC8(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = v1;
      uint64_t v1 = (void *)v1[2];
      if (*(_DWORD *)v2 == 1)
      {
        sub_213CC7CC8(*((void *)v2 + 3));
      }
      else if (!*(_DWORD *)v2)
      {
        free(*((void **)v2 + 3));
      }
      free(*((void **)v2 + 1));
      free(v2);
    }
    while (v1);
  }
}

void hx509_clear_error_string(uint64_t a1)
{
  if (a1)
  {
    heim_release(*(CFTypeRef *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
}

void hx509_set_error_stringv(uint64_t a1, char a2, int a3, const char *a4, va_list a5)
{
  if (a1)
  {
    uint64_t v7 = heim_error_createv(a3, a4, a5);
    uint64_t v8 = v7;
    if (v7)
    {
      if (a2) {
        heim_error_append(v7, *(CFTypeRef *)(a1 + 24));
      }
      heim_release(*(CFTypeRef *)(a1 + 24));
    }
    *(void *)(a1 + 24) = v8;
  }
}

void hx509_set_error_string(uint64_t a1, char a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

char *hx509_get_error_string(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v9 = 0;
  if (v4 && heim_error_get_code(v4) == a2)
  {
    uint64_t result = (char *)heim_error_copy_string(v4);
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = heim_string_copy_utf8((const __CFString *)result);
      heim_release(v6);
      return v7;
    }
  }
  else
  {
    uint64_t v8 = com_right_r(*(void **)(a1 + 32), a2, __dst, 0x100uLL);
    if (v8) {
      return strdup(v8);
    }
    uint64_t v8 = strerror(a2);
    if (v8)
    {
      return strdup(v8);
    }
    else if (asprintf(&v9, "<unknown error: %d>", a2) == -1)
    {
      return 0;
    }
    else
    {
      return v9;
    }
  }
  return result;
}

void hx509_err(uint64_t a1, int a2, int a3, char *a4, ...)
{
  va_start(va, a4);
  v9[0] = 0;
  va_copy((va_list)&v9[1], va);
  vasprintf(v9, a4, va);
  error_string = hx509_get_error_string(a1, a3);
  uint64_t v8 = "no error";
  if (error_string) {
    uint64_t v8 = error_string;
  }
  errx(a2, "%s: %s", v9[0], v8);
}

uint64_t _hx509_map_file_os(const char *a1, void *a2)
{
  uint64_t v5 = 0;
  off_t v6 = 0;
  uint64_t result = rk_undumpdata(a1, &v5, &v6);
  uint64_t v4 = v5;
  *a2 = v6;
  a2[1] = v4;
  return result;
}

void _hx509_unmap_file_os(uint64_t a1)
{
}

uint64_t _hx509_write_file(const char *a1, char *a2, size_t a3)
{
  return 0;
}

uint64_t hx509_pem_write(uint64_t a1, const char *a2, uint64_t **a3, FILE *a4, uint64_t a5, unint64_t a6)
{
  char v21 = 0;
  fprintf(a4, "-----%s %s-----\n", "BEGIN", a2);
  for (; a3; a3 = (uint64_t **)*a3)
  {
    if (*a3) {
      uint64_t v12 = "";
    }
    else {
      uint64_t v12 = "\n";
    }
    fprintf(a4, "%s: %s\n%s", (const char *)a3[1], (const char *)a3[2], v12);
  }
  if (a6)
  {
    while (1)
    {
      uint64_t v13 = a6 >= 0x36 ? 54 : a6;
      if ((base64_encode(a5, v13, (const char **)&v21) & 0x80000000) != 0) {
        break;
      }
      a6 -= v13;
      fprintf(a4, "%s\n", (const char *)v21);
      a5 += v13;
      free(v21);
      if (!a6) {
        goto LABEL_12;
      }
    }
    uint64_t v18 = 12;
    hx509_set_error_string(a1, 0, 12, "malloc - out of memory", v14, v15, v16, v17, v20);
  }
  else
  {
LABEL_12:
    fprintf(a4, "-----%s %s-----\n", "END", a2);
    return 0;
  }
  return v18;
}

uint64_t hx509_pem_add_header(void *a1, const char *a2, const char *a3)
{
  off_t v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x30040F310086FuLL);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = strdup(a2);
    v7[1] = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = strdup(a3);
      void v7[2] = v10;
      if (v10)
      {
        uint64_t result = 0;
        void *v7 = *a1;
        *a1 = v7;
        return result;
      }
      free(v9);
    }
    free(v7);
  }
  return 12;
}

void hx509_pem_free_header(void **a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void **)*v1;
      free(v1[1]);
      free(v1[2]);
      free(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t hx509_pem_find_header(uint64_t result, char *__s1)
{
  if (result)
  {
    uint64_t v3 = result;
    while (strcmp(__s1, *(const char **)(v3 + 8)))
    {
      uint64_t v3 = *(void *)v3;
      if (!v3) {
        return 0;
      }
    }
    return *(void *)(v3 + 16);
  }
  return result;
}

size_t hx509_pem_read(uint64_t a1, FILE *a2, uint64_t (*a3)(uint64_t, char *, void **, char *, size_t, uint64_t), uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  size_t v7 = 569965;
  uint64_t v33 = 0;
  if (fgets(__s, 1024, a2))
  {
    LODWORD(v7) = 0;
    size_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned int v32 = 569965;
    while (2)
    {
      int v11 = strcspn(__s, "\n");
      int v12 = v11;
      if (__s[v11] == 10)
      {
        __s[v11] = 0;
        int v12 = v11 - (v11 > 0);
      }
      if (__s[v12] == 13)
      {
        __s[v12] = 0;
        v12 -= v12 > 0;
      }
      switch((int)v7)
      {
        case 0:
          BOOL v13 = *(void *)__s == 0x4745422D2D2D2D2DLL && *(void *)&__s[3] == 0x204E494745422D2DLL;
          if (v13 && (int v24 = strdup(v35), (v10 = v24) != 0))
          {
            uint64_t v25 = strchr(v24, 45);
            if (v25) {
              *uint64_t v25 = 0;
            }
            LODWORD(v7) = 1;
          }
          else
          {
            LODWORD(v7) = 0;
          }
          goto LABEL_39;
        case 1:
          if (strchr(__s, 58)) {
            goto LABEL_14;
          }
          goto LABEL_23;
        case 2:
LABEL_14:
          if (!__s[0])
          {
            LODWORD(v7) = 3;
            goto LABEL_39;
          }
          uint64_t v14 = strchr(__s, 58);
          if (!v14) {
            goto LABEL_39;
          }
          uint64_t v15 = v14;
          *uint64_t v14 = 0;
          do
          {
            while (1)
            {
              unsigned int v17 = *++v15;
              unsigned int v16 = v17;
              if ((v17 & 0x80000000) != 0) {
                break;
              }
              if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v16 + 60) & 0x4000) == 0) {
                goto LABEL_21;
              }
            }
          }
          while (__maskrune(v16, 0x4000uLL));
LABEL_21:
          if (hx509_pem_add_header(&v33, __s, v15)) {
            abort();
          }
          goto LABEL_38;
        case 3:
LABEL_23:
          if (*(void *)__s == 0x444E452D2D2D2D2DLL && __s[8] == 32)
          {
            size_t v7 = a3(a1, v10, v33, v9, v8, a4);
          }
          else
          {
            char v19 = sub_213CB7A94(v12);
            unsigned int v20 = base64_decode(__s, v19);
            if ((v20 & 0x80000000) == 0)
            {
              size_t v7 = v20;
              char v21 = v10;
              uint64_t v22 = a3;
              size_t v23 = v8;
              v8 += v20;
              uint64_t v9 = (char *)sub_213CB7AE4(v9, v8);
              memcpy(&v9[v23], v19, v7);
              free(v19);
              LODWORD(v7) = 3;
              a3 = v22;
              uint64_t v10 = v21;
              goto LABEL_39;
            }
            free(v19);
            size_t v7 = v32;
          }
          free(v9);
          free(v10);
          hx509_pem_free_header(v33);
          uint64_t v33 = 0;
          if (v7) {
            return v7;
          }
          uint64_t v10 = 0;
          uint64_t v9 = 0;
          size_t v8 = 0;
LABEL_38:
          unsigned int v32 = 0;
LABEL_39:
          if (fgets(__s, 1024, a2)) {
            continue;
          }
          if (v7)
          {
            hx509_set_error_string(a1, 0, 569965, "File ends before end of PEM end tag", v26, v27, v28, v29, (char)v35);
            unsigned int v32 = 569965;
          }
          if (v9) {
            free(v9);
          }
          if (v10) {
            free(v10);
          }
          size_t v7 = v32;
          if (v33) {
            hx509_pem_free_header(v33);
          }
          break;
        default:
          goto LABEL_39;
      }
      break;
    }
  }
  return v7;
}

const char **sub_213CC862C(uint64_t a1, char *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1) {
    return 0;
  }
  for (unint64_t i = *(const char ****)a1; ; ++i)
  {
    uint64_t v5 = *i;
    if (!strcasecmp(a2, **i)) {
      break;
    }
    if (!--v2) {
      return 0;
    }
  }
  return v5;
}

uint64_t hx509_certs_init(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, void *a5)
{
  size_t v8 = __s;
  *a5 = 0;
  uint64_t v10 = strchr(__s, 58);
  if (v10)
  {
    int v11 = v10;
    size_t v12 = v10 - v8 + 1;
    BOOL v13 = (char *)malloc_type_malloc(v12, 0x794DCE47uLL);
    uint64_t v14 = v13;
    if (v13) {
      strlcpy(v13, v8, v12);
    }
    int v16 = v11[1];
    uint64_t v15 = v11 + 1;
    if (v16) {
      size_t v8 = v15;
    }
    else {
      size_t v8 = 0;
    }
    if (!v14) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = strdup("MEMORY");
    if (!v14)
    {
LABEL_14:
      hx509_clear_error_string(a1);
      return 12;
    }
  }
  unsigned int v17 = sub_213CC862C(a1, v14);
  if (!v17)
  {
    uint64_t v30 = 2;
    hx509_set_error_string(a1, 0, 2, "Keyset type %s is not supported", v18, v19, v20, v21, (char)v14);
    free(v14);
    return v30;
  }
  uint64_t v22 = v17;
  free(v14);
  uint64_t v28 = heim_uniq_alloc(0x30uLL, (uint64_t)"hx509-certs", (uint64_t)sub_213CC880C, v23, v24, v25, v26, v27);
  if (!v28) {
    goto LABEL_14;
  }
  uint64_t v29 = (const void *)v28;
  *(void *)(v28 + 32) = v22;
  uint64_t v30 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const char *, uint64_t))v22[2])(a1, v28, v28 + 40, a3, v8, a4);
  if (v30) {
    heim_release(v29);
  }
  else {
    *a5 = v29;
  }
  return v30;
}

uint64_t sub_213CC880C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 32) + 32))(a1, *(void *)(a1 + 40));
}

uint64_t hx509_certs_store(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v8[3];
  if (v9)
  {
    uint64_t v12 = *(void *)(a2 + 40);
    return v9(a1, a2, v12, a3, a4);
  }
  else
  {
    hx509_set_error_string(a1, 0, 569966, "keystore if type %s doesn't support store operation", a5, 0, a7, a8, *v8);
    return 569966;
  }
}

void hx509_certs_free(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      heim_release(v2);
      *a1 = 0;
    }
  }
}

uint64_t hx509_certs_start_seq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8[7];
  if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 40);
    return v9(a1, a2, v11, a3);
  }
  else
  {
    hx509_set_error_string(a1, 0, 569966, "Keyset type %s doesn't support iteration", 0, a6, a7, a8, *v8);
    return 569966;
  }
}

uint64_t hx509_certs_next_cert(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 64))(a1, a2, *(void *)(a2 + 40), a3);
}

uint64_t hx509_certs_end_seq(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t hx509_certs_iter_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = 0;
  uint64_t started = hx509_certs_start_seq(a1, a2, (uint64_t)&v16, a4, a5, a6, a7, a8);
  if (!started)
  {
    while (1)
    {
      uint64_t v15 = 0;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64))(a1, a2, *(void *)(a2 + 40), v16, &v15);
      if (v13)
      {
        uint64_t started = v13;
        goto LABEL_8;
      }
      if (!v15) {
        break;
      }
      uint64_t started = a3(a1, a4);
      hx509_cert_free(v15);
      if (started) {
        goto LABEL_8;
      }
    }
    uint64_t started = 0;
LABEL_8:
    (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72))(a1, a2, *(void *)(a2 + 40), v16);
  }
  return started;
}

uint64_t hx509_certs_iter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_iter_f(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_213CC8A64, a3, a5, a6, a7, a8);
}

uint64_t sub_213CC8A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a3);
}

uint64_t hx509_ci_print_names(uint64_t a1, FILE *a2, uint64_t a3)
{
  size_t v8 = 0;
  off_t v6 = 0;
  size_t v7 = 0;
  uint64_t v4 = sub_213CBE6DC(a3);
  hx509_name_from_Name(v4 + 144, &v8);
  hx509_name_to_string(v8, &v7);
  hx509_name_free((uint64_t *)&v8);
  hx509_name_from_Name(v4 + 72, &v8);
  hx509_name_to_string(v8, &v6);
  hx509_name_free((uint64_t *)&v8);
  fprintf(a2, "subject: %s\nissuer: %s\n", (const char *)v7, (const char *)v6);
  free(v7);
  free(v6);
  return 0;
}

uint64_t hx509_certs_add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8[5];
  if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 40);
    return v9(a1, a2, v11, a3);
  }
  else
  {
    hx509_set_error_string(a1, 0, 2, "Keyset type %s doesn't support add operation", 0, a6, a7, a8, *v8);
    return 2;
  }
}

uint64_t hx509_certs_find(uint64_t a1, uint64_t a2, int *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a4 = 0;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void, int *, void *))(*(void *)(a2 + 32) + 48);
  if (!v12 || (uint64_t started = v12(a1, a2, *(void *)(a2 + 40), a3, a4), started == 569967))
  {
    uint64_t v19 = 0;
    uint64_t started = hx509_certs_start_seq(a1, a2, (uint64_t)&v19, (uint64_t)a4, a5, a6, a7, a8);
    if (!started)
    {
      while (1)
      {
        uint64_t v18 = 0;
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64))(a1, a2, *(void *)(a2 + 40), v19, &v18);
        BOOL v15 = v14 != 0;
        if (v14) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = v18 == 0;
        }
        if (v16)
        {
          uint64_t started = v14;
          goto LABEL_14;
        }
        if (sub_213CC152C(a1, a3, v18)) {
          break;
        }
        hx509_cert_free(v18);
      }
      uint64_t started = 0;
      BOOL v15 = 0;
      *a4 = v18;
LABEL_14:
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72))(a1, a2, *(void *)(a2 + 40), v19);
      if (!v15)
      {
        if (v18)
        {
          return 0;
        }
        else
        {
          uint64_t started = 569873;
          hx509_clear_error_string(a1);
        }
      }
    }
  }
  return started;
}

uint64_t hx509_certs_filter(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  uint64_t v13 = hx509_certs_init(a1, "MEMORY:filter-certs", 0, 0, a4);
  if (v13) {
    return v13;
  }
  uint64_t v29 = 0;
  uint64_t started = hx509_certs_start_seq(a1, a2, (uint64_t)&v29, v8, v9, v10, v11, v12);
  if (started)
  {
    uint64_t v13 = started;
LABEL_20:
    if (a4 && *a4)
    {
      heim_release((CFTypeRef)*a4);
      *a4 = 0;
    }
    return v13;
  }
  uint64_t v28 = 0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64))(a1, a2, *(void *)(a2 + 40), v29, &v28);
  BOOL v17 = v16 != 0;
  uint64_t v18 = v28;
  if (v16) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = v28 == 0;
  }
  if (v19)
  {
    uint64_t v13 = v16;
    int v20 = 0;
  }
  else
  {
    int v20 = 0;
    do
    {
      if (sub_213CC152C(a1, a3, v18))
      {
        hx509_certs_add(a1, *a4, v28, v21, v22, v23, v24, v25);
        int v20 = 1;
      }
      hx509_cert_free(v28);
      uint64_t v28 = 0;
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)(a2 + 32) + 64))(a1, a2, *(void *)(a2 + 40), v29, &v28);
      BOOL v17 = v26 != 0;
      uint64_t v18 = v28;
      if (v26) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v28 == 0;
      }
    }
    while (!v27);
    uint64_t v13 = v26;
  }
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72))(a1, a2, *(void *)(a2 + 40), v29);
  if (v17) {
    goto LABEL_20;
  }
  if (v20) {
    return 0;
  }
  if (a4 && *a4)
  {
    heim_release((CFTypeRef)*a4);
    *a4 = 0;
  }
  hx509_clear_error_string(a1);
  return 569873;
}

uint64_t hx509_certs_merge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3) {
    return hx509_certs_iter_f(a1, a3, (uint64_t (*)(uint64_t, uint64_t))j__hx509_certs_add, a2, a5, a6, a7, a8);
  }
  else {
    return 0;
  }
}

uint64_t hx509_certs_append(uint64_t a1, uint64_t a2, uint64_t a3, char *__s)
{
  uint64_t v13 = 0;
  uint64_t result = hx509_certs_init(a1, __s, 0, a3, &v13);
  if (!result)
  {
    uint64_t v11 = v13;
    if (v13)
    {
      uint64_t v12 = hx509_certs_iter_f(a1, (uint64_t)v13, (uint64_t (*)(uint64_t, uint64_t))j__hx509_certs_add, a2, v7, v8, v9, v10);
      heim_release(v11);
      return v12;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t hx509_get_one_cert(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = 0;
  *a3 = 0;
  uint64_t result = hx509_certs_start_seq(a1, a2, (uint64_t)&v13, a4, a5, a6, a7, a8);
  if (!result)
  {
    uint64_t v12 = v13;
    *a3 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void *))(*(void *)(a2 + 32) + 64))(a1, a2, *(void *)(a2 + 40), v12, a3);
    if (!result)
    {
      (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(a2 + 32) + 72))(a1, a2, *(void *)(a2 + 40), v13);
      return 0;
    }
  }
  return result;
}

uint64_t hx509_certs_info(uint64_t a1, uint64_t a2, uint64_t (*a3)(FILE *a1, const char *a2), FILE *a4)
{
  unint64_t v5 = (unint64_t)a3 | (unint64_t)a4;
  if (a3) {
    off_t v6 = a3;
  }
  else {
    off_t v6 = sub_213CC9044;
  }
  if (v5) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = (FILE *)*MEMORY[0x263EF8358];
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(FILE *, const char *), FILE *))(*(void *)(a2 + 32) + 80);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    return v8(a1, a2, v9, v6, v7);
  }
  else
  {
    v6(v7, "No info function for certs");
    return 0;
  }
}

uint64_t sub_213CC9044(FILE *a1, const char *a2)
{
  return 0;
}

uint64_t _hx509_certs_keys_get(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void, void *))(*(void *)(a2 + 32) + 88);
  if (v3) {
    return v3(a1, a2, *(void *)(a2 + 40), a3);
  }
  *a3 = 0;
  return 0;
}

uint64_t sub_213CC9098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void **)(a2 + 32);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8[12];
  if (v9)
  {
    uint64_t v11 = *(void *)(a2 + 40);
    return v9(a1, a2, v11, a3);
  }
  else
  {
    hx509_set_error_string(a1, 0, 22, "keystore if type %s doesn't support key add operation", 0, a6, a7, a8, *v8);
    return 22;
  }
}

void _hx509_certs_keys_free(int a1, const void **a2)
{
  if (*a2)
  {
    uint64_t v3 = a2;
    do
    {
      hx509_private_key_free(v3);
      uint64_t v4 = v3[1];
      ++v3;
    }
    while (v4);
  }

  free(a2);
}

uint64_t sub_213CC9154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = 0;
  uint64_t inited = hx509_cert_init_data(a1, a5, a6, (CFTypeRef *)&v15);
  if (!inited)
  {
    uint64_t inited = sub_213CC4498(a1, a3, v15, v8, v9, v10, v11, v12);
    hx509_cert_free(v15);
  }
  return inited;
}

uint64_t sub_213CC91C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = 0;
  long long v14 = 0u;
  memset(v13, 0, sizeof(v13));
  uint64_t v10 = sub_213CBC144(a5, a6, (uint64_t)v13, 0);
  if (!v10)
  {
    v12[0] = a6;
    v12[1] = a5;
    uint64_t v10 = sub_213CC44A0(a1, a3, (uint64_t)&v13[1] + 8, 0, (uint64_t *)&v14, (uint64_t)v12);
    sub_213CBC194((uint64_t)v13);
  }
  return v10;
}

uint64_t sub_213CC9268(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6, uint64_t a7)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t header = hx509_pem_find_header(a4, "Proc-Type");
  if (!header)
  {
    *(void *)__s = a6;
    uint64_t v55 = a5;
    return sub_213CC44A0(a1, a3, a7, 0, (uint64_t *)__s, 0);
  }
  uint64_t v15 = (const char *)header;
  uint64_t v16 = sub_213CC4490(a3);
  if (!v16)
  {
    uint64_t v26 = 569866;
    hx509_set_error_string(a1, 0, 569866, "Failed to get password for password protected file %s", v17, v18, v19, v20, a2);
    return v26;
  }
  uint64_t v21 = v16;
  if (!strcmp(v15, "4,ENCRYPTED"))
  {
    BOOL v27 = (const char *)hx509_pem_find_header(a4, "DEK-Info");
    if (v27)
    {
      unsigned int v32 = strdup(v27);
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v34 = strchr(v32, 44);
        if (!v34)
        {
          uint64_t v26 = 569965;
          free(v33);
          uint64_t v40 = "IV missing";
          goto LABEL_18;
        }
        char *v34 = 0;
        uint64_t v35 = v34 + 1;
        size_t v36 = strlen(v34 + 1);
        char v37 = malloc_type_malloc(v36, 0xE5F0364DuLL);
        if (v37)
        {
          char v38 = v37;
          uint64_t cipherbyname = hc_EVP_get_cipherbyname(v33);
          if (cipherbyname)
          {
            uint64_t v39 = rk_hex_decode(v35, v38, v36);
            free(v33);
            if (v39 < 8 || v39 < (unint64_t)hc_EVP_CIPHER_iv_length(cipherbyname))
            {
              uint64_t v26 = 569965;
              free(v38);
              uint64_t v40 = "Salt have wrong length in private key file";
LABEL_18:
              hx509_set_error_string(a1, 0, 569965, v40, v28, v29, v30, v31, size);
              return v26;
            }
            long long v47 = (void *)nullsub_1(v21);
            if (v47 && (uint64_t v48 = v47, *v47))
            {
              uint64_t v49 = 0;
              while (1)
              {
                size_t v50 = strlen(*(const char **)(v48[1] + 8 * v49));
                if (!sub_213CC964C(a1, a3, a7, cipherbyname, v38, *(void *)(v48[1] + 8 * v49), v50, a5, a6))break; {
                if ((unint64_t)++v49 >= *v48)
                }
                  goto LABEL_28;
              }
              uint64_t v26 = 0;
            }
            else
            {
LABEL_28:
              uint64_t v26 = hx509_lock_prompt(v21);
              if (!v26)
              {
                size_t v51 = strlen(__s);
                uint64_t v26 = sub_213CC964C(a1, a3, a7, cipherbyname, v38, (uint64_t)__s, v51, a5, a6);
              }
            }
            long long v46 = v38;
          }
          else
          {
            free(v38);
            uint64_t v26 = 569866;
            hx509_set_error_string(a1, 0, 569866, "Private key encrypted with unsupported cipher: %s", v42, v43, v44, v45, (char)v33);
            long long v46 = v33;
          }
          free(v46);
          return v26;
        }
        hx509_clear_error_string(a1);
        free(v33);
      }
      else
      {
        hx509_clear_error_string(a1);
      }
      return 12;
    }
    uint64_t v26 = 569965;
    uint64_t v40 = "Encrypted private key missing DEK-Info";
    goto LABEL_18;
  }
  uint64_t v26 = 569965;
  hx509_set_error_string(a1, 0, 569965, "Private key encrypted in unknown method %s in file %s", v22, v23, v24, v25, (char)v15);
  hx509_clear_error_string(a1);
  return v26;
}

void *sub_213CC95F4(uint64_t a1)
{
  sub_213C76B00(a1, &off_26AA94870);
  sub_213C76B00(a1, &off_26AA949A8);

  return sub_213C76B00(a1, &off_26AA94808);
}

uint64_t sub_213CC964C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8, size_t size)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  size_t v16 = hc_EVP_CIPHER_key_length(a4);
  uint64_t v17 = malloc_type_malloc(v16, 0x29FA73EAuLL);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = (int *)hc_EVP_md5((uint64_t)v17);
    if ((int)sub_213CD57B0(a4, v19, (uint64_t)a5, a6, a7, 1, (char *)v18, 0) <= 0)
    {
      uint64_t v28 = 569920;
      hx509_set_error_string(a1, 0, 569920, "Failed to do string2key for private key", v20, v21, v22, v23, v30);
    }
    else
    {
      uint64_t v31 = malloc_type_malloc(size, 0x15545EC3uLL);
      if (v31)
      {
        size_t v30 = size;
        uint64_t v33 = 0;
        memset(v32, 0, sizeof(v32));
        hc_EVP_CIPHER_CTX_init((uint64_t)v32);
        hc_EVP_CipherInit_ex((uint64_t)v32, a4, 0, (uint64_t)v18, a5, 0);
        hc_EVP_Cipher((uint64_t)v32);
        hc_EVP_CIPHER_CTX_cleanup((uint64_t *)v32);
        uint64_t v28 = sub_213CC44A0(a1, a2, a3, 0, (uint64_t *)&v30, 0);
        bzero(v31, v30);
        free(v31);
      }
      else
      {
        uint64_t v28 = 12;
        hx509_set_error_string(a1, 0, 12, "Out of memory to decrypt for private key", v24, v25, v26, v27, v30);
      }
      bzero(v18, v16);
      free(v18);
    }
  }
  else
  {
    hx509_clear_error_string(a1);
    return 12;
  }
  return v28;
}

uint64_t sub_213CC984C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, const char *a5, void *a6)
{
  return sub_213CC99A0(a1, a3, a4, a5, a6, 0);
}

uint64_t sub_213CC9864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = fopen(*(const char **)(a3 + 8), "w");
  uint64_t v17 = v5;
  if (v5)
  {
    uint64_t v18 = 0;
    rk_cloexec_file(v5);
    LODWORD(v1init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = *(_DWORD *)(a3 + 16);
    uint64_t v14 = hx509_certs_iter_f(a1, *(void *)a3, (uint64_t (*)(uint64_t, uint64_t))sub_213CC9DB8, (uint64_t)&v17, v10, v11, v12, v13);
    fclose(v17);
  }
  else
  {
    uint64_t v16 = *(void *)(a3 + 8);
    uint64_t v14 = 2;
    hx509_set_error_string(a1, 0, 2, "Failed to open file %s for writing", v6, v7, v8, v9, v16);
  }
  return v14;
}

uint64_t sub_213CC9910(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    hx509_certs_free((const void **)a2);
    free(*(void **)(a2 + 8));
    free((void *)a2);
  }
  return 0;
}

uint64_t sub_213CC9954(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_213CC9960(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_start_seq(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_213CC996C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  return hx509_certs_next_cert(a1, *a3, a4, a5);
}

uint64_t sub_213CC997C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return hx509_certs_end_seq(a1, *a3, a4);
}

uint64_t sub_213CC9988(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  return _hx509_certs_keys_get(a1, *a3, a4);
}

uint64_t sub_213CC9994(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_213CC9098(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_213CC99A0(uint64_t a1, void *a2, unsigned int a3, const char *a4, void *a5, int a6)
{
  char v8 = a3;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = a3;
  *a2 = 0;
  if (a5) {
    uint64_t v11 = a5;
  }
  else {
    uint64_t v11 = off_2678006C8;
  }
  uint64_t v12 = malloc_type_calloc(1uLL, 0x18uLL, 0x10300409B68AA8EuLL);
  if (v12)
  {
    uint64_t v13 = v12;
    *((_DWORD *)v12 + 4) = a6;
    uint64_t v14 = strdup(a4);
    v13[1] = v14;
    if (!v14)
    {
      hx509_clear_error_string(a1);
      size_t v15 = 12;
      goto LABEL_35;
    }
    if (v8)
    {
      size_t v15 = hx509_certs_init(a1, "MEMORY:ks-file-create", 0, (uint64_t)v11, v13);
      if (v15) {
        goto LABEL_35;
      }
      *a2 = v13;
    }
    else
    {
      size_t v15 = sub_213CC439C(a1, (uint64_t)v11, &v44);
      if (v15) {
        goto LABEL_35;
      }
      uint64_t v16 = (char *)v13[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = strchr(v16, 44);
          uint64_t v18 = v17;
          if (v17)
          {
            *uint64_t v17 = 0;
            uint64_t v18 = v17 + 1;
          }
          uint64_t v19 = fopen(v16, "r");
          if (!v19)
          {
            size_t v36 = __error();
            strerror(*v36);
            size_t v15 = 2;
            hx509_set_error_string(a1, 0, 2, "Failed to open PEM file \"%s\": %s", v37, v38, v39, v40, (char)v16);
            goto LABEL_35;
          }
          uint64_t v20 = v19;
          rk_cloexec_file(v19);
          size_t v15 = hx509_pem_read(a1, v20, (uint64_t (*)(uint64_t, char *, void **, char *, size_t, uint64_t))sub_213CC9CA0, (uint64_t)&v43);
          fclose(v20);
          if (v15)
          {
            if (v15 != 569965) {
              goto LABEL_35;
            }
            uint64_t v41 = 0;
            off_t v42 = 0;
            uint64_t v21 = rk_undumpdata(v16, &v41, &v42);
            if (v21)
            {
              size_t v15 = v21;
LABEL_34:
              hx509_clear_error_string(a1);
LABEL_35:
              uint64_t v34 = (void *)v13[1];
              if (v34) {
                free(v34);
              }
              free(v13);
              goto LABEL_38;
            }
            uint64_t v22 = 0;
            while (1)
            {
              uint64_t v23 = (uint64_t (*)(void))(&off_26AA94738)[v22 + 2];
              uint64_t v24 = v23 ? v23() : 0;
              uint64_t v25 = ((uint64_t (*)(uint64_t, char *, void *, void, void *, off_t, uint64_t))(&off_26AA94738)[v22 + 1])(a1, v16, v44, 0, v41, v42, v24);
              if (!v25) {
                break;
              }
              size_t v15 = v25;
              v22 += 3;
              if (v22 == 12)
              {
                j__free(v41);
                goto LABEL_34;
              }
            }
            j__free(v41);
          }
          uint64_t v16 = v18;
        }
        while (v18);
      }
      size_t v15 = sub_213CC465C(a1, (uint64_t *)v44, v13);
      if (v15) {
        goto LABEL_35;
      }
      size_t v15 = sub_213CC48CC(a1, (uint64_t)v44, &v45);
      if (v15) {
        goto LABEL_35;
      }
      uint64_t v31 = (const void **)v45;
      uint64_t v32 = *(void *)v45;
      if (*(void *)v45)
      {
        uint64_t v33 = 8;
        do
        {
          sub_213CC9098(a1, *v13, v32, v26, v27, v28, v29, v30);
          uint64_t v31 = (const void **)v45;
          uint64_t v32 = *(void *)((char *)v45 + v33);
          v33 += 8;
        }
        while (v32);
      }
      _hx509_certs_keys_free(a1, v31);
      size_t v15 = 0;
      *a2 = v13;
LABEL_38:
      if (v44) {
        sub_213CC49D0((char *)v44);
      }
    }
  }
  else
  {
    hx509_clear_error_string(a1);
    return 12;
  }
  return v15;
}

uint64_t sub_213CC9CA0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = 0;
  while (strcasecmp(a2, (&off_26AA94738)[v12]))
  {
    v12 += 3;
    if (v12 == 12)
    {
      uint64_t v17 = 569966;
      hx509_set_error_string(a1, 0, 569966, "Found no matching PEM format for %s", v13, v14, v15, v16, (char)a2);
      return v17;
    }
  }
  uint64_t v18 = &(&off_26AA94738)[v12];
  uint64_t v19 = (uint64_t (*)(void))v18[2];
  if (v19) {
    uint64_t v20 = v19();
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v17 = ((uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))v18[1])(a1, 0, *(void *)(a6 + 8), a3, a4, a5, v20);
  if (v17)
  {
    if ((*(unsigned char *)a6 & 2) != 0) {
      hx509_set_error_string(a1, 1, v17, "Failed parseing PEM format %s", v21, v22, v23, v24, (char)a2);
    }
    else {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_213CC9DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = hx509_cert_binary(a1, a3, (uint64_t)&v11);
  if (!v6)
  {
    int v8 = *(_DWORD *)(a2 + 8);
    if (v8)
    {
      if (v8 != 1) {
        return v6;
      }
      fwrite(v12, v11, 1uLL, *(FILE **)a2);
    }
    else
    {
      hx509_pem_write(a1, "CERTIFICATE", 0, *(FILE **)a2, (uint64_t)v12, v11);
      free(v12);
      if (!sub_213CBFAC4(a3)) {
        return v6;
      }
      uint64_t v9 = _hx509_cert_private_key(a3);
      if (sub_213CC5824(a1, v9)) {
        return v6;
      }
      uint64_t v10 = (const char *)sub_213CC5710(v9);
      hx509_pem_write(a1, v10, 0, *(FILE **)a2, (uint64_t)v12, v11);
    }
    free(v12);
  }
  return v6;
}

uint64_t sub_213CC9EB0(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, const char *a5, void *a6)
{
  return sub_213CC99A0(a1, a3, a4, a5, a6, 1);
}

uint64_t sub_213CC9EC8()
{
  return 1;
}

uint64_t sub_213CC9ED0(int a1, const UInt8 *a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v9 = sub_213CD5CC8(a4);
  if (a5 != 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v10 = *(void *)(v9 + 8);
  size_t v11 = (__SecKey *)sub_213CC9FD4(*(void *)v9, *(const void **)(v9 + 16));
  CFDataRef v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a1);
  CFDataRef DecryptedData = SecKeyCreateDecryptedData(v11, (SecKeyAlgorithm)*MEMORY[0x263F17350], v12, 0);
  CFDataRef v14 = DecryptedData;
  if (DecryptedData)
  {
    unint64_t Length = CFDataGetLength(DecryptedData);
    if (Length <= v10)
    {
      size_t v16 = Length;
      BytePtr = CFDataGetBytePtr(v14);
      memcpy(a3, BytePtr, v16);
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  size_t v16 = 0xFFFFFFFFLL;
  if (v11) {
LABEL_5:
  }
    CFRelease(v11);
LABEL_6:
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v16;
}

uint64_t sub_213CC9FD4(uint64_t a1, const void *a2)
{
  uint64_t Duplicate = SecKeyCreateDuplicate();
  if (!a2 || (CFTypeID v4 = CFGetTypeID(a2), v4 != CFBooleanGetTypeID()) || !CFBooleanGetValue((CFBooleanRef)a2)) {
    SecKeySetParameter();
  }
  return Duplicate;
}

uint64_t sub_213CCA06C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CCA074()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CCA07C()
{
  return 1;
}

uint64_t sub_213CCA084()
{
  return 1;
}

uint64_t sub_213CCA08C(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)sub_213CD761C(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    CFRelease(*v1);
    CFTypeRef v3 = v2[2];
    if (v3) {
      CFRelease(v3);
    }
    free(v2);
  }
  return 1;
}

uint64_t sub_213CCA0D4(uint64_t a1, const UInt8 *a2, unsigned int a3, void *a4, _DWORD *a5, uint64_t a6)
{
  unint64_t v10 = (uint64_t *)sub_213CD761C(a6);
  unint64_t v12 = v10[1];
  size_t v11 = (const void *)v10[2];
  uint64_t v13 = *v10;
  CFErrorRef error = 0;
  CFStringRef v14 = (const __CFString *)*MEMORY[0x263F172A8];
  uint64_t v15 = (__SecKey *)sub_213CC9FD4(v13, v11);
  CFDataRef v16 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3);
  CFDataRef v17 = SecKeyCreateSignature(v15, v14, v16, &error);
  CFDataRef v18 = v17;
  if (!v17 || (unint64_t Length = CFDataGetLength(v17), Length > v12))
  {
    uint64_t v20 = 0xFFFFFFFFLL;
    if (!v15) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  size_t v22 = Length;
  *a5 = Length;
  BytePtr = CFDataGetBytePtr(v18);
  memcpy(a4, BytePtr, v22);
  uint64_t v20 = 1;
  if (v15) {
LABEL_4:
  }
    CFRelease(v15);
LABEL_5:
  if (v16) {
    CFRelease(v16);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (error) {
    CFRelease(error);
  }
  return v20;
}

uint64_t sub_213CCA1F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  int v8 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  if (v8)
  {
    if (a5 && *a5)
    {
      free(v8);
      char v15 = (char)a5;
      uint64_t v9 = 2;
      hx509_set_error_string(a1, 0, 2, "Unknown subtype %s", v10, v11, v12, v13, v15);
    }
    else
    {
      uint64_t v9 = 0;
      *a3 = v8;
    }
  }
  else
  {
    hx509_clear_error_string(a1);
    return 12;
  }
  return v9;
}

uint64_t sub_213CCA2A0(int a1, _DWORD *a2)
{
  if (a2)
  {
    *a2 = 0;
    free(a2);
  }
  return 0;
}

uint64_t sub_213CCA2CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  uint64_t v5 = 569873;
  uint64_t v28 = 0;
  CFTypeRef result = 0;
  if ((*a4 & 0x1000040) == 0) {
    return 569967;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  unsigned int v10 = *a4;
  if ((~*a4 & 0x40040) == 0 && !strcmp(*((const char **)a4 + 9), "O=System Identity,CN=com.apple.kerberos.kdc"))
  {
    char v12 = 0;
    *a4 = v10 & 0xFFFFFFBF;
    uint64_t v11 = (const void **)MEMORY[0x263F171C0];
  }
  else
  {
    uint64_t v11 = (const void **)MEMORY[0x263F171C0];
    if ((v10 & 0x1000000) == 0) {
      uint64_t v11 = (const void **)MEMORY[0x263F171D0];
    }
    char v12 = 1;
  }
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F171B8], *v11);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F17530], (const void *)*MEMORY[0x263EFFB40]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F17400], (const void *)*MEMORY[0x263F17408]);
  if (*((unsigned char *)a4 + 3))
  {
    CFDataRef v13 = CFDataCreateWithBytesNoCopy(0, *(const UInt8 **)(*((void *)a4 + 16) + 8), **((void **)a4 + 16), (CFAllocatorRef)*MEMORY[0x263EFFB28]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263F175B0], v13);
    CFRelease(v13);
  }
  OSStatus v14 = SecItemCopyMatching(Mutable, &result);
  CFRelease(Mutable);
  if (v14 || !result) {
    goto LABEL_22;
  }
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(result)) {
    heim_abort("return value not an array:CFArrayGetTypeID() == CFGetTypeID(identities)", v16, v17, v18, v19, v20, v21, v22, v28);
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)result);
  if (Count < 1)
  {
LABEL_18:
    if (v12) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  CFIndex v24 = Count;
  CFIndex v25 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)result, v25);
    if (!hx509_cert_init_SecFrameworkAuth(a1, ValueAtIndex, &v28, 0)) {
      break;
    }
LABEL_17:
    if (v24 == ++v25) {
      goto LABEL_18;
    }
  }
  if (!sub_213CC152C(a1, (int *)a4, v28))
  {
    hx509_cert_free(v28);
    goto LABEL_17;
  }
  *a5 = v28;
  if ((v12 & 1) == 0) {
LABEL_19:
  }
    *a4 |= 0x40u;
LABEL_20:
  CFRelease(result);
  if (!*a5)
  {
LABEL_22:
    hx509_clear_error_string(a1);
    return v5;
  }
  return 0;
}

uint64_t sub_213CCA548(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef **a4)
{
  keys[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v6 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x20uLL, 0x10E00401B1F1DBBuLL);
  if (v6)
  {
    uint64_t v11 = v6;
    char v12 = (void *)*MEMORY[0x263F17530];
    keys[0] = *(void **)MEMORY[0x263F171B8];
    keys[1] = v12;
    keys[2] = *(void **)MEMORY[0x263F17400];
    CFDataRef v13 = (void *)*MEMORY[0x263EFFB40];
    values[0] = *(void **)MEMORY[0x263F171C0];
    values[1] = v13;
    values[2] = *(void **)MEMORY[0x263F17408];
    CFDictionaryRef v14 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    OSStatus v15 = SecItemCopyMatching(v14, v11 + 2);
    CFRelease(v14);
    if (v15)
    {
      free(v11);
      return 12;
    }
    else
    {
      uint64_t v16 = 0;
      *a4 = v11;
    }
  }
  else
  {
    uint64_t v16 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v18);
  }
  return v16;
}

uint64_t sub_213CCA6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *(void *)a4;
  if (*(void *)a4)
  {
    uint64_t v9 = *(void *)(a4 + 8);
    return hx509_certs_next_cert(a1, v8, v9, a5);
  }
  else
  {
    *a5 = 0;
    CFIndex v11 = *(void *)(a4 + 24);
    if (v11 >= CFArrayGetCount(*(CFArrayRef *)(a4 + 16)))
    {
      unsigned int inited = 0;
    }
    else
    {
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 16), *(void *)(a4 + 24));
        unsigned int inited = hx509_cert_init_SecFrameworkAuth(a1, ValueAtIndex, a5, 0);
        CFIndex v14 = *(void *)(a4 + 24) + 1;
        *(void *)(a4 + 24) = v14;
      }
      while (inited && v14 < CFArrayGetCount(*(CFArrayRef *)(a4 + 16)));
    }
    uint64_t v15 = *(void *)(a4 + 24);
    if (v15 == CFArrayGetCount(*(CFArrayRef *)(a4 + 16))) {
      return 0;
    }
    else {
      return inited;
    }
  }
}

uint64_t sub_213CCA77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a4)
  {
    hx509_certs_end_seq(a1, *(void *)a4, *(void *)(a4 + 8));
    hx509_certs_free((const void **)a4);
  }
  else
  {
    CFRelease(*(CFTypeRef *)(a4 + 16));
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  free((void *)a4);
  return 0;
}

void *sub_213CCA7D4(uint64_t a1)
{
  return sub_213C76B00(a1, &off_26AA948D8);
}

uint64_t hx509_cert_init_SecFrameworkAuth(uint64_t a1, CFTypeRef cf, uint64_t *a3, const void *a4)
{
  uint64_t v6 = (void *)cf;
  uint64_t v95 = *MEMORY[0x263EF8340];
  CFTypeID v8 = CFGetTypeID(cf);
  SecKeyRef privateKeyRef = 0;
  CFTypeRef result = 0;
  if (a3) {
    *a3 = 0;
  }
  SecCertificateRef certificateRef = 0;
  uint64_t v87 = 0;
  if (CFDataGetTypeID() == v8)
  {
    uint64_t v9 = (void *)*MEMORY[0x263F17530];
    keys[0] = *(void **)MEMORY[0x263F171B8];
    keys[1] = v9;
    uint64_t v10 = *MEMORY[0x263F175B0];
    *(void *)&v94[0] = *MEMORY[0x263F17400];
    *((void *)&v94[0] + 1) = v10;
    CFIndex v11 = (void *)*MEMORY[0x263EFFB40];
    values[0] = *(void **)MEMORY[0x263F171D0];
    values[1] = v11;
    values[2] = *(void **)MEMORY[0x263F17410];
    values[3] = v6;
    CFDictionaryRef v12 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    OSStatus v13 = SecItemCopyMatching(v12, &result);
    CFRelease(v12);
    if (v13 || !result)
    {
      uint64_t inited = 569969;
      hx509_set_error_string(a1, 0, 569969, "Failed to turn persistent reference into a certifiate: %d", v14, v15, v16, v17, v13);
      return inited;
    }
    CFTypeID v8 = CFGetTypeID(result);
    uint64_t v6 = (void *)result;
  }
  if (SecIdentityGetTypeID() == v8)
  {
    OSStatus v18 = SecIdentityCopyCertificate((SecIdentityRef)v6, &certificateRef);
    if (v18)
    {
      char v23 = v18;
      if (result) {
        CFRelease(result);
      }
      uint64_t inited = 569969;
      hx509_set_error_string(a1, 0, 569969, "Failed to convert the identity to a certificate: %d", v19, v20, v21, v22, v23);
      return inited;
    }
  }
  else
  {
    if (SecCertificateGetTypeID() != v8)
    {
      if (result) {
        CFRelease(result);
      }
      uint64_t inited = 569969;
      hx509_set_error_string(a1, 0, 569969, "Data from persistent ref not a identity or certificate", v25, v26, v27, v28, v86);
      return inited;
    }
    SecCertificateRef certificateRef = (SecCertificateRef)v6;
    CFRetain(v6);
  }
  CFDataRef v29 = SecCertificateCopyData(certificateRef);
  if (v29)
  {
    CFDataRef v30 = v29;
    BytePtr = CFDataGetBytePtr(v29);
    CFIndex Length = CFDataGetLength(v30);
    uint64_t inited = hx509_cert_init_data(a1, (uint64_t)BytePtr, Length, (CFTypeRef *)&v87);
    CFRelease(v30);
    if (inited)
    {
      if (result) {
        CFRelease(result);
      }
      CFRelease(certificateRef);
      return inited;
    }
    if (SecIdentityGetTypeID() == v8) {
      SecIdentityCopyPrivateKey((SecIdentityRef)v6, &privateKeyRef);
    }
    if (!privateKeyRef) {
      goto LABEL_55;
    }
    uint64_t v34 = SecCertificateCopyKey(certificateRef);
    if (v34)
    {
      uint64_t v40 = v34;
      CFDictionaryRef v41 = SecKeyCopyAttributes(v34);
      CFRelease(v40);
      if (v41)
      {
        CFBooleanRef Value = CFDictionaryGetValue(v41, (const void *)*MEMORY[0x263F16FA8]);
        if (Value)
        {
          uint64_t v43 = Value;
          CFRetain(Value);
          CFRelease(v41);
          int v44 = CFEqual(v43, (CFTypeRef)*MEMORY[0x263F16FB8]);
          CFRelease(v43);
          if (v44)
          {
            uint64_t v45 = v87;
            SecKeyRef v46 = privateKeyRef;
            hx509_set_error_string(a1, 0, 12, "kc4", v36, v37, v38, v39, v86);
            long long v47 = (int *)sub_213CC4A94();
            if (!v47)
            {
              hx509_clear_error_string(a1);
              goto LABEL_54;
            }
            keys[0] = 0;
            if (!sub_213CC52C8((uint64_t)keys, v47, 0, v48, v49, v50, v51, v52))
            {
              uint64_t v53 = (SecKeyRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x10E004027590099uLL);
              if (v53)
              {
                uint64_t v61 = v53;
                CFRetain(v46);
                *uint64_t v61 = v46;
                v61[1] = (SecKeyRef)72;
                if (a4)
                {
                  CFRetain(a4);
                  v61[2] = (SecKeyRef)a4;
                }
                uint64_t v62 = sub_213CD7468();
                if (v62)
                {
                  uint64_t v63 = (uint64_t)v62;
                  sub_213CD75BC((uint64_t)v62, (uint64_t)&off_26C4C9C88);
                  if (sub_213CD7610(v63, (uint64_t)v61) != 1) {
                    sub_213CC1B28("ECDSA_set_app_data", v64, v65, v66, v67, v68, v69, v70, v86);
                  }
                  sub_213CBE6DC(v45);
                  sub_213CC576C((uint64_t)keys[0], v63);
                  _hx509_cert_set_key(v45, (uint64_t)keys[0]);
                  uint64_t v71 = keys;
                  goto LABEL_52;
                }
              }
LABEL_59:
              sub_213CC1B28("out of memory", v54, v55, v56, v57, v58, v59, v60, v86);
            }
            goto LABEL_54;
          }
        }
        else
        {
          CFRelease(v41);
        }
      }
    }
    uint64_t v72 = v87;
    SecKeyRef v73 = privateKeyRef;
    memset(v94, 0, sizeof(v94));
    *(_OWORD *)keys = 0u;
    uint64_t v91 = 0;
    values[0] = 0;
    if (!sub_213CC52C8((uint64_t)values, 0, 0, v35, v36, v37, v38, v39))
    {
      uint64_t v74 = (SecKeyRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x10E004027590099uLL);
      if (!v74) {
        goto LABEL_59;
      }
      uint64_t v75 = v74;
      CFRetain(v73);
      *uint64_t v75 = v73;
      if (a4)
      {
        CFRetain(a4);
        v75[2] = (SecKeyRef)a4;
      }
      uint64_t v76 = sub_213CD5AA8();
      if (!v76) {
        goto LABEL_59;
      }
      uint64_t v77 = (uint64_t)v76;
      sub_213CD5C68((uint64_t)v76, (uint64_t)&off_26C4C9CD8);
      if (sub_213CD5CBC(v77, (uint64_t)v75) != 1) {
        sub_213CC1B28("RSA_set_app_data", v78, v79, v80, v81, v82, v83, v84, v86);
      }
      uint64_t v85 = sub_213CBE6DC(v72);
      if (!sub_213CD2D50(*(void *)(v85 + 216), *(void *)(v85 + 208) >> 3, (uint64_t)keys, (uint64_t)&v91))
      {
        *(void *)(v77 + 32) = sub_213CC4A54((const void **)keys);
        *(void *)(v77 + 40) = sub_213CC4A54((const void **)v94 + 1);
        sub_213CD2DA0((uint64_t)keys);
        v75[1] = (SecKeyRef)(int)sub_213CD480C(*(unsigned int **)(v77 + 32));
        sub_213CC571C((uint64_t)values[0], v77);
        _hx509_cert_set_key(v72, (uint64_t)values[0]);
        uint64_t v71 = values;
LABEL_52:
        hx509_private_key_free((const void **)v71);
        goto LABEL_54;
      }
      sub_213CD5B74((_DWORD *)v77);
    }
LABEL_54:
    CFRelease(privateKeyRef);
LABEL_55:
    sub_213CBE9A8(v87, (uint64_t)sub_213CCAD5C, (uint64_t)certificateRef);
    if (result) {
      CFRelease(result);
    }
    uint64_t inited = 0;
    if (a3) {
      *a3 = v87;
    }
    return inited;
  }
  if (result) {
    CFRelease(result);
  }
  CFRelease(certificateRef);
  return 12;
}

void sub_213CCAD5C(int a1, CFTypeRef cf)
{
}

uint64_t hx509_cert_init_SecFramework(uint64_t a1, const void *a2, uint64_t *a3)
{
  return hx509_cert_init_SecFrameworkAuth(a1, a2, a3, 0);
}

uint64_t sub_213CCAD6C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CCAD74()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CCAD7C(int a1, const UInt8 *a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v9 = sub_213CD5CC8(a4);
  if (a5 != 1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v10 = *(void *)(v9 + 8);
  CFIndex v11 = (__SecKey *)sub_213CC9FD4(*(void *)v9, *(const void **)(v9 + 16));
  CFDataRef v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a1);
  CFDataRef Signature = SecKeyCreateSignature(v11, (SecKeyAlgorithm)*MEMORY[0x263F173C0], v12, 0);
  CFDataRef v14 = Signature;
  if (Signature)
  {
    unint64_t Length = CFDataGetLength(Signature);
    if (Length <= v10)
    {
      size_t v16 = Length;
      BytePtr = CFDataGetBytePtr(v14);
      memcpy(a3, BytePtr, v16);
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  size_t v16 = 0xFFFFFFFFLL;
  if (v11) {
LABEL_5:
  }
    CFRelease(v11);
LABEL_6:
  if (v12) {
    CFRelease(v12);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v16;
}

uint64_t sub_213CCAE80()
{
  return 1;
}

uint64_t sub_213CCAE88(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)sub_213CD5CC8(a1);
  if (v1)
  {
    uint64_t v2 = v1;
    CFRelease(*v1);
    CFTypeRef v3 = v2[2];
    if (v3) {
      CFRelease(v3);
    }
    free(v2);
  }
  return 1;
}

uint64_t sub_213CCAED0(int a1, const UInt8 *a2, unsigned int a3, void *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v11 = sub_213CD5CC8(a6);
  int v12 = a1 - 2;
  if ((a1 - 2) > 5 || ((0x3Du >> v12) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v15 = *(void *)(v11 + 8);
  CFStringRef v16 = (const __CFString *)**((void **)&unk_2641E83A0 + v12);
  uint64_t v17 = (__SecKey *)sub_213CC9FD4(*(void *)v11, *(const void **)(v11 + 16));
  CFDataRef v18 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3);
  CFDataRef Signature = SecKeyCreateSignature(v17, v16, v18, 0);
  CFDataRef v20 = Signature;
  if (Signature)
  {
    unint64_t Length = CFDataGetLength(Signature);
    if (Length <= v15)
    {
      size_t v22 = Length;
      *a5 = Length;
      BytePtr = CFDataGetBytePtr(v20);
      memcpy(a4, BytePtr, v22);
      uint64_t v13 = 1;
      if (!v17) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  uint64_t v13 = 0xFFFFFFFFLL;
  if (v17) {
LABEL_8:
  }
    CFRelease(v17);
LABEL_9:
  if (v18) {
    CFRelease(v18);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v13;
}

void *sub_213CCB004(uint64_t a1)
{
  return sub_213C76B00(a1, &off_26AA94940);
}

uint64_t sub_213CCB010(uint64_t a1, uint64_t a2, char ***a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = (char **)malloc_type_calloc(1uLL, 0x20uLL, 0x10900401DE5F086uLL);
  if (v7)
  {
    CFTypeID v8 = v7;
    if (!a5 || !*a5) {
      a5 = "anonymous";
    }
    uint64_t v9 = strdup(a5);
    *CFTypeID v8 = v9;
    if (v9)
    {
      uint64_t result = 0;
      *a3 = v8;
      return result;
    }
    free(v8);
  }
  return 12;
}

uint64_t sub_213CCB09C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8))
  {
    unint64_t v3 = 0;
    do
      hx509_cert_free(*(void *)(*(void *)(a2 + 16) + 8 * v3++));
    while (v3 < *(void *)(a2 + 8));
  }
  free(*(void **)(a2 + 16));
  CFTypeID v4 = *(char **)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      if (!*(void *)&v4[v5]) {
        break;
      }
      hx509_private_key_free((const void **)&v4[v5]);
      CFTypeID v4 = *(char **)(a2 + 24);
      v5 += 8;
    }
    while (v4);
  }
  free(v4);
  free(*(void **)a2);
  free((void *)a2);
  return 0;
}

uint64_t sub_213CCB130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = malloc_type_realloc(*(void **)(a3 + 16), 8 * *(void *)(a3 + 8) + 8, 0x2004093837F09uLL);
  if (!v6) {
    return 12;
  }
  *(void *)(a3 + 16) = v6;
  uint64_t v7 = hx509_cert_ref(a4);
  uint64_t result = 0;
  uint64_t v9 = *(void *)(a3 + 8);
  *(void *)(*(void *)(a3 + 16) + 8 * v9) = v7;
  *(void *)(a3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v9 + 1;
  return result;
}

uint64_t sub_213CCB1A4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  if (!v5) {
    return 12;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  *uint64_t v6 = 0;
  *a4 = v6;
  return result;
}

uint64_t sub_213CCB1F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  if (*a4 >= *(void *)(a3 + 8))
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = hx509_cert_ref(*(void *)(*(void *)(a3 + 16) + 8 * *a4));
    ++*a4;
  }
  *a5 = v7;
  return 0;
}

uint64_t sub_213CCB254(int a1, int a2, int a3, void *a4)
{
  return 0;
}

uint64_t sub_213CCB274(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)(a3 + 24);
  if (v7)
  {
    uint64_t v8 = 0;
    while (*(void *)(v7 + 8 * v8++))
      ;
    size_t v10 = v8;
  }
  else
  {
    size_t v10 = 1;
  }
  uint64_t v11 = malloc_type_calloc(v10, 8uLL, 0x2004093837F09uLL);
  *a4 = v11;
  unint64_t v12 = *(void *)(a3 + 24);
  if (v12 && (unint64_t v12 = *(void *)v12) != 0)
  {
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = v13;
      *(void *)(*a4 + 8 * v13) = _hx509_private_key_ref(v12);
      uint64_t v11 = (void *)*a4;
      if (!*(void *)(*a4 + 8 * v14)) {
        break;
      }
      uint64_t v19 = *(void *)(a3 + 24);
      if (v19)
      {
        unint64_t v12 = *(void *)(v19 + 8 * v14 + 8);
        uint64_t v13 = v14 + 1;
        if (v12) {
          continue;
        }
      }
      unint64_t v12 = (v14 + 1);
      goto LABEL_13;
    }
    if (v14)
    {
      uint64_t v22 = v14 + 1;
      do
        hx509_private_key_free((const void **)(*a4 + 8 * (v22-- - 2)));
      while (v22 > 1);
    }
    uint64_t v20 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v15, v16, v17, v18, v23);
  }
  else
  {
LABEL_13:
    uint64_t v20 = 0;
    v11[v12] = 0;
  }
  return v20;
}

uint64_t sub_213CCB384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void **)(a3 + 24);
  if (v7)
  {
    unsigned int v8 = -1;
    uint64_t v9 = *(uint64_t **)(a3 + 24);
    do
    {
      uint64_t v10 = *v9++;
      ++v8;
    }
    while (v10);
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v11 = malloc_type_realloc(v7, 8 * (v8 + 2), 0x2004093837F09uLL);
  if (v11)
  {
    *(void *)(a3 + 24) = v11;
    uint64_t v16 = _hx509_private_key_ref(a4);
    uint64_t v17 = 0;
    *(void *)(*(void *)(a3 + 24) + 8 * vinit_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v16;
    *(void *)(*(void *)(a3 + 24) + 8 * (v8 + 1)) = 0;
  }
  else
  {
    uint64_t v17 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v12, v13, v14, v15, v19);
  }
  return v17;
}

uint64_t sub_213CCB440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v15 = 0;
  long long v14 = 0u;
  memset(v13, 0, sizeof(v13));
  uint64_t v9 = sub_213CCB928(a5);
  uint64_t v10 = sub_213CBC144(a3, a4, (uint64_t)v13, 0);
  if (!v10)
  {
    if (v9) {
      uint64_t v11 = (uint64_t)(v9 + 4);
    }
    else {
      uint64_t v11 = 0;
    }
    sub_213CC44A0(a1, a2, (uint64_t)&v13[1] + 8, 0, (uint64_t *)&v14, v11);
    sub_213CBC194((uint64_t)v13);
  }
  return v10;
}

uint64_t sub_213CCB4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  uint64_t v8 = sub_213CBC1A4(a3, a4, (uint64_t)&v16, 0);
  if (!v8)
  {
    uint64_t v9 = sub_213CC4490(a2);
    uint64_t v8 = sub_213CC60E8(a1, v9, (uint64_t)&v16, (uint64_t)&v17 + 8, &v14, v10, v11, v12);
    sub_213CBC1C4((uint64_t)&v16);
    if (!v8)
    {
      uint64_t v8 = sub_213CCB440(a1, a2, v15, v14, a5);
      der_free_octet_string();
    }
  }
  return v8;
}

uint64_t sub_213CCB5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t inited = sub_213CBC2F4(a3, a4, (uint64_t)&v18, 0);
  if (!inited)
  {
    if (der_heim_oid_cmp())
    {
      sub_213CBC344((uint64_t)&v18);
      return 0;
    }
    uint64_t inited = sub_213CBC354(*((uint64_t *)&v19 + 1), v19, (uint64_t)&v21, 0);
    sub_213CBC344((uint64_t)&v18);
    if (!inited)
    {
      uint64_t inited = hx509_cert_init_data(a1, v22, v21, (CFTypeRef *)&v20);
      der_free_octet_string();
      if (!inited)
      {
        uint64_t v14 = sub_213CC4498(a1, a2, v20, v9, v10, v11, v12, v13);
        if (v14)
        {
          uint64_t inited = v14;
          hx509_cert_free(v20);
          return inited;
        }
        char v16 = 1;
        do
        {
          char v17 = v16;
          if (sub_213CCB928(a5)) {
            sub_213CC0E4C(a1, v20);
          }
          char v16 = 0;
        }
        while ((v17 & 1) != 0);
        hx509_cert_free(v20);
        return 0;
      }
    }
  }
  return inited;
}

uint64_t sub_213CCB70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v6 = sub_213CBC354(a3, a4, (uint64_t)&v8, 0);
  if (!v6)
  {
    uint64_t v6 = sub_213CCB9A4(a1, a2, v9, v8);
    der_free_octet_string();
  }
  return v6;
}

uint64_t sub_213CCB784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v8 = sub_213CC4490(a2);
  uint64_t v9 = hx509_cms_decrypt_encrypted(a1, v8, a3, a4, (uint64_t)v11, &v12);
  if (!v9)
  {
    if (der_heim_oid_cmp()) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = sub_213CCB9A4(a1, a2, v13, v12);
    }
    der_free_octet_string();
    der_free_oid();
  }
  return v9;
}

uint64_t sub_213CCB838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v8 = sub_213CC4490(a2);
  uint64_t v9 = sub_213CBEB40(v8);
  uint64_t v10 = hx509_cms_unenvelope(a1, v9, 0, a3, a4, 0, 0, v18, (size_t *)&v19);
  if (v10)
  {
    uint64_t v15 = v10;
    hx509_set_error_string(a1, 1, v10, "PKCS12 failed to unenvelope", v11, v12, v13, v14, v17);
  }
  else
  {
    if (der_heim_oid_cmp()) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = sub_213CCB9A4(a1, a2, v20, v19);
    }
    der_free_octet_string();
    der_free_oid();
  }
  return v15;
}

void *sub_213CCB91C(uint64_t a1)
{
  return sub_213C76B00(a1, &off_26AA94A10);
}

unsigned int *sub_213CCB928(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*result)
    {
      uint64_t v2 = 0;
      unint64_t v3 = 0;
      while (der_heim_oid_cmp())
      {
        ++v3;
        v2 += 32;
        if (v3 >= *v1) {
          return 0;
        }
      }
      return (unsigned int *)(*((void *)v1 + 1) + v2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_213CCB9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t result = sub_213CBC2C4(a3, a4, (uint64_t)&v9, 0);
  if (!result)
  {
    if (v9)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        sub_213CCBA44(a1, a2, v10 + v7, *(void *)(v10 + v7 + 24), *(void *)(v10 + v7 + 16), *(void *)(v10 + v7 + 32));
        ++v8;
        v7 += 40;
      }
      while (v8 < v9);
    }
    sub_213CBC2E4((uint64_t)&v9);
    return 0;
  }
  return result;
}

uint64_t sub_213CCBA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  for (uint64_t i = 0; i != 96; i += 16)
  {
    uint64_t result = der_heim_oid_cmp();
    if (!result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&off_26AA94328 + i + 8))(a1, a2, a4, a5, a6);
    }
  }
  return result;
}

uint64_t sub_213CCBAD8(uint64_t a1, uint64_t a2, uint64_t **a3, char a4, const char *a5, void *a6)
{
  uint64_t v40 = 0;
  off_t v41 = 0;
  uint64_t v39 = 0;
  long long v38 = 0u;
  memset(v37, 0, sizeof(v37));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  *a3 = 0;
  if (a6) {
    uint64_t v10 = a6;
  }
  else {
    uint64_t v10 = off_2678006C8;
  }
  uint64_t v11 = sub_213CC439C(a1, (uint64_t)v10, &v34);
  if (v11) {
    return v11;
  }
  char v16 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x30040E4270A41uLL);
  if (!v16 || (char v17 = strdup(a5), (v16[1] = (uint64_t)v17) == 0))
  {
    uint64_t v19 = "out of memory";
    uint64_t v11 = 12;
    uint64_t v20 = a1;
    int v21 = 12;
LABEL_12:
    hx509_set_error_string(v20, 0, v21, v19, v12, v13, v14, v15, v31);
    goto LABEL_13;
  }
  if (a4)
  {
    uint64_t v24 = hx509_certs_init(a1, "MEMORY:ks-file-create", 0, (uint64_t)v10, v16);
    goto LABEL_22;
  }
  uint64_t v18 = rk_undumpdata(a5, &v40, &v41);
  if (!v18)
  {
    uint64_t v11 = sub_213CBC204((uint64_t)v40, v41, (uint64_t)v37, 0);
    j__free(v40);
    if (v11)
    {
      hx509_set_error_string(a1, 0, v11, "Failed to decode the PFX in %s", v25, v26, v27, v28, (char)a5);
      goto LABEL_13;
    }
    if (der_heim_oid_cmp())
    {
      sub_213CBC254((uint64_t)v37);
      uint64_t v19 = "PKCS PFX isn't a pkcs7-data container";
LABEL_28:
      uint64_t v11 = 22;
      uint64_t v20 = a1;
      int v21 = 22;
      goto LABEL_12;
    }
    if (!*((void *)&v38 + 1))
    {
      sub_213CBC254((uint64_t)v37);
      uint64_t v19 = "PKCS PFX missing data";
      goto LABEL_28;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v11 = sub_213CBC354(*(void *)(*((void *)&v38 + 1) + 8), **((void **)&v38 + 1), (uint64_t)&v32, 0);
    sub_213CBC254((uint64_t)v37);
    if (v11) {
      goto LABEL_10;
    }
    uint64_t v11 = sub_213CBC264(v33, v32, (uint64_t)&v35, 0);
    der_free_octet_string();
    if (v11) {
      goto LABEL_10;
    }
    if (v35)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      do
      {
        sub_213CCBA44(a1, (uint64_t)v34, v36 + v29, *(void *)(*(void *)(v36 + v29 + 16) + 8), **(void **)(v36 + v29 + 16), 0);
        ++v30;
        v29 += 24;
      }
      while (v30 < v35);
    }
    sub_213CBC2B4((uint64_t)&v35);
    uint64_t v24 = sub_213CC465C(a1, (uint64_t *)v34, v16);
LABEL_22:
    uint64_t v11 = v24;
    if (!v24) {
      *a3 = v16;
    }
    goto LABEL_13;
  }
  uint64_t v11 = v18;
LABEL_10:
  hx509_clear_error_string(a1);
LABEL_13:
  sub_213CC49D0((char *)v34);
  if (v16 && v11)
  {
    uint64_t v22 = (void *)v16[1];
    if (v22) {
      free(v22);
    }
    if (*v16) {
      hx509_certs_free((const void **)v16);
    }
    free(v16);
  }
  return v11;
}

uint64_t sub_213CCBD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  v25[0] = 0;
  v25[1] = 0;
  memset(v26, 0, sizeof(v26));
  long long v27 = 0u;
  uint64_t v28 = 0;
  uint64_t v9 = hx509_certs_iter_f(a1, *(void *)a3, (uint64_t (*)(uint64_t, uint64_t))sub_213CCC020, (uint64_t)v25, a5, a6, a7, a8);
  if (v9) {
    goto LABEL_2;
  }
  uint64_t v10 = sub_213CBC2A4((uint64_t)v25);
  uint64_t v23 = v10;
  uint64_t v11 = malloc_type_malloc(v10, 0x9FE18BD6uLL);
  uint64_t v24 = v11;
  if (!v11)
  {
    uint64_t v9 = 12;
    goto LABEL_7;
  }
  uint64_t v12 = v11;
  uint64_t v13 = sub_213CBC284((uint64_t)v11 + v10 - 1, v10, (uint64_t)v25, (uint64_t)&v22);
  if (v13)
  {
    uint64_t v9 = v13;
    free(v12);
LABEL_7:
    sub_213CBC2B4((uint64_t)v25);
    return v9;
  }
  sub_213CBC2B4((uint64_t)v25);
  uint64_t v15 = der_parse_hex_heim_integer();
  if (v15)
  {
    uint64_t v9 = v15;
    char v16 = v12;
  }
  else
  {
    *((void *)&v27 + 1) = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
    size_t v17 = sub_213CBC394((uint64_t)&v23);
    **((void **)&v27 + 1) = v17;
    uint64_t v18 = malloc_type_malloc(v17, 0xA91B0023uLL);
    uint64_t v19 = (uint64_t *)*((void *)&v27 + 1);
    *(void *)(*((void *)&v27 + 1) + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v18;
    if (v18)
    {
      uint64_t v20 = sub_213CBC374((uint64_t)v18 + *v19 - 1, *v19, (uint64_t)&v23, (uint64_t)&v22);
      if (v20)
      {
        uint64_t v9 = v20;
        free(*(void **)(*((void *)&v27 + 1) + 8));
        *(void *)(*((void *)&v27 + 1) + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
      }
      else
      {
        free(v24);
        uint64_t v9 = der_copy_oid();
        if (v9) {
          goto LABEL_2;
        }
        uint64_t v23 = sub_213CBC244((uint64_t)v26);
        int v21 = malloc_type_malloc(v23, 0x79E37B29uLL);
        uint64_t v24 = v21;
        if (!v21)
        {
          uint64_t v9 = 12;
          goto LABEL_2;
        }
        uint64_t v9 = sub_213CBC224((uint64_t)v21 + v23 - 1, v23, (uint64_t)v26, (uint64_t)&v22);
        if (v9)
        {
          free(v24);
          uint64_t v24 = 0;
          goto LABEL_2;
        }
        rk_dumpdata(*(const char **)(a3 + 8), (char *)v24, v23);
      }
    }
    else
    {
      uint64_t v9 = 12;
    }
    char v16 = v24;
  }
  free(v16);
LABEL_2:
  sub_213CBC2B4((uint64_t)v25);
  sub_213CBC254((uint64_t)v26);
  return v9;
}

uint64_t sub_213CCBFB0(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_213CCBFEC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_213CCBFF8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_start_seq(a1, *a3, a4, a4, a5, a6, a7, a8);
}

uint64_t sub_213CCC004(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  return hx509_certs_next_cert(a1, *a3, a4, a5);
}

uint64_t sub_213CCC014(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return hx509_certs_end_seq(a1, *a3, a4);
}

uint64_t sub_213CCC020(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v20 = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v6 = hx509_cert_binary(a1, a3, (uint64_t)&v22);
  if (!v6)
  {
    uint64_t v7 = sub_213CBC394((uint64_t)&v22);
    void v21[2] = v7;
    unint64_t v8 = malloc_type_malloc(v7, 0x834C70E1uLL);
    v21[3] = v8;
    if (!v8)
    {
      uint64_t v6 = 12;
      goto LABEL_6;
    }
    uint64_t v9 = v8;
    uint64_t v10 = sub_213CBC374((uint64_t)v8 + v7 - 1, v7, (uint64_t)&v22, (uint64_t)&v20);
    if (v10)
    {
      uint64_t v6 = v10;
      free(v9);
LABEL_6:
      free(v23);
      return v6;
    }
    free(v23);
    uint64_t v11 = der_copy_oid();
    if (v11)
    {
      uint64_t v6 = v11;
LABEL_9:
      sub_213CBC344((uint64_t)v21);
      return v6;
    }
    uint64_t v22 = sub_213CBC334((uint64_t)v21);
    uint64_t v13 = malloc_type_malloc(v22, 0xED47DADBuLL);
    uint64_t v23 = v13;
    if (!v13)
    {
      uint64_t v6 = 12;
      goto LABEL_9;
    }
    uint64_t v14 = sub_213CBC314((uint64_t)v13 + v22 - 1, v22, (uint64_t)v21, (uint64_t)&v20);
    if (v14)
    {
      uint64_t v6 = v14;
      free(v23);
      uint64_t v23 = 0;
      goto LABEL_9;
    }
    sub_213CBC344((uint64_t)v21);
    uint64_t v6 = sub_213CCC29C(a1, a2, (uint64_t)&unk_2641E70D0, (uint64_t)v23, v22);
    if (sub_213CBFAC4(a3))
    {
      _hx509_cert_private_key(a3);
      uint64_t v19 = 0;
      memset(v18, 0, sizeof(v18));
      uint64_t v6 = der_parse_hex_heim_integer();
      if (!v6)
      {
        uint64_t v6 = sub_213CC57BC(a1);
        if (!v6)
        {
          uint64_t v15 = _hx509_cert_private_key(a3);
          uint64_t v6 = sub_213CC5824(a1, v15);
          if (!v6)
          {
            uint64_t v22 = sub_213CBC184((uint64_t)v18);
            char v16 = malloc_type_malloc(v22, 0x58EE68ACuLL);
            uint64_t v23 = v16;
            if (v16)
            {
              uint64_t v17 = sub_213CBC164((uint64_t)v16 + v22 - 1, v22, (uint64_t)v18, (uint64_t)&v20);
              if (!v17)
              {
                sub_213CBC194((uint64_t)v18);
                return sub_213CCC29C(a1, a2, (uint64_t)&unk_2641E70B0, (uint64_t)v23, v22);
              }
              uint64_t v6 = v17;
              free(v23);
              uint64_t v23 = 0;
            }
            else
            {
              uint64_t v6 = 12;
            }
          }
        }
        sub_213CBC194((uint64_t)v18);
      }
    }
  }
  return v6;
}

uint64_t sub_213CCC29C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = malloc_type_realloc(*((void **)a2 + 1), 24 * (*a2 + 1), 0x10300406712BA52uLL);
  if (!v9)
  {
    char v16 = "out of memory";
LABEL_8:
    uint64_t v15 = 12;
    uint64_t v17 = a1;
    int v18 = 12;
    goto LABEL_9;
  }
  *((void *)a2 + 1) = v9;
  uint64_t v14 = der_copy_oid();
  if (v14)
  {
    uint64_t v15 = v14;
    char v16 = "out of memory";
    uint64_t v17 = a1;
    int v18 = v15;
LABEL_9:
    hx509_set_error_string(v17, 0, v18, v16, v10, v11, v12, v13, v22);
    return v15;
  }
  uint64_t v19 = malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
  int v20 = *a2;
  *(void *)(*((void *)a2 + 1) + 24 * *a2 + 16) = v19;
  if (!v19)
  {
    der_free_oid();
    char v16 = "malloc out of memory";
    goto LABEL_8;
  }
  uint64_t v15 = 0;
  *uint64_t v19 = a5;
  v19[1] = a4;
  *a2 = v20 + 1;
  return v15;
}

uint64_t hx509_lock_init(uint64_t a1, void *a2)
{
  *a2 = 0;
  CFTypeID v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00405C9B045DuLL);
  if (!v4) {
    return 12;
  }
  uint64_t v5 = v4;
  uint64_t v6 = hx509_certs_init(a1, "MEMORY:locks-internal", 0, 0, (void *)v4 + 2);
  if (v6) {
    free(v5);
  }
  else {
    *a2 = v5;
  }
  return v6;
}

uint64_t hx509_lock_add_password(uint64_t *a1, char *__s1)
{
  unint64_t v3 = strdup(__s1);
  if (v3)
  {
    CFTypeID v4 = v3;
    uint64_t v5 = malloc_type_realloc((void *)a1[1], 8 * *a1 + 8, 0x10040436913F5uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t result = 0;
      uint64_t v8 = *a1;
      uint64_t v9 = *a1 + 1;
      a1[1] = (uint64_t)v6;
      v6[v8] = v4;
      *a1 = v9;
      return result;
    }
    free(v4);
  }
  return 12;
}

void hx509_lock_reset_passwords(uint64_t a1)
{
  if (*(void *)a1)
  {
    unint64_t v2 = 0;
    do
      free(*(void **)(*(void *)(a1 + 8) + 8 * v2++));
    while (v2 < *(void *)a1);
  }
  free(*(void **)(a1 + 8));
  *(void *)a1 = 0;
  *(void *)(a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
}

uint64_t hx509_lock_add_cert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_add(a1, *(void *)(a2 + 16), a3, a4, a5, a6, a7, a8);
}

uint64_t hx509_lock_add_certs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_merge(a1, *(void *)(a2 + 16), a3, a4, a5, a6, a7, a8);
}

void hx509_lock_reset_certs(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a2 + 16);
  unint64_t v3 = *(const void **)(a2 + 16);
  CFTypeID v4 = v3;
  if (hx509_certs_init(a1, "MEMORY:locks-internal", 0, 0, (void *)(a2 + 16))) {
    void *v2 = v3;
  }
  else {
    hx509_certs_free(&v4);
  }
}

uint64_t hx509_lock_set_prompter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  return 0;
}

uint64_t hx509_lock_reset_promper(uint64_t result)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

uint64_t hx509_lock_prompt(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 24);
  if (v1) {
    return v1(*(void *)(a1 + 32));
  }
  else {
    return 569927;
  }
}

void hx509_lock_free(const void **a1)
{
  if (a1)
  {
    hx509_certs_free(a1 + 2);
    hx509_lock_reset_passwords((uint64_t)a1);
    a1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }
}

BOOL hx509_prompt_hidden(int a1)
{
  return a1 == 1;
}

uint64_t hx509_lock_command_string(uint64_t *a1, char *a2)
{
  if (!strncasecmp(a2, "PASS:", 5uLL))
  {
    hx509_lock_add_password(a1, a2 + 5);
    return 0;
  }
  else
  {
    uint64_t result = strcasecmp(a2, "PROMPT");
    if (result)
    {
      return 569874;
    }
    else
    {
      a1[3] = (uint64_t)sub_213CCC6A8;
      a1[4] = 0;
    }
  }
  return result;
}

uint64_t sub_213CCC6A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 24);
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    if (!hc_UI_UTIL_read_pw_string(v3, *(_DWORD *)(a2 + 16), *(const char **)a2, 0)) {
      return 0;
    }
  }
  else
  {
    CFTypeID v4 = (FILE **)MEMORY[0x263EF8358];
    fputs(*(const char **)a2, (FILE *)*MEMORY[0x263EF8358]);
    fflush(*v4);
    if (fgets(*(char **)(a2 + 24), *(_DWORD *)(a2 + 16), (FILE *)*MEMORY[0x263EF8350]))
    {
      v3[strcspn(v3, "\n")] = 0;
      return 0;
    }
  }
  return 1;
}

uint64_t sub_213CCC758(uint64_t a1, void **a2)
{
  uint64_t v45 = 0;
  CFTypeID v4 = strdup("");
  *a2 = v4;
  if (!v4) {
    return 12;
  }
  uint64_t v44 = *(unsigned int *)(a1 + 24);
  if (v44)
  {
    uint64_t v43 = a1;
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      --v44;
      if (*(_DWORD *)(v5 + 16 * v44))
      {
        unint64_t v6 = 0;
        unint64_t v7 = 0;
        while (1)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *(void *)(v5 + 16 * v44 + 8);
          uint64_t v10 = (_DWORD *)(v9 + 40 * v7 + 16);
          do
          {
            if (!der_heim_oid_cmp())
            {
              int v18 = strdup((&off_2641E83E0)[v8]);
              goto LABEL_13;
            }
            v8 += 3;
          }
          while (v8 != 39);
          unint64_t v46 = 0;
          if (der_print_heim_oid()) {
            int v18 = 0;
          }
          else {
            int v18 = (char *)v46;
          }
LABEL_13:
          switch(*v10)
          {
            case 0:
              sub_213CC1B28("unknown directory type: %d", v11, v12, v13, v14, v15, v16, v17, 0);
            case 1:
            case 3:
              uint64_t v19 = v9 + 40 * v7;
              unint64_t v6 = *(void *)(v19 + 24);
              int v20 = *(char **)(v19 + 32);
              goto LABEL_25;
            case 2:
            case 5:
              int v20 = *(char **)(v9 + 40 * v7 + 24);
              unint64_t v6 = strlen(v20);
              goto LABEL_25;
            case 4:
              uint64_t v21 = v9 + 40 * v7;
              uint64_t v23 = *(void *)(v21 + 24);
              char v22 = *(unsigned int **)(v21 + 32);
              unint64_t v46 = 0;
              uint64_t v24 = sub_213CBABEC(v22, v23, &v46);
              if (v24) {
                return v24;
              }
              uint64_t v25 = (char *)malloc_type_malloc(++v46, 0x759BA998uLL);
              if (!v25) {
                goto LABEL_37;
              }
              int v20 = v25;
              uint64_t v33 = wind_ucs4utf8(v22, v23, v25, &v46);
              if (v33) {
                goto LABEL_35;
              }
              goto LABEL_24;
            case 6:
              uint64_t v34 = v9 + 40 * v7;
              uint64_t v36 = *(void *)(v34 + 24);
              uint64_t v35 = *(unsigned __int16 **)(v34 + 32);
              unint64_t v46 = 0;
              uint64_t v24 = wind_ucs2utf8_length(v35, v36, &v46);
              if (v24) {
                return v24;
              }
              uint64_t v37 = (char *)malloc_type_malloc(v46 + 1, 0x96120BB7uLL);
              if (!v37) {
LABEL_37:
              }
                sub_213CC1B28("allocation failure", v26, v27, v28, v29, v30, v31, v32, v42);
              int v20 = v37;
              uint64_t v33 = wind_ucs2utf8(v35, v36, v37, &v46);
              if (v33)
              {
LABEL_35:
                uint64_t v40 = v33;
                free(v20);
                return v40;
              }
LABEL_24:
              v20[v46] = 0;
              unint64_t v6 = v46;
              a1 = v43;
LABEL_25:
              size_t v38 = strlen(v18);
              sub_213CCCAC8(a2, &v45, v18, v38, 0);
              free(v18);
              sub_213CCCAC8(a2, &v45, "=", 1uLL, 0);
              sub_213CCCAC8(a2, &v45, v20, v6, 1);
              if ((*v10 | 2) == 6) {
                free(v20);
              }
              ++v7;
              uint64_t v5 = *(void *)(a1 + 32);
              unint64_t v39 = *(unsigned int *)(v5 + 16 * v44);
              if (v7 < v39)
              {
                sub_213CCCAC8(a2, &v45, "+", 1uLL, 0);
                uint64_t v5 = *(void *)(a1 + 32);
                unint64_t v39 = *(unsigned int *)(v5 + 16 * v44);
              }
              if (v7 >= v39) {
                goto LABEL_30;
              }
              break;
            default:
              int v20 = 0;
              goto LABEL_25;
          }
        }
      }
LABEL_30:
      if (!v44) {
        break;
      }
      sub_213CCCAC8(a2, &v45, ",", 1uLL, 0);
    }
  }
  return 0;
}

void sub_213CCCAC8(void **a1, void *a2, unsigned char *a3, size_t a4, int a5)
{
  size_t v5 = a4;
  if (a5)
  {
    uint64_t v9 = malloc_type_malloc(3 * a4 + 1, 0x763C70C3uLL);
    if (v9)
    {
      unint64_t v28 = 3 * v5 + 1;
      size_t v10 = 0;
      if (v5)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = a3[v11];
          if (v11 || (byte_2678006D0[v12] & 4) == 0)
          {
            uint64_t v14 = v11 + 1;
            if (v11 + 1 == v5 && (byte_2678006D0[v12] & 8) != 0)
            {
              uint64_t v17 = &v9[v10];
              *uint64_t v17 = 92;
              v10 += 2;
              v17[1] = a3[v11];
              break;
            }
            uint64_t v15 = &v9[v10];
            if ((byte_2678006D0[v12] & 0x10) == 0)
            {
              if ((byte_2678006D0[v12] & 0x20) != 0)
              {
                uint64_t v16 = snprintf(v15, 3 * v5 - v10, "#%02x", a3[v11]);
              }
              else
              {
                *uint64_t v15 = v12;
                uint64_t v16 = 1;
              }
              goto LABEL_15;
            }
            *uint64_t v15 = 92;
            v15[1] = a3[v11];
          }
          else
          {
            uint64_t v13 = &v9[v10];
            unsigned char *v13 = 92;
            v13[1] = *a3;
            uint64_t v14 = 1;
          }
          uint64_t v16 = 2;
LABEL_15:
          v10 += v16;
          uint64_t v11 = v14;
        }
        while (v14 != v5);
      }
      v9[v10] = 0;
      size_t v5 = v10;
      if (v10 >= v28) {
        sub_213CD882C();
      }
    }
  }
  else
  {
    uint64_t v9 = a3;
  }
  int v18 = (char *)malloc_type_realloc(*a1, v5 + *a2 + 1, 0x753CB74uLL);
  if (!v18) {
    sub_213CC1B28("allocation failure", v19, v20, v21, v22, v23, v24, v25, v27);
  }
  uint64_t v26 = v18;
  memcpy(&v18[*a2], v9, v5);
  if (v9 != a3) {
    free(v9);
  }
  v26[*a2 + v5] = 0;
  *a1 = v26;
  *a2 += v5;
}

uint64_t sub_213CCCC94(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v27 = 0;
  size_t v25 = 0;
  uint64_t v15 = sub_213CCCD68(a1, &v27, &v25, a4, a5, a6, a7, a8);
  if (!v15)
  {
    uint64_t v26 = 0;
    size_t v24 = 0;
    uint64_t v16 = sub_213CCCD68(a2, (void **)&v26, &v24, v10, v11, v12, v13, v14);
    if (v16)
    {
      uint64_t v15 = v16;
      uint64_t v17 = v27;
    }
    else
    {
      if (v25 == v24)
      {
        uint64_t v17 = v26;
        int v18 = v27;
        if (v25)
        {
          uint64_t v19 = 0;
          size_t v20 = v25 - 1;
          do
          {
            int v21 = v18[v19] - v17[v19];
            *a3 = v21;
            if (v21) {
              BOOL v22 = 1;
            }
            else {
              BOOL v22 = v20 == v19;
            }
            ++v19;
          }
          while (!v22);
        }
      }
      else
      {
        *a3 = v25 - v24;
        uint64_t v17 = v26;
        int v18 = v27;
      }
      free(v18);
      uint64_t v15 = 0;
    }
    free(v17);
  }
  return v15;
}

uint64_t sub_213CCCD68(uint64_t a1, void **a2, size_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v28 = 0;
  *a2 = 0;
  *a3 = 0;
  switch(*(_DWORD *)a1)
  {
    case 0:
      sub_213CC1B28("unknown directory type: %d", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, 0);
    case 1:
      size_t v11 = *(void *)(a1 + 8);
      size_t v28 = v11;
      uint64_t v12 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
      if (!v12) {
        return 12;
      }
      uint64_t v13 = v12;
      if (v11)
      {
        for (uint64_t i = 0; i != v11; ++i)
          *((_DWORD *)v12 + i) = *(unsigned __int8 *)(*(void *)(a1 + 16) + i);
      }
      goto LABEL_31;
    case 2:
      size_t v11 = strlen(*(const char **)(a1 + 8));
      size_t v28 = v11;
      uint64_t v15 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
      if (!v15) {
        return 12;
      }
      uint64_t v13 = v15;
      if (v11)
      {
        for (uint64_t j = 0; j != v11; ++j)
          *((_DWORD *)v15 + j) = *(char *)(*(void *)(a1 + 8) + j);
      }
      goto LABEL_31;
    case 3:
      size_t v11 = *(void *)(a1 + 8);
      size_t v28 = v11;
      uint64_t v17 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
      if (!v17) {
        return 12;
      }
      uint64_t v13 = v17;
      if (v11)
      {
        for (uint64_t k = 0; k != v11; ++k)
          *((_DWORD *)v17 + k) = *(unsigned __int8 *)(*(void *)(a1 + 16) + k);
      }
      goto LABEL_31;
    case 4:
      size_t v11 = *(void *)(a1 + 8);
      size_t v28 = v11;
      uint64_t v19 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
      if (!v19) {
        return 12;
      }
      uint64_t v13 = v19;
      if (v11)
      {
        for (uint64_t m = 0; m != v11; ++m)
          *((_DWORD *)v19 + m) = *(_DWORD *)(*(void *)(a1 + 16) + 4 * m);
      }
      goto LABEL_31;
    case 5:
      uint64_t v21 = sub_213CBAA08(*(char **)(a1 + 8), &v28);
      if (v21) {
        return v21;
      }
      BOOL v22 = malloc_type_malloc(4 * v28, 0x100004052888210uLL);
      if (!v22) {
        return 12;
      }
      uint64_t v13 = v22;
      uint64_t v23 = wind_utf8ucs4(*(char **)(a1 + 8), (uint64_t)v22, &v28);
      if (v23)
      {
        uint64_t v21 = v23;
        free(v13);
      }
      else
      {
        size_t v11 = v28;
LABEL_31:
        *a3 = v11;
        uint64_t v26 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
        *a2 = v26;
        if (v26)
        {
          memcpy(v26, v13, 4 * v28);
          *a3 = v28;
          free(v13);
          return 0;
        }
        else
        {
          free(v13);
          if (*a2) {
            free(*a2);
          }
          *a2 = 0;
          *a3 = 0;
          return 12;
        }
      }
      return v21;
    case 6:
      size_t v11 = *(void *)(a1 + 8);
      size_t v28 = v11;
      size_t v24 = malloc_type_malloc(4 * v11, 0x100004052888210uLL);
      if (!v24) {
        return 12;
      }
      uint64_t v13 = v24;
      if (v11)
      {
        for (uint64_t n = 0; n != v11; ++n)
          *((_DWORD *)v24 + n) = *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * n);
      }
      goto LABEL_31;
    default:
      size_t v11 = 0;
      uint64_t v13 = 0;
      goto LABEL_31;
  }
}

uint64_t sub_213CCD06C(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a2 + 24);
  *a3 = v3;
  if (!v3)
  {
    if (!*(_DWORD *)(a1 + 24))
    {
LABEL_12:
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 32);
    while (1)
    {
      int v9 = *(_DWORD *)(v8 + 16 * v7) - *(_DWORD *)(*(void *)(a2 + 32) + 16 * v7);
      *a3 = v9;
      if (v9) {
        break;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      if (*(_DWORD *)(v8 + 16 * v7))
      {
        unint64_t v10 = 0;
        uint64_t v11 = 16;
        do
        {
          int v12 = der_heim_oid_cmp();
          *a3 = v12;
          if (v12) {
            return 0;
          }
          uint64_t result = sub_213CCCC94(*(void *)(*(void *)(a1 + 32) + 16 * v7 + 8) + v11, *(void *)(*(void *)(a2 + 32) + 16 * v7 + 8) + v11, a3, v13, v14, v15, v16, v17);
          if (result) {
            return result;
          }
          if (*a3) {
            return 0;
          }
          ++v10;
          uint64_t v8 = *(void *)(a1 + 32);
          v11 += 40;
        }
        while (v10 < *(unsigned int *)(v8 + 16 * v7));
      }
      if (++v7 >= (unint64_t)*(unsigned int *)(a1 + 24)) {
        goto LABEL_12;
      }
    }
  }
  return 0;
}

uint64_t hx509_name_cmp(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = 0;
  LODWORD(result) = sub_213CCD06C(a1, a2, (int *)&v3);
  if (result) {
    return result;
  }
  else {
    return v3;
  }
}

uint64_t sub_213CCD1C0(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, void **a5)
{
  if (a5) {
    *a5 = 0;
  }
  if (*(_DWORD *)(a1 + 24) <= a2) {
    return 34;
  }
  unint64_t v24 = 0;
  unint64_t v8 = *a4;
  if (v8 >= *(_DWORD *)(*(void *)(a1 + 32) + 16 * a2))
  {
LABEL_8:
    if (a5) {
      return 569879;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = 40 * v8;
    uint64_t v11 = 16 * a2;
    while (der_heim_oid_cmp())
    {
      ++v8;
      v10 += 40;
      if (v8 >= *(unsigned int *)(*(void *)(a1 + 32) + v11)) {
        goto LABEL_8;
      }
    }
    *a4 = v8 + 1;
    if (a5)
    {
      uint64_t v25 = 0;
      uint64_t v23 = 0;
      uint64_t v17 = sub_213CCCD68(*(void *)(*(void *)(a1 + 32) + 16 * v9 + 8) + v10 + 16, (void **)&v23, (size_t *)&v25, v12, v13, v14, v15, v16);
      if (!v17)
      {
        uint64_t v19 = v23;
        uint64_t v20 = v25;
        uint64_t v21 = sub_213CBABEC(v23, v25, &v24);
        if (v21)
        {
          uint64_t v17 = v21;
          free(v19);
        }
        else
        {
          BOOL v22 = malloc_type_malloc(++v24, 0x97534287uLL);
          *a5 = v22;
          uint64_t v17 = wind_ucs4utf8(v19, v20, v22, &v24);
          free(v19);
          if (v17)
          {
            free(*a5);
            *a5 = 0;
          }
        }
      }
    }
    else
    {
      return 569879;
    }
  }
  return v17;
}

uint64_t hx509_name_from_Name(uint64_t a1, void **a2)
{
  unsigned int v3 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040F20C3E80uLL);
  *a2 = v3;
  if (!v3) {
    return 12;
  }
  uint64_t v4 = hx509_name_to_Name_0();
  if (v4)
  {
    free(*a2);
    *a2 = 0;
  }
  return v4;
}

uint64_t sub_213CCD3D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v9 = (char *)malloc_type_realloc(*(void **)(a2 + 32), 16 * (*(_DWORD *)(a2 + 24) + 1), 0x1020040D5A9D86FuLL);
  if (v9)
  {
    *(void *)(a2 + 32) = v9;
    if (a3)
    {
      uint64_t v14 = &v9[16 * *(unsigned int *)(a2 + 24)];
    }
    else
    {
      memmove(v9 + 16, v9, 16 * *(unsigned int *)(a2 + 24));
      uint64_t v14 = *(char **)(a2 + 32);
    }
    uint64_t v16 = malloc_type_malloc(0x28uLL, 0x1092040826AA3E3uLL);
    *((void *)v14 + 1) = v16;
    if (!v16) {
      return 12;
    }
    *(_DWORD *)uint64_t v14 = 1;
    uint64_t v15 = der_copy_oid();
    if (!v15)
    {
      uint64_t v17 = *((void *)v14 + 1);
      *(_DWORD *)(v17 + 16) = 5;
      *(void *)(v17 + 24) = strdup(a5);
      if (*(void *)(*((void *)v14 + 1) + 24))
      {
        uint64_t v15 = 0;
        ++*(_DWORD *)(a2 + 24);
        return v15;
      }
      return 12;
    }
  }
  else
  {
    uint64_t v15 = 12;
    hx509_set_error_string(a1, 0, 12, "Out of memory", v10, v11, v12, v13, v19);
  }
  return v15;
}

uint64_t hx509_parse_name(uint64_t a1, const char *a2, void *a3)
{
  unsigned int v3 = a3;
  *a3 = 0;
  unint64_t v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040F20C3E80uLL);
  uint64_t v43 = v6;
  if (!v6) {
    goto LABEL_30;
  }
  uint64_t v11 = v6;
  *((_DWORD *)v6 + 4) = 1;
  uint64_t v12 = strdup(a2);
  if (!v12)
  {
    free(v11);
LABEL_30:
    uint64_t v33 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v7, v8, v9, v10, v38);
    return v33;
  }
  uint64_t v13 = v12;
  int v14 = *v12;
  if (!*v12)
  {
LABEL_28:
    free(v13);
    uint64_t v33 = 0;
    void *v3 = v11;
    return v33;
  }
  unint64_t v39 = v3;
  uint64_t v15 = &v12[strlen(v12)];
  uint64_t v40 = v13;
  while (2)
  {
    size_t v16 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    for (unint64_t i = ~(unint64_t)v13; ; --i)
    {
      if (v14 == 92)
      {
        if (v13[v16 + 1])
        {
          memmove(&v13[v16], &v13[v16 + 1], (size_t)&v15[i]);
          *--uint64_t v15 = 0;
        }
        goto LABEL_12;
      }
      if (!v14) {
        break;
      }
      if (v14 == 44)
      {
        uint64_t v18 = 1;
        goto LABEL_14;
      }
LABEL_12:
      int v14 = v13[++v16];
    }
    size_t v16 = strlen(v13);
    uint64_t v18 = 0;
LABEL_14:
    char v19 = strchr(v13, 61);
    if (!v19)
    {
      char v38 = (char)v13;
      uint64_t v34 = "missing = in %s";
LABEL_35:
      uint64_t v35 = a1;
      int v36 = 569968;
      goto LABEL_36;
    }
    size_t v24 = v19 - v13;
    if (v19 == v13)
    {
      char v38 = (char)v13;
      uint64_t v34 = "missing name before = in %s";
      goto LABEL_35;
    }
    size_t v25 = v16 - v24;
    if (v16 < v24)
    {
      char v38 = (char)v13;
      uint64_t v34 = " = after , in %s";
      goto LABEL_35;
    }
    uint64_t v26 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    while (strncasecmp((&off_2641E83E0)[v26], v13, v24))
    {
      v26 += 3;
      if (v26 == 39)
      {
        char v27 = malloc_type_malloc(v24 + 1, 0x9C46D030uLL);
        if (v27)
        {
          size_t v28 = v27;
          memcpy(v27, v13, v24);
          v28[v24] = 0;
          int v29 = der_parse_heim_oid();
          free(v28);
          goto LABEL_23;
        }
        goto LABEL_31;
      }
    }
    int v29 = der_copy_oid();
LABEL_23:
    if (v29)
    {
LABEL_31:
      char v38 = v24;
      uint64_t v34 = "unknown type: %.*s";
      goto LABEL_35;
    }
    uint64_t v30 = (char *)malloc_type_malloc(v16 - v24, 0x2BB3E5AuLL);
    if (v30)
    {
      uint64_t v31 = v30;
      memcpy(v30, &v13[v24 + 1], v25 - 1);
      v31[v25 - 1] = 0;
      uint64_t v11 = v43;
      int v32 = sub_213CCD3D0(a1, (uint64_t)v43, 0, (uint64_t)&v41, v31);
      free(v31);
      der_free_oid();
      if (v32) {
        goto LABEL_37;
      }
      v13 += v18 + v16;
      int v14 = *v13;
      if (!*v13)
      {
        unsigned int v3 = v39;
        uint64_t v13 = v40;
        goto LABEL_28;
      }
      continue;
    }
    break;
  }
  der_free_oid();
  uint64_t v34 = "out of memory";
  uint64_t v35 = a1;
  int v36 = 12;
LABEL_36:
  hx509_set_error_string(v35, 0, v36, v34, v20, v21, v22, v23, v38);
LABEL_37:
  free(v40);
  hx509_name_free((uint64_t *)&v43);
  return 569879;
}

void hx509_name_free(uint64_t *a1)
{
  sub_213CD24C8(*a1);
  uint64_t v2 = *a1;
  *(void *)(v2 + 32) = 0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  free((void *)*a1);
  *a1 = 0;
}

uint64_t hx509_name_copy(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040F20C3E80uLL);
  *a3 = v4;
  if (v4)
  {
    uint64_t result = hx509_name_to_Name_0();
    if (!result) {
      return result;
    }
    free(*a3);
    *a3 = 0;
  }
  return 12;
}

uint64_t hx509_name_normalize()
{
  return 0;
}

uint64_t hx509_name_expand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    unint64_t v10 = *(unsigned int *)(a2 + 24);
    if (v10)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a2 + 32);
      while (!*(_DWORD *)(v13 + 16 * v12))
      {
LABEL_24:
        uint64_t v36 = 0;
        if (++v12 >= v10) {
          return v36;
        }
      }
      unint64_t v14 = 0;
      while (1)
      {
        uint64_t v15 = *(void *)(v13 + 16 * v12 + 8);
        if (*(_DWORD *)(v15 + 40 * v14 + 16) != 5) {
          break;
        }
        uint64_t v16 = v15 + 40 * v14;
        char v19 = *(char **)(v16 + 24);
        uint64_t v17 = (void **)(v16 + 24);
        uint64_t v18 = v19;
        uint64_t v20 = strstr(v19, "${");
        uint64_t v21 = v20;
        if (v20)
        {
          uint64_t v22 = rk_strpoolprintf(0, "%.*s", (int)v20 - (int)v18, v18);
          if (v22)
          {
            while (1)
            {
              if (!v21) {
                goto LABEL_20;
              }
              uint64_t v23 = strchr(v21, 125);
              if (!v23) {
                break;
              }
              size_t v28 = v23;
              int v29 = v21 + 2;
              char v30 = (_BYTE)v23 - (_BYTE)v29;
              uint64_t v31 = (const char *)hx509_env_lfind(a1, a3, v29, v23 - v29);
              if (!v31)
              {
                uint64_t v41 = "variable %.*s missing";
                char v42 = v30;
                goto LABEL_34;
              }
              int v32 = rk_strpoolprintf(v22, "%s", v31);
              if (v32)
              {
                uint64_t v33 = v32;
                uint64_t v21 = strstr(v28 + 1, "${");
                uint64_t v34 = v21 ? rk_strpoolprintf(v33, "%.*s") : rk_strpoolprintf(v33, "%s");
                uint64_t v22 = v34;
                if (v34) {
                  continue;
                }
              }
              goto LABEL_29;
            }
            uint64_t v41 = "missing }";
LABEL_34:
            uint64_t v36 = 22;
            hx509_set_error_string(a1, 0, 22, v41, v24, v25, v26, v27, v42);
            sub_213CB85F4(v22);
            return v36;
          }
LABEL_29:
          uint64_t v37 = "out of memory";
          uint64_t v36 = 12;
          uint64_t v38 = a1;
          int v39 = 12;
          goto LABEL_30;
        }
        uint64_t v22 = 0;
LABEL_20:
        if (v22)
        {
          free(*v17);
          uint64_t v35 = rk_strpoolcollect((uint64_t *)v22);
          *uint64_t v17 = v35;
          if (!v35) {
            goto LABEL_29;
          }
        }
        ++v14;
        uint64_t v13 = *(void *)(a2 + 32);
        if (v14 >= *(unsigned int *)(v13 + 16 * v12))
        {
          unint64_t v10 = *(unsigned int *)(a2 + 24);
          goto LABEL_24;
        }
      }
      uint64_t v37 = "unsupported type";
      goto LABEL_28;
    }
    return 0;
  }
  uint64_t v37 = "RDN not of supported type";
LABEL_28:
  uint64_t v36 = 22;
  uint64_t v38 = a1;
  int v39 = 22;
LABEL_30:
  hx509_set_error_string(v38, 0, v39, v37, a5, a6, a7, a8, v42);
  return v36;
}

uint64_t hx509_unparse_der_name(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  *a3 = 0;
  uint64_t v4 = sub_213CD2478(a1, a2, (uint64_t)v6, 0);
  if (!v4)
  {
    uint64_t v4 = sub_213CCC758((uint64_t)v6, a3);
    sub_213CD24C8((uint64_t)v6);
  }
  return v4;
}

uint64_t hx509_name_binary(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  size_t v4 = sub_213CD24B8(a1);
  *(void *)a2 = v4;
  size_t v5 = malloc_type_malloc(v4, 0x11AC1F61uLL);
  *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v5;
  if (!v5) {
    return 12;
  }
  uint64_t v6 = sub_213CD2498((uint64_t)v5 + *(void *)a2 - 1, *(void *)a2, a1, (uint64_t)&v17);
  if (v6)
  {
    uint64_t v14 = v6;
    free(*(void **)(a2 + 8));
    *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  }
  else
  {
    if (*(void *)a2 != v17) {
      sub_213CC1B28("internal ASN.1 encoder error", v7, v8, v9, v10, v11, v12, v13, v16);
    }
    return 0;
  }
  return v14;
}

uint64_t sub_213CCDC40(uint64_t a1, void **a2)
{
  uint64_t v5 = 0;
  uint64_t result = hx509_name_from_Name(a1, (void **)&v5);
  if (!result)
  {
    uint64_t v4 = sub_213CCC758(v5, a2);
    hx509_name_free(&v5);
    return v4;
  }
  return result;
}

BOOL hx509_name_is_null_p(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 0;
}

uint64_t hx509_general_name_unparse(int *a1, char **a2)
{
  *a2 = 0;
  int v2 = *a1;
  uint64_t result = 22;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
    case 7:
      hx509_oid_sprint();
      return 12;
    case 2:
      uint64_t v6 = rk_strpoolprintf(0, "rfc822Name: %.*s\n");
      goto LABEL_8;
    case 3:
      uint64_t v6 = rk_strpoolprintf(0, "dNSName: %.*s\n");
      goto LABEL_8;
    case 4:
      uint64_t v13 = 0;
      v14[0] = 0;
      v14[1] = 0;
      uint64_t v15 = 0;
      LODWORD(v15) = a1[2];
      long long v16 = *((_OWORD *)a1 + 1);
      uint64_t result = sub_213CCDC40((uint64_t)v14, (void **)&v13);
      if (result) {
        return result;
      }
      uint64_t v7 = (char *)v13;
      uint64_t v8 = (uint64_t *)rk_strpoolprintf(0, "directoryName: %s", v13);
      free(v7);
      if (v8) {
        goto LABEL_15;
      }
      return 12;
    case 5:
      uint64_t v6 = rk_strpoolprintf(0, "URI: %.*s");
      goto LABEL_8;
    case 6:
      uint64_t v9 = (unsigned __int8 *)*((void *)a1 + 2);
      uint64_t v10 = rk_strpoolprintf(0, "IPAddress: ");
      if (!v10) {
        return 12;
      }
      uint64_t v11 = *((void *)a1 + 1);
      if (v11 == 16)
      {
        uint64_t v6 = rk_strpoolprintf(v10, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X", *v9, v9[1], v9[2], v9[3], v9[4]);
      }
      else if (v11 == 4)
      {
        uint64_t v6 = rk_strpoolprintf(v10, "%d.%d.%d.%d");
      }
      else
      {
        uint64_t v6 = rk_strpoolprintf(v10, "unknown IP address of length %lu");
      }
LABEL_8:
      uint64_t v8 = (uint64_t *)v6;
      if (!v6) {
        return 12;
      }
LABEL_15:
      uint64_t v12 = rk_strpoolcollect(v8);
      uint64_t result = 0;
      *a2 = v12;
      return result;
    default:
      return 12;
  }
}

uint64_t hx509_peer_info_alloc(uint64_t a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004062D53EE8uLL);
  *a2 = v4;
  if (v4) {
    return 0;
  }
  uint64_t v9 = 12;
  hx509_set_error_string(a1, 0, 12, "out of memory", v5, v6, v7, v8, v11);
  return v9;
}

void hx509_peer_info_free(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      hx509_cert_free(v2);
    }
    sub_213CCDFD8((uint64_t)a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    free(a1);
  }
}

void sub_213CCDFD8(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        free_AlgorithmIdentifier(*(void *)(a1 + 8) + v4);
        ++v5;
        v4 += 24;
      }
      while (v5 < *(void *)(a1 + 16));
      uint64_t v2 = *(void **)v3;
    }
    free(v2);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  }
}

uint64_t hx509_peer_info_set_cert(void *a1, uint64_t a2)
{
  if (*a1) {
    hx509_cert_free();
  }
  *a1 = hx509_cert_ref(a2);
  return 0;
}

uint64_t hx509_peer_info_add_cms_alg(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_realloc(*(void **)(a2 + 8), 24 * *(void *)(a2 + 16) + 24, 0x10300406712BA52uLL);
  if (v4)
  {
    *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v4;
    uint64_t v9 = copy_AlgorithmIdentifier();
    if (!v9)
    {
      ++*(void *)(a2 + 16);
      return v9;
    }
    uint64_t v10 = a1;
    int v11 = v9;
  }
  else
  {
    uint64_t v9 = 12;
    uint64_t v10 = a1;
    int v11 = 12;
  }
  hx509_set_error_string(v10, 0, v11, "out of memory", v5, v6, v7, v8, v13);
  return v9;
}

uint64_t hx509_peer_info_set_cms_algs(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  sub_213CCDFD8(a2);
  uint64_t v7 = malloc_type_calloc(a4, 0x18uLL, 0x10300406712BA52uLL);
  *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v7;
  if (v7)
  {
    *(void *)(a2 + 16) = a4;
    if (a4)
    {
      for (uint64_t i = 0; ; i += 24)
      {
        uint64_t v13 = copy_AlgorithmIdentifier();
        if (v13) {
          break;
        }
        if (!--a4) {
          return 0;
        }
      }
      uint64_t v14 = v13;
      hx509_clear_error_string(a1);
      sub_213CCDFD8(a2);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(void *)(a2 + 16) = 0;
    uint64_t v14 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v8, v9, v10, v11, v16);
  }
  return v14;
}

uint64_t hx509_print_stdout(FILE *a1, const char *a2, va_list a3)
{
  if (!a1) {
    a1 = (FILE *)*MEMORY[0x263EF8358];
  }
  return vfprintf(a1, a2, a3);
}

uint64_t hx509_oid_sprint()
{
  return der_print_heim_oid();
}

void hx509_oid_print(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *), uint64_t a3)
{
  der_print_heim_oid();
  sub_213CCE2A4(a2, a3, (uint64_t)"%s", v5, v6, v7, v8, v9, 0);
  free(0);
}

uint64_t sub_213CCE2A4(uint64_t (*a1)(uint64_t, uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a1(a2, a3, &a9);
}

uint64_t hx509_bitstring_print(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_213CCE2A4(a2, a3, (uint64_t)"\tlength: %d\n\t", a4, a5, a6, a7, a8, *a1);
  if ((unint64_t)(*a1 + 7) >= 8)
  {
    unint64_t v17 = 0;
    do
      uint64_t result = sub_213CCE2A4(a2, a3, (uint64_t)"%02x%s%s", v12, v13, v14, v15, v16, *(unsigned __int8 *)(a1[1] + v17++));
    while (v17 < (unint64_t)(*a1 + 7) >> 3);
  }
  return result;
}

uint64_t hx509_cert_keyusage_print(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v14 = 0;
  *a3 = 0;
  uint64_t v5 = sub_213CC1990(a1, a2, &v14);
  if (!v5)
  {
    uint64_t v6 = sub_213CD2A20(v14);
    unparse_flags(v6, (uint64_t)off_267800CA0, __s1, 0x100uLL);
    uint64_t v7 = strdup(__s1);
    *a3 = v7;
    if (v7)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = 12;
      hx509_set_error_string(a1, 0, 12, "out of memory", v8, v9, v10, v11, v13);
    }
  }
  return v5;
}

uint64_t sub_213CCE4BC(uint64_t a1, uint64_t *a2)
{
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v21 = 0;
  uint64_t v4 = sub_213CBC454(a2[1], *a2, (uint64_t)&v22, (uint64_t)&v21);
  if (v4)
  {
    uint64_t v20 = v4;
    uint64_t v10 = "Decoding kerberos name in SAN failed: %d";
LABEL_11:
    uint64_t v18 = 1;
    sub_213CCF4D0(a1, 1, (uint64_t)v10, v5, v6, v7, v8, v9, v20);
    return v18;
  }
  if (v21 != *a2)
  {
    uint64_t v10 = "Decoding kerberos name have extra bits on the end";
    goto LABEL_11;
  }
  if (v23)
  {
    unint64_t v11 = 0;
    do
    {
      sub_213CCF4D0(a1, 2, (uint64_t)"%s", v5, v6, v7, v8, v9, *(void *)(*((void *)&v23 + 1) + 8 * v11++));
      unint64_t v12 = v23;
      if (v11 < v23)
      {
        sub_213CCF4D0(a1, 2, (uint64_t)"/", v5, v6, v7, v8, v9, v20);
        unint64_t v12 = v23;
      }
    }
    while (v11 < v12);
  }
  sub_213CCF4D0(a1, 2, (uint64_t)"@", v5, v6, v7, v8, v9, v20);
  sub_213CCF4D0(a1, 2, (uint64_t)"%s", v13, v14, v15, v16, v17, v22);
  sub_213CBC4A4((uint64_t)&v22);
  return 0;
}

uint64_t sub_213CCE5F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = sub_213CD2F88(a2[1], *a2, (uint64_t)&v12, (uint64_t)&v11);
  if (v3)
  {
    uint64_t v9 = 1;
    sub_213CCF4D0(a1, 1, (uint64_t)"Decoding JID in SAN failed: %d", v4, v5, v6, v7, v8, v3);
  }
  else
  {
    sub_213CCF4D0(a1, 2, (uint64_t)"%s", v4, v5, v6, v7, v8, v12);
    sub_213CD2FD8((uint64_t)&v12);
    return 0;
  }
  return v9;
}

uint64_t sub_213CCE67C()
{
  return 0;
}

uint64_t sub_213CCE684(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a3)
  {
    case 1:
      if (!*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical not set on SHOULD\n";
        goto LABEL_10;
      }
      break;
    case 2:
      if (*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical set on SHOULD NOT\n";
        goto LABEL_10;
      }
      break;
    case 3:
      if (!*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical not set on MUST\n";
        goto LABEL_10;
      }
      break;
    case 4:
      if (*(void *)(a4 + 16))
      {
        uint64_t v9 = "\tCritical set on MUST NOT\n";
LABEL_10:
        sub_213CCF4D0(a1, 1, (uint64_t)v9, a4, a5, a6, a7, a8, v8);
      }
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t sub_213CCE730(uint64_t a1, unsigned char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v28 = 0;
  int v29 = 0;
  uint64_t v27 = 0;
  *a2 |= 0x20u;
  sub_213CCE684(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = sub_213CD2A88(*(void *)(a4 + 32), *(void *)(a4 + 24), (uint64_t)&v28, (uint64_t)&v27);
  if (v10)
  {
    uint64_t v25 = v10;
    uint64_t v16 = "Decoding SubjectKeyIdentifier failed: %d";
LABEL_12:
    uint64_t v23 = 1;
    sub_213CCF4D0(a1, 1, (uint64_t)v16, v11, v12, v13, v14, v15, v25);
    return v23;
  }
  if (v27 != *(void *)(a4 + 24))
  {
    uint64_t v16 = "Decoding SKI ahve extra bits on the end";
    goto LABEL_12;
  }
  unint64_t v17 = v28;
  if (!v28)
  {
    sub_213CCF4D0(a1, 1, (uint64_t)"SKI is too short (0 bytes)", v11, v12, v13, v14, v15, v25);
    unint64_t v17 = v28;
  }
  if (v17 >= 0x15)
  {
    sub_213CCF4D0(a1, 1, (uint64_t)"SKI is too long", v11, v12, v13, v14, v15, v25);
    unint64_t v17 = v28;
  }
  uint64_t v26 = 0;
  rk_hex_encode(v29, v17, &v26);
  if (v26)
  {
    sub_213CCF4D0(a1, 2, (uint64_t)"\tsubject key id: %s\n", v18, v19, v20, v21, v22, (uint64_t)v26);
    free(v26);
  }
  sub_213CD2AD8((uint64_t)&v28);
  return 0;
}

uint64_t sub_213CCE84C(uint64_t a1, unsigned char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 8u;
  return sub_213CCF5A8(a1, (uint64_t)a2, (uint64_t)"subject", a3, a4, a6, a7, a8);
}

uint64_t sub_213CCE86C(uint64_t a1, unsigned char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 0x10u;
  return sub_213CCF5A8(a1, (uint64_t)a2, (uint64_t)"issuer", a3, a4, a6, a7, a8);
}

uint64_t sub_213CCE88C(uint64_t a1, unsigned char *a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  sub_213CCE684(a1, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  int v11 = sub_213CD2AFC(a4[4], a4[3], (uint64_t)&v26, (uint64_t)&v25);
  if (v11)
  {
    printf("\tret = %d while decoding BasicConstraints\n", v11);
  }
  else
  {
    if (v25 != a4[3]) {
      puts("\tlength of der data isn't same as extension");
    }
    unint64_t v17 = "NOT ";
    if (v26 && *v26) {
      unint64_t v17 = "";
    }
    sub_213CCF4D0(a1, 2, (uint64_t)"\tis %sa CA\n", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (v27) {
      sub_213CCF4D0(a1, 2, (uint64_t)"\tpathLenConstraint: %d\n", v18, v19, v20, v21, v22, *v27);
    }
    if (v26)
    {
      if (*v26)
      {
        if (!a4[2]) {
          sub_213CCF4D0(a1, 1, (uint64_t)"Is a CA and not BasicConstraints CRITICAL\n", v18, v19, v20, v21, v22, v24);
        }
        *a2 |= 2u;
      }
      else
      {
        sub_213CCF4D0(a1, 1, (uint64_t)"cA is FALSE, not allowed to be\n", v18, v19, v20, v21, v22, v24);
      }
    }
    sub_213CD2B4C((uint64_t)&v26);
  }
  return 0;
}

uint64_t sub_213CCE9D0(uint64_t a1, unsigned char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  sub_213CCE684(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = sub_213CD2C70(*(void *)(a4 + 32), *(void *)(a4 + 24), (uint64_t)&v46, (uint64_t)&v45);
  if (!v11)
  {
    sub_213CCF4D0(a1, 2, (uint64_t)"CRL Distribution Points:\n", v12, v13, v14, v15, v16, v39);
    unint64_t v18 = v46;
    if (!v46)
    {
LABEL_26:
      sub_213CD2CC0((uint64_t)&v46);
      uint64_t v17 = 0;
      *a2 |= 0x80u;
      return v17;
    }
    uint64_t v19 = 0;
    while (1)
    {
      uint64_t v20 = (uint64_t **)(v47 + 24 * v19);
      if (*v20) {
        break;
      }
LABEL_25:
      if (++v19 >= v18) {
        goto LABEL_26;
      }
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v21 = sub_213CD2C00((*v20)[1], **v20, (uint64_t)&v42, 0);
    if (v21)
    {
      sub_213CCF4D0(a1, 1, (uint64_t)"Failed to parse CRL Distribution Point Name: %d\n", v22, v23, v24, v25, v26, v21);
LABEL_24:
      unint64_t v18 = v46;
      goto LABEL_25;
    }
    if (v42)
    {
      if (v42 != 2)
      {
        if (v42 == 1)
        {
          sub_213CCF4D0(a1, 2, (uint64_t)"Fullname:\n", v22, v23, v24, v25, v26, v40);
          if (v43)
          {
            uint64_t v27 = 0;
            unint64_t v28 = 0;
            do
            {
              uint64_t v41 = 0;
              if (hx509_general_name_unparse((int *)(v44 + v27), (char **)&v41)) {
                BOOL v34 = 1;
              }
              else {
                BOOL v34 = v41 == 0;
              }
              if (!v34)
              {
                sub_213CCF4D0(a1, 2, (uint64_t)"   %s\n", v29, v30, v31, v32, v33, (uint64_t)v41);
                free(v41);
              }
              ++v28;
              v27 += 40;
            }
            while (v28 < v43);
          }
        }
        goto LABEL_23;
      }
      uint64_t v35 = a1;
      int v36 = 2;
      uint64_t v37 = "Unknown nameRelativeToCRLIssuer";
    }
    else
    {
      uint64_t v35 = a1;
      int v36 = 1;
      uint64_t v37 = "Unknown DistributionPointName";
    }
    sub_213CCF4D0(v35, v36, (uint64_t)v37, v22, v23, v24, v25, v26, v40);
LABEL_23:
    sub_213CD2C50((uint64_t)&v42);
    goto LABEL_24;
  }
  uint64_t v17 = 1;
  sub_213CCF4D0(a1, 1, (uint64_t)"Decoding CRL Distribution Points failed: %d\n", v12, v13, v14, v15, v16, v11);
  return v17;
}

uint64_t sub_213CCEBD4(uint64_t a1, unsigned char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v27, 0, sizeof(v27));
  uint64_t v26 = 0;
  *a2 |= 0x40u;
  sub_213CCE684(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = sub_213CD2A28(*(void *)(a4 + 32), *(void *)(a4 + 24), (uint64_t)v27, (uint64_t)&v26);
  if (v10)
  {
    uint64_t v24 = v10;
    uint64_t v16 = "Decoding AuthorityKeyIdentifier failed: %d";
LABEL_9:
    uint64_t v22 = 1;
    sub_213CCF4D0(a1, 1, (uint64_t)v16, v11, v12, v13, v14, v15, v24);
    return v22;
  }
  if (v26 != *(void *)(a4 + 24))
  {
    uint64_t v16 = "Decoding SKI ahve extra bits on the end";
    goto LABEL_9;
  }
  if (v27[0])
  {
    uint64_t v25 = 0;
    rk_hex_encode(*(char **)(v27[0] + 8), *(void *)v27[0], &v25);
    if (v25)
    {
      sub_213CCF4D0(a1, 2, (uint64_t)"\tauthority key id: %s\n", v17, v18, v19, v20, v21, (uint64_t)v25);
      free(v25);
    }
  }
  return 0;
}

uint64_t sub_213CCECB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v23 = 0;
  sub_213CCE684(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = sub_213CD2BA0(*(void *)(a4 + 32), *(void *)(a4 + 24), (uint64_t)v24, (uint64_t)&v23);
  if (!v10)
  {
    if (v23 == *(void *)(a4 + 24))
    {
      if (!LODWORD(v24[0]))
      {
        uint64_t v16 = "ExtKeyUsage length is 0";
        goto LABEL_3;
      }
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      while (!der_print_heim_oid())
      {
        sub_213CCF4D0(a1, 2, (uint64_t)"\teku-%d: %s\n", v11, v12, v13, v14, v15, v19);
        free(0);
        ++v19;
        v18 += 16;
        if (v19 >= LODWORD(v24[0]))
        {
          sub_213CD2BF0((uint64_t)v24);
          return 0;
        }
      }
      uint64_t v22 = v19;
      uint64_t v20 = "\tEKU: failed to print oid %d";
    }
    else
    {
      uint64_t v20 = "Padding data in EKU";
    }
    uint64_t v17 = 1;
    sub_213CCF4D0(a1, 1, (uint64_t)v20, v11, v12, v13, v14, v15, v22);
    sub_213CD2BF0((uint64_t)v24);
    return v17;
  }
  uint64_t v22 = v10;
  uint64_t v16 = "Decoding ExtKeyUsage failed: %d";
LABEL_3:
  uint64_t v17 = 1;
  sub_213CCF4D0(a1, 1, (uint64_t)v16, v11, v12, v13, v14, v15, v22);
  return v17;
}

uint64_t sub_213CCEDF0(uint64_t a1, unsigned char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 |= 4u;
  return 0;
}

uint64_t sub_213CCEE24(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  sub_213CCE684(a1, a2, a3, a4, a5, a6, a7, a8);
  int v10 = sub_213CD2FE8(*(void *)(a4 + 32), *(void *)(a4 + 24), (uint64_t)&v27, (uint64_t)&v26);
  if (v10)
  {
    printf("\tret = %d while decoding AuthorityInfoAccessSyntax\n", v10);
  }
  else
  {
    if (v27)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v25 = 0;
        sub_213CCF4D0(a1, 2, (uint64_t)"\ttype: ", v11, v12, v13, v14, v15, v24);
        hx509_oid_print(v28 + v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_213CCF594, a1);
        hx509_general_name_unparse((int *)(v28 + v16 + 16), (char **)&v25);
        sub_213CCF4D0(a1, 2, (uint64_t)"\n\tdirname: %s\n", v18, v19, v20, v21, v22, (uint64_t)v25);
        free(v25);
        ++v17;
        v16 += 56;
      }
      while (v17 < v27);
    }
    sub_213CD3008((uint64_t)&v27);
  }
  return 0;
}

uint64_t hx509_validate_ctx_init(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_malloc(0x18uLL, 0x1080040C4643742uLL);
  *a2 = v3;
  if (!v3) {
    return 12;
  }
  uint64_t v4 = v3;
  uint64_t result = 0;
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  return result;
}

uint64_t hx509_validate_ctx_set_print(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

_DWORD *hx509_validate_ctx_add_flags(_DWORD *result, int a2)
{
  *result |= a2;
  return result;
}

uint64_t hx509_validate_cert(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = (void *)sub_213CBE6DC(a3);
  int v80 = 0;
  if (sub_213CBE6E4((uint64_t)v5) != 3) {
    sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"Not version 3 certificate\n", v6, v7, v8, v9, v10, v75);
  }
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v81 = 0;
  uint64_t v11 = (_DWORD *)v5[2];
  if ((!v11 || *v11 <= 1u) && v5[30]) {
    sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"Not version 3 certificate with extensions\n", v6, v7, v8, v9, v10, v75);
  }
  if ((int)sub_213CBE6E4((uint64_t)v5) >= 3 && !v5[30]) {
    sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"Version 3 certificate without extensions\n", v12, v13, v14, v15, v16, v75);
  }
  if (hx509_cert_get_subject(a3, (void **)&v82)
    || (hx509_name_to_string(v82, &v81),
        sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"subject name: %s\n", v17, v18, v19, v20, v21, (uint64_t)v81),
        free(v81),
        hx509_cert_get_issuer(a3, (void **)&v83)))
  {
    abort();
  }
  hx509_name_to_string(v83, &v81);
  sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"issuer name: %s\n", v22, v23, v24, v25, v26, (uint64_t)v81);
  free(v81);
  if (!hx509_name_cmp(v82, v83))
  {
    LOBYTE(v80) = v80 | 1;
    sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"\tis a self-signed certificate\n", v27, v28, v29, v30, v31, v76);
  }
  sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"Validity:\n", v27, v28, v29, v30, v31, v76);
  sub_213CCF51C((uint64_t)(v5 + 14), (char **)&v81);
  sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"\tnotBefore %s\n", v32, v33, v34, v35, v36, (uint64_t)v81);
  free(v81);
  sub_213CCF51C((uint64_t)(v5 + 16), (char **)&v81);
  sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"\tnotAfter  %s\n", v37, v38, v39, v40, v41, (uint64_t)v81);
  free(v81);
  uint64_t v47 = (_DWORD *)v5[30];
  if (v47)
  {
    if (*v47
      || (sub_213CCF4D0((uint64_t)a2, 3, (uint64_t)"The empty extensions list is not allowed by PKIX\n", v42, v43, v44, v45, v46, v77), *(_DWORD *)v5[30]))
    {
      uint64_t v48 = 0;
      while (1)
      {
        if (!off_26AA94388) {
          goto LABEL_24;
        }
        uint64_t v49 = 0;
        uint64_t v50 = (uint64_t *)&off_26AA94388;
        if (der_heim_oid_cmp()) {
          break;
        }
LABEL_22:
        if (!*v50) {
          goto LABEL_24;
        }
        sub_213CCF4D0((uint64_t)a2, 3, (uint64_t)"checking extention: %s\n", v42, v43, v44, v45, v46, *v50);
        ((void (*)(_DWORD *, int *, void, uint64_t))(&off_26AA94388)[4 * v49 + 2])(a2, &v80, LODWORD((&off_26AA94388)[4 * v49 + 3]), *(void *)(v5[30] + 8) + 40 * v48);
LABEL_32:
        if (++v48 >= (unint64_t)*(unsigned int *)v5[30]) {
          goto LABEL_35;
        }
      }
      while (v50[4])
      {
        v50 += 4;
        ++v49;
        if (!der_heim_oid_cmp()) {
          goto LABEL_22;
        }
      }
LABEL_24:
      if (*(void *)(*(void *)(v5[30] + 8) + 40 * v48 + 16)) {
        int v51 = 3;
      }
      else {
        int v51 = 2;
      }
      sub_213CCF4D0((uint64_t)a2, v51, (uint64_t)"don't know what ", v42, v43, v44, v45, v46, v77);
      if (*(void *)(*(void *)(v5[30] + 8) + 40 * v48 + 16)) {
        sub_213CCF4D0((uint64_t)a2, v51, (uint64_t)"and is CRITICAL ", v52, v53, v54, v55, v56, v78);
      }
      if ((*a2 & v51) != 0) {
        hx509_oid_print(*(void *)(v5[30] + 8) + 40 * v48, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_213CCF594, (uint64_t)a2);
      }
      sub_213CCF4D0((uint64_t)a2, v51, (uint64_t)" is\n", v52, v53, v54, v55, v56, v78);
      goto LABEL_32;
    }
  }
  else
  {
    sub_213CCF4D0((uint64_t)a2, 2, (uint64_t)"no extentions\n", v42, v43, v44, v45, v46, v77);
  }
LABEL_35:
  if ((v80 & 2) != 0)
  {
    if ((v80 & 0x20) != 0) {
      goto LABEL_41;
    }
    uint64_t v57 = "CA certificate have no SubjectKeyIdentifier\n";
  }
  else
  {
    if ((v80 & 0x40) != 0) {
      goto LABEL_41;
    }
    uint64_t v57 = "Is not CA and doesn't have AuthorityKeyIdentifier\n";
  }
  sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)v57, v42, v43, v44, v45, v46, v77);
LABEL_41:
  int v58 = v80;
  if ((v80 & 0x20) == 0)
  {
    sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"Doesn't have SubjectKeyIdentifier\n", v42, v43, v44, v45, v46, v77);
    int v58 = v80;
  }
  if ((~v58 & 6) == 0)
  {
    sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"Proxy and CA at the same time!\n", v42, v43, v44, v45, v46, v77);
    LOBYTE(v5init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v80;
  }
  if ((v58 & 4) != 0)
  {
    if ((v58 & 8) != 0)
    {
      sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"Proxy and have SAN\n", v42, v43, v44, v45, v46, v77);
      LOBYTE(v5init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v80;
    }
    if ((v58 & 0x10) != 0) {
      sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"Proxy and have IAN\n", v42, v43, v44, v45, v46, v77);
    }
  }
  BOOL is_null_p = hx509_name_is_null_p(v82);
  int v65 = v80;
  if (is_null_p && (v80 & 8) == 0)
  {
    sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"NULL subject DN and doesn't have a SAN\n", v60, v61, v62, v63, v64, v77);
    int v65 = v80;
  }
  if ((v65 & 0xFFFFFF81) != 0)
  {
    if ((v65 & 1) == 0) {
      goto LABEL_61;
    }
  }
  else
  {
    sub_213CCF4D0((uint64_t)a2, 1, (uint64_t)"Not a CA nor PROXY and doesn't haveCRL Dist Point\n", v60, v61, v62, v63, v64, v77);
    if ((v80 & 1) == 0) {
      goto LABEL_61;
    }
  }
  if (sub_213CC0B9C(a1, a3, (uint64_t)(v5 + 31), (uint64_t)v5, v5 + 34, v62, v63, v64))
  {
    uint64_t v71 = "Could NOT verify self-signed certificate self-signature!\n";
    uint64_t v72 = (uint64_t)a2;
    int v73 = 1;
  }
  else
  {
    uint64_t v71 = "Self-signed certificate was self-signed\n";
    uint64_t v72 = (uint64_t)a2;
    int v73 = 2;
  }
  sub_213CCF4D0(v72, v73, (uint64_t)v71, v66, v67, v68, v69, v70, v77);
LABEL_61:
  hx509_name_free(&v82);
  hx509_name_free(&v83);
  return 0;
}

uint64_t sub_213CCF4D0(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(_DWORD *)result & a2) != 0)
  {
    uint64_t v9 = *(uint64_t (**)(void, uint64_t, uint64_t *))(result + 8);
    if (v9) {
      return v9(*(void *)(result + 16), a3, &a9);
    }
  }
  return result;
}

char *sub_213CCF51C(uint64_t a1, char **a2)
{
  *a2 = 0;
  time_t v6 = sub_213CBF9D0(a1);
  uint64_t v3 = gmtime(&v6);
  uint64_t result = (char *)malloc_type_malloc(0x1EuLL, 0x43CAEAE5uLL);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = (char *)strftime(result, 0x1EuLL, "%Y-%m-%d %H:%M:%S", v3);
    *a2 = v5;
  }
  return result;
}

uint64_t sub_213CCF594(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 8);
  if (v1) {
    return v1(*(void *)(result + 16));
  }
  return result;
}

uint64_t sub_213CCF5A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_213CCE684(a1, a2, a4, a5, a5, a6, a7, a8);
  uint64_t v16 = *(void *)(a5 + 24);
  if (v16)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    uint64_t v17 = sub_213CD28F0(*(void *)(a5 + 32), v16, (uint64_t)&v46, (uint64_t)&v45);
    if (v17)
    {
      uint64_t v41 = v17;
      uint64_t v18 = "\tret = %d while decoding %s GeneralNames\n";
    }
    else
    {
      if (v46)
      {
        uint64_t v21 = 0;
        while (1)
        {
          uint64_t v22 = (int *)(v47 + 40 * v21);
          if ((*v22 - 2) >= 6)
          {
            if (*v22 == 1)
            {
              sub_213CCF4D0(a1, 2, (uint64_t)"%sAltName otherName ", v11, v12, v13, v14, v15, a3);
              uint64_t v24 = 0;
              while (1)
              {
                uint64_t v25 = &(&off_26AA942B0)[v24];
                if (!der_heim_oid_cmp()) {
                  break;
                }
                v24 += 3;
                if (v24 == 15)
                {
                  hx509_oid_print(v47 + 40 * v21 + 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))sub_213CCF594, a1);
                  sub_213CCF4D0(a1, 2, (uint64_t)" unknown", v31, v32, v33, v34, v35, v42);
                  goto LABEL_20;
                }
              }
              sub_213CCF4D0(a1, 2, (uint64_t)"%s: ", v26, v27, v28, v29, v30, (uint64_t)*v25);
              ((void (*)(uint64_t, uint64_t))v25[2])(a1, v47 + 40 * v21 + 24);
LABEL_20:
              sub_213CCF4D0(a1, 2, (uint64_t)"\n", v36, v37, v38, v39, v40, v43);
            }
          }
          else
          {
            uint64_t v44 = 0;
            uint64_t v23 = hx509_general_name_unparse(v22, (char **)&v44);
            if (v23)
            {
              uint64_t v41 = v23;
              uint64_t v18 = "ret = %d unparsing GeneralName\n";
              goto LABEL_5;
            }
            sub_213CCF4D0(a1, 2, (uint64_t)"%s\n", v11, v12, v13, v14, v15, (uint64_t)v44);
            free(v44);
          }
          if (++v21 >= (unint64_t)v46)
          {
            sub_213CD2940((uint64_t)&v46);
            return 0;
          }
        }
      }
      uint64_t v41 = a3;
      uint64_t v18 = "%sAltName generalName empty, not allowed\n";
    }
  }
  else
  {
    uint64_t v41 = a3;
    uint64_t v18 = "%sAltName empty, not allowed";
  }
LABEL_5:
  uint64_t v19 = 1;
  sub_213CCF4D0(a1, 1, (uint64_t)v18, v11, v12, v13, v14, v15, v41);
  return v19;
}

uint64_t hx509_request_init(uint64_t a1, void *a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 0x50uLL, 0x10B0040751154FDuLL);
  *a2 = v3;
  if (v3) {
    return 0;
  }
  else {
    return 12;
  }
}

void hx509_request_free(void **a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    hx509_name_free(v2);
    uint64_t v2 = (uint64_t *)*a1;
  }
  free_SubjectPublicKeyInfo((uint64_t)(v2 + 1));
  sub_213CD2BF0((uint64_t)*a1 + 48);
  sub_213CD2940((uint64_t)*a1 + 64);
  uint64_t v3 = *a1;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  _OWORD *v3 = 0u;
  free(*a1);
  *a1 = 0;
}

uint64_t hx509_request_set_name(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    hx509_name_free(a2);
  }
  if (!a3) {
    return 0;
  }
  uint64_t result = hx509_name_copy(a1, a3, (void **)a2);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t hx509_request_get_name(uint64_t a1, uint64_t *a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (v8)
  {
    return hx509_name_copy(a1, v8, a3);
  }
  else
  {
    hx509_set_error_string(a1, 0, 22, "Request have no name", a5, a6, a7, a8, vars0);
    return 22;
  }
}

uint64_t hx509_request_set_SubjectPublicKeyInfo(uint64_t a1, uint64_t a2)
{
  free_SubjectPublicKeyInfo(a2 + 8);

  return copy_SubjectPublicKeyInfo();
}

uint64_t hx509_request_get_SubjectPublicKeyInfo()
{
  return copy_SubjectPublicKeyInfo();
}

uint64_t _hx509_request_add_dns_name(int a1, uint64_t a2, char *__s)
{
  return sub_213CD2950((unsigned int *)(a2 + 64));
}

uint64_t _hx509_request_add_email(int a1, uint64_t a2, char *__s)
{
  return sub_213CD2950((unsigned int *)(a2 + 64));
}

uint64_t _hx509_request_to_pkcs10(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v21 = 0;
  if (*a2)
  {
    v24[0] = 0;
    v24[1] = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v34 = 0;
    *a4 = 0;
    a4[1] = 0;
    LODWORD(v26) = 0;
    uint64_t v11 = hx509_name_to_Name_0();
    if (v11) {
      goto LABEL_16;
    }
    uint64_t v11 = copy_SubjectPublicKeyInfo();
    if (v11) {
      goto LABEL_16;
    }
    *((void *)&v31 + 1) = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    if (*((void *)&v31 + 1))
    {
      uint64_t v12 = (void *)sub_213CD2310((uint64_t)&v25);
      v24[0] = v12;
      uint64_t v13 = malloc_type_malloc((size_t)v12, 0x54E1B5AuLL);
      v24[1] = v13;
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = sub_213CD22F0((uint64_t)v12 + (void)v13 - 1, (uint64_t)v12, (uint64_t)&v25, (uint64_t)&v21);
        if (v15)
        {
          uint64_t v11 = v15;
          uint64_t v16 = v14;
LABEL_8:
          free(v16);
          v24[1] = 0;
LABEL_16:
          sub_213CD2370((uint64_t)&v25);
          return v11;
        }
        if (v12 != v21) {
LABEL_20:
        }
          abort();
        uint64_t v11 = sub_213CC4DCC(a1, a3, (uint64_t)off_2678006B0, (uint64_t)v24, (uint64_t)&v32, (uint64_t)&v22);
        free(v24[1]);
        if (v11) {
          goto LABEL_16;
        }
        *((void *)&v33 + 1) = 8 * v22;
        uint64_t v34 = v23;
        v24[0] = (void *)sub_213CD2360((uint64_t)&v25);
        uint64_t v17 = malloc_type_malloc((size_t)v24[0], 0xCDD8BB95uLL);
        v24[1] = v17;
        if (v17)
        {
          uint64_t v18 = sub_213CD2340((uint64_t)((uint64_t)v17 + (unint64_t)v24[0]) - 1, (uint64_t)v24[0], (uint64_t)&v25, (uint64_t)&v21);
          if (v18)
          {
            uint64_t v11 = v18;
            uint64_t v16 = v24[1];
            goto LABEL_8;
          }
          if (v24[0] == v21)
          {
            uint64_t v11 = 0;
            *(_OWORD *)a4 = *(_OWORD *)v24;
            goto LABEL_16;
          }
          goto LABEL_20;
        }
      }
    }
    uint64_t v11 = 12;
    goto LABEL_16;
  }
  uint64_t v11 = 22;
  hx509_set_error_string(a1, 0, 22, "PKCS10 needs to have a subject", a5, a6, a7, a8, v20);
  return v11;
}

uint64_t _hx509_request_parse(uint64_t a1, char *__s1, uint64_t **a3)
{
  if (strncmp(__s1, "PKCS10:", 7uLL))
  {
    uint64_t v10 = 569966;
    hx509_set_error_string(a1, 0, 569966, "unsupport type in %s", v6, v7, v8, v9, (char)__s1);
    return v10;
  }
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  off_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v11 = __s1 + 7;
  uint64_t v12 = rk_undumpdata(v11, &v22, &v24);
  if (v12)
  {
    uint64_t v10 = v12;
    char v21 = (char)v11;
    uint64_t v17 = "Failed to map file %s";
LABEL_7:
    hx509_set_error_string(a1, 0, v10, v17, v13, v14, v15, v16, v21);
    return v10;
  }
  uint64_t v10 = sub_213CD2320((uint64_t)v22, v24, (uint64_t)v26, (uint64_t)&v23);
  j__free(v22);
  if (v10)
  {
    char v21 = (char)v11;
    uint64_t v17 = "Failed to decode %s";
    goto LABEL_7;
  }
  uint64_t v19 = (uint64_t *)malloc_type_calloc(1uLL, 0x50uLL, 0x10B0040751154FDuLL);
  *a3 = v19;
  if (v19)
  {
    free_SubjectPublicKeyInfo((uint64_t)(v19 + 1));
    uint64_t v20 = copy_SubjectPublicKeyInfo();
    if (v20 || (uint64_t v20 = hx509_name_from_Name((uint64_t)&v26[1] + 8, (void **)&v25), v20))
    {
      uint64_t v10 = v20;
      sub_213CD2370((uint64_t)v26);
    }
    else
    {
      uint64_t v10 = hx509_request_set_name(a1, *a3, v25);
      hx509_name_free(&v25);
      sub_213CD2370((uint64_t)v26);
      if (!v10) {
        return v10;
      }
    }
    hx509_request_free((void **)a3);
  }
  else
  {
    sub_213CD2370((uint64_t)v26);
    return 12;
  }
  return v10;
}

uint64_t _hx509_request_print(uint64_t a1, uint64_t *a2, FILE *a3)
{
  uint64_t v4 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v13 = 0;
  uint64_t v10 = hx509_name_to_string(v4, &v13);
  if (v10)
  {
    hx509_set_error_string(a1, 0, v10, "Failed to print name", v6, v7, v8, v9, v12);
  }
  else
  {
    fprintf(a3, "name: %s\n", (const char *)v13);
    free(v13);
  }
  return v10;
}

uint64_t hx509_revoke_init(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = heim_uniq_alloc(0x40uLL, (uint64_t)"hx509-revoke", (uint64_t)sub_213CCFF1C, a4, a5, a6, a7, a8);
  *a2 = v9;
  if (!v9) {
    return 12;
  }
  uint64_t v10 = v9;
  uint64_t result = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = 0;
  uint64_t v12 = *a2;
  *(void *)(v12 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  *(void *)(v12 + 56) = 0;
  return result;
}

void sub_213CCFF1C(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      free(*(void **)(*(void *)(a1 + 32) + v2));
      sub_213CD2F04(*(void *)(a1 + 32) + v2 + 16);
      ++v3;
      v2 += 192;
    }
    while (v3 < *(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      sub_213CD1520(*(void *)(a1 + 48) + v4);
      ++v5;
      v4 += 184;
    }
    while (v5 < *(void *)(a1 + 56));
  }
  free(*(void **)(a1 + 48));
  uint64_t v6 = *(void **)(a1 + 32);

  free(v6);
}

void hx509_revoke_free(CFTypeRef *a1)
{
  if (a1)
  {
    heim_release(*a1);
    *a1 = 0;
  }
}

uint64_t hx509_revoke_add_ocsp(uint64_t a1, uint64_t a2, char *__s1)
{
  if (!strncmp(__s1, "FILE:", 5uLL))
  {
    uint64_t v11 = __s1 + 5;
    uint64_t v12 = *(const char ***)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 56);
    if (v13 && !strcmp(*v12, v11))
    {
      return 0;
    }
    else
    {
      uint64_t v14 = (char *)malloc_type_realloc(v12, 184 * v13 + 184, 0x10B0040DF19FAC3uLL);
      if (!v14) {
        goto LABEL_9;
      }
      *(void *)(a2 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v14;
      uint64_t v15 = &v14[184 * *(void *)(a2 + 56)];
      *((void *)v15 + 22) = 0;
      *((_OWORD *)v15 + 9) = 0u;
      *((_OWORD *)v15 + 10) = 0u;
      *((_OWORD *)v15 + 7) = 0u;
      *((_OWORD *)v15 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
      *((_OWORD *)v15 + 5) = 0u;
      *((_OWORD *)v15 + 6) = 0u;
      *((_OWORD *)v15 + 3) = 0u;
      *((_OWORD *)v15 + 4) = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *(_OWORD *)uint64_t v15 = 0u;
      uint64_t v16 = strdup(v11);
      uint64_t v17 = (char **)(*(void *)(a2 + 48) + 184 * *(void *)(a2 + 56));
      *uint64_t v17 = v16;
      if (v16)
      {
        uint64_t v10 = sub_213CD0164(a1, (uint64_t)v17);
        if (v10) {
          free(*(void **)(*(void *)(a2 + 48) + 184 * *(void *)(a2 + 56)));
        }
        else {
          ++*(void *)(a2 + 56);
        }
      }
      else
      {
LABEL_9:
        hx509_clear_error_string(a1);
        return 12;
      }
    }
  }
  else
  {
    uint64_t v10 = 569966;
    hx509_set_error_string(a1, 0, 569966, "unsupport type in %s", v6, v7, v8, v9, (char)__s1);
  }
  return v10;
}

uint64_t sub_213CD0164(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  off_t v27 = 0;
  uint64_t v28 = 0;
  memset(&v26, 0, sizeof(v26));
  uint64_t v25 = 0;
  uint64_t v4 = rk_undumpdata(*(const char **)a2, &v25, &v27);
  if (!v4)
  {
    if (stat(*(const char **)a2, &v26))
    {
      return *__error();
    }
    else
    {
      uint64_t v4 = sub_213CD17EC((uint64_t)v25, v27, (uint64_t)&v29);
      j__free(v25);
      if (!v4)
      {
        if (v38)
        {
          uint64_t v9 = hx509_certs_init(a1, "MEMORY:ocsp-certs", 0, 0, &v28);
          if (v9)
          {
            uint64_t v4 = v9;
            sub_213CD22E0((uint64_t)&v29);
            return v4;
          }
          uint64_t v15 = v38;
          if (*v38)
          {
            uint64_t v16 = 0;
            unint64_t v17 = 0;
            do
            {
              uint64_t v24 = 0;
              if (!hx509_cert_init(a1, *((void *)v15 + 1) + v16, (CFTypeRef *)&v24, v10, v11, v12, v13, v14))
              {
                hx509_certs_add(a1, v28, v24, v10, v11, v12, v13, v14);
                hx509_cert_free(v24);
              }
              ++v17;
              uint64_t v15 = v38;
              v16 += 288;
            }
            while (v17 < *v38);
          }
        }
        *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v26.st_mtimespec.tv_sec;
        sub_213CD22E0(a2 + 16);
        hx509_certs_free((const void **)(a2 + 168));
        hx509_cert_free(*(void *)(a2 + 176));
        uint64_t v4 = 0;
        uint64_t v18 = v28;
        *(void *)(a2 + 160) = v38;
        *(void *)(a2 + 16init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v18;
        long long v19 = v36;
        *(_OWORD *)(a2 + 112) = v35;
        *(_OWORD *)(a2 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v19;
        *(_OWORD *)(a2 + 144) = v37;
        long long v20 = v32;
        *(_OWORD *)(a2 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v31;
        *(_OWORD *)(a2 + 64) = v20;
        long long v21 = v34;
        *(_OWORD *)(a2 + 80) = v33;
        *(_OWORD *)(a2 + 96) = v21;
        long long v22 = v30;
        *(_OWORD *)(a2 + 16) = v29;
        *(_OWORD *)(a2 + 32) = v22;
        *(void *)(a2 + 176) = 0;
        return v4;
      }
      hx509_set_error_string(a1, 0, v4, "Failed to parse OCSP response", v5, v6, v7, v8, v24);
    }
  }
  return v4;
}

uint64_t hx509_revoke_add_crl(uint64_t a1, uint64_t a2, char *__s1)
{
  if (!strncmp(__s1, "FILE:", 5uLL))
  {
    uint64_t v11 = __s1 + 5;
    uint64_t v12 = *(const char ***)(a2 + 32);
    uint64_t v13 = *(void *)(a2 + 40);
    if (v13 && !strcmp(*v12, v11))
    {
      return 0;
    }
    else
    {
      uint64_t v14 = (char *)malloc_type_realloc(v12, 192 * v13 + 192, 0x10B00404ADEA4C8uLL);
      if (!v14) {
        goto LABEL_9;
      }
      *(void *)(a2 + 32) = v14;
      uint64_t v15 = &v14[192 * *(void *)(a2 + 40)];
      *((_OWORD *)v15 + 10) = 0u;
      *((_OWORD *)v15 + 11) = 0u;
      *((_OWORD *)v15 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
      *((_OWORD *)v15 + 9) = 0u;
      *((_OWORD *)v15 + 6) = 0u;
      *((_OWORD *)v15 + 7) = 0u;
      *((_OWORD *)v15 + 4) = 0u;
      *((_OWORD *)v15 + 5) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *((_OWORD *)v15 + 3) = 0u;
      *(_OWORD *)uint64_t v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      uint64_t v16 = strdup(v11);
      uint64_t v17 = *(void *)(a2 + 32);
      uint64_t v18 = *(void *)(a2 + 40);
      *(void *)(v17 + 192 * v1init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v16;
      if (v16)
      {
        uint64_t v10 = sub_213CD04AC(v11, (__darwin_time_t *)(v17 + 192 * v18 + 8), v17 + 192 * v18 + 16);
        if (v10) {
          free(*(void **)(*(void *)(a2 + 32) + 192 * *(void *)(a2 + 40)));
        }
        else {
          ++*(void *)(a2 + 40);
        }
      }
      else
      {
LABEL_9:
        hx509_clear_error_string(a1);
        return 12;
      }
    }
  }
  else
  {
    uint64_t v10 = 569966;
    hx509_set_error_string(a1, 0, 569966, "unsupport type in %s", v6, v7, v8, v9, (char)__s1);
  }
  return v10;
}

uint64_t sub_213CD04AC(const char *a1, __darwin_time_t *a2, uint64_t a3)
{
  uint64_t v10 = 0;
  off_t v11 = 0;
  memset(&v9, 0, sizeof(v9));
  uint64_t v8 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(void *)(a3 + 160) = 0;
  uint64_t v6 = rk_undumpdata(a1, &v8, &v11);
  if (!v6)
  {
    if (stat(a1, &v9))
    {
      return *__error();
    }
    else
    {
      *a2 = v9.st_mtimespec.tv_sec;
      uint64_t v6 = sub_213CD2EB4((uint64_t)v8, v11, a3, (uint64_t)&v10);
      j__free(v8);
      if (!v6)
      {
        if ((*(unsigned char *)(a3 + 152) & 7) != 0)
        {
          sub_213CD2F04(a3);
          return 569925;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v6;
}

uint64_t hx509_revoke_verify(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v113 = sub_213CBE6DC(a5);
  uint64_t v115 = a6;
  uint64_t v9 = sub_213CBE6DC(a6);
  hx509_clear_error_string(a1);
  if (a2[7])
  {
    unint64_t v14 = 0;
    int v111 = 569859;
    do
    {
      uint64_t v15 = a2[6];
      uint64_t v16 = (const char **)(v15 + 184 * v14);
      memset(&v117, 0, sizeof(v117));
      if (!stat(*v16, &v117)
        && *(void *)(v15 + 184 * v14 + 8) != v117.st_mtimespec.tv_sec
        && sub_213CD0164(a1, (uint64_t)v16))
      {
        goto LABEL_42;
      }
      uint64_t v17 = v15 + 184 * v14;
      uint64_t v19 = *(void *)(v17 + 176);
      uint64_t v18 = (void *)(v17 + 176);
      if (v19) {
        goto LABEL_7;
      }
      v123[0] = 0;
      memset(&v121, 0, 136);
      sub_213CC11B0((uint64_t)&v121);
      v121.st_dev = 4;
      v121.st_mtimespec.__darwin_time_t tv_sec = sub_213CBE6DC(v115) + 72;
      uint64_t v31 = v15 + 184 * v14;
      int v32 = *(_DWORD *)(v31 + 40);
      switch(v32)
      {
        case 0:
          goto LABEL_42;
        case 2:
          dev_t v33 = v121.st_dev | 0x100000;
          p_st_char size = &v121.st_size;
          break;
        case 1:
          dev_t v33 = v121.st_dev | 8;
          p_st_char size = &v121.st_mtimespec.tv_nsec;
          break;
        default:
          goto LABEL_28;
      }
      v121.st_dev = v33;
      *p_st_char size = v15 + 184 * v14 + 48;
LABEL_28:
      if (hx509_certs_find(a1, a3, &v121.st_dev, v123, v10, v11, v12, v13))
      {
        uint64_t v35 = *(void *)(v15 + 184 * v14 + 168);
        if (!v35 || hx509_certs_find(a1, v35, &v121.st_dev, v123, v10, v11, v12, v13)) {
          goto LABEL_40;
        }
      }
      if (hx509_cert_cmp(v123[0], v115))
      {
        uint64_t v112 = sub_213CBE6DC(v115);
        uint64_t v36 = sub_213CBE6DC(v123[0]);
        if (sub_213CBF090(v36, v112, 0))
        {
          uint64_t v37 = a1;
          char v38 = 0;
          int v39 = v111;
          uint64_t v40 = "Revoke OCSP signer is doesn't have CA as signer certificate";
LABEL_39:
          hx509_set_error_string(v37, v38, v39, v40, v10, v11, v12, v13, v110);
LABEL_40:
          if (v123[0]) {
            hx509_cert_free(v123[0]);
          }
          goto LABEL_42;
        }
        int v41 = sub_213CC0B9C(a1, v115, v36 + 248, v36, (void *)(v36 + 272), v11, v12, v13);
        if (v41)
        {
          int v39 = v41;
          uint64_t v37 = a1;
          char v38 = 1;
          uint64_t v40 = "OCSP signer signature invalid";
          goto LABEL_39;
        }
        if (hx509_cert_check_eku(a1, v123[0])) {
          goto LABEL_40;
        }
      }
      int v42 = sub_213CC0B9C(a1, v123[0], v15 + 184 * v14 + 120, v31 + 16, (void *)(v15 + 184 * v14 + 144), v11, v12, v13);
      if (v42)
      {
        int v39 = v42;
        uint64_t v37 = a1;
        char v38 = 1;
        uint64_t v40 = "OCSP signature invalid";
        goto LABEL_39;
      }
      *uint64_t v18 = v123[0];
LABEL_7:
      uint64_t v20 = v15 + 184 * v14;
      int v22 = *(_DWORD *)(v20 + 96);
      long long v21 = (unsigned int *)(v20 + 96);
      if (v22)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        uint64_t v25 = (void *)(v15 + 184 * v14 + 104);
        do
        {
          *(void *)&v121.st_dev = 0;
          v121.st_ino = 0;
          if (!der_heim_integer_cmp()
            && !hx509_verify_signature_0(a1, 0, *v25 + (v14 << 7), v113 + 72, *v25 + (v14 << 7) + 24))
          {
            __darwin_ino64_t v26 = *(void *)(v9 + 216);
            *(void *)&v121.st_dev = *(void *)(v9 + 208) >> 3;
            v121.st_ino = v26;
            if (!hx509_verify_signature_0(a1, 0, *v25 + v23, (uint64_t)&v121, *v25 + v23 + 40))
            {
              int v27 = *(_DWORD *)(*v25 + v23 + 80);
              if (v27 != 3)
              {
                if (v27 == 2 || v27 == 0)
                {
                  hx509_set_error_string(a1, 0, 569955, "Certificate revoked by issuer in OCSP", v10, v11, v12, v13, v110);
                  return 569955;
                }
                uint64_t v29 = *v25 + v23;
                if (*(void *)(v29 + 104) <= *(int *)(a1 + 16) + a4)
                {
                  long long v30 = *(uint64_t **)(v29 + 112);
                  if (!v30 || *v30 >= a4) {
                    return 0;
                  }
                }
              }
            }
          }
          ++v24;
          v23 += 128;
        }
        while (v24 < *v21);
      }
LABEL_42:
      ++v14;
    }
    while (v14 < a2[7]);
  }
  if (!a2[5])
  {
LABEL_79:
    if ((*(unsigned char *)(a1 + 12) & 1) == 0)
    {
      uint64_t v95 = 569956;
      long long v96 = "No revoke status found for certificates";
      uint64_t v97 = a1;
      char v98 = 1;
      goto LABEL_81;
    }
    return 0;
  }
  uint64_t v43 = 0;
  while (1)
  {
    uint64_t v44 = a2[4];
    uint64_t v45 = v44 + 192 * v43;
    memset(&v121, 0, sizeof(v121));
    int v120 = 0;
    uint64_t v46 = v45 + 64;
    int v47 = sub_213CCD06C(v113 + 72, v45 + 64, &v120);
    if (v47 | v120) {
      goto LABEL_65;
    }
    uint64_t v48 = v45 + 16;
    if (!stat(*(const char **)v45, &v121))
    {
      uint64_t v49 = v44 + 192 * v43;
      uint64_t v51 = *(void *)(v49 + 8);
      uint64_t v50 = (__darwin_time_t *)(v49 + 8);
      if (v51 != v121.st_mtimespec.tv_sec)
      {
        uint64_t v119 = 0;
        long long v118 = 0u;
        memset(&v117, 0, sizeof(v117));
        if (!sub_213CD04AC(*(const char **)v45, v50, (uint64_t)&v117))
        {
          sub_213CD2F04(v45 + 16);
          long long v52 = *(_OWORD *)&v117.st_dev;
          timespec st_atimespec = v117.st_atimespec;
          *(_OWORD *)(v45 + 32) = *(_OWORD *)&v117.st_uid;
          *(timespec *)(v45 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = st_atimespec;
          *(_OWORD *)uint64_t v48 = v52;
          timespec st_mtimespec = v117.st_mtimespec;
          timespec st_ctimespec = v117.st_ctimespec;
          long long v56 = *(_OWORD *)&v117.st_size;
          *(timespec *)(v45 + 96) = v117.st_birthtimespec;
          *(_OWORD *)(v45 + 112) = v56;
          *(timespec *)(v45 + 64) = st_mtimespec;
          *(timespec *)(v45 + 80) = st_ctimespec;
          long long v57 = *(_OWORD *)&v117.st_blksize;
          long long v58 = *(_OWORD *)v117.st_qspare;
          long long v59 = v118;
          *(void *)(v45 + 176) = v119;
          *(_OWORD *)(v45 + 144) = v58;
          *(_OWORD *)(v45 + 160) = v59;
          *(_OWORD *)(v45 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v57;
          *(void *)(v44 + 192 * v43 + 184) = 0;
        }
      }
    }
    uint64_t v60 = v44 + 192 * v43;
    int v62 = *(_DWORD *)(v60 + 188);
    uint64_t v61 = (_DWORD *)(v60 + 188);
    if (v62) {
      goto LABEL_65;
    }
    uint64_t v63 = v44 + 192 * v43;
    int v65 = *(_DWORD *)(v63 + 184);
    uint64_t v64 = (_DWORD *)(v63 + 184);
    if (v65) {
      goto LABEL_85;
    }
    v123[0] = 0;
    memset(&v117, 0, 136);
    if (sub_213CBF9D0(v48 + 88) <= a4) {
      break;
    }
    uint64_t v70 = a1;
    char v71 = 0;
    int v72 = 569952;
    int v73 = "CRL used before time";
LABEL_63:
    hx509_set_error_string(v70, v71, v72, v73, v66, v67, v68, v69, v110);
LABEL_64:
    *uint64_t v61 = 1;
LABEL_65:
    if ((unint64_t)++v43 >= a2[5]) {
      goto LABEL_79;
    }
  }
  uint64_t v74 = *(void *)(v48 + 104);
  if (!v74)
  {
    uint64_t v70 = a1;
    char v71 = 0;
    int v72 = 569954;
    int v73 = "CRL missing nextUpdate";
    goto LABEL_63;
  }
  if (sub_213CBF9D0(v74) < a4)
  {
    uint64_t v70 = a1;
    char v71 = 0;
    int v72 = 569953;
    int v73 = "CRL used after time";
    goto LABEL_63;
  }
  sub_213CC11B0((uint64_t)&v117);
  if (!sub_213CBEF10(a1, v115, 64, 0))
  {
    uint64_t v80 = hx509_cert_ref(v115);
    v123[0] = v80;
    goto LABEL_69;
  }
  v117.st_dev = 1032;
  v117.st_mtimespec.tv_nsec = v46;
  int v79 = hx509_certs_find(a1, a3, &v117.st_dev, v123, v75, v76, v77, v78);
  if (v79)
  {
    int v72 = v79;
    uint64_t v70 = a1;
    char v71 = 1;
    int v73 = "Failed to find certificate for CRL";
    goto LABEL_63;
  }
  uint64_t v80 = v123[0];
LABEL_69:
  int v81 = sub_213CC0B9C(a1, v80, v44 + 192 * v43 + 144, v48, (void *)(v44 + 192 * v43 + 168), v67, v68, v69);
  if (v81)
  {
    int v86 = v81;
    uint64_t v87 = a1;
    uint64_t v88 = "CRL signature invalid";
LABEL_71:
    hx509_set_error_string(v87, 1, v86, v88, v82, v83, v84, v85, v110);
    hx509_cert_free(v123[0]);
    goto LABEL_64;
  }
  if (sub_213CBEF10(a1, v123[0], 32, 1))
  {
    while (1)
    {
      uint64_t v122 = 0;
      sub_213CC11B0((uint64_t)&v117);
      v117.st_dev = 1032;
      v117.st_mtimespec.tv_nsec = sub_213CBE6DC(v123[0]) + 72;
      int v93 = hx509_certs_find(a1, a3, &v117.st_dev, &v122, v89, v90, v91, v92);
      if (v93)
      {
        int v86 = v93;
        uint64_t v87 = a1;
        uint64_t v88 = "Failed to find parent of CRL signer";
        goto LABEL_71;
      }
      int v94 = hx509_revoke_verify(a1, a2, a3, a4, v123[0], v122);
      hx509_cert_free(v123[0]);
      v123[0] = v122;
      uint64_t v87 = a1;
      if (v94) {
        break;
      }
      if (!sub_213CBEF10(a1, v122, 32, 1)) {
        goto LABEL_84;
      }
    }
    int v86 = v94;
    uint64_t v88 = "Failed to verify revoke status of CRL signer";
    goto LABEL_71;
  }
LABEL_84:
  hx509_cert_free(v123[0]);
  *uint64_t v64 = 1;
LABEL_85:
  int v100 = *(unsigned int **)(v48 + 120);
  if (v100)
  {
    uint64_t v101 = *v100;
    if (v101)
    {
      uint64_t v102 = (void *)(*((void *)v100 + 1) + 16);
      while (!*v102)
      {
        v102 += 5;
        if (!--v101) {
          goto LABEL_90;
        }
      }
      uint64_t v95 = 569957;
      long long v96 = "Unknown CRL extension";
      uint64_t v97 = a1;
      char v98 = 0;
LABEL_81:
      int v99 = v95;
LABEL_82:
      hx509_set_error_string(v97, v98, v99, v96, v10, v11, v12, v13, v110);
      return v95;
    }
  }
LABEL_90:
  uint64_t v103 = *(_DWORD **)(v48 + 112);
  if (!v103 || !*v103) {
    return 0;
  }
  uint64_t v104 = 0;
  for (uint64_t i = 40;
        der_heim_integer_cmp() || sub_213CBF9D0(*(void *)(*(void *)(v48 + 112) + 8) + i - 16) > a4;
        i += 48)
  {
    if (++v104 >= (unint64_t)**(unsigned int **)(v48 + 112)) {
      return 0;
    }
  }
  uint64_t v107 = *(unsigned int **)(*(void *)(*(void *)(v48 + 112) + 8) + i);
  uint64_t v95 = 569955;
  if (!v107 || (uint64_t v108 = *v107, !v108))
  {
LABEL_104:
    long long v96 = "Certificate revoked by issuer in CRL";
    uint64_t v97 = a1;
    char v98 = 0;
    int v99 = 569955;
    goto LABEL_82;
  }
  uint64_t v109 = (void *)(*((void *)v107 + 1) + 16);
  while (!*v109)
  {
    v109 += 5;
    if (!--v108) {
      goto LABEL_104;
    }
  }
  return 569957;
}

uint64_t hx509_ocsp_request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = 0;
  memset(v32, 0, sizeof(v32));
  long long v33 = 0u;
  uint64_t v10 = off_2678006B8;
  if (a5) {
    uint64_t v10 = (void *)a5;
  }
  v29[0] = v32;
  v29[1] = a3;
  _OWORD v29[2] = v10;
  uint64_t v30 = 0;
  uint64_t v11 = hx509_certs_iter_f(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_213CD1060, (uint64_t)v29, a5, a6, a7, a8);
  hx509_cert_free(v30);
  if (v11) {
    goto LABEL_19;
  }
  if (!a7) {
    goto LABEL_14;
  }
  uint64_t v12 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
  *(void *)&long long v33 = v12;
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  _DWORD *v12 = 1;
  unint64_t v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x1090040B832695BuLL);
  *((void *)v13 + 1) = v14;
  if (!v14)
  {
    _DWORD *v13 = 0;
    goto LABEL_12;
  }
  uint64_t v11 = der_copy_oid();
  if (v11)
  {
LABEL_19:
    sub_213CD2280((uint64_t)v32);
    return v11;
  }
  uint64_t v15 = malloc_type_malloc(0xAuLL, 0xBE068C00uLL);
  uint64_t v16 = *((void *)v13 + 1);
  *(void *)(v16 + 32) = v15;
  if (!v15) {
    goto LABEL_12;
  }
  *(void *)(v16 + 24) = 10;
  if (CCRandomGenerateBytes(v15, 0xAuLL))
  {
    uint64_t v11 = 569920;
    goto LABEL_19;
  }
  if (der_copy_octet_string())
  {
LABEL_12:
    uint64_t v11 = 12;
    goto LABEL_19;
  }
LABEL_14:
  size_t v17 = sub_213CD2270((uint64_t)v32);
  *(void *)a6 = v17;
  uint64_t v18 = malloc_type_malloc(v17, 0xD5368271uLL);
  *(void *)(a6 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v18;
  if (!v18)
  {
    uint64_t v11 = 12;
    goto LABEL_18;
  }
  uint64_t v19 = sub_213CD2250((uint64_t)v18 + *(void *)a6 - 1, *(void *)a6, (uint64_t)v32, (uint64_t)&v31);
  if (v19)
  {
    uint64_t v11 = v19;
    free(*(void **)(a6 + 8));
    *(void *)(a6 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
LABEL_18:
    sub_213CD2280((uint64_t)v32);
    goto LABEL_19;
  }
  sub_213CD2280((uint64_t)v32);
  if (v31 != *(void *)a6) {
    sub_213CC1B28("internal ASN.1 encoder error", v21, v22, v23, v24, v25, v26, v27, v28);
  }
  return 0;
}

uint64_t sub_213CD1060(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v26 = 0;
  uint64_t v5 = sub_213CBE6DC(a3);
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v6 = malloc_type_realloc(*(void **)(*a2 + 40), 88 * (*(_DWORD *)(*a2 + 32) + 1), 0x10B0040E743F4D9uLL);
  if (!v6) {
    return 12;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v7 = *a2;
  *(void *)(v7 + 40) = v6;
  uint64_t v8 = (uint64_t)v6 + 88 * *(unsigned int *)(v7 + 32);
  *(void *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  sub_213CC11B0((uint64_t)v22);
  LODWORD(v22[0]) |= 1u;
  *((void *)&v22[0] + 1) = v5;
  uint64_t v13 = hx509_certs_find(a1, a2[1], (int *)v22, &v26, v9, v10, v11, v12);
  if (!v13)
  {
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (hx509_cert_cmp(v15, v26))
      {
        uint64_t v13 = 569959;
        hx509_set_error_string(a1, 0, 569959, "Not same parent certifate as last certificate in request", v16, v17, v18, v19, v22[0]);
        goto LABEL_3;
      }
    }
    else
    {
      a2[3] = hx509_cert_ref(v26);
    }
    uint64_t v20 = sub_213CBE6DC(v26);
    uint64_t v13 = copy_AlgorithmIdentifier();
    if (!v13)
    {
      uint64_t v13 = sub_213CC4DCC(a1, 0, v8, v5 + 72, 0, v8 + 24);
      if (!v13)
      {
        uint64_t v21 = *(void *)(v20 + 216);
        uint64_t v24 = *(void *)(v20 + 208) >> 3;
        uint64_t v25 = v21;
        uint64_t v13 = sub_213CC4DCC(a1, 0, v8, (uint64_t)&v24, 0, v8 + 40);
        if (!v13)
        {
          uint64_t v13 = sub_213CD254C();
          if (!v13)
          {
            ++*(_DWORD *)(*a2 + 32);
            hx509_cert_free(v26);
            return v13;
          }
        }
      }
    }
  }
LABEL_3:
  hx509_cert_free(v26);
  sub_213CD2240(v8);
  *(void *)(v8 + 80) = 0;
  *(_OWORD *)(v8 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  return v13;
}

uint64_t hx509_revoke_ocsp_print(uint64_t a1, char *__s1, FILE *a3)
{
  uint64_t v4 = (FILE *)*MEMORY[0x263EF8358];
  long long v28 = 0u;
  long long v29 = 0u;
  if (a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = v4;
  }
  long long v30 = 0uLL;
  long long v31 = 0uLL;
  long long v32 = 0uLL;
  long long v33 = 0uLL;
  long long v34 = 0uLL;
  long long v35 = 0uLL;
  long long v36 = 0uLL;
  long long v37 = 0uLL;
  long long v38 = 0uLL;
  uint64_t v27 = strdup(__s1);
  if (v27)
  {
    uint64_t v6 = sub_213CD0164(a1, (uint64_t)&v27);
    if (v6)
    {
LABEL_25:
      sub_213CD1520((uint64_t)&v27);
      return v6;
    }
    fwrite("signer: ", 8uLL, 1uLL, v5);
    switch(v30)
    {
      case 1:
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        hx509_name_from_Name((uint64_t)&v30 + 8, &v26);
        hx509_name_to_string(v26, &v25);
        hx509_name_free((uint64_t *)&v26);
        fprintf(v5, " byName: %s\n", v25);
        unint64_t v14 = v25;
        break;
      case 2:
        uint64_t v26 = 0;
        rk_hex_encode((char *)v31, *((uint64_t *)&v30 + 1), &v26);
        fprintf(v5, " byKey: %s\n", (const char *)v26);
        unint64_t v14 = (char *)v26;
        break;
      case 0:
        sub_213CC1B28("choice_OCSPResponderID unknown", v7, v8, v9, v10, v11, v12, v13, v24);
      default:
        goto LABEL_14;
    }
    free(v14);
LABEL_14:
    sub_213CD156C(v33);
    fprintf(v5, "producedAt: %s\n", byte_2678015C0);
    fprintf(v5, "replies: %d\n", DWORD2(v33));
    if (DWORD2(v33))
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(int *)(v34 + v15 + 80);
        if (v17 > 3) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = off_2641E8518[v17];
        }
        fprintf(v5, "\t%zu. status: %s\n", v16, v18);
        sub_213CD156C(*(void *)(v34 + v15 + 104));
        fprintf(v5, "\tthisUpdate: %s\n", byte_2678015C0);
        if (*(void *)(v34 + v15 + 112))
        {
          sub_213CD156C(*(void *)(v34 + v15 + 104));
          fprintf(v5, "\tproducedAt: %s\n", byte_2678015C0);
        }
        ++v16;
        v15 += 128;
      }
      while (v16 < DWORD2(v33));
    }
    fwrite("appended certs:\n", 0x10uLL, 1uLL, v5);
    if ((void)v38) {
      uint64_t v6 = hx509_certs_iter_f(a1, v38, (uint64_t (*)(uint64_t, uint64_t))hx509_ci_print_names, (uint64_t)v5, v19, v20, v21, v22);
    }
    else {
      uint64_t v6 = 0;
    }
    goto LABEL_25;
  }
  return 12;
}

uint64_t sub_213CD1520(uint64_t a1)
{
  free(*(void **)a1);
  sub_213CD22E0(a1 + 16);
  hx509_certs_free((const void **)(a1 + 168));
  uint64_t v2 = *(void *)(a1 + 176);

  return hx509_cert_free(v2);
}

uint64_t sub_213CD156C(time_t a1)
{
  time_t v2 = a1;
  if (!ctime(&v2)) {
    return __strlcpy_chk();
  }
  uint64_t result = __strlcpy_chk();
  byte_2678015D4 = 0;
  return result;
}

uint64_t hx509_ocsp_verify(uint64_t a1, time_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, time_t *a7)
{
  uint64_t v13 = sub_213CBE6DC(a3);
  if (!a2) {
    a2 = time(0);
  }
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  memset(v36, 0, sizeof(v36));
  *a7 = 0;
  uint64_t v14 = sub_213CD17EC(a5, a6, (uint64_t)v36);
  if (v14)
  {
    uint64_t v19 = v14;
    hx509_set_error_string(a1, 0, v14, "Failed to parse OCSP response", v15, v16, v17, v18, v33);
  }
  else if (v37)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = v13 + 72;
    while (1)
    {
      if (!der_heim_integer_cmp()
        && !hx509_verify_signature_0(a1, 0, *((void *)&v37 + 1) + v20, v22, *((void *)&v37 + 1) + v20 + 24))
      {
        unsigned int v23 = *(_DWORD *)(*((void *)&v37 + 1) + v20 + 80);
        BOOL v24 = v23 > 3 || v23 == 1;
        if (v24 && *(void *)(*((void *)&v37 + 1) + v20 + 104) <= a2 + *(int *)(a1 + 16))
        {
          uint64_t v25 = *(time_t **)(*((void *)&v37 + 1) + v20 + 112);
          if (!v25) {
            goto LABEL_19;
          }
          time_t v26 = *v25;
          if (v26 >= a2) {
            break;
          }
        }
      }
      ++v21;
      v20 += 128;
      if (v21 >= v37) {
        goto LABEL_20;
      }
    }
    a2 = v26;
LABEL_19:
    *a7 = a2;
    sub_213CD22E0((uint64_t)v36);
    return 0;
  }
  else
  {
LABEL_20:
    uint64_t v19 = 569960;
    sub_213CD22E0((uint64_t)v36);
    long long v34 = 0;
    long long v35 = 0;
    if (hx509_cert_get_subject(a3, &v35)
      || (int v27 = hx509_name_to_string(v35, &v34), hx509_name_free((uint64_t *)&v35), v27))
    {
      hx509_clear_error_string(a1);
    }
    else
    {
      hx509_set_error_string(a1, 0, 569960, "Certificate %s not in OCSP response or not good", v28, v29, v30, v31, (char)v34);
      free(v34);
    }
  }
  return v19;
}

uint64_t sub_213CD17EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(void *)(a3 + 144) = 0;
  uint64_t v5 = sub_213CD2290(a1, a2, (uint64_t)&v11, (uint64_t)&v10);
  if (v5) {
    return v5;
  }
  if (v10 != a2)
  {
    uint64_t v5 = 1859794442;
    goto LABEL_7;
  }
  if (v11 <= 6 && ((1 << v11) & 0x6E) != 0) {
    goto LABEL_5;
  }
  if (!v12)
  {
    sub_213CD22B0((uint64_t)&v11);
    return 22;
  }
  if (der_heim_oid_cmp())
  {
LABEL_5:
    uint64_t v5 = 569958;
LABEL_7:
    sub_213CD22B0((uint64_t)&v11);
    return v5;
  }
  uint64_t v7 = sub_213CD22C0(*(void *)(v12 + 24), *(void *)(v12 + 16), a3, (uint64_t)&v10);
  if (v7)
  {
    uint64_t v5 = v7;
    goto LABEL_7;
  }
  uint64_t v8 = v10;
  uint64_t v9 = *(void *)(v12 + 16);
  sub_213CD22B0((uint64_t)&v11);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v5 = 1859794442;
  sub_213CD22E0(a3);
  return v5;
}

uint64_t hx509_crl_alloc(uint64_t a1, void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  *a2 = v4;
  if (v4)
  {
    uint64_t v9 = hx509_certs_init(a1, "MEMORY:crl", 0, 0, v4);
    uint64_t v10 = (void *)*a2;
    if (v9)
    {
      free(v10);
      *a2 = 0;
    }
    else
    {
      v10[1] = 0;
    }
  }
  else
  {
    uint64_t v9 = 12;
    hx509_set_error_string(a1, 0, 12, "out of memory", v5, v6, v7, v8, v12);
  }
  return v9;
}

uint64_t hx509_crl_add_revoked_certs(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return hx509_certs_merge(a1, *a2, a3, a4, a5, a6, a7, a8);
}

uint64_t hx509_crl_lifetime(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = time(0) + a3;
  return 0;
}

void hx509_crl_free(uint64_t a1, const void ***a2)
{
  if (*a2)
  {
    hx509_certs_free(*a2);
    unint64_t v3 = *a2;
    _OWORD *v3 = 0;
    v3[1] = 0;
    free(*a2);
    *a2 = 0;
  }
}

uint64_t hx509_crl_sign(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = off_2678006B0;
  uint64_t v45 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  *(_OWORD *)uint64_t v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v56 = 0;
  uint64_t v9 = _hx509_cert_private_key(a2);
  if (!v9)
  {
    uint64_t v17 = 569865;
    uint64_t v18 = "Private key missing for CRL signing";
    uint64_t v19 = a1;
    int v20 = 569865;
LABEL_9:
    hx509_set_error_string(v19, 0, v20, v18, v10, v11, v12, v13, v44);
    return v17;
  }
  uint64_t v14 = v9;
  uint64_t v15 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *(void *)&long long v47 = v15;
  if (!v15)
  {
    uint64_t v18 = "out of memory";
    uint64_t v17 = 12;
    uint64_t v19 = a1;
    int v20 = 12;
    goto LABEL_9;
  }
  *uint64_t v15 = 1;
  uint64_t v16 = copy_AlgorithmIdentifier();
  if (!v16)
  {
    sub_213CBE6DC(a2);
    uint64_t v16 = hx509_name_to_Name_0();
    if (!v16)
    {
      DWORD2(v51) = 2;
      *(void *)&long long v52 = time(0) - 86400;
      uint64_t v22 = malloc_type_malloc(0x10uLL, 0x1000040F7F8B94BuLL);
      *((void *)&v52 + 1) = v22;
      if (!v22) {
        goto LABEL_21;
      }
      time_t v27 = a3[1];
      if (!v27)
      {
        time_t v27 = time(0) + 31536000;
        uint64_t v22 = (void *)*((void *)&v52 + 1);
      }
      *(_DWORD *)uint64_t v22 = 2;
      v22[1] = v27;
      v53[0] = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
      if (!v53[0])
      {
LABEL_21:
        long long v38 = "out of memory";
        uint64_t v17 = 12;
        uint64_t v39 = a1;
        int v40 = 12;
LABEL_22:
        hx509_set_error_string(v39, 0, v40, v38, v23, v24, v25, v26, v44);
        goto LABEL_6;
      }
      v53[1] = 0;
      uint64_t v17 = hx509_certs_iter_f(a1, *a3, sub_213CD1DC4, (uint64_t)&v46, v23, v24, v25, v26);
      if (v17) {
        goto LABEL_6;
      }
      if (!*(_DWORD *)v53[0])
      {
        free(v53[0]);
        v53[0] = 0;
      }
      size_t v28 = sub_213CD2EA4((uint64_t)&v46);
      *(void *)a4 = v28;
      uint64_t v29 = malloc_type_malloc(v28, 0xEE5AB767uLL);
      *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v29;
      if (!v29)
      {
        uint64_t v17 = 12;
        goto LABEL_24;
      }
      uint64_t v30 = sub_213CD2E84((uint64_t)v29 + *(void *)a4 - 1, *(void *)a4, (uint64_t)&v46, (uint64_t)&v45);
      if (v30)
      {
        uint64_t v17 = v30;
        free(*(void **)(a4 + 8));
        *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
LABEL_24:
        long long v38 = "failed to encode tbsCRL";
LABEL_25:
        uint64_t v39 = a1;
        int v40 = v17;
        goto LABEL_22;
      }
      if (v45 == *(void *)a4)
      {
        uint64_t v17 = sub_213CC4EF8(a1, v14, (uint64_t)v8, a4, (uint64_t)&v54, (void *)&v55 + 1);
        free(*(void **)(a4 + 8));
        if (v17)
        {
          long long v38 = "Failed to sign CRL";
          goto LABEL_25;
        }
        size_t v41 = sub_213CD2EF4((uint64_t)&v46);
        *(void *)a4 = v41;
        int v42 = malloc_type_malloc(v41, 0xD477AAF3uLL);
        *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v42;
        if (!v42)
        {
          uint64_t v17 = 12;
          goto LABEL_33;
        }
        uint64_t v43 = sub_213CD2ED4((uint64_t)v42 + *(void *)a4 - 1, *(void *)a4, (uint64_t)&v46, (uint64_t)&v45);
        if (v43)
        {
          uint64_t v17 = v43;
          free(*(void **)(a4 + 8));
          *(void *)(a4 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
LABEL_33:
          long long v38 = "failed to encode CRL";
          goto LABEL_25;
        }
        if (v45 == *(void *)a4)
        {
          sub_213CD2F04((uint64_t)&v46);
          return 0;
        }
      }
      sub_213CC1B28("internal ASN.1 encoder error", v31, v32, v33, v34, v35, v36, v37, v44);
    }
  }
  uint64_t v17 = v16;
  hx509_clear_error_string(a1);
LABEL_6:
  sub_213CD2F04((uint64_t)&v46);
  return v17;
}

uint64_t sub_213CD1DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a2 + 112);
  uint64_t v5 = *(unsigned int *)v4;
  uint64_t v6 = malloc_type_realloc(v4[1], 48 * (v5 + 1), 0x10A00401C1B0557uLL);
  if (v6)
  {
    *(void *)(*(void *)(a2 + 112) + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v6;
    uint64_t serialnumber = hx509_cert_get_serialnumber();
    if (serialnumber)
    {
      hx509_clear_error_string(a1);
    }
    else
    {
      *(_DWORD *)(*(void *)(*(void *)(a2 + 112) + 8) + 48 * v5 + 24) = 2;
      *(void *)(*(void *)(*(void *)(a2 + 112) + 8) + 48 * v5 + 32) = time(0) - 86400;
      uint64_t v8 = *(void *)(a2 + 112);
      *(void *)(*(void *)(v8 + 8) + 48 * v5 + 40) = 0;
      ++*(_DWORD *)v8;
    }
  }
  else
  {
    hx509_clear_error_string(a1);
    return 12;
  }
  return serialnumber;
}

uint64_t sub_213CD1EB8(unsigned int *a1)
{
  time_t v2 = malloc_type_realloc(*((void **)a1 + 1), 24 * *a1 + 24, 0x7EF1AAFAuLL);
  if (!v2) {
    return 12;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_213CD1F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E8638, 2, a1, a2, a3, a4);
}

uint64_t sub_213CD1F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E8638, a1, a2, a3, a4);
}

uint64_t sub_213CD1F78(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E8638, a1);
}

uint64_t sub_213CD1F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E8658, 2, a1, a2, a3, a4);
}

uint64_t sub_213CD1FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E8658, a1, a2, a3, a4);
}

uint64_t sub_213CD1FC8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E8658, a1);
}

uint64_t sub_213CD1FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E86C8, 2, a1, a2, a3, a4);
}

uint64_t encode_ContentInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E86C8, a1, a2, a3, a4);
}

uint64_t length_ContentInfo(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E86C8, a1);
}

uint64_t free_ContentInfo(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E86C8, a1);
}

uint64_t sub_213CD2038()
{
  return _asn1_copy_top();
}

uint64_t decode_IssuerAndSerialNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E8788, 2, a1, a2, a3, a4);
}

uint64_t encode_IssuerAndSerialNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E8788, a1, a2, a3, a4);
}

uint64_t length_IssuerAndSerialNumber(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E8788, a1);
}

uint64_t free_IssuerAndSerialNumber(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E8788, a1);
}

uint64_t copy_IssuerAndSerialNumber()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD20C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E88D8, a1, a2, a3, a4);
}

uint64_t sub_213CD20E0(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E88D8, a1);
}

uint64_t sub_213CD20F0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E89B8, a1);
}

uint64_t sub_213CD2100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E8AC8, 2, a1, a2, a3, a4);
}

uint64_t sub_213CD2120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E8AC8, a1, a2, a3, a4);
}

uint64_t sub_213CD2140(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E8AC8, a1);
}

uint64_t sub_213CD2150(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E8AC8, a1);
}

uint64_t sub_213CD2160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E8CD8, 2, a1, a2, a3, a4);
}

uint64_t sub_213CD2180(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E8CD8, a1);
}

uint64_t sub_213CD2190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E8D58, 2, a1, a2, a3, a4);
}

uint64_t sub_213CD21B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E8D58, a1, a2, a3, a4);
}

uint64_t sub_213CD21D0(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E8D58, a1);
}

uint64_t sub_213CD21E0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E8D58, a1);
}

uint64_t sub_213CD21F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E8D78, 2, a1, a2, a3, a4);
}

uint64_t sub_213CD2210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E8D78, a1, a2, a3, a4);
}

uint64_t sub_213CD2230(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E8D78, a1);
}

uint64_t sub_213CD2240(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9028, a1);
}

uint64_t sub_213CD2250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9248, a1, a2, a3, a4);
}

uint64_t sub_213CD2270(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9248, a1);
}

uint64_t sub_213CD2280(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9248, a1);
}

uint64_t sub_213CD2290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9328, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD22B0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9328, a1);
}

uint64_t sub_213CD22C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9588, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD22E0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9588, a1);
}

uint64_t sub_213CD22F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9658, a1, a2, a3, a4);
}

uint64_t sub_213CD2310(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9658, a1);
}

uint64_t sub_213CD2320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E96B8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E96B8, a1, a2, a3, a4);
}

uint64_t sub_213CD2360(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E96B8, a1);
}

uint64_t sub_213CD2370(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E96B8, a1);
}

uint64_t decode_AlgorithmIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9948, 0, a1, a2, a3, a4);
}

uint64_t encode_AlgorithmIdentifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9948, a1, a2, a3, a4);
}

uint64_t length_AlgorithmIdentifier(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9948, a1);
}

uint64_t free_AlgorithmIdentifier(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9948, a1);
}

uint64_t copy_AlgorithmIdentifier()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD23F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9B48, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9B48, a1, a2, a3, a4);
}

uint64_t sub_213CD2434(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9B48, a1);
}

uint64_t sub_213CD2444(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9B48, a1);
}

uint64_t sub_213CD2454()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD2468(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9BF8, a1);
}

uint64_t sub_213CD2478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9CB8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9CB8, a1, a2, a3, a4);
}

uint64_t sub_213CD24B8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9CB8, a1);
}

uint64_t sub_213CD24C8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9CB8, a1);
}

uint64_t hx509_name_to_Name_0()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD24EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9CD8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD250C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9CD8, a1, a2, a3, a4);
}

uint64_t sub_213CD252C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9CD8, a1);
}

uint64_t sub_213CD253C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9CD8, a1);
}

uint64_t sub_213CD254C()
{
  return _asn1_copy_top();
}

uint64_t decode_SubjectPublicKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9E08, 0, a1, a2, a3, a4);
}

uint64_t encode_SubjectPublicKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9E08, a1, a2, a3, a4);
}

uint64_t length_SubjectPublicKeyInfo(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9E08, a1);
}

uint64_t free_SubjectPublicKeyInfo(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9E08, a1);
}

uint64_t copy_SubjectPublicKeyInfo()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD25D4(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9E68, a1);
}

uint64_t sub_213CD25E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641E9EC8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9EC8, a1, a2, a3, a4);
}

uint64_t sub_213CD2624(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9EC8, a1);
}

uint64_t sub_213CD2634(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641E9EC8, a1);
}

uint64_t sub_213CD2644()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD2658(unsigned int *a1)
{
  time_t v2 = malloc_type_realloc(*((void **)a1 + 1), 40 * *a1 + 40, 0x78E804E3uLL);
  if (!v2) {
    return 12;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_213CD26D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641E9FD8, a1, a2, a3, a4);
}

uint64_t sub_213CD26F8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641E9FD8, a1);
}

uint64_t sub_213CD2708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA038, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA038, a1, a2, a3, a4);
}

uint64_t sub_213CD2748(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA038, a1);
}

uint64_t sub_213CD2758(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA038, a1);
}

uint64_t sub_213CD2768()
{
  return _asn1_copy_top();
}

uint64_t decode_DomainParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA108, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD279C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA108, a1, a2, a3, a4);
}

uint64_t sub_213CD27BC(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA108, a1);
}

uint64_t free_DomainParameters(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA108, a1);
}

uint64_t sub_213CD27DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA168, a1, a2, a3, a4);
}

uint64_t sub_213CD27FC(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA168, a1);
}

uint64_t sub_213CD280C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA168, a1);
}

uint64_t decode_DHPublicKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA188, 0, a1, a2, a3, a4);
}

uint64_t encode_DHPublicKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA188, a1, a2, a3, a4);
}

uint64_t length_DHPublicKey(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA188, a1);
}

uint64_t sub_213CD286C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA188, a1);
}

uint64_t decode_GeneralName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA378, 0, a1, a2, a3, a4);
}

uint64_t encode_GeneralName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA378, a1, a2, a3, a4);
}

uint64_t length_GeneralName(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA378, a1);
}

uint64_t free_GeneralName(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA378, a1);
}

uint64_t copy_GeneralName()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD28F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA3D8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA3D8, a1, a2, a3, a4);
}

uint64_t sub_213CD2930(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA3D8, a1);
}

uint64_t sub_213CD2940(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA3D8, a1);
}

uint64_t sub_213CD2950(unsigned int *a1)
{
  time_t v2 = malloc_type_realloc(*((void **)a1 + 1), 40 * *a1 + 40, 0xA85F3D3FuLL);
  if (!v2) {
    return 12;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_213CD29D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA428, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD29F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA428, a1, a2, a3, a4);
}

uint64_t sub_213CD2A10(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA428, a1);
}

uint64_t sub_213CD2A20(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t sub_213CD2A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA4D8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA4D8, a1, a2, a3, a4);
}

uint64_t sub_213CD2A68(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA4D8, a1);
}

uint64_t sub_213CD2A78(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA4D8, a1);
}

uint64_t sub_213CD2A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA508, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA508, a1, a2, a3, a4);
}

uint64_t sub_213CD2AC8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA508, a1);
}

uint64_t sub_213CD2AD8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA508, a1);
}

uint64_t sub_213CD2AE8()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD2AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA568, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA568, a1, a2, a3, a4);
}

uint64_t sub_213CD2B3C(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA568, a1);
}

uint64_t sub_213CD2B4C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA568, a1);
}

uint64_t sub_213CD2B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA668, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2B7C(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA668, a1);
}

uint64_t sub_213CD2B8C()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD2BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA738, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA738, a1, a2, a3, a4);
}

uint64_t sub_213CD2BE0(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA738, a1);
}

uint64_t sub_213CD2BF0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA738, a1);
}

uint64_t sub_213CD2C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA838, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA838, a1, a2, a3, a4);
}

uint64_t sub_213CD2C40(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA838, a1);
}

uint64_t sub_213CD2C50(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA838, a1);
}

uint64_t sub_213CD2C60(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA898, a1);
}

uint64_t sub_213CD2C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA8F8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA8F8, a1, a2, a3, a4);
}

uint64_t sub_213CD2CB0(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA8F8, a1);
}

uint64_t sub_213CD2CC0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA8F8, a1);
}

uint64_t sub_213CD2CD0(unsigned int *a1)
{
  time_t v2 = malloc_type_realloc(*((void **)a1 + 1), 24 * *a1 + 24, 0x181077C6uLL);
  if (!v2) {
    return 12;
  }
  *((void *)a1 + 1) = v2;
  uint64_t result = _asn1_copy_top();
  if (!result) {
    ++*a1;
  }
  return result;
}

uint64_t sub_213CD2D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EA948, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EA948, a1, a2, a3, a4);
}

uint64_t sub_213CD2D90(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EA948, a1);
}

uint64_t sub_213CD2DA0(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EA948, a1);
}

uint64_t sub_213CD2DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EAA08, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EAA08, a1, a2, a3, a4);
}

uint64_t sub_213CD2DF0(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EAA08, a1);
}

uint64_t sub_213CD2E00(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EAA08, a1);
}

uint64_t sub_213CD2E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EAA58, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EAA58, a1, a2, a3, a4);
}

uint64_t sub_213CD2E50(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EAA58, a1);
}

uint64_t sub_213CD2E60(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EAA58, a1);
}

uint64_t sub_213CD2E70()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD2E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EAB78, a1, a2, a3, a4);
}

uint64_t sub_213CD2EA4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EAB78, a1);
}

uint64_t sub_213CD2EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EABD8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EABD8, a1, a2, a3, a4);
}

uint64_t sub_213CD2EF4(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EABD8, a1);
}

uint64_t sub_213CD2F04(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EABD8, a1);
}

uint64_t sub_213CD2F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EAC28, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EAC28, a1, a2, a3, a4);
}

uint64_t sub_213CD2F54(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EAC28, a1);
}

uint64_t sub_213CD2F64(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EAC28, a1);
}

uint64_t sub_213CD2F74()
{
  return _asn1_copy_top();
}

uint64_t sub_213CD2F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EAC48, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD2FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EAC48, a1, a2, a3, a4);
}

uint64_t sub_213CD2FC8(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EAC48, a1);
}

uint64_t sub_213CD2FD8(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EAC48, a1);
}

uint64_t sub_213CD2FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EAD38, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD3008(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EAD38, a1);
}

uint64_t sub_213CD3018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C0](&unk_2641EADF8, 0, a1, a2, a3, a4);
}

uint64_t sub_213CD3038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270F992C8](&unk_2641EADF8, a1, a2, a3, a4);
}

uint64_t sub_213CD3058(uint64_t a1)
{
  return MEMORY[0x270F992D8](&unk_2641EADF8, a1);
}

uint64_t sub_213CD3068(uint64_t a1)
{
  return MEMORY[0x270F992D0](&unk_2641EADF8, a1);
}

uint64_t sub_213CD3078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  specific = (dispatch_source_t *)dispatch_get_specific(sub_213CD3078);
  uint64_t v13 = specific;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (a3)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    if (a7)
    {
      uint64_t v14 = a7;
      uint64_t v17 = a6;
    }
    else
    {
      uint64_t v14 = a5;
      uint64_t v17 = a4;
    }
    uint64_t v16 = v14;
  }
  ((void (*)(dispatch_source_t, uint64_t, uint64_t *, void))specific[3])(specific[4], a3, &v16, 0);
  if (a7) {
    MEMORY[0x216695B60](*MEMORY[0x263EF8960], a6, a7);
  }
  dispatch_source_cancel(v13[1]);
  return 0;
}

uint64_t sub_213CD3140(const char *a1, uint64_t *a2)
{
  if (qword_267801640 != -1) {
    dispatch_once(&qword_267801640, &unk_26C4C8C58);
  }
  uint64_t result = bootstrap_look_up2();
  if (!result)
  {
    uint64_t v5 = malloc_type_malloc(0x10uLL, 0x101004082113244uLL);
    if (v5)
    {
      uint64_t v6 = (uint64_t)v5;
      *uint64_t v5 = 0;
      uint64_t v7 = strdup(a1);
      *(void *)(v6 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v7;
      if (v7)
      {
        uint64_t result = 0;
        *a2 = v6;
        return result;
      }
      sub_213CD3234(v6);
    }
    else
    {
      mach_port_mod_refs(*MEMORY[0x263EF8960], 0, 0, -1);
    }
    return 12;
  }
  return result;
}

uint64_t sub_213CD3234(uint64_t a1)
{
  if (*(_DWORD *)a1) {
    mach_port_deallocate(*MEMORY[0x263EF8960], *(_DWORD *)a1);
  }
  free(*(void **)(a1 + 8));
  free((void *)a1);
  return 0;
}

uint64_t sub_213CD3280()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  unint64_t v3 = v2;
  uint64_t v4 = v0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(v30, 0, 512);
  vm_offset_t data = 0;
  memset(__src, 0, 512);
  size_t size = 0;
  unsigned int v25 = -1;
  memset(__n, 0, sizeof(__n));
  vm_size_t v5 = *v1;
  if (*v1 > 0x7FF)
  {
    if (vm_read(*MEMORY[0x263EF8960], v1[1], v5, &data, (mach_msg_type_number_t *)&size + 1)) {
      return 12;
    }
    uint64_t v16 = v3;
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v16 = v2;
    __memcpy_chk();
  }
  uint64_t v7 = MEMORY[0x263EF8330];
  for (char i = 1; ; char i = 0)
  {
    char v9 = i;
    uint64_t v21 = 0;
    uint64_t v22 = &v21;
    uint64_t v23 = 0x2000000000;
    int v24 = 0;
    block[0] = v7;
    block[1] = 0x40000000;
    block[2] = sub_213CD3EB8;
    block[3] = &unk_2641EAE80;
    void block[4] = &v21;
    void block[5] = v4;
    dispatch_sync((dispatch_queue_t)qword_267801650, block);
    uint64_t v10 = sub_213CD4010(*((_DWORD *)v22 + 6), (uint64_t)v30, v5, data, HIDWORD(size), &v25, __src, &size, &__n[1], __n);
    if (v10 != -308 && v10 != 268435459) {
      break;
    }
    int v19 = 0;
    uint64_t v12 = bootstrap_look_up2();
    if (v12)
    {
      uint64_t v6 = v12;
      goto LABEL_20;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    void v17[2] = sub_213CD3ECC;
    void v17[3] = &unk_2641EAEA8;
    v17[4] = &v21;
    v17[5] = v4;
    int v18 = v19;
    dispatch_sync((dispatch_queue_t)qword_267801650, v17);
    _Block_object_dispose(&v21, 8);
    if ((v9 & 1) == 0) {
      return 22;
    }
  }
  uint64_t v6 = v10;
  if (v10)
  {
LABEL_20:
    _Block_object_dispose(&v21, 8);
    return v6;
  }
  _Block_object_dispose(&v21, 8);
  uint64_t v6 = v25;
  if (!v25)
  {
    if (__n[0])
    {
      uint64_t v14 = malloc_type_malloc(__n[0], 0x9F4ADF19uLL);
      v16[1] = v14;
      if (v14)
      {
        memcpy(v14, *(const void **)&__n[1], __n[0]);
        void *v16 = __n[0];
        MEMORY[0x216695B60](*MEMORY[0x263EF8960], *(void *)&__n[1]);
        return 0;
      }
      MEMORY[0x216695B60](*MEMORY[0x263EF8960], *(void *)&__n[1], __n[0]);
    }
    else
    {
      uint64_t v15 = malloc_type_malloc(size, 0x753626FDuLL);
      v16[1] = v15;
      if (v15)
      {
        memcpy(v15, __src, size);
        uint64_t v6 = 0;
        void *v16 = size;
        return v6;
      }
    }
    return 12;
  }
  if (__n[0])
  {
    MEMORY[0x216695B60](*MEMORY[0x263EF8960], *(void *)&__n[1]);
    return v25;
  }
  return v6;
}

uint64_t sub_213CD36B4(mach_port_name_t *a1, vm_size_t *a2, NSObject *a3, NSObject *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  vm_offset_t data = 0;
  mach_msg_type_number_t dataCnt = 0;
  uint64_t v8 = (mach_port_name_t *)malloc_type_malloc(0x28uLL, 0x10A0040C3F9F442uLL);
  if (!v8) {
    return 12;
  }
  char v9 = (NSObject **)v8;
  uint64_t v10 = (vm_map_read_t *)MEMORY[0x263EF8960];
  if (mach_port_allocate(*MEMORY[0x263EF8960], 1u, v8))
  {
    free(v9);
    return 22;
  }
  memset(v31, 0, 512);
  uint64_t v12 = dispatch_queue_create("heim-ipc-async-client", 0);
  void v9[2] = v12;
  v9[1] = dispatch_source_create(MEMORY[0x263EF83C8], *(unsigned int *)v9, 0, v12);
  dispatch_queue_set_specific(v9[2], sub_213CD3078, v9, 0);
  uint64_t v13 = v9[1];
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 0x40000000;
  handler[2] = sub_213CD3F40;
  handler[3] = &unk_2641EAEC8;
  handler[4] = v9;
  dispatch_source_set_event_handler(v13, handler);
  uint64_t v14 = v9[1];
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 0x40000000;
  _OWORD v27[2] = sub_213CD3F60;
  void v27[3] = &unk_2641EAEE8;
  v27[4] = v9;
  dispatch_source_set_cancel_handler(v14, v27);
  v9[3] = a4;
  unsigned __int8 v9[4] = a3;
  dispatch_resume(v9[1]);
  vm_size_t v15 = *a2;
  if (*a2 <= 0x7FF)
  {
    __memcpy_chk();
    goto LABEL_10;
  }
  if (vm_read(*v10, a2[1], *a2, &data, &dataCnt)) {
    return 12;
  }
  LODWORD(v15) = 0;
LABEL_10:
  uint64_t v16 = MEMORY[0x263EF8330];
  for (char i = 1; ; char i = 0)
  {
    char v18 = i;
    uint64_t v23 = 0;
    int v24 = &v23;
    uint64_t v25 = 0x2000000000;
    int v26 = 0;
    v22[0] = v16;
    v22[1] = 0x40000000;
    v22[2] = sub_213CD3FCC;
    v22[3] = &unk_2641EAF10;
    v22[4] = &v23;
    v22[5] = a1;
    dispatch_sync((dispatch_queue_t)qword_267801650, v22);
    uint64_t v19 = sub_213CD42EC(*((_DWORD *)v24 + 6), *(_DWORD *)v9, (uint64_t)v31, v15, data, dataCnt);
    if (v19 != 268435459) {
      break;
    }
    uint64_t v20 = bootstrap_look_up2();
    if (v20)
    {
      uint64_t v11 = v20;
      goto LABEL_18;
    }
    mach_port_deallocate(*v10, *a1);
    *a1 = *((_DWORD *)v24 + 6);
    _Block_object_dispose(&v23, 8);
    if ((v18 & 1) == 0)
    {
      dispatch_source_cancel(v9[1]);
      return 22;
    }
  }
  uint64_t v11 = v19;
  if (!v19) {
    goto LABEL_19;
  }
LABEL_18:
  dispatch_source_cancel(v9[1]);
LABEL_19:
  _Block_object_dispose(&v23, 8);
  return v11;
}

uint64_t sub_213CD3A4C(const char *a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = malloc_type_malloc(0x10uLL, 0x1010040A1D9428BuLL);
  if (!v4) {
    return 12;
  }
  vm_size_t v5 = v4;
  v4[2] = -1;
  asprintf((char **)v4, "/var/run/.heim_%s-%s", a1, "socket");
  *a2 = (uint64_t)v5;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  long long v11 = 0u;
  long long v12 = 0u;
  sockaddr v9 = (sockaddr)0;
  long long v10 = 0u;
  v9.int sa_family = 1;
  __strlcpy_chk();
  int v6 = socket(1, 1, 0);
  v5[2] = v6;
  if ((v6 & 0x80000000) == 0)
  {
    sub_213CB79C8(v6);
    rk_socket_set_nopipe(v5[2], 1);
    if (!connect(v5[2], &v9, 0x6Au)) {
      return 0;
    }
    close(v5[2]);
    v5[2] = -1;
  }
  uint64_t v7 = *__error();
  if (v7) {
    sub_213CD3B98(*a2);
  }
  return v7;
}

uint64_t sub_213CD3B98(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  free(*(void **)a1);
  free((void *)a1);
  return 0;
}

uint64_t sub_213CD3BD8(uint64_t a1, uint64_t a2, size_t *a3, void *a4)
{
  unsigned int __buf = bswap32(*(_DWORD *)a2);
  if (a4) {
    *a4 = 0;
  }
  unsigned int v12 = 0;
  *a3 = 0;
  a3[1] = 0;
  if (sub_213CB7D98(*(_DWORD *)(a1 + 8), (char *)&__buf, 4uLL) != 4
    || sub_213CB7D98(*(_DWORD *)(a1 + 8), *(char **)(a2 + 8), *(void *)a2) != *(void *)a2
    || sub_213CB7D14(*(_DWORD *)(a1 + 8), (char *)&__buf, 4uLL) != 4
    || sub_213CB7D14(*(_DWORD *)(a1 + 8), (char *)&v12, 4uLL) != 4)
  {
    return 0xFFFFFFFFLL;
  }
  unsigned int v7 = v12;
  size_t v8 = bswap32(__buf);
  *a3 = v8;
  if (v8 > 0x20000)
  {
    *a3 = 0;
    return 22;
  }
  long long v10 = (char *)malloc_type_malloc(v8, 0xEA37C0CFuLL);
  a3[1] = (size_t)v10;
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v11 = bswap32(v7);
  if (sub_213CB7D14(*(_DWORD *)(a1 + 8), v10, *a3) == *a3) {
    return v11;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t heim_ipc_init_context(const char *a1, void *a2)
{
  uint64_t v3 = 0;
  int v4 = 0;
  vm_size_t v5 = a1 + 1;
  for (char i = 1; ; char i = 0)
  {
    char v7 = i;
    size_t v8 = (const char **)&(&off_26AA947B8)[5 * v3];
    size_t v9 = strlen(*v8);
    if (!strncmp(*v8, a1, v9) && a1[v9] == 58) {
      break;
    }
    if (!strncmp("ANY:", a1, 4uLL))
    {
      int v4 = 1;
      size_t v9 = 3;
      break;
    }
LABEL_10:
    uint64_t v3 = 1;
    if ((v7 & 1) == 0) {
      return 2;
    }
  }
  long long v10 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  if (!v10) {
    return 12;
  }
  unsigned int v11 = v10;
  void *v10 = v8;
  uint64_t v12 = ((uint64_t (*)(const char *, void *))(&off_26AA947B8)[5 * v3 + 1])(&v5[v9], v10 + 1);
  if (v12)
  {
    free(v11);
    if (!v4) {
      return v12;
    }
    int v4 = 1;
    goto LABEL_10;
  }
  *a2 = v11;
  return v12;
}

void heim_ipc_free_context(void *a1)
{
  (*(void (**)(void))(*a1 + 16))(a1[1]);

  free(a1);
}

uint64_t heim_ipc_call(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4) {
    *a4 = 0;
  }
  return (*(uint64_t (**)(void))(*a1 + 24))(a1[1]);
}

dispatch_queue_t sub_213CD3E78()
{
  qword_267801648 = (uint64_t)dispatch_get_global_queue(0, 0);
  dispatch_queue_t result = dispatch_queue_create("heim-ipc-syncq", 0);
  qword_267801650 = (uint64_t)result;
  return result;
}

uint64_t sub_213CD3EB8(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = **(_DWORD **)(result + 40);
  return result;
}

uint64_t sub_213CD3ECC(uint64_t a1)
{
  mach_port_name_t v2 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v3 = **(_DWORD **)(a1 + 40);
  ipc_space_t v4 = *MEMORY[0x263EF8960];
  if (v2 == v3)
  {
    uint64_t result = mach_port_deallocate(v4, v2);
    **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 48);
  }
  else
  {
    mach_port_name_t v6 = *(_DWORD *)(a1 + 48);
    return mach_port_deallocate(v4, v6);
  }
  return result;
}

uint64_t sub_213CD3F40(uint64_t a1)
{
  return MEMORY[0x270ED9420](*(void *)(*(void *)(a1 + 32) + 8), 2112, sub_213CD45B4);
}

void sub_213CD3F60(uint64_t a1)
{
  mach_port_mod_refs(*MEMORY[0x263EF8960], **(_DWORD **)(a1 + 32), 1u, -1);
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8));
  mach_port_name_t v2 = *(void **)(a1 + 32);

  free(v2);
}

uint64_t sub_213CD3FCC(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = **(_DWORD **)(result + 40);
  return result;
}

void heim_ipc_free_data(void *a1)
{
  mach_port_name_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_213CD4010(mach_port_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6, void *a7, _DWORD *a8, void *a9, _DWORD *a10)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  *(_OWORD *)&v29[8] = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  int v26 = 1;
  uint64_t v27 = a4;
  int v28 = 16777472;
  *(void *)uint64_t v29 = a5;
  *(void *)&v29[4] = *MEMORY[0x263EF80C8];
  if (a3 > 0x800) {
    return 4294966989;
  }
  __memcpy_chk();
  *(_DWORD *)&v29[12] = a3;
  uint64_t v17 = (a3 + 3) & 0xFFFFFFFC;
  mach_msg_size_t v18 = v17 + 60;
  *(_DWORD *)((char *)&rcv_name + v17 + 56) = a5;
  mach_port_t reply_port = mig_get_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(void *)&rcv_name.msgh_voucher_port = 0x100000000;
  if (MEMORY[0x263EF8B00])
  {
    voucher_mach_msg_set(&rcv_name);
    mach_port_t reply_port = rcv_name.msgh_local_port;
  }
  uint64_t v20 = mach_msg(&rcv_name, 3, v18, 0x848u, reply_port, 0, 0);
  uint64_t v10 = v20;
  if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(rcv_name.msgh_local_port);
  }
  else
  {
    if (!v20)
    {
      if (rcv_name.msgh_id == 71)
      {
        uint64_t v10 = 4294966988;
      }
      else if (rcv_name.msgh_id == 101)
      {
        if ((rcv_name.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v10 = 4294966996;
          if (v26 == 1
            && rcv_name.msgh_size >= 0x40
            && rcv_name.msgh_size <= 0x840
            && !rcv_name.msgh_remote_port
            && HIBYTE(v28) == 1)
          {
            size_t v21 = *(unsigned int *)&v29[16];
            if (*(_DWORD *)&v29[16] <= 0x800u && rcv_name.msgh_size - 64 >= *(_DWORD *)&v29[16])
            {
              unsigned int v22 = (*(_DWORD *)&v29[16] + 3) & 0xFFFFFFFC;
              if (rcv_name.msgh_size == v22 + 64)
              {
                uint64_t v23 = (char *)&rcv_name + v22 - 2048;
                if (*(_DWORD *)v29 == *((_DWORD *)v23 + 527))
                {
                  *a6 = *(_DWORD *)&v29[12];
                  memcpy(a7, &v29[20], v21);
                  uint64_t v10 = 0;
                  *a8 = v21;
                  *a9 = v27;
                  *a10 = *((_DWORD *)v23 + 527);
                  return v10;
                }
              }
            }
          }
        }
        else if (rcv_name.msgh_size == 36)
        {
          uint64_t v10 = 4294966996;
          if (HIDWORD(v27))
          {
            if (rcv_name.msgh_remote_port) {
              uint64_t v10 = 4294966996;
            }
            else {
              uint64_t v10 = HIDWORD(v27);
            }
          }
        }
        else
        {
          uint64_t v10 = 4294966996;
        }
      }
      else
      {
        uint64_t v10 = 4294966995;
      }
      mach_msg_destroy(&rcv_name);
      return v10;
    }
    mig_dealloc_reply_port(rcv_name.msgh_local_port);
  }
  return v10;
}

uint64_t sub_213CD42EC(unsigned int a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  long long v44 = 0u;
  memset(v45, 0, sizeof(v45));
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  DWORD1(v14) = 2;
  DWORD2(v14) = a2;
  int v15 = 1376256;
  uint64_t v16 = a5;
  int v17 = 16777472;
  LODWORD(v1init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a6;
  *(void *)((char *)&v18 + 4) = *MEMORY[0x263EF80C8];
  if (a4 > 0x800) {
    return 4294966989;
  }
  __memcpy_chk();
  uint64_t v10 = (a4 + 3) & 0xFFFFFFFC;
  mach_msg_size_t v11 = v10 + 72;
  *(int *)((char *)&v12 + v10 + 6init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a6;
  int v12 = -2147483629;
  *(void *)((char *)&v13 + 4) = a1;
  HIDWORD(v1init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = a4;
  HIDWORD(v13) = 0;
  LODWORD(v14) = 2;
  if (MEMORY[0x263EF8B00]) {
    voucher_mach_msg_set((mach_msg_header_t *)&v12);
  }
  return mach_msg((mach_msg_header_t *)&v12, 1, v11, 0, 0, 0, 0);
}

void sub_213CD4484(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0) {
    goto LABEL_2;
  }
  int v2 = -304;
  if (*(_DWORD *)(a1 + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 4);
  if (v4 < 0x40 || v4 > 0x840) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(a1 + 39) != 1) {
    goto LABEL_16;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 56);
  if (v5 > 0x800)
  {
LABEL_2:
    int v2 = -304;
    goto LABEL_3;
  }
  int v2 = -304;
  if ((int)v4 - 64 < v5) {
    goto LABEL_3;
  }
  unsigned int v6 = (v5 + 3) & 0xFFFFFFFC;
  if (v4 != v6 + 64) {
    goto LABEL_3;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 40);
  if (v7 != *(_DWORD *)(a1 + v6 + 60))
  {
LABEL_16:
    int v2 = -300;
    goto LABEL_3;
  }
  uint64_t v8 = ((v4 + 3) & 0x1FFFFFFFCLL) + a1;
  if (!*(_DWORD *)v8 && *(_DWORD *)(v8 + 4) > 0x1Fu)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 12);
    uint64_t v10 = *(unsigned int *)(a1 + 52);
    uint64_t v11 = *(void *)(a1 + 28);
    long long v12 = *(_OWORD *)(v8 + 36);
    v13[0] = *(_OWORD *)(v8 + 20);
    v13[1] = v12;
    *(_DWORD *)(a2 + 32) = sub_213CD3078(v9, (uint64_t)v13, v10, a1 + 60, v5, v11, v7);
    mig_deallocate(*(void *)(a1 + 28), *(unsigned int *)(a1 + 40));
    *(void *)(a1 + 2init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    return;
  }
  int v2 = -309;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v2;
  *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
}

uint64_t sub_213CD45B4(_DWORD *a1, uint64_t a2)
{
  unsigned int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v2;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 201)
  {
    sub_213CD4484((uint64_t)a1, a2);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x263EF80C8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t sub_213CD4620(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result + *(void *)a2;
  *(void *)uint64_t result = v2;
  int v3 = *(_DWORD *)(result + 8) + *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v3;
  if (v3 < 0)
  {
    int v4 = 1000000;
    uint64_t v5 = -1;
  }
  else
  {
    if (v3 <= 0xF423F) {
      return result;
    }
    int v4 = -1000000;
    uint64_t v5 = 1;
  }
  *(void *)uint64_t result = v5 + v2;
  *(_DWORD *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v4 + v3;
  return result;
}

uint64_t sub_213CD4680(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result - *(void *)a2;
  *(void *)uint64_t result = v2;
  int v3 = *(_DWORD *)(result + 8) - *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v3;
  if (v3 < 0)
  {
    int v4 = 1000000;
    uint64_t v5 = -1;
  }
  else
  {
    if (v3 <= 0xF423F) {
      return result;
    }
    int v4 = -1000000;
    uint64_t v5 = 1;
  }
  *(void *)uint64_t result = v5 + v2;
  *(_DWORD *)(result + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v4 + v3;
  return result;
}

void *sub_213CD46E0()
{
  return malloc_type_calloc(1uLL, 0x18uLL, 0x10800409070E284uLL);
}

void sub_213CD46FC(void *a1)
{
  sub_213CD4734((uint64_t)a1);

  free(a1);
}

void sub_213CD4734(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    bzero(v2, *(void *)a1);
    free(*(void **)(a1 + 8));
  }
  *(void *)a1 = 0;
  *(void *)(a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0;
  *(void *)(a1 + 16) = 0;
}

void *sub_213CD4774()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800409070E284uLL);
  if (der_copy_heim_integer())
  {
    sub_213CD4734((uint64_t)v0);
    free(v0);
    return 0;
  }
  return v0;
}

uint64_t sub_213CD47DC(uint64_t a1)
{
  if (*(void *)a1) {
    return byte_213CDB198[**(unsigned __int8 **)(a1 + 8)] + 8 * *(void *)a1 - 8;
  }
  else {
    return 0;
  }
}

uint64_t sub_213CD480C(unsigned int *a1)
{
  return *a1;
}

void *sub_213CD4814(const void *a1, size_t size, void *a3)
{
  if ((size & 0x80000000) != 0) {
    return 0;
  }
  unsigned int v4 = size;
  unsigned int v6 = a3;
  if (a3 || (unsigned int v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800409070E284uLL)) != 0)
  {
    if (v6[1]) {
      sub_213CD4734((uint64_t)v6);
    }
    *((_DWORD *)v6 + 4) = 0;
    unsigned int v7 = malloc_type_malloc(v4, 0xFE7460B8uLL);
    v6[1] = v7;
    if (!v4 || v7)
    {
      *unsigned int v6 = v4;
      memcpy(v7, a1, v4);
      return v6;
    }
    if (!a3)
    {
      sub_213CD4734((uint64_t)v6);
      free(v6);
    }
    return 0;
  }
  return v6;
}

uint64_t sub_213CD48E0(const void **a1, void *__dst)
{
  return *(unsigned int *)a1;
}

uint64_t sub_213CD4914(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2 != 0;
  return result;
}

BOOL sub_213CD4928(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

uint64_t sub_213CD4938(void *a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v2 = a2 >> 3;
  if (*a1 <= v2) {
    return 0;
  }
  else {
    return (byte_213CDB298[a2 & 7] & *(unsigned char *)(a1[1] + *a1 + ~v2));
  }
}

BOOL sub_213CD497C(void *a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = -1;
    unint64_t v3 = a2;
    do
    {
      ++v2;
      BOOL v4 = v3 >= 0x100;
      v3 >>= 8;
    }
    while (v4);
    size_t v5 = v2 + 1;
    do
    {
      v8[v2] = a2;
      a2 >>= 8;
      unint64_t v6 = v2-- + 1;
    }
    while (v6 > 1);
  }
  else
  {
    size_t v5 = 0;
  }
  return sub_213CD4814(v8, v5, a1) != 0;
}

uint64_t sub_213CD4A24(size_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 16) && *(_DWORD *)(a3 + 16)) {
    return 0;
  }
  if (*(void *)a2 >= *(void *)a3) {
    size_t v5 = (uint64_t *)a3;
  }
  else {
    size_t v5 = (uint64_t *)a2;
  }
  if (*(void *)a2 <= *(void *)a3) {
    size_t v6 = *(void *)a3;
  }
  else {
    size_t v6 = *(void *)a2;
  }
  if (*(void *)a2 >= *(void *)a3) {
    unsigned int v7 = (uint64_t *)a2;
  }
  else {
    unsigned int v7 = (uint64_t *)a3;
  }
  uint64_t result = (uint64_t)malloc_type_malloc(v6 + 1, 0xD1DB4B73uLL);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *v7;
    uint64_t v10 = (unsigned __int8 *)(*v7 + v7[1] - 1);
    uint64_t v11 = *v5;
    long long v12 = (unsigned char *)(result + v6);
    if (*v5 < 1)
    {
      BOOL v14 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      BOOL v14 = 0;
      uint64_t v15 = v11 + v5[1] - 1;
      do
      {
        unsigned int v16 = v14 + v10[v13] + *(unsigned __int8 *)(v15 + v13);
        v12[v13] = v16;
        BOOL v14 = v16 > 0xFF;
        --v13;
      }
      while ((unint64_t)(v11 + v13 + 1) > 1);
      uint64_t v9 = *v7;
      uint64_t v11 = *v5;
      v12 += v13;
      v10 += v13;
    }
    uint64_t v17 = v9 - v11;
    if (v17 >= 1)
    {
      unint64_t v18 = v17 + 1;
      do
      {
        int v19 = *v10--;
        unsigned int v20 = v14 + v19;
        *v12-- = v20;
        BOOL v14 = v20 > 0xFF;
        --v18;
      }
      while (v18 > 1);
    }
    if (v14)
    {
      unsigned char *v12 = 1;
      ++v6;
    }
    else
    {
      memmove(v12, v12 + 1, v6);
    }
    sub_213CD4734((uint64_t)a1);
    *a1 = v6;
    a1[1] = v8;
    uint64_t result = 1;
    a1[2] = 0;
  }
  return result;
}

void *sub_213CD4B7C()
{
  return sub_213CD4B84(0);
}

void *sub_213CD4B84(_DWORD *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x90uLL, 0x10E00401D4DFF02uLL);
  unint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 26) = 1;
    if (a1)
    {
      hc_ENGINE_up_ref(a1);
      v3[17] = a1;
      uint64_t default_DH = (uint64_t)a1;
    }
    else
    {
      uint64_t default_DH = hc_ENGINE_get_default_DH();
      v3[17] = default_DH;
      if (!default_DH)
      {
        DH = (char **)v3[16];
        if (!DH)
        {
          DH = off_267800F68[0];
          v3[16] = off_267800F68[0];
        }
LABEL_6:
        ((void (*)(void *))DH[4])(v3);
        return v3;
      }
    }
    DH = (char **)hc_ENGINE_get_DH(default_DH);
    v3[16] = DH;
    if (!DH)
    {
      hc_ENGINE_finish(a1);
      free(v3);
      return 0;
    }
    goto LABEL_6;
  }
  return v3;
}

void sub_213CD4C48(_DWORD *a1)
{
  int v1 = a1[26];
  if (v1 <= 0) {
    abort();
  }
  int v3 = v1 - 1;
  a1[26] = v3;
  if (!v3)
  {
    (*(void (**)(_DWORD *))(*((void *)a1 + 16) + 40))(a1);
    BOOL v4 = (void *)*((void *)a1 + 17);
    if (v4) {
      hc_ENGINE_finish(v4);
    }
    size_t v5 = (void *)*((void *)a1 + 1);
    if (v5) {
      sub_213CD46FC(v5);
    }
    size_t v6 = (void *)*((void *)a1 + 2);
    if (v6) {
      sub_213CD46FC(v6);
    }
    unsigned int v7 = (void *)*((void *)a1 + 4);
    if (v7) {
      sub_213CD46FC(v7);
    }
    uint64_t v8 = (void *)*((void *)a1 + 5);
    if (v8) {
      sub_213CD46FC(v8);
    }
    uint64_t v9 = (void *)*((void *)a1 + 8);
    if (v9) {
      sub_213CD46FC(v9);
    }
    uint64_t v10 = (void *)*((void *)a1 + 9);
    if (v10) {
      sub_213CD46FC(v10);
    }
    uint64_t v11 = (void *)*((void *)a1 + 12);
    if (v11) {
      sub_213CD46FC(v11);
    }
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    free(a1);
  }
}

uint64_t sub_213CD4D2C(uint64_t a1)
{
  return sub_213CD480C(*(unsigned int **)(a1 + 8));
}

uint64_t sub_213CD4D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 112) = a3;
  return 1;
}

uint64_t sub_213CD4D40(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t sub_213CD4D48(uint64_t a1, void *a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v5 = 0;
  if (!sub_213CD4928((uint64_t)a2))
  {
    size_t v6 = sub_213CD46E0();
    if (v6)
    {
      unsigned int v7 = v6;
      if (!sub_213CD497C(v6, 1uLL)) {
        goto LABEL_17;
      }
      if ((j__der_heim_integer_cmp() & 0x80000000) == 0) {
        *a3 |= 1u;
      }
      uint64_t v8 = (size_t *)sub_213CD46E0();
      if (v8)
      {
        uint64_t v9 = v8;
        sub_213CD4A24(v8, (uint64_t)a2, (uint64_t)v7);
        if ((j__der_heim_integer_cmp() & 0x80000000) == 0) {
          *a3 |= 2u;
        }
        if (sub_213CD497C(v7, 2uLL))
        {
          if (j__der_heim_integer_cmp()) {
            goto LABEL_19;
          }
          unsigned int v10 = sub_213CD47DC((uint64_t)a2);
          unsigned int v11 = 0;
          unsigned int v12 = 0;
          do
          {
            if (sub_213CD4938(a2, v12)) {
              ++v11;
            }
            ++v12;
          }
          while (v12 <= v10);
          if (v11 > 1)
          {
LABEL_19:
            uint64_t v5 = 1;
          }
          else
          {
            uint64_t v5 = 0;
            *a3 |= 1u;
          }
        }
        else
        {
          uint64_t v5 = 0;
        }
        sub_213CD46FC(v7);
      }
      else
      {
LABEL_17:
        uint64_t v5 = 0;
        uint64_t v9 = v7;
      }
      sub_213CD46FC(v9);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_213CD4EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 128) + 8))();
}

uint64_t sub_213CD4EB4(uint64_t a1, void *a2, uint64_t a3)
{
  int v8 = 0;
  if (!sub_213CD4D48(a3, a2, &v8) || v8) {
    return 0xFFFFFFFFLL;
  }
  size_t v6 = *(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(a3 + 128) + 16);

  return v6(a1, a2, a3);
}

uint64_t sub_213CD4F44(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(void (**)(uint64_t *))(v2 + 40);
    if (v3) {
      v3(a1);
    }
    else {
      bzero((void *)a1[2], *(int *)(v2 + 8));
    }
  }
  *a1 = 0;
  a1[1] = 0;
  free((void *)a1[2]);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return 1;
}

uint64_t sub_213CD4FA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    sub_213CD8858();
  }
  uint64_t v4 = a2;
  if (*a1 == a2 && a1[1] == a3)
  {
    uint64_t result = a1[2];
  }
  else
  {
    sub_213CD4F44(a1);
    *a1 = v4;
    a1[1] = a3;
    uint64_t result = (uint64_t)malloc_type_calloc(1uLL, *(int *)(v4 + 8), 0xD1CCB196uLL);
    a1[2] = result;
    if (!result) {
      return result;
    }
    uint64_t v4 = *a1;
  }
  (*(void (**)(uint64_t))(v4 + 16))(result);
  return 1;
}

void *hc_EVP_md5(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD77C4();
}

void *hc_EVP_md_null()
{
  return &unk_26C4C9BA0;
}

uint64_t hc_EVP_CIPHER_block_size(uint64_t a1)
{
  return *(int *)(a1 + 4);
}

uint64_t hc_EVP_CIPHER_key_length(uint64_t a1)
{
  return *(int *)(a1 + 8);
}

uint64_t hc_EVP_CIPHER_iv_length(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

double hc_EVP_CIPHER_CTX_init(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 12init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t hc_EVP_CIPHER_CTX_cleanup(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    size_t v3 = *(int *)(v1 + 48);
    uint64_t v4 = (void *)a1[15];
    uint64_t v5 = *(void (**)(uint64_t *))(v1 + 40);
    if (v5) {
      v5(a1);
    }
    if (v4)
    {
      bzero(v4, v3);
      free(v4);
    }
    a1[20] = 0;
    *((_OWORD *)a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return 1;
}

uint64_t hc_EVP_CIPHER_CTX_set_key_length(_DWORD *a1, int a2)
{
  uint64_t result = 0;
  if (a2 >= 1 && (*(void *)(*(void *)a1 + 16) & 8) != 0)
  {
    a1[26] = a2;
    return 1;
  }
  return result;
}

uint64_t hc_EVP_CIPHER_CTX_cipher(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t hc_EVP_CIPHER_CTX_block_size(uint64_t a1)
{
  return *(int *)(*(void *)a1 + 4);
}

uint64_t hc_EVP_CIPHER_CTX_key_length(uint64_t a1)
{
  return *(int *)(*(void *)a1 + 8);
}

uint64_t hc_EVP_CIPHER_CTX_iv_length(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 12);
}

uint64_t hc_EVP_CIPHER_CTX_flags(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 16);
}

uint64_t hc_EVP_CIPHER_CTX_mode(uint64_t a1)
{
  return *(_DWORD *)(*(void *)a1 + 16) & 7;
}

uint64_t hc_EVP_CIPHER_CTX_get_app_data(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t hc_EVP_CIPHER_CTX_set_app_data(uint64_t result, uint64_t a2)
{
  *(void *)(result + 96) = a2;
  return result;
}

uint64_t hc_EVP_CipherInit_ex(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *__src, uint64_t a6)
{
  uint64_t v8 = a2;
  *(_DWORD *)(a1 + 20) = 0;
  if (a6 == -1)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v10 = a6;
    *(_DWORD *)(a1 + 16) = a6 != 0;
  }
  uint64_t v11 = *(void *)a1;
  if (a2)
  {
    if (v11 != a2)
    {
      hc_EVP_CIPHER_CTX_cleanup((uint64_t *)a1);
      *(void *)a1 = v8;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(v8 + 8);
      unsigned int v12 = malloc_type_calloc(1uLL, *(int *)(v8 + 48), 0x1B7796uLL);
      *(void *)(a1 + 120) = v12;
      if (!v12 && *(_DWORD *)(v8 + 48)) {
        return 0;
      }
      *(_DWORD *)(a1 + 132) = *(_DWORD *)(v8 + 4) - 1;
      uint64_t v8 = *(void *)a1;
    }
  }
  else
  {
    uint64_t v8 = *(void *)a1;
    if (!v11) {
      return 0;
    }
  }
  int v13 = *(_DWORD *)(v8 + 16) & 7;
  if (v13) {
    BOOL v14 = v13 == 4;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (v13 == 2)
    {
      size_t v16 = *(unsigned int *)(v8 + 12);
      if (v16 >= 0x11) {
        sub_213CD8884();
      }
      if (__src)
      {
        memcpy((void *)(a1 + 24), __src, v16);
        size_t v16 = *(unsigned int *)(v8 + 12);
      }
      uint64_t v15 = (void *)(a1 + 40);
      uint64_t v17 = (const void *)(a1 + 24);
      goto LABEL_21;
    }
    return 0;
  }
  if (!__src) {
    goto LABEL_22;
  }
  uint64_t v15 = (void *)(a1 + 40);
  size_t v16 = *(unsigned int *)(v8 + 12);
  uint64_t v17 = __src;
LABEL_21:
  memcpy(v15, v17, v16);
LABEL_22:
  if (a4 || (*(unsigned char *)(v8 + 16) & 0x20) != 0) {
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(v8 + 24))(a1, a4, __src, v10);
  }
  return 1;
}

uint64_t hc_EVP_CipherUpdate(int *a1, uint64_t a2, _DWORD *a3, char *__src, size_t __n)
{
  size_t v5 = __n;
  size_t v6 = __src;
  uint64_t v8 = a2;
  *a3 = 0;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    uint64_t v15 = *(void *)a1;
    if ((a1[33] & __n) == 0)
    {
      uint64_t v18 = (*(uint64_t (**)(int *, uint64_t, char *, size_t))(v15 + 32))(a1, a2, __src, __n);
      if (v18 == 1) {
        int v19 = v5;
      }
      else {
        int v19 = 0;
      }
      *a3 = v19;
      return v18;
    }
    if (*(_DWORD *)(v15 + 4))
    {
      if (!__n) {
        return 1;
      }
      goto LABEL_8;
    }
LABEL_18:
    sub_213CD88B0();
  }
  size_t v11 = *(int *)(*(void *)a1 + 4);
  if (v11 == v10) {
    goto LABEL_18;
  }
  size_t v12 = v11 - v10;
  int v13 = (char *)a1 + v10 + 56;
  size_t v14 = __n - (v11 - v10);
  if (__n < v11 - v10)
  {
    memcpy(v13, __src, __n);
    a1[5] += v5;
    return 1;
  }
  memcpy(v13, __src, v11 - v10);
  uint64_t v18 = (*(uint64_t (**)(int *, uint64_t, int *, size_t))(*(void *)a1 + 32))(a1, v8, a1 + 14, v11);
  bzero(a1 + 14, v11);
  if (v18 == 1)
  {
    *a3 += v11;
    v6 += v12;
    v8 += v11;
    a1[5] = 0;
    size_t v5 = v14;
    if (!v14) {
      return 1;
    }
LABEL_8:
    int v16 = a1[33];
    a1[5] = v16 & v5;
    size_t v17 = v5 & ~v16;
    uint64_t v18 = (*(uint64_t (**)(int *, uint64_t, char *, size_t))(*(void *)a1 + 32))(a1, v8, v6, v17);
    if (v18 == 1)
    {
      *a3 += v17;
      memcpy(a1 + 14, &v6[v17], a1[5]);
    }
  }
  return v18;
}

uint64_t hc_EVP_CipherFinal_ex(int *a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t v3 = a1[5];
  if (!v3) {
    return 1;
  }
  size_t v6 = *(int *)(*(void *)a1 + 4);
  if ((int)v6 <= (int)v3) {
    sub_213CD88DC();
  }
  bzero((char *)a1 + v3 + 56, (v6 - v3));
  uint64_t v8 = (*(uint64_t (**)(int *, uint64_t, int *, size_t))(*(void *)a1 + 32))(a1, a2, a1 + 14, v6);
  bzero(a1 + 14, v6);
  if (v8 == 1) {
    *a3 += v6;
  }
  return v8;
}

uint64_t hc_EVP_Cipher(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

void *hc_EVP_enc_null()
{
  return &unk_26C4C9B48;
}

uint64_t sub_213CD5578()
{
  return 1;
}

uint64_t sub_213CD5580(int a1, void *__dst, void *__src, size_t __len)
{
  return 1;
}

uint64_t sub_213CD55AC()
{
  return 1;
}

void *hc_EVP_rc4(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD77D8();
}

void *hc_EVP_des_cbc(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD7748();
}

void *hc_EVP_des_ede3_cbc(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD7674();
}

void *hc_EVP_aes_128_cbc(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD7778();
}

void *hc_EVP_aes_192_cbc(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD77AC();
}

void *hc_EVP_aes_256_cbc(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD77B8();
}

uint64_t hc_EVP_aes_128_cfb8()
{
  return 0;
}

uint64_t hc_EVP_aes_192_cfb8()
{
  return 0;
}

uint64_t hc_EVP_aes_256_cfb8()
{
  return 0;
}

uint64_t sub_213CD56BC(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD77D0();
}

uint64_t sub_213CD56E4(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD77D0();
}

uint64_t sub_213CD570C(uint64_t a1)
{
  nullsub_1(a1);

  return sub_213CD77D0();
}

uint64_t hc_EVP_get_cipherbyname(char *a1)
{
  uint64_t v2 = 0;
  while (strcasecmp((&off_26C4C9650)[v2], a1))
  {
    v2 += 2;
    if (v2 == 20) {
      return 0;
    }
  }
  uint64_t v4 = (uint64_t (*)(void))(&off_26C4C9650)[v2 + 1];

  return v4();
}

uint64_t sub_213CD57B0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char *a8)
{
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (a4)
  {
    uint64_t v12 = a4;
    unsigned int v16 = *(_DWORD *)(a1 + 12);
    size_t v17 = (char *)malloc_type_malloc(*a2, 0x3861185CuLL);
    if (!v17) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v18 = v17;
    uint64_t v32 = a3;
    v33[0] = 0;
    uint64_t v28 = a1;
    LODWORD(a3) = 0;
    char v19 = 0;
    v33[1] = 0;
    uint64_t v34 = 0;
    int v31 = a6 - 1;
    while (1)
    {
      sub_213CD4FA4(v33, (uint64_t)a2, 0);
      if (v19) {
        (*(void (**)(uint64_t, char *, void))(v33[0] + 24))(v34, v18, a3);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33[0] + 24))(v34, v12, a5);
      if (v32) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v33[0] + 24))(v34, v32, 8);
      }
      (*(void (**)(char *, uint64_t))(v33[0] + 32))(v18, v34);
      a3 = *(unsigned int *)v33[0];
      if (*a2 != a3) {
        sub_213CD8934();
      }
      int v20 = v31;
      if (a6 >= 2)
      {
        do
        {
          sub_213CD4FA4(v33, (uint64_t)a2, 0);
          (*(void (**)(uint64_t, char *, void))(v33[0] + 24))(v34, v18, a3);
          (*(void (**)(char *, uint64_t))(v33[0] + 32))(v18, v34);
          a3 = *(unsigned int *)v33[0];
          if (*a2 != a3) {
            sub_213CD8908();
          }
          --v20;
        }
        while (v20);
      }
      if (v8) {
        break;
      }
      LODWORD(vinit_error_table((uint64_t)off_2677FEAA0, 1859794432, 21) = 0;
      if (v16) {
        goto LABEL_21;
      }
LABEL_29:
      char v19 = 1;
      if (!(v8 | v16))
      {
        sub_213CD4F44(v33);
        free(v18);
        return *(unsigned int *)(v28 + 8);
      }
    }
    if (v8 >= a3) {
      size_t v21 = a3;
    }
    else {
      size_t v21 = v8;
    }
    if (a7)
    {
      memcpy(a7, v18, v21);
      a7 += v21;
    }
    LODWORD(vinit_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v8 - v21;
    if (!v16) {
      goto LABEL_29;
    }
LABEL_21:
    unsigned int v22 = a3 - v21;
    if (a3 > v21)
    {
      long long v29 = a7;
      uint64_t v23 = v12;
      uint64_t v24 = a5;
      uint64_t v25 = a6;
      if (v16 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v16;
      }
      if (a8)
      {
        memcpy(a8, &v18[v21], v26);
        a8 += v26;
      }
      else
      {
        a8 = 0;
      }
      v16 -= v26;
      a6 = v25;
      a5 = v24;
      uint64_t v12 = v23;
      a7 = v29;
    }
    goto LABEL_29;
  }
  return v8;
}

uint64_t hc_EVP_CIPHER_CTX_rand_key(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 17) & 2) == 0) {
    return CCRandomCopyBytes() == 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 72);
  if (!v2) {
    return 0;
  }

  return v2();
}

uint64_t hc_EVP_CIPHER_CTX_ctrl(uint64_t a1)
{
  if (*(void *)a1 && (uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 72)) != 0) {
    return v1();
  }
  else {
    return 0;
  }
}

void *sub_213CD5AA8()
{
  return sub_213CD5AB0(0);
}

void *sub_213CD5AB0(_DWORD *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0xA8uLL, 0x10F00409343F5F1uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 2init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 1;
    if (a1)
    {
      hc_ENGINE_up_ref(a1);
      v3[3] = a1;
      uint64_t default_RSA = (uint64_t)a1;
    }
    else
    {
      uint64_t default_RSA = hc_ENGINE_get_default_RSA();
      v3[3] = default_RSA;
      if (!default_RSA)
      {
        RSA = (char **)v3[2];
        if (!RSA)
        {
          RSA = off_267800F70;
          v3[2] = off_267800F70;
        }
LABEL_6:
        ((void (*)(void *))RSA[7])(v3);
        return v3;
      }
    }
    RSA = (char **)hc_ENGINE_get_RSA(default_RSA);
    v3[2] = RSA;
    if (!RSA)
    {
      hc_ENGINE_finish(a1);
      free(v3);
      return 0;
    }
    goto LABEL_6;
  }
  return v3;
}

void sub_213CD5B74(_DWORD *a1)
{
  int v1 = a1[28];
  if (v1 <= 0) {
    abort();
  }
  int v3 = v1 - 1;
  a1[28] = v3;
  if (!v3)
  {
    (*(void (**)(_DWORD *))(*((void *)a1 + 2) + 64))(a1);
    uint64_t v4 = (void *)*((void *)a1 + 3);
    if (v4) {
      hc_ENGINE_finish(v4);
    }
    size_t v5 = (void *)*((void *)a1 + 4);
    if (v5) {
      sub_213CD46FC(v5);
    }
    size_t v6 = (void *)*((void *)a1 + 5);
    if (v6) {
      sub_213CD46FC(v6);
    }
    unsigned int v7 = (void *)*((void *)a1 + 6);
    if (v7) {
      sub_213CD46FC(v7);
    }
    uint64_t v8 = (void *)*((void *)a1 + 7);
    if (v8) {
      sub_213CD46FC(v8);
    }
    uint64_t v9 = (void *)*((void *)a1 + 8);
    if (v9) {
      sub_213CD46FC(v9);
    }
    uint64_t v10 = (void *)*((void *)a1 + 9);
    if (v10) {
      sub_213CD46FC(v10);
    }
    size_t v11 = (void *)*((void *)a1 + 10);
    if (v11) {
      sub_213CD46FC(v11);
    }
    uint64_t v12 = (void *)*((void *)a1 + 11);
    if (v12) {
      sub_213CD46FC(v12);
    }
    *((void *)a1 + 20) = 0;
    *((_OWORD *)a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }
}

uint64_t sub_213CD5C68(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(a1 + 16) + 64))();
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    hc_ENGINE_finish(v4);
    *(void *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = a2;
  (*(void (**)(uint64_t))(a2 + 56))(a1);
  return 1;
}

uint64_t sub_213CD5CBC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 96) = a2;
  return 1;
}

uint64_t sub_213CD5CC8(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

BOOL sub_213CD5CD0(void *a1)
{
  if (!a1[6] || (uint64_t v2 = (unsigned int *)a1[4]) == 0)
  {
    if (!a1[7] || a1[8] || !a1[9] || !a1[10] || !a1[11]) {
      return 0;
    }
    uint64_t v2 = (unsigned int *)a1[4];
  }
  int v3 = sub_213CD480C(v2);
  uint64_t v4 = (unsigned __int8 *)malloc_type_malloc(v3, 0xE1D5972EuLL);
  if (!v4) {
    return 0;
  }
  size_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, const char *, unsigned __int8 *, void *, uint64_t))(a1[2] + 24))(14, "hello, world!", v4, a1, 1);
  BOOL v7 = v6 != -1
    && (*(unsigned int (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, void *, uint64_t))(a1[2] + 16))(v6, v5, v5, a1, 1) == 14&& !ct_memcmp(v5, "hello, world!", 14);
  free(v5);
  return v7;
}

uint64_t sub_213CD5DDC(uint64_t a1)
{
  return sub_213CD480C(*(unsigned int **)(a1 + 32));
}

uint64_t sub_213CD5DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 24))();
}

uint64_t sub_213CD5DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 16))();
}

uint64_t sub_213CD5DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 8))();
}

uint64_t sub_213CD5E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 + 16) + 32))();
}

uint64_t sub_213CD5E14(int a1, uint64_t a2, unsigned int a3, uint64_t a4, int *a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 + 16);
  uint64_t v10 = *(uint64_t (**)(void))(v9 + 88);
  if (v10)
  {
    return v10();
  }
  else
  {
    if (!*(void *)(v9 + 24)) {
      return 0;
    }
    uint64_t v20 = 0;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    uint64_t v12 = 0xFFFFFFFFLL;
    switch(a1)
    {
      case 2:
        int v13 = &xmmword_2641EAF88;
        goto LABEL_12;
      case 4:
        int v13 = &xmmword_2641EAF70;
        goto LABEL_12;
      case 5:
        int v13 = &xmmword_2641EAFA0;
        goto LABEL_12;
      case 6:
        int v13 = &xmmword_2641EAF40;
        goto LABEL_12;
      case 7:
        int v13 = &xmmword_2641EAF58;
LABEL_12:
        long long v21 = *v13;
        uint64_t v14 = *((void *)v13 + 2);
        uint64_t v24 = a2;
        uint64_t v22 = v14;
        uint64_t v23 = a3;
        uint64_t v15 = sub_213CD2E50((uint64_t)&v21);
        unsigned int v16 = malloc_type_malloc(v15, 0xE8D1A73FuLL);
        if (!v16) {
          return 12;
        }
        size_t v17 = v16;
        uint64_t v18 = sub_213CD2E30((uint64_t)v16 + v15 - 1, v15, (uint64_t)&v21, (uint64_t)&v20);
        if (v18)
        {
          uint64_t v12 = v18;
          free(v17);
          return v12;
        }
        if (v15 != v20) {
          abort();
        }
        int v19 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 16) + 24))(v15, v17, a4, a6, 1);
        free(v17);
        if (v19 < 1) {
          return 0;
        }
        *a5 = v19;
        uint64_t v12 = 1;
        break;
      default:
        return v12;
    }
    return v12;
  }
}

uint64_t sub_213CD5FE8(uint64_t a1)
{
  int v1 = *(uint64_t (**)(void))(*(void *)(a1 + 16) + 104);
  if (v1) {
    return v1();
  }
  else {
    return 0;
  }
}

void *sub_213CD6000(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = 0;
  int v5 = sub_213CD2DB0(*a2, a3, (uint64_t)v8, (uint64_t)&v7);
  uint64_t result = 0;
  if (!v5)
  {
    *a2 += v7;
    if (a1 || (a1 = sub_213CD5AB0(0)) != 0)
    {
      a1[4] = sub_213CD7914((const void **)v8 + 1, 0);
      a1[5] = sub_213CD7914((const void **)v9, 0);
      a1[6] = sub_213CD7914((const void **)&v9[1] + 1, 0);
      a1[7] = sub_213CD7914((const void **)v10, 0);
      a1[8] = sub_213CD7914((const void **)&v10[1] + 1, 0);
      a1[9] = sub_213CD7914((const void **)v11, 0);
      a1[10] = sub_213CD7914((const void **)&v11[1] + 1, 0);
      a1[11] = sub_213CD7914((const void **)&v12, 0);
      sub_213CD2E00((uint64_t)v8);
      if (a1[4] && a1[5] && a1[6] && a1[7] && a1[8] && a1[9] && a1[10] && a1[11]) {
        return a1;
      }
      sub_213CD5B74(a1);
    }
    else
    {
      sub_213CD2E00((uint64_t)v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_213CD6190(unsigned int **a1, void **a2)
{
  size_t v17 = 0;
  int v3 = a1[4];
  if (!v3 || !a1[5] || !a1[6] || !a1[7] || !a1[8] || !a1[9] || !a1[10] || !a1[11]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v23 = 0;
  long long v22 = 0u;
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  int v5 = sub_213CD78A8(v3, (uint64_t)v18 + 8);
  int v6 = sub_213CD78A8(a1[5], (uint64_t)v19) | v5;
  int v7 = sub_213CD78A8(a1[6], (uint64_t)&v19[1] + 8);
  int v8 = v6 | v7 | sub_213CD78A8(a1[7], (uint64_t)v20);
  int v9 = sub_213CD78A8(a1[8], (uint64_t)&v20[1] + 8);
  int v10 = v9 | sub_213CD78A8(a1[9], (uint64_t)v21);
  int v11 = v8 | v10 | sub_213CD78A8(a1[10], (uint64_t)&v21[1] + 8);
  if (v11 | sub_213CD78A8(a1[11], (uint64_t)&v22)) {
    goto LABEL_10;
  }
  size_t v14 = sub_213CD2DF0((uint64_t)v18);
  size_t v12 = v14;
  if (!a2)
  {
    sub_213CD2E00((uint64_t)v18);
    return v12;
  }
  uint64_t v15 = malloc_type_malloc(v14, 0xA53095EFuLL);
  if (!v15)
  {
LABEL_10:
    sub_213CD2E00((uint64_t)v18);
    return 0xFFFFFFFFLL;
  }
  unsigned int v16 = v15;
  if (sub_213CD2DD0((uint64_t)((uint64_t)v15 + v12) - 1, v12, (uint64_t)v18, (uint64_t)&v17))
  {
    free(v16);
    goto LABEL_10;
  }
  sub_213CD2E00((uint64_t)v18);
  if (v12 != v17) {
    abort();
  }
  memcpy(*a2, v16, v12);
  free(v16);
  size_t v12 = v17;
  *a2 = (char *)*a2 + v17;
  return v12;
}

uint64_t sub_213CD6390(uint64_t a1, void **a2)
{
  size_t v9 = 0;
  memset(v10, 0, sizeof(v10));
  if (sub_213CD78A8(*(unsigned int **)(a1 + 32), (uint64_t)v10)
    || sub_213CD78A8(*(unsigned int **)(a1 + 40), (uint64_t)&v10[1] + 8))
  {
    goto LABEL_3;
  }
  size_t v6 = sub_213CD2D90((uint64_t)v10);
  size_t v4 = v6;
  if (!a2)
  {
    sub_213CD2DA0((uint64_t)v10);
    return v4;
  }
  int v7 = malloc_type_malloc(v6, 0x1925860BuLL);
  if (!v7) {
    goto LABEL_3;
  }
  int v8 = v7;
  if (sub_213CD2D70((uint64_t)((uint64_t)v7 + v4) - 1, v4, (uint64_t)v10, (uint64_t)&v9))
  {
    free(v8);
LABEL_3:
    sub_213CD2DA0((uint64_t)v10);
    return 0xFFFFFFFFLL;
  }
  sub_213CD2DA0((uint64_t)v10);
  if (v4 != v9) {
    abort();
  }
  memcpy(*a2, v8, v4);
  free(v8);
  size_t v4 = v9;
  *a2 = (char *)*a2 + v9;
  return v4;
}

void *sub_213CD64A8(void *a1, uint64_t *a2, uint64_t a3)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = 0;
  int v5 = sub_213CD2D50(*a2, a3, (uint64_t)v8, (uint64_t)&v7);
  uint64_t result = 0;
  if (!v5)
  {
    *a2 += v7;
    if (a1 || (a1 = sub_213CD5AB0(0)) != 0)
    {
      a1[4] = sub_213CD7914((const void **)v8, 0);
      a1[5] = sub_213CD7914((const void **)&v8[1] + 1, 0);
      sub_213CD2DA0((uint64_t)v8);
      if (a1[4] && a1[5]) {
        return a1;
      }
      sub_213CD5B74(a1);
    }
    else
    {
      sub_213CD2DA0((uint64_t)v8);
    }
    return 0;
  }
  return result;
}

uint64_t hc_UI_UTIL_read_pw_string(char *a1, int a2, const char *a3, int a4)
{
  size_t v7 = a2;
  uint64_t v8 = sub_213CD6654("", a3, a1, a2);
  if (!v8)
  {
    if (a4)
    {
      int v10 = (char *)malloc_type_malloc(v7, 0x1322778CuLL);
      if (v10)
      {
        int v11 = v10;
        uint64_t v8 = sub_213CD6654("Verify password - ", a3, v10, v7);
        if (!v8) {
          uint64_t v8 = strcmp(v11, a1) != 0;
        }
        free(v11);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uint64_t sub_213CD6654(const char *a1, const char *a2, unsigned char *a3, uint64_t a4)
{
  v33[62] = *MEMORY[0x263EF8340];
  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  memset(v32, 0, 128);
  uint64_t v8 = 1;
  *(void *)&v29.sa_masuint64_t k = 0;
  do
  {
    uint64_t v9 = 0;
    v29.sa_krb5_flags flags = 0;
    v29.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_213CD6950;
    char v10 = 1;
    while (2)
    {
      int v11 = (char *)&unk_267800F78 + 8 * v9++;
      size_t v12 = v11 + 4;
      while (1)
      {
        if (*(v12 - 1) == v8)
        {
          if (!*v12)
          {
            v29.__sigaction_u.__sa_handler = (void (__cdecl *)(int))1;
            v29.sa_krb5_flags flags = 2;
            goto LABEL_9;
          }
          if (*v12 == 1) {
            break;
          }
        }
LABEL_9:
        ++v9;
        v12 += 2;
        if (v9 == 5)
        {
          if ((v10 & 1) != 0 && !sigaction(v8, &v29, (sigaction *)&v32[v8 + 8])) {
            *((_DWORD *)v32 + vinit_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = 1;
          }
          goto LABEL_16;
        }
      }
      char v10 = 0;
      if (v9 != 4) {
        continue;
      }
      break;
    }
LABEL_16:
    ++v8;
  }
  while (v8 != 32);
  uint64_t v13 = fopen("/dev/tty", "r");
  size_t v14 = (FILE **)MEMORY[0x263EF8350];
  if (v13)
  {
    uint64_t v15 = v13;
    rk_cloexec_file(v13);
  }
  else
  {
    uint64_t v15 = (FILE *)*MEMORY[0x263EF8350];
  }
  unsigned int v16 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], "%s%s", a1, a2);
  fflush(*v16);
  int v17 = fileno(v15);
  tcgetattr(v17, &v30);
  *(_OWORD *)v31.c_cc = *(_OWORD *)v30.c_cc;
  *(_OWORD *)&v31.c_cc[16] = *(_OWORD *)&v30.c_cc[16];
  v31.c_ospeed = v30.c_ospeed;
  *(_OWORD *)&v31.c_iflag = *(_OWORD *)&v30.c_iflag;
  v31.c_cflag = v30.c_cflag;
  v31.c_lflag = v30.c_lflag & 0xFFFFFFFFFFFFFFF7;
  int v18 = fileno(v15);
  tcsetattr(v18, 0, &v31);
  BOOL v19 = 0;
  dword_267801658 = 0;
  uint64_t v20 = &a3[a4];
  while (1)
  {
    int v21 = getc(v15);
    if (v21 == 10)
    {
LABEL_26:
      BOOL v22 = 1;
      goto LABEL_28;
    }
    if (v21 == -1) {
      break;
    }
    if (!v19) {
      *a3++ = v21;
    }
    BOOL v19 = a3 == v20;
    if (dword_267801658) {
      goto LABEL_26;
    }
  }
  BOOL v22 = ferror(v15) != 0;
LABEL_28:
  a3[-v19] = 0;
  fputc(10, *v16);
  int v23 = fileno(v15);
  tcsetattr(v23, 0, &v30);
  if (v15 != *v14) {
    fclose(v15);
  }
  uint64_t v24 = (const sigaction *)v33;
  for (uint64_t i = 1; i != 32; ++i)
  {
    if (*((_DWORD *)v32 + i)) {
      sigaction(i, v24, 0);
    }
    ++v24;
  }
  if (v19) {
    int v26 = -1;
  }
  else {
    int v26 = 0;
  }
  if (dword_267801658) {
    unsigned int v27 = -2;
  }
  else {
    unsigned int v27 = v26;
  }
  if (v22) {
    return v27;
  }
  else {
    return 4294967293;
  }
}

void sub_213CD6950()
{
}

uint64_t hc_ENGINE_finish(void *a1)
{
  int v1 = (*(_DWORD *)a1)--;
  if (v1 <= 0) {
    abort();
  }
  if (v1 == 1)
  {
    int v3 = (void *)a1[1];
    if (v3) {
      free(v3);
    }
    size_t v4 = (void *)a1[2];
    if (v4) {
      free(v4);
    }
    int v5 = (void (*)(void *))a1[3];
    if (v5) {
      v5(a1);
    }
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }
  return 1;
}

uint64_t hc_ENGINE_up_ref(_DWORD *a1)
{
  if ((*a1 & 0x80000000) != 0) {
    abort();
  }
  ++*a1;
  return 1;
}

BOOL hc_ENGINE_set_id(uint64_t a1, char *__s1)
{
  int v3 = strdup(__s1);
  *(void *)(a1 + 16) = v3;
  return v3 != 0;
}

BOOL hc_ENGINE_set_name(uint64_t a1, char *__s1)
{
  int v3 = strdup(__s1);
  *(void *)(a1 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v3;
  return v3 != 0;
}

uint64_t hc_ENGINE_set_destroy_function(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  return 1;
}

uint64_t hc_ENGINE_get_id(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t hc_ENGINE_get_name(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t hc_ENGINE_get_RSA(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_213CD6A9C(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t hc_ENGINE_get_DH(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t hc_ENGINE_get_RAND(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t hc_ENGINE_get_default_RSA()
{
  uint64_t result = qword_267801660;
  if (qword_267801660)
  {
    if ((*(_DWORD *)qword_267801660 & 0x80000000) != 0) {
      abort();
    }
    ++*(_DWORD *)qword_267801660;
  }
  return result;
}

uint64_t sub_213CD6AE8()
{
  uint64_t result = qword_267801668;
  if (qword_267801668)
  {
    if ((*(_DWORD *)qword_267801668 & 0x80000000) != 0) {
      abort();
    }
    ++*(_DWORD *)qword_267801668;
  }
  return result;
}

uint64_t hc_ENGINE_get_default_DH()
{
  uint64_t result = qword_267801670;
  if (qword_267801670)
  {
    if ((*(_DWORD *)qword_267801670 & 0x80000000) != 0) {
      abort();
    }
    ++*(_DWORD *)qword_267801670;
  }
  return result;
}

uint64_t hc_ENGINE_load_builtin_engines()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x40uLL, 0x10F0040DCD6B6ADuLL);
  *(_DWORD *)uint64_t v0 = 1;
  v0[2] = strdup("builtin");
  v0[1] = strdup("Heimdal crypto builtin engine version 1.3.99");
  v0[4] = sub_213CD71D4();
  v0[6] = sub_213CD7C60();
  uint64_t result = sub_213CD6BF0((uint64_t)v0);
  if (!result)
  {
    return hc_ENGINE_finish(v0);
  }
  return result;
}

uint64_t sub_213CD6BF0(uint64_t a1)
{
  if (hc_ENGINE_by_id(*(char **)(a1 + 16))) {
    return 0;
  }
  int v3 = malloc_type_realloc((void *)qword_267801680, 8 * (dword_267801678 + 1), 0x2004093837F09uLL);
  if (v3)
  {
    qword_267801680 = (uint64_t)v3;
    uint64_t v4 = dword_267801678++;
    v3[v4] = a1;
  }
  return 1;
}

_DWORD *hc_ENGINE_by_dso(const char *a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x40uLL, 0x10F0040DCD6B6ADuLL);
  if (!v4) {
    return v4;
  }
  int v5 = dlopen(a1, 2);
  if (!v5)
  {
LABEL_11:
    free(v4);
    return 0;
  }
  size_t v6 = v5;
  size_t v7 = (uint64_t (*)(uint64_t))dlsym(v5, "v_check");
  if (!v7
    || !v7(0x20000)
    || (uint64_t v8 = dlsym(v6, "bind_engine")) == 0
    || ((unsigned int (*)(_DWORD *, uint64_t, void))v8)(v4, a2, 0) != 1)
  {
    dlclose(v6);
    goto LABEL_11;
  }
  if ((*v4 & 0x80000000) != 0) {
    abort();
  }
  ++*v4;
  if (!sub_213CD6BF0((uint64_t)v4))
  {
    dlclose(v6);
    hc_ENGINE_finish(v4);
    return 0;
  }
  return v4;
}

_DWORD *hc_ENGINE_by_id(char *__s1)
{
  uint64_t v1 = dword_267801678;
  if (!dword_267801678) {
    return 0;
  }
  for (uint64_t i = qword_267801680; ; i += 8)
  {
    uint64_t v4 = *(_DWORD **)i;
    if (!strcmp(__s1, *(const char **)(*(void *)i + 16))) {
      break;
    }
    if (!--v1) {
      return 0;
    }
  }
  if ((*v4 & 0x80000000) != 0) {
    abort();
  }
  ++*v4;
  return v4;
}

uint64_t sub_213CD6DF4(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  char v10 = (__SecKey *)sub_213CD71E0(a4, 1);
  cipherTextLeuint64_t n = (int)sub_213CD5DDC((uint64_t)a4);
  uint64_t result = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyEncrypt(v10, 1u, a2, a1, a3, &cipherTextLen);
    CFRelease(v10);
    if (v12)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      size_t v13 = cipherTextLen;
      if (v13 > (int)sub_213CD5DDC((uint64_t)a4)) {
        abort();
      }
      return cipherTextLen;
    }
  }
  return result;
}

uint64_t sub_213CD6EBC(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  char v10 = (__SecKey *)sub_213CD71E0(a4, 1);
  plainTextLeuint64_t n = (int)sub_213CD5DDC((uint64_t)a4);
  uint64_t v11 = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyDecrypt(v10, 0, a2, a1, a3, &plainTextLen);
    CFRelease(v10);
    if (!v12)
    {
      size_t v14 = plainTextLen;
      if (v14 > (int)sub_213CD5DDC((uint64_t)a4)) {
        abort();
      }
      size_t v15 = plainTextLen;
      if (plainTextLen)
      {
        if (*a3 == 1)
        {
          uint64_t v16 = 1;
          while (plainTextLen != v16)
          {
            int v17 = a3[v16++];
            if (v17 != 255)
            {
              if (v17) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v11 = plainTextLen - v16;
              plainTextLen -= v16;
              memmove(a3, &a3[v16], v15 - v16);
              return v11;
            }
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v11;
}

uint64_t sub_213CD6FD8(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  char v10 = (__SecKey *)sub_213CD71E0(a4, 0);
  cipherTextLeuint64_t n = (int)sub_213CD5DDC((uint64_t)a4);
  uint64_t result = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyEncrypt(v10, 1u, a2, a1, a3, &cipherTextLen);
    CFRelease(v10);
    if (v12)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      size_t v13 = cipherTextLen;
      if (v13 > (int)sub_213CD5DDC((uint64_t)a4)) {
        abort();
      }
      return cipherTextLen;
    }
  }
  return result;
}

uint64_t sub_213CD70A0(int a1, const uint8_t *a2, uint8_t *a3, unsigned int **a4, int a5)
{
  char v10 = (__SecKey *)sub_213CD71E0(a4, 0);
  plainTextLeuint64_t n = (int)sub_213CD5DDC((uint64_t)a4);
  uint64_t v11 = 0xFFFFFFFFLL;
  if (a5 == 1 && v10)
  {
    OSStatus v12 = SecKeyDecrypt(v10, 0, a2, a1, a3, &plainTextLen);
    CFRelease(v10);
    if (!v12)
    {
      size_t v14 = plainTextLen;
      if (v14 > (int)sub_213CD5DDC((uint64_t)a4)) {
        abort();
      }
      size_t v15 = plainTextLen;
      if (plainTextLen)
      {
        if (*a3 == 1)
        {
          uint64_t v16 = 1;
          while (plainTextLen != v16)
          {
            int v17 = a3[v16++];
            if (v17 != 255)
            {
              if (v17) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v11 = plainTextLen - v16;
              plainTextLen -= v16;
              memmove(a3, &a3[v16], v15 - v16);
              return v11;
            }
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v11;
}

uint64_t sub_213CD71BC()
{
  return 1;
}

uint64_t sub_213CD71C4()
{
  return 1;
}

uint64_t sub_213CD71CC()
{
  return 0xFFFFFFFFLL;
}

char **sub_213CD71D4()
{
  return &off_26C4C8E00;
}

uint64_t sub_213CD71E0(unsigned int **a1, int a2)
{
  uint64_t v18 = 0;
  if (!a2)
  {
    uint64_t v17 = 0;
    long long v16 = 0uLL;
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, sizeof(v14));
    memset(v13, 0, sizeof(v13));
    long long v11 = 0uLL;
    long long v12 = 0uLL;
    LODWORD(v11) = 1;
    if (!sub_213CD78A8(a1[4], (uint64_t)&v11 + 8)
      && !sub_213CD78A8(a1[5], (uint64_t)v13)
      && !sub_213CD78A8(a1[6], (uint64_t)&v13[1] + 8)
      && !sub_213CD78A8(a1[7], (uint64_t)v14)
      && !sub_213CD78A8(a1[8], (uint64_t)&v14[1] + 8)
      && !sub_213CD78A8(a1[9], (uint64_t)v15)
      && !sub_213CD78A8(a1[10], (uint64_t)&v15[1] + 8)
      && !sub_213CD78A8(a1[11], (uint64_t)&v16))
    {
      uint64_t v9 = sub_213CD2DF0((uint64_t)&v11);
      char v10 = malloc_type_malloc(v9, 0xF1D325A5uLL);
      if (v10)
      {
        size_t v7 = v10;
        if (!sub_213CD2DD0((uint64_t)v10 + v9 - 1, v9, (uint64_t)&v11, (uint64_t)&v18))
        {
          sub_213CD2E00((uint64_t)&v11);
          if (v18 == v9)
          {
            uint64_t v8 = MEMORY[0x263F16DF0](0, v7, v9, 1);
            goto LABEL_21;
          }
LABEL_27:
          abort();
        }
        free(v7);
      }
    }
    sub_213CD2E00((uint64_t)&v11);
    return 0;
  }
  long long v12 = 0uLL;
  v13[0] = 0uLL;
  long long v11 = 0uLL;
  if (sub_213CD78A8(a1[4], (uint64_t)&v11)) {
    goto LABEL_4;
  }
  if (sub_213CD78A8(a1[5], (uint64_t)&v12 + 8)) {
    goto LABEL_4;
  }
  uint64_t v5 = sub_213CD2D90((uint64_t)&v11);
  size_t v6 = malloc_type_malloc(v5, 0x7E6D9746uLL);
  if (!v6) {
    goto LABEL_4;
  }
  size_t v7 = v6;
  if (!sub_213CD2D70((uint64_t)v6 + v5 - 1, v5, (uint64_t)&v11, (uint64_t)&v18))
  {
    sub_213CD2DA0((uint64_t)&v11);
    if (v18 == v5)
    {
      uint64_t v8 = MEMORY[0x263F16DF8](0, v7, v5, 1);
LABEL_21:
      uint64_t v3 = v8;
      free(v7);
      return v3;
    }
    goto LABEL_27;
  }
  free(v7);
LABEL_4:
  sub_213CD2DA0((uint64_t)&v11);
  return 0;
}

BOOL hc_PKCS5_PBKDF2_HMAC_SHA1(const char *a1, size_t passwordLen, uint8_t *salt, size_t saltLen, unsigned int rounds, size_t derivedKeyLen, uint8_t *derivedKey)
{
  if (a1) {
    long long v12 = a1;
  }
  else {
    long long v12 = "";
  }
  return CCKeyDerivationPBKDF(2u, v12, passwordLen, salt, saltLen, 1u, rounds, derivedKey, derivedKeyLen) == 0;
}

void *sub_213CD7468()
{
  return sub_213CD7470(0);
}

void *sub_213CD7470(_DWORD *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040DB20BB55uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)v2 + 12) = 1;
    if (a1)
    {
      hc_ENGINE_up_ref(a1);
      v3[3] = a1;
      uint64_t v4 = (uint64_t)a1;
    }
    else
    {
      uint64_t v4 = sub_213CD6AE8();
      v3[3] = v4;
      if (!v4)
      {
        uint64_t v5 = (char **)v3[2];
        if (!v5)
        {
          uint64_t v5 = off_267800F98;
          v3[2] = off_267800F98;
        }
LABEL_6:
        ((void (*)(void *))v5[5])(v3);
        return v3;
      }
    }
    uint64_t v5 = (char **)sub_213CD6A9C(v4);
    v3[2] = v5;
    if (!v5)
    {
      hc_ENGINE_finish(a1);
      free(v3);
      return 0;
    }
    goto LABEL_6;
  }
  return v3;
}

void sub_213CD7534(_DWORD *a1)
{
  int v1 = a1[12];
  if (v1 <= 0) {
    abort();
  }
  int v3 = v1 - 1;
  a1[12] = v3;
  if (!v3)
  {
    (*(void (**)(_DWORD *))(*((void *)a1 + 2) + 48))(a1);
    uint64_t v4 = (void *)*((void *)a1 + 3);
    if (v4) {
      hc_ENGINE_finish(v4);
    }
    *((void *)a1 + 6) = 0;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    free(a1);
  }
}

uint64_t sub_213CD75BC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(a1 + 16) + 48))();
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    hc_ENGINE_finish(v4);
    *(void *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = a2;
  (*(void (**)(uint64_t))(a2 + 40))(a1);
  return 1;
}

uint64_t sub_213CD7610(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  return 1;
}

uint64_t sub_213CD761C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_213CD7624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v6 = *(uint64_t (**)(void))(*(void *)(a6 + 16) + 64);
  if (v6) {
    return v6();
  }
  else {
    return 0;
  }
}

uint64_t sub_213CD763C()
{
  return 72;
}

uint64_t sub_213CD7644()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CD764C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CD7654()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CD765C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_213CD7664()
{
  return 1;
}

uint64_t sub_213CD766C()
{
  return 1;
}

void *sub_213CD7674()
{
  return &unk_26C4C9A68;
}

BOOL sub_213CD7680(uint64_t a1, void *key, void *iv, int a4)
{
  return sub_213CD7808(a4, 2u, 0, key, 0x18uLL, iv, *(CCCryptorRef **)(a1 + 120));
}

BOOL sub_213CD76A4(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  size_t v6 = *(CCCryptorRef **)(a1 + 120);
  size_t dataOutMoved = 0;
  size_t v7 = __n;
  memcpy(__dst, __src, __n);
  return !CCCryptorUpdate(*v6, __src, v7, __dst, v7, &dataOutMoved) && dataOutMoved == v7;
}

uint64_t sub_213CD7720(uint64_t a1)
{
  int v1 = **(_CCCryptor ***)(a1 + 120);
  if (v1) {
    CCCryptorRelease(v1);
  }
  return 1;
}

void *sub_213CD7748()
{
  return &unk_26C4C9A10;
}

BOOL sub_213CD7754(uint64_t a1, void *key, void *iv, int a4)
{
  return sub_213CD7808(a4, 1u, 0, key, 8uLL, iv, *(CCCryptorRef **)(a1 + 120));
}

void *sub_213CD7778()
{
  return &unk_26C4C9908;
}

BOOL sub_213CD7784(CCCryptorRef **a1, void *key, void *iv, int a4)
{
  return sub_213CD7808(a4, 0, 0, key, *((int *)*a1 + 2), iv, a1[15]);
}

void *sub_213CD77AC()
{
  return &unk_26C4C9960;
}

void *sub_213CD77B8()
{
  return &unk_26C4C99B8;
}

void *sub_213CD77C4()
{
  return &unk_26C4C9AC0;
}

uint64_t sub_213CD77D0()
{
  return 0;
}

void *sub_213CD77D8()
{
  return &unk_26C4C9AF0;
}

BOOL sub_213CD77E4(uint64_t a1, void *key, void *iv, int a4)
{
  return sub_213CD7808(a4, 4u, 0, key, *(int *)(a1 + 104), iv, *(CCCryptorRef **)(a1 + 120));
}

BOOL sub_213CD7808(int a1, CCAlgorithm alg, CCOptions options, void *key, size_t keyLength, void *iv, CCCryptorRef *cryptorRef)
{
  CCOperation v13 = a1 == 0;
  size_t v14 = *cryptorRef;
  if (*cryptorRef)
  {
    if (!key && iv)
    {
      CCCryptorReset(v14, iv);
      return 1;
    }
    CCCryptorRelease(v14);
  }
  return CCCryptorCreate(v13, alg, options, key, keyLength, iv, cryptorRef) == 0;
}

uint64_t sub_213CD78A8(unsigned int *a1, uint64_t a2)
{
  int v4 = sub_213CD480C(a1);
  *(void *)a2 = v4;
  uint64_t v5 = malloc_type_malloc(v4, 0x43BE570AuLL);
  *(void *)(a2 + init_error_table((uint64_t)off_2677FFB90, -1750206208, 8) = v5;
  if (!v5) {
    return 12;
  }
  sub_213CD48E0((const void **)a1, v5);
  BOOL v6 = sub_213CD4928((uint64_t)a1);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

void *sub_213CD7914(const void **a1, void *a2)
{
  int v3 = sub_213CD4814(a1[1], *(unsigned int *)a1, a2);
  int v4 = v3;
  if (v3) {
    sub_213CD4914((uint64_t)v3, *((_DWORD *)a1 + 4));
  }
  return v4;
}

unsigned int *sub_213CD795C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_213CD4D40(a1);
  size_t v11 = 0;
  uint64_t result = *(unsigned int **)(a1 + 8);
  if (!result) {
    return result;
  }
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (sub_213CD78A8(result, (uint64_t)v9)
    || sub_213CD78A8(*(unsigned int **)(a1 + 16), (uint64_t)&v9[1] + 8)
    || (v10 = 0, v4 = sub_213CD27FC((uint64_t)v9), v12 = v4, (uint64_t v5 = malloc_type_malloc(v4, 0x769DC8CCuLL)) == 0))
  {
LABEL_5:
    sub_213CD280C((uint64_t)v9);
    return 0;
  }
  BOOL v6 = v5;
  if (sub_213CD27DC((uint64_t)v5 + v4 - 1, v4, (uint64_t)v9, (uint64_t)&v11))
  {
    free(v6);
    goto LABEL_5;
  }
  sub_213CD280C((uint64_t)v9);
  if (v11 != v4) {
    abort();
  }
  if (*v2)
  {
    SecDHDestroy();
    void *v2 = 0;
  }
  if (!SecDHCreateFromParameters())
  {
    free(v6);
    uint64_t v12 = (int)sub_213CD480C(*(unsigned int **)(a1 + 8));
    size_t v7 = malloc_type_malloc(v11, 0xA459750FuLL);
    if (!v7) {
      goto LABEL_16;
    }
    BOOL v6 = v7;
    if (!SecDHGenerateKeypair())
    {
      uint64_t v8 = sub_213CD4814(v6, v12, 0);
      *(void *)(a1 + 32) = v8;
      if (v8)
      {
        free(v6);
        return (unsigned int *)1;
      }
    }
  }
  free(v6);
LABEL_16:
  if (*v2) {
    SecDHDestroy();
  }
  uint64_t result = 0;
  void *v2 = 0;
  return result;
}

void *sub_213CD7B00(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_213CD4D40(a3);
  unsigned int v9 = sub_213CD480C(*(unsigned int **)(a3 + 8));
  int v5 = sub_213CD480C(a2);
  uint64_t result = malloc_type_malloc(v5, 0xB4F3A5E3uLL);
  if (result)
  {
    size_t v7 = result;
    sub_213CD48E0((const void **)a2, result);
    int v8 = SecDHComputeKey();
    free(v7);
    if (v8) {
      return 0;
    }
    else {
      return (void *)v9;
    }
  }
  return result;
}

uint64_t sub_213CD7BC4(uint64_t a1)
{
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (result)
  {
    sub_213CD4D34(a1, 0, result);
    return 1;
  }
  return result;
}

uint64_t sub_213CD7C18(uint64_t a1)
{
  int v1 = (void *)sub_213CD4D40(a1);
  if (*v1) {
    SecDHDestroy();
  }
  free(v1);
  return 1;
}

uint64_t sub_213CD7C58()
{
  return 0;
}

char **sub_213CD7C60()
{
  return &off_26C4C8DB8;
}

void heim_abort(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_213CD7C8C(char *a1, va_list a2)
{
  int v3 = 0;
  if (vasprintf(&v3, a1, a2) >= 1 && v3 != 0)
  {
    syslog(3, "heim_abort: %s", v3);
    __crashreporter_info__ = (uint64_t)v3;
  }
  abort();
}

void heim_warn_blocking(void *a1, dispatch_once_t *a2)
{
  heim_base_once_f(&qword_267801688, 0, (dispatch_function_t)sub_213CD7DA8);
  if (byte_267801690 && pthread_is_threaded_np() && pthread_main_np())
  {
    heim_base_once_f(a2, a1, (dispatch_function_t)sub_213CD7D78);
  }
}

void sub_213CD7D78(const char *a1)
{
}

uint64_t sub_213CD7DA8()
{
  uint64_t result = vproc_swap_integer();
  byte_267801690 = 0;
  return result;
}

void heim_base_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  if (*predicate != -1) {
    dispatch_once_f(predicate, context, function);
  }
}

CFTypeRef heim_retain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void heim_release(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFTypeID heim_get_tid(const void *a1)
{
  return CFGetTypeID(a1);
}

CFMutableArrayRef heim_array_create()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
}

uint64_t heim_array_append_value(__CFArray *a1, const void *a2)
{
  return 0;
}

CFIndex heim_array_iterate_f(const __CFArray *a1, uint64_t a2, uint64_t (*a3)(const void *, int *, uint64_t))
{
  CFIndex result = CFArrayGetCount(a1);
  int v11 = 0;
  if (result >= 1)
  {
    CFIndex v7 = result;
    CFIndex v8 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      CFIndex result = a3(ValueAtIndex, &v11, a2);
      ++v8;
      if (v11) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v8 < v7;
      }
    }
    while (v10);
  }
  return result;
}

CFIndex heim_array_iterate(const __CFArray *a1, uint64_t a2)
{
  CFIndex result = CFArrayGetCount(a1);
  int v9 = 0;
  if (result >= 1)
  {
    CFIndex v5 = result;
    CFIndex v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      CFIndex result = (*(uint64_t (**)(uint64_t, const void *, int *))(a2 + 16))(a2, ValueAtIndex, &v9);
      ++v6;
      if (v9) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = v6 < v5;
      }
    }
    while (v8);
  }
  return result;
}

const void *heim_array_copy_value(const __CFArray *a1, CFIndex a2)
{
  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  int v3 = ValueAtIndex;
  if (ValueAtIndex) {
    CFRetain(ValueAtIndex);
  }
  return v3;
}

CFIndex heim_array_filter(const __CFArray *a1, uint64_t a2)
{
  CFIndex result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
      if ((*(unsigned int (**)(uint64_t, const void *))(a2 + 16))(a2, ValueAtIndex)) {
        CFArrayRemoveValueAtIndex(a1, v5);
      }
      else {
        ++v5;
      }
      CFIndex result = CFArrayGetCount(a1);
    }
    while (v5 < result);
  }
  return result;
}

uint64_t sub_213CD8058(const __CFArray *a1, const void *a2)
{
  v5.CFIndex length = CFArrayGetCount(a1);
  v5.locatiouint64_t n = 0;
  return CFArrayContainsValue(a1, v5, a2);
}

CFTypeID heim_dict_get_type_id()
{
  return CFDictionaryGetTypeID();
}

const void *heim_dict_copy_value(const __CFDictionary *a1, const void *a2)
{
  CFBooleanRef Value = CFDictionaryGetValue(a1, a2);
  int v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v3;
}

uint64_t heim_dict_set_value(__CFDictionary *a1, const void *a2, const void *a3)
{
  return 0;
}

void sub_213CD8100(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a3;
  v3[1] = a2;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_213CD8138, v3);
}

uint64_t sub_213CD8138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))a3)(a1, a2, *(void *)(a3 + 8));
}

void heim_dict_iterate(const __CFDictionary *a1, uint64_t a2)
{
  v2[0] = a2;
  v2[1] = 0;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_213CD8178, v2);
}

uint64_t sub_213CD8178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
}

CFStringRef heim_string_create(char *cStr)
{
  return CFStringCreateWithCString(0, cStr, 0x8000100u);
}

CFTypeID heim_string_get_type_id()
{
  return CFStringGetTypeID();
}

char *heim_string_copy_utf8(const __CFString *a1)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return strdup(CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    CFIndex v6 = malloc_type_malloc(v5, 0xBC9E6F27uLL);
    if (v6 && !CFStringGetCString(a1, (char *)v6, v5, 0x8000100u))
    {
      free(v6);
      return 0;
    }
    return (char *)v6;
  }
}

CFDataRef heim_data_create(UInt8 *bytes, CFIndex length)
{
  return CFDataCreate(0, bytes, length);
}

CFTypeID heim_data_get_type_id()
{
  return CFDataGetTypeID();
}

uint64_t heim_uniq_alloc(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_26AA952A0 != -1) {
    dispatch_once(&qword_26AA952A0, &unk_26C4C8C78);
  }
  if (a1 <= 0x1F) {
    heim_abort("uniq: size too small:size >= sizeof(struct heim_base_uniq)", a2, a3, a4, a5, a6, a7, a8, v12);
  }
  uint64_t result = qword_26AA95298;
  if (qword_26AA95298)
  {
    uint64_t result = sub_213CD8334(qword_26AA95298, a1, (uint64_t)"base-uniq", a4, a5, a6, a7, a8);
    if (result)
    {
      *(void *)(result + 16) = a2;
      *(void *)(result + 24) = a3;
    }
  }
  return result;
}

uint64_t sub_213CD8334(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 <= 0xF) {
    heim_abort("cf runtime size too small:size >= sizeof(CFRuntimeBase)", a2, a3, a4, a5, a6, a7, a8, v12);
  }
  size_t v8 = a2 - 16;
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = Instance;
  if (Instance) {
    bzero((void *)(Instance + 16), v8);
  }
  return v10;
}

uint64_t heim_error_createv(int a1, const char *a2, va_list a3)
{
  if (qword_26AA95280 != -1) {
    dispatch_once(&qword_26AA95280, &unk_26C4C8C98);
  }
  uint64_t v6 = qword_26AA95278;
  if (!qword_26AA95278) {
    return 0;
  }
  CFIndex v7 = (char *)malloc_type_malloc(0x400uLL, 0x2B255905uLL);
  if (!v7) {
    return 0;
  }
  size_t v8 = v7;
  if (vsnprintf(v7, 0x400uLL, a2, a3) < 0)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = sub_213CD8334(v6, 0x28uLL, (uint64_t)"heim-error", v9, v10, v11, v12, v13);
    if (v14)
    {
      CFStringRef v15 = CFStringCreateWithCString(0, v8, 0x8000100u);
      *(_DWORD *)(v14 + 16) = a1;
      *(void *)(v14 + 24) = v15;
      *(void *)(v14 + 32) = 0;
    }
  }
  free(v8);
  return v14;
}

uint64_t heim_error_copy_string(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    CFRetain(*(CFTypeRef *)(a1 + 24));
  }
  return v1;
}

uint64_t heim_error_get_code(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t heim_error_append(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  if (cf) {
    CFRetain(cf);
  }
  *(void *)(a1 + 32) = cf;
  return a1;
}

CFNumberRef heim_number_create(int a1)
{
  int valuePtr = a1;
  return CFNumberCreate(0, kCFNumberIntType, &valuePtr);
}

CFTypeID heim_number_get_type_id()
{
  return CFNumberGetTypeID();
}

uint64_t heim_number_get_int(const __CFNumber *a1)
{
  unsigned int valuePtr = 0;
  CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
  return valuePtr;
}

dispatch_queue_t sub_213CD8578(const char *a1)
{
  return dispatch_queue_create(a1, 0);
}

void sub_213CD8580(dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
}

intptr_t sub_213CD8594(NSObject *a1, uint64_t a2)
{
  dispatch_time_t v3 = dispatch_time(0, 1000000000 * a2);

  return dispatch_semaphore_wait(a1, v3);
}

uint64_t sub_213CD85E0()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_26AA95298 = result;
  return result;
}

uint64_t sub_213CD8608(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void))(result + 24);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_213CD8618()
{
  uint64_t result = _CFRuntimeRegisterClass();
  qword_26AA95278 = result;
  return result;
}

void sub_213CD8640(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  dispatch_time_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
  }
}

void sub_213CD8690()
{
  __assert_rtn("_krb5_decrypt_tkt_with_subkey", "tkt.c", 391, "usage == 0");
}

void sub_213CD86BC(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_213C74000, a2, OS_LOG_TYPE_DEBUG, "%{public}s", (uint8_t *)&v2, 0xCu);
}

void sub_213CD8734()
{
}

void sub_213CD8750()
{
  __assert_rtn("check_basic_constraints", "cert.c", 875, "ret == 0");
}

void sub_213CD877C()
{
  __assert_rtn("match_general_name", "cert.c", 1801, "c->element == n->element");
}

void sub_213CD87A8()
{
}

void sub_213CD87D4()
{
  __assert_rtn("hx509_crypto_encrypt", "crypto.c", 2690, "(size_t)EVP_CIPHER_iv_length(crypto->c) == ivec->length");
}

void sub_213CD8800()
{
  __assert_rtn("CMSCBCParam_get", "crypto.c", 2254, "crypto->param == NULL");
}

void sub_213CD882C()
{
}

void sub_213CD8858()
{
  __assert_rtn("hc_EVP_DigestInit_ex", "evp.c", 252, "md != NULL");
}

void sub_213CD8884()
{
  __assert_rtn("hc_EVP_CipherInit_ex", "evp.c", 791, "EVP_CIPHER_CTX_iv_length(ctx) <= sizeof(ctx->iv)");
}

void sub_213CD88B0()
{
}

void sub_213CD88DC()
{
}

void sub_213CD8908()
{
  __assert_rtn("hc_EVP_BytesToKey", "evp.c", 1391, "mds == EVP_MD_size(md)");
}

void sub_213CD8934()
{
  __assert_rtn("hc_EVP_BytesToKey", "evp.c", 1385, "mds == EVP_MD_size(md)");
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x270ED78A0](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, dataIn, dataInLength);
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x270ED78C8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x270ED78D0](*(void *)&op, *(void *)&mode, *(void *)&alg, *(void *)&padding, iv, key, keyLength, tweak);
}

CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x270ED78E8](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x270ED7940](cryptorRef);
}

CCCryptorStatus CCCryptorReset(CCCryptorRef cryptorRef, const void *iv)
{
  return MEMORY[0x270ED7948](cryptorRef, iv);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x270ED7950](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCDesIsWeakKey()
{
  return MEMORY[0x270ED7960]();
}

uint64_t CCDesSetOddParity()
{
  return MEMORY[0x270ED7968]();
}

uint64_t CCDigest()
{
  return MEMORY[0x270ED7970]();
}

uint64_t CCDigestCreate()
{
  return MEMORY[0x270ED7978]();
}

uint64_t CCDigestDestroy()
{
  return MEMORY[0x270ED7980]();
}

uint64_t CCDigestFinal()
{
  return MEMORY[0x270ED7988]();
}

uint64_t CCDigestOutputSize()
{
  return MEMORY[0x270ED79A0]();
}

uint64_t CCDigestReset()
{
  return MEMORY[0x270ED79A8]();
}

uint64_t CCDigestUpdate()
{
  return MEMORY[0x270ED79B0]();
}

int CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return MEMORY[0x270ED7A38](*(void *)&algorithm, password, passwordLen, salt, saltLen, *(void *)&prf, *(void *)&rounds, derivedKey);
}

uint64_t CCRandomCopyBytes()
{
  return MEMORY[0x270ED7A78]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x270ED7A80](bytes, count);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x270EE42E8](theArray, range.location, range.length, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x270EE45B0](bundle);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x270EE45E8](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x270EE45F0](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x270EE4600]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x270EE47F0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x270EE4860](allocator, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x270EE48F0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4928](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x270EE4930](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x270EE49A0](err);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x270EE49B8](err);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x270EE49C8](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x270EE4CA0](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x270EE4CC0](key, applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D48](allocator, stream, streamLength, options, format, error);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x270EE4D90](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x270EE4DB8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x270EE5118](alloc, formatOptions, format, arguments);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x270EE5178](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x270EE51E0](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x270EE5338](url);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53C0](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53F0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x270EE5430](url, resolveAgainstBase, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x270EE5480](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x270EE54A0]();
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x270EE54A8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

DNSServiceErrorType DNSServiceCreateConnection(DNSServiceRef *sdRef)
{
  return MEMORY[0x270ED7BC0](sdRef);
}

uint64_t DNSServiceCreateDelegateConnection()
{
  return MEMORY[0x270ED7BC8]();
}

DNSServiceErrorType DNSServiceGetAddrInfo(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceProtocol protocol, const char *hostname, DNSServiceGetAddrInfoReply callBack, void *context)
{
  return MEMORY[0x270ED7BD0](sdRef, *(void *)&flags, *(void *)&interfaceIndex, *(void *)&protocol, hostname, callBack, context);
}

DNSServiceErrorType DNSServiceQueryRecord(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, DNSServiceQueryRecordReply callBack, void *context)
{
  return MEMORY[0x270ED7BE0](sdRef, *(void *)&flags, *(void *)&interfaceIndex, fullname, rrtype, rrclass, callBack, context);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return MEMORY[0x270ED7C18](service, queue);
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return MEMORY[0x270ED7C40]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x270EFD710](certificate);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x270EFD758](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x270EFD7E0](allocator, data);
}

CFTypeID SecCertificateGetTypeID(void)
{
  return MEMORY[0x270EFD828]();
}

uint64_t SecDHComputeKey()
{
  return MEMORY[0x270EFD908]();
}

uint64_t SecDHCreateFromParameters()
{
  return MEMORY[0x270EFD910]();
}

uint64_t SecDHDestroy()
{
  return MEMORY[0x270EFD918]();
}

uint64_t SecDHGenerateKeypair()
{
  return MEMORY[0x270EFD920]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x270EFD948](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x270EFD950](identityRef, privateKeyRef);
}

CFTypeID SecIdentityGetTypeID(void)
{
  return MEMORY[0x270EFD960]();
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x270EFD978](query, result);
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x270EFD998](key);
}

CFDataRef SecKeyCreateDecryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef ciphertext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFD9F8](key, algorithm, ciphertext, error);
}

uint64_t SecKeyCreateDuplicate()
{
  return MEMORY[0x270EFDA08]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFDA50](key, algorithm, dataToSign, error);
}

OSStatus SecKeyDecrypt(SecKeyRef key, SecPadding padding, const uint8_t *cipherText, size_t cipherTextLen, uint8_t *plainText, size_t *plainTextLen)
{
  return MEMORY[0x270EFDA68](key, *(void *)&padding, cipherText, cipherTextLen, plainText, plainTextLen);
}

OSStatus SecKeyEncrypt(SecKeyRef key, SecPadding padding, const uint8_t *plainText, size_t plainTextLen, uint8_t *cipherText, size_t *cipherTextLen)
{
  return MEMORY[0x270EFDA70](key, *(void *)&padding, plainText, plainTextLen, cipherText, cipherTextLen);
}

uint64_t SecKeySetParameter()
{
  return MEMORY[0x270EFDAC0]();
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x270EFDB48]();
}

OSStatus SecRequirementCreateWithString(CFStringRef text, SecCSFlags flags, SecRequirementRef *requirement)
{
  return MEMORY[0x270EFDC38](text, *(void *)&flags, requirement);
}

OSStatus SecStaticCodeCheckValidity(SecStaticCodeRef staticCode, SecCSFlags flags, SecRequirementRef requirement)
{
  return MEMORY[0x270EFDC78](staticCode, *(void *)&flags, requirement);
}

OSStatus SecStaticCodeCreateWithPath(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode)
{
  return MEMORY[0x270EFDC88](path, *(void *)&flags, staticCode);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x270EFDD40](certificates, policies, trust);
}

OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x270EFDD50](trust, result);
}

SecCertificateRef SecTrustGetCertificateAtIndex(SecTrustRef trust, CFIndex ix)
{
  return (SecCertificateRef)MEMORY[0x270EFDD70](trust, ix);
}

CFIndex SecTrustGetCertificateCount(SecTrustRef trust)
{
  return MEMORY[0x270EFDD78](trust);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x270EE56F0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x270EE5700]();
}

uint64_t _CFURLRequestSetAllowedProtocolTypes()
{
  return MEMORY[0x270EE2A98]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x270EE5798]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x270EE57A8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x270ED7DA8](*(void *)&a1, a2, *(void *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x270ED7ED8]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x270ED7EE0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

uint64_t _asn1_copy_top()
{
  return MEMORY[0x270F992B8]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x270ED8480](a1, *(void *)&a2);
}

uint32_t arc4random(void)
{
  return MEMORY[0x270ED85E0]();
}

void asl_close(asl_object_t obj)
{
}

void asl_free(asl_object_t obj)
{
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x270ED8648](client, msg, *(void *)&level, format);
}

asl_object_t asl_new(uint32_t type)
{
  return (asl_object_t)MEMORY[0x270ED8650](*(void *)&type);
}

asl_object_t asl_open(const char *ident, const char *facility, uint32_t opts)
{
  return (asl_object_t)MEMORY[0x270ED8658](ident, facility, *(void *)&opts);
}

int asl_set(asl_object_t obj, const char *key, const char *value)
{
  return MEMORY[0x270ED8670](obj, key, value);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x270ED8688](a1, a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

uint64_t bootstrap_look_up2()
{
  return MEMORY[0x270ED8778]();
}

void bzero(void *a1, size_t a2)
{
}

uint64_t ccDRBGGetRngState()
{
  return MEMORY[0x270ED87C8]();
}

uint64_t cccurve25519_make_key_pair()
{
  return MEMORY[0x270ED8870]();
}

uint64_t cccurve25519_with_rng()
{
  return MEMORY[0x270ED8880]();
}

uint64_t ccdh_ccn_size()
{
  return MEMORY[0x270ED89D8]();
}

uint64_t ccdh_gp_n()
{
  return MEMORY[0x270ED8A10]();
}

uint64_t ccdigest_init()
{
  return MEMORY[0x270ED8A48]();
}

uint64_t ccdigest_update()
{
  return MEMORY[0x270ED8A50]();
}

uint64_t ccec_compute_key()
{
  return MEMORY[0x270ED8A88]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x270ED8A98]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x270ED8AB8]();
}

uint64_t ccec_generate_key_fips()
{
  return MEMORY[0x270ED8AC8]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x270ED8AD8]();
}

uint64_t ccpbkdf2_hmac()
{
  return MEMORY[0x270ED8C88]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x270ED8D70]();
}

uint64_t ccsrp_client_process_challenge()
{
  return MEMORY[0x270ED8D98]();
}

uint64_t ccsrp_client_start_authentication()
{
  return MEMORY[0x270ED8DA8]();
}

uint64_t ccsrp_client_verify_session()
{
  return MEMORY[0x270ED8DB0]();
}

uint64_t ccsrp_ctx_init()
{
  return MEMORY[0x270ED8DB8]();
}

uint64_t ccsrp_generate_verifier()
{
  return MEMORY[0x270ED8DD8]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x270ED8E70]();
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

void closelog(void)
{
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x270ED8F58](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t csops()
{
  return MEMORY[0x270ED9150]();
}

char *__cdecl ctime(const time_t *a1)
{
  return (char *)MEMORY[0x270ED9168](a1);
}

uint64_t der_copy_bit_string()
{
  return MEMORY[0x270F992F8]();
}

uint64_t der_copy_heim_integer()
{
  return MEMORY[0x270F99300]();
}

uint64_t der_copy_octet_string()
{
  return MEMORY[0x270F99308]();
}

uint64_t der_copy_oid()
{
  return MEMORY[0x270F99310]();
}

uint64_t der_free_bit_string()
{
  return MEMORY[0x270F99318]();
}

uint64_t der_free_heim_integer()
{
  return MEMORY[0x270F99320]();
}

uint64_t der_free_octet_string()
{
  return MEMORY[0x270F99328]();
}

uint64_t der_free_oid()
{
  return MEMORY[0x270F99330]();
}

uint64_t der_heim_bit_string_cmp()
{
  return MEMORY[0x270F99360]();
}

uint64_t der_heim_integer_cmp()
{
  return MEMORY[0x270F99368]();
}

uint64_t der_heim_octet_string_cmp()
{
  return MEMORY[0x270F99370]();
}

uint64_t der_heim_oid_cmp()
{
  return MEMORY[0x270F99378]();
}

uint64_t der_ia5_string_cmp()
{
  return MEMORY[0x270F99380]();
}

uint64_t der_length_len()
{
  return MEMORY[0x270F99390]();
}

uint64_t der_parse_heim_oid()
{
  return MEMORY[0x270F993A0]();
}

uint64_t der_parse_hex_heim_integer()
{
  return MEMORY[0x270F993A8]();
}

uint64_t der_print_heim_oid()
{
  return MEMORY[0x270F993B0]();
}

uint64_t der_print_hex_heim_integer()
{
  return MEMORY[0x270F993B8]();
}

uint64_t der_printable_string_cmp()
{
  return MEMORY[0x270F993C0]();
}

uint64_t der_put_length_and_tag()
{
  return MEMORY[0x270F993D8]();
}

int dirfd(DIR *dirp)
{
  return MEMORY[0x270ED9188](dirp);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x270ED9320](key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x270ED9618](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

void dns_free(dns_handle_t dns)
{
}

dns_handle_t dns_open(const char *name)
{
  return (dns_handle_t)MEMORY[0x270F9B1D0](name);
}

int32_t dns_search(dns_handle_t dns, const char *name, uint32_t dnsclass, uint32_t dnstype, char *buf, uint32_t len, sockaddr *from, uint32_t *fromlen)
{
  return MEMORY[0x270F9B1D8](dns, name, *(void *)&dnsclass, *(void *)&dnstype, buf, *(void *)&len, from, fromlen);
}

void dns_set_debug(dns_handle_t dns, uint32_t flag)
{
}

int dup(int a1)
{
  return MEMORY[0x270ED9678](*(void *)&a1);
}

void errx(int a1, const char *a2, ...)
{
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x270ED98D0](*(void *)&a1, *(void *)&a2);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x270ED98E8](*(void *)&a1, a2);
}

int ferror(FILE *a1)
{
  return MEMORY[0x270ED9918](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int fgetc(FILE *a1)
{
  return MEMORY[0x270ED9950](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x270ED9968](a1, *(void *)&a2, a3);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

int fnmatch(const char *a1, const char *a2, int a3)
{
  return MEMORY[0x270ED99E8](a1, a2, *(void *)&a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x270ED9B10](*(void *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x270ED9B30](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

const char *__cdecl gai_strerror(int a1)
{
  return (const char *)MEMORY[0x270ED9B90](*(void *)&a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x270ED9B98](a1, a2, a3, a4);
}

int getaudit_addr(auditinfo_addr *a1, int a2)
{
  return MEMORY[0x270ED9BB8](a1, *(void *)&a2);
}

int getc(FILE *a1)
{
  return MEMORY[0x270ED9BC0](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x270ED9BF0]();
}

hostent *__cdecl gethostbyname(const char *a1)
{
  return (hostent *)MEMORY[0x270ED9C48](a1);
}

int gethostname(char *a1, size_t a2)
{
  return MEMORY[0x270ED9C58](a1, a2);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x270ED9C68](a1);
}

char *getlogin(void)
{
  return (char *)MEMORY[0x270ED9C88]();
}

int getnameinfo(const sockaddr *a1, socklen_t a2, char *a3, socklen_t a4, char *a5, socklen_t a6, int a7)
{
  return MEMORY[0x270ED9CA8](a1, *(void *)&a2, a3, *(void *)&a4, a5, *(void *)&a6, *(void *)&a7);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x270ED9CD0](*(void *)&a1, a2, a3);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x270ED9D00]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x270ED9D28](a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x270ED9D38](*(void *)&a1);
}

servent *__cdecl getservbyname(const char *a1, const char *a2)
{
  return (servent *)MEMORY[0x270ED9D70](a1, a2);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x270ED9D88](*(void *)&a1, a2, a3);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x270ED9DA0]();
}

tm *__cdecl gmtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270ED9DD8](a1);
}

uint64_t heim_any_cmp()
{
  return MEMORY[0x270F993E8]();
}

int inet_aton(const char *a1, in_addr *a2)
{
  return MEMORY[0x270ED9EA8](a1, a2);
}

char *__cdecl inet_ntoa(in_addr a1)
{
  return (char *)MEMORY[0x270ED9EB8](*(void *)&a1.s_addr);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x270ED9EC0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x270ED9EC8](*(void *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x270ED9ED8](*(void *)&a1, a2);
}

int issetugid(void)
{
  return MEMORY[0x270ED9F18]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x270EDA190](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x270EDA1B0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x270EDA1C8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x270EDA210](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

int mbr_identifier_to_uuid(int id_type, const void *identifier, size_t identifier_size, uuid_t uu)
{
  return MEMORY[0x270EDA400](*(void *)&id_type, identifier, identifier_size, uu);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

void mig_deallocate(vm_address_t a1, vm_size_t a2)
{
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x270EDA4E8]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int mkstemp(char *a1)
{
  return MEMORY[0x270EDA560](a1);
}

uint64_t ne_session_service_get_dns_service_id()
{
  return MEMORY[0x270EDA658]();
}

uint64_t ne_session_set_socket_attributes()
{
  return MEMORY[0x270EDA668]();
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x270EDA740](*(void *)&token, check);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x270EDA768](name, out_token);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x270EF7EB0](hostname, port);
}

uint32_t nw_interface_get_index(nw_interface_t interface)
{
  return MEMORY[0x270EF8368](interface);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x270EF8518]();
}

uint64_t nw_parameters_set_e_proc_uuid()
{
  return MEMORY[0x270EF8630]();
}

uint64_t nw_parameters_set_pid()
{
  return MEMORY[0x270EF86D8]();
}

uint64_t nw_path_copy_scoped_interface()
{
  return MEMORY[0x270EF87D0]();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x270EF87E8]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x270EF8810]();
}

uint64_t nw_path_get_vpn_config_id()
{
  return MEMORY[0x270EF8948]();
}

uint64_t nw_path_is_flow_divert()
{
  return MEMORY[0x270EF89C0]();
}

uint64_t nw_path_is_per_app_vpn()
{
  return MEMORY[0x270EF89D0]();
}

void nw_release(void *obj)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

void openlog(const char *a1, int a2, int a3)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_release(void *object)
{
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_is_threaded_np(void)
{
  return MEMORY[0x270EDAF08]();
}

int pthread_main_np(void)
{
  return MEMORY[0x270EDAF40]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB190](*(void *)&a1, a2, a3, *(void *)&a4);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int res_9_dn_expand(const u_char *a1, const u_char *a2, const u_char *a3, char *a4, int a5)
{
  return MEMORY[0x270F9B1E8](a1, a2, a3, a4, *(void *)&a5);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x270EDB328](*(void *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB3B0](*(void *)&a1, a2, a3, *(void *)&a4);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x270EDB440](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x270EDB4B8](*(void *)&a1, a2, a3);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x270EDB520](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int socketpair(int a1, int a2, int a3, int *a4)
{
  return MEMORY[0x270EDB528](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x270EDB590](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x270EDB5C8](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x270EDB5E8](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x270EDB5F0](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x270EDB620](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x270EDB688](__stringp, __delim);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x270EDB6D0](__str, __sep, __lasts);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

int strvisx(char *a1, const char *a2, size_t a3, int a4)
{
  return MEMORY[0x270EDB740](a1, a2, a3, *(void *)&a4);
}

void syslog(int a1, const char *a2, ...)
{
}

int tcgetattr(int a1, termios *a2)
{
  return MEMORY[0x270EDB8C8](*(void *)&a1, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  return MEMORY[0x270EDB8D0](*(void *)&a1, *(void *)&a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x270EDBA08](uu1, uu2);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x270EDBA30](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA58](a1, a2, a3);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA70](a1, a2, a3);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x270EDBA90](*(void *)&target_task, address, size);
}

kern_return_t vm_read(vm_map_read_t target_task, vm_address_t address, vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt)
{
  return MEMORY[0x270EDBAB0](*(void *)&target_task, address, size, data, dataCnt);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x270EDBAF0](msg);
}

uint64_t vproc_swap_integer()
{
  return MEMORY[0x270EDBB08]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

void warnx(const char *a1, ...)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x270EDBD10](xarray, applier);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x270EDBD38](xarray);
}

const uint8_t *__cdecl xpc_array_get_uuid(xpc_object_t xarray, size_t index)
{
  return (const uint8_t *)MEMORY[0x270EDBD80](xarray, index);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x270EDBDE0](xBOOL);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x270EDBE58](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x270EDBED0](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return (const uint8_t *)MEMORY[0x270EDC0B8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x270EDC0C0](xdict, key);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x270EDC200](object);
}

void xpc_release(xpc_object_t object)
{
}