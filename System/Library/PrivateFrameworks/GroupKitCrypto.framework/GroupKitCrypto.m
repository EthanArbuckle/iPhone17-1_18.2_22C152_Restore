void GroupKitCryptoError.error.getter(unsigned char *a1@<X8>)
{
  unsigned char *v1;

  *a1 = *v1;
}

uint64_t GroupKitCryptoError.subError.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 60);
  uint64_t v5 = sub_2505BE410();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t GroupKitCryptoError.subError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 60);
  uint64_t v5 = sub_2505BE410();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*GroupKitCryptoError.subError.modify())()
{
  return nullsub_1;
}

BOOL sub_2504D4684(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_2504D4694()
{
  return sub_2505BE860();
}

uint64_t sub_2504D46BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F4E656E696CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_2505BE780() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000 || (sub_2505BE780() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701603686 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_2505BE780();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_2504D47FC()
{
  return sub_2505BE880();
}

uint64_t sub_2504D4844(char a1)
{
  if (!a1) {
    return 0x6F4E656E696CLL;
  }
  if (a1 == 1) {
    return 0x6E6F6974636E7566;
  }
  return 1701603686;
}

BOOL sub_2504D4890(char *a1, char *a2)
{
  return sub_2504D4684(*a1, *a2);
}

uint64_t sub_2504D48AC()
{
  return sub_2504D47FC();
}

uint64_t sub_2504D48C0()
{
  return sub_2504D4694();
}

uint64_t sub_2504D48D4()
{
  return sub_2505BE880();
}

uint64_t sub_2504D4924()
{
  return sub_2504D4844(*v0);
}

uint64_t sub_2504D4938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_2504D5358(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_2504D46BC, a4);
}

uint64_t sub_2504D4950()
{
  return 0;
}

uint64_t sub_2504D495C@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_2504D53B0(a1, (uint64_t (*)(void, void, void, void, void))sub_2504D8B24, a2);
}

uint64_t sub_2504D4974(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_2504D49C8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t sub_2504D4A1C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 32);
  v15[0] = *(_OWORD *)(a2 + 16);
  v15[1] = v4;
  uint64_t v16 = v3;
  type metadata accessor for GroupKitCryptoError.ErrorLocation.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = sub_2505BE740();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9, v10);
  v12 = (char *)v15 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2505BE8A0();
  LOBYTE(v15[0]) = 0;
  uint64_t v13 = v17;
  sub_2505BE720();
  if (!v13)
  {
    LOBYTE(v15[0]) = 1;
    sub_2505BE710();
    LOBYTE(v15[0]) = 2;
    sub_2505BE710();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v5);
}

uint64_t sub_2504D4BE8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  v34 = a7;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  type metadata accessor for GroupKitCryptoError.ErrorLocation.CodingKeys();
  swift_getWitnessTable();
  uint64_t v9 = sub_2505BE6E0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388]();
  v12 = (char *)&v26 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2505BE890();
  if (v7) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = v10;
  v14 = v34;
  LOBYTE(v29) = 0;
  uint64_t v15 = sub_2505BE6B0();
  LOBYTE(v29) = 1;
  uint64_t v16 = sub_2505BE6A0();
  uint64_t v18 = v17;
  uint64_t v28 = v16;
  LOBYTE(v29) = 2;
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_2505BE6A0();
  uint64_t v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v27 = v19;
  v22(v12, v9);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v24 = v28;
  uint64_t *v14 = v15;
  v14[1] = v24;
  uint64_t v25 = v27;
  v14[2] = v18;
  v14[3] = v25;
  v14[4] = v21;
  return result;
}

double sub_2504D4E64@<D0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_2504D4BE8(a1, a2[2], a2[3], a2[4], a2[5], a2[6], (uint64_t *)v7);
  if (!v3)
  {
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a3 = v7[0];
    *(_OWORD *)(a3 + 16) = v6;
    *(void *)(a3 + 32) = v8;
  }
  return result;
}

uint64_t sub_2504D4EBC(void *a1, uint64_t a2)
{
  return sub_2504D4A1C(a1, a2);
}

uint64_t sub_2504D4ED4()
{
  uint64_t v0 = sub_2505BE660();
  swift_bridgeObjectRelease();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_2504D4F28(char a1)
{
  if (a1) {
    return 0x726F727245627573;
  }
  else {
    return 0x726F727265;
  }
}

uint64_t sub_2504D4F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D338];
  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2504D4FD0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 1701080931;
  }
  else {
    uint64_t v3 = 0x6E69616D6F64;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE400000000000000;
  }
  if (a2) {
    uint64_t v5 = 1701080931;
  }
  else {
    uint64_t v5 = 0x6E69616D6F64;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2505BE780();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_2504D506C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6C616E7265746E69;
    }
    else {
      uint64_t v3 = 0x424470756F7247;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xE700000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6C616E7265746E69;
      }
      else {
        uint64_t v6 = 0x424470756F7247;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE700000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x6C616E7265747865;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x6C616E7265747865)
  {
LABEL_21:
    char v8 = sub_2505BE780();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2504D5160(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t sub_2504D51CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2504D523C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2504D52AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2504D4ED4();
  *a1 = result;
  return result;
}

uint64_t sub_2504D52EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2504D4F28(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_2504D5328()
{
  return sub_2504D4F28(*v0);
}

uint64_t sub_2504D5340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned char *a4@<X8>)
{
  return sub_2504D5358(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_2504D4ED4, a4);
}

uint64_t sub_2504D5358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, void, void, void, void, void)@<X4>, unsigned char *a5@<X8>)
{
  uint64_t result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
  *a5 = result;
  return result;
}

uint64_t sub_2504D5398@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  return sub_2504D53B0(a1, (uint64_t (*)(void, void, void, void, void))sub_2504D8B2C, a2);
}

uint64_t sub_2504D53B0@<X0>(void *a1@<X1>, uint64_t (*a2)(void, void, void, void, void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(a1[2], a1[3], a1[4], a1[5], a1[6]);
  *a3 = result;
  return result;
}

uint64_t sub_2504D53F0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t sub_2504D5444(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t static GroupKitCryptoError.== infix<A>(_:_:)(char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v92 = a2;
  uint64_t v14 = sub_2505BE410();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v14, v16, v17, v18, v19);
  v85 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v20, v22, v23, v24, v25);
  uint64_t v28 = (char *)&v80 - v27;
  uint64_t v29 = *(void *)(a4 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v26, v30, v31, v32, v33);
  v83 = (char *)&v80 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x270FA5388](v34, v36, v37, v38, v39);
  v82 = (char *)&v80 - v41;
  uint64_t v46 = MEMORY[0x270FA5388](v40, v42, v43, v44, v45);
  v86 = (char *)&v80 - v47;
  MEMORY[0x270FA5388](v46, v48, v49, v50, v51);
  v84 = (char *)&v80 - v52;
  uint64_t v94 = a4;
  uint64_t v95 = a9;
  uint64_t v87 = a9;
  uint64_t v88 = a10;
  uint64_t v96 = a10;
  uint64_t v97 = a11;
  uint64_t v89 = a12;
  uint64_t v90 = a11;
  uint64_t v98 = a12;
  uint64_t v53 = type metadata accessor for GroupKitCryptoError();
  v54 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v55 = v14;
  v54(v28, &a1[*(int *)(v53 + 60)], v14);
  uint64_t v91 = v29;
  v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v56(v28, 1, a4) != 1)
  {
    uint64_t v80 = v15;
    v81 = a1;
    v62 = v84;
    v63 = v28;
    v64 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
    v64(v84, v63, a4);
    v65 = &v92[*(int *)(v53 + 60)];
    v66 = v85;
    v54(v85, v65, v55);
    if (v56(v66, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v91 + 8))(v62, a4);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v66, v55);
      char v61 = 0;
      return v61 & 1;
    }
    uint64_t v67 = v91;
    v64(v86, v66, a4);
    char v93 = *v81;
    uint64_t v94 = a4;
    uint64_t v95 = v87;
    uint64_t v96 = v88;
    uint64_t v97 = v90;
    uint64_t v98 = v89;
    type metadata accessor for GroupKitCryptoError.ErrorDescription();
    unint64_t v68 = GroupKitCryptoError.ErrorDescription.rawValue.getter();
    uint64_t v70 = v69;
    LOBYTE(v94) = *v92;
    if (v68 == GroupKitCryptoError.ErrorDescription.rawValue.getter() && v70 == v71)
    {
      swift_bridgeObjectRelease_n();
      v72 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
      v73 = v82;
      v72(v82, v86, a4);
      v74 = v83;
      v75 = v62;
      v72(v83, v62, a4);
    }
    else
    {
      char v76 = sub_2505BE780();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v77 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
      v73 = v82;
      v77(v82, v86, a4);
      v74 = v83;
      v75 = v62;
      v77(v83, v62, a4);
      char v61 = 0;
      if ((v76 & 1) == 0)
      {
LABEL_13:
        v78 = *(void (**)(char *, uint64_t))(v67 + 8);
        v78(v74, a4);
        v78(v73, a4);
        v78(v86, a4);
        v78(v75, a4);
        return v61 & 1;
      }
    }
    char v61 = sub_2505BE120();
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v55);
  char v93 = *a1;
  uint64_t v94 = a4;
  uint64_t v95 = v87;
  uint64_t v96 = v88;
  uint64_t v97 = v90;
  uint64_t v98 = v89;
  type metadata accessor for GroupKitCryptoError.ErrorDescription();
  unint64_t v57 = GroupKitCryptoError.ErrorDescription.rawValue.getter();
  uint64_t v59 = v58;
  LOBYTE(v94) = *v92;
  if (v57 == GroupKitCryptoError.ErrorDescription.rawValue.getter() && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
    char v61 = 1;
  }
  else
  {
    char v61 = sub_2505BE780();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v61 & 1;
}

unint64_t GroupKitCryptoError.ErrorDescription.rawValue.getter()
{
  unint64_t result = 0x4164696C61766E69;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
    case 0x15:
    case 0x1A:
    case 0x1F:
    case 0x2B:
    case 0x33:
    case 0x72:
    case 0x7A:
    case 0x85:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
      unint64_t result = 0xD000000000000024;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0xD000000000000018;
      break;
    case 8:
      unint64_t result = 0xD000000000000019;
      break;
    case 9:
      unint64_t result = 0xD000000000000040;
      break;
    case 0xA:
      unint64_t result = 0xD000000000000046;
      break;
    case 0xB:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0xC:
      unint64_t result = 0xD00000000000003DLL;
      break;
    case 0xD:
      unint64_t result = 0xD000000000000016;
      break;
    case 0xE:
      unint64_t result = 0xD000000000000014;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x10:
      unint64_t result = 0xD00000000000003CLL;
      break;
    case 0x11:
      unint64_t result = 0xD00000000000003BLL;
      break;
    case 0x12:
      unint64_t result = 0xD000000000000046;
      break;
    case 0x13:
      unint64_t result = 0xD000000000000023;
      break;
    case 0x14:
      unint64_t result = 0xD00000000000003FLL;
      break;
    case 0x16:
      unint64_t result = 0xD000000000000023;
      break;
    case 0x17:
      unint64_t result = 0xD000000000000023;
      break;
    case 0x18:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0x19:
      unint64_t result = 0xD000000000000014;
      break;
    case 0x1B:
      unint64_t result = 0xD000000000000023;
      break;
    case 0x1C:
      unint64_t result = 0xD000000000000022;
      break;
    case 0x1D:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 0x1E:
      unint64_t result = 0xD000000000000025;
      break;
    case 0x20:
      unint64_t result = 0xD000000000000026;
      break;
    case 0x21:
      unint64_t result = 0xD000000000000036;
      break;
    case 0x22:
      unint64_t result = 0xD000000000000035;
      break;
    case 0x23:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 0x24:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x25:
      unint64_t result = 0xD000000000000023;
      break;
    case 0x26:
      unint64_t result = 0xD000000000000034;
      break;
    case 0x27:
      unint64_t result = 0xD000000000000028;
      break;
    case 0x28:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x29:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x2A:
      unint64_t result = 0xD000000000000018;
      break;
    case 0x2C:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0x2D:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x2E:
      unint64_t result = 0xD000000000000021;
      break;
    case 0x2F:
      unint64_t result = 0xD000000000000022;
      break;
    case 0x30:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 0x31:
      unint64_t result = 0xD000000000000012;
      break;
    case 0x32:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x34:
      unint64_t result = 0x536E696D64416F6ELL;
      break;
    case 0x35:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x36:
      unint64_t result = 0xD000000000000011;
      break;
    case 0x37:
      unint64_t result = 0x4B64696C61766E69;
      break;
    case 0x38:
      unint64_t result = 0xD000000000000034;
      break;
    case 0x39:
      unint64_t result = 0xD000000000000027;
      break;
    case 0x3A:
      unint64_t result = 0xD000000000000026;
      break;
    case 0x3B:
      unint64_t result = 0xD000000000000028;
      break;
    case 0x3C:
      unint64_t result = 0xD000000000000029;
      break;
    case 0x3D:
      unint64_t result = 0xD000000000000039;
      break;
    case 0x3E:
      unint64_t result = 0xD000000000000033;
      break;
    case 0x3F:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 0x40:
      unint64_t result = 0xD000000000000028;
      break;
    case 0x41:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 0x42:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0x43:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 0x44:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 0x45:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x46:
      unint64_t result = 0xD000000000000026;
      break;
    case 0x47:
      unint64_t result = 0xD000000000000032;
      break;
    case 0x48:
      unint64_t result = 0xD000000000000032;
      break;
    case 0x49:
      unint64_t result = 0xD000000000000020;
      break;
    case 0x4A:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 0x4B:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x4C:
      unint64_t result = 0xD000000000000029;
      break;
    case 0x4D:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 0x4E:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x4F:
      unint64_t result = 0xD000000000000022;
      break;
    case 0x50:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0x51:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 0x52:
      unint64_t result = 0xD000000000000017;
      break;
    case 0x53:
      unint64_t result = 0xD000000000000011;
      break;
    case 0x54:
      unint64_t result = 0xD000000000000035;
      break;
    case 0x55:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 0x56:
      unint64_t result = 0xD00000000000003DLL;
      break;
    case 0x57:
      unint64_t result = 0xD000000000000030;
      break;
    case 0x58:
      unint64_t result = 0xD000000000000027;
      break;
    case 0x59:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x5A:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x5B:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0x5C:
      unint64_t result = 0xD000000000000022;
      break;
    case 0x5D:
      unint64_t result = 0xD00000000000003ELL;
      break;
    case 0x5E:
      unint64_t result = 0xD000000000000036;
      break;
    case 0x5F:
      unint64_t result = 0xD000000000000030;
      break;
    case 0x60:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 0x61:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0x62:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 0x63:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 0x64:
      unint64_t result = 0xD000000000000018;
      break;
    case 0x65:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 0x66:
      unint64_t result = 0xD000000000000020;
      break;
    case 0x67:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0x68:
      unint64_t result = 0xD000000000000024;
      break;
    case 0x69:
      unint64_t result = 0xD000000000000037;
      break;
    case 0x6A:
      unint64_t result = 0xD000000000000027;
      break;
    case 0x6B:
      unint64_t result = 0xD000000000000029;
      break;
    case 0x6C:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 0x6D:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 0x6E:
      unint64_t result = 0xD000000000000021;
      break;
    case 0x6F:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 0x70:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x71:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 0x73:
      unint64_t result = 0xD000000000000012;
      break;
    case 0x74:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x75:
      unint64_t result = 0xD000000000000027;
      break;
    case 0x76:
      unint64_t result = 0xD000000000000022;
      break;
    case 0x77:
      unint64_t result = 0xD000000000000039;
      break;
    case 0x78:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x79:
      unint64_t result = 0xD000000000000010;
      break;
    case 0x7B:
      unint64_t result = 0xD000000000000020;
      break;
    case 0x7C:
      unint64_t result = 0xD00000000000002FLL;
      break;
    case 0x7D:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x7E:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x7F:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 0x80:
      unint64_t result = 0xD000000000000031;
      break;
    case 0x81:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x82:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0x83:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x84:
      unint64_t result = 0xD000000000000018;
      break;
    case 0x86:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x87:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x88:
      unint64_t result = 0x53676E697373696DLL;
      break;
    case 0x89:
      unint64_t result = 0xD000000000000018;
      break;
    case 0x8A:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x8B:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 0x8C:
      unint64_t result = 0xD000000000000028;
      break;
    case 0x8D:
      unint64_t result = 0xD000000000000029;
      break;
    case 0x8E:
      unint64_t result = 0xD00000000000002CLL;
      break;
    case 0x8F:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x90:
      unint64_t result = 0xD000000000000026;
      break;
    case 0x91:
      unint64_t result = 0xD000000000000027;
      break;
    case 0x92:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 0x93:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 0x94:
      unint64_t result = 0xD000000000000022;
      break;
    case 0x95:
      unint64_t result = 0xD000000000000019;
      break;
    case 0x96:
      unint64_t result = 0xD000000000000024;
      break;
    case 0x97:
      unint64_t result = 0xD000000000000027;
      break;
    case 0x98:
      unint64_t result = 0xD000000000000030;
      break;
    case 0x99:
      unint64_t result = 0xD00000000000002DLL;
      break;
    case 0x9A:
      unint64_t result = 0xD000000000000037;
      break;
    case 0x9B:
      unint64_t result = 0xD000000000000034;
      break;
    case 0x9C:
      unint64_t result = 0xD000000000000042;
      break;
    case 0x9D:
      unint64_t result = 0xD00000000000003FLL;
      break;
    case 0x9E:
      unint64_t result = 0xD000000000000020;
      break;
    case 0x9F:
      unint64_t result = 0x45676E69646C6F68;
      break;
    case 0xA0:
      unint64_t result = 0xD000000000000039;
      break;
    case 0xA1:
      unint64_t result = 0xD000000000000040;
      break;
    case 0xA2:
      unint64_t result = 0xD000000000000031;
      break;
    case 0xA3:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 0xA4:
      unint64_t result = 0xD000000000000013;
      break;
    case 0xA5:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 0xA6:
      unint64_t result = 0xD00000000000003CLL;
      break;
    case 0xA7:
      unint64_t result = 0xD00000000000003BLL;
      break;
    case 0xA8:
      unint64_t result = 0xD000000000000034;
      break;
    case 0xA9:
      unint64_t result = 0xD00000000000003ELL;
      break;
    case 0xAA:
      unint64_t result = 0xD000000000000037;
      break;
    case 0xAB:
      unint64_t result = 0xD000000000000021;
      break;
    case 0xAC:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for GroupKitCryptoError()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for GroupKitCryptoError.ErrorDescription()
{
  return swift_getGenericMetadata();
}

unint64_t GroupKitCryptoError.localizedDescription.getter(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = sub_2505BE410();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  v12 = (char *)&v23 - v11;
  uint64_t v13 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v10, v14, v15, v16, v17);
  uint64_t v23 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v24) = *v1;
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 48);
  unint64_t v26 = v3;
  long long v27 = *(_OWORD *)(a1 + 24);
  uint64_t v28 = v19;
  uint64_t v29 = v20;
  type metadata accessor for GroupKitCryptoError.ErrorDescription();
  GroupKitCryptoError.ErrorDescription.rawValue.getter();
  unint64_t v26 = 0xD000000000000014;
  *(void *)&long long v27 = 0x80000002505C8AF0;
  sub_2505BE190();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, unsigned char *, uint64_t))(v5 + 16))(v12, &v1[*(int *)(a1 + 60)], v4);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v13 + 48))(v12, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  else
  {
    uint64_t v21 = v23;
    (*(void (**)(char *, char *, unint64_t))(v13 + 32))(v23, v12, v3);
    sub_2505BE7F0();
    unint64_t v24 = 0xD000000000000013;
    unint64_t v25 = 0x80000002505C8B10;
    sub_2505BE190();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_2505BE190();
    swift_bridgeObjectRelease();
    sub_2505BE190();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, unint64_t))(v13 + 8))(v21, v3);
  }
  return v26;
}

uint64_t GroupKitCryptoError.ErrorDescription.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_2505BE7A0();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v4 = v2 - 128;
  if (v2 >= 0x80)
  {
    char v5 = -101;
    LOBYTE(v2) = 0x80;
    switch(v4)
    {
      case 0uLL:
        goto LABEL_2;
      case 1uLL:
        LOBYTE(v2) = -127;
        goto LABEL_2;
      case 2uLL:
        LOBYTE(v2) = -126;
        goto LABEL_2;
      case 3uLL:
        LOBYTE(v2) = -125;
        goto LABEL_2;
      case 4uLL:
        LOBYTE(v2) = -124;
        goto LABEL_2;
      case 5uLL:
        LOBYTE(v2) = -123;
        goto LABEL_2;
      case 6uLL:
        LOBYTE(v2) = -122;
        goto LABEL_2;
      case 7uLL:
        LOBYTE(v2) = -121;
        goto LABEL_2;
      case 8uLL:
        LOBYTE(v2) = -120;
        goto LABEL_2;
      case 9uLL:
        LOBYTE(v2) = -119;
        goto LABEL_2;
      case 0xAuLL:
        LOBYTE(v2) = -118;
        goto LABEL_2;
      case 0xBuLL:
        LOBYTE(v2) = -117;
        goto LABEL_2;
      case 0xCuLL:
        LOBYTE(v2) = -116;
        goto LABEL_2;
      case 0xDuLL:
        LOBYTE(v2) = -115;
        goto LABEL_2;
      case 0xEuLL:
        LOBYTE(v2) = -114;
        goto LABEL_2;
      case 0xFuLL:
        LOBYTE(v2) = -113;
        goto LABEL_2;
      case 0x10uLL:
        LOBYTE(v2) = -112;
        goto LABEL_2;
      case 0x11uLL:
        LOBYTE(v2) = -111;
        goto LABEL_2;
      case 0x12uLL:
        LOBYTE(v2) = -110;
        goto LABEL_2;
      case 0x13uLL:
        LOBYTE(v2) = -109;
        goto LABEL_2;
      case 0x14uLL:
        LOBYTE(v2) = -108;
        goto LABEL_2;
      case 0x15uLL:
        LOBYTE(v2) = -107;
        goto LABEL_2;
      case 0x16uLL:
        LOBYTE(v2) = -106;
        goto LABEL_2;
      case 0x17uLL:
        LOBYTE(v2) = -105;
        goto LABEL_2;
      case 0x18uLL:
        LOBYTE(v2) = -104;
        goto LABEL_2;
      case 0x19uLL:
        LOBYTE(v2) = -103;
        goto LABEL_2;
      case 0x1AuLL:
        LOBYTE(v2) = -102;
        goto LABEL_2;
      case 0x1BuLL:
        break;
      case 0x1CuLL:
        char v5 = -100;
        break;
      case 0x1DuLL:
        char v5 = -99;
        break;
      case 0x1EuLL:
        char v5 = -98;
        break;
      case 0x1FuLL:
        char v5 = -97;
        break;
      case 0x20uLL:
        char v5 = -96;
        break;
      case 0x21uLL:
        char v5 = -95;
        break;
      case 0x22uLL:
        char v5 = -94;
        break;
      case 0x23uLL:
        char v5 = -93;
        break;
      case 0x24uLL:
        char v5 = -92;
        break;
      case 0x25uLL:
        char v5 = -91;
        break;
      case 0x26uLL:
        char v5 = -90;
        break;
      case 0x27uLL:
        char v5 = -89;
        break;
      case 0x28uLL:
        char v5 = -88;
        break;
      case 0x29uLL:
        char v5 = -87;
        break;
      case 0x2AuLL:
        char v5 = -86;
        break;
      case 0x2BuLL:
        char v5 = -85;
        break;
      case 0x2CuLL:
        char v5 = -84;
        break;
      default:
        char v5 = -83;
        break;
    }
  }
  else
  {
LABEL_2:
    char v5 = v2;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_2504D72B8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t sub_2504D7324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2504D7394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_2504D7404@<X0>(char *a1@<X8>)
{
  return GroupKitCryptoError.ErrorDescription.init(rawValue:)(a1);
}

unint64_t sub_2504D7410@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = GroupKitCryptoError.ErrorDescription.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2504D7438()
{
  return sub_2505BE290();
}

uint64_t sub_2504D74AC()
{
  return sub_2505BE250();
}

uint64_t sub_2504D7510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D338];
  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t GroupKitCryptoError.encode(to:)(void *a1, void *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v3 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v22 = a2[5];
  uint64_t v23 = v3;
  uint64_t v6 = a2[6];
  uint64_t v20 = v4;
  uint64_t v21 = v6;
  uint64_t v28 = v3;
  uint64_t v29 = v5;
  uint64_t v30 = v22;
  uint64_t v31 = v6;
  type metadata accessor for GroupKitCryptoError.CodingKeys();
  swift_getWitnessTable();
  uint64_t v7 = sub_2505BE740();
  uint64_t v25 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v20 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v14 = v7;
  uint64_t v15 = v20;
  uint64_t v16 = v24;
  sub_2505BE8A0();
  char v33 = *v16;
  char v32 = 0;
  uint64_t v27 = v15;
  uint64_t v28 = v23;
  uint64_t v29 = v5;
  uint64_t v30 = v22;
  uint64_t v31 = v21;
  type metadata accessor for GroupKitCryptoError.ErrorDescription();
  swift_getWitnessTable();
  uint64_t v17 = v26;
  sub_2505BE730();
  if (v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v13, v14);
  }
  uint64_t v19 = v25;
  LOBYTE(v27) = 1;
  sub_2505BE700();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v14);
}

uint64_t type metadata accessor for GroupKitCryptoError.CodingKeys()
{
  return swift_getGenericMetadata();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t GroupKitCryptoError.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v48 = a7;
  uint64_t v13 = sub_2505BE410();
  uint64_t v57 = *(void *)(v13 - 8);
  uint64_t v58 = v13;
  MEMORY[0x270FA5388](v13, v14, v15, v16, v17);
  uint64_t v50 = (char *)&v46 - v18;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  type metadata accessor for GroupKitCryptoError.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v55 = sub_2505BE6E0();
  uint64_t v49 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55, v19, v20, v21, v22);
  unint64_t v24 = (char *)&v46 - v23;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v53 = a6;
  uint64_t v54 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v64 = a4;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  uint64_t v25 = type metadata accessor for GroupKitCryptoError();
  uint64_t v47 = *(void *)(v25 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v25, v26, v27, v28, v29);
  char v32 = (char *)&v46 - v31;
  char v33 = (char *)&v46 + *(int *)(v30 + 60) - v31;
  uint64_t v34 = *(void (**)(void))(*(void *)(a2 - 8) + 56);
  v56 = v33;
  v34();
  uint64_t v35 = (uint64_t *)&v32[*(int *)(v25 + 64)];
  v35[4] = 0;
  *(_OWORD *)uint64_t v35 = 0u;
  *((_OWORD *)v35 + 1) = 0u;
  uint64_t v36 = a1[3];
  uint64_t v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v36);
  uint64_t v37 = v61;
  sub_2505BE890();
  if (v37)
  {
    uint64_t v40 = v58;
    uint64_t v42 = v56;
    uint64_t v41 = v57;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
    return sub_2504D7CA8(*v35, v35[1], v35[2]);
  }
  else
  {
    uint64_t v61 = v25;
    uint64_t v62 = a2;
    uint64_t v39 = v49;
    uint64_t v38 = v50;
    uint64_t v63 = v54;
    uint64_t v64 = v51;
    uint64_t v65 = v52;
    uint64_t v66 = v53;
    type metadata accessor for GroupKitCryptoError.ErrorDescription();
    LOBYTE(v62) = 0;
    swift_getWitnessTable();
    sub_2505BE6C0();
    *char v32 = v67;
    LOBYTE(v62) = 1;
    sub_2505BE690();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v55);
    (*(void (**)(char *, char *, uint64_t))(v57 + 40))(v56, v38, v58);
    uint64_t v43 = v47;
    uint64_t v44 = v61;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v47 + 16))(v48, v32, v61);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v43 + 8))(v32, v44);
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_2504D7CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2504D7CEC(char *a1, unsigned char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static GroupKitCryptoError.== infix<A>(_:_:)(a1, a2, (uint64_t)a3, a3[2], a5, a6, a7, a8, a3[3], a3[4], a3[5], a3[6]) & 1;
}

uint64_t sub_2504D7D34@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return GroupKitCryptoError.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a3);
}

uint64_t sub_2504D7D5C(void *a1, void *a2)
{
  return GroupKitCryptoError.encode(to:)(a1, a2);
}

uint64_t static NoGKCSubError.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_2504D7D7C()
{
  return 0;
}

uint64_t sub_2504D7D88@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_2504D7DB8(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2504D7DC4(uint64_t a1)
{
  unint64_t v2 = sub_2504D7F90();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504D7E00(uint64_t a1)
{
  unint64_t v2 = sub_2504D7F90();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t NoGKCSubError.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB56D0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2504D7F90();
  sub_2505BE8A0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_2504D7F90()
{
  unint64_t result = qword_269AB56D8;
  if (!qword_269AB56D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB56D8);
  }
  return result;
}

uint64_t NoGKCSubError.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2504D800C(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2504D8034(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB56D0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2504D7F90();
  sub_2505BE8A0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t sub_2504D8144()
{
  return 1;
}

id PCSError.rawError.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t PCSError.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CFError(0);
  sub_2504DA850(&qword_269AB56E0, type metadata accessor for CFError);
  uint64_t result = swift_allocError();
  *uint64_t v5 = a1;
  *a2 = result;
  return result;
}

void type metadata accessor for CFError(uint64_t a1)
{
}

uint64_t PCSError.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_2504D821C(char *a1, char *a2)
{
  return sub_2504D4FD0(*a1, *a2);
}

uint64_t sub_2504D8228()
{
  return sub_2505BE880();
}

uint64_t sub_2504D82A0()
{
  sub_2505BE180();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2504D8304()
{
  return sub_2505BE880();
}

uint64_t sub_2504D8378@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2505BE660();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_2504D83D8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701080931;
  if (!*v1) {
    uint64_t v2 = 0x6E69616D6F64;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2504D840C()
{
  if (*v0) {
    return 1701080931;
  }
  else {
    return 0x6E69616D6F64;
  }
}

uint64_t sub_2504D843C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2505BE660();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_2504D84A0(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2504D84AC(uint64_t a1)
{
  unint64_t v2 = sub_2504D8738();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504D84E8(uint64_t a1)
{
  unint64_t v2 = sub_2504D8738();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PCSError.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB56E8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2504D8738();
  sub_2505BE890();
  if (!v2)
  {
    char v20 = 0;
    sub_2505BE6A0();
    char v19 = 1;
    uint64_t v13 = sub_2505BE6B0();
    id v18 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v14 = (void *)sub_2505BE130();
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v14, v13, 0);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    *a2 = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_2504D8738()
{
  unint64_t result = qword_269AB56F0;
  if (!qword_269AB56F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB56F0);
  }
  return result;
}

void PCSError.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(qword_269AB56F8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)sub_2505BD830();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2504D8738();
  sub_2505BE8A0();
  objc_msgSend(v11, sel_code);
  char v15 = 1;
  sub_2505BE720();
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  }
  else
  {
    id v12 = objc_msgSend(v11, sel_domain);
    sub_2505BE140();

    char v14 = 0;
    sub_2505BE710();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2504D8968@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return PCSError.init(from:)(a1, a2);
}

void sub_2504D8980(void *a1)
{
}

void sub_2504D8998(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_2504D89A0()
{
  return sub_2505BDA20();
}

uint64_t sub_2504D89EC()
{
  return sub_2505BDA10();
}

uint64_t sub_2504D8A44()
{
  return sub_2505BE880();
}

void *sub_2504D8AAC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2504D8AB8()
{
  swift_getWitnessTable();
  return sub_2505BDA00();
}

uint64_t sub_2504D8B24()
{
  return 3;
}

uint64_t sub_2504D8B2C()
{
  return 2;
}

uint64_t _s14GroupKitCrypto8PCSErrorV2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0 = (void *)sub_2505BD830();
  uint64_t v1 = (void *)sub_2505BD830();
  id v2 = objc_msgSend(v0, sel_code);
  if (v2 == objc_msgSend(v1, sel_code))
  {
    id v3 = objc_msgSend(v0, sel_domain);
    uint64_t v4 = sub_2505BE140();
    uint64_t v6 = v5;

    id v7 = objc_msgSend(v1, sel_domain);
    uint64_t v8 = sub_2505BE140();
    uint64_t v10 = v9;

    if (v4 == v8 && v6 == v10) {
      char v12 = 1;
    }
    else {
      char v12 = sub_2505BE780();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_2504D8C5C()
{
  return swift_getWitnessTable();
}

uint64_t sub_2504D8C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t sub_2504D8C80()
{
  uint64_t result = sub_2505BE410();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2504D8D24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  unint64_t v11 = ((v9 + 7 + ((v7 + 1) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 40;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v16 = (void *)(((unint64_t)a1 + v8 + 1) & ~v8);
    uint64_t v17 = (const void *)(((unint64_t)a2 + v8 + 1) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v8 + 1) & ~v8, 1, v4))
    {
      memcpy(v16, v17, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v4);
    }
    unint64_t v18 = ((unint64_t)v16 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((unint64_t)v17 + v10) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v19 + 16) < 0xFFFFFFFFuLL)
    {
      long long v20 = *(_OWORD *)v19;
      long long v21 = *(_OWORD *)(v19 + 16);
      *(void *)(v18 + 32) = *(void *)(v19 + 32);
      *(_OWORD *)unint64_t v18 = v20;
      *(_OWORD *)(v18 + 16) = v21;
    }
    else
    {
      *(void *)unint64_t v18 = *(void *)v19;
      *(void *)(v18 + 8) = *(void *)(v19 + 8);
      *(void *)(v18 + 16) = *(void *)(v19 + 16);
      *(void *)(v18 + 24) = *(void *)(v19 + 24);
      *(void *)(v18 + 32) = *(void *)(v19 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

unint64_t sub_2504D8F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  }
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84)) {
    ++v5;
  }
  unint64_t result = *(void *)(((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *sub_2504D9018(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  uint64_t v8 = (const void *)((unint64_t)&a2[v6 + 1] & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    uint64_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  unint64_t v15 = ((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v16 + 16) < 0xFFFFFFFFuLL)
  {
    long long v17 = *(_OWORD *)v16;
    long long v18 = *(_OWORD *)(v16 + 16);
    *(void *)(v15 + 32) = *(void *)(v16 + 32);
    *(_OWORD *)unint64_t v15 = v17;
    *(_OWORD *)(v15 + 16) = v18;
  }
  else
  {
    *(void *)unint64_t v15 = *(void *)v16;
    *(void *)(v15 + 8) = *(void *)(v16 + 8);
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    *(void *)(v15 + 24) = *(void *)(v16 + 24);
    *(void *)(v15 + 32) = *(void *)(v16 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

unsigned char *sub_2504D91B4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  uint64_t v8 = (void *)((unint64_t)&a2[v6 + 1] & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v16 = (void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = (void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = v17[2];
  if (v16[2] < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      *unint64_t v16 = *v17;
      v16[1] = v17[1];
      v16[2] = v17[2];
      v16[3] = v17[3];
      v16[4] = v17[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_21:
    long long v19 = *(_OWORD *)v17;
    long long v20 = *((_OWORD *)v17 + 1);
    v16[4] = v17[4];
    *(_OWORD *)unint64_t v16 = v19;
    *((_OWORD *)v16 + 1) = v20;
    return a1;
  }
  if (v18 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  *unint64_t v16 = *v17;
  v16[1] = v17[1];
  v16[2] = v17[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16[3] = v17[3];
  v16[4] = v17[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *sub_2504D9440(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  uint64_t v8 = (const void *)((unint64_t)&a2[v6 + 1] & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    size_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  uint64_t v15 = (uint64_t)v7 + v14 + 7;
  unint64_t v16 = ((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v16;
  long long v18 = *(_OWORD *)(v16 + 16);
  v15 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v15 + 32) = *(void *)(v16 + 32);
  *(_OWORD *)uint64_t v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  return a1;
}

unsigned char *sub_2504D9594(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  uint64_t v8 = (void *)((unint64_t)&a2[v6 + 1] & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v15 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v16 = ((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v16 + 16) < 0xFFFFFFFFuLL) {
    goto LABEL_19;
  }
  if (*(void *)(v17 + 16) < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    long long v18 = *(_OWORD *)v17;
    long long v19 = *(_OWORD *)(v17 + 16);
    *(void *)(v16 + 32) = *(void *)(v17 + 32);
    *(_OWORD *)unint64_t v16 = v18;
    *(_OWORD *)(v16 + 16) = v19;
    return a1;
  }
  *(void *)unint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2504D97C8(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 7;
  if (v8 < a2)
  {
    unint64_t v12 = ((v11 + ((v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 40;
    unsigned int v13 = a2 - v8;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2504D9974);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v14)
        {
          int v19 = 0;
          LODWORD(v14) = *a1;
        }
        return v8 + (v14 | v19) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = ((unint64_t)a1 + v9 + 1) & ~v9;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v22 = *(void *)(((v11 + v20) & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    if ((v22 + 1) >= 2) {
      return v22;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v21 = (*(uint64_t (**)(uint64_t))(v5 + 48))(v20);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
}

void sub_2504D9988(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + 7 + ((v11 + 1) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 40;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + 7 + ((v11 + 1) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + 7 + ((v11 + 1) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + 7 + ((v11 + 1) & ~v11)) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      unsigned int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x2504D9C40);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        unint64_t v19 = (unint64_t)&a1[v11 + 1] & ~v11;
        if (v9 < 0x7FFFFFFE)
        {
          unint64_t v23 = (v12 + 7 + v19) & 0xFFFFFFFFFFFFFFF8;
          if (a2 > 0x7FFFFFFE)
          {
            *(void *)(v23 + 32) = 0;
            *(_OWORD *)unint64_t v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_DWORD *)unint64_t v23 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *(void *)(v23 + 16) = a2;
          }
        }
        else if (v9 >= a2)
        {
          uint64_t v24 = a2 + 1;
          uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          unint64_t v26 = (unint64_t)&a1[v11 + 1] & ~v11;
          v25(v26, v24);
        }
        else
        {
          if (v12 <= 3) {
            int v20 = ~(-1 << (8 * v12));
          }
          else {
            int v20 = -1;
          }
          if (v12)
          {
            int v21 = v20 & (~v9 + a2);
            if (v12 <= 3) {
              int v22 = v12;
            }
            else {
              int v22 = 4;
            }
            bzero((void *)((unint64_t)&a1[v11 + 1] & ~v11), v12);
            switch(v22)
            {
              case 2:
                *(_WORD *)unint64_t v19 = v21;
                break;
              case 3:
                *(_WORD *)unint64_t v19 = v21;
                *(unsigned char *)(v19 + 2) = BYTE2(v21);
                break;
              case 4:
                *(_DWORD *)unint64_t v19 = v21;
                break;
              default:
                *(unsigned char *)unint64_t v19 = v21;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_2504D9C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t sub_2504D9C90(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x54) {
    goto LABEL_17;
  }
  if (a2 + 172 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 172) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 172;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 172;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 172;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xAD;
  int v8 = v6 - 173;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_2504D9D20(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 172 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 172) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x54) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x53)
  {
    unsigned int v6 = ((a2 - 84) >> 8) + 1;
    *unint64_t result = a2 - 84;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2504D9DECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 - 84;
        break;
    }
  }
  return result;
}

uint64_t sub_2504D9E14(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_2504D9E1C(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NoGKCSubError()
{
  return &type metadata for NoGKCSubError;
}

void *initializeBufferWithCopyOfBuffer for PCSError(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for PCSError(id *a1)
{
}

void **assignWithCopy for PCSError(void **a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = v3;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **assignWithTake for PCSError(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for PCSError(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PCSError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PCSError()
{
  return &type metadata for PCSError;
}

void type metadata accessor for PCSIdentitySet(uint64_t a1)
{
}

void type metadata accessor for PCSIdentity(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AdminSeed(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_2504D9FDC()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2504DA018(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_2504DA060(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_2504DA0EC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2504DA13C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_2504DA184(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for GroupKitCryptoError.ErrorLocation()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for PCSError.CodingKeys()
{
  return &type metadata for PCSError.CodingKeys;
}

ValueMetadata *type metadata accessor for NoGKCSubError.CodingKeys()
{
  return &type metadata for NoGKCSubError.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Invite.InviteResponse(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14GroupKitCrypto8PCSErrorV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2504DA368);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_2504DA390(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

uint64_t sub_2504DA39C()
{
  return swift_getWitnessTable();
}

unint64_t sub_2504DA3BC()
{
  unint64_t result = qword_269AB5918;
  if (!qword_269AB5918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5918);
  }
  return result;
}

unint64_t sub_2504DA414()
{
  unint64_t result = qword_269AB5920;
  if (!qword_269AB5920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5920);
  }
  return result;
}

unint64_t sub_2504DA46C()
{
  unint64_t result = qword_269AB5928;
  if (!qword_269AB5928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5928);
  }
  return result;
}

unint64_t sub_2504DA4C4()
{
  unint64_t result = qword_269AB5930;
  if (!qword_269AB5930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5930);
  }
  return result;
}

unint64_t sub_2504DA51C()
{
  unint64_t result = qword_269AB5938[0];
  if (!qword_269AB5938[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269AB5938);
  }
  return result;
}

uint64_t sub_2504DA570()
{
  return swift_getWitnessTable();
}

uint64_t sub_2504DA58C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for GroupKitCryptoError.ErrorLocation.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t sub_2504DA5C0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_2504DA650(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2504DA71CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for CFArray(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void sub_2504DA76C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_2504DA7B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_2504DA7D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_2504DA7EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_2504DA808()
{
  return sub_2504DA850(&qword_269AB59D0, type metadata accessor for CFString);
}

uint64_t sub_2504DA850(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2504DA898()
{
  return sub_2504DA850(&qword_269AB59D8, type metadata accessor for CFString);
}

uint64_t sub_2504DA8F0(uint64_t a1)
{
  return sub_2504DA9EC(a1, qword_269AC3170);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_2504DA9B0(uint64_t a1)
{
  return sub_2504DA9EC(a1, qword_26B202480);
}

uint64_t sub_2504DA9D0(uint64_t a1)
{
  return sub_2504DA9EC(a1, qword_269AC3188);
}

uint64_t sub_2504DA9EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_2505BDC40();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_2505BDC30();
}

uint64_t deleteMessagesQAShadowGroup(groupID:userID:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_2505BDC40();
  __swift_project_value_buffer(v7, (uint64_t)qword_269AC3188);
  os_log_type_t v8 = sub_2505BE3B0();
  unsigned int v9 = sub_2505BDC20();
  if (os_log_type_enabled(v9, v8))
  {
    unsigned int v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v10 = 0;
    _os_log_impl(&dword_2504D2000, v9, v8, "Deleting GroupAccessInfo values from Keychain", v10, 2u);
    MEMORY[0x25337FF10](v10, -1, -1);
  }

  if (qword_26B202478 != -1) {
    swift_once();
  }
  uint64_t v11 = v5;
  swift_beginAccess();
  sub_2504DAEFC((uint64_t)&unk_26B2024A0, (uint64_t)&v22, &qword_26B202178);
  if (!v23)
  {
    sub_2504DAF60((uint64_t)&v22, &qword_26B202178);
LABEL_19:
    uint64_t result = sub_2505BE5F0();
    __break(1u);
    return result;
  }
  sub_2504DAEE4(&v22, (uint64_t)v24);
  swift_endAccess();
  uint64_t v12 = v25;
  uint64_t v13 = v26;
  __swift_project_boxed_opaque_existential_1(v24, v25);
  *(void *)&long long v22 = v3;
  *((void *)&v22 + 1) = v4;
  uint64_t v27 = v11;
  uint64_t v28 = v6;
  (*(void (**)(long long *, uint64_t *, uint64_t, uint64_t))(v13 + 32))(&v22, &v27, v12, v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  if (v2) {
    return result;
  }
  os_log_type_t v15 = sub_2505BE3B0();
  int v16 = sub_2505BDC20();
  if (os_log_type_enabled(v16, v15))
  {
    int v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v17 = 0;
    _os_log_impl(&dword_2504D2000, v16, v15, "Deleting GroupBlob values for Manatee from CloudKit", v17, 2u);
    MEMORY[0x25337FF10](v17, -1, -1);
  }

  swift_beginAccess();
  sub_2504DAEFC((uint64_t)&unk_26B202518, (uint64_t)&v22, &qword_26B2022D8);
  if (!v23) {
    goto LABEL_18;
  }
  sub_2504DAEE4(&v22, (uint64_t)v24);
  swift_endAccess();
  __swift_project_boxed_opaque_existential_1(v24, v25);
  *(void *)&long long v22 = v3;
  *((void *)&v22 + 1) = v4;
  uint64_t v27 = v11;
  uint64_t v28 = v6;
  sub_25059AFAC((uint64_t *)&v22, &v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  os_log_type_t v18 = sub_2505BE3B0();
  unint64_t v19 = sub_2505BDC20();
  os_log_type_t v20 = v18;
  if (os_log_type_enabled(v19, v18))
  {
    int v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v21 = 0;
    _os_log_impl(&dword_2504D2000, v19, v20, "Deleting GroupAccessInfo for Manatee from CloudKit", v21, 2u);
    MEMORY[0x25337FF10](v21, -1, -1);
  }

  swift_beginAccess();
  sub_2504DAEFC((uint64_t)&unk_26B202518, (uint64_t)&v22, &qword_26B2022D8);
  if (!v23)
  {
LABEL_18:
    sub_2504DAF60((uint64_t)&v22, &qword_26B2022D8);
    goto LABEL_19;
  }
  sub_2504DAEE4(&v22, (uint64_t)v24);
  swift_endAccess();
  __swift_project_boxed_opaque_existential_1(v24, v25);
  *(void *)&long long v22 = v3;
  *((void *)&v22 + 1) = v4;
  uint64_t v27 = v11;
  uint64_t v28 = v6;
  sub_25059B6F4((uint64_t *)&v22, &v27);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

Swift::Bool __swiftcall isValidStrictPeersDevice()()
{
  return 1;
}

uint64_t sub_2504DAEE4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_2504DAEFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2504DAF60(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2504DAFBC(uint64_t result, unsigned char **a2)
{
  long long v2 = *a2;
  *long long v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_2504DAFCC()
{
  uint64_t result = sub_25056CFB4(0xD000000000000021, 0x80000002505C9650);
  qword_269AC31A0 = result;
  *(void *)algn_269AC31A8 = v1;
  return result;
}

uint64_t sub_2504DB008()
{
  uint64_t result = sub_25056CFB4(0xD000000000000036, 0x80000002505C97D0);
  qword_269AC31B0 = result;
  *(void *)algn_269AC31B8 = v1;
  return result;
}

uint64_t sub_2504DB044()
{
  uint64_t result = sub_25056CFB4(0xD000000000000045, 0x80000002505C9BF0);
  qword_269AC31C0 = result;
  *(void *)algn_269AC31C8 = v1;
  return result;
}

uint64_t sub_2504DB080()
{
  uint64_t result = sub_25056CFB4(0xD000000000000039, 0x80000002505C9B00);
  qword_269AC31D0 = result;
  *(void *)algn_269AC31D8 = v1;
  return result;
}

uint64_t sub_2504DB0BC()
{
  uint64_t result = sub_25056CFB4(0xD00000000000003ALL, 0x80000002505C9AC0);
  qword_269AC31E0 = result;
  *(void *)algn_269AC31E8 = v1;
  return result;
}

uint64_t sub_2504DB0F8()
{
  uint64_t result = sub_25056CFB4(0xD000000000000033, 0x80000002505C95F0);
  qword_269AC31F0 = result;
  *(void *)algn_269AC31F8 = v1;
  return result;
}

uint64_t sub_2504DB134()
{
  uint64_t result = sub_25056CFB4(0xD000000000000033, 0x80000002505C9500);
  qword_269AC3200 = result;
  *(void *)algn_269AC3208 = v1;
  return result;
}

uint64_t sub_2504DB170()
{
  uint64_t result = sub_25056CFB4(0xD000000000000038, 0x80000002505C95B0);
  qword_269AC3210 = result;
  *(void *)algn_269AC3218 = v1;
  return result;
}

uint64_t sub_2504DB1AC()
{
  uint64_t result = sub_25056CFB4(0xD00000000000002FLL, 0x80000002505C9440);
  qword_269AC3220 = result;
  *(void *)algn_269AC3228 = v1;
  return result;
}

uint64_t sub_2504DB1E8()
{
  uint64_t result = sub_25056CFB4(0xD00000000000003FLL, 0x80000002505C9760);
  qword_269AC3230 = result;
  *(void *)algn_269AC3238 = v1;
  return result;
}

uint64_t sub_2504DB224()
{
  uint64_t result = sub_25056CFB4(0xD000000000000037, 0x80000002505C9950);
  qword_269AC3240 = result;
  *(void *)algn_269AC3248 = v1;
  return result;
}

uint64_t sub_2504DB260()
{
  uint64_t result = sub_25056CFB4(0xD000000000000038, 0x80000002505CA210);
  qword_269AC3250 = result;
  *(void *)algn_269AC3258 = v1;
  return result;
}

uint64_t sub_2504DB29C()
{
  uint64_t result = sub_25056CFB4(0xD00000000000003FLL, 0x80000002505C96C0);
  *(void *)&xmmword_269AC3260 = result;
  *((void *)&xmmword_269AC3260 + 1) = v1;
  return result;
}

uint64_t sub_2504DB2D8()
{
  uint64_t result = sub_25056CFB4(0xD00000000000003CLL, 0x80000002505C9680);
  qword_269AC3270 = result;
  *(void *)algn_269AC3278 = v1;
  return result;
}

uint64_t FirstGroupVersion.getter()
{
  return 1;
}

uint64_t ProtocolVersion.getter()
{
  return 1;
}

uint64_t sub_2504DB330@<X0>(uint64_t result@<X0>, char a2@<W1>, BOOL *a3@<X8>)
{
  if (a2)
  {
    *a3 = result == 0;
  }
  else
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_2505BDC40();
    __swift_project_value_buffer(v3, (uint64_t)qword_269AC3188);
    os_log_type_t v4 = sub_2505BE3D0();
    uint64_t v5 = sub_2505BDC20();
    if (os_log_type_enabled(v5, v4))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134217984;
      sub_2505BE430();
      _os_log_impl(&dword_2504D2000, v5, v4, "unrecognized GroupRole in encoded protobuf, got %ld", v6, 0xCu);
      MEMORY[0x25337FF10](v6, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v7 = 335;
    *(_OWORD *)(v7 + 8) = xmmword_2505BFE40;
    *(_OWORD *)(v7 + 24) = xmmword_2505BFE50;
    *(void *)(v7 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  return result;
}

uint64_t GroupRole.RSVPStatus.hash(into:)()
{
  return sub_2505BE860();
}

BOOL static GroupRole.RSVPStatus.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2504DB524(uint64_t a1)
{
  unint64_t v2 = sub_250523118();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DB560(uint64_t a1)
{
  unint64_t v2 = sub_250523118();
  return MEMORY[0x270FA00B8](a1, v2);
}

unint64_t sub_2504DB59C()
{
  unint64_t result = 0x747065636341;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7463656A6552;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x657661654CLL;
      break;
    case 4:
      unint64_t result = 0x796F7274736544;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2504DB63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25051B08C(a1, a2);
  *a3 = result;
  return result;
}

void sub_2504DB664(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_2504DB670(uint64_t a1)
{
  unint64_t v2 = sub_250522F74();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DB6AC(uint64_t a1)
{
  unint64_t v2 = sub_250522F74();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2504DB6E8(uint64_t a1)
{
  unint64_t v2 = sub_250523070();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DB724(uint64_t a1)
{
  unint64_t v2 = sub_250523070();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2504DB760(uint64_t a1)
{
  unint64_t v2 = sub_250522FC8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DB79C(uint64_t a1)
{
  unint64_t v2 = sub_250522FC8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2504DB7D8(uint64_t a1)
{
  unint64_t v2 = sub_25052301C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DB814(uint64_t a1)
{
  unint64_t v2 = sub_25052301C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2504DB850(uint64_t a1)
{
  unint64_t v2 = sub_2505230C4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DB88C(uint64_t a1)
{
  unint64_t v2 = sub_2505230C4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t GroupRole.RSVPStatus.hashValue.getter()
{
  return sub_2505BE880();
}

uint64_t sub_2504DB910()
{
  return sub_2505BE860();
}

BOOL sub_2504DB93C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t GroupRole.hash(into:)()
{
  return sub_2505BE860();
}

BOOL static GroupRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2504DB994(uint64_t a1)
{
  unint64_t v2 = sub_250522F20();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DB9D0(uint64_t a1)
{
  unint64_t v2 = sub_250522F20();
  return MEMORY[0x270FA00B8](a1, v2);
}

BOOL sub_2504DBA0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2504DBA24()
{
  if (*v0) {
    return 0x7265626D654DLL;
  }
  else {
    return 0x7473696E696D6441;
  }
}

uint64_t sub_2504DBA68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25051B28C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2504DBA90(uint64_t a1)
{
  unint64_t v2 = sub_250522E78();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DBACC(uint64_t a1)
{
  unint64_t v2 = sub_250522E78();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2504DBB08(uint64_t a1)
{
  unint64_t v2 = sub_250522ECC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DBB44(uint64_t a1)
{
  unint64_t v2 = sub_250522ECC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _s14GroupKitCrypto21SynchronizationResultO9hashValueSivg_0()
{
  return sub_2505BE880();
}

uint64_t sub_2504DBBCC()
{
  return sub_2505BE880();
}

uint64_t static GroupID.groupIDLength.getter()
{
  return 16;
}

uint64_t GroupID.rawValue.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_2504DBC4C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_2504DBC4C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t GroupID.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x2504DBF64);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 16)
      {
        *a3 = result;
        a3[1] = a2;
      }
      else
      {
LABEL_8:
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v10 = sub_2505BDC40();
        __swift_project_value_buffer(v10, (uint64_t)qword_269AC3188);
        os_log_type_t v11 = sub_2505BE3D0();
        sub_2504DBC4C(v5, a2);
        uint64_t v12 = sub_2505BDC20();
        if (os_log_type_enabled(v12, v11))
        {
          uint64_t v13 = (_DWORD *)swift_slowAlloc();
          *uint64_t v13 = 134218240;
          unsigned int v14 = v13;
          switch((int)v3)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(v5), v5)) {
                goto LABEL_16;
              }
              goto LABEL_20;
            case 2:
              if (!__OFSUB__(*(void *)(v5 + 24), *(void *)(v5 + 16))) {
                goto LABEL_16;
              }
              goto LABEL_21;
            default:
LABEL_16:
              sub_2505BE430();
              sub_250511528(v5, a2);
              *((_WORD *)v14 + 6) = 2048;
              sub_2505BE430();
              _os_log_impl(&dword_2504D2000, v12, v11, "group ID has invalid length, got %ld expected %ld", (uint8_t *)v14, 0x16u);
              MEMORY[0x25337FF10](v14, -1, -1);
              break;
          }
        }
        else
        {
          sub_250511528(v5, a2);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v15 = 257;
        *(_OWORD *)(v15 + 8) = xmmword_2505BFE60;
        *(_OWORD *)(v15 + 24) = xmmword_2505BFE50;
        *(void *)(v15 + 40) = 0x80000002505C8CB0;
        swift_willThrow();
        return sub_250511528(v5, a2);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t GroupID.hintHash.getter()
{
  return sub_2504DBF8C(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_2504DBF8C(uint64_t a1, unint64_t a2)
{
  v31[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2505BE0E0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  os_log_type_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_2505BDC90();
  uint64_t v12 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30, v13, v14, v15, v16);
  os_log_type_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6010);
  MEMORY[0x270FA5388](v29, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
  sub_2505BDC80();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v28 = v5;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      unint64_t v27 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_2504DBC4C(a1, a2);
      sub_2505864C4((int)a1, a1 >> 32);
      sub_250511528(a1, a2);
      uint64_t v5 = v28;
      goto LABEL_9;
    case 2uLL:
      uint64_t v28 = v5;
      uint64_t v25 = *(void *)(a1 + 16);
      unint64_t v27 = *(void *)(a1 + 24);
      sub_2504DBC4C(a1, a2);
      swift_retain();
      swift_retain();
      sub_2505864C4(v25, v27);
      uint64_t v5 = v28;
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      memset(v31, 0, 14);
      goto LABEL_7;
    default:
      v31[0] = a1;
      LOWORD(v31[1]) = a2;
      BYTE2(v31[1]) = BYTE2(a2);
      BYTE3(v31[1]) = BYTE3(a2);
      BYTE4(v31[1]) = BYTE4(a2);
      BYTE5(v31[1]) = BYTE5(a2);
LABEL_7:
      sub_2505BDC60();
LABEL_8:
      sub_250511528(a1, a2);
LABEL_9:
      sub_2505BDC70();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v24, v18, v30);
      *(void *)&v24[*(int *)(v29 + 36)] = 2;
      return sub_25056D4E4((uint64_t)v24);
  }
}

uint64_t static GroupID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_2504DC39C()
{
  return sub_2505BE860();
}

uint64_t sub_2504DC3C8()
{
  return 0x65756C6156776172;
}

uint64_t sub_2504DC3E4(uint64_t a1)
{
  unint64_t v2 = sub_25052316C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DC420(uint64_t a1)
{
  unint64_t v2 = sub_25052316C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2504DC46C(uint64_t a1, uint64_t a2)
{
  return sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t static GroupKitUserID.groupKitUserIDLength.getter()
{
  return 20;
}

uint64_t GroupKitUserID.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x2504DC748);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 20)
      {
        *a3 = result;
        a3[1] = a2;
      }
      else
      {
LABEL_8:
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v10 = sub_2505BDC40();
        __swift_project_value_buffer(v10, (uint64_t)qword_269AC3188);
        os_log_type_t v11 = sub_2505BE3D0();
        sub_2504DBC4C(v5, a2);
        uint64_t v12 = sub_2505BDC20();
        if (os_log_type_enabled(v12, v11))
        {
          uint64_t v13 = (_DWORD *)swift_slowAlloc();
          *uint64_t v13 = 134218240;
          uint64_t v14 = v13;
          switch((int)v3)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(v5), v5)) {
                goto LABEL_16;
              }
              goto LABEL_20;
            case 2:
              if (!__OFSUB__(*(void *)(v5 + 24), *(void *)(v5 + 16))) {
                goto LABEL_16;
              }
              goto LABEL_21;
            default:
LABEL_16:
              sub_2505BE430();
              sub_250511528(v5, a2);
              *((_WORD *)v14 + 6) = 2048;
              sub_2505BE430();
              _os_log_impl(&dword_2504D2000, v12, v11, "group ID has invalid length, got %ld expected %ld", (uint8_t *)v14, 0x16u);
              MEMORY[0x25337FF10](v14, -1, -1);
              break;
          }
        }
        else
        {
          sub_250511528(v5, a2);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v15 = 258;
        *(_OWORD *)(v15 + 8) = xmmword_2505BFE70;
        *(_OWORD *)(v15 + 24) = xmmword_2505BFE50;
        *(void *)(v15 + 40) = 0x80000002505C8CB0;
        swift_willThrow();
        return sub_250511528(v5, a2);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_2504DC76C(uint64_t a1)
{
  unint64_t v2 = sub_250523268();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DC7A8(uint64_t a1)
{
  unint64_t v2 = sub_250523268();
  return MEMORY[0x270FA00B8](a1, v2);
}

GroupKitCrypto::UserDSID __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDSID.init(_:)(GroupKitCrypto::UserDSID result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t UserDSID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2505BE180();
  return swift_bridgeObjectRelease();
}

uint64_t static UserDSID.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_2505BE780();
  }
}

uint64_t sub_2504DC878(uint64_t a1)
{
  unint64_t v2 = sub_2505232BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DC8B4(uint64_t a1)
{
  unint64_t v2 = sub_2505232BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t UserDSID.hashValue.getter()
{
  return sub_2505BE880();
}

uint64_t sub_2504DC94C()
{
  return sub_2505BE880();
}

uint64_t sub_2504DC9A8()
{
  swift_bridgeObjectRetain();
  sub_2505BE180();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2504DCA00()
{
  return sub_2505BE880();
}

uint64_t sub_2504DCA58(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_2505BE780();
  }
}

uint64_t sub_2504DCA88(uint64_t a1, unint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = MEMORY[0x263F8EE78];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      uint64_t v29 = MEMORY[0x263F8EE78];
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_250511DE8(0, v7, 0);
      uint64_t v3 = v29;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = sub_2505BD7D0();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = sub_2505BD800();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = sub_2505BD7D0();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = sub_2505BD800();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F30);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_2505BFE80;
        *(void *)(v16 + 56) = MEMORY[0x263F8E778];
        *(void *)(v16 + 64) = MEMORY[0x263F8E7C0];
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = sub_2505BE150();
        uint64_t v18 = v17;
        uint64_t v29 = v3;
        unint64_t v20 = *(void *)(v3 + 16);
        unint64_t v19 = *(void *)(v3 + 24);
        if (v20 >= v19 >> 1)
        {
          sub_250511DE8(v19 > 1, v20 + 1, 1);
          uint64_t v3 = v29;
        }
        *(void *)(v3 + 16) = v20 + 1;
        uint64_t v21 = v3 + 16 * v20;
        *(void *)(v21 + 32) = v2;
        *(void *)(v21 + 40) = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_2504DCE2C(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  uint64_t v8 = MEMORY[0x270FA5388](v3, v4, v5, v6, v7);
  uint64_t v67 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v8, v10, v11, v12, v13);
  uint64_t v66 = (uint64_t *)((char *)&v58 - v15);
  uint64_t v20 = MEMORY[0x270FA5388](v14, v16, v17, v18, v19);
  uint64_t v65 = (uint64_t *)((char *)&v58 - v21);
  MEMORY[0x270FA5388](v20, v22, v23, v24, v25);
  int v27 = (char *)&v58 - v26;
  int64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = MEMORY[0x263F8EE78];
  if (!v28) {
    return v29;
  }
  uint64_t v58 = v1;
  uint64_t v72 = MEMORY[0x263F8EE78];
  sub_250511E78(0, v28, 0);
  uint64_t result = sub_25051A020(a1);
  uint64_t v32 = result;
  uint64_t v33 = 0;
  uint64_t v34 = a1 + 64;
  uint64_t v59 = a1 + 80;
  int64_t v60 = v28;
  uint64_t v63 = v27;
  uint64_t v64 = a1;
  uint64_t v61 = v31;
  uint64_t v62 = a1 + 64;
  uint64_t v35 = v65;
  while ((v32 & 0x8000000000000000) == 0 && v32 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v38 = (unint64_t)v32 >> 6;
    if ((*(void *)(v34 + 8 * ((unint64_t)v32 >> 6)) & (1 << v32)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v31) {
      goto LABEL_26;
    }
    uint64_t v70 = v33;
    uint64_t v71 = 1 << v32;
    uint64_t v39 = v69;
    uint64_t v40 = (uint64_t)v35 + *(int *)(v69 + 48);
    uint64_t v41 = *(void *)(a1 + 48);
    uint64_t v42 = *(void *)(a1 + 56);
    uint64_t v43 = (uint64_t *)(v41 + 16 * v32);
    uint64_t v45 = *v43;
    unint64_t v44 = v43[1];
    *uint64_t v35 = *v43;
    v35[1] = v44;
    uint64_t v46 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_25051B91C(v42 + *(void *)(*(void *)(v46 - 8) + 72) * v32, v40, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v47 = (uint64_t)v66;
    uint64_t *v66 = v45;
    *(void *)(v47 + 8) = v44;
    uint64_t v48 = *(int *)(v39 + 48);
    uint64_t v49 = (uint64_t)v63;
    sub_25051B91C(v40, v47 + v48, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v50 = v67;
    sub_2505283F0(v47, v67, &qword_269AB5E90);
    sub_2504DBC4C(v45, v44);
    sub_2504DBC4C(v45, v44);
    sub_2504DAF60((uint64_t)v35, &qword_269AB5E90);
    sub_2504DAEFC(v50, v49, &qword_269AB5E90);
    sub_2504DAF60(v50, &qword_269AB5E90);
    uint64_t v29 = v72;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_250511E78(0, *(void *)(v29 + 16) + 1, 1);
      uint64_t v29 = v72;
    }
    unint64_t v52 = *(void *)(v29 + 16);
    unint64_t v51 = *(void *)(v29 + 24);
    a1 = v64;
    if (v52 >= v51 >> 1)
    {
      sub_250511E78(v51 > 1, v52 + 1, 1);
      uint64_t v29 = v72;
    }
    *(void *)(v29 + 16) = v52 + 1;
    uint64_t result = sub_2505283F0(v49, v29+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * v52, &qword_269AB5E90);
    int64_t v36 = 1 << *(unsigned char *)(a1 + 32);
    if (v32 >= v36) {
      goto LABEL_27;
    }
    uint64_t v34 = v62;
    uint64_t v53 = *(void *)(v62 + 8 * v38);
    if ((v53 & v71) == 0) {
      goto LABEL_28;
    }
    LODWORD(v31) = v61;
    if (*(_DWORD *)(a1 + 36) != v61) {
      goto LABEL_29;
    }
    unint64_t v54 = v53 & (-2 << (v32 & 0x3F));
    if (v54)
    {
      int64_t v36 = __clz(__rbit64(v54)) | v32 & 0xFFFFFFFFFFFFFFC0;
      int64_t v37 = v60;
    }
    else
    {
      unint64_t v55 = v38 + 1;
      unint64_t v56 = (unint64_t)(v36 + 63) >> 6;
      int64_t v37 = v60;
      if (v38 + 1 < v56)
      {
        unint64_t v57 = *(void *)(v62 + 8 * v55);
        if (v57)
        {
LABEL_22:
          int64_t v36 = __clz(__rbit64(v57)) + (v55 << 6);
        }
        else
        {
          while (v56 - 2 != v38)
          {
            unint64_t v57 = *(void *)(v59 + 8 * v38++);
            if (v57)
            {
              unint64_t v55 = v38 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v33 = v70 + 1;
    uint64_t v32 = v36;
    if (v70 + 1 == v37) {
      return v29;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2504DD23C(uint64_t a1)
{
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v7 = MEMORY[0x270FA5388](v70, v3, v4, v5, v6);
  uint64_t v69 = (void *)((char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v7, v9, v10, v11, v12);
  uint64_t v68 = (void *)((char *)v60 - v14);
  uint64_t v19 = MEMORY[0x270FA5388](v13, v15, v16, v17, v18);
  uint64_t v67 = (void *)((char *)v60 - v20);
  MEMORY[0x270FA5388](v19, v21, v22, v23, v24);
  uint64_t v66 = (void *)((char *)v60 - v25);
  int64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = MEMORY[0x263F8EE78];
  if (!v26) {
    return v27;
  }
  v60[1] = v1;
  uint64_t v73 = MEMORY[0x263F8EE78];
  sub_250511F14(0, v26, 0);
  uint64_t result = sub_25051A020(a1);
  uint64_t v30 = result;
  uint64_t v31 = 0;
  uint64_t v32 = a1 + 64;
  uint64_t v61 = a1 + 80;
  int64_t v62 = v26;
  uint64_t v64 = a1 + 64;
  uint64_t v65 = a1;
  uint64_t v63 = v29;
  while ((v30 & 0x8000000000000000) == 0 && v30 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v35 = (unint64_t)v30 >> 6;
    if ((*(void *)(v32 + 8 * ((unint64_t)v30 >> 6)) & (1 << v30)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v29) {
      goto LABEL_26;
    }
    uint64_t v71 = v31;
    uint64_t v72 = 1 << v30;
    uint64_t v36 = v70;
    uint64_t v37 = (uint64_t)v66;
    uint64_t v38 = (uint64_t)v66 + *(int *)(v70 + 48);
    uint64_t v39 = *(void *)(a1 + 56);
    uint64_t v40 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v30);
    uint64_t v41 = *v40;
    unint64_t v42 = v40[1];
    uint64_t *v66 = *v40;
    *(void *)(v37 + 8) = v42;
    uint64_t v43 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_25051B91C(v39 + *(void *)(*(void *)(v43 - 8) + 72) * v30, v38, type metadata accessor for GroupMembership.MemberProperties);
    unint64_t v44 = v67;
    *uint64_t v67 = v41;
    v44[1] = v42;
    sub_25051B91C(v38, (uint64_t)v44 + *(int *)(v36 + 48), type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v45 = (uint64_t)v44;
    uint64_t v46 = v68;
    sub_2505283F0(v45, (uint64_t)v68, &qword_269AB5E90);
    sub_2504DBC4C(v41, v42);
    sub_2504DBC4C(v41, v42);
    sub_2504DAF60(v37, &qword_269AB5E90);
    uint64_t v47 = *(int *)(v36 + 48);
    uint64_t v48 = v69;
    uint64_t v49 = (uint64_t)v69 + v47;
    uint64_t v50 = *v46;
    unint64_t v51 = v46[1];
    *uint64_t v69 = *v46;
    v48[1] = v51;
    sub_25051B91C((uint64_t)v46 + v47, (uint64_t)v48 + v47, type metadata accessor for GroupMembership.MemberProperties);
    sub_2504DBC4C(v50, v51);
    sub_25051AF3C(v49, type metadata accessor for GroupMembership.MemberProperties);
    sub_2504DAF60((uint64_t)v46, &qword_269AB5E90);
    uint64_t v27 = v73;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_250511F14(0, *(void *)(v27 + 16) + 1, 1);
      uint64_t v27 = v73;
    }
    unint64_t v53 = *(void *)(v27 + 16);
    unint64_t v52 = *(void *)(v27 + 24);
    if (v53 >= v52 >> 1)
    {
      uint64_t result = sub_250511F14(v52 > 1, v53 + 1, 1);
      uint64_t v27 = v73;
    }
    *(void *)(v27 + 16) = v53 + 1;
    uint64_t v54 = v27 + 16 * v53;
    *(void *)(v54 + 32) = v50;
    *(void *)(v54 + 40) = v51;
    a1 = v65;
    int64_t v33 = 1 << *(unsigned char *)(v65 + 32);
    if (v30 >= v33) {
      goto LABEL_27;
    }
    uint64_t v32 = v64;
    uint64_t v55 = *(void *)(v64 + 8 * v35);
    if ((v55 & v72) == 0) {
      goto LABEL_28;
    }
    LODWORD(v29) = v63;
    if (*(_DWORD *)(v65 + 36) != v63) {
      goto LABEL_29;
    }
    unint64_t v56 = v55 & (-2 << (v30 & 0x3F));
    if (v56)
    {
      int64_t v33 = __clz(__rbit64(v56)) | v30 & 0xFFFFFFFFFFFFFFC0;
      int64_t v34 = v62;
    }
    else
    {
      unint64_t v57 = v35 + 1;
      unint64_t v58 = (unint64_t)(v33 + 63) >> 6;
      int64_t v34 = v62;
      if (v35 + 1 < v58)
      {
        unint64_t v59 = *(void *)(v64 + 8 * v57);
        if (v59)
        {
LABEL_22:
          int64_t v33 = __clz(__rbit64(v59)) + (v57 << 6);
        }
        else
        {
          while (v58 - 2 != v35)
          {
            unint64_t v59 = *(void *)(v61 + 8 * v35++);
            if (v59)
            {
              unint64_t v57 = v35 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v31 = v71 + 1;
    uint64_t v30 = v33;
    if (v71 + 1 == v34) {
      return v27;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2504DD644(uint64_t a1)
{
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v7 = MEMORY[0x270FA5388](v61, v3, v4, v5, v6);
  int64_t v60 = (uint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v7, v9, v10, v11, v12);
  unint64_t v59 = (uint64_t *)((char *)&v52 - v14);
  MEMORY[0x270FA5388](v13, v15, v16, v17, v18);
  unint64_t v58 = (uint64_t *)((char *)&v52 - v19);
  int64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (!v20) {
    return v21;
  }
  uint64_t v52 = v1;
  uint64_t v64 = MEMORY[0x263F8EE78];
  sub_250511F14(0, v20, 0);
  uint64_t result = sub_25051A020(a1);
  uint64_t v24 = result;
  uint64_t v25 = 0;
  uint64_t v26 = a1 + 64;
  uint64_t v53 = a1 + 80;
  int64_t v54 = v20;
  uint64_t v56 = a1 + 64;
  uint64_t v57 = a1;
  uint64_t v55 = v23;
  uint64_t v27 = v58;
  while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v30 = (unint64_t)v24 >> 6;
    if ((*(void *)(v26 + 8 * ((unint64_t)v24 >> 6)) & (1 << v24)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v23) {
      goto LABEL_26;
    }
    uint64_t v62 = v25;
    uint64_t v63 = 1 << v24;
    uint64_t v31 = v61;
    uint64_t v32 = (uint64_t)v27 + *(int *)(v61 + 48);
    uint64_t v33 = *(void *)(a1 + 48);
    uint64_t v34 = *(void *)(a1 + 56);
    unint64_t v35 = (uint64_t *)(v33 + 16 * v24);
    uint64_t v36 = *v35;
    unint64_t v37 = v35[1];
    *uint64_t v27 = *v35;
    v27[1] = v37;
    uint64_t v38 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_25051B91C(v34 + *(void *)(*(void *)(v38 - 8) + 72) * v24, v32, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v39 = v59;
    *unint64_t v59 = v36;
    v39[1] = v37;
    sub_25051B91C(v32, (uint64_t)v39 + *(int *)(v31 + 48), type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v40 = (uint64_t)v39;
    uint64_t v41 = v60;
    sub_2505283F0(v40, (uint64_t)v60, &qword_269AB5E90);
    sub_2504DBC4C(v36, v37);
    sub_2504DBC4C(v36, v37);
    sub_2504DAF60((uint64_t)v27, &qword_269AB5E90);
    uint64_t v42 = *v41;
    unint64_t v43 = v41[1];
    sub_2504DBC4C(*v41, v43);
    sub_2504DAF60((uint64_t)v41, &qword_269AB5E90);
    uint64_t v21 = v64;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_250511F14(0, *(void *)(v21 + 16) + 1, 1);
      uint64_t v21 = v64;
    }
    unint64_t v45 = *(void *)(v21 + 16);
    unint64_t v44 = *(void *)(v21 + 24);
    if (v45 >= v44 >> 1)
    {
      uint64_t result = sub_250511F14(v44 > 1, v45 + 1, 1);
      uint64_t v21 = v64;
    }
    *(void *)(v21 + 16) = v45 + 1;
    uint64_t v46 = v21 + 16 * v45;
    *(void *)(v46 + 32) = v42;
    *(void *)(v46 + 40) = v43;
    a1 = v57;
    int64_t v28 = 1 << *(unsigned char *)(v57 + 32);
    if (v24 >= v28) {
      goto LABEL_27;
    }
    uint64_t v26 = v56;
    uint64_t v47 = *(void *)(v56 + 8 * v30);
    if ((v47 & v63) == 0) {
      goto LABEL_28;
    }
    LODWORD(v23) = v55;
    if (*(_DWORD *)(v57 + 36) != v55) {
      goto LABEL_29;
    }
    unint64_t v48 = v47 & (-2 << (v24 & 0x3F));
    if (v48)
    {
      int64_t v28 = __clz(__rbit64(v48)) | v24 & 0xFFFFFFFFFFFFFFC0;
      int64_t v29 = v54;
    }
    else
    {
      unint64_t v49 = v30 + 1;
      unint64_t v50 = (unint64_t)(v28 + 63) >> 6;
      int64_t v29 = v54;
      if (v30 + 1 < v50)
      {
        unint64_t v51 = *(void *)(v56 + 8 * v49);
        if (v51)
        {
LABEL_22:
          int64_t v28 = __clz(__rbit64(v51)) + (v49 << 6);
        }
        else
        {
          while (v50 - 2 != v30)
          {
            unint64_t v51 = *(void *)(v53 + 8 * v30++);
            if (v51)
            {
              unint64_t v49 = v30 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v25 = v62 + 1;
    uint64_t v24 = v28;
    if (v62 + 1 == v29) {
      return v21;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2504DD9E8(uint64_t a1, uint64_t *a2)
{
  unint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v36 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7, v8);
  unint64_t v35 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (!v10) {
    return v11;
  }
  v32[1] = v2;
  uint64_t v39 = MEMORY[0x263F8EE78];
  sub_250511F70(0, v10, 0);
  uint64_t v11 = v39;
  uint64_t result = sub_25051A774(a1);
  int64_t v13 = result;
  int v15 = v14;
  int v17 = v16 & 1;
  uint64_t v33 = a1;
  uint64_t v34 = a1 + 56;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v34 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v15) {
      goto LABEL_16;
    }
    uint64_t v18 = *v37;
    if (!*(void *)(*v37 + 16)) {
      goto LABEL_17;
    }
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    sub_2504DBC4C(*v19, v21);
    sub_2504DBC4C(v20, v21);
    uint64_t result = sub_250513064(v20, v21);
    if ((v22 & 1) == 0) {
      goto LABEL_18;
    }
    int v38 = v17;
    uint64_t v23 = *(void *)(v18 + 56);
    uint64_t v24 = v35;
    sub_25051B91C(v23 + *(void *)(v36 + 72) * result, (uint64_t)v35, type metadata accessor for GroupMembership.MemberProperties);
    char v25 = *v24;
    sub_25051AF3C((uint64_t)v24, type metadata accessor for GroupMembership.MemberProperties);
    sub_250511528(v20, v21);
    uint64_t v39 = v11;
    unint64_t v27 = *(void *)(v11 + 16);
    unint64_t v26 = *(void *)(v11 + 24);
    uint64_t v28 = v11;
    if (v27 >= v26 >> 1)
    {
      sub_250511F70(v26 > 1, v27 + 1, 1);
      uint64_t v28 = v39;
    }
    *(void *)(v28 + 16) = v27 + 1;
    uint64_t v29 = v28 + 24 * v27;
    *(void *)(v29 + 32) = v20;
    *(void *)(v29 + 40) = v21;
    *(unsigned char *)(v29 + 48) = (v25 ^ 1) & 1;
    a1 = v33;
    uint64_t result = sub_25051A814(v13, v15, v38 & 1, v33);
    int64_t v13 = result;
    int v15 = v30;
    int v17 = v31 & 1;
    --v10;
    uint64_t v11 = v28;
    if (!v10)
    {
      sub_2505283E4(result, v30, v31 & 1);
      return v11;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_2504DDC90(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v44 = MEMORY[0x263F8EE78];
  sub_250511E08(0, v1, 0);
  uint64_t v2 = v44;
  uint64_t result = sub_25051A020(v3);
  unint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  uint64_t v33 = v3 + 80;
  int64_t v34 = v1;
  int v35 = v5;
  uint64_t v36 = v3 + 64;
  uint64_t v37 = v3;
  while ((v6 & 0x8000000000000000) == 0 && (uint64_t)v6 < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v11 = v6 >> 6;
    if ((*(void *)(v8 + 8 * (v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_24;
    }
    uint64_t v38 = v7;
    uint64_t v39 = 1 << v6;
    uint64_t v12 = *(void *)(v3 + 56);
    int64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v15 = *v13;
    unint64_t v14 = v13[1];
    int64_t v42 = v6;
    uint64_t v43 = v2;
    char v16 = (uint64_t *)(v12 + 48 * v6);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    unint64_t v20 = v16[3];
    uint64_t v21 = v16[4];
    unint64_t v22 = v16[5];
    sub_2504DBC4C(v15, v14);
    sub_2504DBC4C(v17, v18);
    sub_2504DBC4C(v19, v20);
    sub_2504DBC4C(v21, v22);
    sub_2504DBC4C(v15, v14);
    sub_2504DBC4C(v17, v18);
    sub_2504DBC4C(v19, v20);
    sub_2504DBC4C(v21, v22);
    sub_250511528(v15, v14);
    sub_250511528(v17, v18);
    sub_250511528(v19, v20);
    sub_250511528(v21, v22);
    sub_2504DBC4C(v21, v22);
    uint64_t v23 = sub_25056D81C(v21, v22);
    uint64_t v40 = v24;
    uint64_t v41 = v23;
    sub_250511528(v15, v14);
    sub_250511528(v17, v18);
    sub_250511528(v19, v20);
    uint64_t result = sub_250511528(v21, v22);
    unint64_t v26 = *(void *)(v43 + 16);
    unint64_t v25 = *(void *)(v43 + 24);
    uint64_t v2 = v43;
    if (v26 >= v25 >> 1)
    {
      uint64_t result = sub_250511E08(v25 > 1, v26 + 1, 1);
      uint64_t v2 = v43;
    }
    *(void *)(v2 + 16) = v26 + 1;
    uint64_t v27 = v2 + 16 * v26;
    *(void *)(v27 + 32) = v41;
    *(void *)(v27 + 40) = v40;
    uint64_t v3 = v37;
    int64_t v9 = 1 << *(unsigned char *)(v37 + 32);
    if (v42 >= v9) {
      goto LABEL_25;
    }
    uint64_t v8 = v36;
    uint64_t v28 = *(void *)(v36 + 8 * v11);
    if ((v28 & v39) == 0) {
      goto LABEL_26;
    }
    int v5 = v35;
    if (*(_DWORD *)(v37 + 36) != v35) {
      goto LABEL_27;
    }
    unint64_t v29 = v28 & (-2 << (v42 & 0x3F));
    if (v29)
    {
      int64_t v9 = __clz(__rbit64(v29)) | v42 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v34;
    }
    else
    {
      unint64_t v30 = v11 + 1;
      unint64_t v31 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v34;
      if (v11 + 1 < v31)
      {
        unint64_t v32 = *(void *)(v36 + 8 * v30);
        if (v32)
        {
LABEL_20:
          int64_t v9 = __clz(__rbit64(v32)) + (v30 << 6);
        }
        else
        {
          while (v31 - 2 != v11)
          {
            unint64_t v32 = *(void *)(v33 + 8 * v11++);
            if (v32)
            {
              unint64_t v30 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v7 = v38 + 1;
    unint64_t v6 = v9;
    if (v38 + 1 == v10) {
      return v2;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_2504DDFA8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v37 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v37;
  }
  uint64_t v2 = a1;
  uint64_t v38 = MEMORY[0x263F8EE78];
  sub_250511FC0(0, v1, 0);
  uint64_t v37 = v38;
  unint64_t result = sub_25051A020(v2);
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 64;
  uint64_t v28 = v2 + 80;
  int64_t v29 = v1;
  int v30 = v4;
  uint64_t v31 = v2 + 64;
  uint64_t v32 = v2;
  while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v9 = result >> 6;
    if ((*(void *)(v6 + 8 * (result >> 6)) & (1 << result)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v33 = v5;
    uint64_t v34 = 1 << result;
    uint64_t v10 = *(void *)(v2 + 56);
    unint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * result);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    unint64_t v14 = (uint64_t *)(v10 + 48 * result);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v18 = v14[2];
    unint64_t v17 = v14[3];
    uint64_t v19 = v14[4];
    unint64_t v35 = v14[5];
    int64_t v36 = result;
    sub_2504DBC4C(v12, v13);
    sub_2504DBC4C(v16, v15);
    sub_2504DBC4C(v18, v17);
    sub_2504DBC4C(v19, v35);
    sub_2504DBC4C(v12, v13);
    sub_2504DBC4C(v16, v15);
    sub_2504DBC4C(v18, v17);
    sub_2504DBC4C(v19, v35);
    sub_250511528(v12, v13);
    sub_250511528(v16, v15);
    sub_250511528(v18, v17);
    sub_250511528(v19, v35);
    sub_2504DBC4C(v12, v13);
    sub_2504DBC4C(v16, v15);
    sub_250511528(v12, v13);
    sub_250511528(v16, v15);
    sub_250511528(v18, v17);
    unint64_t result = sub_250511528(v19, v35);
    unint64_t v21 = *(void *)(v38 + 16);
    unint64_t v20 = *(void *)(v38 + 24);
    if (v21 >= v20 >> 1) {
      unint64_t result = sub_250511FC0(v20 > 1, v21 + 1, 1);
    }
    *(void *)(v38 + 16) = v21 + 1;
    unint64_t v22 = (void *)(v38 + 32 * v21);
    v22[4] = v12;
    v22[5] = v13;
    v22[6] = v16;
    v22[7] = v15;
    uint64_t v2 = v32;
    int64_t v7 = 1 << *(unsigned char *)(v32 + 32);
    if (v36 >= v7) {
      goto LABEL_25;
    }
    uint64_t v6 = v31;
    uint64_t v23 = *(void *)(v31 + 8 * v9);
    if ((v23 & v34) == 0) {
      goto LABEL_26;
    }
    int v4 = v30;
    if (*(_DWORD *)(v32 + 36) != v30) {
      goto LABEL_27;
    }
    unint64_t v24 = v23 & (-2 << (v36 & 0x3F));
    if (v24)
    {
      int64_t v7 = __clz(__rbit64(v24)) | v36 & 0xFFFFFFFFFFFFFFC0;
      int64_t v8 = v29;
    }
    else
    {
      unint64_t v25 = v9 + 1;
      unint64_t v26 = (unint64_t)(v7 + 63) >> 6;
      int64_t v8 = v29;
      if (v9 + 1 < v26)
      {
        unint64_t v27 = *(void *)(v31 + 8 * v25);
        if (v27)
        {
LABEL_20:
          int64_t v7 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v9)
          {
            unint64_t v27 = *(void *)(v28 + 8 * v9++);
            if (v27)
            {
              unint64_t v25 = v9 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v5 = v33 + 1;
    unint64_t result = v7;
    if (v33 + 1 == v8) {
      return v37;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2504DE2E4(uint64_t a1)
{
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v7 = MEMORY[0x270FA5388](v62, v3, v4, v5, v6);
  uint64_t v61 = (uint64_t *)((char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x270FA5388](v7, v9, v10, v11, v12);
  int64_t v60 = (uint64_t *)((char *)&v53 - v14);
  MEMORY[0x270FA5388](v13, v15, v16, v17, v18);
  unint64_t v59 = (uint64_t *)((char *)&v53 - v19);
  int64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (!v20) {
    return v21;
  }
  uint64_t v53 = v1;
  uint64_t v65 = MEMORY[0x263F8EE78];
  sub_250511FF0(0, v20, 0);
  uint64_t result = sub_25051A020(a1);
  uint64_t v24 = result;
  uint64_t v25 = 0;
  uint64_t v26 = a1 + 64;
  uint64_t v54 = a1 + 80;
  int64_t v55 = v20;
  uint64_t v57 = a1 + 64;
  uint64_t v58 = a1;
  uint64_t v56 = v23;
  while ((v24 & 0x8000000000000000) == 0 && v24 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v29 = (unint64_t)v24 >> 6;
    if ((*(void *)(v26 + 8 * ((unint64_t)v24 >> 6)) & (1 << v24)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v23) {
      goto LABEL_26;
    }
    uint64_t v63 = v25;
    uint64_t v64 = 1 << v24;
    uint64_t v30 = v62;
    uint64_t v31 = (uint64_t)v59;
    uint64_t v32 = (uint64_t)v59 + *(int *)(v62 + 48);
    uint64_t v33 = *(void *)(a1 + 48);
    uint64_t v34 = *(void *)(a1 + 56);
    unint64_t v35 = (uint64_t *)(v33 + 16 * v24);
    uint64_t v36 = *v35;
    unint64_t v37 = v35[1];
    *unint64_t v59 = *v35;
    *(void *)(v31 + 8) = v37;
    uint64_t v38 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_25051B91C(v34 + *(void *)(*(void *)(v38 - 8) + 72) * v24, v32, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v39 = v60;
    *int64_t v60 = v36;
    v39[1] = v37;
    sub_25051B91C(v32, (uint64_t)v39 + *(int *)(v30 + 48), type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v40 = (uint64_t)v39;
    uint64_t v41 = v61;
    sub_2505283F0(v40, (uint64_t)v61, &qword_269AB5E90);
    sub_2504DBC4C(v36, v37);
    sub_2504DBC4C(v36, v37);
    sub_2504DAF60(v31, &qword_269AB5E90);
    uint64_t v42 = *v41;
    unint64_t v43 = v41[1];
    char v44 = *((unsigned char *)v41 + *(int *)(v30 + 48));
    sub_2504DBC4C(*v41, v43);
    sub_2504DAF60((uint64_t)v41, &qword_269AB5E90);
    uint64_t v21 = v65;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_250511FF0(0, *(void *)(v21 + 16) + 1, 1);
      uint64_t v21 = v65;
    }
    unint64_t v46 = *(void *)(v21 + 16);
    unint64_t v45 = *(void *)(v21 + 24);
    if (v46 >= v45 >> 1)
    {
      uint64_t result = sub_250511FF0(v45 > 1, v46 + 1, 1);
      uint64_t v21 = v65;
    }
    *(void *)(v21 + 16) = v46 + 1;
    uint64_t v47 = v21 + 24 * v46;
    *(void *)(v47 + 32) = v42;
    *(void *)(v47 + 40) = v43;
    *(unsigned char *)(v47 + 48) = v44;
    a1 = v58;
    int64_t v27 = 1 << *(unsigned char *)(v58 + 32);
    if (v24 >= v27) {
      goto LABEL_27;
    }
    uint64_t v26 = v57;
    uint64_t v48 = *(void *)(v57 + 8 * v29);
    if ((v48 & v64) == 0) {
      goto LABEL_28;
    }
    LODWORD(v23) = v56;
    if (*(_DWORD *)(v58 + 36) != v56) {
      goto LABEL_29;
    }
    unint64_t v49 = v48 & (-2 << (v24 & 0x3F));
    if (v49)
    {
      int64_t v27 = __clz(__rbit64(v49)) | v24 & 0xFFFFFFFFFFFFFFC0;
      int64_t v28 = v55;
    }
    else
    {
      unint64_t v50 = v29 + 1;
      unint64_t v51 = (unint64_t)(v27 + 63) >> 6;
      int64_t v28 = v55;
      if (v29 + 1 < v51)
      {
        unint64_t v52 = *(void *)(v57 + 8 * v50);
        if (v52)
        {
LABEL_22:
          int64_t v27 = __clz(__rbit64(v52)) + (v50 << 6);
        }
        else
        {
          while (v51 - 2 != v29)
          {
            unint64_t v52 = *(void *)(v54 + 8 * v29++);
            if (v52)
            {
              unint64_t v50 = v29 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v25 = v63 + 1;
    uint64_t v24 = v27;
    if (v63 + 1 == v28) {
      return v21;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2504DE698(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  MEMORY[0x270FA5388](v2 - 8, v3, v4, v5, v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v9 = *(void *)(v64 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v64, v10, v11, v12, v13);
  uint64_t v59 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v16, v17, v18, v19);
  uint64_t v56 = (uint64_t)&v55 - v20;
  uint64_t v21 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v63 = *(void *)(v21 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v21, v22, v23, v24, v25);
  int64_t v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26, v29, v30, v31, v32);
  uint64_t v34 = (char *)&v55 - v33;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v61 = a1 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & v35;
  int64_t v62 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v57 = v9;
  uint64_t v39 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v40 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v42 = 0;
  unint64_t v60 = MEMORY[0x263F8EE78];
  if (!v38) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v43 = __clz(__rbit64(v38));
  v38 &= v38 - 1;
  for (unint64_t i = v43 | (v42 << 6); ; unint64_t i = __clz(__rbit64(v46)) + (v42 << 6))
  {
    sub_25051B91C(*(void *)(v40 + 56) + *(void *)(v63 + 72) * i, (uint64_t)v34, type metadata accessor for GroupMembership.MemberProperties);
    sub_25051C8F4((uint64_t)v34, (uint64_t)v28, type metadata accessor for GroupMembership.MemberProperties);
    sub_2504DAEFC((uint64_t)&v28[*(int *)(v21 + 24)], (uint64_t)v8, &qword_269AB5E80);
    sub_25051AF3C((uint64_t)v28, type metadata accessor for GroupMembership.MemberProperties);
    if ((*v39)(v8, 1, v64) == 1)
    {
      uint64_t result = sub_2504DAF60((uint64_t)v8, &qword_269AB5E80);
      if (v38) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v58 = type metadata accessor for UserKeyingInfo;
      uint64_t v48 = v56;
      sub_25051C8F4((uint64_t)v8, v56, type metadata accessor for UserKeyingInfo);
      sub_25051C8F4(v48, v59, v58);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v60 = sub_250570F04(0, *(void *)(v60 + 16) + 1, 1, v60);
      }
      unint64_t v50 = *(void *)(v60 + 16);
      unint64_t v49 = *(void *)(v60 + 24);
      unint64_t v51 = (uint64_t (*)(uint64_t))(v50 + 1);
      if (v50 >= v49 >> 1)
      {
        uint64_t v58 = (uint64_t (*)(uint64_t))(v50 + 1);
        uint64_t v54 = sub_250570F04(v49 > 1, v50 + 1, 1, v60);
        unint64_t v51 = v58;
        unint64_t v60 = v54;
      }
      uint64_t v52 = v59;
      unint64_t v53 = v60;
      *(void *)(v60 + 16) = v51;
      uint64_t result = sub_25051C8F4(v52, v53+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v50, type metadata accessor for UserKeyingInfo);
      if (v38) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v45 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v45 >= v62) {
      goto LABEL_29;
    }
    unint64_t v46 = *(void *)(v61 + 8 * v45);
    ++v42;
    if (!v46)
    {
      int64_t v42 = v45 + 1;
      if (v45 + 1 >= v62) {
        goto LABEL_29;
      }
      unint64_t v46 = *(void *)(v61 + 8 * v42);
      if (!v46)
      {
        int64_t v42 = v45 + 2;
        if (v45 + 2 >= v62) {
          goto LABEL_29;
        }
        unint64_t v46 = *(void *)(v61 + 8 * v42);
        if (!v46)
        {
          int64_t v42 = v45 + 3;
          if (v45 + 3 >= v62) {
            goto LABEL_29;
          }
          unint64_t v46 = *(void *)(v61 + 8 * v42);
          if (!v46) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v38 = (v46 - 1) & v46;
  }
  int64_t v47 = v45 + 4;
  if (v47 >= v62)
  {
LABEL_29:
    swift_release();
    return v60;
  }
  unint64_t v46 = *(void *)(v61 + 8 * v47);
  if (v46)
  {
    int64_t v42 = v47;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v42 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v42 >= v62) {
      goto LABEL_29;
    }
    unint64_t v46 = *(void *)(v61 + 8 * v42);
    ++v47;
    if (v46) {
      goto LABEL_22;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t KeyShare.init()@<X0>(uint64_t *a1@<X8>)
{
  sub_2505BD810();
  swift_allocObject();
  uint64_t v4 = 0x2000000000;
  uint64_t v5 = sub_2505BD7E0();
  uint64_t result = sub_250511D3C((int *)&v4);
  uint64_t v3 = v5 | 0x4000000000000000;
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t KeyShare.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x2504DED0CLL);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 == 32)
      {
        *a3 = result;
        a3[1] = a2;
      }
      else
      {
LABEL_8:
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v9 = 263;
        *(_OWORD *)(v9 + 8) = xmmword_2505BFE90;
        *(_OWORD *)(v9 + 24) = xmmword_2505BFE50;
        *(void *)(v9 + 40) = 0x80000002505C8CB0;
        swift_willThrow();
        return sub_250511528(v4, a2);
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(result + 16);
      uint64_t v6 = *(void *)(result + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t static KeyShare.^ infix(_:_:)()
{
  return sub_2505BDCB0();
}

{
  sub_2505BDCE0();
  return sub_2505BDCB0();
}

uint64_t sub_2504DED88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned __int8 v25 = BYTE6(a4);
  unint64_t v4 = a4 >> 62;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_56;
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      uint64_t v9 = v5 & (v5 >> 63);
      if (a2 - a1 < v5) {
        uint64_t v5 = a2 - a1;
      }
      if (a1) {
        uint64_t v10 = v5;
      }
      else {
        uint64_t v10 = v9;
      }
      uint64_t v27 = sub_2505723A0(v10);
      unint64_t v28 = v11;
      sub_25057532C(&v27, 0);
      uint64_t v12 = v27;
      unint64_t v13 = v28;
      if (v10 < 0) {
        goto LABEL_54;
      }
      if (!v10) {
        goto LABEL_39;
      }
      unint64_t v14 = 0;
      uint64_t v15 = (int)a3;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_57;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v5 = BYTE6(a4);
      goto LABEL_6;
  }
  while (2)
  {
    if (v10 == v14)
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
    }
    unint64_t v16 = v14++;
    uint64_t v17 = 0;
    switch(v28 >> 62)
    {
      case 1uLL:
        uint64_t v17 = (int)v27;
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v27 + 16);
        break;
      default:
        break;
    }
    if (__OFADD__(v17, v16)) {
      goto LABEL_46;
    }
    switch((int)v4)
    {
      case 1:
        uint64_t v18 = v15 + v16;
        if (__OFADD__(v15, v16)) {
          goto LABEL_48;
        }
        if (v18 < v15 || v18 >= a3 >> 32) {
          goto LABEL_50;
        }
        if (!sub_2505BD7D0()) {
          goto LABEL_61;
        }
        if (!__OFSUB__(v18, sub_2505BD800())) {
          goto LABEL_14;
        }
        goto LABEL_52;
      case 2:
        uint64_t v19 = *(void *)(a3 + 16);
        uint64_t v20 = v19 + v16;
        if (__OFADD__(v19, v16)) {
          goto LABEL_49;
        }
        if (v20 < v19) {
          goto LABEL_51;
        }
        if (v20 >= *(void *)(a3 + 24)) {
          goto LABEL_53;
        }
        if (!sub_2505BD7D0()) {
          goto LABEL_62;
        }
        if (!__OFSUB__(v20, sub_2505BD800()))
        {
LABEL_14:
          uint64_t v15 = (int)a3;
LABEL_15:
          sub_2505BD910();
          if (v10 == v14) {
            goto LABEL_38;
          }
          continue;
        }
        __break(1u);
LABEL_38:
        uint64_t v12 = v27;
        unint64_t v13 = v28;
LABEL_39:
        sub_2504DBC4C(v12, v13);
        sub_2505BDCC0();
        switch(v13 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v12), v12)) {
              goto LABEL_58;
            }
            uint64_t v21 = HIDWORD(v12) - (int)v12;
LABEL_43:
            if (v21 < 0) {
              goto LABEL_55;
            }
LABEL_44:
            sub_2505BD8D0();
            return sub_250511528(v27, v28);
          case 2uLL:
            uint64_t v23 = *(void *)(v12 + 16);
            uint64_t v22 = *(void *)(v12 + 24);
            uint64_t v21 = v22 - v23;
            if (!__OFSUB__(v22, v23)) {
              goto LABEL_43;
            }
            goto LABEL_59;
          default:
            goto LABEL_44;
        }
      case 3:
        goto LABEL_60;
      default:
        if (v16 < v25) {
          goto LABEL_15;
        }
        goto LABEL_47;
    }
  }
}

uint64_t sub_2504DF280(uint64_t a1)
{
  unint64_t v2 = sub_250523310();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DF2BC(uint64_t a1)
{
  unint64_t v2 = sub_250523310();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t KeyOffset.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x2504DF5BCLL);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 32)
      {
        *a3 = result;
        a3[1] = a2;
      }
      else
      {
LABEL_8:
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v10 = sub_2505BDC40();
        __swift_project_value_buffer(v10, (uint64_t)qword_269AC3188);
        os_log_type_t v11 = sub_2505BE3D0();
        sub_2504DBC4C(v5, a2);
        uint64_t v12 = sub_2505BDC20();
        if (os_log_type_enabled(v12, v11))
        {
          unint64_t v13 = (_DWORD *)swift_slowAlloc();
          *unint64_t v13 = 134218240;
          unint64_t v14 = v13;
          switch((int)v3)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(v5), v5)) {
                goto LABEL_16;
              }
              goto LABEL_20;
            case 2:
              if (!__OFSUB__(*(void *)(v5 + 24), *(void *)(v5 + 16))) {
                goto LABEL_16;
              }
              goto LABEL_21;
            default:
LABEL_16:
              sub_2505BE430();
              sub_250511528(v5, a2);
              *((_WORD *)v14 + 6) = 2048;
              sub_2505BE430();
              _os_log_impl(&dword_2504D2000, v12, v11, "KeyOffset has invalid length, got %ld expected %ld", (uint8_t *)v14, 0x16u);
              MEMORY[0x25337FF10](v14, -1, -1);
              break;
          }
        }
        else
        {
          sub_250511528(v5, a2);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v15 = 264;
        *(_OWORD *)(v15 + 8) = xmmword_2505BFEA0;
        *(_OWORD *)(v15 + 24) = xmmword_2505BFE50;
        *(void *)(v15 + 40) = 0x80000002505C8CB0;
        swift_willThrow();
        return sub_250511528(v5, a2);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_2504DF5E0(uint64_t a1)
{
  unint64_t v2 = sub_250523364();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DF61C(uint64_t a1)
{
  unint64_t v2 = sub_250523364();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t static Nonce.nonceLength.getter()
{
  return 12;
}

uint64_t Nonce.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x2504DF924);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 12)
      {
        *a3 = result;
        a3[1] = a2;
      }
      else
      {
LABEL_8:
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v10 = sub_2505BDC40();
        __swift_project_value_buffer(v10, (uint64_t)qword_269AC3188);
        os_log_type_t v11 = sub_2505BE3D0();
        sub_2504DBC4C(v5, a2);
        uint64_t v12 = sub_2505BDC20();
        if (os_log_type_enabled(v12, v11))
        {
          unint64_t v13 = (_DWORD *)swift_slowAlloc();
          *unint64_t v13 = 134218240;
          unint64_t v14 = v13;
          switch((int)v3)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(v5), v5)) {
                goto LABEL_16;
              }
              goto LABEL_20;
            case 2:
              if (!__OFSUB__(*(void *)(v5 + 24), *(void *)(v5 + 16))) {
                goto LABEL_16;
              }
              goto LABEL_21;
            default:
LABEL_16:
              sub_2505BE430();
              sub_250511528(v5, a2);
              *((_WORD *)v14 + 6) = 2048;
              sub_2505BE430();
              _os_log_impl(&dword_2504D2000, v12, v11, "Nonce has invalid length, got %ld expected %ld", (uint8_t *)v14, 0x16u);
              MEMORY[0x25337FF10](v14, -1, -1);
              break;
          }
        }
        else
        {
          sub_250511528(v5, a2);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v15 = 262;
        *(_OWORD *)(v15 + 8) = xmmword_2505BFEB0;
        *(_OWORD *)(v15 + 24) = xmmword_2505BFE50;
        *(void *)(v15 + 40) = 0x80000002505C8CB0;
        swift_willThrow();
        return sub_250511528(v5, a2);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t _s14GroupKitCrypto0A2IDV4hash4intoys6HasherVz_tF_0()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  sub_2504DBC4C(v2, v1);
  sub_2505BD950();
  return sub_250511528(v2, v1);
}

uint64_t _s14GroupKitCrypto0A0C0A15DBDecryptionKeyV0E4TypeO9hashValueSivg_0()
{
  return sub_2505BE880();
}

uint64_t sub_2504DF9EC()
{
  return sub_2505BE880();
}

uint64_t sub_2504DFA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_2505BE780();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2504DFAC4(uint64_t a1)
{
  unint64_t v2 = sub_2505233B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2504DFB00(uint64_t a1)
{
  unint64_t v2 = sub_2505233B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _s14GroupKitCrypto0A2IDV9hashValueSivg_0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_2505BE850();
  sub_2504DBC4C(v1, v2);
  sub_2505BD950();
  sub_250511528(v1, v2);
  return sub_2505BE880();
}

uint64_t sub_2504DFBA4()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  sub_2505BE850();
  sub_2504DBC4C(v1, v2);
  sub_2505BD950();
  sub_250511528(v1, v2);
  return sub_2505BE880();
}

uint64_t signRequestForGroupBlob(groupKitUserId:groupID:dsid:nonce:)(_OWORD *a1, long long *a2, void *a3, _OWORD *a4)
{
  uint64_t v9 = sub_2505BE040();
  *(void *)(v4 + 512) = v9;
  *(void *)(v4 + 520) = *(void *)(v9 - 8);
  *(void *)(v4 + 528) = swift_task_alloc();
  *(void *)(v4 + 536) = type metadata accessor for GKCrypto_GroupBlobRequest(0);
  *(void *)(v4 + 544) = swift_task_alloc();
  uint64_t v10 = sub_2505BE000();
  *(void *)(v4 + 552) = v10;
  *(void *)(v4 + 560) = *(void *)(v10 - 8);
  *(void *)(v4 + 568) = swift_task_alloc();
  type metadata accessor for PCSKeyPair();
  *(void *)(v4 + 576) = swift_task_alloc();
  long long v11 = *a2;
  *(_OWORD *)(v4 + 584) = *a1;
  *(_OWORD *)(v4 + 600) = v11;
  uint64_t v12 = a3[1];
  *(void *)(v4 + 616) = *a3;
  *(void *)(v4 + 624) = v12;
  *(_OWORD *)(v4 + 632) = *a4;
  return MEMORY[0x270FA2498](sub_2504DFDBC, 0, 0);
}

uint64_t sub_2504DFDBC()
{
  uint64_t v12 = v0;
  if (qword_26B202478 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_25051AD8C((uint64_t)&byte_26B202498, v0 + 16);
  sub_2504DAEFC(v0 + 232, v0 + 336, &qword_26B202158);
  if (*(void *)(v0 + 360))
  {
    uint64_t v1 = *(void *)(v0 + 624);
    uint64_t v2 = *(void *)(v0 + 616);
    sub_2504DAEE4((long long *)(v0 + 336), v0 + 376);
    sub_25051ADE8(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 400);
    uint64_t v4 = *(void *)(v0 + 408);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 376), v3);
    v11[0] = v2;
    v11[1] = v1;
    (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))(v11, 0xD000000000000022, 0x80000002505C8D10, v3, v4);
    __swift_destroy_boxed_opaque_existential_1(v0 + 376);
    uint64_t v6 = *(void *)(v0 + 440);
    uint64_t v7 = *(void *)(v0 + 448);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 416), v6);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 648) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_2504E00C0;
    uint64_t v9 = *(void *)(v0 + 576);
    return v10(v9, v6, v7);
  }
  else
  {
    sub_2504DAF60(v0 + 336, &qword_26B202158);
    return sub_2505BE5F0();
  }
}

uint64_t sub_2504E00C0()
{
  *(void *)(*(void *)v1 + 656) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_2504E0AF8;
  }
  else {
    uint64_t v2 = sub_2504E01D4;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2504E01D4()
{
  uint64_t v82 = v0;
  uint64_t v1 = v0 + 416;
  uint64_t v2 = *(void *)(v0 + 656);
  long long v3 = *(_OWORD *)(v0 + 584);
  long long v80 = *(_OWORD *)(v0 + 600);
  long long v81 = v3;
  sub_25058A02C((uint64_t *)&v80, (uint64_t *)&v81);
  if (v2)
  {
    sub_25051AF3C(*(void *)(v0 + 576), (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
    return v53();
  }
  if (v73 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    unint64_t v4 = *(void *)(v0 + 608);
    uint64_t v5 = *(void *)(v0 + 600);
    unint64_t v6 = *(void *)(v0 + 592);
    uint64_t v7 = *(void *)(v0 + 584);
    uint64_t v8 = sub_2505BDC40();
    __swift_project_value_buffer(v8, (uint64_t)qword_269AC3188);
    os_log_type_t v9 = sub_2505BE3D0();
    sub_2504DBC4C(v5, v4);
    sub_2504DBC4C(v7, v6);
    sub_2504DBC4C(v5, v4);
    sub_2504DBC4C(v7, v6);
    uint64_t v10 = sub_2505BDC20();
    os_log_type_t v11 = v9;
    BOOL v12 = os_log_type_enabled(v10, v9);
    unint64_t v13 = *(void *)(v0 + 608);
    uint64_t v14 = *(void *)(v0 + 600);
    unint64_t v15 = *(void *)(v0 + 592);
    uint64_t v16 = *(void *)(v0 + 584);
    if (v12)
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      uint64_t v72 = v70;
      *(_DWORD *)uint64_t v17 = 136315394;
      sub_2504DBC4C(v14, v13);
      uint64_t v18 = sub_2505BD8B0();
      os_log_type_t type = v11;
      unint64_t v20 = v19;
      sub_250511528(v14, v13);
      *(void *)(v0 + 496) = sub_25051171C(v18, v20, &v72);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      sub_250511528(v14, v13);
      sub_250511528(v14, v13);
      *(_WORD *)(v17 + 12) = 2080;
      sub_2504DBC4C(v16, v15);
      uint64_t v21 = sub_2505BD8B0();
      unint64_t v23 = v22;
      sub_250511528(v16, v15);
      *(void *)(v0 + 504) = sub_25051171C(v21, v23, &v72);
      sub_2505BE430();
      uint64_t v1 = v0 + 416;
      swift_bridgeObjectRelease();
      sub_250511528(v16, v15);
      sub_250511528(v16, v15);
      _os_log_impl(&dword_2504D2000, v10, type, "GroupAccessInfo not found in storage for groupID %s and userID %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v70, -1, -1);
      MEMORY[0x25337FF10](v17, -1, -1);
    }
    else
    {
      sub_250511528(*(void *)(v0 + 600), *(void *)(v0 + 608));
      sub_250511528(v14, v13);
      sub_250511528(v16, v15);
      sub_250511528(v16, v15);
    }

    uint64_t v37 = *(void *)(v0 + 576);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v38 = 358;
    *(_OWORD *)(v38 + 8) = xmmword_2505BFED0;
    *(void *)(v38 + 24) = 0x80000002505C8D40;
    *(void *)(v38 + 32) = 0xD000000000000052;
    *(void *)(v38 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_25051AF3C(v37, (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
    goto LABEL_13;
  }
  os_log_t log = v74;
  unint64_t v71 = v75;
  uint64_t v59 = v72;
  uint64_t v60 = v76;
  unint64_t v61 = v77;
  uint64_t v62 = v78;
  unint64_t v63 = v79;
  unint64_t v64 = v73;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505BFEC0;
  if (qword_269AB5680 != -1) {
    swift_once();
  }
  uint64_t v65 = *(void *)(v0 + 632);
  uint64_t v66 = *(void *)(v0 + 640);
  unint64_t v25 = *(void *)(v0 + 608);
  uint64_t v26 = *(void *)(v0 + 600);
  uint64_t v27 = *(void *)(v0 + 568);
  uint64_t v28 = qword_269AC37B0;
  unint64_t v29 = *(void *)algn_269AC37B8;
  *(void *)(inited + 32) = qword_269AC37B0;
  *(void *)(inited + 40) = v29;
  *(void *)(inited + 48) = v26;
  *(void *)(inited + 56) = v25;
  sub_2504DBC4C(v28, v29);
  sub_2504DBC4C(v26, v25);
  uint64_t v30 = sub_250576544(inited);
  unint64_t v32 = v31;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v58 = v30;
  unint64_t v67 = v32;
  sub_2505BDFE0();
  uint64_t v33 = (void *)swift_task_alloc();
  v33[2] = v26;
  v33[3] = v25;
  v33[4] = v27;
  v33[5] = v65;
  v33[6] = v66;
  sub_250528338(&qword_269AB5A00, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
  sub_2505BDB80();
  swift_task_dealloc();
  uint64_t v34 = sub_25050D0BC(&qword_269AB5478, &qword_269AC3250, (unint64_t *)algn_269AC3258);
  unint64_t v36 = v35;
  *(void *)(v0 + 480) = v34;
  *(void *)(v0 + 488) = v35;
  sub_25051AE60();
  sub_2505BDFF0();
  uint64_t v39 = *(void *)(v0 + 544);
  uint64_t v40 = *(void *)(v0 + 528);
  uint64_t v41 = *(void *)(v0 + 520);
  uint64_t v42 = *(void *)(v0 + 512);
  sub_250511528(v34, v36);
  uint64_t v43 = sub_2505BE010();
  uint64_t v45 = v44;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  sub_250511528(*(void *)(v39 + 56), *(void *)(v39 + 64));
  *(void *)(v39 + 56) = v43;
  *(void *)(v39 + 64) = v45;
  uint64_t v46 = sub_2505BDB40();
  uint64_t v48 = *(void *)(v0 + 576);
  uint64_t v49 = *(void *)(v0 + 568);
  uint64_t v50 = *(void *)(v0 + 560);
  uint64_t v51 = *(void *)(v0 + 552);
  uint64_t v52 = *(void *)(v0 + 544);
  uint64_t v55 = v46;
  uint64_t v56 = v47;
  sub_250511528(v58, v67);
  sub_25051AEB4(v59, v64, (uint64_t)log, v71, v60, v61, v62, v63);
  sub_25051AF3C(v52, type metadata accessor for GKCrypto_GroupBlobRequest);
  sub_25051AF3C(v48, (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
  __swift_destroy_boxed_opaque_existential_1(v0 + 416);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v57(v55, v56);
}

uint64_t sub_2504E0AF8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 416);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_2504E0B90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v27 = a5;
  unint64_t v28 = a6;
  uint64_t v9 = sub_2505BE0B0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  uint64_t v17 = *(void *)(a1 + 24);
  unint64_t v18 = *(void *)(a1 + 32);
  sub_2504DBC4C(a2, a3);
  sub_250511528(v17, v18);
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  sub_2505BDFA0();
  uint64_t v19 = sub_2505BDF10();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  *(void *)(a1 + 40) = v19;
  *(void *)(a1 + 48) = v21;
  uint64_t v22 = *(void *)(a1 + 8);
  unint64_t v23 = *(void *)(a1 + 16);
  uint64_t v25 = v27;
  unint64_t v24 = v28;
  sub_2504DBC4C(v27, v28);
  uint64_t result = sub_250511528(v22, v23);
  *(void *)(a1 + 8) = v25;
  *(void *)(a1 + 16) = v24;
  return result;
}

uint64_t sub_2504E0CF0()
{
  return sub_25050D0BC(&qword_269AB5478, &qword_269AC3250, (unint64_t *)algn_269AC3258);
}

unint64_t sub_2504E0D6C(char a1)
{
  unint64_t result = 0x4777654E74696E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000025;
      break;
    case 3:
      unint64_t result = 0xD000000000000029;
      break;
    case 4:
      unint64_t result = 0x4E676E696E696F6ALL;
      break;
    case 5:
    case 7:
      unint64_t result = 0xD000000000000021;
      break;
    case 6:
      unint64_t result = 0x6F724764696C6176;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    case 11:
      unint64_t result = 0x6C654470756F7267;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Group.groupID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_2504DBC4C(v2, v3);
}

uint64_t sub_2504E0F0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 32);
  return result;
}

uint64_t Group.member.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  *a1 = v2;
  a1[1] = v3;
  return sub_2504DBC4C(v2, v3);
}

uint64_t sub_2504E0F5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 56) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2504E0FBC@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2504E1004()
{
  swift_beginAccess();
  return *(unsigned int *)(v0 + 64);
}

uint64_t sub_2504E1038()
{
  int v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
  if (v1 == 5) {
    return 1;
  }
  else {
    return 2 * (v1 != 6);
  }
}

uint64_t sub_2504E105C()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  v9[0] = v2;
  v9[1] = v3;
  uint64_t v4 = v0[5];
  unint64_t v5 = v0[6];
  *(void *)&long long v7 = v4;
  *((void *)&v7 + 1) = v5;
  uint64_t result = sub_25058A1AC(v9, (uint64_t *)&v7);
  if (!v1)
  {
    if (qword_26B202478 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_2504DAEFC((uint64_t)&unk_26B202540, (uint64_t)&v7, &qword_26B2022D8);
    if (!v8) {
      goto LABEL_8;
    }
    sub_2504DAEE4(&v7, (uint64_t)v9);
    swift_endAccess();
    __swift_project_boxed_opaque_existential_1(v9, v10);
    *(void *)&long long v7 = v2;
    *((void *)&v7 + 1) = v3;
    uint64_t v11 = v4;
    unint64_t v12 = v5;
    sub_2504DBC4C(v2, v3);
    sub_2504DBC4C(v4, v5);
    sub_25059AFAC((uint64_t *)&v7, &v11);
    sub_250511528(v4, v5);
    sub_250511528(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    swift_beginAccess();
    sub_2504DAEFC((uint64_t)&unk_26B202540, (uint64_t)&v7, &qword_26B2022D8);
    if (v8)
    {
      sub_2504DAEE4(&v7, (uint64_t)v9);
      swift_endAccess();
      __swift_project_boxed_opaque_existential_1(v9, v10);
      *(void *)&long long v7 = v2;
      *((void *)&v7 + 1) = v3;
      uint64_t v11 = v4;
      unint64_t v12 = v5;
      sub_2504DBC4C(v2, v3);
      sub_2504DBC4C(v4, v5);
      sub_25059B6F4((uint64_t *)&v7, &v11);
      sub_250511528(v4, v5);
      sub_250511528(v2, v3);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      *((unsigned char *)v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 11;
    }
    else
    {
LABEL_8:
      sub_2504DAF60((uint64_t)&v7, &qword_26B2022D8);
      uint64_t result = sub_2505BE5F0();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_2504E12C0(uint64_t *a1, int a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, unsigned __int8 a14, uint64_t a15, unint64_t a16)
{
  uint64_t v78 = a8;
  int v64 = a2;
  uint64_t v71 = a15;
  unint64_t v72 = a16;
  int v70 = a14;
  uint64_t v68 = a12;
  unint64_t v69 = a13;
  unint64_t v67 = a11;
  uint64_t v65 = a5;
  uint64_t v66 = a10;
  unint64_t v77 = a9;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A30);
  MEMORY[0x270FA5388](v22 - 8, v23, v24, v25, v26);
  uint64_t v76 = (char *)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *a1;
  uint64_t v29 = a1[1];
  char v30 = *a3;
  uint64_t v31 = *a4;
  uint64_t v32 = a4[1];
  uint64_t v33 = *a6;
  uint64_t v63 = a6[1];
  *(_OWORD *)(v16 + 88) = xmmword_2505BFEE0;
  *(void *)(v16 + 104) = 0;
  *(void *)(v16 + 112) = 0;
  *(_OWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset) = xmmword_2505BFEE0;
  *(_OWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_2505BFEE0;
  uint64_t v34 = v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  uint64_t v35 = *a7;
  uint64_t v74 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  uint64_t v36 = *(void *)(v74 - 8);
  unint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
  uint64_t v75 = v36 + 56;
  v73(v34, 1, 1, v74);
  uint64_t v37 = v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
  *(_OWORD *)uint64_t v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *(void *)(v37 + 32) = 0;
  *(void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  *(unsigned char *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  *(void *)(v16 + 16) = v28;
  *(void *)(v16 + 24) = v29;
  *(_DWORD *)(v16 + 64) = v64;
  *(unsigned char *)(v16 + 32) = v30;
  *(void *)(v16 + 40) = v31;
  *(void *)(v16 + 48) = v32;
  uint64_t v38 = v65;
  sub_25051B91C(v65, v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
  uint64_t v39 = (void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  uint64_t v40 = *(void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  unint64_t v41 = *(void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  uint64_t v42 = v63;
  *uint64_t v39 = v33;
  v39[1] = v42;
  sub_25051B8D4(v40, v41);
  *(void *)(v16 + 56) = v35;
  unint64_t v44 = v77;
  uint64_t v43 = v78;
  *(void *)(v16 + 72) = v78;
  *(void *)(v16 + 80) = v44;
  uint64_t v45 = *(void *)(v16 + 88);
  unint64_t v46 = *(void *)(v16 + 96);
  uint64_t v47 = *(void *)(v16 + 104);
  unint64_t v48 = *(void *)(v16 + 112);
  uint64_t v49 = v66;
  unint64_t v50 = v67;
  *(void *)(v16 + 88) = v66;
  *(void *)(v16 + 96) = v50;
  uint64_t v51 = v68;
  unint64_t v52 = v69;
  *(void *)(v16 + 104) = v68;
  *(void *)(v16 + 112) = v52;
  sub_2504DBC4C(v43, v44);
  sub_25051C95C(v49, v50, v51, v52);
  sub_25051B884(v45, v46, v47, v48);
  *(unsigned char *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = v70;
  unint64_t v53 = (uint64_t *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
  uint64_t v54 = *(void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
  unint64_t v55 = *(void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
  uint64_t v57 = v71;
  unint64_t v56 = v72;
  *unint64_t v53 = v71;
  v53[1] = v56;
  sub_2504DBC4C(v57, v56);
  sub_25051B8D4(v54, v55);
  uint64_t v58 = MEMORY[0x263F8EE78];
  *(void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites) = sub_2504E1B08(MEMORY[0x263F8EE78]);
  unint64_t v59 = sub_2504E1CB8(v58, &qword_269AB5FF0, &qword_269AB5FF8, type metadata accessor for MembershipVerifier, type metadata accessor for MembershipVerifier);
  sub_250511528(v57, v56);
  sub_25051B884(v49, v50, v51, v52);
  sub_250511528(v78, v77);
  sub_25051AF3C(v38, type metadata accessor for UserKeyingInfo);
  *(void *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers) = v59;
  uint64_t v60 = (uint64_t)v76;
  v73((uint64_t)v76, 1, 1, v74);
  uint64_t v61 = v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  swift_beginAccess();
  sub_250528518(v60, v61, &qword_269AB5A30);
  swift_endAccess();
  return v16;
}

unint64_t sub_2504E1668(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E18);
  uint64_t v2 = sub_2505BE640();
  unint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2504DAEFC(v6, (uint64_t)&v15, &qword_269AB5E20);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_250512FEC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_250527D34(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2504E17A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E38);
  uint64_t v2 = (void *)sub_2505BE640();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_2505130F0((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    char v10 = (void *)(v2[7] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2504E18B8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E48);
  uint64_t v2 = (void *)sub_2505BE640();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = (void *)*(v4 - 1);
    uint64_t v5 = *v4;
    swift_retain();
    swift_retain();
    unint64_t result = sub_2505131A4(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2504E19C4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E50);
  uint64_t v2 = sub_2505BE640();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2504DAEFC(v6, (uint64_t)v15, &qword_269AB5E58);
    unint64_t result = sub_25051324C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_250527D34(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2504E1B08(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6000);
  uint64_t v2 = sub_2505BE640();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(v5 - 2);
    unint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    unint64_t v9 = v5[1];
    uint64_t v10 = v5[2];
    unint64_t v11 = v5[3];
    uint64_t v12 = v5[4];
    unint64_t v13 = v5[5];
    sub_2504DBC4C(v6, v7);
    sub_2504DBC4C(v8, v9);
    sub_2504DBC4C(v10, v11);
    sub_2504DBC4C(v12, v13);
    unint64_t result = sub_250513064(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v16 = v6;
    v16[1] = v7;
    long long v17 = (uint64_t *)(v3[7] + 48 * result);
    *long long v17 = v8;
    v17[1] = v9;
    v17[2] = v10;
    v17[3] = v11;
    v17[4] = v12;
    v17[5] = v13;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v5 += 8;
    v3[2] = v20;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2504E1C7C(uint64_t a1)
{
  return sub_2504E1CB8(a1, &qword_269AB5FC8, &qword_269AB5FE8, type metadata accessor for GroupMembership.MemberProperties, type metadata accessor for GroupMembership.MemberProperties);
}

unint64_t sub_2504E1CB8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v9, v10, v11, v12);
  uint64_t v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v15 = sub_2505BE640();
  uint64_t v16 = (void *)v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v16;
  }
  uint64_t v18 = (uint64_t)v14 + *(int *)(v7 + 48);
  uint64_t v19 = v15 + 64;
  unint64_t v20 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v34 = a1;
  uint64_t v21 = a1 + v20;
  uint64_t v22 = *(void *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_2504DAEFC(v21, (uint64_t)v14, v37);
    uint64_t v24 = *v14;
    unint64_t v23 = v14[1];
    unint64_t result = sub_250513064(*v14, v23);
    if (v26) {
      break;
    }
    unint64_t v27 = result;
    *(void *)(v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v28 = (uint64_t *)(v16[6] + 16 * result);
    *uint64_t v28 = v24;
    v28[1] = v23;
    uint64_t v29 = v16[7];
    uint64_t v30 = v35(0);
    unint64_t result = sub_25051C8F4(v18, v29 + *(void *)(*(void *)(v30 - 8) + 72) * v27, v36);
    uint64_t v31 = v16[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_11;
    }
    v16[2] = v33;
    v21 += v22;
    if (!--v17)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2504E1EA8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E68);
  uint64_t v2 = (void *)sub_2505BE640();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    unint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_2504DBC4C(v5, v6);
    swift_bridgeObjectRetain();
    unint64_t result = sub_250513064(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t Group.__allocating_init(groupID:originatorGroupUserID:dsid:)(_OWORD *a1, long long *a2, void *a3)
{
  swift_allocObject();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_2504E2088;
  return Group.init(groupID:originatorGroupUserID:dsid:)(a1, a2, a3);
}

uint64_t sub_2504E2088(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t Group.init(groupID:originatorGroupUserID:dsid:)(_OWORD *a1, long long *a2, void *a3)
{
  *(void *)(v4 + 400) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A20);
  *(void *)(v4 + 408) = swift_task_alloc();
  uint64_t v8 = sub_2505BDF30();
  *(void *)(v4 + 416) = v8;
  *(void *)(v4 + 424) = *(void *)(v8 - 8);
  *(void *)(v4 + 432) = swift_task_alloc();
  *(void *)(v4 + 440) = type metadata accessor for Invite(0);
  *(void *)(v4 + 448) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  *(void *)(v4 + 456) = swift_task_alloc();
  uint64_t v9 = sub_2505BE000();
  *(void *)(v4 + 464) = v9;
  *(void *)(v4 + 472) = *(void *)(v9 - 8);
  *(void *)(v4 + 480) = swift_task_alloc();
  *(void *)(v4 + 488) = swift_task_alloc();
  uint64_t v10 = sub_2505BE0B0();
  *(void *)(v4 + 496) = v10;
  *(void *)(v4 + 504) = *(void *)(v10 - 8);
  *(void *)(v4 + 512) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for MembershipVerifier(0);
  *(void *)(v4 + 520) = v11;
  *(void *)(v4 + 528) = *(void *)(v11 - 8);
  *(void *)(v4 + 536) = swift_task_alloc();
  *(void *)(v4 + 544) = swift_task_alloc();
  *(void *)(v4 + 552) = type metadata accessor for GKCrypto_UserKeys(0);
  *(void *)(v4 + 560) = swift_task_alloc();
  *(void *)(v4 + 568) = type metadata accessor for UserKeyingInfo(0);
  *(void *)(v4 + 576) = swift_task_alloc();
  *(void *)(v4 + 584) = swift_task_alloc();
  long long v12 = *a2;
  *(_OWORD *)(v4 + 592) = *a1;
  *(_OWORD *)(v4 + 608) = v12;
  uint64_t v13 = a3[1];
  *(void *)(v4 + 624) = *a3;
  *(void *)(v4 + 632) = v13;
  return MEMORY[0x270FA2498](sub_2504E24A8, 0, 0);
}

uint64_t sub_2504E24A8()
{
  unint64_t v1 = *(void *)(v0 + 616);
  uint64_t v2 = *(void *)(v0 + 608);
  unint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 592);
  uint64_t v5 = *(void *)(v0 + 400);
  *(_OWORD *)(v5 + 88) = xmmword_2505BFEE0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  uint64_t v6 = OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset;
  *(void *)(v0 + 640) = OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset;
  *(_OWORD *)(v5 + v6) = xmmword_2505BFEE0;
  *(_OWORD *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_2505BFEE0;
  uint64_t v7 = v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  uint64_t v8 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  *(unsigned char *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  *(unsigned char *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 0;
  *(_DWORD *)(v5 + 64) = 0;
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(unsigned char *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = v1;
  sub_2505BD810();
  swift_allocObject();
  sub_2504DBC4C(v4, v3);
  sub_2504DBC4C(v2, v1);
  uint64_t v10 = sub_2505BD7E0();
  uint64_t v11 = sub_25055E540(0x4000000000, v10 | 0x4000000000000000);
  *(void *)(v0 + 648) = v11;
  *(void *)(v0 + 656) = v12;
  *(void *)(v0 + 664) = v13;
  *(void *)(v0 + 672) = v14;
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  uint64_t v17 = *(void *)(v5 + 88);
  uint64_t v18 = *(void *)(v5 + 104);
  unint64_t v29 = *(void *)(v5 + 112);
  unint64_t v30 = *(void *)(v5 + 96);
  *(void *)(v5 + 88) = v11;
  *(void *)(v5 + 96) = v12;
  *(void *)(v5 + 104) = v13;
  *(void *)(v5 + 112) = v14;
  sub_2504DBC4C(v11, v12);
  sub_25051B908(v15, v16);
  sub_25051B884(v17, v30, v18, v29);
  swift_allocObject();
  uint64_t v19 = sub_2505BD7E0();
  uint64_t v20 = sub_25055E814(0x4000000000, v19 | 0x4000000000000000);
  uint64_t v21 = *(void *)(v0 + 632);
  uint64_t v22 = *(void *)(v0 + 624);
  uint64_t v23 = *(void *)(v0 + 400);
  long long v24 = *(_OWORD *)(v0 + 608);
  *(void *)(v23 + 72) = v20;
  *(void *)(v23 + 80) = v25;
  *(_OWORD *)(v0 + 384) = v24;
  *(void *)(v0 + 368) = v22;
  *(void *)(v0 + 376) = v21;
  char v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 680) = v26;
  *char v26 = v0;
  v26[1] = sub_2504E2954;
  uint64_t v27 = *(void *)(v0 + 584);
  return UserKeyingInfo.init(userID:dsid:)(v27, (_OWORD *)(v0 + 384), (void *)(v0 + 368));
}

uint64_t sub_2504E2954()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 688) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_250511528(*(void *)(v2 + 592), *(void *)(v2 + 600));
    unint64_t v3 = sub_2504E3E1C;
  }
  else
  {
    unint64_t v3 = sub_2504E2A74;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_2504E2A74()
{
  uint64_t v138 = v0;
  uint64_t v132 = *(void *)(v0 + 688);
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v5 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  sub_25051C8F4(*(void *)(v0 + 584), v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
  uint64_t v6 = *(void *)(v4 + 40);
  unint64_t v7 = *(void *)(v4 + 48);
  swift_beginAccess();
  char v124 = *(unsigned char *)(v4 + 32);
  uint64_t v8 = v6;
  swift_beginAccess();
  uint64_t v126 = v5;
  sub_25051B91C(v5, v1, type metadata accessor for UserKeyingInfo);
  *(void *)(v3 + 72) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v3 + 80) = xmmword_2505BFEF0;
  unint64_t v134 = v7;
  sub_2504DBC4C(v6, v7);
  sub_2505BDA40();
  *(_DWORD *)uint64_t v3 = 1;
  *(void *)(v3 + 8) = sub_2505BDF10();
  *(void *)(v3 + 16) = v9;
  *(void *)(v3 + 24) = sub_2505BDF10();
  *(void *)(v3 + 32) = v10;
  *(void *)(v3 + 40) = sub_2505BE010();
  *(void *)(v3 + 48) = v11;
  uint64_t v129 = v2;
  *(void *)(v3 + 56) = sub_2505BE010();
  *(void *)(v3 + 64) = v12;
  sub_250528338((unint64_t *)&qword_269AB5A40, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
  uint64_t v13 = sub_2505BDB40();
  if (v132)
  {
    unint64_t v15 = *(void *)(v0 + 672);
    uint64_t v16 = *(void *)(v0 + 664);
    unint64_t v17 = *(void *)(v0 + 656);
    uint64_t v18 = *(void *)(v0 + 648);
    unint64_t v19 = *(void *)(v0 + 600);
    uint64_t v20 = *(void *)(v0 + 592);
    uint64_t v21 = *(void *)(v0 + 576);
    sub_25051AF3C(*(void *)(v0 + 560), type metadata accessor for GKCrypto_UserKeys);
    sub_250511528(v18, v17);
    sub_25051B8D4(v16, v15);
    sub_250511528(v20, v19);
    sub_25051AF3C(v21, type metadata accessor for UserKeyingInfo);
    sub_250511528(v8, v134);
    uint64_t v22 = v132;
LABEL_6:
    uint64_t v58 = *(void *)(v0 + 400);
    sub_250511528(*(void *)(v58 + 16), *(void *)(v58 + 24));
    sub_250511528(*(void *)(v58 + 40), *(void *)(v58 + 48));
    sub_250511528(*(void *)(*(void *)(v0 + 400) + 72), *(void *)(*(void *)(v0 + 400) + 80));
    sub_25051B884(*(void *)(*(void *)(v0 + 400) + 88), *(void *)(*(void *)(v0 + 400) + 96), *(void *)(*(void *)(v0 + 400) + 104), *(void *)(*(void *)(v0 + 400) + 112));
    sub_25051AF3C(*(void *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
    sub_25051B8D4(*(void *)(*(void *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset), *(void *)(*(void *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8));
    if (!v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v59 = *(void *)(v0 + 400);
    sub_25051B8D4(*(void *)(v59 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(void *)(v59 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
    sub_2504DAF60(v59 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, &qword_269AB5A30);
    sub_2504DAF60(v59 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_269AB5A38);
    swift_release();
    type metadata accessor for Group(0);
    swift_deallocPartialClassInstance();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v60 = *(uint64_t (**)(void))(v0 + 8);
    return v60();
  }
  uint64_t v122 = v13;
  unint64_t v123 = v14;
  uint64_t v121 = v6;
  unint64_t v23 = *(void *)(v0 + 600);
  uint64_t v24 = *(void *)(v0 + 592);
  uint64_t v25 = *(void *)(v0 + 576);
  uint64_t v115 = *(void *)(v0 + 544);
  uint64_t v118 = *(void *)(v0 + 568);
  uint64_t v27 = *(void *)(v0 + 504);
  uint64_t v26 = *(void *)(v0 + 512);
  uint64_t v114 = *(void *)(v0 + 496);
  uint64_t v28 = *(void *)(v0 + 472);
  uint64_t v130 = *(void *)(v0 + 464);
  uint64_t v29 = *(void *)(v0 + 456);
  uint64_t v30 = *(void *)(v0 + 400);
  sub_25051AF3C(*(void *)(v0 + 560), type metadata accessor for GKCrypto_UserKeys);
  sub_25051AF3C(v25, type metadata accessor for UserKeyingInfo);
  uint64_t v31 = MEMORY[0x263F8EE78];
  unint64_t v32 = sub_2504E1B08(MEMORY[0x263F8EE78]);
  v113 = (uint64_t *)(v30 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
  *(void *)(v30 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites) = v32;
  *(void *)(v30 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers) = sub_2504E1CB8(v31, &qword_269AB5FF0, &qword_269AB5FF8, type metadata accessor for MembershipVerifier, type metadata accessor for MembershipVerifier);
  *(void *)&v137[0] = v24;
  *((void *)&v137[0] + 1) = v23;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v33(v26, v126 + *(int *)(v129 + 28), v114);
  sub_2504DBC4C(v24, v23);
  sub_2505768F8((uint64_t *)v137, v26, v115);
  sub_2504DAEFC(v126 + *(int *)(v118 + 44), v29, &qword_269AB5A28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v130) == 1)
  {
    unint64_t v34 = *(void *)(v0 + 672);
    uint64_t v35 = *(void *)(v0 + 664);
    unint64_t v36 = *(void *)(v0 + 656);
    uint64_t v37 = *(void *)(v0 + 648);
    uint64_t v38 = *(void *)(v0 + 544);
    uint64_t v39 = *(void *)(v0 + 456);
    sub_250511528(*(void *)(v0 + 592), *(void *)(v0 + 600));
    sub_2504DAF60(v39, &qword_269AB5A28);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v40 = 329;
    *(_OWORD *)(v40 + 8) = xmmword_2505BFF10;
    *(void *)(v40 + 24) = 0x80000002505C8D80;
    *(void *)(v40 + 32) = 0xD000000000000052;
    *(void *)(v40 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v121, v134);
    sub_250511528(v122, v123);
    sub_250511528(v37, v36);
    sub_25051B8D4(v35, v34);
    sub_25051AF3C(v38, type metadata accessor for MembershipVerifier);
    uint64_t v22 = 0;
    goto LABEL_6;
  }
  v105 = (void (*)(char *, uint64_t, uint64_t))v33;
  long long v110 = *(_OWORD *)(v0 + 592);
  uint64_t v41 = *(void *)(v0 + 544);
  uint64_t v107 = v41;
  uint64_t v42 = *(void *)(v0 + 520);
  uint64_t v44 = *(void *)(v0 + 480);
  uint64_t v43 = *(void *)(v0 + 488);
  uint64_t v45 = *(void *)(v0 + 464);
  uint64_t v46 = *(void *)(v0 + 472);
  v131 = *(void **)(v0 + 448);
  uint64_t v47 = *(void *)(v0 + 424);
  uint64_t v116 = *(void *)(v0 + 536);
  uint64_t v119 = *(void *)(v0 + 432);
  uint64_t v48 = *(void *)(v0 + 400);
  uint64_t v112 = *(void *)(v0 + 416);
  uint64_t v49 = (uint64_t *)(v48 + *(void *)(v0 + 640));
  (*(void (**)(uint64_t, void, uint64_t))(v46 + 32))(v43, *(void *)(v0 + 456), v45);
  unint64_t v50 = (uint64_t *)(v41 + *(int *)(v42 + 24));
  uint64_t v51 = *v50;
  unint64_t v52 = v50[1];
  uint64_t v53 = *v49;
  unint64_t v54 = v49[1];
  *uint64_t v49 = *v50;
  v49[1] = v52;
  sub_2504DBC4C(v51, v52);
  sub_25051B8D4(v53, v54);
  unint64_t v55 = *(void *)(v48 + 48);
  v135[0] = *(void *)(v48 + 40);
  uint64_t v56 = v135[0];
  v135[1] = v55;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v44, v43, v45);
  v136[0] = v135[0];
  v136[1] = v55;
  v137[0] = v110;
  swift_beginAccess();
  LODWORD(v43) = *(_DWORD *)(v48 + 64);
  sub_25051B91C(v107, v116, type metadata accessor for MembershipVerifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v119, v126 + *(int *)(v129 + 20), v112);
  sub_2504DBC4C(v135[0], v55);
  sub_2504DBC4C(v135[0], v55);
  Invite.init(invitersID:invitersSigningKey:invitedID:groupID:groupVersion:invitedMembershipVerifier:invitedEncryptionPK:)(v135, v44, v136, (uint64_t *)v137, v43, v116, v119, v131);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505BFE80;
  *(void *)(inited + 32) = v121;
  *(void *)(inited + 40) = v134;
  *(unsigned char *)(inited + 48) = v124;
  *(void *)(inited + 56) = v122;
  *(void *)(inited + 64) = v123;
  sub_2504DBC4C(v121, v134);
  sub_2504DBC4C(v122, v123);
  sub_2504E4028(inited, (unint64_t *)v137);
  uint64_t v63 = *(void *)(v0 + 440);
  uint64_t v62 = *(void *)(v0 + 448);
  *(void *)(*(void *)(v0 + 400) + 56) = *(void *)&v137[0];
  int v64 = (uint64_t *)(v62 + *(int *)(v63 + 28));
  unint64_t v65 = v64[1];
  if (v65 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v66 = sub_2505BDC40();
    __swift_project_value_buffer(v66, (uint64_t)qword_269AC3188);
    os_log_type_t v67 = sub_2505BE3D0();
    uint64_t v68 = sub_2505BDC20();
    os_log_type_t v69 = v67;
    if (os_log_type_enabled(v68, v67))
    {
      int v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v70 = 0;
      _os_log_impl(&dword_2504D2000, v68, v69, "invite has missing KeyShare", v70, 2u);
      MEMORY[0x25337FF10](v70, -1, -1);
    }
    unint64_t v71 = *(void *)(v0 + 672);
    uint64_t v72 = *(void *)(v0 + 664);
    unint64_t v73 = *(void *)(v0 + 656);
    uint64_t v74 = *(void *)(v0 + 648);
    uint64_t v133 = *(void *)(v0 + 544);
    uint64_t v76 = *(void *)(v0 + 464);
    uint64_t v75 = *(void *)(v0 + 472);
    uint64_t v77 = *(void *)(v0 + 448);
    uint64_t v127 = *(void *)(v0 + 488);

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v78 = 356;
    *(_OWORD *)(v78 + 8) = xmmword_2505BFF00;
    *(void *)(v78 + 24) = 0x80000002505C8D80;
    *(void *)(v78 + 32) = 0xD000000000000052;
    *(void *)(v78 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v121, v134);
    sub_250511528(v122, v123);
    sub_250511528(v74, v73);
    sub_25051B8D4(v72, v71);
    sub_25051AF3C(v77, type metadata accessor for Invite);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v127, v76);
    sub_25051AF3C(v133, type metadata accessor for MembershipVerifier);
    swift_release();
    goto LABEL_9;
  }
  uint64_t v79 = *v64;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A50);
  uint64_t v80 = swift_initStackObject();
  *(_OWORD *)(v80 + 16) = xmmword_2505BFE80;
  *(void *)(v80 + 32) = v56;
  *(void *)(v80 + 40) = v55;
  *(void *)(v80 + 48) = v79;
  *(void *)(v80 + 56) = v65;
  swift_beginAccess();
  sub_25051B908(v79, v65);
  sub_2504DBC4C(v56, v55);
  sub_25051B908(v79, v65);
  sub_2504E46BC(v80);
  uint64_t v117 = v79;
  unint64_t v120 = v65;
  uint64_t v81 = *(void *)(v0 + 520);
  uint64_t v125 = *(void *)(v0 + 544);
  uint64_t v128 = *(void *)(v0 + 496);
  uint64_t v82 = *(void *)(v0 + 400);
  swift_endAccess();
  swift_setDeallocating();
  swift_arrayDestroy();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A58);
  uint64_t v83 = type metadata accessor for UserAndDiversifiedVerificationKey(0);
  unint64_t v84 = (*(unsigned __int8 *)(*(void *)(v83 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v83 - 8) + 80);
  uint64_t v85 = swift_allocObject();
  *(_OWORD *)(v85 + 16) = xmmword_2505BFE80;
  v86 = (uint64_t *)(v85 + v84);
  uint64_t v87 = *(void *)(v82 + 40);
  unint64_t v88 = *(void *)(v82 + 48);
  v105((char *)v86 + *(int *)(v83 + 20), v125 + *(int *)(v81 + 20), v128);
  uint64_t *v86 = v87;
  v86[1] = v88;
  swift_beginAccess();
  sub_2504DBC4C(v87, v88);
  sub_2504E5654(v85);
  uint64_t v89 = *(void *)(v0 + 544);
  uint64_t v90 = *(void *)(v0 + 528);
  uint64_t v91 = *(void *)(v0 + 520);
  uint64_t v93 = *(void *)(v0 + 400);
  uint64_t v92 = *(void *)(v0 + 408);
  swift_endAccess();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v94 = *(void *)(v93 + 40);
  unint64_t v95 = *(void *)(v93 + 48);
  sub_25051B91C(v89, v92, type metadata accessor for MembershipVerifier);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56))(v92, 0, 1, v91);
  swift_beginAccess();
  sub_2504DBC4C(v94, v95);
  sub_2504E6A04(v92, v94, v95);
  swift_endAccess();
  sub_2504DBC4C(v94, v95);
  sub_250576FC4((uint64_t *)v137);
  uint64_t v108 = *(void *)(v0 + 664);
  unint64_t v109 = *(void *)(v0 + 672);
  uint64_t v104 = *(void *)(v0 + 648);
  unint64_t v106 = *(void *)(v0 + 656);
  uint64_t v96 = *(void *)(v0 + 544);
  uint64_t v97 = *(void *)(v0 + 488);
  uint64_t v98 = *(void *)(v0 + 472);
  uint64_t v111 = *(void *)(v0 + 464);
  uint64_t v103 = *(void *)(v0 + 448);
  long long v99 = v137[1];
  *(_OWORD *)(v0 + 152) = v137[0];
  *(_OWORD *)(v0 + 168) = v99;
  *(_OWORD *)(v0 + 184) = v137[2];
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v136[0] = *v113;
  uint64_t *v113 = 0x8000000000000000;
  sub_250514668((_OWORD *)(v0 + 152), v94, v95, isUniquelyReferenced_nonNull_native);
  uint64_t *v113 = v136[0];
  swift_bridgeObjectRelease();
  sub_250511528(v94, v95);
  swift_endAccess();
  sub_25051B8D4(v117, v120);
  sub_250511528(v121, v134);
  sub_250511528(v122, v123);
  sub_250511528(v104, v106);
  sub_25051B8D4(v108, v109);
  sub_25051AF3C(v103, type metadata accessor for Invite);
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v111);
  sub_25051AF3C(v96, type metadata accessor for MembershipVerifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v101 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v102 = *(void *)(v0 + 400);
  return v101(v102);
}

uint64_t sub_2504E3E1C()
{
  unint64_t v1 = v0[84];
  uint64_t v2 = v0[83];
  sub_250511528(v0[81], v0[82]);
  sub_25051B8D4(v2, v1);
  uint64_t v3 = v0[50];
  sub_250511528(*(void *)(v3 + 16), *(void *)(v3 + 24));
  sub_250511528(*(void *)(v3 + 40), *(void *)(v3 + 48));
  sub_250511528(*(void *)(v0[50] + 72), *(void *)(v0[50] + 80));
  sub_25051B884(*(void *)(v0[50] + 88), *(void *)(v0[50] + 96), *(void *)(v0[50] + 104), *(void *)(v0[50] + 112));
  sub_25051B8D4(*(void *)(v0[50] + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset), *(void *)(v0[50] + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8));
  uint64_t v4 = v0[50];
  sub_25051B8D4(*(void *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(void *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
  sub_2504DAF60(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, &qword_269AB5A30);
  sub_2504DAF60(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_269AB5A38);
  swift_release();
  type metadata accessor for Group(0);
  swift_deallocPartialClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_2504E4028@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v69 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v10 = MEMORY[0x270FA5388](v69, v6, v7, v8, v9);
  uint64_t v68 = (uint64_t)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v12, v13, v14, v15);
  os_log_type_t v67 = (char *)v63 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  MEMORY[0x270FA5388](v17 - 8, v18, v19, v20, v21);
  unint64_t v71 = (char *)v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v23 - 8, v24, v25, v26, v27);
  int v70 = (char *)v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v29 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66, v30, v31, v32, v33);
  uint64_t v35 = (void *)((char *)v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v36 = sub_2504E1CB8(MEMORY[0x263F8EE78], &qword_269AB5FC8, &qword_269AB5FE8, type metadata accessor for GroupMembership.MemberProperties, type metadata accessor for GroupMembership.MemberProperties);
  uint64_t v37 = *(void *)(a1 + 16);
  if (v37)
  {
    v63[0] = a2;
    uint64_t v76 = v3;
    unint64_t v65 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56);
    swift_bridgeObjectRetain();
    v63[1] = a1;
    uint64_t v38 = (unint64_t *)(a1 + 64);
    long long v64 = xmmword_2505BFEE0;
    while (1)
    {
      uint64_t v75 = v37;
      uint64_t v39 = *(v38 - 4);
      unint64_t v40 = *(v38 - 3);
      char v41 = *((unsigned char *)v38 - 16);
      uint64_t v43 = *(v38 - 1);
      unint64_t v42 = *v38;
      unint64_t v79 = v36;
      unint64_t v77 = v39;
      unint64_t v78 = v40;
      sub_2504DBC4C(v39, v40);
      sub_2504DBC4C(v43, v42);
      if (sub_2505B2318((uint64_t *)&v77)) {
        break;
      }
      unint64_t v74 = v36;
      unint64_t v77 = v39;
      unint64_t v78 = v40;
      uint64_t v44 = sub_2505BE000();
      uint64_t v45 = (uint64_t)v70;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v70, 1, 1, v44);
      uint64_t v46 = sub_2505BDF90();
      uint64_t v47 = (uint64_t)v71;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v71, 1, 1, v46);
      sub_2504DBC4C(v39, v40);
      sub_2504DBC4C(v43, v42);
      uint64_t v48 = v76;
      sub_2505625AC((uint64_t *)&v77, v43, v42, v45, v47, v35);
      uint64_t v76 = v48;
      if (v48)
      {
        sub_250511528(v39, v40);
        sub_250511528(v43, v42);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease_n();
      }
      v38 += 5;
      uint64_t v72 = v43;
      unint64_t v73 = v42;
      uint64_t v49 = v69;
      uint64_t v50 = (uint64_t)v67;
      uint64_t v51 = (uint64_t)&v67[*(int *)(v69 + 24)];
      sub_25051B91C((uint64_t)v35, v51, type metadata accessor for UserKeyingInfo);
      (*v65)(v51, 0, 1, v66);
      uint64_t v52 = v50 + *(int *)(v49 + 28);
      uint64_t v53 = sub_2505BE0B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 1, 1, v53);
      *(unsigned char *)uint64_t v50 = v41;
      *(_OWORD *)(v50 + 8) = v64;
      uint64_t v54 = v68;
      sub_25051C8F4(v50, v68, type metadata accessor for GroupMembership.MemberProperties);
      sub_2504DBC4C(v39, v40);
      uint64_t v55 = v74;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v77 = v55;
      sub_2505144F8(v54, v39, v40, isUniquelyReferenced_nonNull_native);
      unint64_t v36 = v77;
      swift_bridgeObjectRelease();
      sub_250511528(v39, v40);
      sub_250511528(v39, v40);
      sub_250511528(v72, v73);
      sub_25051AF3C((uint64_t)v35, type metadata accessor for UserKeyingInfo);
      uint64_t v37 = v75 - 1;
      if (v75 == 1)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        *(void *)v63[0] = v36;
        return result;
      }
    }
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v58 = sub_2505BDC40();
    __swift_project_value_buffer(v58, (uint64_t)qword_269AC3188);
    os_log_type_t v59 = sub_2505BE3D0();
    uint64_t v60 = sub_2505BDC20();
    if (os_log_type_enabled(v60, v59))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl(&dword_2504D2000, v60, v59, "duplicated group member", v61, 2u);
      MEMORY[0x25337FF10](v61, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v62 = 270;
    *(_OWORD *)(v62 + 8) = xmmword_2505BFF20;
    *(void *)(v62 + 24) = 0x80000002505CA1F0;
    *(void *)(v62 + 32) = 0xD00000000000005CLL;
    *(void *)(v62 + 40) = 0x80000002505CA080;
    swift_willThrow();
    sub_250511528(v39, v40);
    sub_250511528(v43, v42);
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v36;
  }
  return result;
}

uint64_t sub_2504E46BC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9, v10);
  uint64_t v124 = (uint64_t)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  uint64_t v17 = MEMORY[0x270FA5388](v12 - 8, v13, v14, v15, v16);
  uint64_t v22 = MEMORY[0x270FA5388](v17, v18, v19, v20, v21);
  uint64_t v128 = (char *)&v122 - v23;
  uint64_t v28 = MEMORY[0x270FA5388](v22, v24, v25, v26, v27);
  uint64_t v30 = (char *)&v122 - v29;
  MEMORY[0x270FA5388](v28, v31, v32, v33, v34);
  uint64_t v37 = (char *)&v122 - v36;
  uint64_t v139 = MEMORY[0x263F8EE88];
  uint64_t v38 = *(void *)(a1 + 16);
  if (!v38) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v125 = v35;
  uint64_t v122 = v3;
  unint64_t v134 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v135 = v1;
  uint64_t v127 = v6;
  uint64_t v133 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain();
  uint64_t v123 = a1;
  uint64_t v39 = (unint64_t *)(a1 + 56);
  uint64_t v126 = v38;
  uint64_t v40 = v38;
  uint64_t v132 = v5;
  while (1)
  {
    char v41 = (uint64_t *)*(v39 - 3);
    uint64_t v42 = *(v39 - 2);
    unint64_t v43 = *v39;
    unint64_t v136 = *(v39 - 1);
    uint64_t v44 = *(void *)v135;
    if (!*(void *)(*(void *)v135 + 16))
    {
LABEL_30:
      (*v134)(v37, 1, 1, v5);
      sub_2504DBC4C((uint64_t)v41, v42);
      sub_2504DBC4C(v136, v43);
LABEL_31:
      sub_2504DAF60((uint64_t)v37, &qword_269AB5A80);
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
LABEL_52:
      }
        swift_once();
      uint64_t v84 = sub_2505BDC40();
      __swift_project_value_buffer(v84, (uint64_t)qword_269AC3188);
      os_log_type_t v85 = sub_2505BE3D0();
      sub_2504DBC4C((uint64_t)v41, v42);
      uint64_t v86 = v136;
      sub_2504DBC4C(v136, v43);
      sub_2504DBC4C((uint64_t)v41, v42);
      sub_2504DBC4C(v86, v43);
      uint64_t v87 = sub_2505BDC20();
      if (os_log_type_enabled(v87, v85))
      {
        unint64_t v88 = (uint8_t *)swift_slowAlloc();
        unint64_t v134 = (void (**)(char *, uint64_t, uint64_t, uint64_t))swift_slowAlloc();
        v137[0] = (uint64_t)v134;
        uint64_t v135 = v43;
        *(_DWORD *)unint64_t v88 = 136315138;
        uint64_t v133 = (unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 4);
        sub_2504DBC4C((uint64_t)v41, v42);
        uint64_t v89 = sub_2505BD8B0();
        unint64_t v91 = v90;
        sub_250511528((uint64_t)v41, v42);
        uint64_t v92 = v136;
        uint64_t v138 = sub_25051171C(v89, v91, v137);
        unint64_t v43 = v135;
        sub_2505BE430();
        swift_bridgeObjectRelease();
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v92, v43);
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v92, v43);
        _os_log_impl(&dword_2504D2000, v87, v85, "attempted adding key share for non-member %s", v88, 0xCu);
        uint64_t v93 = v134;
        swift_arrayDestroy();
        MEMORY[0x25337FF10](v93, -1, -1);
        MEMORY[0x25337FF10](v88, -1, -1);
      }
      else
      {
        sub_250511528((uint64_t)v41, v42);
        uint64_t v94 = v136;
        sub_250511528(v136, v43);
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v94, v43);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(unsigned char *)uint64_t v95 = 27;
      uint64_t v96 = 99;
LABEL_49:
      *(unsigned char *)(v95 + 1) = 1;
      *(void *)(v95 + 8) = v96;
      *(void *)(v95 + 16) = 0xD000000000000014;
      *(void *)(v95 + 24) = 0x80000002505CA1D0;
      *(void *)(v95 + 32) = 0xD00000000000005CLL;
      *(void *)(v95 + 40) = 0x80000002505CA080;
      swift_willThrow();
      sub_250511528((uint64_t)v41, v42);
      sub_250511528(v136, v43);
      return swift_bridgeObjectRelease();
    }
    sub_2504DBC4C((uint64_t)v41, v42);
    sub_2504DBC4C(v136, v43);
    sub_2504DBC4C((uint64_t)v41, v42);
    unint64_t v45 = sub_250513064((uint64_t)v41, v42);
    if (v46)
    {
      uint64_t v47 = *(void *)(v44 + 56);
      uint64_t v48 = v127;
      sub_25051B91C(v47 + *(void *)(v127 + 72) * v45, (uint64_t)v37, type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
      uint64_t v50 = v37;
      uint64_t v51 = 0;
    }
    else
    {
      uint64_t v49 = *v134;
      uint64_t v50 = v37;
      uint64_t v51 = 1;
    }
    v131 = v49;
    v49(v50, v51, 1, v5);
    sub_250511528((uint64_t)v41, v42);
    uint64_t v130 = *v133;
    if (v130(v37, 1, v5) == 1) {
      goto LABEL_31;
    }
    sub_2504DAF60((uint64_t)v37, &qword_269AB5A80);
    uint64_t v52 = *(void *)v135;
    if (!*(void *)(*(void *)v135 + 16)) {
      break;
    }
    sub_2504DBC4C((uint64_t)v41, v42);
    unint64_t v53 = sub_250513064((uint64_t)v41, v42);
    if (v54)
    {
      sub_25051B91C(*(void *)(v52 + 56) + *(void *)(v127 + 72) * v53, (uint64_t)v30, type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v55 = 0;
    }
    else
    {
      uint64_t v55 = 1;
    }
    unint64_t v56 = v43;
    uint64_t v57 = v132;
    v131(v30, v55, 1, v132);
    sub_250511528((uint64_t)v41, v42);
    if (v130(v30, 1, v57) == 1) {
      goto LABEL_54;
    }
    unint64_t v58 = *((void *)v30 + 2);
    sub_25051AF3C((uint64_t)v30, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v59 = v139;
    if (v58 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v97 = sub_2505BDC40();
      __swift_project_value_buffer(v97, (uint64_t)qword_269AC3188);
      os_log_type_t v98 = sub_2505BE3D0();
      sub_2504DBC4C((uint64_t)v41, v42);
      uint64_t v99 = v136;
      unint64_t v43 = v56;
      sub_2504DBC4C(v136, v56);
      sub_2504DBC4C((uint64_t)v41, v42);
      sub_2504DBC4C(v99, v56);
      v100 = sub_2505BDC20();
      if (os_log_type_enabled(v100, v98))
      {
        v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        v137[0] = v135;
        *(_DWORD *)v101 = 136315138;
        unint64_t v134 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 4);
        sub_2504DBC4C((uint64_t)v41, v42);
        uint64_t v102 = sub_2505BD8B0();
        unint64_t v104 = v103;
        sub_250511528((uint64_t)v41, v42);
        uint64_t v105 = v102;
        uint64_t v106 = v136;
        uint64_t v138 = sub_25051171C(v105, v104, v137);
        unint64_t v43 = v56;
        sub_2505BE430();
        swift_bridgeObjectRelease();
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v106, v56);
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v106, v56);
        _os_log_impl(&dword_2504D2000, v100, v98, "attempted overwriting user key share for member %s", v101, 0xCu);
        uint64_t v107 = v135;
        swift_arrayDestroy();
        MEMORY[0x25337FF10](v107, -1, -1);
        MEMORY[0x25337FF10](v101, -1, -1);
      }
      else
      {
        sub_250511528((uint64_t)v41, v42);
        uint64_t v119 = v136;
        sub_250511528(v136, v56);
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v119, v56);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(unsigned char *)uint64_t v95 = 28;
      uint64_t v96 = 103;
      goto LABEL_49;
    }
    sub_2504DBC4C((uint64_t)v41, v42);
    swift_bridgeObjectRetain();
    char v60 = sub_250586F18((uint64_t)v41, v42, v59);
    swift_bridgeObjectRelease();
    sub_250511528((uint64_t)v41, v42);
    if (v60)
    {
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v108 = sub_2505BDC40();
      __swift_project_value_buffer(v108, (uint64_t)qword_269AC3188);
      os_log_type_t v109 = sub_2505BE3D0();
      sub_2504DBC4C((uint64_t)v41, v42);
      uint64_t v110 = v136;
      unint64_t v43 = v56;
      sub_2504DBC4C(v136, v56);
      sub_2504DBC4C((uint64_t)v41, v42);
      sub_2504DBC4C(v110, v56);
      uint64_t v111 = sub_2505BDC20();
      if (os_log_type_enabled(v111, v109))
      {
        uint64_t v112 = (uint8_t *)swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        v137[0] = v135;
        *(_DWORD *)uint64_t v112 = 136315138;
        unint64_t v134 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 4);
        sub_2504DBC4C((uint64_t)v41, v42);
        uint64_t v113 = sub_2505BD8B0();
        unint64_t v115 = v114;
        sub_250511528((uint64_t)v41, v42);
        uint64_t v116 = v113;
        uint64_t v117 = v136;
        uint64_t v138 = sub_25051171C(v116, v115, v137);
        unint64_t v43 = v56;
        sub_2505BE430();
        swift_bridgeObjectRelease();
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v117, v56);
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v117, v56);
        _os_log_impl(&dword_2504D2000, v111, v109, "duplicate key share update for member %s", v112, 0xCu);
        uint64_t v118 = v135;
        swift_arrayDestroy();
        MEMORY[0x25337FF10](v118, -1, -1);
        MEMORY[0x25337FF10](v112, -1, -1);
      }
      else
      {
        sub_250511528((uint64_t)v41, v42);
        uint64_t v120 = v136;
        sub_250511528(v136, v56);
        sub_250511528((uint64_t)v41, v42);
        sub_250511528(v120, v56);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(unsigned char *)uint64_t v95 = 30;
      uint64_t v96 = 107;
      goto LABEL_49;
    }
    v39 += 4;
    sub_2504DBC4C((uint64_t)v41, v42);
    sub_2505A8F9C(v137, (uint64_t)v41, v42);
    sub_250511528((uint64_t)v41, v42);
    sub_250511528(v136, v56);
    sub_250511528(v137[0], v137[1]);
    --v40;
    uint64_t v5 = v132;
    if (!v40)
    {
      uint64_t v61 = v123;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v62 = (unint64_t *)(v61 + 56);
      char v41 = &qword_269AB5A80;
      uint64_t v63 = (uint64_t *)v135;
      while (1)
      {
        uint64_t v65 = *(v62 - 3);
        uint64_t v37 = (char *)*(v62 - 2);
        uint64_t v42 = *(v62 - 1);
        unint64_t v66 = *v62;
        sub_2504DBC4C(v65, (unint64_t)v37);
        sub_2504DBC4C(v65, (unint64_t)v37);
        sub_2504DBC4C(v65, (unint64_t)v37);
        sub_2504DBC4C(v42, v66);
        uint64_t v129 = v42;
        unint64_t v136 = v66;
        sub_2504DBC4C(v42, v66);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v137[0] = *v63;
        uint64_t v68 = v137[0];
        uint64_t *v63 = 0x8000000000000000;
        sub_2504DBC4C(v65, (unint64_t)v37);
        unint64_t v43 = sub_250513064(v65, (unint64_t)v37);
        uint64_t v70 = *(void *)(v68 + 16);
        BOOL v71 = (v69 & 1) == 0;
        uint64_t v72 = v70 + v71;
        if (__OFADD__(v70, v71)) {
          break;
        }
        uint64_t v5 = v69;
        if (*(void *)(v68 + 24) >= v72)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v69 & 1) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            sub_2505B7008();
            if ((v5 & 1) == 0) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          sub_2505B4EE4(v72, isUniquelyReferenced_nonNull_native);
          unint64_t v73 = sub_250513064(v65, (unint64_t)v37);
          if ((v5 & 1) != (v74 & 1)) {
            goto LABEL_55;
          }
          unint64_t v43 = v73;
          if ((v5 & 1) == 0)
          {
LABEL_29:
            v131(v128, 1, 1, v132);
            sub_250511528(v129, v136);
            __break(1u);
            goto LABEL_30;
          }
        }
        uint64_t v75 = v41;
        uint64_t v76 = v137[0];
        uint64_t v77 = (uint64_t)v128;
        unint64_t v78 = *(void *)(v127 + 72) * v43;
        sub_25051C8F4(*(void *)(v137[0] + 56) + v78, (uint64_t)v128, type metadata accessor for GroupMembership.MemberProperties);
        uint64_t v79 = v132;
        v131((char *)v77, 0, 1, v132);
        sub_25051B8D4(*(void *)(v77 + 8), *(void *)(v77 + 16));
        unint64_t v80 = v136;
        *(void *)(v77 + 8) = v129;
        *(void *)(v77 + 16) = v80;
        uint64_t v81 = v77;
        uint64_t v82 = v125;
        sub_2504DAEFC(v81, v125, v75);
        if (v130((char *)v82, 1, v79) == 1)
        {
          sub_2504DAF60(v82, v75);
          uint64_t v64 = v137[0];
          swift_arrayDestroy();
          sub_2505B63C4(v43, v64);
        }
        else
        {
          uint64_t v83 = v124;
          sub_25051C8F4(v82, v124, type metadata accessor for GroupMembership.MemberProperties);
          sub_25051C8F4(v83, *(void *)(v76 + 56) + v78, type metadata accessor for GroupMembership.MemberProperties);
          uint64_t v64 = v137[0];
        }
        char v41 = v75;
        v62 += 4;
        sub_2504DAF60((uint64_t)v128, v75);
        sub_250511528(v65, (unint64_t)v37);
        uint64_t v63 = (uint64_t *)v135;
        *(void *)uint64_t v135 = v64;
        sub_250511528(v65, (unint64_t)v37);
        sub_250511528(v65, (unint64_t)v37);
        sub_250511528(v129, v136);
        sub_250511528(v65, (unint64_t)v37);
        if (!--v126)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
      goto LABEL_52;
    }
  }
  v131(v30, 1, 1, v5);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = sub_2505BE7E0();
  __break(1u);
  return result;
}

uint64_t sub_2504E5654(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v180 = (uint64_t)&v173 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5ED0);
  uint64_t v16 = MEMORY[0x270FA5388](v11 - 8, v12, v13, v14, v15);
  uint64_t v193 = (uint64_t)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v18, v19, v20, v21);
  uint64_t v184 = (uint64_t)&v173 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  uint64_t v28 = MEMORY[0x270FA5388](v23 - 8, v24, v25, v26, v27);
  uint64_t v30 = (char *)&v173 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v28, v31, v32, v33, v34);
  v192 = (void (**)(uint64_t, char *, uint64_t))((char *)&v173 - v36);
  uint64_t v41 = MEMORY[0x270FA5388](v35, v37, v38, v39, v40);
  v185 = (void (**)(uint64_t, void, uint64_t, uint64_t))((char *)&v173 - v42);
  MEMORY[0x270FA5388](v41, v43, v44, v45, v46);
  v186 = (void (**)(uint64_t, char *, uint64_t))((char *)&v173 - v47);
  uint64_t v48 = type metadata accessor for UserAndDiversifiedVerificationKey(0);
  uint64_t v52 = MEMORY[0x270FA5388](v48, v48, v49, v50, v51);
  uint64_t v57 = MEMORY[0x270FA5388](v52, v53, v54, v55, v56);
  uint64_t v59 = (uint64_t *)((char *)&v173 - v58);
  uint64_t v64 = MEMORY[0x270FA5388](v57, v60, v61, v62, v63);
  uint64_t v69 = MEMORY[0x270FA5388](v64, v65, v66, v67, v68);
  v182 = (uint64_t *)((char *)&v173 - v70);
  MEMORY[0x270FA5388](v69, v71, v72, v73, v74);
  unint64_t v80 = (uint64_t *)((char *)&v173 - v79);
  uint64_t v201 = MEMORY[0x263F8EE88];
  uint64_t v81 = *(char **)(a1 + 16);
  if (!v81) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v174 = v75;
  v177 = v59;
  v176 = (uint64_t *)v78;
  v178 = (uint64_t *)v77;
  v181 = v30;
  uint64_t v173 = v2;
  uint64_t v82 = a1 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
  uint64_t v189 = *(void *)(v76 + 72);
  v197 = (unsigned int (**)(void, uint64_t, unint64_t))(v5 + 48);
  v198 = (void (**)(void (**)(uint64_t, char *, uint64_t), uint64_t, uint64_t, unint64_t))(v5 + 56);
  uint64_t v179 = a1;
  swift_bridgeObjectRetain();
  v175 = (uint64_t *)v82;
  v188 = v81;
  uint64_t v83 = v81;
  v183 = v80;
  uint64_t v190 = v5;
  unint64_t v191 = v4;
  while (1)
  {
    sub_25051B91C(v82, (uint64_t)v80, type metadata accessor for UserAndDiversifiedVerificationKey);
    uint64_t v84 = v194;
    uint64_t v85 = *v194;
    if (!*(void *)(*v194 + 16))
    {
LABEL_30:
      unint64_t v91 = v186;
      (*v198)(v186, 1, 1, v4);
LABEL_31:
      sub_2504DAF60((uint64_t)v91, &qword_269AB5A80);
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
LABEL_52:
      }
        swift_once();
      uint64_t v134 = sub_2505BDC40();
      __swift_project_value_buffer(v134, (uint64_t)qword_269AC3188);
      os_log_type_t v135 = sub_2505BE3D0();
      unint64_t v136 = v178;
      sub_25051B91C((uint64_t)v80, (uint64_t)v178, type metadata accessor for UserAndDiversifiedVerificationKey);
      v137 = sub_2505BDC20();
      if (os_log_type_enabled(v137, v135))
      {
        uint64_t v138 = (uint8_t *)swift_slowAlloc();
        v198 = (void (**)(void (**)(uint64_t, char *, uint64_t), uint64_t, uint64_t, unint64_t))swift_slowAlloc();
        v199[0] = (uint64_t)v198;
        *(_DWORD *)uint64_t v138 = 136315138;
        v197 = (unsigned int (**)(void, uint64_t, unint64_t))(v138 + 4);
        uint64_t v139 = (uint64_t)v136;
        uint64_t v140 = *v136;
        unint64_t v141 = *(void *)(v139 + 8);
        sub_2504DBC4C(v140, v141);
        uint64_t v142 = sub_2505BD8B0();
        unint64_t v144 = v143;
        sub_250511528(v140, v141);
        uint64_t v200 = sub_25051171C(v142, v144, v199);
        sub_2505BE430();
        swift_bridgeObjectRelease();
        sub_25051AF3C(v139, type metadata accessor for UserAndDiversifiedVerificationKey);
        _os_log_impl(&dword_2504D2000, v137, v135, "attempted adding diversification key for non-member %s", v138, 0xCu);
        v145 = v198;
        swift_arrayDestroy();
        unint64_t v80 = v183;
        MEMORY[0x25337FF10](v145, -1, -1);
        MEMORY[0x25337FF10](v138, -1, -1);
      }
      else
      {
        sub_25051AF3C((uint64_t)v136, type metadata accessor for UserAndDiversifiedVerificationKey);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(unsigned char *)uint64_t v146 = 34;
      uint64_t v147 = 124;
LABEL_49:
      *(unsigned char *)(v146 + 1) = 1;
      *(void *)(v146 + 8) = v147;
      *(void *)(v146 + 16) = 0xD000000000000021;
      *(void *)(v146 + 24) = 0x80000002505CA1A0;
      *(void *)(v146 + 32) = 0xD00000000000005CLL;
      *(void *)(v146 + 40) = 0x80000002505CA080;
      swift_willThrow();
      sub_25051AF3C((uint64_t)v80, type metadata accessor for UserAndDiversifiedVerificationKey);
      return swift_bridgeObjectRelease();
    }
    v187 = v83;
    uint64_t v86 = *v80;
    unint64_t v87 = v80[1];
    sub_2504DBC4C(*v80, v87);
    unint64_t v88 = sub_250513064(v86, v87);
    if (v89)
    {
      uint64_t v90 = *(void *)(v85 + 56) + *(void *)(v5 + 72) * v88;
      unint64_t v91 = v186;
      sub_25051B91C(v90, (uint64_t)v186, type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v92 = *(void (**)(void (**)(uint64_t, char *, uint64_t), uint64_t, uint64_t, unint64_t))(v5 + 56);
      uint64_t v93 = v91;
      uint64_t v94 = 0;
    }
    else
    {
      uint64_t v92 = *v198;
      unint64_t v91 = v186;
      uint64_t v93 = v186;
      uint64_t v94 = 1;
    }
    v196 = v92;
    v92(v93, v94, 1, v4);
    sub_250511528(v86, v87);
    v195 = *v197;
    if (v195(v91, 1, v4) == 1) {
      goto LABEL_31;
    }
    sub_2504DAF60((uint64_t)v91, &qword_269AB5A80);
    uint64_t v95 = *v84;
    if (!*(void *)(*v84 + 16)) {
      break;
    }
    uint64_t v96 = *v80;
    unint64_t v97 = v80[1];
    sub_2504DBC4C(*v80, v97);
    unint64_t v98 = sub_250513064(v96, v97);
    uint64_t v99 = (void (**)(uint64_t, char *, uint64_t))v185;
    if (v100)
    {
      sub_25051B91C(*(void *)(v95 + 56) + *(void *)(v5 + 72) * v98, (uint64_t)v185, type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v101 = 0;
    }
    else
    {
      uint64_t v101 = 1;
    }
    v196(v99, v101, 1, v4);
    sub_250511528(v96, v97);
    if (v195(v99, 1, v4) == 1) {
      goto LABEL_54;
    }
    uint64_t v102 = v184;
    sub_2504DAEFC((uint64_t)v99 + *(int *)(v4 + 28), v184, &qword_269AB5ED0);
    uint64_t v103 = sub_2505BE0B0();
    uint64_t v104 = *(void *)(v103 - 8);
    uint64_t v105 = v103;
    int v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 48))(v102, 1);
    sub_2504DAF60(v102, &qword_269AB5ED0);
    sub_25051AF3C((uint64_t)v99, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v107 = v201;
    if (v106 != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v148 = sub_2505BDC40();
      __swift_project_value_buffer(v148, (uint64_t)qword_269AC3188);
      os_log_type_t v149 = sub_2505BE3D0();
      unint64_t v80 = v183;
      v150 = v177;
      sub_25051B91C((uint64_t)v183, (uint64_t)v177, type metadata accessor for UserAndDiversifiedVerificationKey);
      v151 = sub_2505BDC20();
      if (os_log_type_enabled(v151, v149))
      {
        v152 = (uint8_t *)swift_slowAlloc();
        v198 = (void (**)(void (**)(uint64_t, char *, uint64_t), uint64_t, uint64_t, unint64_t))swift_slowAlloc();
        v199[0] = (uint64_t)v198;
        *(_DWORD *)v152 = 136315138;
        v197 = (unsigned int (**)(void, uint64_t, unint64_t))(v152 + 4);
        uint64_t v153 = (uint64_t)v150;
        uint64_t v154 = *v150;
        unint64_t v155 = *(void *)(v153 + 8);
        sub_2504DBC4C(v154, v155);
        uint64_t v156 = sub_2505BD8B0();
        unint64_t v158 = v157;
        sub_250511528(v154, v155);
        uint64_t v200 = sub_25051171C(v156, v158, v199);
        sub_2505BE430();
        swift_bridgeObjectRelease();
        sub_25051AF3C(v153, type metadata accessor for UserAndDiversifiedVerificationKey);
        _os_log_impl(&dword_2504D2000, v151, v149, "attempted overwriting diversification key for member %s", v152, 0xCu);
        v159 = v198;
        swift_arrayDestroy();
        unint64_t v80 = v183;
        MEMORY[0x25337FF10](v159, -1, -1);
        MEMORY[0x25337FF10](v152, -1, -1);
      }
      else
      {
        sub_25051AF3C((uint64_t)v150, type metadata accessor for UserAndDiversifiedVerificationKey);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(unsigned char *)uint64_t v146 = 29;
      uint64_t v147 = 128;
      goto LABEL_49;
    }
    unint64_t v80 = v183;
    uint64_t v109 = *v183;
    unint64_t v108 = v183[1];
    swift_bridgeObjectRetain();
    sub_2504DBC4C(v109, v108);
    char v110 = sub_250586F18(v109, v108, v107);
    swift_bridgeObjectRelease();
    sub_250511528(v109, v108);
    if (v110)
    {
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v160 = sub_2505BDC40();
      __swift_project_value_buffer(v160, (uint64_t)qword_269AC3188);
      os_log_type_t v161 = sub_2505BE3D0();
      unint64_t v80 = v183;
      v162 = v176;
      sub_25051B91C((uint64_t)v183, (uint64_t)v176, type metadata accessor for UserAndDiversifiedVerificationKey);
      v163 = sub_2505BDC20();
      if (os_log_type_enabled(v163, v161))
      {
        v164 = (uint8_t *)swift_slowAlloc();
        v198 = (void (**)(void (**)(uint64_t, char *, uint64_t), uint64_t, uint64_t, unint64_t))swift_slowAlloc();
        v199[0] = (uint64_t)v198;
        *(_DWORD *)v164 = 136315138;
        v197 = (unsigned int (**)(void, uint64_t, unint64_t))(v164 + 4);
        uint64_t v165 = (uint64_t)v162;
        uint64_t v166 = *v162;
        unint64_t v167 = *(void *)(v165 + 8);
        sub_2504DBC4C(v166, v167);
        uint64_t v168 = sub_2505BD8B0();
        unint64_t v170 = v169;
        sub_250511528(v166, v167);
        uint64_t v200 = sub_25051171C(v168, v170, v199);
        sub_2505BE430();
        swift_bridgeObjectRelease();
        sub_25051AF3C(v165, type metadata accessor for UserAndDiversifiedVerificationKey);
        _os_log_impl(&dword_2504D2000, v163, v161, "duplicate diversification key update for member %s", v164, 0xCu);
        v171 = v198;
        swift_arrayDestroy();
        unint64_t v80 = v183;
        MEMORY[0x25337FF10](v171, -1, -1);
        MEMORY[0x25337FF10](v164, -1, -1);
      }
      else
      {
        sub_25051AF3C((uint64_t)v162, type metadata accessor for UserAndDiversifiedVerificationKey);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(unsigned char *)uint64_t v146 = 30;
      uint64_t v147 = 132;
      goto LABEL_49;
    }
    sub_2504DBC4C(v109, v108);
    sub_2505A8F9C(v199, v109, v108);
    sub_250511528(v199[0], v199[1]);
    sub_25051AF3C((uint64_t)v80, type metadata accessor for UserAndDiversifiedVerificationKey);
    uint64_t v5 = v190;
    v82 += v189;
    uint64_t v83 = v187 - 1;
    unint64_t v4 = v191;
    if (v187 == (char *)1)
    {
      swift_bridgeObjectRelease();
      v187 = (char *)v182 + *(int *)(v174 + 20);
      v185 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56);
      v186 = (void (**)(uint64_t, char *, uint64_t))(v104 + 16);
      swift_bridgeObjectRetain();
      uint64_t v111 = v194;
      unint64_t v80 = v175;
      uint64_t v184 = v105;
      while (1)
      {
        unint64_t v114 = v182;
        sub_25051B91C((uint64_t)v80, (uint64_t)v182, type metadata accessor for UserAndDiversifiedVerificationKey);
        uint64_t v116 = *v114;
        unint64_t v115 = v114[1];
        uint64_t v117 = v193;
        uint64_t v118 = v184;
        (*v186)(v193, v187, v184);
        sub_2504DBC4C(v116, v115);
        sub_25051AF3C((uint64_t)v114, type metadata accessor for UserAndDiversifiedVerificationKey);
        (*v185)(v117, 0, 1, v118);
        sub_2504DBC4C(v116, v115);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v199[0] = *v111;
        uint64_t v120 = v199[0];
        *uint64_t v111 = 0x8000000000000000;
        sub_2504DBC4C(v116, v115);
        unint64_t v4 = sub_250513064(v116, v115);
        uint64_t v122 = *(void *)(v120 + 16);
        BOOL v123 = (v121 & 1) == 0;
        uint64_t v124 = v122 + v123;
        if (__OFADD__(v122, v123)) {
          break;
        }
        char v125 = v121;
        if (*(void *)(v120 + 24) >= v124)
        {
          uint64_t v128 = (uint64_t)v181;
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v121 & 1) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            sub_2505B7008();
            uint64_t v128 = (uint64_t)v181;
            if ((v125 & 1) == 0) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          sub_2505B4EE4(v124, isUniquelyReferenced_nonNull_native);
          unint64_t v126 = sub_250513064(v116, v115);
          if ((v125 & 1) != (v127 & 1)) {
            goto LABEL_55;
          }
          unint64_t v4 = v126;
          uint64_t v128 = (uint64_t)v181;
          if ((v125 & 1) == 0)
          {
LABEL_29:
            v196(v192, 1, 1, v191);
            __break(1u);
            goto LABEL_30;
          }
        }
        uint64_t v129 = v80;
        unint64_t v130 = *(void *)(v190 + 72) * v4;
        uint64_t v131 = (uint64_t)v192;
        sub_25051C8F4(*(void *)(v199[0] + 56) + v130, (uint64_t)v192, type metadata accessor for GroupMembership.MemberProperties);
        unint64_t v132 = v191;
        v196((void (**)(uint64_t, char *, uint64_t))v131, 0, 1, v191);
        sub_250528518(v193, v131 + *(int *)(v132 + 28), &qword_269AB5ED0);
        sub_2504DAEFC(v131, v128, &qword_269AB5A80);
        if (v195(v128, 1, v132) == 1)
        {
          sub_2504DAF60(v128, &qword_269AB5A80);
          uint64_t v112 = v199[0];
          swift_arrayDestroy();
          sub_2505B63C4(v4, v112);
        }
        else
        {
          uint64_t v133 = v180;
          sub_25051C8F4(v128, v180, type metadata accessor for GroupMembership.MemberProperties);
          uint64_t v112 = v199[0];
          sub_25051C8F4(v133, *(void *)(v199[0] + 56) + v130, type metadata accessor for GroupMembership.MemberProperties);
        }
        sub_2504DAF60((uint64_t)v192, &qword_269AB5A80);
        sub_250511528(v116, v115);
        uint64_t v113 = v194;
        uint64_t *v194 = v112;
        uint64_t v111 = v113;
        sub_250511528(v116, v115);
        sub_250511528(v116, v115);
        unint64_t v80 = (uint64_t *)((char *)v129 + v189);
        if (!--v188)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
      goto LABEL_52;
    }
  }
  v196((void (**)(uint64_t, char *, uint64_t))v185, 1, 1, v4);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = sub_2505BE7E0();
  __break(1u);
  return result;
}

uint64_t sub_2504E6830(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v8 - 8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for GroupMembership.MemberProperties(0);
  MEMORY[0x270FA5388](v15, v16, v15, v17, v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v21 + 48))(a1, 1) == 1)
  {
    sub_2504DAF60(a1, &qword_269AB5A80);
    sub_2505B4048(a2, a3, (uint64_t)v14);
    sub_250511528(a2, a3);
    return sub_2504DAF60((uint64_t)v14, &qword_269AB5A80);
  }
  else
  {
    sub_25051C8F4(a1, (uint64_t)v20, type metadata accessor for GroupMembership.MemberProperties);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    sub_2505144F8((uint64_t)v20, a2, a3, isUniquelyReferenced_nonNull_native);
    *unint64_t v4 = v25;
    swift_bridgeObjectRelease();
    return sub_250511528(a2, a3);
  }
}

uint64_t sub_2504E6A04(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A20);
  MEMORY[0x270FA5388](v8 - 8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for MembershipVerifier(0);
  MEMORY[0x270FA5388](v15, v16, v15, v17, v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v21 + 48))(a1, 1) == 1)
  {
    sub_2504DAF60(a1, &qword_269AB5A20);
    sub_2505B4360(a2, a3, (uint64_t)v14);
    sub_250511528(a2, a3);
    return sub_2504DAF60((uint64_t)v14, &qword_269AB5A20);
  }
  else
  {
    sub_25051C8F4(a1, (uint64_t)v20, type metadata accessor for MembershipVerifier);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    sub_2505147B8((uint64_t)v20, a2, a3, isUniquelyReferenced_nonNull_native);
    *unint64_t v4 = v25;
    swift_bridgeObjectRelease();
    return sub_250511528(a2, a3);
  }
}

uint64_t Group.__allocating_init(groupID:version:memberGroupKitID:dsid:groupBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_269AB5A68
                                                                                     + dword_269AB5A68);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = sub_25052A508;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_2504E6CBC(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, unsigned int (*a8)(uint64_t, uint64_t, uint64_t), unint64_t a9)
{
  uint64_t v198 = a5;
  v195 = a7;
  uint64_t v188 = a4;
  LODWORD(v192) = a2;
  v199 = a8;
  unint64_t v200 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A30);
  MEMORY[0x270FA5388](v13 - 8, v14, v15, v16, v17);
  uint64_t v174 = (uint64_t)&v168 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = sub_2505BDF90();
  uint64_t v189 = *(void *)(v193 - 8);
  MEMORY[0x270FA5388](v193, v19, v20, v21, v22);
  v176 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_2505BE000();
  uint64_t v190 = *(void *)(v24 - 8);
  uint64_t v191 = v24;
  MEMORY[0x270FA5388](v24, v25, v26, v27, v28);
  v175 = (char *)&v168 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for UserKeyingInfo(0);
  MEMORY[0x270FA5388](v30 - 8, v31, v32, v33, v34);
  v177 = (uint64_t *)((char *)&v168 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v36 - 8, v37, v38, v39, v40);
  uint64_t v181 = (uint64_t)&v168 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v179 = *(void *)(v180 - 8);
  MEMORY[0x270FA5388](v180, v42, v43, v44, v45);
  v178 = (char *)&v168 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v53 = MEMORY[0x270FA5388](v47, v49, v50, v51, v52);
  uint64_t v55 = (uint64_t *)((char *)&v168 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v57 = *a1;
  uint64_t v56 = (uint64_t *)a1[1];
  uint64_t v201 = *a3;
  v196 = (uint8_t *)a3[1];
  uint64_t v59 = *a6;
  uint64_t v58 = a6[1];
  unint64_t v60 = v195[1];
  uint64_t v183 = *v195;
  unint64_t v184 = v60;
  *(_OWORD *)(v9 + 88) = xmmword_2505BFEE0;
  *(void *)(v9 + 104) = 0;
  *(void *)(v9 + 112) = 0;
  *(_OWORD *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset) = xmmword_2505BFEE0;
  uint64_t v61 = (uint64_t *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
  *(_OWORD *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_2505BFEE0;
  uint64_t v64 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56);
  uint64_t v63 = v48 + 56;
  uint64_t v62 = v64;
  uint64_t v173 = v53;
  ((void (*)(uint64_t, uint64_t, uint64_t))v64)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, 1, 1);
  uint64_t v65 = v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
  *(_OWORD *)uint64_t v65 = 0u;
  *(_OWORD *)(v65 + 16) = 0u;
  *(void *)(v65 + 32) = 0;
  *(void *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  uint64_t v185 = v9;
  *(unsigned char *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  uint64_t v66 = type metadata accessor for Group(0);
  uint64_t v194 = v57;
  v195 = v56;
  uint64_t v202 = v57;
  unint64_t v203 = (unint64_t)v56;
  uint64_t v186 = v59;
  unint64_t v187 = v58;
  v204[0] = v59;
  v204[1] = v58;
  uint64_t v67 = v198;
  uint64_t v68 = v199;
  unint64_t v69 = v200;
  uint64_t v182 = v66;
  uint64_t v70 = v197;
  sub_2504E813C(&v202, v192, v198, v204, v199, v200, v55);
  if (v70)
  {
    uint64_t v197 = v70;
    sub_250511528(v183, v184);
    sub_250511528((uint64_t)v68, v69);
    (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v67, v193);
    (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v188, v191);
    sub_250511528(v186, v187);
    sub_250511528(v201, (unint64_t)v196);
    sub_250511528(v194, (unint64_t)v195);
    uint64_t v71 = (void *)&unk_269AC3000;
    uint64_t v72 = (void *)&unk_269AC3000;
    uint64_t v73 = v185;
    goto LABEL_27;
  }
  uint64_t v74 = v179;
  uint64_t v75 = v180;
  v171 = v61;
  unint64_t v169 = v62;
  uint64_t v170 = v63;
  uint64_t v76 = *v55;
  uint64_t v77 = *(void *)(*v55 + 16);
  v172 = v55;
  if (!v77)
  {
    uint64_t v83 = v181;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))(v181, 1, 1, v180);
    unint64_t v86 = (unint64_t)v195;
    unint64_t v79 = (unint64_t)v196;
    uint64_t v73 = v185;
    uint64_t v87 = v194;
LABEL_9:
    sub_250511528(v186, v187);
    sub_250511528(v87, v86);
    sub_250511528(v183, v184);
    sub_2504DAF60(v83, &qword_269AB5A80);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v90 = sub_2505BDC40();
    __swift_project_value_buffer(v90, (uint64_t)qword_269AC3188);
    os_log_type_t v91 = sub_2505BE3D0();
    uint64_t v92 = v201;
    sub_2504DBC4C(v201, v79);
    uint64_t v93 = sub_2505BDC20();
    os_log_type_t v94 = v91;
    if (os_log_type_enabled(v93, v91))
    {
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      uint64_t v197 = swift_slowAlloc();
      uint64_t v202 = v197;
      *(_DWORD *)uint64_t v95 = 136315138;
      v196 = v95 + 4;
      sub_2504DBC4C(v92, v79);
      uint64_t v96 = sub_2505BD8B0();
      unint64_t v98 = v97;
      sub_250511528(v92, v79);
      v204[0] = sub_25051171C(v96, v98, &v202);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      sub_250511528(v92, v79);
      sub_250511528(v92, v79);
      _os_log_impl(&dword_2504D2000, v93, v94, "user %s is not a member of the group", v95, 0xCu);
      uint64_t v99 = v197;
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v99, -1, -1);
      MEMORY[0x25337FF10](v95, -1, -1);
    }
    else
    {
      sub_250511528(v92, v79);
      sub_250511528(v92, v79);
    }

    uint64_t v71 = (void *)&unk_269AC3000;
    uint64_t v72 = (void *)&unk_269AC3000;
    uint64_t v100 = v191;
    uint64_t v101 = v198;
    uint64_t v102 = v189;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    uint64_t v103 = swift_allocError();
    *(_WORD *)uint64_t v104 = 338;
    *(_OWORD *)(v104 + 8) = xmmword_2505BFF40;
    *(void *)(v104 + 24) = 0x80000002505CA120;
    *(void *)(v104 + 32) = 0xD000000000000052;
    *(void *)(v104 + 40) = 0x80000002505C8CB0;
    uint64_t v197 = v103;
    swift_willThrow();
    sub_250511528((uint64_t)v199, v200);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v193);
    (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v188, v100);
LABEL_26:
    sub_25051AF3C((uint64_t)v172, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    goto LABEL_27;
  }
  uint64_t v197 = 0;
  swift_bridgeObjectRetain();
  uint64_t v78 = v201;
  unint64_t v79 = (unint64_t)v196;
  sub_2504DBC4C(v201, (unint64_t)v196);
  unint64_t v80 = sub_250513064(v78, v79);
  uint64_t v73 = v185;
  uint64_t v82 = v194;
  uint64_t v81 = v195;
  uint64_t v83 = v181;
  if (v84)
  {
    sub_25051B91C(*(void *)(v76 + 56) + *(void *)(v74 + 72) * v80, v181, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v85 = 0;
  }
  else
  {
    uint64_t v85 = 1;
  }
  unint64_t v88 = v178;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v83, v85, 1, v75);
  swift_bridgeObjectRelease();
  sub_250511528(v201, v79);
  int v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v83, 1, v75);
  unint64_t v86 = (unint64_t)v81;
  uint64_t v87 = v82;
  if (v89 == 1) {
    goto LABEL_9;
  }
  sub_25051C8F4(v83, (uint64_t)v88, type metadata accessor for GroupMembership.MemberProperties);
  uint64_t v105 = *((void *)v88 + 1);
  unint64_t v106 = *((void *)v88 + 2);
  uint64_t v107 = v186;
  unint64_t v108 = v187;
  sub_2504DBC4C(v186, v187);
  if (v106 >> 60 == 15)
  {
    sub_250511528(v107, v108);
    sub_25051B8D4(v107, v108);
    sub_25051B8D4(v105, v106);
    uint64_t v109 = v201;
LABEL_20:
    sub_250511528(v87, v86);
    sub_250511528(v183, v184);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v117 = sub_2505BDC40();
    __swift_project_value_buffer(v117, (uint64_t)qword_269AC3188);
    os_log_type_t v118 = sub_2505BE3D0();
    unint64_t v119 = (unint64_t)v196;
    sub_2504DBC4C(v109, (unint64_t)v196);
    uint64_t v120 = sub_2505BDC20();
    os_log_type_t v121 = v118;
    if (os_log_type_enabled(v120, v118))
    {
      uint64_t v122 = (uint8_t *)swift_slowAlloc();
      uint64_t v197 = swift_slowAlloc();
      uint64_t v202 = v197;
      *(_DWORD *)uint64_t v122 = 136315138;
      v195 = (uint64_t *)(v122 + 4);
      sub_2504DBC4C(v109, v119);
      uint64_t v123 = sub_2505BD8B0();
      unint64_t v125 = v124;
      sub_250511528(v109, v119);
      v204[0] = sub_25051171C(v123, v125, &v202);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      sub_250511528(v109, v119);
      sub_250511528(v109, v119);
      _os_log_impl(&dword_2504D2000, v120, v121, "member %s key share does not match group key share", v122, 0xCu);
      uint64_t v126 = v197;
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v126, -1, -1);
      MEMORY[0x25337FF10](v122, -1, -1);
    }
    else
    {
      sub_250511528(v109, v119);
      sub_250511528(v109, v119);
    }

    uint64_t v71 = &unk_269AC3000;
    uint64_t v72 = &unk_269AC3000;
    uint64_t v127 = v191;
    uint64_t v128 = v198;
    uint64_t v129 = v189;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    uint64_t v130 = swift_allocError();
    *(_WORD *)uint64_t v131 = 344;
    *(_OWORD *)(v131 + 8) = xmmword_2505BFF30;
    *(void *)(v131 + 24) = 0x80000002505CA120;
    *(void *)(v131 + 32) = 0xD000000000000052;
    *(void *)(v131 + 40) = 0x80000002505C8CB0;
    uint64_t v197 = v130;
    swift_willThrow();
    sub_250511528((uint64_t)v199, v200);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v193);
    (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v188, v127);
    sub_25051AF3C((uint64_t)v178, type metadata accessor for GroupMembership.MemberProperties);
    goto LABEL_26;
  }
  sub_25051B908(v105, v106);
  LODWORD(v181) = sub_25051AAD8(v107, v108, v105, v106);
  sub_25051B8D4(v105, v106);
  sub_250511528(v107, v108);
  sub_250511528(v107, v108);
  uint64_t v109 = v201;
  if ((v181 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v110 = swift_bridgeObjectRetain();
  uint64_t v111 = v197;
  uint64_t v112 = sub_2504DCE2C(v110);
  swift_bridgeObjectRelease();
  sub_2505AF42C(v112, &v202);
  uint64_t v113 = v191;
  uint64_t v114 = v193;
  unint64_t v115 = v199;
  unint64_t v116 = v200;
  if (!v111)
  {
    uint64_t v133 = v202;
    uint64_t v134 = v195;
    unint64_t v135 = (unint64_t)v196;
    *(void *)(v73 + 16) = v194;
    *(void *)(v73 + 24) = v134;
    *(unsigned char *)(v73 + 32) = *v178;
    *(void *)(v73 + 40) = v109;
    *(void *)(v73 + 48) = v135;
    *(void *)(v73 + 56) = v133;
    *(_DWORD *)(v73 + 64) = v192;
    sub_2505BD810();
    swift_allocObject();
    sub_2504DBC4C(v109, v135);
    uint64_t v136 = sub_2505BD7E0();
    unint64_t v137 = sub_25055E540(0x4000000000, v136 | 0x4000000000000000);
    uint64_t v138 = *(void *)(v73 + 88);
    unint64_t v139 = *(void *)(v73 + 96);
    uint64_t v141 = *(void *)(v73 + 104);
    unint64_t v140 = *(void *)(v73 + 112);
    *(void *)(v73 + 88) = v137;
    *(void *)(v73 + 96) = v142;
    *(void *)(v73 + 104) = v143;
    *(void *)(v73 + 112) = v144;
    unint64_t v187 = v137;
    unint64_t v192 = v142;
    unint64_t v145 = v144;
    uint64_t v146 = v143;
    sub_2504DBC4C(v137, v142);
    uint64_t v194 = v146;
    v195 = (uint64_t *)v145;
    sub_25051B908(v146, v145);
    sub_25051B884(v138, v139, v141, v140);
    swift_allocObject();
    uint64_t v147 = sub_2505BD7E0();
    *(void *)(v73 + 72) = sub_25055E814(0x4000000000, v147 | 0x4000000000000000);
    *(void *)(v73 + 80) = v148;
    uint64_t v149 = MEMORY[0x263F8EE78];
    *(void *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites) = sub_2504E1B08(MEMORY[0x263F8EE78]);
    *(void *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers) = sub_2504E1CB8(v149, &qword_269AB5FF0, &qword_269AB5FF8, type metadata accessor for MembershipVerifier, type metadata accessor for MembershipVerifier);
    *(unsigned char *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 4;
    v150 = v171;
    uint64_t v151 = *v171;
    unint64_t v152 = v171[1];
    uint64_t v154 = v199;
    unint64_t v153 = v200;
    uint64_t *v171 = (uint64_t)v199;
    v150[1] = v153;
    sub_2504DBC4C((uint64_t)v154, v153);
    sub_25051B8D4(v151, v152);
    uint64_t v202 = v201;
    unint64_t v203 = (unint64_t)v196;
    uint64_t v155 = v190;
    uint64_t v156 = (uint64_t)v175;
    (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v175, v188, v191);
    uint64_t v157 = v189;
    uint64_t v158 = (uint64_t)v176;
    uint64_t v159 = v198;
    (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v176, v198, v193);
    uint64_t v160 = v177;
    sub_250561DCC(&v202, v156, v158, v177);
    uint64_t v197 = 0;
    unint64_t v161 = v184;
    uint64_t v162 = v183;
    sub_250511528((uint64_t)v154, v200);
    sub_250511528(v187, v192);
    sub_25051B8D4(v194, (unint64_t)v195);
    (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v159, v193);
    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v188, v191);
    sub_25051AF3C((uint64_t)v178, type metadata accessor for GroupMembership.MemberProperties);
    sub_25051C8F4((uint64_t)v160, v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
    uint64_t v163 = v174;
    sub_25051C8F4((uint64_t)v172, v174, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    v169(v163, 0, 1, v173);
    uint64_t v164 = v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
    swift_beginAccess();
    sub_250528518(v163, v164, &qword_269AB5A30);
    swift_endAccess();
    uint64_t v165 = (uint64_t *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    uint64_t v166 = *(void *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    unint64_t v167 = *(void *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    *uint64_t v165 = v162;
    v165[1] = v161;
    sub_25051B8D4(v166, v167);
    return v73;
  }
  uint64_t v197 = v111;
  sub_250511528(v194, (unint64_t)v195);
  sub_250511528(v183, v184);
  sub_250511528((uint64_t)v115, v116);
  sub_250511528(v109, (unint64_t)v196);
  (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v198, v114);
  (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v188, v113);
  sub_25051AF3C((uint64_t)v178, type metadata accessor for GroupMembership.MemberProperties);
  sub_25051AF3C((uint64_t)v172, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  uint64_t v71 = (void *)&unk_269AC3000;
  uint64_t v72 = (void *)&unk_269AC3000;
LABEL_27:
  sub_25051B884(*(void *)(v73 + 88), *(void *)(v73 + 96), *(void *)(v73 + 104), *(void *)(v73 + 112));
  sub_25051B8D4(*(void *)(v73 + v72[81]), *(void *)(v73 + v72[81] + 8));
  sub_25051B8D4(*(void *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(void *)(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
  sub_2504DAF60(v73 + v71[83], &qword_269AB5A30);
  sub_2504DAF60(v73 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_269AB5A38);
  swift_release();
  swift_deallocPartialClassInstance();
  return v73;
}

uint64_t sub_2504E813C@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X4>, uint64_t *a4@<X5>, unsigned int (*a5)(uint64_t, uint64_t, uint64_t)@<X6>, unint64_t a6@<X7>, void *a7@<X8>)
{
  unint64_t v301 = a6;
  v300 = a5;
  uint64_t v278 = a3;
  unsigned int v303 = a2;
  v267 = a7;
  uint64_t v306 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  uint64_t v265 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8, v10, v11, v12, v13);
  v266 = (char *)&v260 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  uint64_t v20 = MEMORY[0x270FA5388](v15 - 8, v16, v17, v18, v19);
  uint64_t v264 = (uint64_t)&v260 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v22, v23, v24, v25);
  uint64_t v271 = (uint64_t)&v260 - v26;
  uint64_t v273 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v275 = *(void *)(v273 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v273, v27, v28, v29, v30);
  v263 = (_DWORD *)((char *)&v260 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v31, v33, v34, v35, v36);
  v270 = (_DWORD *)((char *)&v260 - v37);
  uint64_t v272 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  uint64_t v42 = MEMORY[0x270FA5388](v272, v38, v39, v40, v41);
  uint64_t v268 = (uint64_t)&v260 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42, v44, v45, v46, v47);
  v274 = (uint64_t *)((char *)&v260 - v48);
  uint64_t v269 = type metadata accessor for Group.GroupCiphertextContents(0);
  MEMORY[0x270FA5388](v269, v49, v50, v51, v52);
  uint64_t v279 = (uint64_t)&v260 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  uint64_t v59 = MEMORY[0x270FA5388](v54 - 8, v55, v56, v57, v58);
  uint64_t v281 = (uint64_t)&v260 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v59, v61, v62, v63, v64);
  v298 = (char *)&v260 - v65;
  uint64_t v291 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v292 = *(void *)(v291 - 8);
  uint64_t v70 = MEMORY[0x270FA5388](v291, v66, v67, v68, v69);
  v280 = (_OWORD *)((char *)&v260 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v70, v72, v73, v74, v75);
  *(void *)&long long v288 = (char *)&v260 - v76;
  uint64_t v286 = sub_2505BE0B0();
  uint64_t v287 = *(void *)(v286 - 8);
  uint64_t v81 = MEMORY[0x270FA5388](v286, v77, v78, v79, v80);
  v282 = (char *)&v260 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v81, v83, v84, v85, v86);
  v293 = (char *)&v260 - v87;
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  uint64_t v93 = MEMORY[0x270FA5388](v88 - 8, v89, v90, v91, v92);
  uint64_t v284 = (uint64_t)&v260 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v93, v95, v96, v97, v98);
  v297 = (uint64_t *)((char *)&v260 - v99);
  uint64_t v294 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v299 = *(void *)(v294 - 8);
  uint64_t v104 = MEMORY[0x270FA5388](v294, v100, v101, v102, v103);
  v283 = (_OWORD *)((char *)&v260 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v104, v106, v107, v108, v109);
  v296 = (uint64_t *)((char *)&v260 - v110);
  uint64_t v290 = sub_2505BE040();
  uint64_t v289 = *(void *)(v290 - 8);
  uint64_t v115 = MEMORY[0x270FA5388](v290, v111, v112, v113, v114);
  v285 = (char *)&v260 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v115, v117, v118, v119, v120);
  v295 = (char *)&v260 - v121;
  uint64_t v122 = sub_2505BDA70();
  MEMORY[0x270FA5388](v122 - 8, v123, v124, v125, v126);
  uint64_t v127 = type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v132 = MEMORY[0x270FA5388](v127, v128, v129, v130, v131);
  uint64_t v134 = (int *)((char *)&v260 - ((v133 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v132, v135, v136, v137, v138);
  unint64_t v140 = (unsigned int *)((char *)&v260 - v139);
  uint64_t v141 = *a1;
  unint64_t v142 = a1[1];
  uint64_t v277 = *a4;
  uint64_t v276 = a4[1];
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505BFEC0;
  *(void *)(inited + 32) = v141;
  *(void *)(inited + 40) = v142;
  LODWORD(v304[0]) = bswap32(v303);
  unint64_t v145 = v142;
  uint64_t v146 = v140;
  sub_2504DBC4C(v141, v145);
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)v304, (uint64_t)v304 + 4);
  *(void *)(inited + 56) = v147;
  uint64_t v305 = 0;
  memset(v304, 0, sizeof(v304));
  sub_2504DBC4C((uint64_t)v300, v301);
  sub_2505BDA60();
  sub_250528338(&qword_269AB5F70, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
  uint64_t v148 = v302;
  sub_2505BDB30();
  if (v148) {
    return swift_bridgeObjectRelease();
  }
  v150 = v296;
  uint64_t v151 = (uint64_t)v298;
  uint64_t v152 = v299;
  unint64_t v301 = v143;
  if (*v146 != 1)
  {
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v156 = sub_2505BDC40();
    __swift_project_value_buffer(v156, (uint64_t)qword_269AC3188);
    os_log_type_t v157 = sub_2505BE3D0();
    sub_25051B91C((uint64_t)v146, (uint64_t)v134, type metadata accessor for GKCrypto_GroupBlob);
    uint64_t v158 = sub_2505BDC20();
    os_log_type_t v159 = v157;
    if (os_log_type_enabled(v158, v157))
    {
      uint64_t v160 = swift_slowAlloc();
      *(_DWORD *)uint64_t v160 = 67109376;
      int v161 = *v134;
      sub_25051AF3C((uint64_t)v134, type metadata accessor for GKCrypto_GroupBlob);
      LODWORD(v304[0]) = v161;
      sub_2505BE430();
      *(_WORD *)(v160 + 8) = 1024;
      LODWORD(v304[0]) = 1;
      sub_2505BE430();
      _os_log_impl(&dword_2504D2000, v158, v159, "unsupported version in GroupBlob, got %u expected %u", (uint8_t *)v160, 0xEu);
      MEMORY[0x25337FF10](v160, -1, -1);
    }
    else
    {
      sub_25051AF3C((uint64_t)v134, type metadata accessor for GKCrypto_GroupBlob);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v165 = 355;
    *(_OWORD *)(v165 + 8) = xmmword_2505BFF50;
    *(void *)(v165 + 24) = 0x80000002505C99F0;
    *(void *)(v165 + 32) = 0xD000000000000052;
    *(void *)(v165 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return sub_25051AF3C((uint64_t)v146, type metadata accessor for GKCrypto_GroupBlob);
  }
  v302 = (void *)inited;
  uint64_t v262 = (uint64_t)v146 + *(int *)(v127 + 40);
  unint64_t v153 = (unsigned int (*)(void, void, void))v297;
  sub_2504DAEFC(v262, (uint64_t)v297, &qword_269AB5CC8);
  uint64_t v154 = v152 + 48;
  v300 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
  if (v300((uint64_t)v153, 1, v294) == 1)
  {
    *(_OWORD *)v150 = xmmword_2505BFEF0;
    *((_OWORD *)v150 + 1) = xmmword_2505BFEF0;
    *((_OWORD *)v150 + 2) = xmmword_2505BFEF0;
    uint64_t v155 = v150;
    sub_2505BDA40();
    sub_2504DAF60((uint64_t)v153, &qword_269AB5CC8);
  }
  else
  {
    uint64_t v155 = v150;
    sub_25051C8F4((uint64_t)v153, (uint64_t)v150, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  uint64_t v163 = *v155;
  unint64_t v162 = v155[1];
  sub_2504DBC4C(*v155, v162);
  sub_25051AF3C((uint64_t)v155, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  *(void *)&v304[0] = v163;
  *((void *)&v304[0] + 1) = v162;
  unint64_t v164 = sub_25051AE60();
  sub_2505BE020();
  uint64_t v299 = v154;
  v296 = (uint64_t *)((char *)v146 + *(int *)(v127 + 36));
  uint64_t v166 = v151;
  sub_2504DAEFC((uint64_t)v296, v151, &qword_269AB5CC0);
  uint64_t v167 = v292 + 48;
  v297 = *(void **)(v292 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v297)(v151, 1, v291) == 1)
  {
    uint64_t v168 = v288;
    *(_OWORD *)long long v288 = xmmword_2505BFEF0;
    *(_OWORD *)(v168 + 16) = xmmword_2505BFEF0;
    *(_OWORD *)(v168 + 32) = xmmword_2505BFEF0;
    *(_OWORD *)(v168 + 48) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v166, &qword_269AB5CC0);
  }
  else
  {
    uint64_t v169 = v151;
    uint64_t v168 = v288;
    sub_25051C8F4(v169, v288, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  uint64_t v170 = *(void *)(v168 + 16);
  unint64_t v171 = *(void *)(v168 + 24);
  sub_2504DBC4C(v170, v171);
  sub_25051AF3C(v168, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  *(void *)&v304[0] = v170;
  *((void *)&v304[0] + 1) = v171;
  sub_2505BE0A0();
  v298 = (char *)v164;
  uint64_t v292 = v167;
  uint64_t v172 = swift_initStackObject();
  long long v288 = xmmword_2505BFE80;
  *(_OWORD *)(v172 + 16) = xmmword_2505BFE80;
  LODWORD(v304[0]) = bswap32(*v146);
  *(void *)(v172 + 32) = sub_25056DAD0((uint64_t)v304, (uint64_t)v304 + 4);
  *(void *)(v172 + 40) = v173;
  *(void *)&v304[0] = v172;
  uint64_t v174 = swift_bridgeObjectRetain();
  sub_250514A58(v174);
  v175 = *(void **)&v304[0];
  if (qword_269AB5438 != -1) {
    swift_once();
  }
  v261 = v146;
  uint64_t v176 = qword_269AC31D0;
  unint64_t v177 = *(void *)algn_269AC31D8;
  sub_2504DBC4C(qword_269AC31D0, *(unint64_t *)algn_269AC31D8);
  sub_2504DBC4C(v176, v177);
  swift_bridgeObjectRetain();
  v178 = v175;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v178 = sub_250570DC0(0, v175[2] + 1, 1, v175);
  }
  unint64_t v180 = v178[2];
  unint64_t v179 = v178[3];
  if (v180 >= v179 >> 1) {
    v178 = sub_250570DC0((void *)(v179 > 1), v180 + 1, 1, v178);
  }
  v178[2] = v180 + 1;
  uint64_t v181 = &v178[2 * v180];
  v181[4] = v176;
  v181[5] = v177;
  sub_250511528(v176, v177);
  swift_bridgeObjectRelease();
  uint64_t v146 = v261;
  uint64_t v182 = sub_2504F52CC(v178);
  unint64_t v184 = v183;
  swift_bridgeObjectRelease();
  *(void *)&v304[0] = v182;
  *((void *)&v304[0] + 1) = v184;
  uint64_t v185 = v295;
  char v186 = sub_2505BE050();
  sub_250511528(v182, v184);
  if ((v186 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v189 = sub_2505BDC40();
    __swift_project_value_buffer(v189, (uint64_t)qword_269AC3188);
    os_log_type_t v190 = sub_2505BE3D0();
    uint64_t v191 = sub_2505BDC20();
    os_log_type_t v192 = v190;
    BOOL v193 = os_log_type_enabled(v191, v190);
    uint64_t v194 = v290;
    if (v193)
    {
      v195 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v195 = 0;
      _os_log_impl(&dword_2504D2000, v191, v192, "GroupBlob not signed by administrator key", v195, 2u);
      MEMORY[0x25337FF10](v195, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v196 = 332;
    *(_OWORD *)(v196 + 8) = xmmword_2505BFF60;
    *(void *)(v196 + 24) = 0x80000002505C99F0;
    *(void *)(v196 + 32) = 0xD000000000000052;
    *(void *)(v196 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v287 + 8))(v293, v286);
    (*(void (**)(char *, uint64_t))(v289 + 8))(v185, v194);
    return sub_25051AF3C((uint64_t)v146, type metadata accessor for GKCrypto_GroupBlob);
  }
  uint64_t v187 = v284;
  sub_2504DAEFC(v262, v284, &qword_269AB5CC8);
  if (v300(v187, 1, v294) == 1)
  {
    uint64_t v188 = v283;
    _OWORD *v283 = xmmword_2505BFEF0;
    v188[1] = xmmword_2505BFEF0;
    v188[2] = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v187, &qword_269AB5CC8);
  }
  else
  {
    uint64_t v188 = v283;
    sub_25051C8F4(v187, (uint64_t)v283, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  uint64_t v197 = *((void *)v188 + 4);
  unint64_t v198 = *((void *)v188 + 5);
  sub_2504DBC4C(v197, v198);
  sub_25051AF3C((uint64_t)v188, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  *(void *)&v304[0] = v197;
  *((void *)&v304[0] + 1) = v198;
  sub_2505BE020();
  uint64_t v199 = v281;
  sub_2504DAEFC((uint64_t)v296, v281, &qword_269AB5CC0);
  unsigned int v200 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v297)(v199, 1, v291);
  uint64_t v201 = v280;
  if (v200 == 1)
  {
    _OWORD *v280 = xmmword_2505BFEF0;
    v201[1] = xmmword_2505BFEF0;
    v201[2] = xmmword_2505BFEF0;
    v201[3] = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v199, &qword_269AB5CC0);
  }
  else
  {
    sub_25051C8F4(v199, (uint64_t)v280, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  uint64_t v202 = *(void *)v201;
  unint64_t v203 = *((void *)v201 + 1);
  sub_2504DBC4C(*(void *)v201, v203);
  sub_25051AF3C((uint64_t)v201, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  *(void *)&v304[0] = v202;
  *((void *)&v304[0] + 1) = v203;
  sub_2505BE0A0();
  uint64_t v204 = swift_initStackObject();
  *(_OWORD *)(v204 + 16) = v288;
  uint64_t v146 = v261;
  LODWORD(v304[0]) = bswap32(*v261);
  *(void *)(v204 + 32) = sub_25056DAD0((uint64_t)v304, (uint64_t)v304 + 4);
  *(void *)(v204 + 40) = v205;
  *(void *)&v304[0] = v204;
  uint64_t v206 = swift_bridgeObjectRetain();
  sub_250514A58(v206);
  v207 = *(void **)&v304[0];
  if (qword_269AB5440 != -1) {
    swift_once();
  }
  uint64_t v208 = qword_269AC31E0;
  unint64_t v209 = *(void *)algn_269AC31E8;
  sub_2504DBC4C(qword_269AC31E0, *(unint64_t *)algn_269AC31E8);
  sub_2504DBC4C(v208, v209);
  swift_bridgeObjectRetain();
  v210 = v207;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v210 = sub_250570DC0(0, v207[2] + 1, 1, v207);
  }
  unint64_t v212 = v210[2];
  unint64_t v211 = v210[3];
  if (v212 >= v211 >> 1) {
    v210 = sub_250570DC0((void *)(v211 > 1), v212 + 1, 1, v210);
  }
  v210[2] = v212 + 1;
  v213 = &v210[2 * v212];
  v213[4] = v208;
  v213[5] = v209;
  sub_250511528(v208, v209);
  swift_bridgeObjectRelease();
  uint64_t v214 = sub_2504F5B34(v210);
  unint64_t v216 = v215;
  swift_bridgeObjectRelease();
  *(void *)&v304[0] = v214;
  *((void *)&v304[0] + 1) = v216;
  char v217 = sub_2505BE050();
  sub_250511528(v214, v216);
  if ((v217 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v220 = v295;
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v221 = sub_2505BDC40();
    __swift_project_value_buffer(v221, (uint64_t)qword_269AC3188);
    os_log_type_t v222 = sub_2505BE3D0();
    v223 = sub_2505BDC20();
    os_log_type_t v224 = v222;
    BOOL v225 = os_log_type_enabled(v223, v222);
    uint64_t v226 = v290;
    if (v225)
    {
      v227 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v227 = 0;
      _os_log_impl(&dword_2504D2000, v223, v224, "GroupBlob not signed by member key", v227, 2u);
      MEMORY[0x25337FF10](v227, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v228 = 333;
    *(_OWORD *)(v228 + 8) = xmmword_2505BFF70;
    *(void *)(v228 + 24) = 0x80000002505C99F0;
    *(void *)(v228 + 32) = 0xD000000000000052;
    *(void *)(v228 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    goto LABEL_50;
  }
  *(void *)&v304[0] = v277;
  *((void *)&v304[0] + 1) = v276;
  uint64_t v218 = v279;
  sub_250502020(v146, v278, v304, v302, v279);
  v219 = v295;
  swift_bridgeObjectRelease();
  v232 = v274;
  sub_25051B91C(v218 + *(int *)(v269 + 20), (uint64_t)v274, type metadata accessor for GKCrypto_GroupAETextToSign);
  uint64_t v233 = v271;
  sub_2504DAEFC((uint64_t)v232 + *(int *)(v272 + 24), v271, &qword_269AB5EC0);
  uint64_t v234 = v275 + 48;
  v302 = *(void **)(v275 + 48);
  int v235 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v302)(v233, 1, v273);
  v236 = v219;
  v237 = v270;
  if (v235 == 1)
  {
    _DWORD *v270 = 0;
    *(_OWORD *)(v237 + 2) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v233, &qword_269AB5EC0);
  }
  else
  {
    sub_25051C8F4(v233, (uint64_t)v270, type metadata accessor for GKCrypto_VersionedSeed);
  }
  int v238 = *v237;
  sub_25051AF3C((uint64_t)v237, type metadata accessor for GKCrypto_VersionedSeed);
  if (v238 != v303)
  {
    uint64_t v275 = v234;
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v244 = sub_2505BDC40();
    __swift_project_value_buffer(v244, (uint64_t)qword_269AC3188);
    os_log_type_t v245 = sub_2505BE3D0();
    uint64_t v246 = v268;
    sub_25051B91C((uint64_t)v232, v268, type metadata accessor for GKCrypto_GroupAETextToSign);
    v247 = sub_2505BDC20();
    if (os_log_type_enabled(v247, v245))
    {
      uint64_t v248 = swift_slowAlloc();
      *(_DWORD *)uint64_t v248 = 67109376;
      LODWORD(v304[0]) = v303;
      sub_2505BE430();
      *(_WORD *)(v248 + 8) = 1024;
      uint64_t v249 = v246 + *(int *)(v272 + 24);
      uint64_t v250 = v264;
      sub_2504DAEFC(v249, v264, &qword_269AB5EC0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v302)(v250, 1, v273) == 1)
      {
        v251 = v263;
        _DWORD *v263 = 0;
        *(_OWORD *)(v251 + 2) = xmmword_2505BFEF0;
        sub_2505BDA40();
        sub_2504DAF60(v250, &qword_269AB5EC0);
      }
      else
      {
        v251 = v263;
        sub_25051C8F4(v250, (uint64_t)v263, type metadata accessor for GKCrypto_VersionedSeed);
      }
      int v258 = *v251;
      sub_25051AF3C((uint64_t)v251, type metadata accessor for GKCrypto_VersionedSeed);
      sub_25051AF3C(v268, type metadata accessor for GKCrypto_GroupAETextToSign);
      LODWORD(v304[0]) = v258;
      sub_2505BE430();
      _os_log_impl(&dword_2504D2000, v247, v245, "seed and group versions do not match, got %u expected %u", (uint8_t *)v248, 0xEu);
      MEMORY[0x25337FF10](v248, -1, -1);
      uint64_t v146 = v261;
      uint64_t v226 = v290;
      v220 = v295;
    }
    else
    {
      sub_25051AF3C(v246, type metadata accessor for GKCrypto_GroupAETextToSign);
      uint64_t v226 = v290;
      v220 = v236;
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v259 = 334;
    *(_OWORD *)(v259 + 8) = xmmword_2505BFF80;
    *(void *)(v259 + 24) = 0x80000002505C99F0;
    *(void *)(v259 + 32) = 0xD000000000000052;
    *(void *)(v259 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_25051AF3C((uint64_t)v274, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_25051AF3C(v279, type metadata accessor for Group.GroupCiphertextContents);
LABEL_50:
    v229 = *(void (**)(char *, uint64_t))(v287 + 8);
    uint64_t v230 = v286;
    v229(v282, v286);
    v231 = *(void (**)(char *, uint64_t))(v289 + 8);
    v231(v285, v226);
    v229(v293, v230);
    v231(v220, v226);
    return sub_25051AF3C((uint64_t)v146, type metadata accessor for GKCrypto_GroupBlob);
  }
  uint64_t v239 = *v232;
  *(void *)&v304[0] = MEMORY[0x263F8EE80];
  uint64_t v240 = *(void *)(v239 + 16);
  if (v240)
  {
    uint64_t v241 = v239 + ((*(unsigned __int8 *)(v265 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v265 + 80));
    uint64_t v242 = *(void *)(v265 + 72);
    swift_bridgeObjectRetain_n();
    uint64_t v243 = (uint64_t)v266;
    do
    {
      sub_25051B91C(v241, v243, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      sub_250502960((uint64_t)v304, v243);
      sub_25051AF3C(v243, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      v241 += v242;
      --v240;
    }
    while (v240);
    swift_bridgeObjectRelease();
    v302 = *(void **)&v304[0];
    uint64_t v218 = v279;
  }
  else
  {
    swift_bridgeObjectRetain();
    v302 = (void *)MEMORY[0x263F8EE80];
  }
  sub_25051AF3C((uint64_t)v232, type metadata accessor for GKCrypto_GroupAETextToSign);
  sub_25051AF3C(v218, type metadata accessor for Group.GroupCiphertextContents);
  v252 = *(void (**)(char *, uint64_t))(v287 + 8);
  uint64_t v253 = v286;
  v252(v282, v286);
  v254 = *(void (**)(char *, uint64_t))(v289 + 8);
  uint64_t v255 = v290;
  v254(v285, v290);
  v252(v293, v253);
  v254(v295, v255);
  swift_bridgeObjectRelease();
  uint64_t v256 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  v257 = v267;
  uint64_t result = sub_25051C8F4((uint64_t)v146, (uint64_t)v267 + *(int *)(v256 + 20), type metadata accessor for GKCrypto_GroupBlob);
  void *v257 = v302;
  *(_DWORD *)((char *)v257 + *(int *)(v256 + 24)) = v303;
  return result;
}

uint64_t static Group.loadPreviousGroup(groupID:memberGroupKitID:dsid:)(_OWORD *a1, long long *a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  *(void *)(v3 + 152) = swift_task_alloc();
  uint64_t v7 = sub_2505BDF90();
  *(void *)(v3 + 160) = v7;
  *(void *)(v3 + 168) = *(void *)(v7 - 8);
  *(void *)(v3 + 176) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  *(void *)(v3 + 184) = swift_task_alloc();
  *(void *)(v3 + 192) = type metadata accessor for UserKeyingInfo(0);
  *(void *)(v3 + 200) = swift_task_alloc();
  *(void *)(v3 + 208) = swift_task_alloc();
  uint64_t v8 = sub_2505BE000();
  *(void *)(v3 + 216) = v8;
  *(void *)(v3 + 224) = *(void *)(v8 - 8);
  *(void *)(v3 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  *(void *)(v3 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A30);
  *(void *)(v3 + 248) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  *(void *)(v3 + 256) = v9;
  *(void *)(v3 + 264) = *(void *)(v9 - 8);
  *(void *)(v3 + 272) = swift_task_alloc();
  long long v10 = *a2;
  *(_OWORD *)(v3 + 280) = *a1;
  *(_OWORD *)(v3 + 296) = v10;
  uint64_t v11 = a3[1];
  *(void *)(v3 + 312) = *a3;
  *(void *)(v3 + 320) = v11;
  return MEMORY[0x270FA2498](sub_2504EA3F8, 0, 0);
}

uint64_t sub_2504EA3F8()
{
  uint64_t v42 = v0;
  long long v1 = *(_OWORD *)(v0 + 296);
  long long v40 = *(_OWORD *)(v0 + 280);
  *(_OWORD *)uint64_t v41 = v1;
  uint64_t v2 = sub_25059A014((uint64_t *)&v40, v41);
  *(void *)(v0 + 328) = v2;
  *(void *)(v0 + 336) = v3;
  *(void *)(v0 + 344) = v4;
  unint64_t v5 = v4;
  if (v4 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 296);
    unint64_t v7 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 280);
    unint64_t v8 = *(void *)(v0 + 288);
    uint64_t v10 = sub_2505BDC40();
    __swift_project_value_buffer(v10, (uint64_t)qword_269AC3188);
    os_log_type_t v11 = sub_2505BE3D0();
    sub_2504DBC4C(v9, v8);
    sub_2504DBC4C(v6, v7);
    sub_2504DBC4C(v9, v8);
    sub_2504DBC4C(v6, v7);
    uint64_t v12 = sub_2505BDC20();
    os_log_type_t v13 = v11;
    BOOL v14 = os_log_type_enabled(v12, v11);
    uint64_t v16 = *(void *)(v0 + 296);
    unint64_t v15 = *(void *)(v0 + 304);
    uint64_t v17 = *(void *)(v0 + 280);
    unint64_t v18 = *(void *)(v0 + 288);
    if (v14)
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v41[0] = v39;
      *(_DWORD *)uint64_t v19 = 136315394;
      sub_2504DBC4C(v17, v18);
      uint64_t v20 = sub_2505BD8B0();
      os_log_type_t type = v13;
      unint64_t v22 = v21;
      sub_250511528(v17, v18);
      *(void *)(v0 + 144) = sub_25051171C(v20, v22, v41);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      sub_250511528(v17, v18);
      sub_250511528(v17, v18);
      *(_WORD *)(v19 + 12) = 2080;
      sub_2504DBC4C(v16, v15);
      uint64_t v23 = sub_2505BD8B0();
      unint64_t v25 = v24;
      sub_250511528(v16, v15);
      *(void *)(v0 + 136) = sub_25051171C(v23, v25, v41);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      sub_250511528(v16, v15);
      sub_250511528(v16, v15);
      _os_log_impl(&dword_2504D2000, v12, type, "GroupBlob not found in encrypted container for groupID %s and userID %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v39, -1, -1);
      MEMORY[0x25337FF10](v19, -1, -1);
    }
    else
    {
      sub_250511528(*(void *)(v0 + 280), *(void *)(v0 + 288));
      sub_250511528(v17, v18);
      sub_250511528(v16, v15);
      sub_250511528(v16, v15);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v34 = 384;
    *(_OWORD *)(v34 + 8) = xmmword_2505BFF90;
    *(void *)(v34 + 24) = 0x80000002505C8DB0;
    *(void *)(v34 + 32) = 0xD000000000000052;
    *(void *)(v34 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
  else
  {
    uint64_t v26 = v2;
    uint64_t v27 = v3;
    uint64_t v28 = *(void *)(v0 + 320);
    unint64_t v30 = *(void *)(v0 + 288);
    uint64_t v29 = *(void *)(v0 + 296);
    uint64_t v31 = *(void *)(v0 + 280);
    *(void *)(v0 + 120) = v31;
    *(void *)(v0 + 128) = v30;
    *(void *)(v0 + 88) = v29;
    long long v37 = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 96) = v37;
    *(void *)(v0 + 112) = v28;
    sub_25051C8BC(v2, v3, v4);
    sub_25051C8BC(v26, v27, v5);
    sub_2504DBC4C(v31, v30);
    sub_2504DBC4C(v29, v37);
    uint64_t v38 = (char *)&dword_269AB5A68 + dword_269AB5A68;
    swift_bridgeObjectRetain();
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_2504EA948;
    return ((uint64_t (*)(_OWORD *, int, long long *, void *, uint64_t, uint64_t))v38)((_OWORD *)(v0 + 120), v26, (long long *)(v0 + 88), (void *)(v0 + 104), v27, v5);
  }
}

uint64_t sub_2504EA948(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 360) = a1;
  *(void *)(v3 + 368) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = sub_2504EB6C8;
  }
  else {
    unint64_t v4 = sub_2504EAA5C;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_2504EAA5C()
{
  uint64_t v100 = v0;
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[45] + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  swift_beginAccess();
  sub_2504DAEFC(v4, v3, &qword_269AB5A30);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_2504DAF60(v0[31], &qword_269AB5A30);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_2505BDC40();
    __swift_project_value_buffer(v5, (uint64_t)qword_269AC3188);
    os_log_type_t v6 = sub_2505BE3D0();
    unint64_t v7 = sub_2505BDC20();
    if (os_log_type_enabled(v7, v6))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl(&dword_2504D2000, v7, v6, "missing transition state", v8, 2u);
      MEMORY[0x25337FF10](v8, -1, -1);
    }
    uint64_t v10 = v0[42];
    unint64_t v9 = v0[43];
    uint64_t v11 = v0[41];

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v12 = 346;
    *(_OWORD *)(v12 + 8) = xmmword_2505BFFB0;
    *(void *)(v12 + 24) = 0x80000002505C8DB0;
    *(void *)(v12 + 32) = 0xD000000000000052;
    *(void *)(v12 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    swift_release();
    sub_25051C8D8(v11, v10, v9);
    sub_25051C8D8(v11, v10, v9);
    goto LABEL_21;
  }
  os_log_type_t v13 = (void *)v0[45];
  sub_25051C8F4(v0[31], v0[34], type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  uint64_t v15 = v13[5];
  unint64_t v14 = v13[6];
  swift_beginAccess();
  uint64_t v16 = v13[7];
  if (*(void *)(v16 + 16))
  {
    swift_retain();
    sub_2504DBC4C(v15, v14);
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_250513064(v15, v14);
    uint64_t v18 = v0[30];
    if (v19)
    {
      unint64_t v20 = v17;
      uint64_t v94 = v13;
      uint64_t v21 = *(void *)(v16 + 56);
      uint64_t v22 = type metadata accessor for GroupMembership.MemberProperties(0);
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = v21 + *(void *)(v23 + 72) * v20;
      os_log_type_t v13 = v94;
      sub_25051B91C(v24, v18, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v18, 0, 1, v22);
    }
    else
    {
      uint64_t v22 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v18, 1, 1, v22);
    }
    swift_bridgeObjectRelease();
    sub_250511528(v15, v14);
  }
  else
  {
    uint64_t v25 = v0[30];
    uint64_t v22 = type metadata accessor for GroupMembership.MemberProperties(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v25, 1, 1, v22);
    swift_retain();
  }
  uint64_t v26 = v0[30];
  type metadata accessor for GroupMembership.MemberProperties(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v26, 1, v22))
  {
    swift_release();
    uint64_t v27 = &qword_269AB5A80;
LABEL_15:
    sub_2504DAF60(v26, v27);
LABEL_16:
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_2505BDC40();
    __swift_project_value_buffer(v28, (uint64_t)qword_269AC3188);
    os_log_type_t v29 = sub_2505BE3D0();
    unint64_t v30 = sub_2505BDC20();
    if (os_log_type_enabled(v30, v29))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_2504D2000, v30, v29, "missing member key information", v31, 2u);
      MEMORY[0x25337FF10](v31, -1, -1);
    }
    uint64_t v33 = v0[42];
    unint64_t v32 = v0[43];
    uint64_t v34 = v0[41];
    uint64_t v35 = v0[34];

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v36 = 345;
    *(_OWORD *)(v36 + 8) = xmmword_2505BFFA0;
    *(void *)(v36 + 24) = 0x80000002505C8DB0;
    *(void *)(v36 + 32) = 0xD000000000000052;
    *(void *)(v36 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    swift_release();
    sub_25051C8D8(v34, v33, v32);
    sub_25051C8D8(v34, v33, v32);
    sub_25051AF3C(v35, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    goto LABEL_21;
  }
  uint64_t v40 = *(void *)(v26 + 8);
  unint64_t v39 = *(void *)(v26 + 16);
  sub_25051B908(v40, v39);
  sub_2504DAF60(v26, &qword_269AB5A80);
  if (v39 >> 60 == 15)
  {
    swift_release();
    goto LABEL_16;
  }
  uint64_t v41 = v0[27];
  uint64_t v42 = v0[28];
  uint64_t v43 = v0[26];
  uint64_t v44 = v0[23];
  uint64_t v45 = v0[24];
  uint64_t v46 = v0[45] + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  sub_25051B91C(v46, v43, type metadata accessor for UserKeyingInfo);
  sub_2504DAEFC(v43 + *(int *)(v45 + 44), v44, &qword_269AB5A28);
  sub_25051AF3C(v43, type metadata accessor for UserKeyingInfo);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v44, 1, v41) == 1)
  {
    uint64_t v26 = v0[23];
    sub_25051B8D4(v40, v39);
    swift_release();
    uint64_t v27 = &qword_269AB5A28;
    goto LABEL_15;
  }
  uint64_t v48 = v0[24];
  uint64_t v47 = v0[25];
  uint64_t v49 = v0[20];
  uint64_t v50 = v0[21];
  uint64_t v51 = v0[19];
  (*(void (**)(void, void, void))(v0[28] + 32))(v0[29], v0[23], v0[27]);
  sub_25051B91C(v46, v47, type metadata accessor for UserKeyingInfo);
  sub_2504DAEFC(v47 + *(int *)(v48 + 40), v51, &qword_269AB5A78);
  sub_25051AF3C(v47, type metadata accessor for UserKeyingInfo);
  int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1, v49);
  uint64_t v53 = v0[45];
  if (v52 == 1)
  {
    uint64_t v26 = v0[19];
    (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
    sub_25051B8D4(v40, v39);
    swift_release();
    uint64_t v27 = &qword_269AB5A78;
    goto LABEL_15;
  }
  (*(void (**)(void, void, void))(v0[21] + 32))(v0[22], v0[19], v0[20]);
  unint64_t v54 = *(void *)(v53 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v54 >> 60 == 15)
  {
    uint64_t v56 = v0[28];
    uint64_t v55 = v0[29];
    uint64_t v57 = v0[27];
    uint64_t v59 = v0[21];
    uint64_t v58 = v0[22];
    uint64_t v60 = v0[20];
    sub_25051B8D4(v40, v39);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    goto LABEL_16;
  }
  uint64_t v61 = *(void *)(v53 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  uint64_t v62 = v0[45];
  uint64_t v89 = v0[34];
  uint64_t v91 = v0[46];
  uint64_t v85 = v0[22];
  uint64_t v87 = v0[29];
  type metadata accessor for Group(0);
  uint64_t v63 = v13;
  unint64_t v64 = *(void *)(v62 + 24);
  v96[0] = *(void *)(v62 + 16);
  v96[1] = v64;
  uint64_t v66 = v63[5];
  unint64_t v65 = v63[6];
  sub_25051B908(v61, v54);
  uint64_t v93 = v96[0];
  sub_2504DBC4C(v96[0], v64);
  sub_2504DBC4C(v66, v65);
  swift_release();
  v97[0] = v66;
  v97[1] = v65;
  v98[0] = v40;
  v98[1] = v39;
  uint64_t v95 = v61;
  v99[0] = v61;
  v99[1] = v54;
  uint64_t v67 = sub_2504EB7C8(v96, v97, v87, v85, v98, v99, 0, v89);
  uint64_t v68 = v91;
  uint64_t v90 = v0[42];
  unint64_t v92 = v0[43];
  uint64_t v88 = v0[41];
  uint64_t v69 = v0[34];
  if (v68)
  {
    uint64_t v70 = v0[28];
    uint64_t v83 = v0[27];
    uint64_t v84 = v0[29];
    uint64_t v86 = v0[34];
    uint64_t v71 = v0[21];
    uint64_t v81 = v0[20];
    uint64_t v82 = v0[22];
    swift_release();
    sub_25051C8D8(v88, v90, v92);
    sub_25051C8D8(v88, v90, v92);
    sub_250511528(v66, v65);
    sub_250511528(v93, v64);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v82, v81);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v84, v83);
    sub_25051AF3C(v86, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    sub_25051B8D4(v95, v54);
    sub_25051B8D4(v40, v39);
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  uint64_t v79 = v0[27];
  uint64_t v80 = v0[29];
  uint64_t v72 = v0[21];
  uint64_t v77 = v0[22];
  uint64_t v78 = v0[28];
  uint64_t v76 = v0[20];
  swift_release();
  sub_250511528(v66, v65);
  sub_250511528(v93, v64);
  v67[OBJC_IVAR____TtC14GroupKitCrypto5Group_state] = 6;
  uint64_t v73 = *(void *)&v67[OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob];
  unint64_t v74 = *(void *)&v67[OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8];
  *(_OWORD *)&v67[OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob] = xmmword_2505BFEE0;
  swift_retain();
  sub_25051B8D4(v73, v74);
  sub_25051B8D4(v40, v39);
  sub_25051B8D4(v95, v54);
  sub_25051C8D8(v88, v90, v92);
  sub_25051C8D8(v88, v90, v92);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v77, v76);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v80, v79);
  sub_25051AF3C(v69, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v75 = (uint64_t (*)(char *))v0[1];
  return v75(v67);
}

uint64_t sub_2504EB6C8()
{
  uint64_t v1 = v0[42];
  unint64_t v2 = v0[43];
  uint64_t v3 = v0[41];
  sub_25051C8D8(v3, v1, v2);
  sub_25051C8D8(v3, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

char *sub_2504EB7C8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8)
{
  uint64_t v507 = a8;
  v496 = a7;
  v506 = (char *)a4;
  uint64_t v441 = a3;
  uint64_t v519 = *MEMORY[0x263EF8340];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
  MEMORY[0x270FA5388](v12 - 8, v13, v14, v15, v16);
  uint64_t v446 = (uint64_t)&v428 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v486 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v485 = *(void *)(v486 - 8);
  MEMORY[0x270FA5388](v486, v18, v19, v20, v21);
  v450 = (uint64_t *)((char *)&v428 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v23 - 8, v24, v25, v26, v27);
  uint64_t v459 = (uint64_t)&v428 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v452 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v453 = *(void *)(v452 - 8);
  MEMORY[0x270FA5388](v452, v29, v30, v31, v32);
  v451 = (char *)&v428 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v456 = sub_2505BE0B0();
  uint64_t v455 = *(void *)(v456 - 8);
  MEMORY[0x270FA5388](v456, v34, v35, v36, v37);
  v454 = (char *)&v428 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v458 = sub_2505BE000();
  uint64_t v457 = *(void *)(v458 - 8);
  uint64_t v43 = MEMORY[0x270FA5388](v458, v39, v40, v41, v42);
  v440 = (char *)&v428 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43, v45, v46, v47, v48);
  v462 = (char *)&v428 - v49;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  uint64_t v55 = MEMORY[0x270FA5388](v50 - 8, v51, v52, v53, v54);
  uint64_t v445 = (uint64_t)&v428 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = MEMORY[0x270FA5388](v55, v57, v58, v59, v60);
  uint64_t v461 = (uint64_t)&v428 - v62;
  MEMORY[0x270FA5388](v61, v63, v64, v65, v66);
  uint64_t v469 = (uint64_t)&v428 - v67;
  uint64_t v467 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v466 = *(void *)(v467 - 8);
  uint64_t v72 = MEMORY[0x270FA5388](v467, v68, v69, v70, v71);
  v449 = (_OWORD *)((char *)&v428 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v78 = MEMORY[0x270FA5388](v72, v74, v75, v76, v77);
  v460 = (uint64_t *)((char *)&v428 - v79);
  MEMORY[0x270FA5388](v78, v80, v81, v82, v83);
  uint64_t v468 = (uint64_t)&v428 - v84;
  uint64_t v465 = sub_2505BDF30();
  uint64_t v464 = *(void *)(v465 - 8);
  MEMORY[0x270FA5388](v465, v85, v86, v87, v88);
  v463 = (char *)&v428 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v472 = sub_2505BDCE0();
  uint64_t v471 = *(void *)(v472 - 8);
  MEMORY[0x270FA5388](v472, v90, v91, v92, v93);
  v475 = (char *)&v428 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v474 = sub_2505BDF90();
  uint64_t v473 = *(void *)(v474 - 8);
  uint64_t v99 = MEMORY[0x270FA5388](v474, v95, v96, v97, v98);
  v439 = (char *)&v428 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = MEMORY[0x270FA5388](v99, v101, v102, v103, v104);
  v470 = (char *)&v428 - v106;
  MEMORY[0x270FA5388](v105, v107, v108, v109, v110);
  v476 = (char *)&v428 - v111;
  uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  uint64_t v117 = MEMORY[0x270FA5388](v112 - 8, v113, v114, v115, v116);
  uint64_t v444 = (uint64_t)&v428 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v117, v119, v120, v121, v122);
  uint64_t v477 = (uint64_t)&v428 - v123;
  uint64_t v479 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v480 = *(void *)(v479 - 8);
  uint64_t v128 = MEMORY[0x270FA5388](v479, v124, v125, v126, v127);
  uint64_t v443 = (uint64_t)&v428 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v128, v130, v131, v132, v133);
  v478 = (_DWORD *)((char *)&v428 - v134);
  *(void *)&long long v503 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v495 = *(void *)(v503 - 8);
  uint64_t v139 = MEMORY[0x270FA5388](v503, v135, v136, v137, v138);
  uint64_t v437 = (uint64_t)&v428 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = MEMORY[0x270FA5388](v139, v141, v142, v143, v144);
  v447 = (uint64_t *)((char *)&v428 - v146);
  MEMORY[0x270FA5388](v145, v147, v148, v149, v150);
  v502 = (uint64_t *)((char *)&v428 - v151);
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  uint64_t v157 = MEMORY[0x270FA5388](v152 - 8, v153, v154, v155, v156);
  uint64_t v508 = (uint64_t)&v428 - ((v158 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v157, v159, v160, v161, v162);
  unint64_t v501 = (unint64_t)&v428 - v163;
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  MEMORY[0x270FA5388](v164 - 8, v165, v166, v167, v168);
  uint64_t v483 = (uint64_t)&v428 - ((v169 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v482 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v481 = *(void *)(v482 - 8);
  MEMORY[0x270FA5388](v482, v170, v171, v172, v173);
  v488 = (char **)((char *)&v428 - ((v174 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v175 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  uint64_t v487 = *(void *)(v175 - 8);
  MEMORY[0x270FA5388](v175 - 8, v176, v177, v178, v179);
  uint64_t v181 = (uint64_t *)((char *)&v428 - ((v180 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
  uint64_t v187 = MEMORY[0x270FA5388](v182 - 8, v183, v184, v185, v186);
  uint64_t v442 = (uint64_t)&v428 - ((v188 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v187, v189, v190, v191, v192);
  uint64_t v492 = (uint64_t)&v428 - v193;
  uint64_t v493 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v499 = *(void *)(v493 - 8);
  uint64_t v198 = MEMORY[0x270FA5388](v493, v194, v195, v196, v197);
  v448 = (char *)&v428 - ((v199 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v198, v200, v201, v202, v203);
  v498 = (uint64_t *)((char *)&v428 - v204);
  uint64_t v494 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  MEMORY[0x270FA5388](v494, v205, v206, v207, v208);
  uint64_t v497 = (uint64_t)&v428 - ((v209 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  MEMORY[0x270FA5388](v210 - 8, v211, v212, v213, v214);
  uint64_t v500 = (uint64_t)&v428 - ((v215 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v491 = type metadata accessor for Group.GroupCiphertextContents(0);
  MEMORY[0x270FA5388](v491, v216, v217, v218, v219);
  uint64_t v221 = (char *)&v428 - ((v220 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v484 = type metadata accessor for GKCrypto_GroupBlob(0);
  MEMORY[0x270FA5388](v484, v222, v223, v224, v225);
  v227 = (uint64_t *)((char *)&v428 - ((v226 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v229 = *a1;
  unint64_t v228 = a1[1];
  uint64_t v490 = *a2;
  unint64_t v489 = a2[1];
  uint64_t v505 = *a5;
  unint64_t v504 = a5[1];
  uint64_t v230 = v221;
  uint64_t v436 = *a6;
  unint64_t v435 = a6[1];
  uint64_t v231 = v507;
  uint64_t v232 = swift_bridgeObjectRetain();
  *((void *)&v503 + 1) = sub_2505A2EF0(v232);
  uint64_t v233 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  uint64_t v434 = v231 + *(int *)(v233 + 20);
  sub_25051B91C(v434, (uint64_t)v227, type metadata accessor for GKCrypto_GroupBlob);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505BFEC0;
  *(void *)(inited + 32) = v229;
  *(void *)(inited + 40) = v228;
  uint64_t v235 = *(int *)(v233 + 24);
  uint64_t v236 = v231;
  uint64_t v237 = (uint64_t)v230;
  unint64_t v238 = v504;
  LODWORD(v516) = bswap32(*(_DWORD *)(v236 + v235));
  uint64_t v438 = v229;
  sub_2504DBC4C(v229, v228);
  uint64_t v239 = v506;
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)&v516, (uint64_t)&v516 + 4);
  *(void *)(inited + 56) = v240;
  *(void *)&long long v516 = v505;
  *((void *)&v516 + 1) = v238;
  uint64_t v241 = v509;
  sub_250502020(v227, (uint64_t)v239, &v516, (void *)inited, v237);
  *(void *)&long long v509 = v241;
  if (v241)
  {
    sub_25051AF3C((uint64_t)v227, type metadata accessor for GKCrypto_GroupBlob);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v239;
  }
  v432 = (void *)inited;
  v433 = v227;
  uint64_t v430 = v235;
  unint64_t v429 = v228;
  sub_25051B91C(v237, v500, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  uint64_t v242 = v237;
  uint64_t v243 = v497;
  sub_25051B91C(v237 + *(int *)(v491 + 20), v497, type metadata accessor for GKCrypto_GroupAETextToSign);
  uint64_t v428 = v243 + *(int *)(v494 + 28);
  uint64_t v244 = v492;
  sub_2504DAEFC(v428, v492, &qword_269AB5EC8);
  uint64_t v245 = v499 + 48;
  uint64_t v246 = v493;
  uint64_t v491 = *(void *)(v499 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v491)(v244, 1, v493) == 1)
  {
    v247 = v498;
    *(_OWORD *)v498 = xmmword_2505BFEF0;
    sub_2505BDA40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v485 + 56))((char *)v247 + *(int *)(v246 + 24), 1, 1, v486);
    sub_2504DAF60(v244, &qword_269AB5EC8);
  }
  else
  {
    v247 = v498;
    sub_25051C8F4(v244, (uint64_t)v498, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  }
  uint64_t v248 = v509;
  unint64_t v249 = v508;
  uint64_t v250 = *(void *)v243;
  int64_t v251 = *(void *)(*(void *)v243 + 16);
  uint64_t v499 = v245;
  uint64_t v492 = v250;
  if (v251)
  {
    uint64_t v431 = v242;
    uint64_t v514 = MEMORY[0x263F8EE78];
    uint64_t v252 = v250;
    swift_bridgeObjectRetain_n();
    sub_250511F14(0, v251, 0);
    uint64_t v253 = v252 + ((*(unsigned __int8 *)(v487 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v487 + 80));
    uint64_t v254 = *(void *)(v487 + 72);
    while (1)
    {
      sub_25051B91C(v253, (uint64_t)v181, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      uint64_t v239 = (char *)*v181;
      unint64_t v255 = v181[1];
      sub_2504DBC4C(*v181, v255);
      GroupKitUserID.init(_:)((uint64_t)v239, v255, (uint64_t *)&v516);
      if (v248) {
        break;
      }
      sub_25051AF3C((uint64_t)v181, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      long long v509 = v516;
      uint64_t v256 = v514;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_250511F14(0, *(void *)(v256 + 16) + 1, 1);
        uint64_t v256 = v514;
      }
      unint64_t v258 = *(void *)(v256 + 16);
      unint64_t v257 = *(void *)(v256 + 24);
      if (v258 >= v257 >> 1)
      {
        sub_250511F14(v257 > 1, v258 + 1, 1);
        uint64_t v256 = v514;
      }
      *(void *)(v256 + 16) = v258 + 1;
      *(_OWORD *)(v256 + 16 * v258 + 32) = v509;
      v253 += v254;
      if (!--v251)
      {
        swift_bridgeObjectRelease();
        uint64_t v260 = (uint64_t)v433;
        uint64_t v242 = v431;
        uint64_t v243 = v497;
        v247 = v498;
        unint64_t v249 = v508;
        goto LABEL_18;
      }
    }
    sub_25051AF3C((uint64_t)v181, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v256 = MEMORY[0x263F8EE78];
  uint64_t v260 = (uint64_t)v433;
LABEL_18:
  uint64_t v261 = sub_2505AE20C(v256);
  swift_bridgeObjectRelease();
  char v262 = sub_250586F18(v490, v489, v261);
  v263 = v488;
  if ((v262 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v265 = sub_2505BDC40();
    __swift_project_value_buffer(v265, (uint64_t)qword_269AC3188);
    os_log_type_t v266 = sub_2505BE3D0();
    v267 = sub_2505BDC20();
    os_log_type_t v268 = v266;
    BOOL v269 = os_log_type_enabled(v267, v266);
    uint64_t v270 = v500;
    if (v269)
    {
      uint64_t v271 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v271 = 0;
      _os_log_impl(&dword_2504D2000, v267, v268, "user is not a member of the group", v271, 2u);
      MEMORY[0x25337FF10](v271, -1, -1);
    }

    uint64_t v239 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v272 = 338;
    long long v273 = xmmword_2505BFFC0;
    goto LABEL_26;
  }
  *(void *)&long long v509 = v261;
  uint64_t v264 = v483;
  sub_2504DAEFC(v260 + *(int *)(v484 + 32), v483, &qword_269AB5CB8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v481 + 48))(v264, 1, v482) == 1)
  {
    _DWORD *v263 = (char *)MEMORY[0x263F8EE78];
    sub_2505BDA40();
    sub_2504DAF60(v264, &qword_269AB5CB8);
  }
  else
  {
    sub_25051C8F4(v264, (uint64_t)v263, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  }
  uint64_t v239 = *v263;
  swift_bridgeObjectRetain();
  sub_25051AF3C((uint64_t)v263, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_250502E5C(v492, (uint64_t)v239, (uint64_t *)&v516);
  if (v248)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25051AF3C((uint64_t)v498, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_25051AF3C(v243, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_25051AF3C(v500, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    uint64_t v274 = v242;
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v492 = v516;
  uint64_t v431 = v242;
  if (v496)
  {
    unint64_t v276 = v496[2];
    sub_250528274();
    swift_bridgeObjectRetain();
    uint64_t v277 = (long long *)sub_2505BE360();
    unint64_t v278 = 0;
    uint64_t v514 = (uint64_t)v277;
    uint64_t v279 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v495 + 56);
    v280 = (unsigned int (**)(unint64_t, uint64_t, uint64_t))(v495 + 48);
    while (1)
    {
      uint64_t v281 = v503;
      v282 = v502;
      if (v278 == v276)
      {
        uint64_t v283 = 1;
        unint64_t v278 = v276;
        uint64_t v284 = v501;
      }
      else
      {
        uint64_t v284 = v501;
        if (v278 >= v276)
        {
          __break(1u);
          goto LABEL_71;
        }
        sub_25051B91C((uint64_t)v496+ ((*(unsigned __int8 *)(v495 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v495 + 80))+ *(void *)(v495 + 72) * v278, v501, type metadata accessor for UserKeyingInfo);
        uint64_t v283 = 0;
        ++v278;
      }
      (*v279)(v284, v283, 1, v281);
      sub_2505283F0(v284, v249, &qword_269AB5E80);
      if ((*v280)(v249, 1, v281) == 1) {
        break;
      }
      sub_25051C8F4(v249, (uint64_t)v282, type metadata accessor for UserKeyingInfo);
      uint64_t v285 = (uint64_t)v282;
      uint64_t v286 = *v282;
      unint64_t v287 = v282[1];
      sub_2504DBC4C(v286, v287);
      sub_25051AF3C(v285, type metadata accessor for UserKeyingInfo);
      uint64_t v288 = v286;
      unint64_t v249 = v508;
      sub_2505A8F9C((uint64_t *)&v516, v288, v287);
      uint64_t v277 = (long long *)sub_250511528(v516, *((unint64_t *)&v516 + 1));
    }
    swift_bridgeObjectRelease();
    uint64_t v289 = *((void *)&v503 + 1);
    char v290 = sub_2505A456C(*((uint64_t *)&v503 + 1), v514);
    swift_bridgeObjectRelease();
    if ((v290 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v299 = (uint64_t)v433;
      uint64_t v300 = v431;
      unint64_t v301 = v498;
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v302 = sub_2505BDC40();
      __swift_project_value_buffer(v302, (uint64_t)qword_269AC3188);
      os_log_type_t v303 = sub_2505BE3D0();
      v304 = sub_2505BDC20();
      os_log_type_t v305 = v303;
      BOOL v306 = os_log_type_enabled(v304, v303);
      uint64_t v307 = v500;
      if (v306)
      {
        v308 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v308 = 0;
        _os_log_impl(&dword_2504D2000, v304, v305, "missing key info", v308, 2u);
        MEMORY[0x25337FF10](v308, -1, -1);
      }

      uint64_t v239 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v309 = 339;
      *(_OWORD *)(v309 + 8) = xmmword_2505BFFD0;
      *(void *)(v309 + 24) = 0x80000002505C9DC0;
      *(void *)(v309 + 32) = 0xD000000000000052;
      *(void *)(v309 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_25051AF3C((uint64_t)v301, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      sub_25051AF3C(v497, type metadata accessor for GKCrypto_GroupAETextToSign);
      sub_25051AF3C(v307, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
      sub_25051AF3C(v300, type metadata accessor for Group.GroupCiphertextContents);
      uint64_t v259 = v299;
      goto LABEL_31;
    }
    char v291 = sub_2505A456C(v509, v289);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v260 = (uint64_t)v433;
    uint64_t v242 = v431;
    v247 = v498;
    if ((v291 & 1) == 0)
    {
      uint64_t v314 = v431;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v315 = v497;
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v316 = sub_2505BDC40();
      __swift_project_value_buffer(v316, (uint64_t)qword_269AC3188);
      os_log_type_t v317 = sub_2505BE3D0();
      v318 = sub_2505BDC20();
      os_log_type_t v319 = v317;
      BOOL v320 = os_log_type_enabled(v318, v317);
      uint64_t v321 = v500;
      if (v320)
      {
        v322 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v322 = 0;
        _os_log_impl(&dword_2504D2000, v318, v319, "invalid member list between group decode and key verification", v322, 2u);
        MEMORY[0x25337FF10](v322, -1, -1);
      }

      uint64_t v239 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v323 = 340;
      *(_OWORD *)(v323 + 8) = xmmword_2505BFFE0;
      *(void *)(v323 + 24) = 0x80000002505C9DC0;
      *(void *)(v323 + 32) = 0xD000000000000052;
      *(void *)(v323 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_25051AF3C((uint64_t)v247, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      sub_25051AF3C(v315, type metadata accessor for GKCrypto_GroupAETextToSign);
      sub_25051AF3C(v321, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
      uint64_t v274 = v314;
      goto LABEL_30;
    }
    *(void *)&long long v516 = v492;
    char v292 = sub_25051CABC((uint64_t *)&v516, v496);
    uint64_t v243 = v497;
    uint64_t v293 = v507;
    uint64_t v294 = v479;
    if ((v292 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v329 = sub_2505BDC40();
      __swift_project_value_buffer(v329, (uint64_t)qword_269AC3188);
      os_log_type_t v330 = sub_2505BE3D0();
      v331 = sub_2505BDC20();
      os_log_type_t v332 = v330;
      BOOL v333 = os_log_type_enabled(v331, v330);
      uint64_t v270 = v500;
      if (v333)
      {
        v334 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v334 = 0;
        _os_log_impl(&dword_2504D2000, v331, v332, "supplied user keying info does not match embedded user keying info", v334, 2u);
        MEMORY[0x25337FF10](v334, -1, -1);
      }

      uint64_t v239 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v272 = 342;
      long long v273 = xmmword_2505BFFF0;
LABEL_26:
      *(_OWORD *)(v272 + 8) = v273;
      *(void *)(v272 + 24) = 0x80000002505C9DC0;
      *(void *)(v272 + 32) = 0xD000000000000052;
      *(void *)(v272 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_25051AF3C((uint64_t)v247, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      sub_25051AF3C(v243, type metadata accessor for GKCrypto_GroupAETextToSign);
      sub_25051AF3C(v270, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
      uint64_t v274 = v242;
LABEL_30:
      sub_25051AF3C(v274, type metadata accessor for Group.GroupCiphertextContents);
      uint64_t v259 = v260;
      goto LABEL_31;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v293 = v507;
    uint64_t v294 = v479;
    v247 = v498;
  }
  uint64_t v508 = v243 + *(int *)(v494 + 24);
  uint64_t v295 = v477;
  sub_2504DAEFC(v508, v477, &qword_269AB5EC0);
  uint64_t v296 = v480 + 48;
  *(void *)&long long v509 = *(void *)(v480 + 48);
  int v297 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v509)(v295, 1, v294);
  uint64_t v480 = v296;
  v298 = v478;
  if (v297 == 1)
  {
    _DWORD *v478 = 0;
    *(_OWORD *)(v298 + 2) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v295, &qword_269AB5EC0);
  }
  else
  {
    sub_25051C8F4(v295, (uint64_t)v478, type metadata accessor for GKCrypto_VersionedSeed);
  }
  uint64_t v310 = *(unsigned int *)(v293 + v430);
  *(void *)&long long v516 = v492;
  uint64_t v311 = sub_25051DB50();
  unint64_t v313 = v312;
  uint64_t v324 = sub_25051E7C8((uint64_t)v298, v310, v311, v312);
  uint64_t v326 = v325;
  sub_25051AF3C((uint64_t)v298, type metadata accessor for GKCrypto_VersionedSeed);
  sub_250511528(v311, v313);
  uint64_t v327 = *v247;
  unint64_t v328 = v247[1];
  sub_2504DBC4C(*v247, v328);
  GroupKitUserID.init(_:)(v327, v328, (uint64_t *)&v516);
  *(void *)&long long v503 = v324;
  *((void *)&v503 + 1) = v326;
  v280 = (unsigned int (**)(unint64_t, uint64_t, uint64_t))*((void *)&v516 + 1);
  uint64_t v335 = v516;
  uint64_t v514 = v492;
  sub_25051EB18((uint64_t *)&v516, &v514, v500);
  v517 = &type metadata for MemberSeed;
  unint64_t v249 = sub_250522A2C();
  unint64_t v518 = v249;
  long long v516 = v503;
  sub_2504DBC4C(v503, *((unint64_t *)&v503 + 1));
  if (qword_269AB5640 != -1) {
    swift_once();
  }
  sub_2505603C4(&v516, 1, qword_269AC3730, *(unint64_t *)algn_269AC3738);
  v336 = v475;
  v502 = (uint64_t *)v335;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v516);
  v517 = &type metadata for MemberSeed;
  unint64_t v518 = v249;
  long long v516 = v503;
  sub_2504DBC4C(v503, *((unint64_t *)&v503 + 1));
  unint64_t v278 = v492;
  if (qword_269AB5630 != -1) {
    swift_once();
  }
  sub_2505601DC(&v516, 1, qword_269AC3710, *(unint64_t *)algn_269AC3718, (uint64_t)v336);
  v282 = 0;
  uint64_t v277 = &v516;
LABEL_71:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v277);
  *(void *)&long long v516 = v278;
  if (qword_269AB5450 != -1) {
    swift_once();
  }
  uint64_t v337 = qword_269AC3200;
  unint64_t v338 = *(void *)algn_269AC3208;
  sub_2504DBC4C(qword_269AC3200, *(unint64_t *)algn_269AC3208);
  sub_2504DBC4C(v337, v338);
  v339 = v432;
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    uint64_t v340 = (uint64_t)v433;
  }
  else
  {
    uint64_t v340 = (uint64_t)v433;
    v339 = sub_250570DC0(0, v339[2] + 1, 1, v339);
  }
  unint64_t v342 = v339[2];
  unint64_t v341 = v339[3];
  unint64_t v501 = (unint64_t)v280;
  if (v342 >= v341 >> 1) {
    v339 = sub_250570DC0((void *)(v341 > 1), v342 + 1, 1, v339);
  }
  v339[2] = v342 + 1;
  v343 = &v339[2 * v342];
  v343[4] = v337;
  v343[5] = v338;
  sub_250511528(v337, v338);
  uint64_t v239 = (char *)sub_250576544((uint64_t)v339);
  v345 = v344;
  swift_bridgeObjectRelease();
  uint64_t v346 = *(void *)(v340 + 8);
  unint64_t v347 = *(void *)(v340 + 16);
  sub_2504DBC4C(v346, v347);
  v348 = v476;
  v349 = v475;
  sub_2505917CC(v476, v475, &v516, v239, v345, v346, v347);
  if (v282)
  {
    sub_250511528(v346, v347);
    sub_250511528((uint64_t)v239, (unint64_t)v345);
    sub_250511528((uint64_t)v502, v501);
    sub_250511528(v503, *((unint64_t *)&v503 + 1));
    (*(void (**)(char *, uint64_t))(v471 + 8))(v349, v472);
    (*(void (**)(char *, uint64_t))(v473 + 8))(v348, v474);
    sub_25051AF3C((uint64_t)v498, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_25051AF3C(v497, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_25051AF3C(v500, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    sub_25051AF3C(v431, type metadata accessor for Group.GroupCiphertextContents);
    sub_25051AF3C(v340, type metadata accessor for GKCrypto_GroupBlob);
    swift_bridgeObjectRelease();
    return v239;
  }
  sub_250511528(v346, v347);
  sub_250511528((uint64_t)v239, (unint64_t)v345);
  (*(void (**)(char *, uint64_t))(v471 + 8))(v349, v472);
  v350 = *(void (**)(char *, uint64_t))(v473 + 8);
  v350(v348, v474);
  v517 = &type metadata for MemberSeed;
  unint64_t v518 = v249;
  long long v516 = v503;
  sub_2504DBC4C(v503, *((unint64_t *)&v503 + 1));
  if (qword_269AB5648 != -1) {
    swift_once();
  }
  sub_2505603C4(&v516, 1, qword_269AC3740, *(unint64_t *)algn_269AC3748);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v516);
  v351 = v463;
  v352 = v470;
  sub_2505BDF50();
  v350(v352, v474);
  uint64_t v353 = sub_2505BDF10();
  unint64_t v355 = v354;
  (*(void (**)(char *, uint64_t))(v464 + 8))(v351, v465);
  v496 = (void *)((char *)v433 + *(int *)(v484 + 36));
  uint64_t v356 = v469;
  sub_2504DAEFC((uint64_t)v496, v469, &qword_269AB5CC0);
  v357 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v466 + 48);
  if (v357(v356, 1, v467) == 1)
  {
    v358 = (_OWORD *)v468;
    *(_OWORD *)uint64_t v468 = xmmword_2505BFEF0;
    v358[1] = xmmword_2505BFEF0;
    v358[2] = xmmword_2505BFEF0;
    v358[3] = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v469, &qword_269AB5CC0);
  }
  else
  {
    sub_25051C8F4(v469, v468, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  uint64_t v359 = v468;
  uint64_t v360 = *(void *)(v468 + 32);
  unint64_t v361 = *(void *)(v468 + 40);
  sub_2504DBC4C(v360, v361);
  sub_25051AF3C(v359, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  LOBYTE(v359) = sub_25051AAD8(v353, v355, v360, v361);
  sub_250511528(v353, v355);
  sub_250511528(v360, v361);
  if ((v359 & 1) == 0) {
    goto LABEL_94;
  }
  v517 = &type metadata for MemberSeed;
  unint64_t v518 = v249;
  long long v516 = v503;
  sub_2504DBC4C(v503, *((unint64_t *)&v503 + 1));
  if (qword_269AB5650 != -1) {
    swift_once();
  }
  sub_25056041C(&v516, 1, qword_269AC3750, *(unint64_t *)algn_269AC3758);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v516);
  v362 = v454;
  v363 = v462;
  sub_2505BDFA0();
  (*(void (**)(char *, uint64_t))(v457 + 8))(v363, v458);
  uint64_t v364 = sub_2505BDF10();
  unint64_t v366 = v365;
  (*(void (**)(char *, uint64_t))(v455 + 8))(v362, v456);
  uint64_t v367 = v461;
  sub_2504DAEFC((uint64_t)v496, v461, &qword_269AB5CC0);
  if (v357(v367, 1, v467) == 1)
  {
    v368 = v460;
    *(_OWORD *)v460 = xmmword_2505BFEF0;
    *((_OWORD *)v368 + 1) = xmmword_2505BFEF0;
    *((_OWORD *)v368 + 2) = xmmword_2505BFEF0;
    *((_OWORD *)v368 + 3) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v461, &qword_269AB5CC0);
  }
  else
  {
    sub_25051C8F4(v461, (uint64_t)v460, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  v369 = v460;
  uint64_t v370 = *v460;
  unint64_t v371 = v460[1];
  sub_2504DBC4C(*v460, v371);
  sub_25051AF3C((uint64_t)v369, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  char v372 = sub_25051AAD8(v364, v366, v370, v371);
  sub_250511528(v364, v366);
  sub_250511528(v370, v371);
  if ((v372 & 1) == 0)
  {
LABEL_94:
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v378 = sub_2505BDC40();
    __swift_project_value_buffer(v378, (uint64_t)qword_269AC3188);
    os_log_type_t v379 = sub_2505BE3D0();
    v380 = sub_2505BDC20();
    os_log_type_t v381 = v379;
    if (os_log_type_enabled(v380, v379))
    {
      v382 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v382 = 0;
      _os_log_impl(&dword_2504D2000, v380, v381, "failed to construct member keys from member seed", v382, 2u);
      MEMORY[0x25337FF10](v382, -1, -1);
    }

    uint64_t v239 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v383 = 354;
    long long v384 = xmmword_2505C0000;
    goto LABEL_99;
  }
  if (!*(void *)(v492 + 16))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v453 + 56))(v459, 1, 1, v452);
LABEL_103:
    swift_bridgeObjectRelease();
    sub_2504DAF60(v459, &qword_269AB5A80);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v388 = sub_2505BDC40();
    __swift_project_value_buffer(v388, (uint64_t)qword_269AC3188);
    os_log_type_t v389 = sub_2505BE3D0();
    v390 = sub_2505BDC20();
    os_log_type_t v391 = v389;
    if (os_log_type_enabled(v390, v389))
    {
      v392 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v392 = 0;
      _os_log_impl(&dword_2504D2000, v390, v391, "user is not a member of the group", v392, 2u);
      MEMORY[0x25337FF10](v392, -1, -1);
    }

    uint64_t v239 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v383 = 338;
    long long v384 = xmmword_2505C0010;
LABEL_99:
    *(_OWORD *)(v383 + 8) = v384;
    *(void *)(v383 + 24) = 0x80000002505C9DC0;
    *(void *)(v383 + 32) = 0xD000000000000052;
    *(void *)(v383 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528((uint64_t)v502, v501);
    sub_250511528(v503, *((unint64_t *)&v503 + 1));
LABEL_17:
    sub_25051AF3C((uint64_t)v498, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_25051AF3C(v497, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_25051AF3C(v500, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    sub_25051AF3C(v431, type metadata accessor for Group.GroupCiphertextContents);
    uint64_t v259 = (uint64_t)v433;
LABEL_31:
    sub_25051AF3C(v259, type metadata accessor for GKCrypto_GroupBlob);
    return v239;
  }
  swift_bridgeObjectRetain();
  uint64_t v373 = v490;
  unint64_t v374 = v489;
  sub_2504DBC4C(v490, v489);
  unint64_t v375 = sub_250513064(v373, v374);
  if (v376)
  {
    sub_25051B91C(*(void *)(v492 + 56) + *(void *)(v453 + 72) * v375, v459, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v377 = 0;
  }
  else
  {
    uint64_t v377 = 1;
  }
  uint64_t v385 = v453;
  uint64_t v386 = v459;
  uint64_t v387 = v452;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v453 + 56))(v459, v377, 1, v452);
  swift_bridgeObjectRelease();
  sub_250511528(v490, v489);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v385 + 48))(v386, 1, v387) == 1) {
    goto LABEL_103;
  }
  v393 = v451;
  sub_25051C8F4(v459, (uint64_t)v451, type metadata accessor for GroupMembership.MemberProperties);
  if (*v393)
  {
    uint64_t v508 = 0;
    *(void *)&long long v509 = 0;
    unint64_t v394 = 0;
    unint64_t v395 = 0xF000000000000000;
  }
  else
  {
    *(void *)&long long v516 = v438;
    *((void *)&v516 + 1) = v429;
    unsigned int v400 = *(_DWORD *)(v507 + v430);
    uint64_t v401 = v442;
    sub_2504DAEFC(v428, v442, &qword_269AB5EC8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v491)(v401, 1, v493) == 1)
    {
      v402 = v448;
      *(_OWORD *)v448 = xmmword_2505BFEF0;
      uint64_t v403 = v493;
      sub_2505BDA40();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v485 + 56))(&v402[*(int *)(v403 + 24)], 1, 1, v486);
      sub_2504DAF60(v442, &qword_269AB5EC8);
    }
    else
    {
      sub_25051C8F4(v442, (uint64_t)v448, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    }
    uint64_t v404 = v446;
    sub_2504DAEFC((uint64_t)&v448[*(int *)(v493 + 24)], v446, &qword_269AB5EE0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v485 + 48))(v404, 1, v486) == 1)
    {
      v405 = v450;
      *(_OWORD *)v450 = xmmword_2505BFEF0;
      *((_OWORD *)v405 + 1) = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60(v446, &qword_269AB5EE0);
    }
    else
    {
      sub_25051C8F4(v446, (uint64_t)v450, type metadata accessor for GKCrypto_AdminGroupBlob);
    }
    sub_25051AF3C((uint64_t)v448, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    uint64_t v406 = v445;
    sub_2504DAEFC((uint64_t)v496, v445, &qword_269AB5CC0);
    if (v357(v406, 1, v467) == 1)
    {
      v407 = v449;
      _OWORD *v449 = xmmword_2505BFEF0;
      v407[1] = xmmword_2505BFEF0;
      v407[2] = xmmword_2505BFEF0;
      v407[3] = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60(v445, &qword_269AB5CC0);
    }
    else
    {
      sub_25051C8F4(v445, (uint64_t)v449, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
    }
    uint64_t v514 = v505;
    unint64_t v515 = v504;
    v512 = v502;
    unint64_t v513 = v501;
    uint64_t v510 = v492;
    uint64_t v408 = v444;
    sub_2504DAEFC(v508, v444, &qword_269AB5EC0);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v509)(v408, 1, v479) == 1)
    {
      uint64_t v409 = v443;
      *(_DWORD *)uint64_t v443 = 0;
      *(_OWORD *)(v409 + 8) = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60(v444, &qword_269AB5EC0);
    }
    else
    {
      sub_25051C8F4(v444, v443, type metadata accessor for GKCrypto_VersionedSeed);
    }
    uint64_t v410 = v443;
    uint64_t v411 = *(void *)(v443 + 8);
    unint64_t v412 = *(void *)(v443 + 16);
    sub_2504DBC4C(v411, v412);
    sub_25051AF3C(v410, type metadata accessor for GKCrypto_VersionedSeed);
    uint64_t v419 = sub_25055E814(v411, v412);
    unint64_t v421 = v420;
    uint64_t v508 = sub_25051F4C8((uint64_t *)&v516, v400, v450, (uint64_t)v449, (uint64_t)v506, &v514, (uint64_t *)&v512, &v510, v419, v420);
    *(void *)&long long v509 = v422;
    unint64_t v395 = v426;
    unint64_t v394 = v427;
    sub_250511528(v419, v421);
    sub_25051AF3C((uint64_t)v449, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
    sub_25051AF3C((uint64_t)v450, type metadata accessor for GKCrypto_AdminGroupBlob);
  }
  uint64_t v396 = v490;
  unint64_t v397 = v489;
  *(void *)&long long v516 = v490;
  *((void *)&v516 + 1) = v489;
  uint64_t v398 = (uint64_t)v440;
  (*(void (**)(char *, uint64_t, uint64_t))(v457 + 16))(v440, v441, v458);
  uint64_t v399 = (uint64_t)v439;
  (*(void (**)(char *, char *, uint64_t))(v473 + 16))(v439, v506, v474);
  sub_2504DBC4C(v396, v397);
  sub_250561DCC((uint64_t *)&v516, v398, v399, v447);
  uint64_t v413 = v438;
  unint64_t v414 = v429;
  *(void *)&long long v516 = v438;
  *((void *)&v516 + 1) = v429;
  LODWORD(v507) = *(_DWORD *)(v507 + v430);
  char v511 = *v451;
  uint64_t v415 = v490;
  unint64_t v416 = v489;
  uint64_t v514 = v490;
  unint64_t v515 = v489;
  sub_25051B91C((uint64_t)v447, v437, type metadata accessor for UserKeyingInfo);
  uint64_t v417 = v436;
  unint64_t v418 = v435;
  v512 = (uint64_t *)v436;
  unint64_t v513 = v435;
  uint64_t v510 = v492;
  sub_2504DBC4C(v413, v414);
  sub_2504DBC4C(v415, v416);
  sub_2504DBC4C(v417, v418);
  sub_250528338(&qword_269AB5F70, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
  uint64_t v423 = sub_2505BDB40();
  unint64_t v425 = v424;
  type metadata accessor for Group(0);
  uint64_t v239 = (char *)swift_allocObject();
  sub_2504E12C0((uint64_t *)&v516, v507, &v511, &v514, v437, (uint64_t *)&v512, &v510, v503, *((unint64_t *)&v503 + 1), v508, v395, v509, v394, 5u, v423, v425);
  sub_250511528((uint64_t)v502, v501);
  sub_25051AF3C((uint64_t)v447, type metadata accessor for UserKeyingInfo);
  sub_25051AF3C((uint64_t)v451, type metadata accessor for GroupMembership.MemberProperties);
  sub_25051AF3C((uint64_t)v498, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_25051AF3C(v497, type metadata accessor for GKCrypto_GroupAETextToSign);
  sub_25051AF3C(v500, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  sub_25051AF3C(v431, type metadata accessor for Group.GroupCiphertextContents);
  sub_25051AF3C((uint64_t)v433, type metadata accessor for GKCrypto_GroupBlob);
  return v239;
}

void sub_2504EF5C8()
{
}

uint64_t sub_2504EF624(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t), void (*a7)(char *, uint64_t), unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, unint64_t a14)
{
  unint64_t v408 = a4;
  v392 = a7;
  unint64_t v393 = a8;
  os_log_type_t v391 = a6;
  *(void *)&long long v412 = a5;
  os_log_type_t v389 = a1;
  unint64_t v410 = a14;
  uint64_t v409 = a13;
  uint64_t v423 = *MEMORY[0x263EF8340];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  uint64_t v21 = MEMORY[0x270FA5388](v16 - 8, v17, v18, v19, v20);
  uint64_t v384 = (uint64_t)&v363 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v21, v23, v24, v25, v26);
  uint64_t v378 = (uint64_t)&v363 - v28;
  MEMORY[0x270FA5388](v27, v29, v30, v31, v32);
  unint64_t v374 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v363 - v33);
  uint64_t v34 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v385 = *(void *)(v34 - 8);
  uint64_t v386 = v34;
  uint64_t v39 = MEMORY[0x270FA5388](v34, v35, v36, v37, v38);
  uint64_t v383 = (uint64_t)&v363 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v39, v41, v42, v43, v44);
  uint64_t v377 = (uint64_t *)((char *)&v363 - v46);
  MEMORY[0x270FA5388](v45, v47, v48, v49, v50);
  uint64_t v373 = (uint64_t)&v363 - v51;
  uint64_t v52 = sub_2505BE000();
  uint64_t v387 = *(void *)(v52 - 8);
  uint64_t v388 = v52;
  uint64_t v57 = MEMORY[0x270FA5388](v52, v53, v54, v55, v56);
  v382 = (char *)&v363 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x270FA5388](v57, v59, v60, v61, v62);
  char v376 = (char *)&v363 - v64;
  MEMORY[0x270FA5388](v63, v65, v66, v67, v68);
  unint64_t v394 = (char *)&v363 - v69;
  uint64_t v70 = sub_2505BE040();
  uint64_t v380 = *(void *)(v70 - 8);
  uint64_t v381 = v70;
  uint64_t v75 = MEMORY[0x270FA5388](v70, v71, v72, v73, v74);
  os_log_type_t v379 = (char *)&v363 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = MEMORY[0x270FA5388](v75, v77, v78, v79, v80);
  unint64_t v375 = (char *)&v363 - v82;
  MEMORY[0x270FA5388](v81, v83, v84, v85, v86);
  char v372 = (char *)&v363 - v87;
  uint64_t v395 = type metadata accessor for GKCrypto_GroupBlob(0);
  MEMORY[0x270FA5388](v395, v88, v89, v90, v91);
  uint64_t v396 = (uint64_t)&v363 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  MEMORY[0x270FA5388](v93 - 8, v94, v95, v96, v97);
  uint64_t v397 = (uint64_t)&v363 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v399 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v103 = MEMORY[0x270FA5388](v399, v99, v100, v101, v102);
  uint64_t v400 = (uint64_t)&v363 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v103, v105, v106, v107, v108);
  uint64_t v398 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v363 - v109);
  uint64_t v110 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  MEMORY[0x270FA5388](v110 - 8, v111, v112, v113, v114);
  uint64_t v401 = (uint64_t)&v363 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_2505BDD20();
  MEMORY[0x270FA5388](v116 - 8, v117, v118, v119, v120);
  unint64_t v402 = (unint64_t)&v363 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = sub_2505BDCE0();
  unint64_t v404 = *(void *)(v122 - 8);
  uint64_t v405 = v122;
  uint64_t v127 = MEMORY[0x270FA5388](v122, v123, v124, v125, v126);
  uint64_t v403 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v363 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v411 = a12;
  uint64_t v129 = *(void *)(a12 - 8);
  uint64_t v134 = MEMORY[0x270FA5388](v127, v130, v131, v132, v133);
  uint64_t v136 = (char *)&v363 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = *(void *)(a11 - 8);
  MEMORY[0x270FA5388](v134, v138, v139, v140, v141);
  uint64_t v143 = (char *)&v363 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = *a3;
  v390 = a2;
  uint64_t v406 = (void *)v144;
  if (v144)
  {
    uint64_t v145 = swift_bridgeObjectRetain();
    uint64_t v146 = v413;
    uint64_t v147 = sub_2504DD23C(v145);
    uint64_t v413 = v146;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v147 = MEMORY[0x263F8EE78];
  }
  uint64_t v148 = sub_2505AE20C(v147);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, unint64_t, uint64_t))(v137 + 16))(v143, v408, a11);
  sub_250528274();
  uint64_t v149 = sub_2505BE370();
  (*(void (**)(char *, void, uint64_t))(v129 + 16))(v136, v412, v411);
  uint64_t v150 = sub_2505BE370();
  uint64_t v151 = swift_bridgeObjectRetain();
  uint64_t v152 = sub_2505A2EF0(v151);
  if ((sub_250514BAC(v152, v149) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v167 = sub_2505BDC40();
    __swift_project_value_buffer(v167, (uint64_t)qword_269AC3188);
    os_log_type_t v168 = sub_2505BE3D0();
    uint64_t v169 = sub_2505BDC20();
    if (os_log_type_enabled(v169, v168))
    {
      uint64_t v170 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v170 = 0;
      _os_log_impl(&dword_2504D2000, v169, v168, "attempting to remove group member not in group", v170, 2u);
      MEMORY[0x25337FF10](v170, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v171 = 313;
    long long v172 = xmmword_2505C0020;
    goto LABEL_45;
  }
  if ((sub_250514BAC(v152, v150) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v173 = sub_2505BDC40();
    __swift_project_value_buffer(v173, (uint64_t)qword_269AC3188);
    os_log_type_t v174 = sub_2505BE3D0();
    uint64_t v175 = sub_2505BDC20();
    if (os_log_type_enabled(v175, v174))
    {
      uint64_t v176 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v176 = 0;
      _os_log_impl(&dword_2504D2000, v175, v174, "attempting to toggle role of non group member", v176, 2u);
      MEMORY[0x25337FF10](v176, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v171 = 314;
    long long v172 = xmmword_2505C0030;
    goto LABEL_45;
  }
  char v153 = sub_2504F2344(v148, v152);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v153 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v177 = sub_2505BDC40();
    __swift_project_value_buffer(v177, (uint64_t)qword_269AC3188);
    os_log_type_t v178 = sub_2505BE3D0();
    uint64_t v179 = sub_2505BDC20();
    if (os_log_type_enabled(v179, v178))
    {
      uint64_t v180 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v180 = 0;
      _os_log_impl(&dword_2504D2000, v179, v178, "attempting to add group member already in group", v180, 2u);
      MEMORY[0x25337FF10](v180, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v171 = 315;
    long long v172 = xmmword_2505C0040;
    goto LABEL_45;
  }
  if ((sub_2504F2344(v149, v150) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v181 = sub_2505BDC40();
    __swift_project_value_buffer(v181, (uint64_t)qword_269AC3188);
    os_log_type_t v182 = sub_2505BE3D0();
    uint64_t v183 = sub_2505BDC20();
    if (os_log_type_enabled(v183, v182))
    {
      uint64_t v184 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v184 = 0;
      _os_log_impl(&dword_2504D2000, v183, v182, "attempting to simultaneously remove and toggle membership of user", v184, 2u);
      MEMORY[0x25337FF10](v184, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v171 = 317;
    long long v172 = xmmword_2505C0050;
    goto LABEL_45;
  }
  uint64_t v154 = v407;
  uint64_t v155 = (void *)v407[5];
  unint64_t v156 = v407[6];
  sub_2504DBC4C((uint64_t)v155, v156);
  char v157 = sub_250586F18((uint64_t)v155, v156, v150);
  sub_250511528((uint64_t)v155, v156);
  if (v157)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v158 = sub_2505BDC40();
    __swift_project_value_buffer(v158, (uint64_t)qword_269AC3188);
    os_log_type_t v159 = sub_2505BE3D0();
    swift_retain_n();
    uint64_t v160 = sub_2505BDC20();
    os_log_type_t v161 = v159;
    if (os_log_type_enabled(v160, v159))
    {
      uint64_t v162 = (uint8_t *)swift_slowAlloc();
      uint64_t v413 = (void *)swift_slowAlloc();
      unint64_t v416 = v413;
      *(_DWORD *)uint64_t v162 = 136315138;
      *(void *)&long long v412 = v162 + 4;
      sub_2504DBC4C((uint64_t)v155, v156);
      uint64_t v163 = sub_2505BD8B0();
      unint64_t v165 = v164;
      sub_250511528((uint64_t)v155, v156);
      *(void *)&long long v420 = sub_25051171C(v163, v165, (uint64_t *)&v416);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_2504D2000, v160, v161, "attempting to demote self %s from admin role director", v162, 0xCu);
      uint64_t v166 = v413;
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v166, -1, -1);
      MEMORY[0x25337FF10](v162, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v171 = 318;
    long long v172 = xmmword_2505C0070;
LABEL_45:
    *(_OWORD *)(v171 + 8) = v172;
    *(void *)(v171 + 24) = 0x80000002505C9B40;
    *(void *)(v171 + 32) = 0xD000000000000052;
    *(void *)(v171 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  sub_2504DBC4C((uint64_t)v155, v156);
  char v185 = sub_250586F18((uint64_t)v155, v156, v149);
  sub_250511528((uint64_t)v155, v156);
  if (v185)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v186 = sub_2505BDC40();
    __swift_project_value_buffer(v186, (uint64_t)qword_269AC3188);
    os_log_type_t v187 = sub_2505BE3D0();
    swift_retain_n();
    uint64_t v188 = sub_2505BDC20();
    os_log_type_t v189 = v187;
    if (os_log_type_enabled(v188, v187))
    {
      uint64_t v190 = (uint8_t *)swift_slowAlloc();
      uint64_t v413 = (void *)swift_slowAlloc();
      unint64_t v416 = v413;
      *(_DWORD *)uint64_t v190 = 136315138;
      *(void *)&long long v412 = v190 + 4;
      sub_2504DBC4C((uint64_t)v155, v156);
      uint64_t v191 = sub_2505BD8B0();
      unint64_t v193 = v192;
      sub_250511528((uint64_t)v155, v156);
      *(void *)&long long v420 = sub_25051171C(v191, v193, (uint64_t *)&v416);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_2504D2000, v188, v189, "attempting to remove self %s from group director", v190, 0xCu);
      uint64_t v194 = v413;
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v194, -1, -1);
      MEMORY[0x25337FF10](v190, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v171 = 319;
    long long v172 = xmmword_2505C0060;
    goto LABEL_45;
  }
  swift_beginAccess();
  int v195 = *((_DWORD *)v154 + 16);
  int v196 = v195 + 1;
  if (v195 == -1)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    v415[0] = v154[7];
    swift_bridgeObjectRetain();
    uint64_t v197 = v413;
    sub_2504F2F1C(v149);
    if (v197)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    LODWORD(v413) = v196;
    swift_bridgeObjectRelease();
    uint64_t v199 = sub_2504DD9E8(v150, v415);
    swift_bridgeObjectRelease();
    sub_2504F32C8(v199);
    uint64_t v136 = 0;
    swift_bridgeObjectRelease();
    *(void *)&long long v420 = v415[0];
    unint64_t v416 = v155;
    unint64_t v417 = v156;
    GroupMembership.validMembershipRolesForGroup(memberID:)((uint64_t *)&v416);
    unint64_t v200 = sub_2504E1B08(MEMORY[0x263F8EE78]);
    uint64_t v201 = v406;
    if (v406)
    {
      swift_bridgeObjectRelease();
      unint64_t v416 = v201;
      uint64_t v202 = sub_250508BFC((uint64_t *)&v416, (int)v413);
      uint64_t v204 = v203;
      sub_2504F38E8(v202);
      uint64_t v136 = 0;
      uint64_t v411 = v204;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v411 = v200;
    }
    sub_2505BDD00();
    uint64_t v205 = v403;
    sub_2505BDCD0();
    sub_2505BDCB0();
    (*(void (**)(void *, uint64_t))(v404 + 8))(v205, v405);
    uint64_t v207 = v416;
    unint64_t v206 = v417;
    uint64_t v409 = (void *)v415[0];
    unint64_t v416 = (void *)v415[0];
    uint64_t v208 = sub_25051DB50();
    unint64_t v210 = v209;
    unint64_t v418 = &type metadata for AdminSeed;
    unint64_t v410 = sub_25051CA18();
    unint64_t v419 = v410;
    uint64_t v211 = swift_allocObject();
    unint64_t v416 = (void *)v211;
    *(void *)(v211 + 16) = v207;
    *(void *)(v211 + 24) = v206;
    *(_OWORD *)(v211 + 32) = xmmword_2505BFEE0;
    sub_2504DBC4C((uint64_t)v207, v206);
    sub_25051B908(0, 0xF000000000000000);
    uint64_t v212 = v208;
    *(void *)&long long v412 = v210;
    uint64_t v213 = sub_25056103C(&v416, 1, v208, v210);
    uint64_t v215 = v214;
    uint64_t v217 = v216;
    uint64_t v219 = v218;
    unint64_t v408 = v206;
    uint64_t v406 = v207;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v416);
    *(void *)&long long v420 = v213;
    *((void *)&v420 + 1) = v215;
    unint64_t v421 = v217;
    uint64_t v422 = v219;
    sub_25055B5D4(v212, v412);
    uint64_t v405 = v212;
    long long v220 = v420;
    uint64_t v221 = (uint64_t)v421;
    unint64_t v222 = v422;
    unint64_t v418 = &type metadata for AdminSeed;
    unint64_t v419 = v410;
    uint64_t v223 = swift_allocObject();
    unint64_t v416 = (void *)v223;
    *(_OWORD *)(v223 + 16) = v220;
    *(void *)(v223 + 32) = v221;
    *(void *)(v223 + 40) = v222;
    sub_2504DBC4C(v220, *((unint64_t *)&v220 + 1));
    sub_25051B908(v221, v222);
    if (qword_269AB5428 != -1) {
      swift_once();
    }
    uint64_t v403 = (void *)sub_250560C18(&v416, 1, qword_269AC31B0, *(unint64_t *)algn_269AC31B8);
    unint64_t v404 = v224;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v416);
    unint64_t v418 = &type metadata for MemberSeed;
    unint64_t v370 = sub_250522A2C();
    unint64_t v419 = v370;
    unint64_t v416 = v403;
    unint64_t v417 = v404;
    sub_2504DBC4C((uint64_t)v403, v404);
    unint64_t v371 = (void *)sub_250560C18(&v416, 1, v405, v412);
    unint64_t v402 = v225;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v416);
  uint64_t v368 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505BFEC0;
  uint64_t v227 = v407[2];
  unint64_t v228 = v407[3];
  *(void *)(inited + 32) = v227;
  *(void *)(inited + 40) = v228;
  int v229 = (int)v413;
  LODWORD(v416) = bswap32(v413);
  sub_2504DBC4C(v227, v228);
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)&v416, (uint64_t)&v416 + 4);
  *(void *)(inited + 56) = v230;
  unint64_t v416 = v409;
  long long v231 = v420;
  uint64_t v233 = v421;
  unint64_t v232 = v422;
  swift_bridgeObjectRetain();
  sub_2504DBC4C(v231, *((unint64_t *)&v231 + 1));
  sub_25051B908((uint64_t)v233, v232);
  v369 = (void *)inited;
  uint64_t v360 = (void *)inited;
  unint64_t v234 = v232;
  sub_250504124((uint64_t)v406, v408, 0, 0xF000000000000000, v231, *((unint64_t *)&v231 + 1), v233, v401, v232, v360, v229);
  if (v136)
  {
    sub_250511528(v231, *((unint64_t *)&v231 + 1));
    sub_25051B8D4((uint64_t)v233, v232);
    swift_bridgeObjectRelease();
    sub_250511528(v405, v412);
    sub_250511528((uint64_t)v371, v402);
    sub_250511528((uint64_t)v403, v404);
    sub_250511528((uint64_t)v406, v408);
    sub_25051B8D4(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_250511528(v231, *((unint64_t *)&v231 + 1));
    sub_25051B8D4((uint64_t)v233, v232);
    return swift_bridgeObjectRelease();
  }
  uint64_t v235 = v409;
  swift_bridgeObjectRelease();
  sub_250511528(v231, *((unint64_t *)&v231 + 1));
  sub_25051B8D4((uint64_t)v233, v234);
  unint64_t v416 = v235;
  swift_bridgeObjectRetain();
  unint64_t v365 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))sub_250505904(&v416, (uint64_t)v403, v404, v371, v402, v369, (int)v413, v401);
  unint64_t v366 = v236;
  uint64_t v367 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v237;
  unint64_t v364 = v238;
  uint64_t v239 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v239, v240, v241, v242, v243);
  *((_OWORD *)&v363 - 3) = v231;
  unint64_t v362 = v402;
  sub_2504DBC4C(v231, *((unint64_t *)&v231 + 1));
  sub_25051B908((uint64_t)v233, v234);
  sub_250528338(&qword_269AB5FA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_2505BDB80();
  type metadata accessor for Group(0);
  sub_25051C8F4(v400, (uint64_t)v398, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_250511528(v231, *((unint64_t *)&v231 + 1));
  sub_25051B8D4((uint64_t)v233, v234);
  unint64_t v416 = (void *)v415[0];
  swift_bridgeObjectRetain();
  sub_2504F4228((uint64_t *)&v416, v397);
  uint64_t v244 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v244, v245, v246, v247, v248);
  *((_DWORD *)&v363 - 16) = 1;
  unint64_t v249 = v366;
  *(&v363 - 7) = v365;
  *(&v363 - 6) = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v249;
  unint64_t v250 = v364;
  *(&v363 - 5) = v367;
  unint64_t v359 = v250;
  uint64_t v360 = v398;
  uint64_t v361 = v397;
  uint64_t v400 = sub_250528338(&qword_269AB5F70, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
  sub_2505BDB80();
  unint64_t v418 = &type metadata for AdminSeed;
  unint64_t v419 = v410;
  int64_t v251 = (void *)swift_allocObject();
  unint64_t v416 = v251;
  uint64_t v253 = (uint64_t)v391;
  unint64_t v252 = (unint64_t)v392;
  v251[2] = v391;
  v251[3] = v252;
  uint64_t v254 = v393;
  v251[4] = v393;
  v251[5] = a9;
  sub_2504DBC4C(v253, v252);
  sub_25051B908(v254, a9);
  if (qword_269AB5628 != -1) {
    swift_once();
  }
  sub_25056041C(&v416, 1, qword_269AC3700, *(unint64_t *)algn_269AC3708);
  uint64_t v409 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v416);
  uint64_t v255 = swift_initStackObject();
  long long v399 = xmmword_2505BFE80;
  *(_OWORD *)(v255 + 16) = xmmword_2505BFE80;
  LODWORD(v416) = 0x1000000;
  *(void *)(v255 + 32) = sub_25056DAD0((uint64_t)&v416, (uint64_t)&v416 + 4);
  *(void *)(v255 + 40) = v256;
  unint64_t v416 = (void *)v255;
  uint64_t v257 = swift_bridgeObjectRetain();
  sub_250514A58(v257);
  unint64_t v258 = v416;
  if (qword_269AB5430 != -1) {
    swift_once();
  }
  uint64_t v259 = qword_269AC31C0;
  unint64_t v260 = *(void *)algn_269AC31C8;
  sub_2504DBC4C(qword_269AC31C0, *(unint64_t *)algn_269AC31C8);
  sub_2504DBC4C(v259, v260);
  swift_bridgeObjectRetain();
  uint64_t v261 = v258;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v261 = sub_250570DC0(0, v258[2] + 1, 1, v258);
  }
  unint64_t v263 = v261[2];
  unint64_t v262 = v261[3];
  if (v263 >= v262 >> 1) {
    uint64_t v261 = sub_250570DC0((void *)(v262 > 1), v263 + 1, 1, v261);
  }
  v261[2] = v263 + 1;
  uint64_t v264 = &v261[2 * v263];
  v264[4] = v259;
  v264[5] = v260;
  sub_250511528(v259, v260);
  swift_bridgeObjectRelease();
  uint64_t v265 = (void *)sub_2504F4C6C(v261);
  unint64_t v267 = v266;
  swift_bridgeObjectRelease();
  unint64_t v416 = v265;
  unint64_t v417 = v267;
  unint64_t v393 = sub_25051AE60();
  os_log_type_t v268 = v409;
  sub_2505BDFF0();
  uint64_t v409 = v268;
  if (v268)
  {
    swift_bridgeObjectRelease();
    sub_250511528((uint64_t)v365, v366);
    sub_250511528((uint64_t)v367, v364);
    sub_250511528(v405, v412);
    sub_250511528((uint64_t)v371, v402);
    sub_250511528((uint64_t)v403, v404);
    sub_250511528((uint64_t)v406, v408);
    sub_25051B8D4(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    sub_250511528((uint64_t)v265, v267);
    (*(void (**)(char *, uint64_t))(v387 + 8))(v394, v388);
  }
  else
  {
    sub_250511528((uint64_t)v265, v267);
    uint64_t v271 = *(void (**)(char *, uint64_t))(v387 + 8);
    v387 += 8;
    v392 = v271;
    v271(v394, v388);
    uint64_t v272 = v372;
    uint64_t v273 = sub_2505BE010();
    uint64_t v275 = v274;
    unint64_t v276 = *(void (**)(char *, uint64_t))(v380 + 8);
    v380 += 8;
    os_log_type_t v391 = v276;
    v276(v272, v381);
    unint64_t v394 = (char *)(v396 + *(int *)(v395 + 40));
    uint64_t v277 = (void (*)(void, void, void, void))v374;
    sub_2504DAEFC((uint64_t)v394, (uint64_t)v374, &qword_269AB5CC8);
    unint64_t v278 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v385 + 48);
    char v372 = (char *)(v385 + 48);
    v363 = v278;
    if (v278((uint64_t)v277, 1, v386) == 1)
    {
      uint64_t v279 = v373;
      *(_OWORD *)uint64_t v373 = xmmword_2505BFEF0;
      *(_OWORD *)(v279 + 16) = xmmword_2505BFEF0;
      *(_OWORD *)(v279 + 32) = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60((uint64_t)v374, &qword_269AB5CC8);
    }
    else
    {
      sub_25051C8F4((uint64_t)v374, v373, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    }
    uint64_t v280 = v373;
    sub_250511528(*(void *)(v373 + 16), *(void *)(v373 + 24));
    *(void *)(v280 + 16) = v273;
    *(void *)(v280 + 24) = v275;
    uint64_t v281 = v394;
    sub_2504DAF60((uint64_t)v394, &qword_269AB5CC8);
    sub_25051C8F4(v280, (uint64_t)v281, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    v282 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v385 + 56);
    v385 += 56;
    unint64_t v374 = v282;
    ((void (*)(char *, void, uint64_t, uint64_t))v282)(v281, 0, 1, v386);
    long long v283 = v420;
    uint64_t v284 = (uint64_t)v421;
    unint64_t v285 = v422;
    unint64_t v418 = &type metadata for AdminSeed;
    unint64_t v419 = v410;
    uint64_t v286 = swift_allocObject();
    unint64_t v416 = (void *)v286;
    *(_OWORD *)(v286 + 16) = v283;
    *(void *)(v286 + 32) = v284;
    *(void *)(v286 + 40) = v285;
    uint64_t v287 = qword_269AC3700;
    unint64_t v288 = *(void *)algn_269AC3708;
    sub_2504DBC4C(v283, *((unint64_t *)&v283 + 1));
    sub_25051B908(v284, v285);
    sub_2504DBC4C(v283, *((unint64_t *)&v283 + 1));
    sub_25051B908(v284, v285);
    uint64_t v289 = v409;
    sub_25056041C(&v416, 1, v287, v288);
    uint64_t v409 = v289;
    if (v289)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v416);
      sub_250511528(v283, *((unint64_t *)&v283 + 1));
      sub_25051B8D4(v284, v285);
      swift_bridgeObjectRelease();
      sub_250511528((uint64_t)v365, v366);
      sub_250511528((uint64_t)v367, v364);
      sub_250511528(v405, v412);
      sub_250511528((uint64_t)v371, v402);
      sub_250511528((uint64_t)v403, v404);
      sub_250511528((uint64_t)v406, v408);
      sub_25051B8D4(0, 0xF000000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v416);
      sub_250511528(v283, *((unint64_t *)&v283 + 1));
      sub_25051B8D4(v284, v285);
      uint64_t v290 = swift_initStackObject();
      *(_OWORD *)(v290 + 16) = v399;
      LODWORD(v416) = 0x1000000;
      *(void *)(v290 + 32) = sub_25056DAD0((uint64_t)&v416, (uint64_t)&v416 + 4);
      *(void *)(v290 + 40) = v291;
      unint64_t v416 = (void *)v290;
      uint64_t v292 = swift_bridgeObjectRetain();
      sub_250514A58(v292);
      uint64_t v293 = v416;
      if (qword_269AB5438 != -1) {
        swift_once();
      }
      uint64_t v294 = qword_269AC31D0;
      unint64_t v295 = *(void *)algn_269AC31D8;
      sub_2504DBC4C(qword_269AC31D0, *(unint64_t *)algn_269AC31D8);
      sub_2504DBC4C(v294, v295);
      swift_bridgeObjectRetain();
      uint64_t v296 = v293;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v296 = sub_250570DC0(0, v293[2] + 1, 1, v293);
      }
      unint64_t v298 = v296[2];
      unint64_t v297 = v296[3];
      if (v298 >= v297 >> 1) {
        uint64_t v296 = sub_250570DC0((void *)(v297 > 1), v298 + 1, 1, v296);
      }
      v296[2] = v298 + 1;
      uint64_t v299 = &v296[2 * v298];
      v299[4] = v294;
      v299[5] = v295;
      sub_250511528(v294, v295);
      swift_bridgeObjectRelease();
      uint64_t v300 = (void *)sub_2504F52CC(v296);
      unint64_t v302 = v301;
      swift_bridgeObjectRelease();
      unint64_t v416 = v300;
      unint64_t v417 = v302;
      os_log_type_t v303 = v409;
      sub_2505BDFF0();
      if (v303)
      {
        swift_bridgeObjectRelease();
        sub_250511528((uint64_t)v365, v366);
        sub_250511528((uint64_t)v367, v364);
        sub_250511528(v405, v412);
        sub_250511528((uint64_t)v371, v402);
        sub_250511528((uint64_t)v403, v404);
        sub_250511528((uint64_t)v406, v408);
        sub_25051B8D4(0, 0xF000000000000000);
        swift_bridgeObjectRelease();
        sub_250511528((uint64_t)v300, v302);
        v392(v376, v388);
        sub_25051AF3C(v396, type metadata accessor for GKCrypto_GroupBlob);
        sub_25051AF3C(v401, type metadata accessor for GKCrypto_AdminGroupBlob);
        uint64_t v304 = (uint64_t)v421;
        unint64_t v305 = v422;
        sub_250511528(v420, *((unint64_t *)&v420 + 1));
        sub_25051B8D4(v304, v305);
        sub_25051AF3C(v397, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
        sub_25051AF3C((uint64_t)v398, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
        return swift_bridgeObjectRelease();
      }
      sub_250511528((uint64_t)v300, v302);
      v392(v376, v388);
      BOOL v306 = v375;
      uint64_t v307 = sub_2505BE010();
      uint64_t v309 = v308;
      v391(v306, v381);
      uint64_t v310 = v378;
      sub_2504DAEFC((uint64_t)v394, v378, &qword_269AB5CC8);
      if (v363(v310, 1, v386) == 1)
      {
        uint64_t v311 = (uint64_t)v377;
        *(_OWORD *)uint64_t v377 = xmmword_2505BFEF0;
        *(_OWORD *)(v311 + 16) = xmmword_2505BFEF0;
        *(_OWORD *)(v311 + 32) = xmmword_2505BFEF0;
        sub_2505BDA40();
        sub_2504DAF60(v378, &qword_269AB5CC8);
      }
      else
      {
        sub_25051C8F4(v378, (uint64_t)v377, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
      }
      unint64_t v312 = v377;
      sub_250511528(*v377, v377[1]);
      *unint64_t v312 = v307;
      v312[1] = v309;
      unint64_t v313 = v394;
      sub_2504DAF60((uint64_t)v394, &qword_269AB5CC8);
      sub_25051C8F4((uint64_t)v312, (uint64_t)v313, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
      ((void (*)(char *, void, uint64_t, uint64_t))v374)(v313, 0, 1, v386);
      unint64_t v418 = &type metadata for MemberSeed;
      unint64_t v419 = v370;
      unint64_t v416 = v371;
      unint64_t v417 = v402;
      sub_2504DBC4C((uint64_t)v371, v402);
      if (qword_269AB5650 != -1) {
        swift_once();
      }
      sub_25056041C(&v416, 1, qword_269AC3750, *(unint64_t *)algn_269AC3758);
      uint64_t v409 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v416);
      uint64_t v314 = swift_initStackObject();
      *(_OWORD *)(v314 + 16) = v399;
      LODWORD(v416) = 0x1000000;
      *(void *)(v314 + 32) = sub_25056DAD0((uint64_t)&v416, (uint64_t)&v416 + 4);
      *(void *)(v314 + 40) = v315;
      unint64_t v416 = (void *)v314;
      sub_250514A58((uint64_t)v369);
      uint64_t v316 = v416;
      if (qword_269AB5440 != -1) {
        swift_once();
      }
      uint64_t v317 = qword_269AC31E0;
      unint64_t v318 = *(void *)algn_269AC31E8;
      sub_2504DBC4C(qword_269AC31E0, *(unint64_t *)algn_269AC31E8);
      sub_2504DBC4C(v317, v318);
      swift_bridgeObjectRetain();
      os_log_type_t v319 = v316;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        os_log_type_t v319 = sub_250570DC0(0, v316[2] + 1, 1, v316);
      }
      unint64_t v321 = v319[2];
      unint64_t v320 = v319[3];
      if (v321 >= v320 >> 1) {
        os_log_type_t v319 = sub_250570DC0((void *)(v320 > 1), v321 + 1, 1, v319);
      }
      v319[2] = v321 + 1;
      v322 = &v319[2 * v321];
      v322[4] = v317;
      v322[5] = v318;
      sub_250511528(v317, v318);
      swift_bridgeObjectRelease();
      uint64_t v323 = (void *)sub_2504F5B34(v319);
      unint64_t v325 = v324;
      swift_bridgeObjectRelease();
      unint64_t v416 = v323;
      unint64_t v417 = v325;
      uint64_t v326 = v409;
      sub_2505BDFF0();
      if (!v326)
      {
        sub_250511528((uint64_t)v323, v325);
        v392(v382, v388);
        uint64_t v327 = v379;
        uint64_t v328 = sub_2505BE010();
        uint64_t v330 = v329;
        v391(v327, v381);
        uint64_t v331 = v384;
        sub_2504DAEFC((uint64_t)v394, v384, &qword_269AB5CC8);
        if (v363(v331, 1, v386) == 1)
        {
          uint64_t v332 = v383;
          *(_OWORD *)uint64_t v383 = xmmword_2505BFEF0;
          *(_OWORD *)(v332 + 16) = xmmword_2505BFEF0;
          *(_OWORD *)(v332 + 32) = xmmword_2505BFEF0;
          sub_2505BDA40();
          sub_2504DAF60(v384, &qword_269AB5CC8);
        }
        else
        {
          sub_25051C8F4(v384, v383, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
        }
        uint64_t v333 = v383;
        sub_250511528(*(void *)(v383 + 32), *(void *)(v383 + 40));
        *(void *)(v333 + 32) = v328;
        *(void *)(v333 + 40) = v330;
        v334 = v394;
        sub_2504DAF60((uint64_t)v394, &qword_269AB5CC8);
        sub_25051C8F4(v333, (uint64_t)v334, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
        ((void (*)(char *, void, uint64_t, uint64_t))v374)(v334, 0, 1, v386);
        long long v335 = v420;
        uint64_t v336 = (uint64_t)v421;
        unint64_t v337 = v422;
        sub_2504DBC4C(v420, *((unint64_t *)&v420 + 1));
        sub_25051B908(v336, v337);
        unint64_t v394 = sub_25050A430(v335, *((unint64_t *)&v335 + 1), v336, v337, (unint64_t)v371, v402, (int)v413);
        *(void *)&long long v399 = v338;
        uint64_t v409 = v339;
        unint64_t v410 = v340;
        sub_250511528(v335, *((unint64_t *)&v335 + 1));
        sub_25051B8D4(v336, v337);
        uint64_t v341 = sub_25050AE00();
        uint64_t v343 = v342;
        v344 = (void *)((char *)v407 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v414 = *v344;
        uint64_t *v344 = 0x8000000000000000;
        sub_250515748(v411, (uint64_t)sub_25051A6F0, 0, isUniquelyReferenced_nonNull_native, &v414);
        uint64_t *v344 = v414;
        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v346 = sub_2505BDB40();
        unint64_t v348 = v347;
        uint64_t v349 = swift_bridgeObjectRetain();
        uint64_t v350 = sub_2504DDC90(v349);
        sub_250511528((uint64_t)v365, v366);
        sub_250511528((uint64_t)v367, v364);
        sub_250511528(v405, v412);
        sub_250511528((uint64_t)v403, v404);
        sub_250511528((uint64_t)v406, v408);
        sub_25051B8D4(0, 0xF000000000000000);
        swift_bridgeObjectRelease();
        sub_25051AF3C(v396, type metadata accessor for GKCrypto_GroupBlob);
        sub_25051AF3C(v401, type metadata accessor for GKCrypto_AdminGroupBlob);
        v351 = (void *)v415[0];
        long long v412 = v420;
        v352 = v421;
        uint64_t v411 = v422;
        swift_bridgeObjectRetain();
        sub_2504DBC4C(v346, v348);
        sub_25051AF3C(v397, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
        sub_25051AF3C((uint64_t)v398, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
        uint64_t v353 = v389;
        *os_log_type_t v389 = v351;
        *((_DWORD *)v353 + 2) = v413;
        *((_OWORD *)v353 + 1) = v412;
        uint64_t v354 = v411;
        v353[4] = v352;
        v353[5] = v354;
        unint64_t v355 = v402;
        v353[6] = v371;
        v353[7] = v355;
        v353[8] = v346;
        v353[9] = v348;
        uint64_t v356 = v390;
        uint64_t *v390 = v346;
        v356[1] = v348;
        v357 = v394;
        v356[2] = v350;
        v356[3] = (uint64_t)v357;
        v358 = v409;
        v356[4] = v399;
        v356[5] = (uint64_t)v358;
        v356[6] = v410;
        v356[7] = v341;
        v356[8] = v343;
        return swift_bridgeObjectRelease();
      }
      sub_250511528((uint64_t)v365, v366);
      sub_250511528((uint64_t)v367, v364);
      sub_250511528(v405, v412);
      sub_250511528((uint64_t)v371, v402);
      sub_250511528((uint64_t)v403, v404);
      sub_250511528((uint64_t)v406, v408);
      sub_25051B8D4(0, 0xF000000000000000);
      swift_bridgeObjectRelease();
      sub_250511528((uint64_t)v323, v325);
      v392(v382, v388);
    }
  }
  sub_25051AF3C(v396, type metadata accessor for GKCrypto_GroupBlob);
  sub_25051AF3C(v401, type metadata accessor for GKCrypto_AdminGroupBlob);
  uint64_t v269 = (uint64_t)v421;
  unint64_t v270 = v422;
  sub_250511528(v420, *((unint64_t *)&v420 + 1));
  sub_25051B8D4(v269, v270);
  sub_25051AF3C(v397, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_25051AF3C((uint64_t)v398, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2504F2344(uint64_t a1, uint64_t a2)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v91 = v4;
  uint64_t v92 = v4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v88 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v97 = v5;
  uint64_t v99 = v5 + 56;
  while (1)
  {
    do
    {
      while (1)
      {
        int64_t v11 = v10;
        if (!v8) {
          break;
        }
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v13 = v12 | (v10 << 6);
        if (*(void *)(v5 + 16)) {
          goto LABEL_31;
        }
      }
      int64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_157;
      }
      if (v14 >= v88)
      {
LABEL_151:
        swift_bridgeObjectRelease();
        uint64_t v85 = 1;
        goto LABEL_149;
      }
      unint64_t v15 = *(void *)(v92 + 8 * v14);
      ++v10;
      if (!v15)
      {
        int64_t v10 = v11 + 2;
        if (v11 + 2 >= v88) {
          goto LABEL_151;
        }
        unint64_t v15 = *(void *)(v92 + 8 * v10);
        if (!v15)
        {
          int64_t v10 = v11 + 3;
          if (v11 + 3 >= v88) {
            goto LABEL_151;
          }
          unint64_t v15 = *(void *)(v92 + 8 * v10);
          if (!v15)
          {
            int64_t v16 = v11 + 4;
            if (v11 + 4 >= v88) {
              goto LABEL_151;
            }
            unint64_t v15 = *(void *)(v92 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_176;
                }
                if (v10 >= v88) {
                  goto LABEL_151;
                }
                unint64_t v15 = *(void *)(v92 + 8 * v10);
                ++v16;
                if (v15) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v10 = v11 + 4;
          }
        }
      }
LABEL_30:
      unint64_t v8 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    while (!*(void *)(v5 + 16));
LABEL_31:
    unint64_t v89 = v8;
    int64_t v90 = v10;
    uint64_t v17 = (uint64_t *)(*(void *)(v91 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    sub_2505BE850();
    sub_2504DBC4C(v18, v19);
    sub_2504DBC4C(v18, v19);
    sub_2505BD950();
    sub_250511528(v18, v19);
    uint64_t v20 = sub_2505BE880();
    uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v22 = v20 & ~v21;
    if ((*(void *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22)) {
      break;
    }
LABEL_13:
    sub_250511528(v18, v19);
    unint64_t v8 = v89;
    int64_t v10 = v90;
  }
  unint64_t v23 = v19 >> 62;
  uint64_t v100 = ~v21;
  BOOL v24 = __OFSUB__(HIDWORD(v18), v18);
  BOOL v98 = v24;
  uint64_t v95 = (v18 >> 32) - (int)v18;
  uint64_t v96 = v18 >> 32;
  while (2)
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    uint64_t v28 = 0;
    switch(v27 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v26), v26))
        {
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
        }
        uint64_t v28 = HIDWORD(v26) - (int)v26;
LABEL_44:
        sub_2504DBC4C(v26, v27);
        break;
      case 2uLL:
        uint64_t v30 = *(void *)(v26 + 16);
        uint64_t v29 = *(void *)(v26 + 24);
        uint64_t v28 = v29 - v30;
        if (!__OFSUB__(v29, v30)) {
          goto LABEL_44;
        }
        goto LABEL_153;
      case 3uLL:
        break;
      default:
        uint64_t v28 = BYTE6(v27);
        break;
    }
    uint64_t v31 = BYTE6(v19);
    switch((int)v23)
    {
      case 1:
        uint64_t v31 = HIDWORD(v18) - (int)v18;
        if (v98) {
          goto LABEL_154;
        }
        goto LABEL_49;
      case 2:
        uint64_t v33 = *(void *)(v18 + 16);
        uint64_t v32 = *(void *)(v18 + 24);
        BOOL v34 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v34) {
          goto LABEL_49;
        }
        goto LABEL_155;
      case 3:
        if (v28) {
          goto LABEL_37;
        }
        goto LABEL_147;
      default:
LABEL_49:
        if (v28 != v31)
        {
LABEL_37:
          sub_250511528(v26, v27);
LABEL_38:
          unint64_t v22 = (v22 + 1) & v100;
          if (((*(void *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
            goto LABEL_13;
          }
          continue;
        }
        if (v28 >= 1)
        {
          switch(v27 >> 62)
          {
            case 1uLL:
              if ((int)v26 > v26 >> 32) {
                goto LABEL_156;
              }
              sub_2504DBC4C(v26, v27);
              uint64_t v39 = (char *)sub_2505BD7D0();
              if (!v39) {
                goto LABEL_63;
              }
              uint64_t v40 = sub_2505BD800();
              if (__OFSUB__((int)v26, v40)) {
                goto LABEL_159;
              }
              v39 += (int)v26 - v40;
LABEL_63:
              sub_2505BD7F0();
              uint64_t v9 = v99;
              if (v23)
              {
                if (v23 == 1)
                {
                  if (v96 < (int)v18) {
                    goto LABEL_168;
                  }
                  swift_retain();
                  uint64_t v41 = (char *)sub_2505BD7D0();
                  if (v41)
                  {
                    uint64_t v42 = sub_2505BD800();
                    if (__OFSUB__((int)v18, v42)) {
                      goto LABEL_175;
                    }
                    v41 += (int)v18 - v42;
                  }
                  uint64_t v43 = sub_2505BD7F0();
                  size_t v44 = (v18 >> 32) - (int)v18;
                  if (v43 < v95) {
                    size_t v44 = v43;
                  }
                  if (!v39) {
                    goto LABEL_178;
                  }
                  if (!v41) {
                    goto LABEL_179;
                  }
                  int v45 = memcmp(v39, v41, v44);
                  sub_250511528(v18, v19);
                }
                else
                {
                  uint64_t v79 = *(void *)(v18 + 16);
                  uint64_t v94 = *(char **)(v18 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v80 = (char *)sub_2505BD7D0();
                  if (v80)
                  {
                    uint64_t v81 = sub_2505BD800();
                    if (__OFSUB__(v79, v81)) {
                      goto LABEL_174;
                    }
                    v80 += v79 - v81;
                  }
                  BOOL v34 = __OFSUB__(v94, v79);
                  uint64_t v82 = &v94[-v79];
                  if (v34) {
                    goto LABEL_169;
                  }
                  uint64_t v83 = sub_2505BD7F0();
                  if (v83 >= (uint64_t)v82) {
                    size_t v84 = (size_t)v82;
                  }
                  else {
                    size_t v84 = v83;
                  }
                  if (!v39) {
                    goto LABEL_189;
                  }
                  uint64_t v5 = v97;
                  if (!v80) {
                    goto LABEL_190;
                  }
                  int v45 = memcmp(v39, v80, v84);
                  swift_release();
                  swift_release();
                }
                uint64_t v54 = v26;
                unint64_t v55 = v27;
LABEL_144:
                sub_250511528(v54, v55);
                sub_250511528(v26, v27);
                uint64_t v9 = v99;
                if (!v45) {
                  goto LABEL_148;
                }
              }
              else
              {
                *(void *)__s1 = v18;
                *(_WORD *)&__s1[8] = v19;
                __s1[10] = BYTE2(v19);
                __s1[11] = BYTE3(v19);
                __s1[12] = BYTE4(v19);
                __s1[13] = BYTE5(v19);
                if (!v39) {
                  goto LABEL_188;
                }
                int v56 = memcmp(v39, __s1, BYTE6(v19));
                sub_250511528(v26, v27);
LABEL_131:
                sub_250511528(v26, v27);
                if (!v56) {
                  goto LABEL_148;
                }
              }
              break;
            case 2uLL:
              uint64_t v46 = *(void *)(v26 + 16);
              swift_retain();
              swift_retain();
              uint64_t v47 = sub_2505BD7D0();
              if (v47)
              {
                uint64_t v48 = v47;
                uint64_t v49 = sub_2505BD800();
                if (__OFSUB__(v46, v49)) {
                  goto LABEL_158;
                }
                uint64_t v93 = (void *)(v48 + v46 - v49);
              }
              else
              {
                uint64_t v93 = 0;
              }
              sub_2505BD7F0();
              uint64_t v5 = v97;
              uint64_t v9 = v99;
              if (!v23)
              {
                *(void *)__s1 = v18;
                *(_WORD *)&__s1[8] = v19;
                __s1[10] = BYTE2(v19);
                __s1[11] = BYTE3(v19);
                __s1[12] = BYTE4(v19);
                __s1[13] = BYTE5(v19);
                if (!v93) {
                  goto LABEL_185;
                }
                int v56 = memcmp(v93, __s1, BYTE6(v19));
                swift_release();
                swift_release();
                goto LABEL_131;
              }
              if (v23 == 1)
              {
                if (v96 < (int)v18) {
                  goto LABEL_162;
                }
                swift_retain();
                uint64_t v57 = (char *)sub_2505BD7D0();
                if (v57)
                {
                  uint64_t v58 = sub_2505BD800();
                  if (__OFSUB__((int)v18, v58)) {
                    goto LABEL_173;
                  }
                  v57 += (int)v18 - v58;
                }
                uint64_t v59 = sub_2505BD7F0();
                size_t v60 = (v18 >> 32) - (int)v18;
                if (v59 < v95) {
                  size_t v60 = v59;
                }
                if (!v93) {
                  goto LABEL_181;
                }
                if (!v57) {
                  goto LABEL_182;
                }
                int v61 = memcmp(v93, v57, v60);
                sub_250511528(v18, v19);
                swift_release();
              }
              else
              {
                uint64_t v73 = *(void *)(v18 + 16);
                uint64_t v87 = *(void *)(v18 + 24);
                swift_retain();
                swift_retain();
                uint64_t v74 = (char *)sub_2505BD7D0();
                if (v74)
                {
                  uint64_t v75 = sub_2505BD800();
                  if (__OFSUB__(v73, v75)) {
                    goto LABEL_172;
                  }
                  v74 += v73 - v75;
                }
                BOOL v34 = __OFSUB__(v87, v73);
                int64_t v76 = v87 - v73;
                if (v34) {
                  goto LABEL_167;
                }
                uint64_t v77 = sub_2505BD7F0();
                if (v77 >= v76) {
                  size_t v78 = v76;
                }
                else {
                  size_t v78 = v77;
                }
                if (!v93) {
                  goto LABEL_186;
                }
                uint64_t v9 = v99;
                if (!v74) {
                  goto LABEL_187;
                }
                int v61 = memcmp(v93, v74, v78);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_250511528(v26, v27);
              uint64_t v5 = v97;
              if (!v61) {
                goto LABEL_148;
              }
              goto LABEL_38;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v23) {
                goto LABEL_86;
              }
              if (v23 == 1)
              {
                if (v96 < (int)v18) {
                  goto LABEL_161;
                }
                sub_2504DBC4C(v18, v19);
                uint64_t v50 = sub_2505BD7D0();
                if (!v50) {
                  goto LABEL_180;
                }
                uint64_t v36 = v50;
                uint64_t v51 = sub_2505BD800();
                uint64_t v38 = (int)v18 - v51;
                if (__OFSUB__((int)v18, v51)) {
                  goto LABEL_166;
                }
LABEL_82:
                uint64_t v52 = sub_2505BD7F0();
                if (v52 >= v95) {
                  size_t v53 = (v18 >> 32) - (int)v18;
                }
                else {
                  size_t v53 = v52;
                }
                int v45 = memcmp(__s1, (const void *)(v36 + v38), v53);
                uint64_t v54 = v18;
                unint64_t v55 = v19;
                goto LABEL_144;
              }
              uint64_t v68 = *(void *)(v18 + 16);
              uint64_t v69 = *(void *)(v18 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = (char *)sub_2505BD7D0();
              if (v64)
              {
                uint64_t v70 = sub_2505BD800();
                if (__OFSUB__(v68, v70)) {
                  goto LABEL_171;
                }
                v64 += v68 - v70;
              }
              BOOL v34 = __OFSUB__(v69, v68);
              int64_t v66 = v69 - v68;
              if (v34) {
                goto LABEL_164;
              }
              uint64_t v67 = sub_2505BD7F0();
              if (!v64) {
                goto LABEL_184;
              }
LABEL_110:
              if (v67 >= v66) {
                size_t v71 = v66;
              }
              else {
                size_t v71 = v67;
              }
              int v72 = memcmp(__s1, v64, v71);
              swift_release();
              swift_release();
              sub_250511528(v26, v27);
              uint64_t v5 = v97;
              uint64_t v9 = v99;
              if (!v72) {
                goto LABEL_148;
              }
              goto LABEL_38;
            default:
              *(void *)__s1 = v26;
              *(_WORD *)&__s1[8] = v27;
              __s1[10] = BYTE2(v27);
              __s1[11] = BYTE3(v27);
              __s1[12] = BYTE4(v27);
              __s1[13] = BYTE5(v27);
              if (!v23)
              {
LABEL_86:
                uint64_t __s2 = v18;
                __int16 v102 = v19;
                char v103 = BYTE2(v19);
                char v104 = BYTE3(v19);
                char v105 = BYTE4(v19);
                char v106 = BYTE5(v19);
                int v56 = memcmp(__s1, &__s2, BYTE6(v19));
                goto LABEL_131;
              }
              if (v23 == 1)
              {
                if (v96 < (int)v18) {
                  goto LABEL_160;
                }
                sub_2504DBC4C(v18, v19);
                uint64_t v35 = sub_2505BD7D0();
                if (!v35)
                {
                  sub_2505BD7F0();
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  sub_2505BD7F0();
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  __break(1u);
LABEL_190:
                  __break(1u);
                  JUMPOUT(0x2504F2EECLL);
                }
                uint64_t v36 = v35;
                uint64_t v37 = sub_2505BD800();
                uint64_t v38 = (int)v18 - v37;
                if (__OFSUB__((int)v18, v37)) {
                  goto LABEL_165;
                }
                goto LABEL_82;
              }
              uint64_t v62 = *(void *)(v18 + 16);
              uint64_t v63 = *(void *)(v18 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = (char *)sub_2505BD7D0();
              if (v64)
              {
                uint64_t v65 = sub_2505BD800();
                if (__OFSUB__(v62, v65)) {
                  goto LABEL_170;
                }
                v64 += v62 - v65;
              }
              BOOL v34 = __OFSUB__(v63, v62);
              int64_t v66 = v63 - v62;
              if (v34) {
                goto LABEL_163;
              }
              uint64_t v67 = sub_2505BD7F0();
              if (!v64) {
                goto LABEL_183;
              }
              goto LABEL_110;
          }
          goto LABEL_38;
        }
LABEL_147:
        sub_250511528(v26, v27);
LABEL_148:
        swift_bridgeObjectRelease();
        sub_250511528(v18, v19);
        uint64_t v85 = 0;
LABEL_149:
        sub_250528314();
        return v85;
    }
  }
}

uint64_t sub_2504F2F1C(uint64_t a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7, v8);
  int64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v1;
  uint64_t result = sub_2505B2E40(a1, *v1);
  if (v2) {
    return result;
  }
  v37[1] = 0;
  uint64_t v38 = v1;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v41 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  uint64_t v39 = v10;
  uint64_t v40 = a1;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v43 = v17;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_25;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    unint64_t v22 = v38;
    if (v21 >= v42) {
      goto LABEL_29;
    }
    unint64_t v23 = *(void *)(v41 + 8 * v21);
    int64_t v24 = v17 + 1;
    if (!v23)
    {
      int64_t v24 = v17 + 2;
      if (v17 + 2 >= v42) {
        goto LABEL_29;
      }
      unint64_t v23 = *(void *)(v41 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v17 + 3;
        if (v17 + 3 >= v42) {
          goto LABEL_29;
        }
        unint64_t v23 = *(void *)(v41 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v17 + 4;
          if (v17 + 4 >= v42) {
            goto LABEL_29;
          }
          unint64_t v23 = *(void *)(v41 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v16 = (v23 - 1) & v23;
    int64_t v43 = v24;
    unint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_25:
    uint64_t v26 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v20);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    sub_2504DBC4C(*v26, v28);
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_250513064(v27, v28);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if (v31)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_2505B7008();
        uint64_t v11 = v44;
      }
      sub_250511528(*(void *)(*(void *)(v11 + 48) + 16 * v29), *(void *)(*(void *)(v11 + 48) + 16 * v29 + 8));
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v34 = type metadata accessor for GroupMembership.MemberProperties(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = (uint64_t)v39;
      sub_25051C8F4(v33 + *(void *)(v35 + 72) * v29, (uint64_t)v39, type metadata accessor for GroupMembership.MemberProperties);
      sub_2505B63C4(v29, v11);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
      int64_t v10 = (char *)v36;
      a1 = v40;
    }
    else
    {
      uint64_t v18 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
    }
    sub_2504DAF60((uint64_t)v10, &qword_269AB5A80);
    uint64_t result = sub_250511528(v27, v28);
    int64_t v17 = v43;
  }
  uint64_t v25 = v17 + 5;
  if (v17 + 5 >= v42)
  {
LABEL_29:
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v22 = v11;
    return result;
  }
  unint64_t v23 = *(void *)(v41 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v17 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v42) {
      goto LABEL_29;
    }
    unint64_t v23 = *(void *)(v41 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_24;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_2504F32C8(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v6 - 8, v7, v8, v9, v10);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v72 = *(void *)(v70 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v70, v13, v14, v15, v16);
  uint64_t v77 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v17, v19, v20, v21, v22);
  uint64_t v69 = (char *)&v64 - v24;
  MEMORY[0x270FA5388](v23, v25, v26, v27, v28);
  uint64_t v76 = (uint64_t)&v64 - v29;
  int64_t v30 = *(void *)(a1 + 16);
  size_t v78 = (void *)MEMORY[0x263F8EE78];
  sub_250511F14(0, v30, 0);
  uint64_t v31 = (uint64_t)v78;
  if (v30)
  {
    uint64_t v75 = v2;
    uint64_t v71 = isUniquelyReferenced_nonNull_native;
    int64_t v66 = v1;
    swift_bridgeObjectRetain();
    uint64_t v65 = a1;
    uint64_t v32 = (unint64_t *)(a1 + 40);
    int64_t v33 = v30;
    do
    {
      uint64_t v35 = *(v32 - 1);
      unint64_t v34 = *v32;
      sub_2504DBC4C(v35, *v32);
      size_t v78 = (void *)v31;
      unint64_t v37 = *(void *)(v31 + 16);
      unint64_t v36 = *(void *)(v31 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_250511F14(v36 > 1, v37 + 1, 1);
        uint64_t v31 = (uint64_t)v78;
      }
      v32 += 3;
      *(void *)(v31 + 16) = v37 + 1;
      uint64_t v38 = v31 + 16 * v37;
      *(void *)(v38 + 32) = v35;
      *(void *)(v38 + 40) = v34;
      --v30;
    }
    while (v30);
    a1 = v65;
    swift_bridgeObjectRelease();
    uint64_t v4 = v66;
    uint64_t isUniquelyReferenced_nonNull_native = v71;
    int64_t v30 = v33;
    uint64_t v3 = v75;
  }
  uint64_t v39 = *v4;
  swift_bridgeObjectRetain();
  sub_2505B2AE4(v31, (uint64_t)v39);
  if (v3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  if (!v30)
  {
    swift_bridgeObjectRetain();
LABEL_31:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v4 = v39;
    return swift_bridgeObjectRelease();
  }
  uint64_t v64 = 0;
  uint64_t v68 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
  int64_t v66 = v4;
  uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v65 = a1;
  uint64_t v40 = (unsigned __int8 *)(a1 + 48);
  uint64_t v41 = v70;
  uint64_t v71 = isUniquelyReferenced_nonNull_native;
  uint64_t v42 = v76;
  while (1)
  {
    uint64_t v44 = *((void *)v40 - 2);
    unint64_t v43 = *((void *)v40 - 1);
    if (!v39[2]) {
      break;
    }
    LODWORD(v75) = *v40;
    sub_2504DBC4C(v44, v43);
    sub_2504DBC4C(v44, v43);
    unint64_t v45 = sub_250513064(v44, v43);
    if (v46)
    {
      sub_25051B91C(v39[7] + *(void *)(v72 + 72) * v45, isUniquelyReferenced_nonNull_native, type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v47 = 0;
    }
    else
    {
      uint64_t v47 = 1;
    }
    uint64_t v73 = v40;
    int64_t v74 = v30;
    (*v68)(isUniquelyReferenced_nonNull_native, v47, 1, v41);
    sub_250511528(v44, v43);
    if ((*v67)(isUniquelyReferenced_nonNull_native, 1, v41) == 1) {
      goto LABEL_36;
    }
    sub_25051C8F4(isUniquelyReferenced_nonNull_native, v42, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v48 = *(void *)(v42 + 8);
    unint64_t v49 = *(void *)(v42 + 16);
    uint64_t v50 = (uint64_t)v69;
    sub_2504DAEFC(v42 + *(int *)(v41 + 24), (uint64_t)&v69[*(int *)(v41 + 24)], &qword_269AB5E80);
    sub_2504DAEFC(v42 + *(int *)(v41 + 28), v50 + *(int *)(v41 + 28), &qword_269AB5ED0);
    *(unsigned char *)uint64_t v50 = v75;
    *(void *)(v50 + 8) = v48;
    *(void *)(v50 + 16) = v49;
    sub_25051C8F4(v50, v77, type metadata accessor for GroupMembership.MemberProperties);
    sub_2504DBC4C(v44, v43);
    sub_25051B908(v48, v49);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    size_t v78 = v39;
    unint64_t v52 = sub_250513064(v44, v43);
    uint64_t v53 = v39[2];
    BOOL v54 = (v51 & 1) == 0;
    uint64_t v55 = v53 + v54;
    if (__OFADD__(v53, v54))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      break;
    }
    char v56 = v51;
    if (v39[3] >= v55)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v39 = v78;
        if (v51) {
          goto LABEL_11;
        }
      }
      else
      {
        sub_2505B7008();
        uint64_t v39 = v78;
        if (v56) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      sub_2505B4EE4(v55, isUniquelyReferenced_nonNull_native);
      unint64_t v57 = sub_250513064(v44, v43);
      if ((v56 & 1) != (v58 & 1)) {
        goto LABEL_37;
      }
      unint64_t v52 = v57;
      uint64_t v39 = v78;
      if (v56)
      {
LABEL_11:
        sub_2505284B0(v77, v39[7] + *(void *)(v72 + 72) * v52, type metadata accessor for GroupMembership.MemberProperties);
        goto LABEL_12;
      }
    }
    v39[(v52 >> 6) + 8] |= 1 << v52;
    uint64_t v59 = (uint64_t *)(v39[6] + 16 * v52);
    *uint64_t v59 = v44;
    v59[1] = v43;
    sub_25051C8F4(v77, v39[7] + *(void *)(v72 + 72) * v52, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v60 = v39[2];
    BOOL v61 = __OFADD__(v60, 1);
    uint64_t v62 = v60 + 1;
    if (v61) {
      goto LABEL_34;
    }
    v39[2] = v62;
    sub_2504DBC4C(v44, v43);
LABEL_12:
    uint64_t v40 = v73 + 24;
    swift_bridgeObjectRelease();
    sub_250511528(v44, v43);
    sub_250511528(v44, v43);
    sub_25051AF3C(v76, type metadata accessor for GroupMembership.MemberProperties);
    int64_t v30 = v74 - 1;
    uint64_t v41 = v70;
    uint64_t isUniquelyReferenced_nonNull_native = v71;
    if (v74 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = v66;
      goto LABEL_31;
    }
  }
  (*v68)(isUniquelyReferenced_nonNull_native, 1, 1, v41);
  sub_2504DBC4C(v44, v43);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = sub_2505BE7E0();
  __break(1u);
  return result;
}

uint64_t sub_2504F38E8(uint64_t a1)
{
  uint64_t v117 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v113 = *(void *)(v117 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v117, v3, v4, v5, v6);
  uint64_t v116 = (uint64_t)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7, v9, v10, v11, v12);
  uint64_t v115 = (char *)&v105 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  MEMORY[0x270FA5388](v14 - 8, v15, v16, v17, v18);
  uint64_t v110 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v20 - 8, v21, v22, v23, v24);
  uint64_t v109 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  uint64_t v31 = MEMORY[0x270FA5388](v26 - 8, v27, v28, v29, v30);
  uint64_t v108 = (uint64_t *)((char *)&v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v31, v33, v34, v35, v36);
  uint64_t v119 = (uint64_t)&v105 - v37;
  uint64_t v114 = type metadata accessor for UserAndAllInfo(0);
  uint64_t v38 = *(void *)(v114 - 8);
  uint64_t v43 = MEMORY[0x270FA5388](v114, v39, v40, v41, v42);
  uint64_t v118 = (uint64_t)&v105 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43, v45, v46, v47, v48);
  uint64_t v50 = (uint64_t *)((char *)&v105 - v49);
  int64_t v51 = *(void *)(a1 + 16);
  v123[0] = MEMORY[0x263F8EE78];
  sub_250511F14(0, v51, 0);
  uint64_t v107 = a1;
  int64_t v124 = v51;
  uint64_t v121 = v38;
  uint64_t v122 = v1;
  if (v51)
  {
    uint64_t v52 = a1 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    uint64_t v53 = *(void *)(v38 + 72);
    swift_bridgeObjectRetain();
    int64_t v54 = v51;
    do
    {
      sub_25051B91C(v52, (uint64_t)v50, type metadata accessor for UserAndAllInfo);
      uint64_t v55 = *v50;
      unint64_t v56 = v50[1];
      sub_2504DBC4C(*v50, v56);
      sub_25051AF3C((uint64_t)v50, type metadata accessor for UserAndAllInfo);
      uint64_t v57 = v123[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_250511F14(0, *(void *)(v57 + 16) + 1, 1);
        uint64_t v57 = v123[0];
      }
      unint64_t v59 = *(void *)(v57 + 16);
      unint64_t v58 = *(void *)(v57 + 24);
      if (v59 >= v58 >> 1)
      {
        sub_250511F14(v58 > 1, v59 + 1, 1);
        uint64_t v57 = v123[0];
      }
      *(void *)(v57 + 16) = v59 + 1;
      uint64_t v60 = v57 + 16 * v59;
      *(void *)(v60 + 32) = v55;
      *(void *)(v60 + 40) = v56;
      v52 += v53;
      --v54;
    }
    while (v54);
  }
  else
  {
    uint64_t v57 = v123[0];
    swift_bridgeObjectRetain();
  }
  uint64_t v61 = v107;
  swift_bridgeObjectRelease();
  uint64_t v62 = (uint64_t)v106;
  uint64_t v63 = *v106;
  swift_bridgeObjectRetain();
  uint64_t v64 = v122;
  sub_2505B25D8(v57, v63);
  uint64_t v65 = v64;
  if (v64)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  int64_t v66 = (void *)sub_2504E1CB8(MEMORY[0x263F8EE78], &qword_269AB5FC8, &qword_269AB5FE8, type metadata accessor for GroupMembership.MemberProperties, type metadata accessor for GroupMembership.MemberProperties);
  int64_t v67 = v124;
  if (v124)
  {
    uint64_t v68 = v61 + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
    uint64_t v111 = *(void *)(v121 + 72);
    uint64_t v112 = 0;
    swift_bridgeObjectRetain();
    uint64_t v62 = v118;
    uint64_t v69 = v119;
    while (1)
    {
      uint64_t v121 = v68;
      uint64_t v122 = v66;
      int64_t v124 = v67;
      sub_25051B91C(v68, v62, type metadata accessor for UserAndAllInfo);
      uint64_t v70 = type metadata accessor for UserKeyingInfo(0);
      uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56);
      v71(v69, 1, 1, v70);
      unint64_t v72 = *(void *)(v62 + 48);
      if (v72 >> 60 != 15)
      {
        uint64_t v73 = *(void *)(v62 + 40);
        unint64_t v75 = *(void *)(v62 + 8);
        v123[0] = *(void *)v62;
        uint64_t v74 = v123[0];
        v123[1] = v75;
        uint64_t v76 = sub_2505BE000();
        uint64_t v77 = (uint64_t)v109;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v109, 1, 1, v76);
        uint64_t v78 = sub_2505BDF90();
        uint64_t v79 = (uint64_t)v110;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v110, 1, 1, v78);
        sub_25051B908(v73, v72);
        sub_2504DBC4C(v74, v75);
        uint64_t v80 = v108;
        uint64_t v81 = v112;
        sub_2505625AC(v123, v73, v72, v77, v79, v108);
        if (v81)
        {
          sub_2504DAF60(v119, &qword_269AB5E80);
          sub_25051AF3C(v118, type metadata accessor for UserAndAllInfo);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v112 = 0;
        uint64_t v69 = v119;
        sub_2504DAF60(v119, &qword_269AB5E80);
        v71((uint64_t)v80, 0, 1, v70);
        sub_2505283F0((uint64_t)v80, v69, &qword_269AB5E80);
        uint64_t v62 = v118;
      }
      unint64_t v82 = *(void *)(v62 + 8);
      uint64_t v120 = *(void *)v62;
      char v83 = *(unsigned char *)(v62 + 16);
      uint64_t v84 = *(void *)(v62 + 24);
      unint64_t v85 = *(void *)(v62 + 32);
      uint64_t v86 = v117;
      uint64_t v87 = (uint64_t)v115;
      sub_2504DAEFC(v69, (uint64_t)&v115[*(int *)(v117 + 24)], &qword_269AB5E80);
      sub_2504DAEFC(v62 + *(int *)(v114 + 32), v87 + *(int *)(v86 + 28), &qword_269AB5ED0);
      *(unsigned char *)uint64_t v87 = v83;
      uint64_t v88 = v120;
      *(void *)(v87 + 8) = v84;
      *(void *)(v87 + 16) = v85;
      uint64_t v89 = v116;
      sub_25051C8F4(v87, v116, type metadata accessor for GroupMembership.MemberProperties);
      sub_2504DBC4C(v88, v82);
      sub_25051B908(v84, v85);
      uint64_t v90 = (uint64_t)v122;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v123[0] = v90;
      unint64_t v93 = sub_250513064(v88, v82);
      uint64_t v94 = *(void *)(v90 + 16);
      BOOL v95 = (v92 & 1) == 0;
      uint64_t v96 = v94 + v95;
      if (__OFADD__(v94, v95)) {
        break;
      }
      uint64_t v62 = v92;
      if (*(void *)(v90 + 24) >= v96)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_2505B7008();
        }
      }
      else
      {
        sub_2505B4EE4(v96, isUniquelyReferenced_nonNull_native);
        unint64_t v97 = sub_250513064(v88, v82);
        if ((v62 & 1) != (v98 & 1)) {
          goto LABEL_35;
        }
        unint64_t v93 = v97;
      }
      uint64_t v69 = v119;
      int64_t v66 = (void *)v123[0];
      if (v62)
      {
        sub_2505284B0(v89, *(void *)(v123[0] + 56) + *(void *)(v113 + 72) * v93, type metadata accessor for GroupMembership.MemberProperties);
      }
      else
      {
        *(void *)(v123[0] + 8 * (v93 >> 6) + 64) |= 1 << v93;
        uint64_t v99 = (uint64_t *)(v66[6] + 16 * v93);
        *uint64_t v99 = v88;
        v99[1] = v82;
        sub_25051C8F4(v89, v66[7] + *(void *)(v113 + 72) * v93, type metadata accessor for GroupMembership.MemberProperties);
        uint64_t v100 = v66[2];
        BOOL v101 = __OFADD__(v100, 1);
        uint64_t v102 = v100 + 1;
        if (v101) {
          goto LABEL_34;
        }
        v66[2] = v102;
        sub_2504DBC4C(v88, v82);
      }
      swift_bridgeObjectRelease();
      sub_250511528(v88, v82);
      sub_2504DAF60(v69, &qword_269AB5E80);
      uint64_t v62 = v118;
      sub_25051AF3C(v118, type metadata accessor for UserAndAllInfo);
      uint64_t v68 = v121 + v111;
      int64_t v67 = v124 - 1;
      if (v124 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v62 = (uint64_t)v106;
        uint64_t v65 = v112;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    sub_2505BE7E0();
    __break(1u);
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRetain();
    char v103 = swift_isUniquelyReferenced_nonNull_native();
    v123[0] = *(void *)v62;
    *(void *)uint64_t v62 = 0x8000000000000000;
    sub_2505B7938((uint64_t)v66, (uint64_t)sub_2505B78A8, 0, v103, (uint64_t)v123);
    if (!v65)
    {
      *(void *)uint64_t v62 = v123[0];
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  *(void *)uint64_t v62 = v123[0];
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_2504F4228@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v71[1] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5ED0);
  MEMORY[0x270FA5388](v3 - 8, v4, v5, v6, v7);
  uint64_t v78 = (uint64_t)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2505BE0B0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11, v12, v13, v14);
  uint64_t v16 = (char *)v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E88);
  uint64_t v22 = MEMORY[0x270FA5388](v17 - 8, v18, v19, v20, v21);
  uint64_t v24 = (void *)((char *)v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v22, v25, v26, v27, v28);
  uint64_t v30 = (char *)v71 - v29;
  uint64_t v31 = *a1;
  uint64_t v81 = (void *)MEMORY[0x263F8EE78];
  uint64_t v32 = *(void *)(v31 + 64);
  uint64_t v72 = v31 + 64;
  uint64_t v33 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & v32;
  uint64_t v76 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  uint64_t v77 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v74 = v31;
  unint64_t v75 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  int64_t v73 = (unint64_t)(v33 + 63) >> 6;
  v71[0] = v73 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v79 = 0;
  uint64_t v80 = v9;
  if (!v35) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v37 = __clz(__rbit64(v35));
  v35 &= v35 - 1;
  unint64_t v38 = v37 | (v79 << 6);
LABEL_5:
  uint64_t v39 = *(void *)(v74 + 56);
  uint64_t v40 = (uint64_t *)(*(void *)(v74 + 48) + 16 * v38);
  uint64_t v41 = *v40;
  unint64_t v42 = v40[1];
  *uint64_t v24 = *v40;
  v24[1] = v42;
  uint64_t v43 = v39
      + *(void *)(*(void *)(type metadata accessor for GroupMembership.MemberProperties(0) - 8) + 72) * v38;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  sub_25051B91C(v43, (uint64_t)v24 + *(int *)(v44 + 48), type metadata accessor for GroupMembership.MemberProperties);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v24, 0, 1, v44);
  sub_2504DBC4C(v41, v42);
  uint64_t v9 = v80;
  while (1)
  {
    sub_2505283F0((uint64_t)v24, (uint64_t)v30, &qword_269AB5E88);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v30, 1, v49) == 1)
    {
      swift_release();
      uint64_t v60 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
      MEMORY[0x270FA5388](v60, v61, v62, v63, v64);
      v71[-2] = &v81;
      sub_250528338(&qword_269AB5FA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
      sub_2505BDB80();
      return swift_bridgeObjectRelease();
    }
    sub_250511528(*(void *)v30, *((void *)v30 + 1));
    uint64_t v50 = (uint64_t)&v30[*(int *)(v49 + 48)];
    uint64_t v51 = type metadata accessor for GroupMembership.MemberProperties(0);
    uint64_t v52 = v78;
    sub_2504DAEFC(v50 + *(int *)(v51 + 28), v78, &qword_269AB5ED0);
    sub_25051AF3C(v50, type metadata accessor for GroupMembership.MemberProperties);
    if ((*v77)(v52, 1, v9) == 1)
    {
      sub_2504DAF60(v52, &qword_269AB5ED0);
      if (qword_269AB5418 != -1) {
        goto LABEL_39;
      }
      goto LABEL_34;
    }
    (*v76)(v16, v52, v9);
    uint64_t v53 = sub_2505BDF10();
    uint64_t v55 = v54;
    unint64_t v56 = v81;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v56 = sub_250570DC0(0, v56[2] + 1, 1, v56);
    }
    unint64_t v58 = v56[2];
    unint64_t v57 = v56[3];
    if (v58 >= v57 >> 1) {
      unint64_t v56 = sub_250570DC0((void *)(v57 > 1), v58 + 1, 1, v56);
    }
    v56[2] = v58 + 1;
    unint64_t v59 = &v56[2 * v58];
    v59[4] = v53;
    v59[5] = v55;
    uint64_t v81 = v56;
    uint64_t v9 = v80;
    uint64_t result = (*v75)(v16, v80);
    if (v35) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v45 = v79 + 1;
    if (__OFADD__(v79, 1)) {
      break;
    }
    if (v45 < v73)
    {
      unint64_t v46 = *(void *)(v72 + 8 * v45);
      if (v46) {
        goto LABEL_9;
      }
      int64_t v47 = v79 + 2;
      ++v79;
      if (v45 + 1 < v73)
      {
        unint64_t v46 = *(void *)(v72 + 8 * v47);
        if (v46) {
          goto LABEL_12;
        }
        int64_t v79 = v45 + 1;
        if (v45 + 2 < v73)
        {
          unint64_t v46 = *(void *)(v72 + 8 * (v45 + 2));
          if (v46)
          {
            v45 += 2;
            goto LABEL_9;
          }
          int64_t v47 = v45 + 3;
          int64_t v79 = v45 + 2;
          if (v45 + 3 < v73)
          {
            unint64_t v46 = *(void *)(v72 + 8 * v47);
            if (!v46)
            {
              while (1)
              {
                int64_t v45 = v47 + 1;
                if (__OFADD__(v47, 1)) {
                  break;
                }
                if (v45 >= v73)
                {
                  int64_t v79 = v71[0];
                  goto LABEL_23;
                }
                unint64_t v46 = *(void *)(v72 + 8 * v45);
                ++v47;
                if (v46) {
                  goto LABEL_9;
                }
              }
              __break(1u);
              return result;
            }
LABEL_12:
            int64_t v45 = v47;
LABEL_9:
            unint64_t v35 = (v46 - 1) & v46;
            unint64_t v38 = __clz(__rbit64(v46)) + (v45 << 6);
            int64_t v79 = v45;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v24, 1, 1, v48);
    unint64_t v35 = 0;
  }
  __break(1u);
LABEL_39:
  swift_once();
LABEL_34:
  uint64_t v65 = sub_2505BDC40();
  __swift_project_value_buffer(v65, (uint64_t)qword_269AC3188);
  os_log_type_t v66 = sub_2505BE3D0();
  int64_t v67 = sub_2505BDC20();
  os_log_type_t v68 = v66;
  if (os_log_type_enabled(v67, v66))
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v69 = 0;
    _os_log_impl(&dword_2504D2000, v67, v68, "member being added to group missing key info", v69, 2u);
    MEMORY[0x25337FF10](v69, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
  swift_allocError();
  *(_WORD *)uint64_t v70 = 320;
  *(_OWORD *)(v70 + 8) = xmmword_2505C0080;
  *(void *)(v70 + 24) = 0x80000002505C9C40;
  *(void *)(v70 + 32) = 0xD000000000000052;
  *(void *)(v70 + 40) = 0x80000002505C8CB0;
  swift_willThrow();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2504F49D0(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a8;
  uint64_t v37 = a7;
  uint64_t v14 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v41 = v14;
  MEMORY[0x270FA5388](v14, v15, v16, v17, v18);
  uint64_t v38 = (uint64_t)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v20 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36, v21, v22, v23, v24);
  uint64_t v26 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = a2;
  uint64_t v27 = *(void *)(a1 + 8);
  unint64_t v28 = *(void *)(a1 + 16);
  sub_2504DBC4C(a3, a4);
  sub_250511528(v27, v28);
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  uint64_t v29 = *(void *)(a1 + 24);
  unint64_t v30 = *(void *)(a1 + 32);
  sub_2504DBC4C(a5, a6);
  sub_250511528(v29, v30);
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  sub_25051B91C(v37, (uint64_t)v26, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  uint64_t v31 = type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v32 = a1 + *(int *)(v31 + 36);
  sub_2504DAF60(v32, &qword_269AB5CC0);
  sub_25051C8F4((uint64_t)v26, v32, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v32, 0, 1, v36);
  uint64_t v33 = v38;
  sub_25051B91C(v39, v38, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  uint64_t v34 = a1 + *(int *)(v31 + 32);
  sub_2504DAF60(v34, &qword_269AB5CB8);
  sub_25051C8F4(v33, v34, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v34, 0, 1, v41);
}

uint64_t sub_2504F4C6C(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  MEMORY[0x270FA5388](v3 - 8, v4, v5, v6, v7);
  uint64_t v75 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v72 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  MEMORY[0x270FA5388](v15 - 8, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22, v24, v25, v26, v27);
  uint64_t v29 = (uint64_t *)((char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v30 = v1[2];
  uint64_t v76 = v1[1];
  uint64_t v31 = v1[3];
  unint64_t v32 = v1[4];
  uint64_t v71 = type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v33 = *(int *)(v71 + 32);
  int64_t v73 = v1;
  sub_2504DAEFC((uint64_t)v1 + v33, (uint64_t)v21, &qword_269AB5CB8);
  int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
  unint64_t v68 = v32;
  if (v34 == 1)
  {
    *uint64_t v29 = MEMORY[0x263F8EE78];
    sub_2504DBC4C(v76, v30);
    sub_2504DBC4C(v31, v32);
    sub_2505BDA40();
    sub_2504DAF60((uint64_t)v21, &qword_269AB5CB8);
  }
  else
  {
    sub_25051C8F4((uint64_t)v21, (uint64_t)v29, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_2504DBC4C(v76, v30);
    sub_2504DBC4C(v31, v32);
  }
  uint64_t v79 = *v29;
  swift_bridgeObjectRetain_n();
  sub_250510B38(&v79);
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_250576544(v79);
  unint64_t v77 = v36;
  uint64_t v78 = v35;
  swift_release();
  sub_25051AF3C((uint64_t)v29, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  uint64_t v37 = v75;
  sub_2504DAEFC((uint64_t)v73 + *(int *)(v71 + 36), v75, &qword_269AB5CC0);
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v37, 1, v74);
  unint64_t v70 = v30;
  uint64_t v69 = (char *)v31;
  if (v38 == 1)
  {
    *(_OWORD *)uint64_t v14 = xmmword_2505BFEF0;
    *((_OWORD *)v14 + 1) = xmmword_2505BFEF0;
    *((_OWORD *)v14 + 2) = xmmword_2505BFEF0;
    *((_OWORD *)v14 + 3) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v37, &qword_269AB5CC0);
  }
  else
  {
    sub_25051C8F4(v37, (uint64_t)v14, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505C0090;
  uint64_t v40 = *((void *)v14 + 6);
  unint64_t v41 = *((void *)v14 + 7);
  *(void *)(inited + 32) = v40;
  uint64_t v42 = *((void *)v14 + 2);
  uint64_t v43 = *((void *)v14 + 3);
  *(void *)(inited + 40) = v41;
  *(void *)(inited + 48) = v42;
  uint64_t v44 = *((void *)v14 + 4);
  unint64_t v45 = *((void *)v14 + 5);
  *(void *)(inited + 56) = v43;
  *(void *)(inited + 64) = v44;
  uint64_t v46 = *(void *)v14;
  unint64_t v47 = *((void *)v14 + 1);
  *(void *)(inited + 72) = v45;
  *(void *)(inited + 80) = v46;
  *(void *)(inited + 88) = v47;
  sub_2504DBC4C(v40, v41);
  sub_2504DBC4C(v42, v43);
  sub_2504DBC4C(v44, v45);
  sub_2504DBC4C(v46, v47);
  uint64_t v48 = sub_250576544(inited);
  unint64_t v50 = v49;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_25051AF3C((uint64_t)v14, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  int64_t v52 = a1[2];
  int64_t v53 = v52 + 4;
  if (__OFADD__(v52, 4))
  {
    __break(1u);
LABEL_23:
    a1 = sub_250570DC0((void *)(v51 > 1), v53, 1, a1);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = v69;
  if (!isUniquelyReferenced_nonNull_native || v53 > a1[3] >> 1)
  {
    if (v52 <= v53) {
      int64_t v55 = v52 + 4;
    }
    else {
      int64_t v55 = v52;
    }
    a1 = sub_250570DC0(isUniquelyReferenced_nonNull_native, v55, 1, a1);
  }
  uint64_t v43 = v76;
  unint64_t v47 = v70;
  unint64_t v45 = v68;
  sub_2504DBC4C(v76, v70);
  int64_t v52 = a1[2];
  unint64_t v51 = a1[3];
  int64_t v53 = v52 + 1;
  if (v52 >= v51 >> 1) {
    goto LABEL_23;
  }
LABEL_15:
  a1[2] = v53;
  unint64_t v56 = &a1[2 * v52];
  v56[4] = v43;
  v56[5] = v47;
  sub_2504DBC4C((uint64_t)v14, v45);
  unint64_t v57 = a1[3];
  int64_t v58 = v52 + 2;
  if (v52 + 2 > (uint64_t)(v57 >> 1)) {
    a1 = sub_250570DC0((void *)(v57 > 1), v52 + 2, 1, a1);
  }
  a1[2] = v58;
  unint64_t v59 = &a1[2 * v53];
  v59[4] = v14;
  v59[5] = v45;
  sub_2504DBC4C(v78, v77);
  unint64_t v60 = a1[3];
  int64_t v61 = v52 + 3;
  if (v52 + 3 > (uint64_t)(v60 >> 1)) {
    a1 = sub_250570DC0((void *)(v60 > 1), v52 + 3, 1, a1);
  }
  a1[2] = v61;
  uint64_t v62 = &a1[2 * v58];
  unint64_t v63 = v77;
  v62[4] = v78;
  v62[5] = v63;
  sub_2504DBC4C(v48, v50);
  unint64_t v64 = a1[3];
  if (v52 + 4 > (uint64_t)(v64 >> 1)) {
    a1 = sub_250570DC0((void *)(v64 > 1), v52 + 4, 1, a1);
  }
  a1[2] = v52 + 4;
  uint64_t v65 = &a1[2 * v61];
  v65[4] = v48;
  v65[5] = v50;
  sub_250511528((uint64_t)v14, v45);
  sub_250511528(v78, v77);
  sub_250511528(v48, v50);
  sub_250511528(v43, v47);
  uint64_t v66 = sub_250576544((uint64_t)a1);
  swift_bridgeObjectRelease();
  return v66;
}

uint64_t sub_2504F52CC(void *a1)
{
  BOOL v95 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  MEMORY[0x270FA5388](v2 - 8, v3, v4, v5, v6);
  uint64_t v97 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94, v8, v9, v10, v11);
  uint64_t v96 = (_OWORD *)((char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  MEMORY[0x270FA5388](v13 - 8, v14, v15, v16, v17);
  uint64_t v92 = (uint64_t)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v90 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  MEMORY[0x270FA5388](v25 - 8, v26, v27, v28, v29);
  uint64_t v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32, v34, v35, v36, v37);
  uint64_t v39 = (uint64_t *)((char *)&v89 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = v1[1];
  unint64_t v40 = v1[2];
  uint64_t v42 = v1[3];
  unint64_t v43 = v1[4];
  uint64_t v100 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  BOOL v101 = v1;
  sub_2504DAEFC((uint64_t)v1 + v100[8], (uint64_t)v31, &qword_269AB5CB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    *uint64_t v39 = MEMORY[0x263F8EE78];
    sub_2504DBC4C(v41, v40);
    sub_2504DBC4C(v42, v43);
    sub_2505BDA40();
    sub_2504DAF60((uint64_t)v31, &qword_269AB5CB8);
  }
  else
  {
    sub_25051C8F4((uint64_t)v31, (uint64_t)v39, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_2504DBC4C(v41, v40);
    sub_2504DBC4C(v42, v43);
  }
  uint64_t v106 = *v39;
  swift_bridgeObjectRetain_n();
  sub_250510B38(&v106);
  uint64_t v44 = v95;
  swift_bridgeObjectRelease();
  uint64_t v45 = sub_250576544(v106);
  unint64_t v102 = v46;
  uint64_t v103 = v45;
  swift_release();
  sub_25051AF3C((uint64_t)v39, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  uint64_t v47 = v92;
  sub_2504DAEFC((uint64_t)v101 + v100[9], v92, &qword_269AB5CC0);
  int v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v47, 1, v91);
  uint64_t v99 = v41;
  unint64_t v98 = v40;
  unint64_t v104 = v43;
  uint64_t v105 = v42;
  if (v48 == 1)
  {
    *(_OWORD *)uint64_t v24 = xmmword_2505BFEF0;
    *((_OWORD *)v24 + 1) = xmmword_2505BFEF0;
    *((_OWORD *)v24 + 2) = xmmword_2505BFEF0;
    *((_OWORD *)v24 + 3) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v47, &qword_269AB5CC0);
  }
  else
  {
    sub_25051C8F4(v47, (uint64_t)v24, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505C0090;
  uint64_t v50 = *((void *)v24 + 6);
  unint64_t v51 = *((void *)v24 + 7);
  *(void *)(inited + 32) = v50;
  uint64_t v52 = *((void *)v24 + 2);
  unint64_t v53 = *((void *)v24 + 3);
  *(void *)(inited + 40) = v51;
  *(void *)(inited + 48) = v52;
  uint64_t v55 = *((void *)v24 + 4);
  unint64_t v54 = *((void *)v24 + 5);
  *(void *)(inited + 56) = v53;
  *(void *)(inited + 64) = v55;
  uint64_t v57 = *(void *)v24;
  unint64_t v56 = *((void *)v24 + 1);
  *(void *)(inited + 72) = v54;
  *(void *)(inited + 80) = v57;
  *(void *)(inited + 88) = v56;
  sub_2504DBC4C(v50, v51);
  sub_2504DBC4C(v52, v53);
  sub_2504DBC4C(v55, v54);
  sub_2504DBC4C(v57, v56);
  uint64_t v58 = sub_250576544(inited);
  unint64_t v60 = v59;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_25051AF3C((uint64_t)v24, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  uint64_t v61 = v97;
  sub_2504DAEFC((uint64_t)v101 + v100[10], v97, &qword_269AB5CC8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v61, 1, v94) == 1)
  {
    uint64_t v62 = v96;
    *uint64_t v96 = xmmword_2505BFEF0;
    v62[1] = xmmword_2505BFEF0;
    v62[2] = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v61, &qword_269AB5CC8);
  }
  else
  {
    uint64_t v62 = v96;
    sub_25051C8F4(v61, (uint64_t)v96, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  uint64_t v63 = v99;
  unint64_t v64 = v98;
  uint64_t v65 = *((void *)v62 + 2);
  unint64_t v66 = *((void *)v62 + 3);
  sub_2504DBC4C(v65, v66);
  sub_25051AF3C((uint64_t)v62, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  int64_t v68 = v44[2];
  int64_t v69 = v68 + 5;
  if (__OFADD__(v68, 5))
  {
    __break(1u);
LABEL_28:
    uint64_t v44 = sub_250570DC0((void *)(v67 > 1), v69, 1, v44);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v69 > v44[3] >> 1)
  {
    if (v68 <= v69) {
      int64_t v71 = v68 + 5;
    }
    else {
      int64_t v71 = v68;
    }
    uint64_t v44 = sub_250570DC0(isUniquelyReferenced_nonNull_native, v71, 1, v44);
  }
  sub_2504DBC4C(v63, v64);
  int64_t v68 = v44[2];
  unint64_t v67 = v44[3];
  int64_t v69 = v68 + 1;
  if (v68 >= v67 >> 1) {
    goto LABEL_28;
  }
LABEL_18:
  v44[2] = v69;
  uint64_t v72 = &v44[2 * v68];
  v72[4] = v63;
  v72[5] = v64;
  sub_2504DBC4C(v105, v104);
  unint64_t v73 = v44[3];
  int64_t v74 = v68 + 2;
  if (v68 + 2 > (uint64_t)(v73 >> 1)) {
    uint64_t v44 = sub_250570DC0((void *)(v73 > 1), v68 + 2, 1, v44);
  }
  v44[2] = v74;
  uint64_t v75 = &v44[2 * v69];
  uint64_t v76 = v103;
  unint64_t v77 = v104;
  v75[4] = v105;
  v75[5] = v77;
  sub_2504DBC4C(v76, v102);
  unint64_t v78 = v44[3];
  int64_t v79 = v68 + 3;
  if (v68 + 3 > (uint64_t)(v78 >> 1)) {
    uint64_t v44 = sub_250570DC0((void *)(v78 > 1), v68 + 3, 1, v44);
  }
  v44[2] = v79;
  uint64_t v80 = &v44[2 * v74];
  unint64_t v81 = v102;
  v80[4] = v103;
  v80[5] = v81;
  sub_2504DBC4C(v58, v60);
  unint64_t v82 = v44[3];
  int64_t v83 = v68 + 4;
  if (v68 + 4 > (uint64_t)(v82 >> 1)) {
    uint64_t v44 = sub_250570DC0((void *)(v82 > 1), v68 + 4, 1, v44);
  }
  v44[2] = v83;
  uint64_t v84 = &v44[2 * v79];
  v84[4] = v58;
  v84[5] = v60;
  sub_2504DBC4C(v65, v66);
  unint64_t v85 = v44[3];
  if (v68 + 5 > (uint64_t)(v85 >> 1)) {
    uint64_t v44 = sub_250570DC0((void *)(v85 > 1), v68 + 5, 1, v44);
  }
  v44[2] = v68 + 5;
  uint64_t v86 = &v44[2 * v83];
  v86[4] = v65;
  v86[5] = v66;
  sub_250511528(v105, v104);
  sub_250511528(v103, v102);
  sub_250511528(v58, v60);
  sub_250511528(v65, v66);
  sub_250511528(v63, v64);
  uint64_t v87 = sub_250576544((uint64_t)v44);
  swift_bridgeObjectRelease();
  return v87;
}

uint64_t sub_2504F5B34(void *a1)
{
  uint64_t v118 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  uint64_t v7 = MEMORY[0x270FA5388](v2 - 8, v3, v4, v5, v6);
  uint64_t v124 = (uint64_t)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7, v9, v10, v11, v12);
  uint64_t v120 = (uint64_t)&v115 - v13;
  uint64_t v122 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v121 = *(void *)(v122 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v122, v14, v15, v16, v17);
  uint64_t v123 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18, v20, v21, v22, v23);
  uint64_t v119 = (_OWORD *)((char *)&v115 - v24);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  MEMORY[0x270FA5388](v25 - 8, v26, v27, v28, v29);
  unint64_t v129 = (unint64_t)&v115 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v116 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117, v31, v32, v33, v34);
  uint64_t v36 = (char *)&v115 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  MEMORY[0x270FA5388](v37 - 8, v38, v39, v40, v41);
  unint64_t v43 = (char *)&v115 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v45 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44, v46, v47, v48, v49);
  unint64_t v51 = (uint64_t *)((char *)&v115 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = v1[1];
  unint64_t v52 = v1[2];
  uint64_t v55 = v1[3];
  unint64_t v54 = v1[4];
  uint64_t v127 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v128 = v1;
  sub_2504DAEFC((uint64_t)v1 + v127[8], (uint64_t)v43, &qword_269AB5CB8);
  int v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44);
  unint64_t v126 = v52;
  if (v56 == 1)
  {
    *unint64_t v51 = MEMORY[0x263F8EE78];
    sub_2504DBC4C(v53, v52);
    sub_2504DBC4C(v55, v54);
    sub_2505BDA40();
    sub_2504DAF60((uint64_t)v43, &qword_269AB5CB8);
  }
  else
  {
    sub_25051C8F4((uint64_t)v43, (uint64_t)v51, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_2504DBC4C(v53, v52);
    sub_2504DBC4C(v55, v54);
  }
  uint64_t v134 = *v51;
  swift_bridgeObjectRetain_n();
  sub_250510B38(&v134);
  uint64_t v57 = v118;
  swift_bridgeObjectRelease();
  uint64_t v58 = sub_250576544(v134);
  unint64_t v130 = v59;
  uint64_t v131 = v58;
  swift_release();
  sub_25051AF3C((uint64_t)v51, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  uint64_t v60 = v129;
  sub_2504DAEFC((uint64_t)v128 + v127[9], v129, &qword_269AB5CC0);
  int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v60, 1, v117);
  uint64_t v125 = v53;
  unint64_t v132 = v54;
  uint64_t v133 = v55;
  if (v61 == 1)
  {
    *(_OWORD *)uint64_t v36 = xmmword_2505BFEF0;
    *((_OWORD *)v36 + 1) = xmmword_2505BFEF0;
    *((_OWORD *)v36 + 2) = xmmword_2505BFEF0;
    *((_OWORD *)v36 + 3) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v60, &qword_269AB5CC0);
  }
  else
  {
    sub_25051C8F4(v60, (uint64_t)v36, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505C0090;
  uint64_t v63 = *((void *)v36 + 6);
  unint64_t v64 = *((void *)v36 + 7);
  *(void *)(inited + 32) = v63;
  uint64_t v65 = *((void *)v36 + 2);
  unint64_t v66 = *((void *)v36 + 3);
  *(void *)(inited + 40) = v64;
  *(void *)(inited + 48) = v65;
  uint64_t v68 = *((void *)v36 + 4);
  unint64_t v67 = *((void *)v36 + 5);
  *(void *)(inited + 56) = v66;
  *(void *)(inited + 64) = v68;
  uint64_t v70 = *(void *)v36;
  unint64_t v69 = *((void *)v36 + 1);
  *(void *)(inited + 72) = v67;
  *(void *)(inited + 80) = v70;
  *(void *)(inited + 88) = v69;
  sub_2504DBC4C(v63, v64);
  sub_2504DBC4C(v65, v66);
  sub_2504DBC4C(v68, v67);
  sub_2504DBC4C(v70, v69);
  uint64_t v71 = sub_250576544(inited);
  unint64_t v129 = v72;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_25051AF3C((uint64_t)v36, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  uint64_t v73 = (uint64_t)v128 + v127[10];
  uint64_t v74 = v120;
  sub_2504DAEFC(v73, v120, &qword_269AB5CC8);
  unint64_t v76 = v121 + 48;
  uint64_t v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  uint64_t v77 = v122;
  if (v75(v74, 1, v122) == 1)
  {
    unint64_t v78 = v119;
    *uint64_t v119 = xmmword_2505BFEF0;
    v78[1] = xmmword_2505BFEF0;
    v78[2] = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v74, &qword_269AB5CC8);
  }
  else
  {
    unint64_t v78 = v119;
    sub_25051C8F4(v74, (uint64_t)v119, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  uint64_t v79 = (uint64_t)v123;
  uint64_t v80 = *((void *)v78 + 2);
  unint64_t v81 = *((void *)v78 + 3);
  sub_2504DBC4C(v80, v81);
  sub_25051AF3C((uint64_t)v78, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  uint64_t v82 = v73;
  uint64_t v83 = v124;
  sub_2504DAEFC(v82, v124, &qword_269AB5CC8);
  unsigned int v84 = v75(v83, 1, v77);
  uint64_t v85 = v125;
  if (v84 == 1)
  {
    *(_OWORD *)uint64_t v79 = xmmword_2505BFEF0;
    *(_OWORD *)(v79 + 16) = xmmword_2505BFEF0;
    *(_OWORD *)(v79 + 32) = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v83, &qword_269AB5CC8);
  }
  else
  {
    sub_25051C8F4(v83, v79, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  uint64_t v86 = *(void *)v79;
  unint64_t v87 = *(void *)(v79 + 8);
  sub_2504DBC4C(*(void *)v79, v87);
  sub_25051AF3C(v79, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  int64_t v89 = v57[2];
  int64_t v90 = v89 + 6;
  if (__OFADD__(v89, 6))
  {
    __break(1u);
LABEL_33:
    uint64_t v57 = sub_250570DC0((void *)(v88 > 1), v89, 1, v57);
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v90 > v57[3] >> 1)
  {
    if (v89 <= v90) {
      int64_t v92 = v89 + 6;
    }
    else {
      int64_t v92 = v89;
    }
    uint64_t v57 = sub_250570DC0(isUniquelyReferenced_nonNull_native, v92, 1, v57);
  }
  int64_t v90 = v126;
  sub_2504DBC4C(v85, v126);
  unint64_t v76 = v57[2];
  unint64_t v88 = v57[3];
  int64_t v89 = v76 + 1;
  if (v76 >= v88 >> 1) {
    goto LABEL_33;
  }
LABEL_21:
  v57[2] = v89;
  uint64_t v93 = &v57[2 * v76];
  v93[4] = v85;
  v93[5] = v90;
  sub_2504DBC4C(v133, v132);
  unint64_t v94 = v57[3];
  unint64_t v95 = v76 + 2;
  if ((uint64_t)(v76 + 2) > (uint64_t)(v94 >> 1)) {
    uint64_t v57 = sub_250570DC0((void *)(v94 > 1), v76 + 2, 1, v57);
  }
  v57[2] = v95;
  uint64_t v96 = &v57[2 * v89];
  uint64_t v97 = v131;
  unint64_t v98 = v132;
  v96[4] = v133;
  v96[5] = v98;
  sub_2504DBC4C(v97, v130);
  unint64_t v99 = v57[3];
  unint64_t v100 = v76 + 3;
  if ((uint64_t)(v76 + 3) > (uint64_t)(v99 >> 1)) {
    uint64_t v57 = sub_250570DC0((void *)(v99 > 1), v76 + 3, 1, v57);
  }
  v57[2] = v100;
  BOOL v101 = &v57[2 * v95];
  unint64_t v102 = v129;
  unint64_t v103 = v130;
  v101[4] = v131;
  v101[5] = v103;
  sub_2504DBC4C(v71, v102);
  unint64_t v104 = v57[3];
  unint64_t v105 = v76 + 4;
  if ((uint64_t)(v76 + 4) > (uint64_t)(v104 >> 1)) {
    uint64_t v57 = sub_250570DC0((void *)(v104 > 1), v76 + 4, 1, v57);
  }
  v57[2] = v105;
  uint64_t v106 = &v57[2 * v100];
  unint64_t v107 = v129;
  v106[4] = v71;
  v106[5] = v107;
  sub_2504DBC4C(v80, v81);
  unint64_t v108 = v57[3];
  unint64_t v109 = v76 + 5;
  if ((uint64_t)(v76 + 5) > (uint64_t)(v108 >> 1)) {
    uint64_t v57 = sub_250570DC0((void *)(v108 > 1), v76 + 5, 1, v57);
  }
  v57[2] = v109;
  uint64_t v110 = &v57[2 * v105];
  v110[4] = v80;
  v110[5] = v81;
  sub_2504DBC4C(v86, v87);
  unint64_t v111 = v57[3];
  if ((uint64_t)(v76 + 6) > (uint64_t)(v111 >> 1)) {
    uint64_t v57 = sub_250570DC0((void *)(v111 > 1), v76 + 6, 1, v57);
  }
  v57[2] = v76 + 6;
  uint64_t v112 = &v57[2 * v109];
  v112[4] = v86;
  v112[5] = v87;
  sub_250511528(v133, v132);
  sub_250511528(v131, v130);
  sub_250511528(v71, v129);
  sub_250511528(v80, v81);
  sub_250511528(v86, v87);
  sub_250511528(v85, v126);
  uint64_t v113 = sub_250576544((uint64_t)v57);
  swift_bridgeObjectRelease();
  return v113;
}

uint64_t Group.ServerUpdateBlobs.groupBlob.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_2504DBC4C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t Group.ServerUpdateBlobs.newRSVPResponseBlobs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Group.ServerUpdateBlobs.memberSeedBlob.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_25051B908(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t Group.ServerUpdateBlobs.adminSeedBlob.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_25051B908(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t Group.ServerUpdateBlobs.creatorRSVP.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_25051B908(v1, *(void *)(v0 + 64));
  return v1;
}

uint64_t sub_2504F65DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unint64_t a7@<X6>, _OWORD *a8@<X8>)
{
  unint64_t v101 = a7;
  uint64_t v96 = a8;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v21 = (uint64_t *)MEMORY[0x270FA5388](v13, v18, v19, v16, v20);
  uint64_t v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *v21;
  uint64_t v25 = *(void (**)(char *))(v17 + 16);
  unint64_t v98 = v26;
  v25(v23);
  uint64_t v99 = a3;
  uint64_t v97 = a6;
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v23, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, a5);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
    goto LABEL_5;
  }
  uint64_t v27 = sub_2505BE380();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v23, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, a5);
  if (v27) {
    goto LABEL_4;
  }
  uint64_t v56 = sub_2505BE380();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a5);
  if (!v56)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v57 = sub_2505BDC40();
    __swift_project_value_buffer(v57, (uint64_t)qword_269AC3188);
    os_log_type_t v58 = sub_2505BE3B0();
    unint64_t v59 = sub_2505BDC20();
    os_log_type_t v60 = v58;
    if (os_log_type_enabled(v59, v58))
    {
      int v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v61 = 0;
      _os_log_impl(&dword_2504D2000, v59, v60, "group update is the identity function", v61, 2u);
      MEMORY[0x25337FF10](v61, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v35 = 322;
    long long v36 = xmmword_2505C00C0;
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v28 = v102;
  unint64_t v29 = v102[12];
  if (v29 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_2505BDC40();
    __swift_project_value_buffer(v30, (uint64_t)qword_269AC3188);
    os_log_type_t v31 = sub_2505BE3D0();
    uint64_t v32 = sub_2505BDC20();
    os_log_type_t v33 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_2504D2000, v32, v33, "must be an administrator to request membership update", v34, 2u);
      MEMORY[0x25337FF10](v34, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v35 = 378;
    long long v36 = xmmword_2505C00B0;
LABEL_11:
    *(_OWORD *)(v35 + 8) = v36;
    *(void *)(v35 + 24) = 0x80000002505C8E40;
    *(void *)(v35 + 32) = 0xD000000000000052;
    *(void *)(v35 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  uint64_t v38 = (void (*)(char *, uint64_t))v102[11];
  unint64_t v39 = v102[13];
  unint64_t v40 = v102[14];
  uint64_t v41 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  int v42 = *((unsigned __int8 *)v102 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
  if (v42 == 6 || v42 == 0)
  {
    uint64_t v95 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
    uint64_t v116 = v24;
    swift_beginAccess();
    uint64_t v103 = v28[7];
    sub_25051C95C((uint64_t)v38, v29, v39, v40);
    swift_bridgeObjectRetain();
    unint64_t v44 = v100;
    sub_2504EF624(&v106, (uint64_t *)v104, &v116, v98, v99, v38, (void (*)(char *, uint64_t))v29, v39, v40, (uint64_t)&v103, a4, a5, v97, v101);
    swift_bridgeObjectRelease();
    if (!v44)
    {
      unint64_t v101 = v39;
      int v62 = v107;
      uint64_t v99 = v108;
      unint64_t v98 = v109;
      uint64_t v97 = v110;
      unint64_t v94 = v111;
      uint64_t v93 = v112;
      unint64_t v92 = v113;
      uint64_t v86 = v114;
      unint64_t v85 = v115;
      long long v91 = v104[0];
      long long v90 = v104[1];
      long long v89 = v104[2];
      long long v88 = v104[3];
      uint64_t v87 = v105;
      v28[7] = v106;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *((_DWORD *)v28 + 16) = v62;
      unint64_t v100 = v40;
      uint64_t v64 = v28[11];
      unint64_t v63 = v28[12];
      uint64_t v65 = v28[13];
      unint64_t v66 = v28[14];
      uint64_t v67 = v99;
      unint64_t v68 = v98;
      v28[11] = v99;
      v28[12] = v68;
      unint64_t v69 = v97;
      unint64_t v70 = v94;
      v28[13] = v97;
      v28[14] = v70;
      sub_25051C95C(v67, v68, (uint64_t)v69, v70);
      sub_25051B884(v64, v63, v65, v66);
      uint64_t v71 = v28[9];
      unint64_t v72 = v28[10];
      uint64_t v73 = v93;
      unint64_t v74 = v92;
      v28[9] = v93;
      v28[10] = v74;
      sub_2504DBC4C(v73, v74);
      sub_250511528(v71, v72);
      uint64_t v75 = (void *)((char *)v28 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
      uint64_t v76 = *(void *)((char *)v28 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
      unint64_t v77 = *(void *)((char *)v28 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
      uint64_t v78 = v86;
      unint64_t v79 = v85;
      uint64_t *v75 = v86;
      v75[1] = v79;
      sub_25051B908(v78, v79);
      sub_25051B8D4(v76, v77);
      sub_25051B884((uint64_t)v38, v29, v101, v100);
      swift_bridgeObjectRelease();
      sub_25051B884(v99, v98, (uint64_t)v97, v94);
      sub_250511528(v93, v92);
      uint64_t result = sub_25051B8D4(v78, v79);
      *((unsigned char *)v28 + v95) = 1;
      uint64_t v80 = v96;
      long long v81 = v90;
      *uint64_t v96 = v91;
      v80[1] = v81;
      long long v82 = v88;
      v80[2] = v89;
      v80[3] = v82;
      *((void *)v80 + 8) = v87;
      return result;
    }
    uint64_t v45 = (uint64_t)v38;
    unint64_t v46 = v29;
    uint64_t v47 = v39;
  }
  else
  {
    uint64_t v99 = v102[11];
    sub_2504DBC4C((uint64_t)v38, v29);
    unint64_t v101 = v39;
    sub_25051B908(v39, v40);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v48 = sub_2505BDC40();
    __swift_project_value_buffer(v48, (uint64_t)qword_269AC3188);
    os_log_type_t v49 = sub_2505BE3D0();
    swift_retain_n();
    uint64_t v50 = sub_2505BDC20();
    os_log_type_t v51 = v49;
    if (os_log_type_enabled(v50, v49))
    {
      unint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v106 = v53;
      unint64_t v100 = v40;
      *(_DWORD *)unint64_t v52 = 136315138;
      unint64_t v54 = sub_2504E0D6C(*((unsigned char *)v28 + v41));
      *(void *)&v104[0] = sub_25051171C(v54, v55, &v106);
      unint64_t v40 = v100;
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_2504D2000, v50, v51, "improper state change in the group, current state is %s", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v53, -1, -1);
      MEMORY[0x25337FF10](v52, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v83 = 330;
    *(_OWORD *)(v83 + 8) = xmmword_2505C00A0;
    *(void *)(v83 + 24) = 0x80000002505C8E40;
    *(void *)(v83 + 32) = 0xD000000000000052;
    *(void *)(v83 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    uint64_t v45 = v99;
    unint64_t v46 = v29;
    uint64_t v47 = v101;
  }
  return sub_25051B884(v45, v46, v47, v40);
}

uint64_t *sub_2504F7050(char *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2505BE0B0();
  uint64_t v225 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v6, v7, v8, v9);
  uint64_t v223 = (char *)&v204 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2505BE000();
  uint64_t v224 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v12, v13, v14, v15);
  unint64_t v231 = (unint64_t)&v204 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = sub_2505BDF30();
  uint64_t v228 = *(void *)(v230 - 8);
  MEMORY[0x270FA5388](v230, v17, v18, v19, v20);
  uint64_t v226 = (char *)&v204 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = sub_2505BDF90();
  uint64_t v227 = *(void *)(v229 - 8);
  MEMORY[0x270FA5388](v229, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v204 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for MembershipVerifier(0);
  unint64_t v232 = *(ValueMetadata **)(v28 - 8);
  MEMORY[0x270FA5388](v28, v29, v30, v31, v32);
  uint64_t v34 = (char *)&v204 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A20);
  MEMORY[0x270FA5388](v35 - 8, v36, v37, v38, v39);
  uint64_t v41 = (char *)&v204 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v42 = *(void *)(v3 + 96);
  if (v42 >> 60 != 15 && *(unsigned char *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 1)
  {
    uint64_t v218 = v2;
    char v43 = *a1;
    uint64_t v44 = *(void *)(v3 + 88);
    uint64_t v46 = *(void *)(v3 + 104);
    unint64_t v45 = *(void *)(v3 + 112);
    if (v43)
    {
      uint64_t v47 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
      *(unsigned char *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 7;
      uint64_t v220 = v44;
      unint64_t v221 = v42;
      sub_2504DBC4C(v44, v42);
      sub_25051B908(v46, v45);
      unint64_t v48 = v45;
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v49 = sub_2505BDC40();
      __swift_project_value_buffer(v49, (uint64_t)qword_269AC3188);
      os_log_type_t v50 = sub_2505BE3D0();
      swift_retain_n();
      os_log_type_t v51 = sub_2505BDC20();
      if (os_log_type_enabled(v51, v50))
      {
        unint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        unint64_t v222 = v48;
        uint64_t v54 = v53;
        *(void *)&long long v233 = v53;
        *(_DWORD *)unint64_t v52 = 136315138;
        unint64_t v55 = sub_2504E0D6C(*(unsigned char *)(v3 + v47));
        uint64_t v244 = sub_25051171C(v55, v56, (uint64_t *)&v233);
        sub_2505BE430();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2504D2000, v51, v50, "failed to update group, setting state to %s", v52, 0xCu);
        swift_arrayDestroy();
        uint64_t v57 = v54;
        unint64_t v48 = v222;
        MEMORY[0x25337FF10](v57, -1, -1);
        MEMORY[0x25337FF10](v52, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      uint64_t v65 = (uint64_t *)swift_allocError();
      *(_WORD *)uint64_t v80 = 368;
      *(_OWORD *)(v80 + 8) = xmmword_2505C0100;
      *(void *)(v80 + 24) = 0x80000002505C8E90;
      *(void *)(v80 + 32) = 0xD000000000000052;
      *(void *)(v80 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      uint64_t v77 = v220;
      unint64_t v78 = v221;
      uint64_t v79 = v46;
      goto LABEL_22;
    }
    uint64_t v213 = v11;
    uint64_t v219 = v46;
    unint64_t v222 = v45;
    unint64_t v67 = *(void *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
    if (v67 >> 60 == 15)
    {
      uint64_t v68 = v44;
      unint64_t v69 = v42;
      sub_2504DBC4C(v44, v42);
      uint64_t v70 = v219;
      unint64_t v48 = v222;
      sub_25051B908(v219, v222);
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v71 = sub_2505BDC40();
      __swift_project_value_buffer(v71, (uint64_t)qword_269AC3188);
      os_log_type_t v72 = sub_2505BE3D0();
      uint64_t v73 = sub_2505BDC20();
      os_log_type_t v74 = v72;
      if (os_log_type_enabled(v73, v72))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v75 = 0;
        _os_log_impl(&dword_2504D2000, v73, v74, "finalizing membership updates without group blob", v75, 2u);
        MEMORY[0x25337FF10](v75, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      uint64_t v65 = (uint64_t *)swift_allocError();
      *(_WORD *)uint64_t v76 = 328;
      *(_OWORD *)(v76 + 8) = xmmword_2505C00F0;
      *(void *)(v76 + 24) = 0x80000002505C8E90;
      *(void *)(v76 + 32) = 0xD000000000000052;
      *(void *)(v76 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      uint64_t v77 = v68;
      unint64_t v78 = v69;
      uint64_t v79 = v70;
      goto LABEL_22;
    }
    uint64_t v209 = v5;
    uint64_t v210 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
    uint64_t v215 = *(void *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    uint64_t v217 = *(void *)(v3 + 40);
    unint64_t v216 = *(void *)(v3 + 48);
    long long v82 = (unint64_t *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
    unint64_t v83 = v42;
    uint64_t v84 = v44;
    swift_beginAccess();
    uint64_t v211 = v82;
    unint64_t v85 = *v82;
    unint64_t v212 = *(void *)(v85 + 16);
    uint64_t v220 = v84;
    unint64_t v221 = v83;
    sub_25051C95C(v84, v83, v219, v222);
    unint64_t v214 = v67;
    sub_25051B908(v215, v67);
    if (v212)
    {
      uint64_t v86 = v217;
      unint64_t v87 = v216;
      sub_2504DBC4C(v217, v216);
      swift_bridgeObjectRetain();
      unint64_t v88 = sub_250513064(v86, v87);
      if ((v89 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_250511528(v86, v87);
        uint64_t v119 = v86;
        unint64_t v120 = v87;
        uint64_t v121 = v218;
        goto LABEL_62;
      }
      unint64_t v208 = v85;
      long long v90 = (unint64_t *)(*(void *)(v85 + 56) + 48 * v88);
      unint64_t v91 = v90[1];
      unint64_t v207 = *v90;
      unint64_t v206 = v91;
      unint64_t v212 = v90[2];
      uint64_t v92 = v212;
      uint64_t v93 = v90[4];
      unint64_t v205 = v90[3];
      unint64_t v94 = v90[5];
      sub_2504DBC4C(v207, v91);
      uint64_t v95 = v92;
      unint64_t v96 = v205;
      sub_2504DBC4C(v95, v205);
      sub_2504DBC4C(v93, v94);
      swift_bridgeObjectRelease();
      uint64_t v97 = v86;
      unint64_t v98 = v216;
      sub_250511528(v97, v216);
      sub_250511528(v207, v206);
      sub_250511528(v212, v96);
      sub_250511528(v93, v94);
      unint64_t v99 = *v211;
      if (*(void *)(*v211 + 16))
      {
        uint64_t v100 = v217;
        sub_2504DBC4C(v217, v98);
        swift_bridgeObjectRetain();
        unint64_t v101 = sub_250513064(v100, v98);
        if (v102)
        {
          uint64_t v103 = (uint64_t *)(*(void *)(v99 + 56) + 48 * v101);
          uint64_t v104 = *v103;
          unint64_t v208 = v103[1];
          uint64_t v105 = v103[2];
          unint64_t v106 = v103[3];
          uint64_t v108 = v103[4];
          unint64_t v107 = v103[5];
          unint64_t v212 = v108;
          unint64_t v205 = v107;
          uint64_t v204 = v104;
          sub_2504DBC4C(v104, v208);
          unint64_t v206 = v105;
          unint64_t v207 = v106;
          sub_2504DBC4C(v105, v106);
          unint64_t v109 = v205;
          sub_2504DBC4C(v212, v205);
          swift_bridgeObjectRelease();
          sub_250511528(v217, v98);
          if (v208 >> 60 != 15)
          {
            uint64_t v110 = v206;
            unint64_t v111 = v207;
            sub_2504DBC4C(v206, v207);
            sub_25051C9AC(v204, v208, v110, v111, v212, v109);
            uint64_t v112 = (uint64_t *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers);
            swift_beginAccess();
            uint64_t v113 = *v112;
            if (*(void *)(v113 + 16))
            {
              uint64_t v114 = v217;
              sub_2504DBC4C(v217, v98);
              swift_bridgeObjectRetain();
              uint64_t v115 = v114;
              unint64_t v116 = sub_250513064(v114, v98);
              uint64_t v117 = v232;
              if (v118)
              {
                sub_25051B91C(*(void *)(v113 + 56) + (unint64_t)v232[4].Description * v116, (uint64_t)v41, type metadata accessor for MembershipVerifier);
                ((void (*)(char *, void, uint64_t, uint64_t))v117[3].Description)(v41, 0, 1, v28);
              }
              else
              {
                ((void (*)(char *, uint64_t, uint64_t, uint64_t))v232[3].Description)(v41, 1, 1, v28);
              }
              swift_bridgeObjectRelease();
              sub_250511528(v115, v98);
            }
            else
            {
              uint64_t v117 = v232;
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v232[3].Description)(v41, 1, 1, v28);
            }
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v117[3].Kind)(v41, 1, v28))
            {
              sub_2504DAF60((uint64_t)v41, &qword_269AB5A20);
              if (qword_269AB5418 != -1) {
                swift_once();
              }
              uint64_t v130 = sub_2505BDC40();
              __swift_project_value_buffer(v130, (uint64_t)qword_269AC3188);
              os_log_type_t v131 = sub_2505BE3D0();
              unint64_t v132 = sub_2505BDC20();
              os_log_type_t v133 = v131;
              BOOL v134 = os_log_type_enabled(v132, v131);
              unint64_t v48 = v222;
              uint64_t v127 = v219;
              if (v134)
              {
                uint64_t v135 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v135 = 0;
                _os_log_impl(&dword_2504D2000, v132, v133, "missing originator membership verifier in group creation", v135, 2u);
                MEMORY[0x25337FF10](v135, -1, -1);
              }

              uint64_t v65 = &qword_269AB59E0;
              __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
              sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
              swift_allocError();
              *(_WORD *)uint64_t v136 = 327;
              *(_OWORD *)(v136 + 8) = xmmword_2505C00D0;
              *(void *)(v136 + 24) = 0x80000002505C8E90;
              *(void *)(v136 + 32) = 0xD000000000000052;
              *(void *)(v136 + 40) = 0x80000002505C8CB0;
              swift_willThrow();
              sub_250511528(v206, v207);
LABEL_39:
              sub_25051B8D4(v215, v214);
              uint64_t v77 = v220;
              unint64_t v78 = v221;
              uint64_t v79 = v127;
LABEL_22:
              sub_25051B884(v77, v78, v79, v48);
              return v65;
            }
            sub_25051B91C((uint64_t)v41, (uint64_t)v34, type metadata accessor for MembershipVerifier);
            sub_2504DAF60((uint64_t)v41, &qword_269AB5A20);
            uint64_t v137 = (uint64_t *)&v34[*(int *)(v28 + 24)];
            uint64_t v139 = *v137;
            unint64_t v138 = v137[1];
            sub_2504DBC4C(*v137, v138);
            sub_25051AF3C((uint64_t)v34, type metadata accessor for MembershipVerifier);
            unint64_t v140 = *(void *)(v3 + 24);
            uint64_t v242 = *(uint64_t **)(v3 + 16);
            uint64_t v65 = v242;
            unint64_t v243 = v140;
            uint64_t v141 = v217;
            uint64_t v240 = v217;
            unint64_t v241 = v98;
            uint64_t v235 = &type metadata for AdminSeed;
            unint64_t v208 = sub_25051CA18();
            uint64_t v236 = v208;
            uint64_t v142 = (void *)swift_allocObject();
            *(void *)&long long v233 = v142;
            uint64_t v143 = v220;
            unint64_t v144 = v221;
            v142[2] = v220;
            v142[3] = v144;
            uint64_t v145 = v219;
            unint64_t v146 = v222;
            v142[4] = v219;
            v142[5] = v146;
            sub_25051C95C(v143, v144, v145, v146);
            sub_2504DBC4C(v141, v98);
            uint64_t v147 = v206;
            sub_2504DBC4C(v206, v207);
            unint64_t v212 = v139;
            unint64_t v232 = (ValueMetadata *)v138;
            sub_2504DBC4C(v139, v138);
            sub_2504DBC4C((uint64_t)v65, v140);
            if (qword_269AB5620 != -1) {
              swift_once();
            }
            uint64_t v148 = v218;
            sub_2505603C4(&v233, 1, qword_269AC36F0, *(unint64_t *)algn_269AC36F8);
            if (v148)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
              sub_25051B8D4(v215, v214);
              sub_25051B884(v220, v221, v219, v222);
              uint64_t v149 = v212;
              unint64_t v150 = (unint64_t)v232;
              sub_250511528(v212, (unint64_t)v232);
              unint64_t v151 = v207;
              sub_250511528(v147, v207);
              sub_250511528(v149, v150);
              sub_250511528(v147, v151);
              sub_250511528(v217, v98);
              sub_250511528((uint64_t)v65, v140);
              return v65;
            }
            uint64_t v218 = 0;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
            uint64_t v152 = v226;
            sub_2505BDF50();
            uint64_t v153 = sub_2505BDF10();
            unint64_t v155 = v154;
            (*(void (**)(char *, uint64_t))(v228 + 8))(v152, v230);
            uint64_t v230 = sub_2504DBF8C(v153, v155);
            unint64_t v157 = v156;
            sub_250511528(v153, v155);
            (*(void (**)(char *, uint64_t))(v227 + 8))(v27, v229);
            uint64_t v235 = &type metadata for AdminSeed;
            uint64_t v236 = v208;
            uint64_t v158 = (void *)swift_allocObject();
            *(void *)&long long v233 = v158;
            uint64_t v159 = v220;
            unint64_t v160 = v221;
            v158[2] = v220;
            v158[3] = v160;
            uint64_t v161 = v219;
            unint64_t v162 = v222;
            v158[4] = v219;
            v158[5] = v162;
            sub_2504DBC4C(v159, v160);
            sub_25051B908(v161, v162);
            if (qword_269AB5628 != -1) {
              swift_once();
            }
            unint64_t v163 = v231;
            uint64_t v164 = v218;
            sub_25056041C(&v233, 1, qword_269AC3700, *(unint64_t *)algn_269AC3708);
            uint64_t v218 = v164;
            uint64_t v165 = v212;
            if (v164)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
              sub_25051B8D4(v215, v214);
              sub_25051B884(v220, v221, v161, v162);
              sub_250511528(v230, v157);
              unint64_t v166 = (unint64_t)v232;
              sub_250511528(v165, (unint64_t)v232);
              uint64_t v65 = (uint64_t *)v206;
              unint64_t v167 = v207;
              sub_250511528(v206, v207);
              sub_250511528(v165, v166);
              uint64_t v168 = (uint64_t)v65;
              unint64_t v169 = v167;
LABEL_59:
              sub_250511528(v168, v169);
              sub_250511528(v240, v241);
              sub_250511528((uint64_t)v242, v243);
              return v65;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
            uint64_t v170 = v223;
            sub_2505BDFA0();
            uint64_t v171 = sub_2505BDF10();
            unint64_t v172 = v157;
            unint64_t v174 = v173;
            (*(void (**)(char *, uint64_t))(v225 + 8))(v170, v209);
            uint64_t v229 = sub_2504DBF8C(v171, v174);
            unint64_t v176 = v175;
            uint64_t v177 = v171;
            uint64_t v65 = (uint64_t *)v207;
            sub_250511528(v177, v174);
            (*(void (**)(unint64_t, uint64_t))(v224 + 8))(v163, v213);
            uint64_t v178 = v206;
            *(void *)&long long v233 = v206;
            *((void *)&v233 + 1) = v65;
            uint64_t v234 = v165;
            uint64_t v179 = v165;
            unint64_t v180 = (unint64_t)v232;
            uint64_t v235 = v232;
            uint64_t v236 = v230;
            unint64_t v231 = v172;
            unint64_t v237 = v172;
            unint64_t v181 = v176;
            uint64_t v182 = v229;
            uint64_t v238 = v229;
            unint64_t v239 = v181;
            uint64_t v183 = v218;
            sub_25058A320((uint64_t *)&v242, &v240, (uint64_t *)&v233, 0);
            uint64_t v218 = v183;
            if (v183)
            {
              sub_25051B8D4(v215, v214);
              sub_25051B884(v220, v221, v161, v162);
              sub_250511528(v179, v180);
              sub_250511528(v178, (unint64_t)v65);
              sub_250511528(v178, (unint64_t)v65);
              sub_250511528(v179, v180);
              sub_250511528(v230, v231);
              uint64_t v168 = v182;
              unint64_t v169 = v181;
              goto LABEL_59;
            }
            sub_250511528(v179, v180);
            sub_250511528(v178, (unint64_t)v65);
            sub_250511528(v178, (unint64_t)v65);
            sub_250511528(v179, v180);
            sub_250511528(v230, v231);
            sub_250511528(v182, v181);
            sub_250511528(v240, v241);
            sub_250511528((uint64_t)v242, v243);
            goto LABEL_61;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_250511528(v100, v98);
        }
      }
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v122 = sub_2505BDC40();
      __swift_project_value_buffer(v122, (uint64_t)qword_269AC3188);
      os_log_type_t v123 = sub_2505BE3D0();
      uint64_t v124 = sub_2505BDC20();
      os_log_type_t v125 = v123;
      BOOL v126 = os_log_type_enabled(v124, v123);
      unint64_t v48 = v222;
      uint64_t v127 = v219;
      if (v126)
      {
        uint64_t v128 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v128 = 0;
        _os_log_impl(&dword_2504D2000, v124, v125, "missing originator invite in group creation", v128, 2u);
        MEMORY[0x25337FF10](v128, -1, -1);
      }

      uint64_t v65 = &qword_269AB59E0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v129 = 326;
      *(_OWORD *)(v129 + 8) = xmmword_2505C00E0;
      *(void *)(v129 + 24) = 0x80000002505C8E90;
      *(void *)(v129 + 32) = 0xD000000000000052;
      *(void *)(v129 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      goto LABEL_39;
    }
LABEL_61:
    uint64_t v121 = v218;
    unint64_t v120 = v216;
    uint64_t v119 = v217;
LABEL_62:
    uint64_t v65 = *(uint64_t **)(v3 + 24);
    *(void *)&long long v233 = *(void *)(v3 + 16);
    uint64_t v184 = v233;
    *((void *)&v233 + 1) = v65;
    uint64_t v240 = v119;
    unint64_t v241 = v120;
    swift_beginAccess();
    int v185 = *(_DWORD *)(v3 + 64);
    sub_2504DBC4C(v119, v120);
    sub_2504DBC4C(v184, (unint64_t)v65);
    int v186 = v185;
    uint64_t v187 = v215;
    unint64_t v188 = v214;
    uint64_t v189 = v121;
    sub_25059A1EC((uint64_t *)&v233, &v240, v186, v215, v214);
    unint64_t v190 = v222;
    uint64_t v191 = v219;
    if (v189)
    {
      sub_25051B8D4(v187, v188);
      sub_25051B884(v220, v221, v191, v190);
      sub_250511528(v217, v216);
      sub_250511528(v184, (unint64_t)v65);
    }
    else
    {
      uint64_t v192 = v217;
      unint64_t v193 = v216;
      sub_250511528(v217, v216);
      sub_250511528(v184, (unint64_t)v65);
      *(void *)&long long v233 = v184;
      *((void *)&v233 + 1) = v65;
      uint64_t v240 = v192;
      unint64_t v241 = v193;
      int v194 = *(_DWORD *)(v3 + 64);
      sub_2504DBC4C(v192, v193);
      sub_2504DBC4C(v184, (unint64_t)v65);
      sub_25059A3B4((uint64_t *)&v233, &v240, v220, v221, v191, v190, v194);
      uint64_t v195 = v217;
      unint64_t v196 = v216;
      sub_250511528(v217, v216);
      sub_250511528(v184, (unint64_t)v65);
      *(void *)&long long v233 = v184;
      *((void *)&v233 + 1) = v65;
      uint64_t v240 = v195;
      unint64_t v241 = v196;
      uint64_t v197 = *(void *)(v3 + 72);
      unint64_t v198 = *(void *)(v3 + 80);
      LODWORD(v192) = *(_DWORD *)(v3 + 64);
      sub_2504DBC4C(v195, v196);
      sub_2504DBC4C(v184, (unint64_t)v65);
      sub_2504DBC4C(v197, v198);
      sub_25059A594((uint64_t *)&v233, &v240, v197, v198, v192);
      sub_250511528(v197, v198);
      uint64_t v199 = v217;
      unint64_t v200 = v216;
      sub_250511528(v217, v216);
      sub_250511528(v184, (unint64_t)v65);
      *(unsigned char *)(v3 + v210) = 6;
      uint64_t v201 = v211;
      swift_beginAccess();
      sub_2504DBC4C(v199, v200);
      sub_2505B4244(v199, v200, &v233);
      sub_250511528(v199, v200);
      sub_25051C9AC(v233, *((unint64_t *)&v233 + 1), v234, (unint64_t)v235, v236, v237);
      swift_endAccess();
      uint64_t v202 = swift_bridgeObjectRetain();
      unint64_t v203 = sub_2504DDFA8(v202);
      swift_bridgeObjectRelease();
      *uint64_t v201 = sub_2504E1B08(MEMORY[0x263F8EE78]);
      swift_bridgeObjectRelease();
      uint64_t v65 = (uint64_t *)sub_2504F8B1C(v203);
      swift_bridgeObjectRelease();
      sub_25051B8D4(v215, v214);
      sub_25051B884(v220, v221, v219, v222);
    }
    return v65;
  }
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v58 = sub_2505BDC40();
  __swift_project_value_buffer(v58, (uint64_t)qword_269AC3188);
  os_log_type_t v59 = sub_2505BE3D0();
  swift_retain_n();
  os_log_type_t v60 = sub_2505BDC20();
  if (os_log_type_enabled(v60, v59))
  {
    int v61 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)int v61 = 136315138;
    *(void *)&long long v233 = v62;
    unint64_t v63 = sub_2504E0D6C(*(unsigned char *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state));
    uint64_t v244 = sub_25051171C(v63, v64, (uint64_t *)&v233);
    sub_2505BE430();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2504D2000, v60, v59, "improper state change in the group, current state is %s", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25337FF10](v62, -1, -1);
    MEMORY[0x25337FF10](v61, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v65 = &qword_269AB59E0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
  swift_allocError();
  *(_WORD *)uint64_t v66 = 330;
  *(_OWORD *)(v66 + 8) = xmmword_2505C0110;
  *(void *)(v66 + 24) = 0x80000002505C8E90;
  *(void *)(v66 + 32) = 0xD000000000000052;
  *(void *)(v66 + 40) = 0x80000002505C8CB0;
  swift_willThrow();
  return v65;
}

uint64_t sub_2504F8B1C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    sub_250511F90(0, v1, 0);
    uint64_t v2 = v15;
    uint64_t v4 = (unint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_2504DBC4C(*(v4 - 3), *(v4 - 2));
      sub_2504DBC4C(v5, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F78);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F80);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_250511F90(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v15;
      }
      unint64_t v8 = *(void *)(v2 + 16);
      unint64_t v7 = *(void *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_250511F90(v7 > 1, v8 + 1, 1);
        uint64_t v2 = v15;
      }
      v4 += 4;
      *(void *)(v2 + 16) = v8 + 1;
      uint64_t v9 = (void *)(v2 + 32 * v8);
      v9[4] = v11;
      v9[5] = v12;
      v9[6] = v13;
      v9[7] = v14;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_2504F8C70(_OWORD *a1, void *a2)
{
  *(void *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 88) = *a1;
  uint64_t v4 = a2[1];
  *(void *)(v3 + 104) = *a2;
  *(void *)(v3 + 112) = v4;
  return MEMORY[0x270FA2498](sub_2504F8CA0, 0, 0);
}

uint64_t sub_2504F8CA0()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v3 + 16);
  *(void *)(v0 + 48) = v2;
  *(void *)(v0 + 56) = v1;
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 88);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_2504F8D7C;
  return signRequestForGroupBlob(groupKitUserId:groupID:dsid:nonce:)((_OWORD *)(v0 + 16), (long long *)(v0 + 32), (void *)(v0 + 48), (_OWORD *)(v0 + 64));
}

uint64_t sub_2504F8D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(v6 + 128) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return MEMORY[0x270FA2498](sub_2504F8ECC, 0, 0);
  }
  else
  {
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v7(a1, a2);
  }
}

uint64_t sub_2504F8ECC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2504F8EE4(unsigned int a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v120 = a3;
  uint64_t v122 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A30);
  MEMORY[0x270FA5388](v6 - 8, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  uint64_t v118 = *(void *)(v119 - 8);
  MEMORY[0x270FA5388](v119, v13, v14, v15, v16);
  uint64_t v18 = (uint64_t *)((char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  MEMORY[0x270FA5388](v19 - 8, v20, v21, v22, v23);
  unint64_t v124 = (unint64_t)&v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_2505BDF90();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25, v27, v28, v29, v30);
  os_log_type_t v123 = (char *)&v110 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v32 - 8, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v110 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_2505BE000();
  uint64_t v125 = *(void *)(v39 - 8);
  uint64_t v126 = v39;
  MEMORY[0x270FA5388](v39, v40, v41, v42, v43);
  uint64_t v128 = (char *)&v110 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v45 - 8, v46, v47, v48, v49);
  os_log_type_t v51 = (char *)&v110 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v62 = sub_2505BDC40();
    __swift_project_value_buffer(v62, (uint64_t)qword_269AC3188);
    uint64_t v63 = sub_2505BE3D0();
    swift_retain_n();
    unint64_t v64 = sub_2505BDC20();
    os_log_type_t v65 = v63;
    if (os_log_type_enabled(v64, (os_log_type_t)v63))
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      v132[0] = v66;
      *(_DWORD *)uint64_t v63 = 136315138;
      unint64_t v67 = sub_2504E0D6C(*(unsigned char *)(v4 + v127));
      uint64_t v131 = sub_25051171C(v67, v68, v132);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_2504D2000, v64, v65, "improper group state, current state is %s", (uint8_t *)v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v66, -1, -1);
      MEMORY[0x25337FF10](v63, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v74 = 310;
    long long v75 = xmmword_2505C0120;
    goto LABEL_29;
  }
  swift_beginAccess();
  unsigned int v52 = *(_DWORD *)(v4 + 64);
  unsigned int v117 = a1;
  if (v52 >= a1)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v69 = sub_2505BDC40();
    __swift_project_value_buffer(v69, (uint64_t)qword_269AC3188);
    LOBYTE(v63) = sub_2505BE3D0();
    swift_retain();
    uint64_t v70 = sub_2505BDC20();
    uint64_t v63 = v63;
    BOOL v71 = os_log_type_enabled(v70, (os_log_type_t)v63);
    unsigned int v72 = v117;
    if (v71)
    {
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 67109376;
      LODWORD(v131) = v72;
      sub_2505BE430();
      *(_WORD *)(v73 + 8) = 1024;
      LODWORD(v131) = *(_DWORD *)(v4 + 64);
      sub_2505BE430();
      swift_release();
      _os_log_impl(&dword_2504D2000, v70, (os_log_type_t)v63, "cannot update to lower version of the group, checked %u against %u", (uint8_t *)v73, 0xEu);
      MEMORY[0x25337FF10](v73, -1, -1);
    }
    else
    {
      swift_release();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v74 = 374;
    long long v75 = xmmword_2505C0130;
    goto LABEL_29;
  }
  uint64_t v112 = v12;
  uint64_t v54 = *(void *)(v4 + 40);
  unint64_t v53 = *(void *)(v4 + 48);
  swift_beginAccess();
  uint64_t v55 = *(void *)(v4 + 56);
  uint64_t v56 = *(void *)(v55 + 16);
  uint64_t v114 = v18;
  uint64_t v116 = v25;
  uint64_t v115 = v26;
  uint64_t v113 = v54;
  if (v56)
  {
    sub_2504DBC4C(v54, v53);
    swift_bridgeObjectRetain();
    unint64_t v57 = sub_250513064(v54, v53);
    if (v58)
    {
      unint64_t v59 = v57;
      uint64_t v111 = *(void *)(v55 + 56);
      uint64_t v60 = type metadata accessor for GroupMembership.MemberProperties(0);
      uint64_t v61 = *(void *)(v60 - 8);
      sub_25051B91C(v111 + *(void *)(v61 + 72) * v59, (uint64_t)v51, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v51, 0, 1, v60);
    }
    else
    {
      uint64_t v60 = type metadata accessor for GroupMembership.MemberProperties(0);
      uint64_t v61 = *(void *)(v60 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v51, 1, 1, v60);
    }
    swift_bridgeObjectRelease();
    sub_250511528(v54, v53);
  }
  else
  {
    uint64_t v60 = type metadata accessor for GroupMembership.MemberProperties(0);
    uint64_t v61 = *(void *)(v60 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v51, 1, 1, v60);
  }
  unint64_t v76 = v53;
  type metadata accessor for GroupMembership.MemberProperties(0);
  int v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48))(v51, 1, v60);
  unint64_t v78 = v128;
  if (v77)
  {
    uint64_t v79 = &qword_269AB5A80;
    uint64_t v80 = (uint64_t)v51;
LABEL_23:
    sub_2504DAF60(v80, v79);
LABEL_24:
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v81 = sub_2505BDC40();
    __swift_project_value_buffer(v81, (uint64_t)qword_269AC3188);
    uint64_t v63 = sub_2505BE3D0();
    long long v82 = sub_2505BDC20();
    os_log_type_t v83 = v63;
    if (os_log_type_enabled(v82, (os_log_type_t)v63))
    {
      uint64_t v63 = swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_2504D2000, v82, v83, "missing member key information", (uint8_t *)v63, 2u);
      MEMORY[0x25337FF10](v63, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v74 = 345;
    long long v75 = xmmword_2505C0140;
LABEL_29:
    *(_OWORD *)(v74 + 8) = v75;
    *(void *)(v74 + 24) = 0x80000002505C8EC0;
    *(void *)(v74 + 32) = 0xD000000000000052;
    *(void *)(v74 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return v63;
  }
  uint64_t v85 = *((void *)v51 + 1);
  unint64_t v86 = *((void *)v51 + 2);
  sub_25051B908(v85, v86);
  sub_2504DAF60((uint64_t)v51, &qword_269AB5A80);
  if (v86 >> 60 == 15) {
    goto LABEL_24;
  }
  uint64_t v111 = v85;
  uint64_t v87 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v88 = type metadata accessor for UserKeyingInfo(0);
  sub_2504DAEFC(v87 + *(int *)(v88 + 44), (uint64_t)v38, &qword_269AB5A28);
  uint64_t v90 = v125;
  uint64_t v89 = v126;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v38, 1, v126) == 1)
  {
    sub_25051B8D4(v111, v86);
    uint64_t v79 = &qword_269AB5A28;
    uint64_t v80 = (uint64_t)v38;
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v78, v38, v89);
  unint64_t v91 = v124;
  sub_2504DAEFC(v87 + *(int *)(v88 + 40), v124, &qword_269AB5A78);
  uint64_t v92 = v115;
  uint64_t v93 = v78;
  uint64_t v94 = v116;
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v115 + 48))(v91, 1, v116) == 1)
  {
    (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v89);
    sub_25051B8D4(v111, v86);
    uint64_t v79 = &qword_269AB5A78;
    uint64_t v80 = v91;
    goto LABEL_23;
  }
  uint64_t v95 = v123;
  (*(void (**)(char *, unint64_t, uint64_t))(v92 + 32))(v123, v91, v94);
  type metadata accessor for Group(0);
  unint64_t v96 = *(void *)(v4 + 24);
  v129[0] = *(void *)(v4 + 16);
  uint64_t v63 = v129[0];
  v129[1] = v96;
  v130[0] = v111;
  v130[1] = v86;
  unint64_t v124 = v86;
  unint64_t v97 = v76;
  uint64_t v98 = v113;
  sub_2504DBC4C(v113, v97);
  sub_2504DBC4C(v63, v96);
  uint64_t v99 = (uint64_t)v95;
  uint64_t v100 = v122;
  unint64_t v101 = v120;
  uint64_t v102 = v121;
  sub_2504E813C(v129, v117, v99, v130, v122, v120, v114);
  sub_250511528(v98, v97);
  sub_250511528(v63, v96);
  if (v102)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v123, v116);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v128, v126);
    sub_25051B8D4(v111, v124);
  }
  else
  {
    uint64_t v103 = v114;
    uint64_t v104 = swift_bridgeObjectRetain();
    uint64_t v63 = sub_2504DD23C(v104);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v4 + v127) = 9;
    uint64_t v105 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4
                                                                   + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    uint64_t v106 = *(void *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    unint64_t v107 = *(void *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
    *uint64_t v105 = v100;
    v105[1] = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v101;
    sub_2504DBC4C((uint64_t)v100, v101);
    sub_25051B8D4(v106, v107);
    uint64_t v108 = (uint64_t)v112;
    sub_25051B91C((uint64_t)v103, (uint64_t)v112, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v108, 0, 1, v119);
    uint64_t v109 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
    swift_beginAccess();
    sub_250528518(v108, v109, &qword_269AB5A30);
    swift_endAccess();
    sub_25051B8D4(v111, v124);
    sub_25051AF3C((uint64_t)v103, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v123, v116);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v128, v126);
  }
  return v63;
}

uint64_t sub_2504F9D10()
{
  return sub_2504F9D68((uint64_t (*)(uint64_t, uint64_t *))sub_2504DE2E4);
}

uint64_t sub_2504F9D3C()
{
  return sub_2504F9D68((uint64_t (*)(uint64_t, uint64_t *))sub_2504DD644);
}

uint64_t sub_2504F9D68(uint64_t (*a1)(uint64_t, uint64_t *))
{
  sub_2504FFF20();
  if (!v2)
  {
    swift_beginAccess();
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v1 = a1(v4, &v6);
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_2504F9DF0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v165 = a1;
  uint64_t v175 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v172 = *(void *)(v175 - 8);
  MEMORY[0x270FA5388](v175, v3, v4, v5, v6);
  unint64_t v174 = (uint64_t *)((char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A30);
  MEMORY[0x270FA5388](v8 - 8, v9, v10, v11, v12);
  unint64_t v169 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v168 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  uint64_t v167 = (uint64_t)*(v168 - 1);
  MEMORY[0x270FA5388](v168, v14, v15, v16, v17);
  uint64_t v166 = (uint64_t)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  uint64_t v24 = MEMORY[0x270FA5388](v19 - 8, v20, v21, v22, v23);
  unint64_t v173 = (char *)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24, v26, v27, v28, v29);
  uint64_t v171 = (uint64_t)&v152 - v30;
  uint64_t v31 = sub_2505BDF90();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31, v33, v34, v35, v36);
  uint64_t v170 = (uint64_t)&v152 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  uint64_t v43 = MEMORY[0x270FA5388](v38 - 8, v39, v40, v41, v42);
  uint64_t v45 = (char *)&v152 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43, v46, v47, v48, v49);
  os_log_type_t v51 = (char *)&v152 - v50;
  uint64_t v52 = sub_2505BE000();
  uint64_t v53 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52, v54, v55, v56, v57);
  unint64_t v59 = (char *)&v152 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v60 - 8, v61, v62, v63, v64);
  uint64_t v66 = (char *)&v152 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8) >> 60 == 15
    || (int v67 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state), v67 != 9) && v67 != 4)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v77 = sub_2505BDC40();
    __swift_project_value_buffer(v77, (uint64_t)qword_269AC3188);
    os_log_type_t v78 = sub_2505BE3D0();
    swift_retain_n();
    uint64_t v79 = sub_2505BDC20();
    if (os_log_type_enabled(v79, v78))
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136315138;
      uint64_t v181 = v81;
      unint64_t v82 = sub_2504E0D6C(*(unsigned char *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state));
      v180[5] = sub_25051171C(v82, v83, &v181);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_2504D2000, v79, v78, "invalid state transition in group, current state is %s", v80, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v81, -1, -1);
      MEMORY[0x25337FF10](v80, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v84 = 347;
    long long v85 = xmmword_2505C0170;
    goto LABEL_24;
  }
  uint64_t v159 = v45;
  uint64_t v162 = v53;
  uint64_t v158 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  uint64_t v161 = v59;
  uint64_t v68 = *(void *)(v2 + 40);
  unint64_t v69 = *(void *)(v2 + 48);
  swift_beginAccess();
  uint64_t v70 = *(void *)(v2 + 56);
  uint64_t v71 = *(void *)(v70 + 16);
  uint64_t v163 = v52;
  uint64_t v160 = v32;
  if (v71)
  {
    uint64_t v164 = v31;
    sub_2504DBC4C(v68, v69);
    swift_bridgeObjectRetain();
    unint64_t v72 = sub_250513064(v68, v69);
    if (v73)
    {
      unint64_t v74 = v72;
      uint64_t v157 = *(void *)(v70 + 56);
      uint64_t v75 = type metadata accessor for GroupMembership.MemberProperties(0);
      uint64_t v76 = *(void *)(v75 - 8);
      sub_25051B91C(v157 + *(void *)(v76 + 72) * v74, (uint64_t)v66, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v66, 0, 1, v75);
    }
    else
    {
      uint64_t v75 = type metadata accessor for GroupMembership.MemberProperties(0);
      uint64_t v76 = *(void *)(v75 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v66, 1, 1, v75);
    }
    swift_bridgeObjectRelease();
    sub_250511528(v68, v69);
    uint64_t v31 = v164;
  }
  else
  {
    uint64_t v75 = type metadata accessor for GroupMembership.MemberProperties(0);
    uint64_t v76 = *(void *)(v75 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v66, 1, 1, v75);
  }
  type metadata accessor for GroupMembership.MemberProperties(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v66, 1, v75))
  {
    unint64_t v86 = &qword_269AB5A80;
    uint64_t v87 = (uint64_t)v66;
LABEL_18:
    sub_2504DAF60(v87, v86);
LABEL_19:
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v88 = sub_2505BDC40();
    __swift_project_value_buffer(v88, (uint64_t)qword_269AC3188);
    os_log_type_t v89 = sub_2505BE3D0();
    uint64_t v90 = sub_2505BDC20();
    os_log_type_t v91 = v89;
    if (os_log_type_enabled(v90, v89))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v92 = 0;
      _os_log_impl(&dword_2504D2000, v90, v91, "missing member key information", v92, 2u);
      MEMORY[0x25337FF10](v92, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v84 = 345;
    long long v85 = xmmword_2505C0160;
LABEL_24:
    *(_OWORD *)(v84 + 8) = v85;
    *(void *)(v84 + 24) = 0x80000002505C8F00;
    *(void *)(v84 + 32) = 0xD000000000000052;
    *(void *)(v84 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  uint64_t v94 = *((void *)v66 + 1);
  unint64_t v95 = *((void *)v66 + 2);
  sub_25051B908(v94, v95);
  sub_2504DAF60((uint64_t)v66, &qword_269AB5A80);
  if (v95 >> 60 == 15) {
    goto LABEL_19;
  }
  uint64_t v155 = v68;
  uint64_t v156 = v69;
  uint64_t v157 = v94;
  uint64_t v96 = v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v97 = v175;
  sub_2504DAEFC(v96 + *(int *)(v175 + 44), (uint64_t)v51, &qword_269AB5A28);
  uint64_t v98 = v162;
  uint64_t v99 = v163;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v162 + 48))(v51, 1, v163) == 1)
  {
    sub_25051B8D4(v157, v95);
    unint64_t v86 = &qword_269AB5A28;
    uint64_t v87 = (uint64_t)v51;
    goto LABEL_18;
  }
  uint64_t v154 = v95;
  uint64_t v100 = (uint64_t)v161;
  (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v161, v51, v99);
  uint64_t v101 = v171;
  sub_2504DAEFC(v96 + *(int *)(v97 + 40), v171, &qword_269AB5A78);
  uint64_t v102 = v160;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v101, 1, v31) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v100, v99);
    sub_25051B8D4(v157, v154);
    unint64_t v86 = &qword_269AB5A78;
    uint64_t v87 = v101;
    goto LABEL_18;
  }
  uint64_t v103 = v170;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v170, v101, v31);
  unint64_t v104 = *(void *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v104 >> 60 == 15)
  {
    sub_25051B8D4(v157, v154);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v103, v31);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v161, v99);
    goto LABEL_19;
  }
  uint64_t v105 = *(void *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  uint64_t v106 = v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  swift_beginAccess();
  uint64_t v107 = v106;
  uint64_t v108 = v169;
  sub_2504DAEFC(v107, (uint64_t)v169, &qword_269AB5A30);
  if ((*(unsigned int (**)(void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, void (**)(uint64_t, uint64_t, uint64_t, uint64_t)))(v167 + 48))(v108, 1, v168) == 1)
  {
    uint64_t v109 = v105;
    unint64_t v110 = v104;
    sub_2504DBC4C(v105, v104);
    sub_2504DAF60((uint64_t)v108, &qword_269AB5A30);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v111 = sub_2505BDC40();
    __swift_project_value_buffer(v111, (uint64_t)qword_269AC3188);
    os_log_type_t v112 = sub_2505BE3D0();
    uint64_t v113 = sub_2505BDC20();
    os_log_type_t v114 = v112;
    if (os_log_type_enabled(v113, v112))
    {
      uint64_t v115 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v115 = 0;
      _os_log_impl(&dword_2504D2000, v113, v114, "missing transition state", v115, 2u);
      MEMORY[0x25337FF10](v115, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v116 = 346;
    *(_OWORD *)(v116 + 8) = xmmword_2505C0150;
    *(void *)(v116 + 24) = 0x80000002505C8F00;
    *(void *)(v116 + 32) = 0xD000000000000052;
    *(void *)(v116 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_25051B8D4(v157, v154);
    sub_25051B8D4(v109, v110);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v103, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v161, v163);
  }
  uint64_t v164 = v31;
  uint64_t v117 = v166;
  sub_25051C8F4((uint64_t)v108, v166, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  uint64_t v118 = v165;
  int64_t v119 = *(void *)(v165 + 16);
  unint64_t v152 = v104;
  uint64_t v153 = v105;
  if (!v119)
  {
    sub_2504DBC4C(v105, v104);
    uint64_t v133 = v104;
    BOOL v134 = (void *)MEMORY[0x263F8EE78];
LABEL_47:
    type metadata accessor for Group(0);
    unint64_t v136 = *(void *)(v2 + 24);
    uint64_t v177 = *(void *)(v2 + 16);
    uint64_t v135 = v177;
    unint64_t v178 = v136;
    uint64_t v137 = v155;
    unint64_t v138 = v156;
    v176[0] = v155;
    v176[1] = v156;
    v180[0] = v157;
    v180[1] = v154;
    v179[0] = v153;
    v179[1] = v133;
    sub_2504DBC4C(v155, v156);
    sub_2504DBC4C(v135, v136);
    uint64_t v139 = v170;
    uint64_t v140 = v182;
    uint64_t v141 = sub_2504EB7C8(&v177, v176, (uint64_t)v161, v170, v180, v179, v134, v117);
    if (v140)
    {
      swift_bridgeObjectRelease();
      sub_250511528(v137, v138);
      sub_250511528(v135, v136);
      sub_25051AF3C(v117, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v139, v164);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v163);
      sub_25051B8D4(v153, v152);
      return sub_25051B8D4(v157, v154);
    }
    uint64_t v142 = v153;
    uint64_t v143 = (uint64_t)v141;
    swift_bridgeObjectRelease();
    sub_250511528(v137, v138);
    sub_250511528(v135, v136);
    swift_beginAccess();
    int v144 = *(_DWORD *)(v143 + 64);
    uint64_t result = swift_beginAccess();
    int v145 = *(_DWORD *)(v2 + 64);
    int v146 = v145 + 1;
    if (v145 == -1)
    {
      __break(1u);
      return result;
    }
    int v147 = *(unsigned __int8 *)(v2 + v158);
    uint64_t v148 = v163;
    uint64_t v149 = v170;
    uint64_t v150 = v162;
    if (v144 == v146 && v147 == 9)
    {
LABEL_54:
      sub_2504FB2C0(v143);
      sub_25051B8D4(v157, v154);
      sub_25051B8D4(v142, v152);
      swift_release();
      sub_25051AF3C(v166, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v149, v164);
      return (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v161, v148);
    }
    if (v144 == 1)
    {
      if (v147 == 4) {
        goto LABEL_54;
      }
    }
    else if (v147 == 4)
    {
      char v151 = 1;
LABEL_58:
      *(unsigned char *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = v151;
      *(void *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = v143;
      swift_retain();
      swift_release();
      sub_25051B8D4(v157, v154);
      sub_25051B8D4(v142, v152);
      swift_release();
      sub_25051AF3C(v166, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v149, v164);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v150 + 8))(v161, v148);
      *(unsigned char *)(v2 + v158) = 5;
      return result;
    }
    char v151 = 0;
    goto LABEL_58;
  }
  sub_2504DBC4C(v105, v104);
  v176[0] = MEMORY[0x263F8EE78];
  sub_250512010(0, v119, 0);
  uint64_t v175 = v176[0];
  unint64_t v169 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56);
  uint64_t v168 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v160 + 56);
  unint64_t v120 = (unint64_t *)(v118 + 56);
  uint64_t v121 = v174;
  uint64_t v122 = (uint64_t)v159;
  uint64_t v123 = (uint64_t)v173;
  while (1)
  {
    uint64_t v171 = v119;
    uint64_t v124 = *(v120 - 3);
    unint64_t v125 = *(v120 - 2);
    uint64_t v126 = *(v120 - 1);
    unint64_t v127 = *v120;
    sub_2504DBC4C(v124, v125);
    sub_2504DBC4C(v126, v127);
    sub_2504DBC4C(v124, v125);
    sub_2504DBC4C(v126, v127);
    sub_250511528(v126, v127);
    uint64_t v177 = v124;
    unint64_t v178 = v125;
    sub_2504DBC4C(v124, v125);
    sub_2504DBC4C(v126, v127);
    sub_250511528(v124, v125);
    (*v169)(v122, 1, 1, v163);
    (*v168)(v123, 1, 1, v164);
    uint64_t v128 = v182;
    sub_2505625AC(&v177, v126, v127, v122, v123, v121);
    uint64_t v182 = v128;
    if (v128) {
      break;
    }
    sub_250511528(v124, v125);
    sub_250511528(v126, v127);
    uint64_t v129 = v175;
    v176[0] = v175;
    unint64_t v131 = *(void *)(v175 + 16);
    unint64_t v130 = *(void *)(v175 + 24);
    if (v131 >= v130 >> 1)
    {
      sub_250512010(v130 > 1, v131 + 1, 1);
      uint64_t v129 = v176[0];
    }
    v120 += 4;
    *(void *)(v129 + 16) = v131 + 1;
    unint64_t v132 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
    uint64_t v175 = v129;
    uint64_t v121 = v174;
    sub_25051C8F4((uint64_t)v174, v129 + v132 + *(void *)(v172 + 72) * v131, type metadata accessor for UserKeyingInfo);
    int64_t v119 = v171 - 1;
    if (v171 == 1)
    {
      uint64_t v117 = v166;
      uint64_t v133 = v152;
      BOOL v134 = (void *)v175;
      goto LABEL_47;
    }
  }
  sub_250511528(v124, v125);
  sub_250511528(v126, v127);
  swift_release();
  sub_25051B8D4(v157, v154);
  sub_25051B8D4(v153, v152);
  sub_25051AF3C(v166, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v170, v164);
  return (*(uint64_t (**)(char *, uint64_t))(v162 + 8))(v161, v163);
}

uint64_t sub_2504FB2C0(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
  if (v3 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_2505BDC40();
    __swift_project_value_buffer(v4, (uint64_t)qword_269AC3188);
    os_log_type_t v5 = sub_2505BE3D0();
    uint64_t v6 = sub_2505BDC20();
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_2504D2000, v6, v7, "invalid group state (missing group serialization)", v8, 2u);
      MEMORY[0x25337FF10](v8, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v9 = 310;
    *(_OWORD *)(v9 + 8) = xmmword_2505C0180;
    *(void *)(v9 + 24) = 0x80000002505C9990;
    *(void *)(v9 + 32) = 0xD000000000000052;
    *(void *)(v9 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    unint64_t v13 = *(void *)(a1 + 96);
    uint64_t v28 = v1;
    uint64_t v38 = v12;
    if (v13 >> 60 == 15)
    {
      unint64_t v29 = v3;
      sub_2504DBC4C(v12, v3);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 104);
      unint64_t v14 = *(void *)(a1 + 112);
      uint64_t v31 = *(void *)(a1 + 88);
      unint64_t v32 = *(void *)(a1 + 24);
      v33[0] = *(void *)(a1 + 16);
      v33[1] = v32;
      unint64_t v16 = *(void *)(a1 + 48);
      uint64_t v36 = *(void *)(a1 + 40);
      unint64_t v37 = v16;
      swift_beginAccess();
      int v30 = *(_DWORD *)(a1 + 64);
      sub_25051B908(v12, v3);
      sub_25051C95C(v31, v13, v15, v14);
      uint64_t v27 = v33[0];
      uint64_t v17 = v36;
      sub_2504DBC4C(v33[0], v32);
      sub_2504DBC4C(v36, v16);
      sub_25059A3B4(v33, &v36, v31, v13, v15, v14, v30);
      if (v2)
      {
        sub_25051B884(v31, v13, v15, v14);
        sub_25051B8D4(v38, v3);
        sub_250511528(v17, v16);
        return sub_250511528(v27, v32);
      }
      unint64_t v29 = v3;
      sub_25051B884(v31, v13, v15, v14);
      sub_250511528(v17, v16);
      sub_250511528(v27, v32);
    }
    unint64_t v19 = *(void *)(a1 + 24);
    uint64_t v36 = *(void *)(a1 + 16);
    uint64_t v18 = v36;
    unint64_t v37 = v19;
    unint64_t v21 = *(void *)(a1 + 48);
    uint64_t v34 = *(void *)(a1 + 40);
    uint64_t v20 = v34;
    unint64_t v35 = v21;
    uint64_t v23 = *(void *)(a1 + 72);
    unint64_t v22 = *(void *)(a1 + 80);
    swift_beginAccess();
    int v24 = *(_DWORD *)(a1 + 64);
    sub_2504DBC4C(v18, v19);
    sub_2504DBC4C(v20, v21);
    sub_2504DBC4C(v23, v22);
    sub_25059A594(&v36, &v34, v23, v22, v24);
    sub_250511528(v23, v22);
    if (v2)
    {
      sub_25051B8D4(v38, v29);
      sub_250511528(v20, v21);
      return sub_250511528(v18, v19);
    }
    else
    {
      sub_250511528(v20, v21);
      sub_250511528(v18, v19);
      uint64_t v36 = v18;
      unint64_t v37 = v19;
      uint64_t v34 = v20;
      unint64_t v35 = v21;
      int v25 = *(_DWORD *)(a1 + 64);
      sub_2504DBC4C(v18, v19);
      sub_2504DBC4C(v20, v21);
      uint64_t v26 = v38;
      sub_25059A1EC(&v36, &v34, v25, v38, v29);
      sub_250511528(v20, v21);
      sub_250511528(v18, v19);
      sub_2504FB758(a1);
      uint64_t result = sub_25051B8D4(v26, v29);
      *(unsigned char *)(v28 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 6;
    }
  }
  return result;
}

uint64_t sub_2504FB758(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A30);
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7, v8);
  uint64_t v98 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UserKeyingInfo(0);
  MEMORY[0x270FA5388](v10 - 8, v11, v12, v13, v14);
  uint64_t v96 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v16 = 0;
  uint64_t v97 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  int v17 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
  if (v17 == 9)
  {
    LODWORD(v106) = 0;
    BOOL v18 = 1;
  }
  else
  {
    if (v17 == 4)
    {
      swift_beginAccess();
      BOOL v16 = *(_DWORD *)(a1 + 64) == 1;
    }
    LODWORD(v106) = v16;
    BOOL v18 = v17 == 8;
  }
  BOOL v95 = v18;
  uint64_t v20 = *(void *)(v2 + 16);
  unint64_t v19 = *(void *)(v2 + 24);
  uint64_t v21 = *(void *)(a1 + 16);
  unint64_t v22 = *(void *)(a1 + 24);
  sub_2504DBC4C(v20, v19);
  sub_2504DBC4C(v21, v22);
  char v23 = sub_25051AAD8(v20, v19, v21, v22);
  unint64_t v100 = v22;
  uint64_t v101 = v21;
  sub_250511528(v21, v22);
  sub_250511528(v20, v19);
  if ((v23 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v25 = *(void *)(v2 + 40);
  unint64_t v24 = *(void *)(v2 + 48);
  uint64_t v94 = v2;
  uint64_t v27 = *(void *)(a1 + 40);
  unint64_t v26 = *(void *)(a1 + 48);
  sub_2504DBC4C(v25, v24);
  sub_2504DBC4C(v27, v26);
  char v28 = sub_25051AAD8(v25, v24, v27, v26);
  uint64_t v29 = v27;
  uint64_t v2 = v94;
  sub_250511528(v29, v26);
  sub_250511528(v25, v24);
  if ((v28 & 1) == 0) {
    goto LABEL_14;
  }
  if ((v106 & 1) != 0
    || v95
    && ((swift_beginAccess(), unsigned int v30 = *(_DWORD *)(v2 + 64), swift_beginAccess(), v31 = *(_DWORD *)(a1 + 64), v30 < v31)
     || v30 == v31 && (*(unsigned char *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) & 1) != 0))
  {
    swift_beginAccess();
    char v32 = *(unsigned char *)(a1 + 32);
    swift_beginAccess();
    *(unsigned char *)(v2 + 32) = v32;
    swift_beginAccess();
    uint64_t v33 = *(void *)(a1 + 56);
    swift_beginAccess();
    *(void *)(v2 + 56) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    LODWORD(v33) = *(_DWORD *)(a1 + 64);
    swift_beginAccess();
    *(_DWORD *)(v2 + 64) = v33;
    uint64_t v34 = *(void *)(a1 + 72);
    unint64_t v35 = *(void *)(a1 + 80);
    uint64_t v36 = *(void *)(v2 + 72);
    unint64_t v37 = *(void *)(v2 + 80);
    *(void *)(v2 + 72) = v34;
    *(void *)(v2 + 80) = v35;
    sub_2504DBC4C(v34, v35);
    sub_250511528(v36, v37);
    uint64_t v38 = *(void *)(a1 + 88);
    unint64_t v39 = *(void *)(a1 + 96);
    uint64_t v40 = *(void *)(a1 + 104);
    unint64_t v41 = *(void *)(a1 + 112);
    uint64_t v42 = *(void *)(v2 + 88);
    unint64_t v43 = *(void *)(v2 + 96);
    uint64_t v44 = (void *)v2;
    uint64_t v45 = *(void *)(v2 + 104);
    unint64_t v46 = v44[14];
    v44[11] = v38;
    v44[12] = v39;
    v44[13] = v40;
    v44[14] = v41;
    sub_25051C95C(v38, v39, v40, v41);
    sub_25051B884(v42, v43, v45, v46);
    uint64_t v47 = a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
    swift_beginAccess();
    uint64_t v48 = v96;
    sub_25051B91C(v47, v96, type metadata accessor for UserKeyingInfo);
    uint64_t v49 = (uint64_t)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
    swift_beginAccess();
    sub_2505284B0(v48, v49, type metadata accessor for UserKeyingInfo);
    swift_endAccess();
    uint64_t v50 = *(void *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    unint64_t v51 = *(void *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    uint64_t v52 = (void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    uint64_t v53 = *(void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    unint64_t v54 = *(void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    *uint64_t v52 = v50;
    v52[1] = v51;
    sub_25051B908(v50, v51);
    sub_25051B8D4(v53, v54);
    *((unsigned char *)v44 + v97) = *(unsigned char *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
    uint64_t v55 = MEMORY[0x263F8EE78];
    unint64_t v56 = sub_2504E1CB8(MEMORY[0x263F8EE78], &qword_269AB5FF0, &qword_269AB5FF8, type metadata accessor for MembershipVerifier, type metadata accessor for MembershipVerifier);
    uint64_t v57 = (void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers);
    swift_beginAccess();
    *uint64_t v57 = v56;
    swift_bridgeObjectRelease();
    unint64_t v58 = sub_2504E1B08(v55);
    unint64_t v59 = (void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
    swift_beginAccess();
    *unint64_t v59 = v58;
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    unint64_t v61 = *(void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
    *(_OWORD *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_2505BFEE0;
    sub_25051B8D4(v60, v61);
    uint64_t v62 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
    uint64_t v63 = (uint64_t)v98;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v98, 1, 1, v62);
    uint64_t v64 = (uint64_t)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
    swift_beginAccess();
    sub_250528518(v63, v64, &qword_269AB5A30);
    swift_endAccess();
    memset(v102, 0, 40);
    uint64_t v65 = (uint64_t)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
    swift_beginAccess();
    sub_250528518((uint64_t)v102, v65, &qword_269AB5A38);
    swift_endAccess();
    *(void *)((char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
    uint64_t result = swift_release();
    *((unsigned char *)v44 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  }
  else
  {
LABEL_14:
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v67 = sub_2505BDC40();
    __swift_project_value_buffer(v67, (uint64_t)qword_269AC3188);
    os_log_type_t v68 = sub_2505BE3D0();
    swift_retain_n();
    swift_retain_n();
    uint64_t v106 = sub_2505BDC20();
    if (os_log_type_enabled(v106, v68))
    {
      uint64_t v69 = swift_slowAlloc();
      uint64_t v98 = (char *)swift_slowAlloc();
      v104[0] = (uint64_t)v98;
      *(_DWORD *)uint64_t v69 = 136316418;
      LODWORD(v97) = v68;
      sub_2504DBC4C(v20, v19);
      uint64_t v70 = v2;
      uint64_t v71 = sub_2505BD8B0();
      unint64_t v73 = v72;
      sub_250511528(v20, v19);
      v102[0] = sub_25051171C(v71, v73, v104);
      uint64_t v99 = &v102[1];
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v69 + 12) = 2080;
      unint64_t v74 = v100;
      uint64_t v75 = v101;
      sub_2504DBC4C(v101, v100);
      uint64_t v76 = sub_2505BD8B0();
      unint64_t v78 = v77;
      sub_250511528(v75, v74);
      v102[0] = sub_25051171C(v76, v78, v104);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v69 + 22) = 2080;
      uint64_t v101 = v69 + 24;
      uint64_t v79 = *(void *)(v70 + 40);
      unint64_t v80 = *(void *)(v70 + 48);
      uint64_t v81 = v70;
      sub_2504DBC4C(v79, v80);
      uint64_t v82 = sub_2505BD8B0();
      uint64_t v83 = a1;
      unint64_t v85 = v84;
      sub_250511528(v79, v80);
      v102[0] = sub_25051171C(v82, v85, v104);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v69 + 32) = 2080;
      uint64_t v86 = *(void *)(v83 + 40);
      unint64_t v87 = *(void *)(v83 + 48);
      sub_2504DBC4C(v86, v87);
      uint64_t v88 = sub_2505BD8B0();
      unint64_t v90 = v89;
      sub_250511528(v86, v87);
      v102[0] = sub_25051171C(v88, v90, v104);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v69 + 42) = 1024;
      swift_beginAccess();
      LODWORD(v74) = *(_DWORD *)(v81 + 64);
      swift_release();
      int v105 = v74;
      sub_2505BE430();
      swift_release();
      *(_WORD *)(v69 + 48) = 1024;
      swift_beginAccess();
      LODWORD(v86) = *(_DWORD *)(v83 + 64);
      swift_release();
      int v103 = v86;
      sub_2505BE430();
      swift_release();
      os_log_type_t v91 = v106;
      _os_log_impl(&dword_2504D2000, v106, (os_log_type_t)v97, "new group is inconsistent with the original group, old groupID %s new groupID %s; old member ID %s new member ID"
        " %s; old version %u new verison %u",
        (uint8_t *)v69,
        0x36u);
      uint64_t v92 = v98;
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v92, -1, -1);
      MEMORY[0x25337FF10](v69, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v93 = 373;
    *(_OWORD *)(v93 + 8) = xmmword_2505C0190;
    *(void *)(v93 + 24) = 0x80000002505C9630;
    *(void *)(v93 + 32) = 0xD000000000000052;
    *(void *)(v93 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  return result;
}

void *sub_2504FC19C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v4 - 8, v5, v6, v7, v8);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2505BE000();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v11, v13, v14, v15, v16);
  unint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v63 - v24;
  uint64_t v26 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 5
    && (uint64_t v27 = *(void *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup)) != 0)
  {
    uint64_t v69 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
    uint64_t v28 = *a1;
    a1 = (void *)a1[1];
    uint64_t v71 = v28;
    swift_beginAccess();
    int v29 = *(_DWORD *)(v2 + 64);
    uint64_t v70 = (char *)(v27 + 32);
    swift_beginAccess();
    uint64_t v72 = v27;
    if ((*(unsigned char *)(v27 + 32) & 1) == 0)
    {
      swift_beginAccess();
      if (*(unsigned char *)(v2 + 32)) {
        int v29 = 0;
      }
    }
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup)) {
      int v29 = 0;
    }
    uint64_t v30 = v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
    swift_beginAccess();
    uint64_t v31 = type metadata accessor for UserKeyingInfo(0);
    sub_2504DAEFC(v30 + *(int *)(v31 + 44), (uint64_t)v10, &qword_269AB5A28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      swift_retain();
      sub_2504DAF60((uint64_t)v10, &qword_269AB5A28);
LABEL_18:
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v43 = sub_2505BDC40();
      __swift_project_value_buffer(v43, (uint64_t)qword_269AC3188);
      os_log_type_t v44 = sub_2505BE3D0();
      uint64_t v45 = sub_2505BDC20();
      os_log_type_t v46 = v44;
      if (os_log_type_enabled(v45, v44))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl(&dword_2504D2000, v45, v46, "missing key information", v47, 2u);
        MEMORY[0x25337FF10](v47, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v48 = 339;
      *(_OWORD *)(v48 + 8) = xmmword_2505C01A0;
      *(void *)(v48 + 24) = 0x80000002505C8F40;
      *(void *)(v48 + 32) = 0xD000000000000052;
      *(void *)(v48 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      swift_release();
      return a1;
    }
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v25, v10, v11);
    unint64_t v41 = *(void *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    if (v41 >> 60 == 15)
    {
      uint64_t v42 = *(void (**)(char *, uint64_t))(v12 + 8);
      swift_retain();
      v42(v25, v11);
      goto LABEL_18;
    }
    int v77 = v29;
    uint64_t v66 = a1;
    uint64_t v50 = *(void *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2505BFEC0;
    uint64_t v65 = (void *)(inited + 32);
    swift_retain();
    uint64_t v68 = v50;
    sub_25051B908(v50, v41);
    unint64_t v64 = v41;
    if (qword_269AB5680 != -1) {
      swift_once();
    }
    uint64_t v52 = qword_269AC37B0;
    unint64_t v53 = *(void *)algn_269AC37B8;
    *(void *)(inited + 32) = qword_269AC37B0;
    *(void *)(inited + 40) = v53;
    uint64_t v55 = *(void *)(v2 + 16);
    unint64_t v54 = *(void *)(v2 + 24);
    *(void *)(inited + 48) = v55;
    *(void *)(inited + 56) = v54;
    sub_2504DBC4C(v52, v53);
    sub_2504DBC4C(v55, v54);
    uint64_t v67 = sub_250576544(inited);
    a1 = v56;
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v57 = v68;
    unint64_t v58 = v64;
    sub_2504DBC4C(v68, v64);
    uint64_t v65 = a1;
    sub_2505BDFE0();
    sub_25051B8D4(v57, v58);
    *(void *)&long long v74 = v71;
    *((void *)&v74 + 1) = v66;
    char v78 = *v70;
    uint64_t v59 = v73;
    uint64_t v60 = sub_250522798((uint64_t)v19, &v74, &v78, v77);
    if (v59)
    {
      sub_250511528(v67, (unint64_t)v65);
      swift_release();
      sub_25051B8D4(v68, v58);
      unint64_t v61 = *(void (**)(char *, uint64_t))(v12 + 8);
      v61(v19, v11);
      v61(v25, v11);
    }
    else
    {
      a1 = (void *)v60;
      sub_250511528(v67, (unint64_t)v65);
      swift_release();
      sub_25051B8D4(v68, v58);
      uint64_t v62 = *(void (**)(char *, uint64_t))(v12 + 8);
      v62(v19, v11);
      v62(v25, v11);
      *(unsigned char *)(v2 + v69) = 8;
    }
  }
  else
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_2505BDC40();
    __swift_project_value_buffer(v32, (uint64_t)qword_269AC3188);
    os_log_type_t v33 = sub_2505BE3D0();
    swift_retain_n();
    uint64_t v34 = sub_2505BDC20();
    os_log_type_t v35 = v33;
    if (os_log_type_enabled(v34, v33))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      v76[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      a1 = v36 + 4;
      unint64_t v38 = sub_2504E0D6C(*(unsigned char *)(v2 + v26));
      uint64_t v75 = sub_25051171C(v38, v39, v76);
      sub_2505BE430();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2504D2000, v34, v35, "invalid state transition in group, current state %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v37, -1, -1);
      MEMORY[0x25337FF10](v36, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v40 = 347;
    *(_OWORD *)(v40 + 8) = xmmword_2505C01B0;
    *(void *)(v40 + 24) = 0x80000002505C8F40;
    *(void *)(v40 + 32) = 0xD000000000000052;
    *(void *)(v40 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
  }
  return a1;
}

uint64_t sub_2504FCA40(uint64_t a1, uint64_t a2, unint64_t a3, char a4, int a5, uint64_t a6)
{
  uint64_t v26 = a6;
  int v25 = a5;
  BOOL v24 = (a4 & 1) == 0;
  uint64_t v9 = sub_2505BE0B0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11, v12, v13, v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  uint64_t v18 = *(void *)(a1 + 8);
  unint64_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  sub_2504DBC4C(a2, a3);
  sub_250511528(v18, v17);
  *(void *)(a1 + 24) = v24;
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = v25;
  sub_2505BDFA0();
  uint64_t v19 = sub_2505BDF10();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  uint64_t result = sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  *(void *)(a1 + 40) = v19;
  *(void *)(a1 + 48) = v21;
  return result;
}

uint64_t sub_2504FCBA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v3;
  unint64_t v142 = a3;
  uint64_t v8 = sub_2505BDCE0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v8, v10, v11, v12, v13);
  uint64_t v16 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v14, v17, v18, v19, v20);
  uint64_t v23 = (char *)&v118 - v22;
  uint64_t v28 = MEMORY[0x270FA5388](v21, v24, v25, v26, v27);
  uint64_t v30 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 8)
  {
    uint64_t v31 = *(void *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup);
    if (v31)
    {
      uint64_t v141 = (uint64_t)&v118 - v29;
      uint64_t v140 = v28;
      uint64_t v135 = (v5 + 64);
      swift_beginAccess();
      LODWORD(v139) = *(_DWORD *)(v5 + 64);
      swift_beginAccess();
      int v32 = *(_DWORD *)(v31 + 64);
      swift_beginAccess();
      if (*(unsigned char *)(v31 + 32))
      {
        LODWORD(v136) = v32;
        unint64_t v138 = (int *)a1;
        uint64_t v137 = v9;
        uint64_t v33 = *(void *)(v5 + 72);
        unint64_t v34 = *(void *)(v5 + 80);
        uint64_t v35 = *(void *)(v31 + 72);
        unint64_t v36 = *(void *)(v31 + 80);
        int v147 = &type metadata for MemberSeed;
        uint64_t v135 = sub_250522A2C();
        os_log_t v148 = v135;
        *(void *)&long long v145 = v35;
        *((void *)&v145 + 1) = v36;
        sub_2504DBC4C(v35, v36);
        swift_retain();
        sub_2504DBC4C(v35, v36);
        sub_2504DBC4C(v33, v34);
        if (qword_269AB5638 != -1) {
          swift_once();
        }
        sub_2505601DC(&v145, 1, qword_269AC3720, *(unint64_t *)algn_269AC3728, (uint64_t)v16);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
        if (v4)
        {
          sub_250511528(v33, v34);
          sub_250511528(v35, v36);
          return swift_release();
        }
        sub_250511528(v35, v36);
        (*(void (**)(uint64_t, char *, uint64_t))(v137 + 32))(v141, v16, v140);
        if (*(unsigned char *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup))
        {
          sub_250511528(v33, v34);
          LODWORD(v139) = 0;
          uint64_t v33 = 0;
          unint64_t v34 = 0xF000000000000000;
        }
        unsigned int v64 = v136;
        uint64_t v65 = *(void *)(v5 + 16);
        unint64_t v66 = *(void *)(v5 + 24);
        *(void *)&long long v145 = v65;
        *((void *)&v145 + 1) = v66;
        v144[0] = v33;
        v144[1] = v34;
        sub_2504DBC4C(v65, v66);
        sub_25051B908(v33, v34);
        unint64_t v70 = sub_25055B9AC(&v145, v64, v139, v141, (uint64_t)v138, (char *)v144, (uint64_t)&type metadata for MemberSeed, a2, (uint64_t)v135, v142);
        sub_25051B8D4(v33, v34);
        sub_250511528(v65, v66);
        sub_2504FEA2C(v70);
        sub_25051B8D4(v33, v34);
LABEL_46:
        swift_bridgeObjectRelease();
        sub_2504FB2C0(v31);
        (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v141, v140);
        return swift_release();
      }
      uint64_t v132 = a2;
      unint64_t v46 = *(void *)(v31 + 96);
      if (v46 >> 60 == 15)
      {
        uint64_t v47 = qword_269AB5418;
        swift_retain();
        if (v47 != -1) {
          swift_once();
        }
        uint64_t v48 = sub_2505BDC40();
        __swift_project_value_buffer(v48, (uint64_t)qword_269AC3188);
        os_log_type_t v49 = sub_2505BE3D0();
        uint64_t v50 = sub_2505BDC20();
        if (os_log_type_enabled(v50, v49))
        {
          unint64_t v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v51 = 0;
          _os_log_impl(&dword_2504D2000, v50, v49, "missing admin seed", v51, 2u);
          MEMORY[0x25337FF10](v51, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v52 = 308;
        *(_OWORD *)(v52 + 8) = xmmword_2505C01E0;
        *(void *)(v52 + 24) = 0x80000002505C8F60;
        *(void *)(v52 + 32) = 0xD000000000000052;
        *(void *)(v52 + 40) = 0x80000002505C8CB0;
        swift_willThrow();
        return swift_release();
      }
      LODWORD(v136) = v32;
      unint64_t v138 = (int *)a1;
      uint64_t v53 = *(void *)(v31 + 88);
      uint64_t v54 = v31;
      uint64_t v55 = *(void *)(v31 + 104);
      unint64_t v56 = *(void *)(v54 + 112);
      uint64_t v133 = *(void *)(v5 + 88);
      unint64_t v134 = *(void *)(v5 + 96);
      uint64_t v131 = *(void *)(v5 + 104);
      unint64_t v130 = *(void *)(v5 + 112);
      int v147 = &type metadata for AdminSeed;
      os_log_t v126 = (os_log_t)sub_25051CA18();
      os_log_t v148 = v126;
      uint64_t v57 = (void *)swift_allocObject();
      *(void *)&long long v145 = v57;
      v57[2] = v53;
      v57[3] = v46;
      v57[4] = v55;
      v57[5] = v56;
      sub_25051C95C(v53, v46, v55, v56);
      uint64_t v127 = v53;
      uint64_t v58 = v53;
      unint64_t v59 = v130;
      unint64_t v128 = v46;
      unint64_t v60 = v46;
      uint64_t v61 = v55;
      uint64_t v31 = v54;
      uint64_t v62 = v131;
      unint64_t v129 = v56;
      sub_25051C95C(v58, v60, v61, v56);
      swift_retain();
      sub_25051C95C(v133, v134, v62, v59);
      if (qword_269AB5610 != -1) {
        swift_once();
      }
      sub_2505601DC(&v145, 1, qword_269AC36D0, *(unint64_t *)algn_269AC36D8, (uint64_t)v23);
      uint64_t v63 = v138;
      if (v4)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
        sub_25051B884(v133, v134, v62, v59);
        sub_25051B884(v127, v128, v61, v129);
        return swift_release();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v145);
      uint64_t v137 = v9;
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v141, v23, v140);
      uint64_t v124 = (unsigned char *)(v5 + 32);
      swift_beginAccess();
      char v67 = *(unsigned char *)(v5 + 32);
      uint64_t v125 = v61;
      if ((v67 & 1) != 0 || *(unsigned char *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) == 1)
      {
        sub_25051B884(v133, v134, v62, v59);
        LODWORD(v139) = 0;
        uint64_t v68 = 0;
        uint64_t v62 = 0;
        unint64_t v59 = 0;
        unint64_t v69 = 0xF000000000000000;
      }
      else
      {
        unint64_t v69 = v134;
        uint64_t v68 = v133;
      }
      unsigned int v71 = v136;
      unint64_t v72 = *(void *)(v5 + 24);
      *(void *)&long long v143 = *(void *)(v5 + 16);
      *((void *)&v143 + 1) = v72;
      *(void *)&long long v145 = v68;
      *((void *)&v145 + 1) = v69;
      uint64_t v146 = v62;
      int v147 = (ValueMetadata *)v59;
      uint64_t v136 = v143;
      unint64_t v130 = v72;
      sub_2504DBC4C(v143, v72);
      sub_25051C95C(v68, v69, v62, v59);
      unint64_t v142 = sub_25055B9AC(&v143, v71, v139, v141, (uint64_t)v63, (char *)&v145, (uint64_t)&type metadata for AdminSeed, v132, (uint64_t)v126, v142);
      uint64_t v133 = v68;
      unint64_t v134 = v69;
      uint64_t v131 = v62;
      sub_25051B884(v68, v69, v62, v59);
      sub_250511528(v136, v130);
      if (*v124 != 1)
      {
LABEL_44:
        sub_2504FE0BC(v142);
        sub_25051B884(v133, v134, v131, v59);
        sub_25051B884(v127, v128, v125, v129);
        goto LABEL_46;
      }
      unint64_t v73 = (LODWORD(v135->isa) - 1);
      if (LODWORD(v135->isa))
      {
        uint64_t v62 = v131;
        if (*(void *)(v142 + 16) > v73)
        {
          uint64_t v63 = (int *)(v142 + 32 + 40 * v73);
          if (LODWORD(v135->isa) == *v63)
          {
            unint64_t v130 = v59;
            long long v74 = (void *)(v142 + 32 + 40 * v73);
            uint64_t v76 = v74[1];
            unint64_t v75 = v74[2];
            uint64_t v78 = v74[3];
            unint64_t v77 = v74[4];
            sub_2504DBC4C(v76, v75);
            sub_25051B908(v78, v77);
            uint64_t v79 = sub_250522A80(v76, v75, v78, v77);
            unint64_t v91 = v90;
            uint64_t v136 = v76;
            unint64_t v138 = (int *)v78;
            unint64_t v139 = v77;
            uint64_t v92 = *(void *)(v5 + 72);
            unint64_t v93 = *(void *)(v5 + 80);
            uint64_t v94 = v79;
            sub_2504DBC4C(v92, v93);
            sub_2504DBC4C(v94, v91);
            char v95 = sub_25050C6A8(v92, v93, v94, v91);
            sub_250511528(v94, v91);
            sub_250511528(v92, v93);
            if (v95)
            {
              sub_250511528(v94, v91);
              sub_250511528(v136, v75);
              sub_25051B8D4((uint64_t)v138, v139);
              unint64_t v59 = v130;
              goto LABEL_44;
            }
            uint64_t v97 = v94;
            swift_bridgeObjectRelease();
            unint64_t v142 = v75;
            if (qword_269AB5418 != -1) {
              swift_once();
            }
            uint64_t v98 = sub_2505BDC40();
            __swift_project_value_buffer(v98, (uint64_t)qword_269AC3188);
            os_log_type_t v99 = sub_2505BE3D0();
            sub_2504DBC4C(v94, v91);
            swift_retain();
            sub_2504DBC4C(v94, v91);
            swift_retain();
            unint64_t v100 = sub_2505BDC20();
            if (os_log_type_enabled(v100, v99))
            {
              uint64_t v101 = swift_slowAlloc();
              uint64_t v135 = swift_slowAlloc();
              *(void *)&long long v145 = v135;
              *(_DWORD *)uint64_t v101 = 136315394;
              uint64_t v122 = v101 + 4;
              uint64_t v124 = (unsigned char *)v91;
              uint64_t v102 = *(void *)(v5 + 72);
              unint64_t v103 = *(void *)(v5 + 80);
              uint64_t v119 = v97;
              uint64_t v104 = v102;
              sub_2504DBC4C(v102, v103);
              uint64_t v105 = sub_2504DCA88(v104, v103);
              uint64_t v123 = 0;
              *(void *)&long long v143 = v105;
              os_log_t v126 = v100;
              LODWORD(v132) = v99;
              uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AA0);
              uint64_t v120 = sub_250522D7C((unint64_t *)&qword_269AB5AA8, &qword_269AB5AA0);
              uint64_t v106 = sub_2505BE110();
              unint64_t v108 = v107;
              swift_bridgeObjectRelease();
              uint64_t v109 = v104;
              uint64_t v97 = v119;
              sub_250511528(v109, v103);
              *(void *)&long long v143 = sub_25051171C(v106, v108, (uint64_t *)&v145);
              sub_2505BE430();
              swift_bridgeObjectRelease();
              swift_release_n();
              *(_WORD *)(v101 + 12) = 2080;
              unint64_t v110 = (unint64_t)v124;
              *(void *)&long long v143 = sub_2504DCA88(v97, (unint64_t)v124);
              uint64_t v111 = sub_2505BE110();
              unint64_t v113 = v112;
              swift_bridgeObjectRelease();
              *(void *)&long long v143 = sub_25051171C(v111, v113, (uint64_t *)&v145);
              sub_2505BE430();
              swift_bridgeObjectRelease();
              sub_250511528(v97, v110);
              sub_250511528(v97, v110);
              os_log_t v114 = v126;
              _os_log_impl(&dword_2504D2000, v126, (os_log_type_t)v132, "mismatch seeds, expected %s got %s", (uint8_t *)v101, 0x16u);
              uint64_t v115 = v135;
              swift_arrayDestroy();
              MEMORY[0x25337FF10](v115, -1, -1);
              MEMORY[0x25337FF10](v101, -1, -1);
            }
            else
            {
              swift_release_n();
              sub_250511528(v94, v91);
              sub_250511528(v94, v91);

              unint64_t v110 = v91;
            }
            uint64_t v116 = v131;
            __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
            sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
            swift_allocError();
            *(_WORD *)uint64_t v117 = 364;
            *(_OWORD *)(v117 + 8) = xmmword_2505C01D0;
            *(void *)(v117 + 24) = 0x80000002505C8F60;
            *(void *)(v117 + 32) = 0xD000000000000052;
            *(void *)(v117 + 40) = 0x80000002505C8CB0;
            swift_willThrow();
            sub_250511528(v136, v142);
            sub_25051B8D4((uint64_t)v138, v139);
            sub_25051B884(v127, v128, v125, v129);
            swift_release();
            sub_250511528(v97, v110);
            uint64_t v87 = v133;
            unint64_t v88 = v134;
            uint64_t v89 = v116;
            unint64_t v96 = v130;
            goto LABEL_45;
          }
          if (qword_269AB5418 == -1)
          {
LABEL_38:
            uint64_t v80 = sub_2505BDC40();
            __swift_project_value_buffer(v80, (uint64_t)qword_269AC3188);
            os_log_type_t v81 = sub_2505BE3D0();
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v82 = sub_2505BDC20();
            if (os_log_type_enabled(v82, v81))
            {
              uint64_t v83 = swift_slowAlloc();
              *(_DWORD *)uint64_t v83 = 67109376;
              LODWORD(v145) = *(_DWORD *)(v5 + 64);
              sub_2505BE430();
              swift_release();
              *(_WORD *)(v83 + 8) = 1024;
              int v84 = *v63;
              swift_bridgeObjectRelease();
              LODWORD(v145) = v84;
              sub_2505BE430();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_2504D2000, v82, v81, "misaligned version, expected %u got %u", (uint8_t *)v83, 0xEu);
              uint64_t v85 = v83;
              uint64_t v62 = v131;
              MEMORY[0x25337FF10](v85, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n();
              swift_release();
            }

            __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
            sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
            swift_allocError();
            *(_WORD *)uint64_t v86 = 371;
            *(_OWORD *)(v86 + 8) = xmmword_2505C01C0;
            *(void *)(v86 + 24) = 0x80000002505C8F60;
            *(void *)(v86 + 32) = 0xD000000000000052;
            *(void *)(v86 + 40) = 0x80000002505C8CB0;
            swift_willThrow();
            sub_25051B884(v127, v128, v125, v129);
            swift_release();
            uint64_t v87 = v133;
            unint64_t v88 = v134;
            uint64_t v89 = v62;
            unint64_t v96 = v59;
LABEL_45:
            sub_25051B884(v87, v88, v89, v96);
            return (*(uint64_t (**)(uint64_t, uint64_t))(v137 + 8))(v141, v140);
          }
LABEL_55:
          swift_once();
          goto LABEL_38;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_55;
    }
  }
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v37 = sub_2505BDC40();
  __swift_project_value_buffer(v37, (uint64_t)qword_269AC3188);
  os_log_type_t v38 = sub_2505BE3D0();
  swift_retain_n();
  unint64_t v39 = sub_2505BDC20();
  if (os_log_type_enabled(v39, v38))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(void *)&long long v145 = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    unint64_t v42 = sub_2504E0D6C(*(unsigned char *)(v5 + v30));
    uint64_t v149 = sub_25051171C(v42, v43, (uint64_t *)&v145);
    sub_2505BE430();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_2504D2000, v39, v38, "invalid state transition in group, current group %s", v40, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25337FF10](v41, -1, -1);
    MEMORY[0x25337FF10](v40, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
  swift_allocError();
  *(_WORD *)uint64_t v44 = 347;
  *(_OWORD *)(v44 + 8) = xmmword_2505C01F0;
  *(void *)(v44 + 24) = 0x80000002505C8F60;
  *(void *)(v44 + 32) = 0xD000000000000052;
  *(void *)(v44 + 40) = 0x80000002505C8CB0;
  return swift_willThrow();
}

uint64_t sub_2504FE0BC(uint64_t result)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v66 = v3;
    uint64_t v5 = v1[2];
    unint64_t v6 = v1[3];
    uint64_t v8 = v1[5];
    unint64_t v7 = v1[6];
    uint64_t v65 = &v74;
    uint64_t v57 = swift_bridgeObjectRetain();
    uint64_t v9 = (unint64_t *)(v57 + 64);
    uint64_t v64 = v5;
    uint64_t v71 = v7;
    uint64_t v70 = v8;
    while (1)
    {
      uint64_t v62 = v4;
      int v10 = *((_DWORD *)v9 - 8);
      uint64_t v11 = *(v9 - 3);
      unint64_t v12 = *(v9 - 2);
      uint64_t v63 = v9;
      uint64_t v13 = *(v9 - 1);
      unint64_t v14 = *v9;
      sub_2504DBC4C(v11, v12);
      sub_25051B908(v13, v14);
      uint64_t v72 = v11;
      sub_2504DBC4C(v11, v12);
      sub_25051B908(v13, v14);
      sub_2504DBC4C(v5, v6);
      sub_2504DBC4C(v8, v7);
      if (qword_26B202478 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_2504DAEFC((uint64_t)&unk_26B202540, (uint64_t)&aBlock, &qword_26B2022D8);
      if (!v75) {
        break;
      }
      sub_2504DAEE4(&aBlock, (uint64_t)v84);
      uint64_t v15 = __swift_project_boxed_opaque_existential_1(v84, v85);
      uint64_t v16 = *v15;
      uint64_t v80 = v72;
      unint64_t v81 = v12;
      unint64_t v68 = v12;
      uint64_t v69 = v13;
      uint64_t v82 = v13;
      unint64_t v83 = v14;
      uint64_t v17 = *(void **)(v16 + 32);
      MEMORY[0x270FA5388](v15, v18, v19, v20, v21);
      *(&v56 - 8) = v22;
      *(&v56 - 7) = v5;
      *(&v56 - 6) = v6;
      *(&v56 - 5) = v8;
      *(&v56 - 4) = v7;
      *((_DWORD *)&v56 - 6) = v10;
      uint64_t v54 = (uint64_t)&v80;
      uint64_t v78 = 0;
      unsigned __int8 v79 = -1;
      uint64_t v23 = (void *)swift_allocObject();
      v23[2] = &v78;
      v23[3] = sub_2505280BC;
      v23[4] = &v56 - 10;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = sub_25052810C;
      *(void *)(v24 + 24) = v23;
      uint64_t v76 = sub_250528128;
      uint64_t v77 = v24;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      long long v74 = sub_25058AC98;
      unint64_t v75 = &block_descriptor;
      uint64_t v25 = _Block_copy(&aBlock);
      uint64_t v26 = v77;
      id v27 = v17;
      swift_retain();
      swift_release();
      objc_msgSend(v27, sel_performBlockAndWait_, v25);
      _Block_release(v25);
      LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v25)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        sub_2504DBC4C(v26, (unint64_t)v23);
        sub_2504DBC4C(v70, v71);
        break;
      }
      if (v79 == 255) {
        goto LABEL_22;
      }
      uint64_t v26 = v64;
      uint64_t v28 = v66;
      if (v79)
      {
        *(void *)&long long aBlock = v78;
        id v49 = v78;
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F38);
        swift_willThrowTypedImpl();
        sub_250528148(v78, v79);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
        uint64_t v50 = v72;
        unint64_t v51 = v68;
        sub_250511528(v72, v68);
        uint64_t v52 = v69;
        sub_25051B8D4(v69, v14);
        sub_250511528(v50, v51);
        sub_25051B8D4(v52, v14);
        sub_250511528(v70, v71);
        sub_250511528(v26, v6);
        return swift_bridgeObjectRelease();
      }
      sub_250528148(v78, v79);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      uint64_t v29 = v72;
      unint64_t v30 = v68;
      sub_250511528(v72, v68);
      uint64_t v31 = v69;
      sub_25051B8D4(v69, v14);
      sub_250511528(v70, v71);
      sub_250511528(v26, v6);
      sub_2504DBC4C(v29, v30);
      sub_25051B908(v31, v14);
      uint64_t v67 = sub_250522A80(v29, v30, v31, v14);
      if (v28)
      {
        swift_bridgeObjectRelease();
        sub_250511528(v29, v30);
        sub_25051B8D4(v31, v14);
        sub_250511528(v29, v30);
        return sub_25051B8D4(v31, v14);
      }
      unint64_t v33 = v32;
      uint64_t v66 = 0;
      uint64_t v34 = v29;
      uint64_t v23 = (void *)v6;
      sub_250511528(v34, v30);
      unint64_t v60 = v14;
      sub_25051B8D4(v31, v14);
      sub_2504DAEFC((uint64_t)&unk_26B202540, (uint64_t)&aBlock, &qword_26B2022D8);
      if (!v75) {
        goto LABEL_24;
      }
      sub_2504DAEE4(&aBlock, (uint64_t)v84);
      uint64_t v35 = __swift_project_boxed_opaque_existential_1(v84, v85);
      uint64_t v58 = &v56;
      uint64_t v36 = *v35;
      uint64_t v80 = v67;
      unint64_t v81 = v33;
      unint64_t v59 = v33;
      id v61 = *(id *)(v36 + 32);
      MEMORY[0x270FA5388](v35, v37, v38, v39, v40);
      *(&v56 - 8) = v41;
      *(&v56 - 7) = v26;
      uint64_t v42 = v70;
      *(&v56 - 6) = v6;
      *(&v56 - 5) = v42;
      unint64_t v43 = v71;
      *(&v56 - 4) = v71;
      *((_DWORD *)&v56 - 6) = v10;
      uint64_t v54 = (uint64_t)&v80;
      uint64_t v78 = 0;
      unsigned __int8 v79 = -1;
      uint64_t v44 = (void *)swift_allocObject();
      v44[2] = &v78;
      v44[3] = sub_25052816C;
      v44[4] = &v56 - 10;
      uint64_t v45 = v26;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = sub_25052A538;
      *(void *)(v26 + 24) = v44;
      uint64_t v76 = sub_25052A4E4;
      uint64_t v77 = v26;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      long long v74 = sub_25058AC98;
      unint64_t v75 = &block_descriptor_175;
      unint64_t v46 = _Block_copy(&aBlock);
      sub_2504DBC4C(v45, v6);
      sub_2504DBC4C(v42, v43);
      id v47 = v61;
      swift_retain();
      swift_release();
      objc_msgSend(v47, sel_performBlockAndWait_, v46);
      _Block_release(v46);
      LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v46) {
        goto LABEL_21;
      }
      if (v79 == 255) {
        goto LABEL_23;
      }
      unint64_t v48 = v60;
      if (v79)
      {
        *(void *)&long long aBlock = v78;
        id v53 = v78;
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F38);
        swift_willThrowTypedImpl();
        sub_250528148(v78, v79);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
        sub_250511528(v67, v59);
        sub_250511528(v72, v68);
        sub_25051B8D4(v69, v48);
        sub_250511528(v70, v71);
        sub_250511528(v64, v6);
        return swift_bridgeObjectRelease();
      }
      uint64_t v9 = v63 + 5;
      sub_250528148(v78, v79);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      sub_250511528(v67, v59);
      sub_250511528(v72, v68);
      sub_25051B8D4(v69, v48);
      uint64_t v8 = v70;
      unint64_t v7 = v71;
      sub_250511528(v70, v71);
      uint64_t v5 = v64;
      sub_250511528(v64, v6);
      uint64_t v4 = v62 - 1;
      if (v62 == 1) {
        return swift_bridgeObjectRelease();
      }
    }
    sub_2504DAF60((uint64_t)&aBlock, &qword_26B2022D8);
    int v55 = 0;
    uint64_t v54 = 98;
    uint64_t result = sub_2505BE5F0();
    __break(1u);
  }
  return result;
}

uint64_t sub_2504FEA2C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = v1[2];
    unint64_t v4 = v1[3];
    uint64_t v5 = v1[5];
    unint64_t v6 = v1[6];
    unint64_t v32 = &v37;
    uint64_t v29 = swift_bridgeObjectRetain();
    unint64_t v7 = (unint64_t *)(v29 + 48);
    uint64_t v31 = v3;
    unint64_t v30 = v4;
    unint64_t v34 = v6;
    uint64_t v35 = v5;
    while (1)
    {
      int v8 = *((_DWORD *)v7 - 4);
      uint64_t v9 = *(v7 - 1);
      unint64_t v10 = *v7;
      sub_2504DBC4C(v9, *v7);
      sub_2504DBC4C(v9, v10);
      sub_2504DBC4C(v3, v4);
      sub_2504DBC4C(v5, v6);
      if (qword_26B202478 != -1) {
        swift_once();
      }
      uint64_t v33 = v2;
      swift_beginAccess();
      sub_2504DAEFC((uint64_t)&unk_26B202540, (uint64_t)&aBlock, &qword_26B2022D8);
      if (!v38) {
        break;
      }
      sub_2504DAEE4(&aBlock, (uint64_t)v44);
      uint64_t v11 = __swift_project_boxed_opaque_existential_1(v44, v44[3]);
      uint64_t v12 = *v11;
      v43[0] = v9;
      v43[1] = v10;
      uint64_t v13 = *(void **)(v12 + 32);
      MEMORY[0x270FA5388](v11, v14, v15, v16, v17);
      v25[2] = v18;
      v25[3] = v3;
      v25[4] = v4;
      v25[5] = v35;
      v25[6] = v34;
      int v26 = v8;
      uint64_t v27 = (uint64_t)v43;
      uint64_t v41 = 0;
      unsigned __int8 v42 = -1;
      uint64_t v19 = (void *)swift_allocObject();
      v19[2] = &v41;
      v19[3] = sub_25052816C;
      v19[4] = v25;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = sub_25052A538;
      *(void *)(v20 + 24) = v19;
      uint64_t v39 = sub_25052A4E4;
      uint64_t v40 = v20;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v37 = sub_25058AC98;
      uint64_t v38 = &block_descriptor_187;
      uint64_t v21 = _Block_copy(&aBlock);
      id v22 = v13;
      swift_retain();
      swift_release();
      objc_msgSend(v22, sel_performBlockAndWait_, v21);
      _Block_release(v21);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        break;
      }
      if (v42 == 255) {
        goto LABEL_14;
      }
      if (v42)
      {
        *(void *)&long long aBlock = v41;
        id v24 = v41;
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F38);
        swift_willThrowTypedImpl();
        sub_250528148(v41, v42);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        sub_250511528(v9, v10);
        sub_250511528(v9, v10);
        sub_250511528(v35, v34);
        sub_250511528(v31, v30);
        return swift_bridgeObjectRelease();
      }
      v7 += 3;
      sub_250528148(v41, v42);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      sub_250511528(v9, v10);
      sub_250511528(v9, v10);
      unint64_t v6 = v34;
      uint64_t v5 = v35;
      sub_250511528(v35, v34);
      uint64_t v3 = v31;
      unint64_t v4 = v30;
      sub_250511528(v31, v30);
      uint64_t v2 = v33 - 1;
      if (v33 == 1) {
        return swift_bridgeObjectRelease();
      }
    }
    sub_2504DAF60((uint64_t)&aBlock, &qword_26B2022D8);
    int v28 = 0;
    uint64_t v27 = 98;
    uint64_t result = sub_2505BE5F0();
    __break(1u);
  }
  return result;
}

uint64_t *sub_2504FEEB0(long long *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2505BE000();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*((unsigned char *)v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_2505BDC40();
    __swift_project_value_buffer(v22, (uint64_t)qword_269AC3188);
    os_log_type_t v23 = sub_2505BE3D0();
    swift_retain_n();
    id v24 = sub_2505BDC20();
    os_log_type_t v25 = v23;
    if (os_log_type_enabled(v24, v23))
    {
      int v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v41[0] = v27;
      *(_DWORD *)int v26 = 136315138;
      unint64_t v28 = sub_2504E0D6C(*((unsigned char *)v3 + v13));
      v41[5] = sub_25051171C(v28, v29, v41);
      sub_2505BE430();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2504D2000, v24, v25, "invalid group state, current state %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v27, -1, -1);
      MEMORY[0x25337FF10](v26, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v3 = &qword_269AB59E0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v20 = 310;
    long long v21 = xmmword_2505C0200;
    goto LABEL_15;
  }
  long long v38 = *a1;
  swift_beginAccess();
  if ((v3[4] & 1) != 0 || (unint64_t v14 = v3[12], v14 >> 60 == 15))
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_2505BDC40();
    __swift_project_value_buffer(v15, (uint64_t)qword_269AC3188);
    os_log_type_t v16 = sub_2505BE3D0();
    uint64_t v17 = sub_2505BDC20();
    os_log_type_t v18 = v16;
    if (os_log_type_enabled(v17, v16))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_2504D2000, v17, v18, "must be an administrator to create destroy request", v19, 2u);
      MEMORY[0x25337FF10](v19, -1, -1);
    }

    uint64_t v3 = &qword_269AB59E0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v20 = 378;
    long long v21 = xmmword_2505C0210;
LABEL_15:
    *(_OWORD *)(v20 + 8) = v21;
    *(void *)(v20 + 24) = 0x80000002505C8F90;
    *(void *)(v20 + 32) = 0xD000000000000052;
    *(void *)(v20 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return v3;
  }
  uint64_t v31 = v3[11];
  uint64_t v32 = v3[13];
  unint64_t v33 = v3[14];
  uint64_t v41[3] = (uint64_t)&type metadata for AdminSeed;
  v41[4] = sub_25051CA18();
  unint64_t v34 = (void *)swift_allocObject();
  v41[0] = (uint64_t)v34;
  v34[2] = v31;
  v34[3] = v14;
  v34[4] = v32;
  v34[5] = v33;
  sub_2504DBC4C(v31, v14);
  sub_25051B908(v32, v33);
  sub_2504DBC4C(v31, v14);
  sub_25051B908(v32, v33);
  if (qword_269AB5628 != -1) {
    swift_once();
  }
  sub_25056041C(v41, 1, qword_269AC3700, *(unint64_t *)algn_269AC3708);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  if (v2)
  {
    sub_25051B884(v31, v14, v32, v33);
  }
  else
  {
    unint64_t v42 = v33;
    unint64_t v35 = v3[3];
    v41[0] = v3[2];
    v41[1] = v35;
    long long v39 = xmmword_2505BFEE0;
    long long v40 = v38;
    unint64_t v37 = v35;
    *(void *)&long long v38 = v41[0];
    sub_2504DBC4C(v41[0], v35);
    uint64_t v3 = (uint64_t *)sub_250578710((uint64_t)v12, 5, 1, v41, (uint64_t *)&v40, (uint64_t *)&v39);
    sub_25051B884(v31, v14, v32, v42);
    sub_250511528(v38, v37);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  return v3;
}

uint8_t *sub_2504FF490(long long *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v6 - 8, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v37[-2] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2505BE000();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v37[-2] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6) {
    goto LABEL_6;
  }
  long long v36 = *a1;
  uint64_t v22 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v23 = type metadata accessor for UserKeyingInfo(0);
  sub_2504DAEFC(v22 + *(int *)(v23 + 44), (uint64_t)v12, &qword_269AB5A28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_2504DAF60((uint64_t)v12, &qword_269AB5A28);
LABEL_6:
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_2505BDC40();
    __swift_project_value_buffer(v25, (uint64_t)qword_269AC3188);
    uint64_t v3 = (uint8_t *)sub_2505BE3D0();
    swift_retain_n();
    int v26 = sub_2505BDC20();
    os_log_type_t v27 = v3;
    if (os_log_type_enabled(v26, (os_log_type_t)v3))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v39[0] = v28;
      *(_DWORD *)uint64_t v3 = 136315138;
      unint64_t v29 = sub_2504E0D6C(*(unsigned char *)(v4 + v21));
      *(void *)&long long v38 = sub_25051171C(v29, v30, v39);
      sub_2505BE430();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2504D2000, v26, v27, "invalid group state, current state %s", v3, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v28, -1, -1);
      MEMORY[0x25337FF10](v3, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v31 = 310;
    *(_OWORD *)(v31 + 8) = xmmword_2505C0220;
    *(void *)(v31 + 24) = 0x80000002505C8FC0;
    *(void *)(v31 + 32) = 0xD000000000000052;
    *(void *)(v31 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return v3;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v12, v13);
  unint64_t v24 = *(void *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v24 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_6;
  }
  uint64_t v33 = *(void *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  long long v34 = *(_OWORD *)(v4 + 16);
  long long v38 = v36;
  *(_OWORD *)long long v39 = v34;
  v37[0] = v33;
  v37[1] = v24;
  uint64_t v35 = sub_250578710((uint64_t)v20, 3, 1, v39, (uint64_t *)&v38, v37);
  if (!v2) {
    uint64_t v3 = (uint8_t *)v35;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
  return v3;
}

uint64_t sub_2504FF910(long long *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)&v42[-2] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2505BE000();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v42[-2] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6) {
    goto LABEL_6;
  }
  long long v41 = *a1;
  uint64_t v21 = v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v22 = type metadata accessor for UserKeyingInfo(0);
  sub_2504DAEFC(v21 + *(int *)(v22 + 44), (uint64_t)v11, &qword_269AB5A28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_2504DAF60((uint64_t)v11, &qword_269AB5A28);
LABEL_6:
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_2505BDC40();
    __swift_project_value_buffer(v24, (uint64_t)qword_269AC3188);
    os_log_type_t v25 = sub_2505BE3D0();
    swift_retain_n();
    int v26 = sub_2505BDC20();
    if (os_log_type_enabled(v26, v25))
    {
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v45[0] = v28;
      *(_DWORD *)os_log_type_t v27 = 136315138;
      unint64_t v29 = sub_2504E0D6C(*(unsigned char *)(v3 + v20));
      *(void *)&long long v44 = sub_25051171C(v29, v30, v45);
      sub_2505BE430();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2504D2000, v26, v25, "invalid group state, current state %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v28, -1, -1);
      MEMORY[0x25337FF10](v27, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v31 = 310;
    *(_OWORD *)(v31 + 8) = xmmword_2505C0240;
    *(void *)(v31 + 24) = 0x80000002505C8FE0;
    *(void *)(v31 + 32) = 0xD000000000000052;
    *(void *)(v31 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return v3;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v11, v12);
  unint64_t v23 = *(void *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v23 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    goto LABEL_6;
  }
  uint64_t v33 = *(void *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 32))
  {
    sub_2504DBC4C(v33, v23);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_2505BDC40();
    __swift_project_value_buffer(v34, (uint64_t)qword_269AC3188);
    os_log_type_t v35 = sub_2505BE3D0();
    long long v36 = sub_2505BDC20();
    if (os_log_type_enabled(v36, v35))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl(&dword_2504D2000, v36, v35, "must be an administrator to create demote request", v37, 2u);
      MEMORY[0x25337FF10](v37, -1, -1);
    }

    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v38 = 378;
    *(_OWORD *)(v38 + 8) = xmmword_2505C0230;
    *(void *)(v38 + 24) = 0x80000002505C8FE0;
    *(void *)(v38 + 32) = 0xD000000000000052;
    *(void *)(v38 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_25051B8D4(v33, v23);
  }
  else
  {
    long long v39 = *(_OWORD *)(v3 + 16);
    long long v43 = v41;
    long long v44 = v39;
    v42[0] = v33;
    v42[1] = v23;
    uint64_t v40 = sub_250578710((uint64_t)v19, 4, 1, (uint64_t *)&v44, (uint64_t *)&v43, v42);
    if (!v2)
    {
      uint64_t v3 = v40;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
      return v3;
    }
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  return v3;
}

void sub_2504FFF20()
{
  uint64_t v1 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 7)
  {
    uint64_t v2 = v0;
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_2505BDC40();
    __swift_project_value_buffer(v3, (uint64_t)qword_269AC3188);
    os_log_type_t v4 = sub_2505BE3D0();
    swift_retain_n();
    uint64_t v5 = sub_2505BDC20();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v12 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      unint64_t v9 = sub_2504E0D6C(*(unsigned char *)(v2 + v1));
      sub_25051171C(v9, v10, &v12);
      sub_2505BE430();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2504D2000, v5, v6, "invalid group state, current state %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v8, -1, -1);
      MEMORY[0x25337FF10](v7, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v11 = 310;
    *(_OWORD *)(v11 + 8) = xmmword_2505C0250;
    *(void *)(v11 + 24) = 0x80000002505C99D0;
    *(void *)(v11 + 32) = 0xD000000000000052;
    *(void *)(v11 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
  }
}

uint64_t *sub_250500180(long long *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2505BE040();
  uint64_t v56 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v6, v7, v8, v9);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_RSVPQueueRequest(0);
  MEMORY[0x270FA5388](v12, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_2505BE000();
  uint64_t v24 = MEMORY[0x270FA5388](v19, v20, v21, v22, v23);
  os_log_type_t v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*((unsigned char *)v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 6)
  {
    uint64_t v29 = v5;
    uint64_t v53 = v25;
    uint64_t v54 = v24;
    long long v55 = *a1;
    uint64_t v30 = v3[9];
    unint64_t v31 = v3[10];
    unint64_t v59 = &type metadata for MemberSeed;
    unint64_t v60 = sub_250522A2C();
    uint64_t v57 = v30;
    unint64_t v58 = v31;
    sub_2504DBC4C(v30, v31);
    sub_2504DBC4C(v30, v31);
    if (qword_269AB5650 != -1) {
      swift_once();
    }
    sub_25056041C(&v57, 1, qword_269AC3750, *(unint64_t *)algn_269AC3758);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    uint64_t v32 = sub_250511528(v30, v31);
    if (!v2)
    {
      MEMORY[0x270FA5388](v32, v33, v34, v35, v36);
      *(&v53 - 4) = (uint64_t)v3;
      *(_OWORD *)(&v53 - 3) = v55;
      *(&v53 - 1) = (uint64_t)v27;
      *(void *)&long long v55 = sub_250528338(&qword_269AB5AB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
      sub_2505BDB80();
      uint64_t v37 = sub_25050D0BC(&qword_269AB5468, &qword_269AC3230, (unint64_t *)algn_269AC3238);
      unint64_t v39 = v38;
      uint64_t v57 = v37;
      unint64_t v58 = v38;
      sub_25051AE60();
      sub_2505BDFF0();
      sub_250511528(v37, v39);
      uint64_t v49 = sub_2505BE010();
      uint64_t v51 = v50;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v29);
      sub_250511528(*((void *)v18 + 7), *((void *)v18 + 8));
      *((void *)v18 + 7) = v49;
      *((void *)v18 + 8) = v51;
      uint64_t v3 = (uint64_t *)sub_2505BDB40();
      sub_25051AF3C((uint64_t)v18, type metadata accessor for GKCrypto_RSVPQueueRequest);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v54);
    }
  }
  else
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v40 = sub_2505BDC40();
    __swift_project_value_buffer(v40, (uint64_t)qword_269AC3188);
    os_log_type_t v41 = sub_2505BE3D0();
    swift_retain_n();
    unint64_t v42 = sub_2505BDC20();
    os_log_type_t v43 = v41;
    if (os_log_type_enabled(v42, v41))
    {
      long long v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v57 = v45;
      *(_DWORD *)long long v44 = 136315138;
      unint64_t v46 = sub_2504E0D6C(*((unsigned char *)v3 + v28));
      uint64_t v61 = sub_25051171C(v46, v47, &v57);
      sub_2505BE430();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2504D2000, v42, v43, "invalid state transition in group, current state %s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v45, -1, -1);
      MEMORY[0x25337FF10](v44, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v3 = &qword_269AB59E0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v48 = 347;
    *(_OWORD *)(v48 + 8) = xmmword_2505C0260;
    *(void *)(v48 + 24) = 0x80000002505C9010;
    *(void *)(v48 + 32) = 0xD000000000000052;
    *(void *)(v48 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
  }
  return v3;
}

uint64_t sub_2505007C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v26 = a5;
  uint64_t v27 = sub_2505BE0B0();
  uint64_t v9 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  uint64_t v17 = *(void *)(a2 + 16);
  unint64_t v16 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(a1 + 24);
  unint64_t v19 = *(void *)(a1 + 32);
  sub_2504DBC4C(v17, v16);
  sub_250511528(v18, v19);
  *(void *)(a1 + 24) = v17;
  *(void *)(a1 + 32) = v16;
  uint64_t v20 = *(void *)(a1 + 8);
  unint64_t v21 = *(void *)(a1 + 16);
  sub_2504DBC4C(a3, a4);
  sub_250511528(v20, v21);
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  sub_2505BDFA0();
  uint64_t v22 = sub_2505BDF10();
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v27);
  uint64_t result = sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  *(void *)(a1 + 40) = v22;
  *(void *)(a1 + 48) = v24;
  return result;
}

uint64_t sub_25050092C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v153 = a3;
  uint64_t v155 = sub_2505BE000();
  uint64_t v154 = *(void *)(v155 - 8);
  MEMORY[0x270FA5388](v155, v5, v6, v7, v8);
  uint64_t v160 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2505BE0B0();
  uint64_t v158 = *(void *)(v10 - 8);
  uint64_t v159 = v10;
  uint64_t v15 = MEMORY[0x270FA5388](v10, v11, v12, v13, v14);
  uint64_t v156 = (char *)&v149 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15, v17, v18, v19, v20);
  uint64_t v161 = (uint64_t)&v149 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
  uint64_t v27 = MEMORY[0x270FA5388](v22 - 8, v23, v24, v25, v26);
  unint64_t v165 = (unint64_t)&v149 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27, v29, v30, v31, v32);
  uint64_t v164 = (uint64_t)&v149 - v33;
  uint64_t v34 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v162 = *(void *)(v34 - 8);
  uint64_t v163 = v34;
  uint64_t v39 = MEMORY[0x270FA5388](v34, v35, v36, v37, v38);
  os_log_type_t v41 = (char *)&v149 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39, v42, v43, v44, v45);
  unint64_t v47 = (char *)&v149 - v46;
  uint64_t v48 = sub_2505BDA70();
  MEMORY[0x270FA5388](v48 - 8, v49, v50, v51, v52);
  uint64_t v53 = type metadata accessor for GKCrypto_SignedRSVP(0);
  uint64_t v58 = MEMORY[0x270FA5388](v53, v54, v55, v56, v57);
  unint64_t v60 = (char *)&v149 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58, v61, v62, v63, v64);
  uint64_t v66 = (_DWORD *)((char *)&v149 - v65);
  unint64_t v171 = 0;
  long long v169 = 0u;
  long long v170 = 0u;
  sub_2504DBC4C(a1, a2);
  sub_2505BDA60();
  sub_250528338(&qword_269AB5AC0, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
  uint64_t v67 = a1;
  unint64_t v68 = a2;
  unint64_t v69 = v166;
  uint64_t result = sub_2505BDB30();
  if (!v69)
  {
    uint64_t v71 = (uint64_t)v47;
    uint64_t v72 = v163;
    uint64_t v166 = 0;
    uint64_t v73 = v162;
    unint64_t v152 = v41;
    unint64_t v74 = v165;
    uint64_t v150 = v67;
    unint64_t v151 = v68;
    if (*v66 != 1)
    {
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v80 = sub_2505BDC40();
      __swift_project_value_buffer(v80, (uint64_t)qword_269AC3188);
      os_log_type_t v81 = sub_2505BE3D0();
      uint64_t v82 = (int *)v60;
      sub_25051B91C((uint64_t)v66, (uint64_t)v60, type metadata accessor for GKCrypto_SignedRSVP);
      unint64_t v83 = sub_2505BDC20();
      os_log_type_t v84 = v81;
      if (os_log_type_enabled(v83, v81))
      {
        uint64_t v85 = swift_slowAlloc();
        *(_DWORD *)uint64_t v85 = 67109376;
        int v86 = *v82;
        sub_25051AF3C((uint64_t)v82, type metadata accessor for GKCrypto_SignedRSVP);
        LODWORD(v169) = v86;
        sub_2505BE430();
        *(_WORD *)(v85 + 8) = 1024;
        LODWORD(v169) = 1;
        sub_2505BE430();
        _os_log_impl(&dword_2504D2000, v83, v84, "unsupported group version, got %u expeected %u", (uint8_t *)v85, 0xEu);
        MEMORY[0x25337FF10](v85, -1, -1);
      }
      else
      {
        sub_25051AF3C((uint64_t)v82, type metadata accessor for GKCrypto_SignedRSVP);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v91 = 305;
      *(_OWORD *)(v91 + 8) = xmmword_2505C0270;
      *(void *)(v91 + 24) = 0x80000002505C9030;
      *(void *)(v91 + 32) = 0xD000000000000052;
      *(void *)(v91 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      return sub_25051AF3C((uint64_t)v66, type metadata accessor for GKCrypto_SignedRSVP);
    }
    uint64_t v75 = *(int *)(v53 + 28);
    uint64_t v149 = v66;
    uint64_t v76 = (uint64_t)v66 + v75;
    uint64_t v77 = v164;
    sub_2504DAEFC((uint64_t)v66 + v75, v164, &qword_269AB5AB8);
    uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    uint64_t v79 = v71;
    if (v78(v77, 1, v72) == 1)
    {
      *(_DWORD *)uint64_t v71 = 0;
      *(void *)(v71 + 8) = 0;
      *(unsigned char *)(v71 + 16) = 1;
      *(_OWORD *)(v71 + 24) = xmmword_2505BFEF0;
      *(_OWORD *)(v71 + 40) = xmmword_2505BFEF0;
      *(_OWORD *)(v71 + 56) = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60(v77, &qword_269AB5AB8);
    }
    else
    {
      sub_25051C8F4(v77, v71, type metadata accessor for GKCrypto_RSVP);
    }
    uint64_t v87 = v74;
    uint64_t v88 = (uint64_t)v152;
    unint64_t v89 = v166;
    uint64_t v166 = *(void *)(v71 + 8);
    int v90 = *(unsigned __int8 *)(v71 + 16);
    sub_25051AF3C(v79, type metadata accessor for GKCrypto_RSVP);
    sub_2504DAEFC(v76, v87, &qword_269AB5AB8);
    if (v78(v87, 1, v72) == 1)
    {
      *(_DWORD *)uint64_t v88 = 0;
      *(void *)(v88 + 8) = 0;
      *(unsigned char *)(v88 + 16) = 1;
      *(_OWORD *)(v88 + 24) = xmmword_2505BFEF0;
      *(_OWORD *)(v88 + 40) = xmmword_2505BFEF0;
      *(_OWORD *)(v88 + 56) = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60(v87, &qword_269AB5AB8);
    }
    else
    {
      sub_25051C8F4(v87, v88, type metadata accessor for GKCrypto_RSVP);
    }
    uint64_t v66 = v149;
    uint64_t v92 = v160;
    uint64_t v93 = *(void *)(v88 + 56);
    unint64_t v94 = *(void *)(v88 + 64);
    sub_2504DBC4C(v93, v94);
    sub_25051AF3C(v88, type metadata accessor for GKCrypto_RSVP);
    *(void *)&long long v169 = v93;
    *((void *)&v169 + 1) = v94;
    uint64_t v95 = v161;
    sub_2505BE0A0();
    if (v89) {
      return sub_25051AF3C((uint64_t)v66, type metadata accessor for GKCrypto_SignedRSVP);
    }
    if (v90)
    {
      uint64_t v96 = v166;
      if ((unint64_t)(v166 - 1) < 4)
      {
        uint64_t v97 = v157;
        sub_2505019F0((uint64_t)&v169);
        if (v170 == 2)
        {
          if (qword_269AB5418 != -1) {
            swift_once();
          }
          uint64_t v98 = sub_2505BDC40();
          __swift_project_value_buffer(v98, (uint64_t)qword_269AC3188);
          os_log_type_t v99 = sub_2505BE3D0();
          unint64_t v100 = sub_2505BDC20();
          os_log_type_t v101 = v99;
          if (os_log_type_enabled(v100, v99))
          {
            uint64_t v102 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v102 = 0;
            _os_log_impl(&dword_2504D2000, v100, v101, "diversified key not found in group", v102, 2u);
            MEMORY[0x25337FF10](v102, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v103 = 379;
          long long v104 = xmmword_2505C02A0;
LABEL_30:
          *(_OWORD *)(v103 + 8) = v104;
          *(void *)(v103 + 24) = 0x80000002505C9030;
          *(void *)(v103 + 32) = 0xD000000000000052;
          *(void *)(v103 + 40) = 0x80000002505C8CB0;
          swift_willThrow();
          (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v95, v159);
          return sub_25051AF3C((uint64_t)v66, type metadata accessor for GKCrypto_SignedRSVP);
        }
        uint64_t v118 = *(void *)(v97 + 16);
        unint64_t v117 = *(void *)(v97 + 24);
        v168[0] = v118;
        v168[1] = v117;
        long long v167 = v169;
        char v172 = v170 & 1;
        sub_2504DBC4C(v118, v117);
        sub_250578E7C(v96, 1, v168, (uint64_t *)&v167, &v172, (uint64_t)&v169);
        unint64_t v120 = *((void *)&v169 + 1);
        uint64_t v119 = v169;
        unint64_t v121 = *((void *)&v170 + 1);
        uint64_t v166 = v170;
        char v122 = v171;
        LODWORD(v165) = BYTE1(v171);
LABEL_41:
        *(void *)&long long v169 = v118;
        *((void *)&v169 + 1) = v117;
        sub_2504DBC4C(v118, v117);
        uint64_t v123 = v161;
        sub_250578FF0(v161, (uint64_t *)&v169, v150, v151);
        sub_250511528(v118, v117);
        (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v123, v159);
        uint64_t result = sub_25051AF3C((uint64_t)v66, type metadata accessor for GKCrypto_SignedRSVP);
        uint64_t v131 = v153;
        *uint64_t v153 = v119;
        v131[1] = v120;
        v131[2] = v166;
        v131[3] = v121;
        *((unsigned char *)v131 + 32) = v122;
        *((unsigned char *)v131 + 33) = v165;
        return result;
      }
      if (v166)
      {
        uint64_t v110 = v157;
        swift_beginAccess();
        if ((*(unsigned char *)(v110 + 32) & 1) != 0 || (unint64_t v111 = *(void *)(v110 + 96), v111 >> 60 == 15))
        {
          if (qword_269AB5418 != -1) {
            swift_once();
          }
          uint64_t v112 = sub_2505BDC40();
          __swift_project_value_buffer(v112, (uint64_t)qword_269AC3188);
          os_log_type_t v113 = sub_2505BE3D0();
          os_log_t v114 = sub_2505BDC20();
          os_log_type_t v115 = v113;
          if (os_log_type_enabled(v114, v113))
          {
            uint64_t v116 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v116 = 0;
            _os_log_impl(&dword_2504D2000, v114, v115, "member is not an administrator", v116, 2u);
            MEMORY[0x25337FF10](v116, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v103 = 378;
          long long v104 = xmmword_2505C0290;
          goto LABEL_30;
        }
        uint64_t v124 = *(void *)(v110 + 88);
        uint64_t v126 = *(void *)(v110 + 104);
        unint64_t v125 = *(void *)(v110 + 112);
        *((void *)&v170 + 1) = &type metadata for AdminSeed;
        unint64_t v171 = sub_25051CA18();
        uint64_t v127 = (void *)swift_allocObject();
        *(void *)&long long v169 = v127;
        v127[2] = v124;
        v127[3] = v111;
        v127[4] = v126;
        v127[5] = v125;
        sub_2504DBC4C(v124, v111);
        sub_25051B908(v126, v125);
        uint64_t v163 = v124;
        uint64_t v166 = v111;
        sub_2504DBC4C(v124, v111);
        uint64_t v164 = v126;
        unint64_t v165 = v125;
        sub_25051B908(v126, v125);
        if (qword_269AB5628 != -1) {
          swift_once();
        }
        sub_25056041C(&v169, 1, qword_269AC3700, *(unint64_t *)algn_269AC3708);
        unint64_t v128 = v156;
        uint64_t v129 = v155;
        uint64_t v130 = v154;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
        sub_2505BDFA0();
        (*(void (**)(char *, uint64_t))(v130 + 8))(v92, v129);
        uint64_t v132 = sub_2505BDEE0();
        uint64_t v133 = v128;
        unint64_t v135 = v134;
        uint64_t v136 = sub_2505BDEE0();
        unint64_t v138 = v137;
        char v139 = sub_25051AAD8(v132, v135, v136, v137);
        sub_250511528(v136, v138);
        sub_250511528(v132, v135);
        uint64_t v140 = *(void (**)(char *, uint64_t))(v158 + 8);
        v140(v133, v159);
        if ((v139 & 1) == 0)
        {
          if (qword_269AB5418 != -1) {
            swift_once();
          }
          uint64_t v141 = sub_2505BDC40();
          __swift_project_value_buffer(v141, (uint64_t)qword_269AC3188);
          os_log_type_t v142 = sub_2505BE3D0();
          long long v143 = sub_2505BDC20();
          os_log_type_t v144 = v142;
          BOOL v145 = os_log_type_enabled(v143, v142);
          uint64_t v146 = v161;
          if (v145)
          {
            int v147 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)int v147 = 0;
            _os_log_impl(&dword_2504D2000, v143, v144, "administrator verification key does not correspond to the group", v147, 2u);
            MEMORY[0x25337FF10](v147, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v148 = 380;
          *(_OWORD *)(v148 + 8) = xmmword_2505C0280;
          *(void *)(v148 + 24) = 0x80000002505C9030;
          *(void *)(v148 + 32) = 0xD000000000000052;
          *(void *)(v148 + 40) = 0x80000002505C8CB0;
          swift_willThrow();
          sub_25051B884(v163, v166, v164, v165);
          v140((char *)v146, v159);
          return sub_25051AF3C((uint64_t)v66, type metadata accessor for GKCrypto_SignedRSVP);
        }
        uint64_t v119 = *(void *)(v157 + 16);
        unint64_t v120 = *(void *)(v157 + 24);
        sub_2504DBC4C(v119, v120);
        sub_25051B884(v163, v166, v164, v165);
        uint64_t v166 = 0;
        LODWORD(v165) = 1;
        char v122 = 2;
        unint64_t v121 = 0xF000000000000000;
        uint64_t v118 = v119;
        unint64_t v117 = v120;
        goto LABEL_41;
      }
    }
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v105 = sub_2505BDC40();
    __swift_project_value_buffer(v105, (uint64_t)qword_269AC3188);
    os_log_type_t v106 = sub_2505BE3D0();
    unint64_t v107 = sub_2505BDC20();
    os_log_type_t v108 = v106;
    if (os_log_type_enabled(v107, v106))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl(&dword_2504D2000, v107, v108, "unknown RSVPQueueRequest type", v109, 2u);
      MEMORY[0x25337FF10](v109, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v103 = 381;
    long long v104 = xmmword_2505C02B0;
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_2505019F0@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_25051B39C(v3, (void (*)(long long *__return_ptr, uint64_t, uint64_t))sub_2505280A0);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1)
  {
    unint64_t v6 = *(void *)(v4 + 16);
    if (v6 > 1)
    {
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v10 = sub_2505BDC40();
      __swift_project_value_buffer(v10, (uint64_t)qword_269AC3188);
      os_log_type_t v11 = sub_2505BE3D0();
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_2505BDC20();
      if (os_log_type_enabled(v12, v11))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 134217984;
        swift_bridgeObjectRelease();
        sub_2505BE430();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2504D2000, v12, v11, "invalid group state (matching members count %ld", v13, 0xCu);
        MEMORY[0x25337FF10](v13, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v14 = 310;
      *(_OWORD *)(v14 + 8) = xmmword_2505C02C0;
      *(void *)(v14 + 24) = 0x80000002505C9730;
      *(void *)(v14 + 32) = 0xD000000000000052;
      *(void *)(v14 + 40) = 0x80000002505C8CB0;
      return swift_willThrow();
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 + 32);
        unint64_t v8 = *(void *)(v4 + 40);
        char v9 = *(unsigned char *)(v4 + 48);
        sub_2504DBC4C(v7, v8);
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        char v9 = 2;
      }
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = v9;
    }
  }
  return result;
}

uint64_t sub_250501C84@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5ED0);
  MEMORY[0x270FA5388](v8 - 8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2505BE0B0();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15, v17, v18, v19, v20);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a1;
  unint64_t v24 = a1[1];
  uint64_t v46 = v23;
  uint64_t v25 = type metadata accessor for GroupMembership.MemberProperties(0);
  sub_2504DAEFC((uint64_t)&a2[*(int *)(v25 + 28)], (uint64_t)v14, &qword_269AB5ED0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_2504DAF60((uint64_t)v14, &qword_269AB5ED0);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_2505BDC40();
    __swift_project_value_buffer(v26, (uint64_t)qword_269AC3188);
    os_log_type_t v27 = sub_2505BE3D0();
    uint64_t v28 = sub_2505BDC20();
    os_log_type_t v29 = v27;
    if (os_log_type_enabled(v28, v27))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_2504D2000, v28, v29, "invalid group state", v30, 2u);
      MEMORY[0x25337FF10](v30, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v31 = 310;
    *(_OWORD *)(v31 + 8) = xmmword_2505C02D0;
    *(void *)(v31 + 24) = 0x80000002505C9730;
    *(void *)(v31 + 32) = 0xD000000000000052;
    *(void *)(v31 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v43 = a2;
    uint64_t v44 = a4;
    uint64_t v45 = v4;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v22, v14, v15);
    uint64_t v33 = sub_2505BDEE0();
    unint64_t v35 = v34;
    uint64_t v36 = sub_2505BDEE0();
    unint64_t v38 = v37;
    char v39 = sub_25051AAD8(v33, v35, v36, v37);
    sub_250511528(v36, v38);
    sub_250511528(v33, v35);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v22, v15);
    if (v39)
    {
      char v40 = *v43;
      uint64_t v41 = v46;
      uint64_t result = sub_2504DBC4C(v46, v24);
    }
    else
    {
      uint64_t v41 = 0;
      unint64_t v24 = 0;
      char v40 = 2;
    }
    uint64_t v42 = v44;
    *uint64_t v44 = v41;
    v42[1] = v24;
    *((unsigned char *)v42 + 16) = v40;
  }
  return result;
}

uint64_t sub_250502020@<X0>(void *a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v84 = a5;
  uint64_t v86 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  MEMORY[0x270FA5388](v86, v10, v11, v12, v13);
  uint64_t v87 = (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2505BDA70();
  uint64_t v20 = MEMORY[0x270FA5388](v15 - 8, v16, v17, v18, v19);
  uint64_t v85 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v22, v23, v24, v25);
  unint64_t v89 = (char *)&v82 - v26;
  uint64_t v88 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  MEMORY[0x270FA5388](v88, v27, v28, v29, v30);
  int v90 = (char *)&v82 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_2505BDDD0();
  uint64_t v91 = *(void *)(v32 - 8);
  uint64_t v92 = v32;
  MEMORY[0x270FA5388](v32, v33, v34, v35, v36);
  unint64_t v38 = (char *)&v82 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_2505BDCE0();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v94 = v39;
  uint64_t v95 = v40;
  MEMORY[0x270FA5388](v39, v41, v42, v43, v44);
  uint64_t v99 = (uint64_t)&v82 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v96 = *a3;
  if (qword_269AB5450 != -1) {
    swift_once();
  }
  uint64_t v93 = v38;
  uint64_t v46 = qword_269AC3200;
  unint64_t v47 = *(void *)algn_269AC3208;
  sub_2504DBC4C(qword_269AC3200, *(unint64_t *)algn_269AC3208);
  sub_2504DBC4C(v46, v47);
  swift_bridgeObjectRetain();
  uint64_t v48 = a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v48 = sub_250570DC0(0, a4[2] + 1, 1, a4);
  }
  unint64_t v50 = v48[2];
  unint64_t v49 = v48[3];
  if (v50 >= v49 >> 1) {
    uint64_t v48 = sub_250570DC0((void *)(v49 > 1), v50 + 1, 1, v48);
  }
  v48[2] = v50 + 1;
  uint64_t v51 = &v48[2 * v50];
  v51[4] = v46;
  v51[5] = v47;
  sub_250511528(v46, v47);
  uint64_t v52 = (void (*)(uint64_t, uint64_t))sub_250576544((uint64_t)v48);
  unint64_t v54 = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = a1[1];
  unint64_t v56 = a1[2];
  sub_250590418(a2, (unint64_t *)&v96, v52, v54, v55, v56, v99);
  uint64_t result = sub_250511528((uint64_t)v52, v54);
  if (!v5)
  {
    unint64_t v58 = qword_269AB5460;
    if (qword_269AB5460 != -1) {
      swift_once();
    }
    int64_t v59 = a4[2];
    int64_t v60 = v59 + 2;
    if (__OFADD__(v59, 2))
    {
      __break(1u);
    }
    else
    {
      a2 = qword_269AC3220;
      uint64_t v52 = *(void (**)(uint64_t, uint64_t))algn_269AC3228;
      swift_bridgeObjectRetain();
      sub_2504DBC4C(a2, (unint64_t)v52);
      sub_2504DBC4C(v55, v56);
      int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v60 > a4[3] >> 1)
      {
        if (v59 <= v60) {
          int64_t v62 = v59 + 2;
        }
        else {
          int64_t v62 = v59;
        }
        a4 = sub_250570DC0(isUniquelyReferenced_nonNull_native, v62, 1, a4);
      }
      sub_2504DBC4C(a2, (unint64_t)v52);
      int64_t v60 = a4[2];
      unint64_t v58 = a4[3];
      int64_t v59 = v60 + 1;
      if (v60 < v58 >> 1) {
        goto LABEL_18;
      }
    }
    a4 = sub_250570DC0((void *)(v58 > 1), v59, 1, a4);
LABEL_18:
    a4[2] = v59;
    uint64_t v63 = &a4[2 * v60];
    v63[4] = a2;
    v63[5] = v52;
    sub_2504DBC4C(v55, v56);
    unint64_t v64 = a4[3];
    int64_t v65 = v60 + 2;
    if (v65 > (uint64_t)(v64 >> 1)) {
      a4 = sub_250570DC0((void *)(v64 > 1), v65, 1, a4);
    }
    a4[2] = v65;
    uint64_t v66 = &a4[2 * v59];
    v66[4] = v55;
    v66[5] = v56;
    sub_250511528(v55, v56);
    sub_250511528(a2, (unint64_t)v52);
    uint64_t v67 = sub_250576544((uint64_t)a4);
    unint64_t v69 = v68;
    swift_bridgeObjectRelease();
    uint64_t v70 = a1[3];
    unint64_t v71 = a1[4];
    sub_2504DBC4C(v70, v71);
    uint64_t v72 = v93;
    sub_25059F624(v70, v71);
    uint64_t v73 = v67;
    *(void *)&long long v96 = v67;
    *((void *)&v96 + 1) = v69;
    sub_25051AE60();
    uint64_t v74 = sub_2505BDD30();
    unint64_t v76 = v75;
    unint64_t v83 = v69;
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
    sub_2504DBC4C(v74, v75);
    sub_2504DBC4C(v74, v76);
    sub_2505BDA60();
    sub_250528338(&qword_269AB5EA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    uint64_t v77 = (uint64_t)v90;
    sub_2505BDB30();
    uint64_t v78 = *(void *)(v77 + 8);
    unint64_t v79 = *(void *)(v77 + 16);
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
    sub_2504DBC4C(v78, v79);
    sub_2505BDA60();
    sub_250528338(&qword_269AB5EA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_2505BDB30();
    sub_250511528(v73, v83);
    sub_250511528(v74, v76);
    sub_250511528(v74, v76);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v72, v92);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v99, v94);
    uint64_t v80 = v84;
    sub_25051C8F4(v77, v84, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    uint64_t v81 = type metadata accessor for Group.GroupCiphertextContents(0);
    return sub_25051C8F4(v87, v80 + *(int *)(v81 + 20), type metadata accessor for GKCrypto_GroupAETextToSign);
  }
  return result;
}

uint64_t sub_250502960(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v12 - 8, v13, v14, v15, v16);
  uint64_t v18 = (char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  MEMORY[0x270FA5388](v19 - 8, v20, v21, v22, v23);
  uint64_t v25 = (void *)((char *)v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v26 - 8, v27, v28, v29, v30);
  uint64_t v32 = (char *)v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)a2;
  unint64_t v34 = *(void *)(a2 + 8);
  sub_2504DBC4C(*(void *)a2, v34);
  uint64_t result = GroupKitUserID.init(_:)(v33, v34, &v57);
  if (!v2)
  {
    uint64_t v37 = v57;
    unint64_t v36 = v58;
    sub_2504DB330(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40), &v60);
    v54[1] = a1;
    BOOL v59 = v60;
    uint64_t v38 = *(void *)(a2 + 48);
    unint64_t v56 = *(void *)(a2 + 56);
    switch(v56 >> 62)
    {
      case 1uLL:
        uint64_t v55 = v37;
        if (__OFSUB__(HIDWORD(v38), v38))
        {
          __break(1u);
LABEL_14:
          __break(1u);
          JUMPOUT(0x250502E4CLL);
        }
        unint64_t v39 = v36;
        uint64_t v40 = HIDWORD(v38) - (int)v38;
LABEL_7:
        sub_2504DBC4C(v38, v56);
LABEL_8:
        BOOL v43 = v40 == 32;
        unint64_t v36 = v39;
        uint64_t v37 = v55;
        if (v43)
        {
          v54[0] = v38;
          uint64_t v57 = v55;
          unint64_t v58 = v36;
          uint64_t v44 = *(void *)(a2 + 16);
          unint64_t v45 = *(void *)(a2 + 24);
          uint64_t v46 = sub_2505BE000();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v18, 1, 1, v46);
          uint64_t v47 = sub_2505BDF90();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v11, 1, 1, v47);
          sub_2504DBC4C(v37, v36);
          sub_2504DBC4C(v44, v45);
          sub_2505625AC(&v57, v44, v45, (uint64_t)v18, (uint64_t)v11, v25);
          uint64_t v49 = type metadata accessor for UserKeyingInfo(0);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v25, 0, 1, v49);
          uint64_t v50 = type metadata accessor for GroupMembership.MemberProperties(0);
          uint64_t v51 = &v32[*(int *)(v50 + 28)];
          uint64_t v52 = sub_2505BE0B0();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 1, 1, v52);
          *uint64_t v32 = v59;
          unint64_t v53 = v56;
          *((void *)v32 + 1) = v54[0];
          *((void *)v32 + 2) = v53;
          sub_2505283F0((uint64_t)v25, (uint64_t)&v32[*(int *)(v50 + 24)], &qword_269AB5E80);
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v32, 0, 1, v50);
          uint64_t result = sub_2504E6830((uint64_t)v32, v37, v36);
        }
        else
        {
LABEL_11:
          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v48 = 263;
          *(_OWORD *)(v48 + 8) = xmmword_2505BFE90;
          *(_OWORD *)(v48 + 24) = xmmword_2505BFE50;
          *(void *)(v48 + 40) = 0x80000002505C8CB0;
          swift_willThrow();
          sub_250511528(v38, v56);
          uint64_t result = sub_250511528(v37, v36);
        }
        break;
      case 2uLL:
        uint64_t v55 = v37;
        unint64_t v39 = v36;
        uint64_t v42 = *(void *)(v38 + 16);
        uint64_t v41 = *(void *)(v38 + 24);
        uint64_t v40 = v41 - v42;
        if (!__OFSUB__(v41, v42)) {
          goto LABEL_7;
        }
        goto LABEL_14;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v55 = v37;
        unint64_t v39 = v36;
        uint64_t v40 = BYTE6(v56);
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_250502E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5FE0);
  uint64_t v19 = MEMORY[0x270FA5388](v55, v15, v16, v17, v18);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19, v22, v23, v24, v25);
  uint64_t v54 = (uint64_t)&v48 - v26;
  uint64_t v27 = *(void *)(a1 + 16);
  if (v27 == *(void *)(a2 + 16))
  {
    uint64_t v57 = v3;
    uint64_t v49 = a3;
    uint64_t v58 = MEMORY[0x263F8EE80];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v50 = a2;
    uint64_t v51 = a1;
    if (v27)
    {
      uint64_t v28 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v52 = *(void *)(v8 + 72);
      unint64_t v53 = v14;
      uint64_t v29 = (unint64_t *)(a2 + 40);
      uint64_t v30 = &qword_269AB5FE0;
      while (1)
      {
        sub_25051B91C(v28, (uint64_t)v14, type metadata accessor for GKCrypto_GroupAETextToSign.User);
        if (!v27)
        {
          sub_25051AF3C((uint64_t)v14, type metadata accessor for GKCrypto_GroupAETextToSign.User);
          goto LABEL_14;
        }
        uint64_t v56 = v27;
        uint64_t v31 = *(v29 - 1);
        unint64_t v32 = *v29;
        uint64_t v33 = v54;
        unint64_t v34 = v30;
        uint64_t v35 = (uint64_t *)(v54 + *(int *)(v55 + 48));
        sub_25051C8F4((uint64_t)v14, v54, type metadata accessor for GKCrypto_GroupAETextToSign.User);
        *uint64_t v35 = v31;
        v35[1] = v32;
        uint64_t v30 = v34;
        sub_2505283F0(v33, (uint64_t)v21, v34);
        sub_2504DBC4C(v31, v32);
        uint64_t v36 = v57;
        sub_25050336C((uint64_t)&v58, (uint64_t)v21);
        uint64_t v57 = v36;
        if (v36) {
          break;
        }
        sub_2504DAF60((uint64_t)v21, v34);
        v28 += v52;
        v29 += 2;
        uint64_t v27 = v56 - 1;
        if (v56 == 1) {
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      sub_2504DAF60((uint64_t)v21, &qword_269AB5FE0);
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease_n();
    }
    else
    {
LABEL_14:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v44 = v57;
      uint64_t result = sub_2505AFBF8(v58, &v58);
      unint64_t v45 = v49;
      if (!v44)
      {
        uint64_t v46 = v58;
        uint64_t result = sub_2505B37A8(v58);
        if (result)
        {
          *unint64_t v45 = v46;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v47 = 268;
          *(_OWORD *)(v47 + 8) = xmmword_2505C0300;
          *(void *)(v47 + 24) = 0x80000002505CA050;
          *(void *)(v47 + 32) = 0xD00000000000005CLL;
          *(void *)(v47 + 40) = 0x80000002505CA080;
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  else
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_2505BDC40();
    __swift_project_value_buffer(v37, (uint64_t)qword_269AC3188);
    os_log_type_t v38 = sub_2505BE3D0();
    unint64_t v39 = sub_2505BDC20();
    os_log_type_t v40 = v38;
    if (os_log_type_enabled(v39, v38))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_2504D2000, v39, v40, "mismatch between group user count and verification key count", v41, 2u);
      MEMORY[0x25337FF10](v41, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v42 = 349;
    *(_OWORD *)(v42 + 8) = xmmword_2505C02F0;
    *(void *)(v42 + 24) = 0x80000002505CA000;
    *(void *)(v42 + 32) = 0xD000000000000052;
    *(void *)(v42 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25050336C(uint64_t a1, uint64_t a2)
{
  uint64_t v109 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v3 - 8, v4, v5, v6, v7);
  uint64_t v113 = (uint64_t)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  MEMORY[0x270FA5388](v9 - 8, v10, v11, v12, v13);
  os_log_type_t v115 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v15 - 8, v16, v17, v18, v19);
  os_log_t v114 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  MEMORY[0x270FA5388](v21 - 8, v22, v23, v24, v25);
  uint64_t v117 = (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v110 = v27;
  uint64_t v111 = v28;
  MEMORY[0x270FA5388](v27, v29, v30, v31, v32);
  uint64_t v112 = (char *)&v104 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_2505BE0B0();
  uint64_t v116 = *(void *)(v118 - 8);
  MEMORY[0x270FA5388](v118, v34, v35, v36, v37);
  unint64_t v39 = (char *)&v104 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5FE0);
  uint64_t v41 = v40 - 8;
  uint64_t v46 = MEMORY[0x270FA5388](v40, v42, v43, v44, v45);
  uint64_t v48 = (char *)&v104 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v46, v49, v50, v51, v52);
  uint64_t v54 = (char *)&v104 - v53;
  uint64_t v55 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  MEMORY[0x270FA5388](v55 - 8, v56, v57, v58, v59);
  uint64_t v61 = (char *)&v104 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v62 = (uint64_t *)(a2 + *(int *)(v41 + 56));
  sub_25051B91C(a2, (uint64_t)v54, type metadata accessor for GKCrypto_GroupAETextToSign.User);
  uint64_t v63 = *v62;
  unint64_t v64 = v62[1];
  uint64_t v65 = (uint64_t)v54;
  uint64_t v66 = v39;
  sub_25051C8F4(v65, (uint64_t)v61, type metadata accessor for GKCrypto_GroupAETextToSign.User);
  uint64_t v67 = (uint64_t *)&v48[*(int *)(v41 + 56)];
  sub_25051B91C(a2, (uint64_t)v48, type metadata accessor for GKCrypto_GroupAETextToSign.User);
  *uint64_t v67 = v63;
  v67[1] = v64;
  uint64_t v120 = v63;
  unint64_t v121 = v64;
  sub_2504DBC4C(v63, v64);
  unint64_t v68 = v119;
  sub_2505BE0A0();
  if (v68)
  {
    sub_25051AF3C((uint64_t)v61, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    uint64_t v69 = (uint64_t)v48;
    uint64_t v70 = type metadata accessor for GKCrypto_GroupAETextToSign.User;
  }
  else
  {
    uint64_t v72 = v117;
    uint64_t v71 = v118;
    uint64_t v73 = v116;
    sub_25051AF3C((uint64_t)v48, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    uint64_t v74 = *(void *)v61;
    unint64_t v75 = *((void *)v61 + 1);
    sub_2504DBC4C(*(void *)v61, v75);
    GroupKitUserID.init(_:)(v74, v75, &v120);
    uint64_t v76 = v120;
    unint64_t v77 = v121;
    sub_2504DB330(*((void *)v61 + 4), v61[40], &v123);
    uint64_t v108 = v76;
    BOOL v122 = v123;
    uint64_t v78 = *((void *)v61 + 6);
    unint64_t v119 = *((void *)v61 + 7);
    switch(v119 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v78), v78))
        {
          __break(1u);
LABEL_14:
          __break(1u);
          JUMPOUT(0x250503BFCLL);
        }
        uint64_t v79 = HIDWORD(v78) - (int)v78;
LABEL_8:
        uint64_t v82 = v78;
        sub_2504DBC4C(v78, v119);
        uint64_t v78 = v82;
LABEL_9:
        if (v79 == 32)
        {
          unint64_t v83 = (uint64_t *)v72;
          uint64_t v84 = v108;
          uint64_t v120 = v108;
          unint64_t v121 = v77;
          uint64_t v107 = *((void *)v61 + 2);
          unint64_t v85 = *((void *)v61 + 3);
          uint64_t v105 = v78;
          unint64_t v106 = v85;
          uint64_t v86 = sub_2505BE000();
          unint64_t v87 = v77;
          uint64_t v88 = (uint64_t)v114;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v114, 1, 1, v86);
          uint64_t v89 = sub_2505BDF90();
          uint64_t v90 = (uint64_t)v115;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v115, 1, 1, v89);
          unint64_t v104 = v87;
          sub_2504DBC4C(v84, v87);
          unint64_t v91 = v106;
          uint64_t v92 = v107;
          sub_2504DBC4C(v107, v106);
          sub_2505625AC(&v120, v92, v91, v88, v90, v83);
          uint64_t v96 = type metadata accessor for UserKeyingInfo(0);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v117, 0, 1, v96);
          uint64_t v97 = v110;
          uint64_t v98 = (uint64_t)v112;
          uint64_t v99 = (uint64_t)&v112[*(int *)(v110 + 28)];
          os_log_type_t v115 = v61;
          unint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
          uint64_t v101 = v118;
          v100(v99, 1, 1, v118);
          *(unsigned char *)uint64_t v98 = v122;
          unint64_t v102 = v119;
          *(void *)(v98 + 8) = v105;
          *(void *)(v98 + 16) = v102;
          sub_2505283F0(v117, v98 + *(int *)(v97 + 24), &qword_269AB5E80);
          sub_2504DAF60(v99, &qword_269AB5ED0);
          (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v99, v66, v101);
          v100(v99, 0, 1, v101);
          uint64_t v103 = v113;
          sub_25051B91C(v98, v113, type metadata accessor for GroupMembership.MemberProperties);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v111 + 56))(v103, 0, 1, v97);
          sub_2504E6830(v103, v108, v104);
          (*(void (**)(char *, uint64_t))(v73 + 8))(v66, v101);
          sub_25051AF3C((uint64_t)v115, type metadata accessor for GKCrypto_GroupAETextToSign.User);
          uint64_t v70 = type metadata accessor for GroupMembership.MemberProperties;
          uint64_t v69 = v98;
        }
        else
        {
LABEL_11:
          uint64_t v93 = v78;
          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v94 = 263;
          *(_OWORD *)(v94 + 8) = xmmword_2505BFE90;
          *(_OWORD *)(v94 + 24) = xmmword_2505BFE50;
          *(void *)(v94 + 40) = 0x80000002505C8CB0;
          swift_willThrow();
          sub_250511528(v93, v119);
          sub_250511528(v108, v77);
          (*(void (**)(char *, uint64_t))(v73 + 8))(v66, v71);
          uint64_t v70 = type metadata accessor for GKCrypto_GroupAETextToSign.User;
          uint64_t v69 = (uint64_t)v61;
        }
        break;
      case 2uLL:
        uint64_t v81 = *(void *)(v78 + 16);
        uint64_t v80 = *(void *)(v78 + 24);
        uint64_t v79 = v80 - v81;
        if (!__OFSUB__(v80, v81)) {
          goto LABEL_8;
        }
        goto LABEL_14;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v79 = BYTE6(v119);
        goto LABEL_9;
    }
  }
  return sub_25051AF3C(v69, v70);
}

uint64_t sub_250503C0C(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
  MEMORY[0x270FA5388](v2 - 8, v3, v4, v5, v6);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  MEMORY[0x270FA5388](v9, v10, v11, v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  MEMORY[0x270FA5388](v16 - 8, v17, v18, v19, v20);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v54 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_269AB5458 != -1) {
    swift_once();
  }
  uint64_t v31 = qword_269AC3210;
  unint64_t v32 = *(void *)algn_269AC3218;
  uint64_t v33 = type metadata accessor for GKCrypto_AdminPlainText(0);
  sub_2504DAEFC(v57 + *(int *)(v33 + 24), (uint64_t)v22, &qword_269AB5EC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    *(_DWORD *)uint64_t v30 = 0;
    *(_OWORD *)(v30 + 8) = xmmword_2505BFEF0;
    uint64_t v34 = v32;
    sub_2504DBC4C(v31, v32);
    sub_2505BDA40();
    sub_2504DAF60((uint64_t)v22, &qword_269AB5EC0);
  }
  else
  {
    sub_25051C8F4((uint64_t)v22, (uint64_t)v30, type metadata accessor for GKCrypto_VersionedSeed);
    uint64_t v34 = v32;
    sub_2504DBC4C(v31, v32);
  }
  unint64_t v35 = v31;
  uint64_t v36 = *((void *)v30 + 1);
  unint64_t v37 = *((void *)v30 + 2);
  sub_2504DBC4C(v36, v37);
  sub_25051AF3C((uint64_t)v30, type metadata accessor for GKCrypto_VersionedSeed);
  sub_2504DAEFC(v57 + *(int *)(v33 + 28), (uint64_t)v8, &qword_269AB5F18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v8, 1, v56) == 1)
  {
    *(_OWORD *)uint64_t v15 = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60((uint64_t)v8, &qword_269AB5F18);
  }
  else
  {
    sub_25051C8F4((uint64_t)v8, (uint64_t)v15, type metadata accessor for GKCrypto_AdminMetaData);
  }
  unint64_t v38 = v34;
  uint64_t v39 = *v15;
  unint64_t v40 = v15[1];
  sub_2504DBC4C(*v15, v40);
  sub_25051AF3C((uint64_t)v15, type metadata accessor for GKCrypto_AdminMetaData);
  int64_t v42 = a1[2];
  int64_t v43 = v42 + 3;
  if (__OFADD__(v42, 3))
  {
    __break(1u);
LABEL_23:
    a1 = sub_250570DC0((void *)(v41 > 1), v42, 1, a1);
    goto LABEL_17;
  }
  uint64_t v34 = v35;
  swift_bridgeObjectRetain();
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v43 > a1[3] >> 1)
  {
    if (v42 <= v43) {
      int64_t v45 = v42 + 3;
    }
    else {
      int64_t v45 = v42;
    }
    a1 = sub_250570DC0(isUniquelyReferenced_nonNull_native, v45, 1, a1);
  }
  sub_2504DBC4C(v35, v38);
  unint64_t v35 = a1[2];
  unint64_t v41 = a1[3];
  int64_t v42 = v35 + 1;
  if (v35 >= v41 >> 1) {
    goto LABEL_23;
  }
LABEL_17:
  a1[2] = v42;
  uint64_t v46 = &a1[2 * v35];
  v46[4] = v34;
  v46[5] = v38;
  sub_2504DBC4C(v36, v37);
  unint64_t v47 = a1[3];
  unint64_t v48 = v35 + 2;
  if ((uint64_t)(v35 + 2) > (uint64_t)(v47 >> 1)) {
    a1 = sub_250570DC0((void *)(v47 > 1), v35 + 2, 1, a1);
  }
  a1[2] = v48;
  uint64_t v49 = &a1[2 * v42];
  v49[4] = v36;
  v49[5] = v37;
  sub_2504DBC4C(v39, v40);
  unint64_t v50 = a1[3];
  if ((uint64_t)(v35 + 3) > (uint64_t)(v50 >> 1)) {
    a1 = sub_250570DC0((void *)(v50 > 1), v35 + 3, 1, a1);
  }
  a1[2] = v35 + 3;
  uint64_t v51 = &a1[2 * v48];
  v51[4] = v39;
  v51[5] = v40;
  sub_250511528(v36, v37);
  sub_250511528(v39, v40);
  sub_250511528(v34, v38);
  uint64_t v52 = sub_250576544((uint64_t)a1);
  swift_bridgeObjectRelease();
  return v52;
}

uint64_t sub_250504124@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X7>, uint64_t a8@<X8>, unint64_t a9, void *a10, int a11)
{
  unint64_t v204 = a6;
  unint64_t v205 = a7;
  uint64_t v203 = a5;
  uint64_t v193 = a4;
  uint64_t v192 = a3;
  uint64_t v191 = a2;
  uint64_t v190 = a1;
  uint64_t v180 = a8;
  uint64_t v178 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  MEMORY[0x270FA5388](v178, v13, v14, v15, v16);
  uint64_t v179 = (char *)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E70);
  MEMORY[0x270FA5388](v18 - 8, v19, v20, v21, v22);
  uint64_t v183 = (char *)&v169 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = sub_2505BDDD0();
  uint64_t v181 = *(void *)(v182 - 8);
  MEMORY[0x270FA5388](v182, v24, v25, v26, v27);
  uint64_t v184 = (char *)&v169 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v186 = sub_2505BE040();
  uint64_t v187 = *(void *)(v186 - 8);
  MEMORY[0x270FA5388](v186, v29, v30, v31, v32);
  int v194 = (char *)&v169 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = (void *)type metadata accessor for GKCrypto_AdminPlainText(0);
  MEMORY[0x270FA5388](v195, v34, v35, v36, v37);
  uint64_t v196 = (uint64_t)&v169 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = type metadata accessor for GKCrypto_AdminMetaData(0);
  MEMORY[0x270FA5388](v188, v39, v40, v41, v42);
  uint64_t v197 = (char *)&v169 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v201 = sub_2505BDCE0();
  uint64_t v198 = *(void *)(v201 - 8);
  uint64_t v48 = MEMORY[0x270FA5388](v201, v44, v45, v46, v47);
  uint64_t v185 = (uint64_t)&v169 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v48, v50, v51, v52, v53);
  uint64_t v202 = (uint64_t *)((char *)&v169 - v54);
  uint64_t v55 = sub_2505BDF90();
  unint64_t v199 = *(void *)(v55 - 8);
  uint64_t v200 = v55;
  MEMORY[0x270FA5388](v55, v56, v57, v58, v59);
  unint64_t v212 = (unint64_t)&v169 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v61 - 8, v62, v63, v64, v65);
  uint64_t v67 = (char *)&v169 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_2505BE000();
  uint64_t v69 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68, v70, v71, v72, v73);
  unint64_t v75 = (char *)&v169 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = v11;
  uint64_t v76 = v11 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v77 = type metadata accessor for UserKeyingInfo(0);
  sub_2504DAEFC(v76 + *(int *)(v77 + 44), (uint64_t)v67, &qword_269AB5A28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68) == 1)
  {
    sub_2504DAF60((uint64_t)v67, &qword_269AB5A28);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v78 = sub_2505BDC40();
    __swift_project_value_buffer(v78, (uint64_t)qword_269AC3188);
    os_log_type_t v79 = sub_2505BE3D0();
    uint64_t v80 = sub_2505BDC20();
    os_log_type_t v81 = v79;
    if (os_log_type_enabled(v80, v79))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl(&dword_2504D2000, v80, v81, "originator keying material missing in group creation", v82, 2u);
      MEMORY[0x25337FF10](v82, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v83 = 323;
    *(_OWORD *)(v83 + 8) = xmmword_2505C0320;
    *(void *)(v83 + 24) = 0x80000002505C9540;
    *(void *)(v83 + 32) = 0xD000000000000052;
    *(void *)(v83 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v75, v67, v68);
    uint64_t v85 = swift_bridgeObjectRetain();
    uint64_t v90 = v69;
    uint64_t v91 = sub_2505B7E70(v85, v86, v87, v88, v89);
    swift_bridgeObjectRelease();
    sub_2505AFBF8(v91, &v208);
    if (v12)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v75, v68);
    }
    else
    {
      uint64_t v177 = v90;
      uint64_t v176 = (uint64_t)v208;
      uint64_t v210 = &type metadata for AdminSeed;
      unint64_t v175 = sub_25051CA18();
      unint64_t v211 = v175;
      uint64_t v92 = (void *)swift_allocObject();
      unint64_t v208 = v92;
      uint64_t v94 = v203;
      unint64_t v93 = v204;
      v92[2] = v203;
      v92[3] = v93;
      uint64_t v95 = (uint64_t)v205;
      v92[4] = v205;
      v92[5] = a9;
      sub_2504DBC4C(v94, v93);
      sub_25051B908(v95, a9);
      if (qword_269AB5618 != -1) {
        swift_once();
      }
      sub_2505603C4(&v208, 1, qword_269AC36E0, *(unint64_t *)algn_269AC36E8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v208);
      uint64_t v210 = &type metadata for AdminSeed;
      unint64_t v211 = v175;
      uint64_t v96 = (void *)swift_allocObject();
      unint64_t v208 = v96;
      uint64_t v96[2] = v94;
      v96[3] = v93;
      v96[4] = v95;
      v96[5] = a9;
      sub_2504DBC4C(v94, v93);
      sub_25051B908(v95, a9);
      if (qword_269AB5608 != -1) {
        swift_once();
      }
      sub_2505601DC(&v208, 1, qword_269AC36C0, *(unint64_t *)algn_269AC36C8, (uint64_t)v202);
      uint64_t v97 = v201;
      uint64_t v98 = a10;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v208);
      unint64_t v208 = (void *)v176;
      if (qword_269AB5448 != -1) {
        swift_once();
      }
      uint64_t v99 = qword_269AC31F0;
      unint64_t v100 = *(void *)algn_269AC31F8;
      sub_2504DBC4C(qword_269AC31F0, *(unint64_t *)algn_269AC31F8);
      sub_2504DBC4C(v99, v100);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v174 = a10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v98 = sub_250570DC0(0, v174[2] + 1, 1, v174);
      }
      unint64_t v103 = v98[2];
      unint64_t v102 = v98[3];
      unint64_t v104 = v103 + 1;
      if (v103 >= v102 >> 1)
      {
        unint64_t v173 = v103 + 1;
        uint64_t v168 = sub_250570DC0((void *)(v102 > 1), v103 + 1, 1, v98);
        unint64_t v104 = v173;
        uint64_t v98 = v168;
      }
      uint64_t v98[2] = v104;
      uint64_t v105 = &v98[2 * v103];
      v105[4] = v99;
      v105[5] = v100;
      sub_250511528(v99, v100);
      uint64_t v106 = sub_250576544((uint64_t)v98);
      unint64_t v108 = v107;
      swift_bridgeObjectRelease();
      unint64_t v109 = v212;
      uint64_t v110 = (void (*)(void, void))v202;
      uint64_t v172 = sub_250592180(v212, (unint64_t)v202, (uint64_t *)&v208, v106, v108);
      unint64_t v173 = v111;
      unint64_t v170 = a9;
      uint64_t v171 = v68;
      sub_250511528(v106, v108);
      uint64_t v112 = *(uint64_t **)(v198 + 8);
      v198 += 8;
      uint64_t v202 = v112;
      ((void (*)(void, uint64_t))v112)(v110, v97);
      (*(void (**)(unint64_t, uint64_t))(v199 + 8))(v109, v200);
      swift_bridgeObjectRelease();
      sub_250528338(&qword_269AB5F00, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
      uint64_t v113 = v197;
      uint64_t v114 = sub_2505BDB80();
      MEMORY[0x270FA5388](v114, v115, v116, v117, v118);
      *((_DWORD *)&v169 - 12) = a11;
      uint64_t v119 = v191;
      *(&v169 - 5) = v190;
      *(&v169 - 4) = v119;
      uint64_t v120 = v193;
      *(&v169 - 3) = v192;
      *(&v169 - 2) = v120;
      *(&v169 - 1) = (uint64_t)v113;
      uint64_t v121 = sub_250528338(&qword_269AB5F08, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
      uint64_t v122 = v196;
      sub_2505BDB80();
      uint64_t v123 = sub_250503C0C(v174);
      unint64_t v125 = v124;
      unint64_t v208 = (void *)v123;
      unint64_t v209 = v124;
      uint64_t v126 = v75;
      unint64_t v127 = sub_25051AE60();
      sub_2505BDFF0();
      unint64_t v212 = v121;
      unint64_t v199 = v127;
      uint64_t v200 = (uint64_t)v126;
      sub_250511528(v123, v125);
      uint64_t v128 = sub_2505BE010();
      uint64_t v130 = v129;
      sub_250511528(*(void *)v122, *(void *)(v122 + 8));
      *(void *)uint64_t v122 = v128;
      *(void *)(v122 + 8) = v130;
      swift_bridgeObjectRetain();
      sub_2504DBC4C(v172, v173);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v174 = sub_250570DC0(0, v174[2] + 1, 1, v174);
      }
      unint64_t v132 = v174[2];
      unint64_t v131 = v174[3];
      if (v132 >= v131 >> 1) {
        unint64_t v174 = sub_250570DC0((void *)(v131 > 1), v132 + 1, 1, v174);
      }
      uint64_t v133 = v174;
      v174[2] = v132 + 1;
      unint64_t v134 = &v133[2 * v132];
      unint64_t v135 = v173;
      v134[4] = v172;
      v134[5] = v135;
      uint64_t v136 = sub_250576544((uint64_t)v133);
      unint64_t v138 = v137;
      swift_bridgeObjectRelease();
      uint64_t v139 = v196;
      uint64_t v140 = sub_2505BDB40();
      uint64_t v195 = (void *)v136;
      unint64_t v212 = v138;
      uint64_t v141 = v139;
      uint64_t v206 = v140;
      unint64_t v207 = v142;
      uint64_t v210 = &type metadata for AdminSeed;
      unint64_t v211 = v175;
      long long v143 = (void *)swift_allocObject();
      unint64_t v208 = v143;
      uint64_t v145 = v203;
      unint64_t v144 = v204;
      v143[2] = v203;
      v143[3] = v144;
      uint64_t v146 = (uint64_t)v205;
      unint64_t v147 = v170;
      v143[4] = v205;
      v143[5] = v147;
      uint64_t v148 = qword_269AC36C0;
      unint64_t v149 = *(void *)algn_269AC36C8;
      sub_2504DBC4C(v145, v144);
      sub_25051B908(v146, v147);
      uint64_t v150 = v185;
      sub_2505601DC(&v208, 1, v148, v149, v185);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v208);
      uint64_t v151 = (uint64_t)v183;
      sub_2505BDD60();
      uint64_t v152 = sub_2505BDD70();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v151, 0, 1, v152);
      unint64_t v208 = v195;
      unint64_t v209 = v212;
      uint64_t v153 = v184;
      sub_2505BDD40();
      uint64_t v154 = (uint64_t)v197;
      uint64_t v155 = v194;
      sub_2504DAF60(v151, &qword_269AB5E70);
      ((void (*)(uint64_t, uint64_t))v202)(v150, v201);
      sub_250511528(v206, v207);
      uint64_t v156 = sub_2505BDDB0();
      if (v157 >> 60 == 15)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v161 = 325;
        *(_OWORD *)(v161 + 8) = xmmword_2505C0310;
        *(void *)(v161 + 24) = 0x80000002505C9540;
        *(void *)(v161 + 32) = 0xD000000000000052;
        *(void *)(v161 + 40) = 0x80000002505C8CB0;
        swift_willThrow();
        sub_250511528((uint64_t)v195, v212);
        sub_250511528(v172, v173);
        (*(void (**)(char *, uint64_t))(v181 + 8))(v153, v182);
        (*(void (**)(char *, uint64_t))(v187 + 8))(v155, v186);
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v200, v171);
        sub_25051AF3C(v154, type metadata accessor for GKCrypto_AdminMetaData);
        return sub_25051AF3C(v141, type metadata accessor for GKCrypto_AdminPlainText);
      }
      else
      {
        uint64_t v162 = v156;
        unint64_t v163 = v157;
        unint64_t v205 = &v169;
        *(&v169 - 4) = MEMORY[0x270FA5388](v156, v157, v158, v159, v160);
        *(&v169 - 3) = v164;
        uint64_t v165 = v172;
        unint64_t v166 = v173;
        *(&v169 - 2) = v172;
        *(&v169 - 1) = v166;
        sub_250528338(&qword_269AB5F10, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
        uint64_t v167 = (uint64_t)v179;
        sub_2505BDB80();
        sub_250511528(v165, v166);
        sub_250511528((uint64_t)v195, v212);
        (*(void (**)(char *, uint64_t))(v181 + 8))(v153, v182);
        (*(void (**)(char *, uint64_t))(v187 + 8))(v194, v186);
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v200, v171);
        sub_25051B8D4(v162, v163);
        sub_25051AF3C(v154, type metadata accessor for GKCrypto_AdminMetaData);
        sub_25051C8F4(v167, v180, type metadata accessor for GKCrypto_AdminGroupBlob);
        return sub_25051AF3C(v196, type metadata accessor for GKCrypto_AdminPlainText);
      }
    }
  }
}

uint64_t sub_2505055D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a6;
  uint64_t v32 = a1;
  uint64_t v33 = a7;
  uint64_t v39 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v11 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = v31;
  sub_250528338(&qword_269AB5EB8, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
  sub_2505BDB80();
  uint64_t v26 = type metadata accessor for GKCrypto_AdminPlainText(0);
  uint64_t v27 = v32;
  uint64_t v28 = v32 + *(int *)(v26 + 24);
  sub_2504DAF60(v28, &qword_269AB5EC0);
  sub_25051C8F4((uint64_t)v25, v28, type metadata accessor for GKCrypto_VersionedSeed);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v28, 0, 1, v18);
  sub_25051B91C(v33, (uint64_t)v17, type metadata accessor for GKCrypto_AdminMetaData);
  uint64_t v29 = v27 + *(int *)(v26 + 28);
  sub_2504DAF60(v29, &qword_269AB5F18);
  sub_25051C8F4((uint64_t)v17, v29, type metadata accessor for GKCrypto_AdminMetaData);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v39);
}

uint64_t sub_250505874(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  sub_2504DBC4C(a2, a3);
  sub_250511528(v10, v11);
  a1[2] = a2;
  a1[3] = a3;
  uint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  sub_2504DBC4C(a4, a5);
  uint64_t result = sub_250511528(v12, v13);
  *a1 = a4;
  a1[1] = a5;
  return result;
}

uint64_t sub_250505904(void **a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, void *a6, int a7, uint64_t a8)
{
  uint64_t v266 = a8;
  int v261 = a7;
  uint64_t v269 = a6;
  uint64_t v260 = a3;
  uint64_t v259 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E70);
  MEMORY[0x270FA5388](v11 - 8, v12, v13, v14, v15);
  uint64_t v249 = (uint64_t)&v238 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v247 = sub_2505BDDD0();
  uint64_t v246 = *(void *)(v247 - 8);
  MEMORY[0x270FA5388](v247, v17, v18, v19, v20);
  uint64_t v248 = (char *)&v238 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v253 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  MEMORY[0x270FA5388](v253, v22, v23, v24, v25);
  uint64_t v254 = (char *)&v238 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = sub_2505BE040();
  uint64_t v252 = *(void *)(v251 - 8);
  MEMORY[0x270FA5388](v251, v27, v28, v29, v30);
  uint64_t v255 = (char *)&v238 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v32 - 8, v33, v34, v35, v36);
  uint64_t v258 = (uint64_t)&v238 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = sub_2505BE000();
  uint64_t v262 = *(void *)(v263 - 8);
  MEMORY[0x270FA5388](v263, v38, v39, v40, v41);
  uint64_t v256 = (char *)&v238 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v257 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  MEMORY[0x270FA5388](v257, v43, v44, v45, v46);
  uint64_t v48 = (char *)&v238 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v271 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  uint64_t v270 = *(void *)(v271 - 8);
  uint64_t v53 = MEMORY[0x270FA5388](v271, v49, v50, v51, v52);
  unint64_t v282 = (unint64_t)&v238 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v53, v55, v56, v57, v58);
  unint64_t v281 = (unint64_t)&v238 - v59;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  MEMORY[0x270FA5388](v60 - 8, v61, v62, v63, v64);
  uint64_t v273 = (uint64_t)&v238 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v276 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v264 = *(void *)(v276 - 8);
  MEMORY[0x270FA5388](v276, v66, v67, v68, v69);
  uint64_t v278 = (uint64_t)&v238 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v272 = type metadata accessor for GroupMembership.MemberProperties(0);
  MEMORY[0x270FA5388](v272, v71, v72, v73, v74);
  uint64_t v279 = (uint64_t)&v238 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E88);
  uint64_t v81 = MEMORY[0x270FA5388](v76 - 8, v77, v78, v79, v80);
  uint64_t v277 = (char *)&v238 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v81, v83, v84, v85, v86);
  uint64_t v275 = (uint64_t *)((char *)&v238 - v87);
  uint64_t v265 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  MEMORY[0x270FA5388](v265, v88, v89, v90, v91);
  unint64_t v93 = (char *)&v238 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v268 = sub_2505BDCE0();
  uint64_t v274 = *(void *)(v268 - 8);
  uint64_t v98 = MEMORY[0x270FA5388](v268, v94, v95, v96, v97);
  uint64_t v250 = (uint64_t)&v238 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v98, v100, v101, v102, v103);
  uint64_t v105 = (char *)&v238 - v104;
  uint64_t v106 = sub_2505BDF90();
  uint64_t v107 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106, v108, v109, v110, v111);
  uint64_t v113 = (char *)&v238 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v280 = *a1;
  uint64_t v289 = &type metadata for MemberSeed;
  unint64_t v283 = sub_250522A2C();
  unint64_t v290 = v283;
  uint64_t v287 = a4;
  unint64_t v288 = a5;
  sub_2504DBC4C((uint64_t)a4, a5);
  if (qword_269AB5640 != -1) {
    swift_once();
  }
  uint64_t v114 = (uint64_t)v284;
  sub_2505603C4(&v287, 1, qword_269AC3730, *(unint64_t *)algn_269AC3738);
  if (v114) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v287);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v287);
  uint64_t v289 = &type metadata for MemberSeed;
  unint64_t v290 = v283;
  uint64_t v287 = a4;
  unint64_t v288 = a5;
  sub_2504DBC4C((uint64_t)a4, a5);
  if (qword_269AB5630 != -1) {
    swift_once();
  }
  sub_2505601DC(&v287, 1, qword_269AC3710, *(unint64_t *)algn_269AC3718, (uint64_t)v105);
  uint64_t v284 = 0;
  uint64_t v245 = v93;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v287);
  uint64_t v287 = v280;
  if (qword_269AB5450 != -1) {
    swift_once();
  }
  uint64_t v242 = a4;
  unint64_t v243 = a5;
  uint64_t v244 = v48;
  uint64_t v117 = qword_269AC3200;
  unint64_t v116 = *(void *)algn_269AC3208;
  sub_2504DBC4C(qword_269AC3200, *(unint64_t *)algn_269AC3208);
  sub_2504DBC4C(v117, v116);
  uint64_t v118 = v269;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v118 = sub_250570DC0(0, v269[2] + 1, 1, v269);
  }
  unint64_t v120 = v118[2];
  unint64_t v119 = v118[3];
  if (v120 >= v119 >> 1) {
    uint64_t v118 = sub_250570DC0((void *)(v119 > 1), v120 + 1, 1, v118);
  }
  v118[2] = v120 + 1;
  uint64_t v121 = &v118[2 * v120];
  v121[4] = v117;
  v121[5] = v116;
  sub_250511528(v117, v116);
  uint64_t v122 = sub_250576544((uint64_t)v118);
  unint64_t v124 = v123;
  swift_bridgeObjectRelease();
  uint64_t v125 = (uint64_t)v284;
  uint64_t v126 = sub_250592180((uint64_t)v113, (unint64_t)v105, (uint64_t *)&v287, v122, v124);
  if (v125)
  {
    sub_250511528(v122, v124);
    (*(void (**)(char *, uint64_t))(v274 + 8))(v105, v268);
    return (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v113, v106);
  }
  unint64_t v240 = v127;
  uint64_t v241 = v126;
  sub_250511528(v122, v124);
  uint64_t v128 = v274 + 8;
  uint64_t v129 = *(void (**)(char *, uint64_t))(v274 + 8);
  v129(v105, v268);
  uint64_t v130 = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v113, v106);
  MEMORY[0x270FA5388](v130, v131, v132, v133, v134);
  uint64_t v135 = v266;
  *(&v238 - 2) = v267;
  *(&v238 - 1) = v135;
  sub_250528338(&qword_269AB5E98, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_2505BDB80();
  unint64_t v291 = MEMORY[0x263F8EE78];
  uint64_t v136 = swift_bridgeObjectRetain();
  uint64_t v287 = (void *)sub_25059D964(v136);
  sub_250510C4C(&v287);
  unint64_t v239 = (void (*)(uint64_t, uint64_t))v129;
  uint64_t v274 = v128;
  uint64_t v284 = 0;
  swift_bridgeObjectRelease();
  unint64_t v137 = 0;
  unint64_t v138 = v287;
  uint64_t v265 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v264 + 48);
  unint64_t v139 = v287[2];
  uint64_t v140 = v278;
  uint64_t v141 = v279;
  uint64_t v142 = v281;
  while (1)
  {
    unint64_t v143 = (unint64_t)v277;
    if (v137 == v139)
    {
      uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 56))(v143, 1, 1, v144);
      unint64_t v137 = v139;
    }
    else
    {
      if (v137 >= v138[2])
      {
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
      uint64_t v146 = *(void *)(v145 - 8);
      sub_2504DAEFC((uint64_t)v138+ ((*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80))+ *(void *)(v146 + 72) * v137++, v143, &qword_269AB5E90);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
      uint64_t v142 = v281;
    }
    uint64_t v147 = v143;
    uint64_t v148 = v275;
    sub_2505283F0(v147, (uint64_t)v275, &qword_269AB5E88);
    uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v149 - 8) + 48))(v148, 1, v149) == 1) {
      break;
    }
    uint64_t v266 = *v148;
    uint64_t v280 = (void *)v148[1];
    sub_25051C8F4((uint64_t)v148 + *(int *)(v149 + 48), v141, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v150 = v273;
    sub_2504DAEFC(v141 + *(int *)(v272 + 24), v273, &qword_269AB5E80);
    if ((*v265)(v150, 1, v276) == 1)
    {
      swift_release();
      sub_2504DAF60(v150, &qword_269AB5E80);
      goto LABEL_37;
    }
    uint64_t v151 = sub_25051C8F4(v150, v140, type metadata accessor for UserKeyingInfo);
    unint64_t v156 = *(void *)(v141 + 16);
    if (v156 >> 60 == 15)
    {
      swift_release();
      sub_25051AF3C(v140, type metadata accessor for UserKeyingInfo);
LABEL_37:
      uint64_t v186 = (uint64_t)v245;
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v187 = sub_2505BDC40();
      __swift_project_value_buffer(v187, (uint64_t)qword_269AC3188);
      os_log_type_t v188 = sub_2505BE3D0();
      uint64_t v189 = sub_2505BDC20();
      os_log_type_t v190 = v188;
      if (os_log_type_enabled(v189, v188))
      {
        uint64_t v191 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v191 = 0;
        _os_log_impl(&dword_2504D2000, v189, v190, "member key material missing in group creation", v191, 2u);
        MEMORY[0x25337FF10](v191, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v192 = 324;
      *(_OWORD *)(v192 + 8) = xmmword_2505C0330;
      *(void *)(v192 + 24) = 0x80000002505C93B0;
      *(void *)(v192 + 32) = 0xD000000000000052;
      *(void *)(v192 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_250511528(v266, (unint64_t)v280);
      sub_250511528(v241, v240);
      sub_25051AF3C(v141, type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v193 = v186;
LABEL_42:
      sub_25051AF3C(v193, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      return swift_bridgeObjectRelease();
    }
    uint64_t v157 = *(void *)(v141 + 8);
    MEMORY[0x270FA5388](v151, v152, v153, v154, v155);
    uint64_t v158 = v280;
    *(&v238 - 6) = v266;
    *(&v238 - 5) = (uint64_t)v158;
    *(&v238 - 4) = v159;
    *(&v238 - 3) = v157;
    *(&v238 - 2) = v156;
    *(&v238 - 1) = v160;
    sub_2504DBC4C(v157, v156);
    sub_250528338(&qword_269AB5EB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
    uint64_t v161 = (uint64_t)v284;
    sub_2505BDB80();
    uint64_t v284 = (uint64_t *)v161;
    if (v161)
    {
      swift_release();
      sub_250511528(v266, (unint64_t)v280);
      sub_25051B8D4(v157, v156);
      sub_250511528(v241, v240);
      sub_25051AF3C(v278, type metadata accessor for UserKeyingInfo);
      sub_25051AF3C(v279, type metadata accessor for GroupMembership.MemberProperties);
      sub_25051AF3C((uint64_t)v245, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      return swift_bridgeObjectRelease();
    }
    sub_25051B91C(v142, v282, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    unint64_t v162 = v291;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v162 = sub_250571200(0, *(void *)(v162 + 16) + 1, 1, v162);
    }
    unint64_t v164 = *(void *)(v162 + 16);
    unint64_t v163 = *(void *)(v162 + 24);
    if (v164 >= v163 >> 1) {
      unint64_t v162 = sub_250571200(v163 > 1, v164 + 1, 1, v162);
    }
    *(void *)(v162 + 16) = v164 + 1;
    sub_25051C8F4(v282, v162+ ((*(unsigned __int8 *)(v270 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v270 + 80))+ *(void *)(v270 + 72) * v164, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    sub_250511528(v266, (unint64_t)v280);
    sub_25051B8D4(v157, v156);
    unint64_t v291 = v162;
    uint64_t v142 = v281;
    sub_25051AF3C(v281, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    uint64_t v140 = v278;
    sub_25051AF3C(v278, type metadata accessor for UserKeyingInfo);
    uint64_t v141 = v279;
    sub_25051AF3C(v279, type metadata accessor for GroupMembership.MemberProperties);
  }
  uint64_t v165 = swift_release();
  MEMORY[0x270FA5388](v165, v166, v167, v168, v169);
  *((_DWORD *)&v238 - 12) = v261;
  uint64_t v170 = v260;
  *(&v238 - 5) = v259;
  *(&v238 - 4) = v170;
  *(&v238 - 3) = (uint64_t)&v291;
  uint64_t v171 = (uint64_t)v245;
  *(&v238 - 2) = (uint64_t)v245;
  sub_250528338(&qword_269AB5EA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
  uint64_t v172 = (uint64_t)v244;
  uint64_t v173 = (uint64_t)v284;
  sub_2505BDB80();
  uint64_t v174 = v267 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v175 = v174 + *(int *)(v276 + 44);
  uint64_t v176 = v258;
  sub_2504DAEFC(v175, v258, &qword_269AB5A28);
  uint64_t v177 = v262;
  uint64_t v178 = v263;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v262 + 48))(v176, 1, v263) == 1)
  {
    sub_2504DAF60(v176, &qword_269AB5A28);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v179 = sub_2505BDC40();
    __swift_project_value_buffer(v179, (uint64_t)qword_269AC3188);
    os_log_type_t v180 = sub_2505BE3D0();
    uint64_t v181 = sub_2505BDC20();
    os_log_type_t v182 = v180;
    if (os_log_type_enabled(v181, v180))
    {
      uint64_t v183 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v183 = 0;
      _os_log_impl(&dword_2504D2000, v181, v182, "originator keying material missing in group creation", v183, 2u);
      MEMORY[0x25337FF10](v183, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v184 = 323;
    *(_OWORD *)(v184 + 8) = xmmword_2505C0350;
    *(void *)(v184 + 24) = 0x80000002505C93B0;
    *(void *)(v184 + 32) = 0xD000000000000052;
    *(void *)(v184 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v241, v240);
    uint64_t v185 = (uint64_t)v244;
    goto LABEL_46;
  }
  int v194 = v256;
  (*(void (**)(char *, uint64_t, uint64_t))(v177 + 32))(v256, v176, v178);
  uint64_t v195 = (void *)sub_2505BDB40();
  if (v173)
  {
    sub_250511528(v241, v240);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v194, v178);
    uint64_t v185 = v172;
LABEL_46:
    sub_25051AF3C(v185, type metadata accessor for GKCrypto_GroupAETextToSign);
    uint64_t v193 = v171;
    goto LABEL_42;
  }
  uint64_t v197 = (uint64_t)v195;
  uint64_t v198 = v196;
  uint64_t v287 = v195;
  unint64_t v288 = (unint64_t)v196;
  unint64_t v199 = sub_25051AE60();
  uint64_t v200 = v255;
  uint64_t v201 = sub_2505BDFF0();
  unint64_t v282 = v199;
  uint64_t v284 = &v238;
  MEMORY[0x270FA5388](v201, v202, v203, v204, v205);
  uint64_t v206 = v198;
  *(&v238 - 4) = v197;
  *(&v238 - 3) = (uint64_t)v198;
  *(&v238 - 2) = (uint64_t)v200;
  sub_250528338(&qword_269AB5EA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  uint64_t v207 = (uint64_t)v254;
  sub_2505BDB80();
  uint64_t v208 = v207;
  uint64_t v209 = sub_2505BDB40();
  unint64_t v211 = v210;
  uint64_t v279 = v197;
  uint64_t v280 = v206;
  uint64_t v284 = (uint64_t *)v209;
  sub_25051AF3C(v207, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  if (qword_269AB5460 != -1) {
    swift_once();
  }
  unint64_t v281 = v211;
  unint64_t v212 = v269;
  int64_t v213 = v269[2];
  int64_t v214 = v213 + 2;
  unint64_t v215 = (unint64_t)&v275;
  unint64_t v216 = v243;
  if (__OFADD__(v213, 2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v208 = qword_269AC3220;
    unint64_t v211 = *(void *)algn_269AC3228;
    swift_bridgeObjectRetain();
    sub_2504DBC4C(v208, v211);
    sub_2504DBC4C(v241, v240);
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v214 > v212[3] >> 1)
    {
      if (v213 <= v214) {
        int64_t v218 = v213 + 2;
      }
      else {
        int64_t v218 = v213;
      }
      unint64_t v212 = sub_250570DC0(isUniquelyReferenced_nonNull_native, v218, 1, v212);
    }
    sub_2504DBC4C(v208, v211);
    int64_t v213 = v212[2];
    unint64_t v215 = v212[3];
    int64_t v214 = v213 + 1;
    if (v213 < v215 >> 1) {
      goto LABEL_57;
    }
  }
  unint64_t v212 = sub_250570DC0((void *)(v215 > 1), v214, 1, v212);
LABEL_57:
  uint64_t v219 = v241;
  unint64_t v220 = v240;
  v212[2] = v214;
  unint64_t v221 = &v212[2 * v213];
  v221[4] = v208;
  v221[5] = v211;
  sub_2504DBC4C(v219, v220);
  unint64_t v222 = v212[3];
  int64_t v223 = v213 + 2;
  if (v223 > (uint64_t)(v222 >> 1)) {
    unint64_t v212 = sub_250570DC0((void *)(v222 > 1), v223, 1, v212);
  }
  v212[2] = v223;
  uint64_t v224 = &v212[2 * v214];
  uint64_t v225 = v241;
  unint64_t v226 = v240;
  v224[4] = v241;
  v224[5] = v226;
  sub_250511528(v225, v226);
  sub_250511528(v208, v211);
  unint64_t v137 = sub_250576544((uint64_t)v212);
  unint64_t v143 = v227;
  swift_bridgeObjectRelease();
  uint64_t v285 = (uint64_t)v284;
  unint64_t v286 = v281;
  uint64_t v289 = &type metadata for MemberSeed;
  unint64_t v290 = v283;
  uint64_t v287 = v242;
  unint64_t v288 = v216;
  uint64_t v228 = qword_269AC3710;
  unint64_t v229 = *(void *)algn_269AC3718;
  sub_2504DBC4C((uint64_t)v242, v216);
  sub_2505601DC(&v287, 1, v228, v229, v250);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v287);
  uint64_t v230 = v249;
  sub_2505BDD60();
  uint64_t v231 = sub_2505BDD70();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v231 - 8) + 56))(v230, 0, 1, v231);
  uint64_t v287 = (void *)v137;
  unint64_t v288 = v143;
  sub_2505BDD40();
LABEL_61:
  sub_2504DAF60(v249, &qword_269AB5E70);
  v239(v250, v268);
  sub_2505BDDB0();
  if (v232 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v233 = sub_2505BDC40();
    __swift_project_value_buffer(v233, (uint64_t)qword_269AC3188);
    os_log_type_t v234 = sub_2505BE3D0();
    uint64_t v235 = sub_2505BDC20();
    if (os_log_type_enabled(v235, v234))
    {
      uint64_t v236 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v236 = 0;
      _os_log_impl(&dword_2504D2000, v235, v234, "AES-GCM seal failed", v236, 2u);
      MEMORY[0x25337FF10](v236, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v237 = 325;
    *(_OWORD *)(v237 + 8) = xmmword_2505C0340;
    *(void *)(v237 + 24) = 0x80000002505C93B0;
    *(void *)(v237 + 32) = 0xD000000000000052;
    *(void *)(v237 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v279, (unint64_t)v280);
    sub_250511528(v137, v143);
    sub_250511528((uint64_t)v284, v281);
    sub_250511528(v241, v240);
    (*(void (**)(char *, uint64_t))(v246 + 8))(v248, v247);
    (*(void (**)(char *, uint64_t))(v262 + 8))(v256, v263);
    sub_25051AF3C((uint64_t)v244, type metadata accessor for GKCrypto_GroupAETextToSign);
    (*(void (**)(char *, uint64_t))(v252 + 8))(v255, v251);
    uint64_t v193 = (uint64_t)v245;
    goto LABEL_42;
  }
  sub_250511528(v279, (unint64_t)v280);
  sub_250511528(v137, v143);
  sub_250511528((uint64_t)v284, v281);
  (*(void (**)(char *, uint64_t))(v246 + 8))(v248, v247);
  (*(void (**)(char *, uint64_t))(v262 + 8))(v256, v263);
  sub_25051AF3C((uint64_t)v244, type metadata accessor for GKCrypto_GroupAETextToSign);
  (*(void (**)(char *, uint64_t))(v252 + 8))(v255, v251);
  sub_25051AF3C((uint64_t)v245, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  swift_bridgeObjectRelease();
  return v241;
}

uint64_t sub_250507920(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a2 + 40);
  unint64_t v14 = *(void *)(a2 + 48);
  uint64_t v16 = *a1;
  unint64_t v17 = a1[1];
  sub_2504DBC4C(v15, v14);
  sub_250511528(v16, v17);
  *a1 = v15;
  a1[1] = v14;
  sub_25051B91C(a3, (uint64_t)v13, type metadata accessor for GKCrypto_AdminGroupBlob);
  uint64_t v18 = (uint64_t)a1 + *(int *)(type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0) + 24);
  sub_2504DAF60(v18, &qword_269AB5EE0);
  sub_25051C8F4((uint64_t)v13, v18, type metadata accessor for GKCrypto_AdminGroupBlob);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
}

uint64_t sub_250507A90(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = (char *)a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5ED0);
  uint64_t v8 = MEMORY[0x270FA5388](v3 - 8, v4, v5, v6, v7);
  uint64_t v64 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8, v10, v11, v12, v13);
  uint64_t v15 = (uint64_t)&v62 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v17 = v16 - 8;
  MEMORY[0x270FA5388](v16, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v29 = MEMORY[0x270FA5388](v24, v25, v26, v27, v28);
  uint64_t v31 = (char *)&v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29, v32, v33, v34, v35);
  uint64_t v37 = (char *)&v62 - v36;
  uint64_t v38 = *(int *)(v17 + 56);
  uint64_t v39 = (uint64_t)&v23[v38];
  sub_25051B91C(a1 + v38, (uint64_t)&v23[v38], type metadata accessor for GroupMembership.MemberProperties);
  sub_25051C8F4(v39, (uint64_t)v37, type metadata accessor for GroupMembership.MemberProperties);
  uint64_t v40 = *(int *)(v17 + 56);
  uint64_t v41 = (uint64_t)&v23[v40];
  sub_25051B91C((uint64_t)&v65[v40], (uint64_t)&v23[v40], type metadata accessor for GroupMembership.MemberProperties);
  sub_25051C8F4(v41, (uint64_t)v31, type metadata accessor for GroupMembership.MemberProperties);
  uint64_t v42 = *(int *)(v24 + 28);
  uint64_t v65 = v37;
  sub_2504DAEFC((uint64_t)&v37[v42], v15, &qword_269AB5ED0);
  uint64_t v43 = sub_2505BE0B0();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  if (v45(v15, 1, v43) != 1)
  {
    uint64_t v46 = sub_2505BDF10();
    unint64_t v63 = v47;
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v48(v15, v43);
    uint64_t v15 = v64;
    sub_2504DAEFC((uint64_t)&v31[*(int *)(v24 + 28)], v64, &qword_269AB5ED0);
    if (v45(v15, 1, v43) != 1)
    {
      uint64_t v55 = sub_2505BDF10();
      unint64_t v57 = v56;
      v48(v15, v43);
      uint64_t v58 = v46;
      uint64_t v59 = v46;
      unint64_t v60 = v63;
      LOBYTE(v15) = sub_250559F4C(v55, v57, v59, v63);
      sub_25051AF3C((uint64_t)v31, type metadata accessor for GroupMembership.MemberProperties);
      sub_25051AF3C((uint64_t)v65, type metadata accessor for GroupMembership.MemberProperties);
      sub_250511528(v55, v57);
      sub_250511528(v58, v60);
      return v15 & 1;
    }
    sub_250511528(v46, v63);
  }
  sub_2504DAF60(v15, &qword_269AB5ED0);
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v49 = sub_2505BDC40();
  __swift_project_value_buffer(v49, (uint64_t)qword_269AC3188);
  os_log_type_t v50 = sub_2505BE3D0();
  uint64_t v51 = sub_2505BDC20();
  os_log_type_t v52 = v50;
  if (os_log_type_enabled(v51, v50))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl(&dword_2504D2000, v51, v52, "missing member key information", v53, 2u);
    MEMORY[0x25337FF10](v53, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
  swift_allocError();
  *(_WORD *)uint64_t v54 = 345;
  *(_OWORD *)(v54 + 8) = xmmword_2505C0360;
  *(void *)(v54 + 24) = 0x80000002505C93B0;
  *(void *)(v54 + 32) = 0xD000000000000052;
  *(void *)(v54 + 40) = 0x80000002505C8CB0;
  swift_willThrow();
  uint64_t v15 = (uint64_t)type metadata accessor for GroupMembership.MemberProperties;
  sub_25051AF3C((uint64_t)v31, type metadata accessor for GroupMembership.MemberProperties);
  sub_25051AF3C((uint64_t)v65, type metadata accessor for GroupMembership.MemberProperties);
  return v15 & 1;
}

uint64_t sub_250507F88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned char *a7)
{
  uint64_t v38 = a7;
  uint64_t v36 = a5;
  unint64_t v37 = a6;
  uint64_t v11 = type metadata accessor for GKCrypto_UserKeys(0);
  MEMORY[0x270FA5388](v11, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void *)(a1 + 8);
  sub_2504DBC4C(a2, a3);
  sub_250511528(v18, v19);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *((void *)v17 + 9) = MEMORY[0x263F8EE78];
  *((_OWORD *)v17 + 5) = xmmword_2505BFEF0;
  sub_2505BDA40();
  *(_DWORD *)uint64_t v17 = 1;
  type metadata accessor for UserKeyingInfo(0);
  *((void *)v17 + 1) = sub_2505BDF10();
  *((void *)v17 + 2) = v20;
  *((void *)v17 + 3) = sub_2505BDF10();
  *((void *)v17 + 4) = v21;
  *((void *)v17 + 5) = sub_2505BE010();
  *((void *)v17 + 6) = v22;
  *((void *)v17 + 7) = sub_2505BE010();
  *((void *)v17 + 8) = v23;
  sub_250528338((unint64_t *)&qword_269AB5A40, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
  uint64_t v24 = sub_2505BDB40();
  if (v7) {
    return sub_25051AF3C((uint64_t)v17, type metadata accessor for GKCrypto_UserKeys);
  }
  uint64_t v27 = v24;
  unint64_t v28 = v25;
  sub_25051AF3C((uint64_t)v17, type metadata accessor for GKCrypto_UserKeys);
  uint64_t v29 = sub_25056D81C(v27, v28);
  uint64_t v31 = v30;
  sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v31;
  uint64_t v32 = *(void *)(a1 + 48);
  unint64_t v33 = *(void *)(a1 + 56);
  uint64_t v34 = v36;
  unint64_t v35 = v37;
  *(void *)(a1 + 48) = v36;
  *(void *)(a1 + 56) = v35;
  sub_2504DBC4C(v34, v35);
  uint64_t result = sub_250511528(v32, v33);
  *(void *)(a1 + 32) = (*v38 & 1) == 0;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_2505081BC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v36 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v32 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16, v18, v19, v20, v21);
  uint64_t v23 = (char *)&v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  sub_250528338(&qword_269AB5EB8, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
  sub_2505BDB80();
  uint64_t v24 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  uint64_t v25 = (uint64_t)a1 + *(int *)(v24 + 24);
  sub_2504DAF60(v25, &qword_269AB5EC0);
  sub_25051C8F4((uint64_t)v23, v25, type metadata accessor for GKCrypto_VersionedSeed);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v25, 0, 1, v16);
  uint64_t v26 = *v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v26;
  sub_25051B91C(v31, (uint64_t)v15, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  uint64_t v27 = (uint64_t)a1 + *(int *)(v24 + 28);
  sub_2504DAF60(v27, &qword_269AB5EC8);
  sub_25051C8F4((uint64_t)v15, v27, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v27, 0, 1, v36);
}

uint64_t sub_25050847C(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  sub_2504DBC4C(a2, a3);
  sub_250511528(v6, v7);
  a1[1] = a2;
  a1[2] = a3;
  uint64_t v8 = sub_2505BE010();
  uint64_t v10 = v9;
  uint64_t result = sub_250511528(a1[3], a1[4]);
  a1[3] = v8;
  a1[4] = v10;
  return result;
}

uint64_t sub_250508500(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v85 = a6;
  unint64_t v86 = a7;
  uint64_t v83 = sub_2505BE0B0();
  uint64_t v88 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83, v13, v14, v15, v16);
  uint64_t v82 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_2505BE000();
  uint64_t v87 = *(void *)(v81 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v81, v18, v19, v20, v21);
  uint64_t v80 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v24, v25, v26, v27);
  uint64_t v92 = (char *)&v75 - v28;
  uint64_t v91 = sub_2505BDF30();
  uint64_t v97 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91, v29, v30, v31, v32);
  uint64_t v90 = (char *)&v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_2505BDF90();
  uint64_t v34 = *(void *)(v89 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v89, v35, v36, v37, v38);
  uint64_t v84 = (char *)&v75 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39, v41, v42, v43, v44);
  uint64_t v46 = (char *)&v75 - v45;
  uint64_t v95 = &type metadata for AdminSeed;
  unint64_t v47 = sub_25051CA18();
  unint64_t v96 = v47;
  uint64_t v48 = (void *)swift_allocObject();
  uint64_t v93 = (uint64_t)v48;
  v48[2] = a2;
  v48[3] = a3;
  v48[4] = a4;
  v48[5] = a5;
  sub_2504DBC4C(a2, a3);
  sub_25051B908(a4, a5);
  if (qword_269AB5620 != -1) {
    swift_once();
  }
  sub_2505603C4(&v93, 1, qword_269AC36F0, *(unint64_t *)algn_269AC36F8);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
  if (!v7)
  {
    uint64_t v79 = 0;
    os_log_type_t v50 = v90;
    sub_2505BDF50();
    uint64_t v77 = *(void (**)(char *, uint64_t))(v34 + 8);
    uint64_t v78 = v34 + 8;
    v77(v46, v89);
    uint64_t v51 = sub_2505BDF10();
    uint64_t v53 = v52;
    uint64_t v54 = *(void (**)(char *, uint64_t))(v97 + 8);
    v97 += 8;
    uint64_t v76 = v54;
    v54(v50, v91);
    sub_250511528(*(void *)(a1 + 48), *(void *)(a1 + 56));
    *(void *)(a1 + 48) = v51;
    *(void *)(a1 + 56) = v53;
    uint64_t v95 = &type metadata for AdminSeed;
    unint64_t v96 = v47;
    uint64_t v55 = (void *)swift_allocObject();
    uint64_t v93 = (uint64_t)v55;
    v55[2] = a2;
    v55[3] = a3;
    v55[4] = a4;
    v55[5] = a5;
    sub_2504DBC4C(a2, a3);
    sub_25051B908(a4, a5);
    if (qword_269AB5628 != -1) {
      swift_once();
    }
    uint64_t v56 = v79;
    sub_25056041C(&v93, 1, qword_269AC3700, *(unint64_t *)algn_269AC3708);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
    if (!v56)
    {
      unint64_t v57 = v82;
      uint64_t v58 = v92;
      sub_2505BDFA0();
      uint64_t v59 = *(void (**)(char *, uint64_t))(v87 + 8);
      v87 += 8;
      v59(v58, v81);
      uint64_t v60 = sub_2505BDF10();
      uint64_t v62 = v61;
      unint64_t v63 = *(void (**)(char *, uint64_t))(v88 + 8);
      v88 += 8;
      v63(v57, v83);
      sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
      *(void *)(a1 + 16) = v60;
      *(void *)(a1 + 24) = v62;
      uint64_t v95 = &type metadata for MemberSeed;
      unint64_t v64 = sub_250522A2C();
      unint64_t v96 = v64;
      uint64_t v93 = v85;
      unint64_t v94 = v86;
      sub_2504DBC4C(v85, v86);
      if (qword_269AB5648 != -1) {
        swift_once();
      }
      sub_2505603C4(&v93, 1, qword_269AC3740, *(unint64_t *)algn_269AC3748);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
      uint64_t v65 = v90;
      uint64_t v66 = v84;
      sub_2505BDF50();
      v77(v66, v89);
      uint64_t v67 = sub_2505BDF10();
      uint64_t v69 = v68;
      v76(v65, v91);
      sub_250511528(*(void *)(a1 + 32), *(void *)(a1 + 40));
      *(void *)(a1 + 32) = v67;
      *(void *)(a1 + 40) = v69;
      uint64_t v95 = &type metadata for MemberSeed;
      unint64_t v96 = v64;
      uint64_t v93 = v85;
      unint64_t v94 = v86;
      sub_2504DBC4C(v85, v86);
      if (qword_269AB5650 != -1) {
        swift_once();
      }
      sub_25056041C(&v93, 1, qword_269AC3750, *(unint64_t *)algn_269AC3758);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
      uint64_t v70 = v82;
      uint64_t v71 = v80;
      sub_2505BDFA0();
      v59(v71, v81);
      uint64_t v72 = sub_2505BDF10();
      uint64_t v74 = v73;
      v63(v70, v83);
      uint64_t result = sub_250511528(*(void *)a1, *(void *)(a1 + 8));
      *(void *)a1 = v72;
      *(void *)(a1 + 8) = v74;
    }
  }
  return result;
}

uint64_t sub_250508B80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v6 = *a2;
  swift_bridgeObjectRetain_n();
  sub_250510B38(&v6);
  if (v2)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = v6;
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v4;
  }
  return result;
}

uint64_t sub_250508BFC(uint64_t *a1, int a2)
{
  int v213 = a2;
  uint64_t v206 = type metadata accessor for GKCrypto_UserKeys(0);
  MEMORY[0x270FA5388](v206, v4, v5, v6, v7);
  uint64_t v205 = (char *)&v189 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = type metadata accessor for UserAndAllInfo(0);
  uint64_t v202 = *(void *)(v203 - 8);
  MEMORY[0x270FA5388](v203, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = sub_2505BDF30();
  uint64_t v238 = *(void *)(v212 - 8);
  MEMORY[0x270FA5388](v212, v15, v16, v17, v18);
  unint64_t v211 = (char *)&v189 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v204 = type metadata accessor for Invite(0);
  MEMORY[0x270FA5388](v204, v20, v21, v22, v23);
  uint64_t v231 = (uint64_t *)((char *)&v189 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v230 = sub_2505BE0B0();
  uint64_t v236 = *(void *)(v230 - 8);
  MEMORY[0x270FA5388](v230, v25, v26, v27, v28);
  unint64_t v210 = (char *)&v189 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for MembershipVerifier(0);
  uint64_t v34 = MEMORY[0x270FA5388](v209, v30, v31, v32, v33);
  uint64_t v208 = (char *)&v189 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34, v36, v37, v38, v39);
  uint64_t v232 = (uint64_t)&v189 - v40;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  MEMORY[0x270FA5388](v41 - 8, v42, v43, v44, v45);
  uint64_t v215 = (uint64_t)&v189 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for UserKeyingInfo(0);
  unint64_t v229 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47, v48, v49, v50, v51);
  uint64_t v237 = (uint64_t)&v189 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v197 = *(void *)(v214 - 8);
  MEMORY[0x270FA5388](v214, v53, v54, v55, v56);
  uint64_t v235 = (char *)&v189 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E88);
  uint64_t v63 = MEMORY[0x270FA5388](v58 - 8, v59, v60, v61, v62);
  uint64_t v217 = (uint64_t *)((char *)&v189 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v63, v65, v66, v67, v68);
  unint64_t v216 = (uint64_t *)((char *)&v189 - v69);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v70 - 8, v71, v72, v73, v74);
  uint64_t v76 = (char *)&v189 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_2505BE000();
  uint64_t v78 = *(void *)(v77 - 8);
  uint64_t v83 = MEMORY[0x270FA5388](v77, v79, v80, v81, v82);
  uint64_t v233 = (uint64_t)&v189 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v83, v85, v86, v87, v88);
  uint64_t v90 = (char *)&v189 - v89;
  uint64_t v91 = *a1;
  uint64_t v218 = v2;
  uint64_t v92 = v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v234 = v47;
  sub_2504DAEFC(v92 + *(int *)(v47 + 44), (uint64_t)v76, &qword_269AB5A28);
  uint64_t v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  uint64_t v219 = v77;
  if (v93(v76, 1, v77) == 1)
  {
    sub_2504DAF60((uint64_t)v76, &qword_269AB5A28);
    if (qword_269AB5418 == -1)
    {
LABEL_3:
      uint64_t v94 = sub_2505BDC40();
      __swift_project_value_buffer(v94, (uint64_t)qword_269AC3188);
      os_log_type_t v95 = sub_2505BE3D0();
      swift_retain_n();
      unint64_t v96 = sub_2505BDC20();
      if (os_log_type_enabled(v96, v95))
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        uint64_t v98 = swift_slowAlloc();
        *(void *)&v239[0] = v98;
        *(_DWORD *)uint64_t v97 = 136315138;
        unint64_t v243 = v97 + 4;
        uint64_t v99 = *(void *)v92;
        uint64_t v92 = *(void *)(v92 + 8);
        sub_2504DBC4C(v99, v92);
        uint64_t v100 = sub_2505BD8B0();
        unint64_t v102 = v101;
        sub_250511528(v99, v92);
        v241[0] = sub_25051171C(v100, v102, (uint64_t *)v239);
        sub_2505BE430();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2504D2000, v96, v95, "originator %s keying material missing in group creation", v97, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25337FF10](v98, -1, -1);
        MEMORY[0x25337FF10](v97, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      uint64_t v176 = swift_allocError();
      *(_WORD *)uint64_t v177 = 323;
      *(_OWORD *)(v177 + 8) = xmmword_2505C0380;
      *(void *)(v177 + 24) = 0x80000002505C9370;
      *(void *)(v177 + 32) = 0xD000000000000052;
      *(void *)(v177 + 40) = 0x80000002505C8CB0;
      unint64_t v243 = (uint8_t *)v176;
      swift_willThrow();
      return v92;
    }
LABEL_58:
    swift_once();
    goto LABEL_3;
  }
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v90, v76, v219);
  uint64_t v103 = MEMORY[0x263F8EE78];
  unint64_t v104 = sub_2504E1B08(MEMORY[0x263F8EE78]);
  uint64_t v105 = *(void *)(v91 + 64);
  uint64_t v191 = v91 + 64;
  uint64_t v106 = 1 << *(unsigned char *)(v91 + 32);
  uint64_t v107 = -1;
  if (v106 < 64) {
    uint64_t v107 = ~(-1 << v106);
  }
  unint64_t v108 = v107 & v105;
  uint64_t v201 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v229 + 48);
  uint64_t v228 = (void (**)(char *))(v236 + 16);
  unint64_t v199 = (void (**)(uint64_t, char *, uint64_t))(v78 + 16);
  uint64_t v198 = (void (**)(char *, uint64_t, uint64_t))(v238 + 16);
  uint64_t v193 = (void (**)(char *, void, uint64_t, uint64_t))(v236 + 56);
  int64_t v192 = (unint64_t)(v106 + 63) >> 6;
  int64_t v190 = v192 - 1;
  uint64_t v196 = v91;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v110 = 0;
  long long v195 = xmmword_2505BFEF0;
  uint64_t v92 = v103;
  uint64_t v207 = v90;
  uint64_t v111 = v237;
  uint64_t v112 = v217;
  uint64_t v200 = v78;
  int v194 = v14;
  while (1)
  {
    unint64_t v229 = v104;
    if (v108)
    {
      uint64_t v113 = v78;
      uint64_t v114 = v92;
      uint64_t v224 = (v108 - 1) & v108;
      int64_t v223 = v110;
      unint64_t v115 = __clz(__rbit64(v108)) | (v110 << 6);
LABEL_10:
      uint64_t v116 = *(void *)(v196 + 56);
      uint64_t v117 = (uint64_t *)(*(void *)(v196 + 48) + 16 * v115);
      uint64_t v118 = *v117;
      unint64_t v119 = v117[1];
      *uint64_t v112 = *v117;
      v112[1] = v119;
      uint64_t v120 = v116 + *(void *)(v197 + 72) * v115;
      uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
      sub_25051B91C(v120, (uint64_t)v112 + *(int *)(v121 + 48), type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v121 - 8) + 56))(v112, 0, 1, v121);
      sub_2504DBC4C(v118, v119);
      uint64_t v111 = v237;
      uint64_t v92 = v114;
      uint64_t v78 = v113;
      goto LABEL_23;
    }
    int64_t v122 = v110 + 1;
    if (__OFADD__(v110, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v122 >= v192) {
      goto LABEL_21;
    }
    unint64_t v123 = *(void *)(v191 + 8 * v122);
    if (v123) {
      goto LABEL_14;
    }
    v110 += 2;
    if (v122 + 1 >= v192)
    {
LABEL_41:
      int64_t v223 = v122;
      goto LABEL_22;
    }
    unint64_t v123 = *(void *)(v191 + 8 * v110);
    if (v123) {
      goto LABEL_17;
    }
    if (v122 + 2 >= v192)
    {
LABEL_21:
      int64_t v223 = v110;
    }
    else
    {
      unint64_t v123 = *(void *)(v191 + 8 * (v122 + 2));
      if (v123)
      {
        v122 += 2;
LABEL_14:
        uint64_t v113 = v78;
        uint64_t v114 = v92;
        uint64_t v224 = (v123 - 1) & v123;
        unint64_t v115 = __clz(__rbit64(v123)) + (v122 << 6);
        int64_t v223 = v122;
        goto LABEL_10;
      }
      int64_t v110 = v122 + 3;
      if (v122 + 3 < v192)
      {
        unint64_t v123 = *(void *)(v191 + 8 * v110);
        if (!v123)
        {
          while (1)
          {
            int64_t v122 = v110 + 1;
            if (__OFADD__(v110, 1)) {
              break;
            }
            if (v122 >= v192)
            {
              int64_t v122 = v190;
              goto LABEL_41;
            }
            unint64_t v123 = *(void *)(v191 + 8 * v122);
            ++v110;
            if (v123) {
              goto LABEL_14;
            }
          }
          __break(1u);
          return result;
        }
LABEL_17:
        int64_t v122 = v110;
        goto LABEL_14;
      }
      int64_t v223 = v122 + 2;
    }
LABEL_22:
    uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v124 - 8) + 56))(v112, 1, 1, v124);
    uint64_t v224 = 0;
LABEL_23:
    uint64_t v125 = v216;
    sub_2505283F0((uint64_t)v112, (uint64_t)v216, &qword_269AB5E88);
    uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v126 - 8) + 48))(v125, 1, v126) == 1) {
      goto LABEL_55;
    }
    unint64_t v127 = v125[1];
    uint64_t v236 = *v125;
    uint64_t v128 = (uint64_t)v125 + *(int *)(v126 + 48);
    uint64_t v129 = v235;
    sub_25051C8F4(v128, (uint64_t)v235, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v130 = (uint64_t)&v129[*(int *)(v214 + 24)];
    uint64_t v131 = v215;
    sub_2504DAEFC(v130, v215, &qword_269AB5E80);
    uint64_t v132 = v234;
    if ((*v201)(v131, 1, v234) == 1) {
      break;
    }
    uint64_t v225 = v92;
    sub_25051C8F4(v131, v111, type metadata accessor for UserKeyingInfo);
    uint64_t v133 = v218;
    unint64_t v134 = *(void *)(v218 + 24);
    *(void *)&v239[0] = *(void *)(v218 + 16);
    uint64_t v135 = *(void *)&v239[0];
    *((void *)&v239[0] + 1) = v134;
    uint64_t v136 = *v228;
    uint64_t v137 = (uint64_t)v210;
    uint64_t v222 = v111 + *(int *)(v132 + 28);
    uint64_t v238 = v127;
    uint64_t v138 = v230;
    v136(v210);
    unint64_t v226 = v134;
    sub_2504DBC4C(v135, v134);
    uint64_t v139 = v232;
    sub_2505768F8((uint64_t *)v239, v137, v232);
    long long v227 = *(_OWORD *)(v133 + 40);
    v239[0] = v227;
    (*v199)(v233, v207, v219);
    uint64_t v140 = v236;
    v241[0] = v236;
    v241[1] = v238;
    v240[0] = v135;
    v240[1] = v134;
    uint64_t v92 = (uint64_t)v208;
    ((void (*)(char *, uint64_t, uint64_t))v136)(v208, v139, v138);
    uint64_t v141 = v209;
    uint64_t v142 = *(int *)(v209 + 20);
    uint64_t v220 = v139 + v142;
    unint64_t v221 = (void (*)(char *, uint64_t, uint64_t))v136;
    v136((char *)(v92 + v142));
    uint64_t v143 = *(int *)(v141 + 24);
    uint64_t v144 = *(void *)(v139 + v143);
    unint64_t v145 = *(void *)(v139 + v143 + 8);
    uint64_t v146 = (uint64_t *)(v92 + v143);
    *uint64_t v146 = v144;
    v146[1] = v145;
    uint64_t v147 = (uint64_t)v211;
    (*v198)(v211, v237 + *(int *)(v132 + 20), v212);
    sub_2504DBC4C(v135, v226);
    sub_2504DBC4C(v227, *((unint64_t *)&v227 + 1));
    sub_2504DBC4C(v140, v238);
    sub_2504DBC4C(v144, v145);
    uint64_t v148 = v231;
    uint64_t v149 = v243;
    Invite.init(invitersID:invitersSigningKey:invitedID:groupID:groupVersion:invitedMembershipVerifier:invitedEncryptionPK:)((uint64_t *)v239, v233, v241, v240, v213, v92, v147, v231);
    unint64_t v243 = v149;
    if (v149)
    {
      sub_250511528(v236, v238);
LABEL_51:
      sub_25051AF3C(v232, type metadata accessor for MembershipVerifier);
      sub_25051AF3C(v237, type metadata accessor for UserKeyingInfo);
      sub_25051AF3C((uint64_t)v235, type metadata accessor for GroupMembership.MemberProperties);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v200 + 8))(v207, v219);
      return v92;
    }
    char v150 = *v235;
    uint64_t v151 = (void *)((char *)v148 + *(int *)(v204 + 28));
    uint64_t v152 = *v151;
    uint64_t v92 = v151[1];
    uint64_t v153 = (uint64_t)v205;
    *((void *)v205 + 9) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v153 + 80) = v195;
    uint64_t v154 = v236;
    sub_2504DBC4C(v236, v238);
    sub_25051B908(v152, v92);
    sub_2505BDA40();
    *(_DWORD *)uint64_t v153 = 1;
    *(void *)(v153 + 8) = sub_2505BDF10();
    *(void *)(v153 + 16) = v155;
    *(void *)(v153 + 24) = sub_2505BDF10();
    *(void *)(v153 + 32) = v156;
    *(void *)(v153 + 40) = sub_2505BE010();
    *(void *)(v153 + 48) = v157;
    *(void *)(v153 + 56) = sub_2505BE010();
    *(void *)(v153 + 64) = v158;
    sub_250528338((unint64_t *)&qword_269AB5A40, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
    uint64_t v159 = v243;
    uint64_t v160 = sub_2505BDB40();
    unint64_t v243 = v159;
    if (v159)
    {
      sub_25051AF3C(v153, type metadata accessor for GKCrypto_UserKeys);
      unint64_t v186 = v238;
      sub_250511528(v154, v238);
      sub_25051B8D4(v152, v92);
      sub_250511528(v154, v186);
      sub_25051AF3C((uint64_t)v231, type metadata accessor for Invite);
      goto LABEL_51;
    }
    uint64_t v162 = v160;
    uint64_t v163 = v161;
    sub_25051AF3C(v153, type metadata accessor for GKCrypto_UserKeys);
    uint64_t v164 = (uint64_t)v194;
    uint64_t v165 = &v194[*(int *)(v203 + 32)];
    uint64_t v166 = v230;
    v221(v165, v220, v230);
    (*v193)(v165, 0, 1, v166);
    *(void *)uint64_t v164 = v154;
    unint64_t v167 = v238;
    *(void *)(v164 + 8) = v238;
    *(unsigned char *)(v164 + 16) = v150;
    *(void *)(v164 + 24) = v152;
    *(void *)(v164 + 32) = v92;
    *(void *)(v164 + 40) = v162;
    *(void *)(v164 + 48) = v163;
    uint64_t v92 = v225;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v92 = sub_2505711CC(0, *(void *)(v92 + 16) + 1, 1, v92);
    }
    uint64_t v168 = v217;
    unint64_t v170 = *(void *)(v92 + 16);
    unint64_t v169 = *(void *)(v92 + 24);
    uint64_t v78 = v200;
    if (v170 >= v169 >> 1) {
      uint64_t v92 = sub_2505711CC(v169 > 1, v170 + 1, 1, v92);
    }
    *(void *)(v92 + 16) = v170 + 1;
    sub_25051C8F4(v164, v92+ ((*(unsigned __int8 *)(v202 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v202 + 80))+ *(void *)(v202 + 72) * v170, type metadata accessor for UserAndAllInfo);
    uint64_t v171 = v231;
    uint64_t v172 = v243;
    sub_250576FC4((uint64_t *)v239);
    unint64_t v243 = v172;
    if (v172)
    {
      sub_250511528(v236, v167);
      sub_25051AF3C((uint64_t)v171, type metadata accessor for Invite);
      sub_25051AF3C(v232, type metadata accessor for MembershipVerifier);
      sub_25051AF3C(v237, type metadata accessor for UserKeyingInfo);
      sub_25051AF3C((uint64_t)v235, type metadata accessor for GroupMembership.MemberProperties);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    v242[0] = v239[0];
    v242[1] = v239[1];
    v242[2] = v239[2];
    uint64_t v173 = v236;
    sub_2504DBC4C(v236, v167);
    sub_250527EA4((uint64_t *)v242, (void (*)(uint64_t, uint64_t))sub_2504DBC4C);
    unint64_t v174 = v229;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v239[0] = v174;
    sub_250514668(v242, v173, v167, isUniquelyReferenced_nonNull_native);
    unint64_t v104 = *(void *)&v239[0];
    swift_bridgeObjectRelease();
    sub_250511528(v173, v167);
    sub_250527EA4((uint64_t *)v242, (void (*)(uint64_t, uint64_t))sub_250511528);
    sub_250511528(v173, v167);
    sub_25051AF3C((uint64_t)v171, type metadata accessor for Invite);
    sub_25051AF3C(v232, type metadata accessor for MembershipVerifier);
    uint64_t v111 = v237;
    sub_25051AF3C(v237, type metadata accessor for UserKeyingInfo);
    uint64_t result = sub_25051AF3C((uint64_t)v235, type metadata accessor for GroupMembership.MemberProperties);
    int64_t v110 = v223;
    unint64_t v108 = v224;
    uint64_t v112 = v168;
  }
  uint64_t v178 = v236;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2504DAF60(v131, &qword_269AB5E80);
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v179 = sub_2505BDC40();
  __swift_project_value_buffer(v179, (uint64_t)qword_269AC3188);
  LOBYTE(v92) = sub_2505BE3D0();
  sub_2504DBC4C(v178, v127);
  sub_2504DBC4C(v178, v127);
  os_log_type_t v180 = sub_2505BDC20();
  uint64_t v92 = v92;
  if (os_log_type_enabled(v180, (os_log_type_t)v92))
  {
    uint64_t v181 = (uint8_t *)swift_slowAlloc();
    uint64_t v182 = swift_slowAlloc();
    *(void *)&v239[0] = v182;
    *(_DWORD *)uint64_t v181 = 136315138;
    unint64_t v243 = v181 + 4;
    sub_2504DBC4C(v178, v127);
    uint64_t v183 = sub_2505BD8B0();
    unint64_t v185 = v184;
    sub_250511528(v178, v127);
    v241[0] = sub_25051171C(v183, v185, (uint64_t *)v239);
    uint64_t v78 = v200;
    sub_2505BE430();
    swift_bridgeObjectRelease();
    sub_250511528(v178, v127);
    sub_250511528(v178, v127);
    _os_log_impl(&dword_2504D2000, v180, (os_log_type_t)v92, "member %s being added to group missing keying info", v181, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25337FF10](v182, -1, -1);
    MEMORY[0x25337FF10](v181, -1, -1);
  }
  else
  {
    sub_250511528(v178, v127);
    sub_250511528(v178, v127);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
  uint64_t v187 = swift_allocError();
  *(_WORD *)uint64_t v188 = 320;
  *(_OWORD *)(v188 + 8) = xmmword_2505C0370;
  *(void *)(v188 + 24) = 0x80000002505C9370;
  *(void *)(v188 + 32) = 0xD000000000000052;
  *(void *)(v188 + 40) = 0x80000002505C8CB0;
  unint64_t v243 = (uint8_t *)v187;
  swift_willThrow();
  sub_250511528(v178, v127);
  sub_25051AF3C((uint64_t)v235, type metadata accessor for GroupMembership.MemberProperties);
LABEL_55:
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v207, v219);
  return v92;
}

char *sub_25050A430(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int a7)
{
  unint64_t v118 = a6;
  uint64_t v113 = a3;
  unint64_t v114 = a4;
  uint64_t v111 = a1;
  unint64_t v112 = a2;
  uint64_t v11 = sub_2505BE000();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v11, v13, v14, v15, v16);
  uint64_t v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v92 - v24;
  uint64_t v26 = sub_2505BDCE0();
  uint64_t v31 = MEMORY[0x270FA5388](v26, v27, v28, v29, v30);
  uint64_t v36 = MEMORY[0x270FA5388](v31, v32, v33, v34, v35);
  if (a7 == 1) {
    return 0;
  }
  unint64_t v108 = v19;
  unint64_t v40 = *(void *)(v7 + 96);
  if (v40 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_2505BDC40();
    __swift_project_value_buffer(v41, (uint64_t)qword_269AC3188);
    os_log_type_t v42 = sub_2505BE3D0();
    uint64_t v43 = sub_2505BDC20();
    os_log_type_t v44 = v42;
    if (os_log_type_enabled(v43, v42))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_2504D2000, v43, v44, "missing admin seed", v45, 2u);
      MEMORY[0x25337FF10](v45, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v46 = 308;
    *(_OWORD *)(v46 + 8) = xmmword_2505C0390;
    *(void *)(v46 + 24) = 0x80000002505C9290;
    *(void *)(v46 + 32) = 0xD000000000000052;
    *(void *)(v46 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
  }
  else
  {
    uint64_t v97 = v25;
    unint64_t v104 = (char *)&v92 - v37;
    uint64_t v94 = v39;
    uint64_t v99 = v12;
    uint64_t v96 = v11;
    unint64_t v105 = v8;
    uint64_t v98 = v36;
    uint64_t v100 = v38;
    uint64_t v47 = *(void *)(v7 + 104);
    unint64_t v48 = *(void *)(v7 + 112);
    uint64_t v49 = *(void *)(v7 + 72);
    unint64_t v103 = a5;
    unint64_t v50 = *(void *)(v7 + 80);
    uint64_t v51 = *(void *)(v7 + 88);
    uint64_t v52 = *(void *)(v7 + 16);
    unint64_t v110 = *(void *)(v7 + 24);
    uint64_t v93 = (_DWORD *)(v7 + 64);
    swift_beginAccess();
    unsigned int v95 = *(_DWORD *)(v7 + 64);
    uint64_t v116 = &type metadata for MemberSeed;
    unint64_t v117 = sub_250522A2C();
    uint64_t v53 = v103;
    unint64_t v54 = v118;
    v115[0] = v103;
    v115[1] = v118;
    uint64_t v106 = v47;
    uint64_t v107 = v51;
    uint64_t v55 = v51;
    unint64_t v56 = v48;
    unint64_t v57 = v48;
    unint64_t v58 = v110;
    sub_25051C95C(v55, v40, v47, v57);
    uint64_t v102 = v49;
    unint64_t v101 = v50;
    sub_2504DBC4C(v49, v50);
    uint64_t v109 = v52;
    sub_2504DBC4C(v52, v58);
    sub_2504DBC4C(v53, v54);
    if (qword_269AB5638 != -1) {
      swift_once();
    }
    uint64_t v25 = v104;
    unint64_t v59 = v105;
    sub_2505601DC(v115, 1, qword_269AC3720, *(unint64_t *)algn_269AC3728, (uint64_t)v104);
    if (v59)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      sub_25051B884(v107, v40, v106, v56);
      sub_250511528(v109, v58);
      sub_250511528(v102, v101);
    }
    else
    {
      unint64_t v118 = v40;
      unint64_t v105 = v56;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      uint64_t v116 = &type metadata for AdminSeed;
      unint64_t v103 = sub_25051CA18();
      unint64_t v117 = v103;
      uint64_t v60 = (void *)swift_allocObject();
      v115[0] = v60;
      uint64_t v62 = v111;
      unint64_t v61 = v112;
      void v60[2] = v111;
      v60[3] = v61;
      uint64_t v64 = v113;
      unint64_t v63 = v114;
      v60[4] = v113;
      v60[5] = v63;
      sub_2504DBC4C(v62, v61);
      sub_25051B908(v64, v63);
      if (qword_269AB5628 != -1) {
        swift_once();
      }
      uint64_t v65 = (uint64_t)v97;
      sub_25056041C(v115, 1, qword_269AC3700, *(unint64_t *)algn_269AC3708);
      uint64_t v66 = v99;
      unint64_t v67 = v101;
      uint64_t v68 = v102;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      uint64_t v69 = v109;
      uint64_t v70 = v25;
      uint64_t v25 = sub_2505101BC(v109, v110, v95, v68, v67, (uint64_t)v25, v65);
      uint64_t v73 = *(char **)(v66 + 8);
      uint64_t v72 = v66 + 8;
      uint64_t v97 = v73;
      ((void (*)(uint64_t, uint64_t))v73)(v65, v96);
      uint64_t v74 = *(char **)(v100 + 8);
      v100 += 8;
      unint64_t v104 = v74;
      ((void (*)(char *, uint64_t))v74)(v70, v98);
      sub_250511528(v69, v110);
      sub_250511528(v68, v67);
      LODWORD(v102) = *v93;
      uint64_t v116 = &type metadata for AdminSeed;
      unint64_t v117 = v103;
      uint64_t v75 = (void *)swift_allocObject();
      v115[0] = v75;
      uint64_t v76 = v111;
      unint64_t v77 = v112;
      v75[2] = v111;
      v75[3] = v77;
      uint64_t v79 = v113;
      unint64_t v78 = v114;
      v75[4] = v113;
      v75[5] = v78;
      sub_2504DBC4C(v109, v110);
      sub_2504DBC4C(v76, v77);
      sub_25051B908(v79, v78);
      if (qword_269AB5610 != -1) {
        swift_once();
      }
      sub_2505601DC(v115, 1, qword_269AC36D0, *(unint64_t *)algn_269AC36D8, v94);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      uint64_t v99 = v72;
      uint64_t v116 = &type metadata for AdminSeed;
      unint64_t v117 = v103;
      uint64_t v80 = (void *)swift_allocObject();
      v115[0] = v80;
      uint64_t v82 = v111;
      unint64_t v81 = v112;
      v80[2] = v111;
      v80[3] = v81;
      uint64_t v84 = v113;
      unint64_t v83 = v114;
      v80[4] = v113;
      v80[5] = v83;
      uint64_t v85 = qword_269AC3700;
      unint64_t v86 = *(void *)algn_269AC3708;
      sub_2504DBC4C(v82, v81);
      sub_25051B908(v84, v83);
      uint64_t v87 = (uint64_t)v108;
      sub_25056041C(v115, 1, v85, v86);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      uint64_t v88 = v109;
      unint64_t v89 = v110;
      unint64_t v90 = v105;
      uint64_t v91 = v94;
      sub_25050F920(v109, v110, v102, v107, v118, v106, v105, v94, v87);
      ((void (*)(char *, uint64_t))v97)(v108, v96);
      ((void (*)(uint64_t, uint64_t))v104)(v91, v98);
      sub_250511528(v88, v89);
      sub_25051B884(v107, v118, v106, v90);
    }
  }
  return v25;
}

uint64_t sub_25050AE00()
{
  uint64_t v1 = sub_2505BE0B0();
  uint64_t v116 = *(void *)(v1 - 8);
  uint64_t v117 = v1;
  MEMORY[0x270FA5388](v1, v2, v3, v4, v5);
  unint64_t v115 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Invite(0);
  MEMORY[0x270FA5388](v7 - 8, v8, v9, v10, v11);
  uint64_t v120 = (uint64_t)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
  MEMORY[0x270FA5388](v13 - 8, v14, v15, v16, v17);
  uint64_t v19 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_2505BDF90();
  uint64_t v127 = *(void *)(v20 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v20, v21, v22, v23, v24);
  unint64_t v119 = (char *)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25, v27, v28, v29, v30);
  unint64_t v123 = (char *)&v105 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
  MEMORY[0x270FA5388](v32 - 8, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v105 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_2505BE000();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v39, v41, v42, v43, v44);
  unint64_t v118 = (char *)&v105 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45, v47, v48, v49, v50);
  uint64_t v52 = (char *)&v105 - v51;
  int64_t v122 = v0;
  uint64_t v53 = (char *)v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  uint64_t v54 = type metadata accessor for UserKeyingInfo(0);
  sub_2504DAEFC((uint64_t)&v53[*(int *)(v54 + 44)], (uint64_t)v38, &qword_269AB5A28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
  {
    uint64_t v55 = &qword_269AB5A28;
    uint64_t v56 = (uint64_t)v38;
LABEL_5:
    sub_2504DAF60(v56, v55);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v58 = sub_2505BDC40();
    __swift_project_value_buffer(v58, (uint64_t)qword_269AC3188);
    os_log_type_t v59 = sub_2505BE3D0();
    uint64_t v60 = sub_2505BDC20();
    os_log_type_t v61 = v59;
    if (os_log_type_enabled(v60, v59))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl(&dword_2504D2000, v60, v61, "originator keying material missing in group creation", v62, 2u);
      MEMORY[0x25337FF10](v62, -1, -1);
    }

    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v64 = 323;
    *(_OWORD *)(v64 + 8) = xmmword_2505C03B0;
    *(void *)(v64 + 24) = 0x80000002505C9270;
    *(void *)(v64 + 32) = 0xD000000000000052;
    *(void *)(v64 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return v63;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v52, v38, v39);
  sub_2504DAEFC((uint64_t)&v53[*(int *)(v54 + 40)], (uint64_t)v19, &qword_269AB5A78);
  uint64_t v57 = v127;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v19, 1, v20) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v52, v39);
    uint64_t v55 = &qword_269AB5A78;
    uint64_t v56 = (uint64_t)v19;
    goto LABEL_5;
  }
  uint64_t v112 = v54;
  uint64_t v113 = v20;
  uint64_t v114 = v40;
  uint64_t v66 = v123;
  (*(void (**)(char *, char *))(v57 + 32))(v123, v19);
  uint64_t v67 = v122[5];
  unint64_t v68 = v122[6];
  uint64_t v69 = (void *)((char *)v122 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
  swift_beginAccess();
  uint64_t v70 = *v69;
  if (!*(void *)(v70 + 16))
  {
LABEL_16:
    (*(void (**)(char *, uint64_t))(v57 + 8))(v66, v113);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v52, v39);
    return 0;
  }
  sub_2504DBC4C(v67, v68);
  swift_bridgeObjectRetain();
  unint64_t v71 = sub_250513064(v67, v68);
  if ((v72 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_250511528(v67, v68);
    goto LABEL_16;
  }
  uint64_t v73 = (uint64_t *)(*(void *)(v70 + 56) + 48 * v71);
  unint64_t v74 = v73[1];
  uint64_t v108 = *v73;
  unint64_t v109 = v74;
  unint64_t v110 = v52;
  uint64_t v75 = v73[2];
  unint64_t v76 = v73[3];
  uint64_t v77 = v73[4];
  unint64_t v111 = v73[5];
  sub_2504DBC4C(v108, v74);
  uint64_t v105 = v75;
  unint64_t v106 = v76;
  sub_2504DBC4C(v75, v76);
  uint64_t v107 = v77;
  sub_2504DBC4C(v77, v111);
  swift_bridgeObjectRelease();
  sub_250511528(v67, v68);
  uint64_t v125 = (void *)v67;
  unint64_t v126 = v68;
  unint64_t v78 = v119;
  (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v119, v66, v113);
  uint64_t v79 = (uint64_t)v118;
  uint64_t v80 = v110;
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v118, v110, v39);
  sub_2504DBC4C(v67, v68);
  uint64_t v81 = v108;
  unint64_t v82 = v109;
  sub_2504DBC4C(v108, v109);
  uint64_t v83 = v121;
  uint64_t v84 = (uint64_t)v78;
  uint64_t v63 = v81;
  sub_250579A48((uint64_t *)&v125, v84, v79, v81, v82, v120);
  if (v83)
  {
    sub_250511528(v81, v82);
    sub_250511528(v105, v106);
    sub_250511528(v107, v111);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v66, v113);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v80, v39);
  }
  else
  {
    uint64_t v85 = &v53[*(int *)(v112 + 28)];
    uint64_t v87 = (uint64_t)v115;
    uint64_t v86 = v116;
    uint64_t v88 = v117;
    (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v115, v85, v117);
    char v89 = sub_25057C98C(v87);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
    uint64_t v90 = v114;
    uint64_t v91 = v127;
    if (v89)
    {
      uint64_t v92 = v122[2];
      unint64_t v93 = v122[3];
      sub_2504DBC4C(v92, v93);
      sub_25050BAA4(12, v92, v93, v124);
      Nonce.init(_:)(v124[0], v124[1], (uint64_t *)&v125);
      uint64_t v94 = v107;
      unint64_t v103 = v126;
      int64_t v122 = v125;
      LOBYTE(v124[0]) = 0;
      uint64_t v104 = v120;
      uint64_t v63 = Invite.produceRSVP(nonce:response:)((uint64_t *)&v125, (unsigned __int8 *)v124);
      sub_250511528(v108, v109);
      sub_250511528(v105, v106);
      sub_250511528(v94, v111);
      sub_25051AF3C(v104, type metadata accessor for Invite);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v123, v113);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v110, v39);
      sub_250511528((uint64_t)v122, v103);
    }
    else
    {
      unint64_t v95 = v111;
      uint64_t v96 = v107;
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v97 = sub_2505BDC40();
      __swift_project_value_buffer(v97, (uint64_t)qword_269AC3188);
      os_log_type_t v98 = sub_2505BE3D0();
      uint64_t v99 = sub_2505BDC20();
      os_log_type_t v100 = v98;
      if (os_log_type_enabled(v99, v98))
      {
        unint64_t v101 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v101 = 0;
        _os_log_impl(&dword_2504D2000, v99, v100, "self generated invite not validating", v101, 2u);
        MEMORY[0x25337FF10](v101, -1, -1);
      }

      uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v102 = 321;
      *(_OWORD *)(v102 + 8) = xmmword_2505C03A0;
      *(void *)(v102 + 24) = 0x80000002505C9270;
      *(void *)(v102 + 32) = 0xD000000000000052;
      *(void *)(v102 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_250511528(v108, v109);
      sub_250511528(v105, v106);
      sub_250511528(v96, v95);
      sub_25051AF3C(v120, type metadata accessor for Invite);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v123, v113);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v110, v39);
    }
  }
  return v63;
}

uint64_t sub_25050BAA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_250519F30(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_250519EB4(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x25050BC10);
  }
LABEL_16:
  uint64_t v14 = sub_2505BD900();
  uint64_t v16 = v15;
  uint64_t result = sub_250511528(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_25050BC40@<X0>(unsigned int a1@<W0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v3;
  int v8 = *a2;
  swift_beginAccess();
  unsigned int v9 = *(_DWORD *)(v5 + 64);
  if (v9 < a1)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_2505BDC40();
    __swift_project_value_buffer(v10, (uint64_t)qword_269AC3188);
    os_log_type_t v11 = sub_2505BE3D0();
    swift_retain();
    uint64_t v12 = sub_2505BDC20();
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109376;
      LODWORD(v62[0]) = a1;
      sub_2505BE430();
      *(_WORD *)(v13 + 8) = 1024;
      LODWORD(v62[0]) = *(_DWORD *)(v5 + 64);
      sub_2505BE430();
      swift_release();
      _os_log_impl(&dword_2504D2000, v12, v11, "detected more recent group version, checked %u against %u", (uint8_t *)v13, 0xEu);
      MEMORY[0x25337FF10](v13, -1, -1);
    }
    else
    {

      swift_release();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v28 = 307;
    long long v29 = xmmword_2505C03F0;
LABEL_17:
    *(_OWORD *)(v28 + 8) = v29;
    *(void *)(v28 + 24) = 0x80000002505C9700;
    *(void *)(v28 + 32) = 0xD000000000000052;
    *(void *)(v28 + 40) = 0x80000002505C8CB0;
    return swift_willThrow();
  }
  if (!a1)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_2505BDC40();
    __swift_project_value_buffer(v30, (uint64_t)qword_269AC3188);
    os_log_type_t v31 = sub_2505BE3D0();
    uint64_t v32 = sub_2505BDC20();
    os_log_type_t v33 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 67109376;
      sub_2505BE430();
      *(_WORD *)(v34 + 8) = 1024;
      LODWORD(v62[0]) = 1;
      sub_2505BE430();
      _os_log_impl(&dword_2504D2000, v32, v33, "invalid first group version, got %u expected %u", (uint8_t *)v34, 0xEu);
      MEMORY[0x25337FF10](v34, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v28 = 306;
    long long v29 = xmmword_2505C03E0;
    goto LABEL_17;
  }
  int v66 = v8;
  uint64_t v60 = a3;
  uint64_t v15 = *(void *)(v5 + 88);
  unint64_t v14 = *(void *)(v5 + 96);
  uint64_t v17 = *(void *)(v5 + 104);
  unint64_t v16 = *(void *)(v5 + 112);
  uint64_t v18 = *(void *)(v5 + 72);
  unint64_t v19 = *(void *)(v5 + 80);
  if (v9 <= a1)
  {
    sub_25051C95C(*(void *)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112));
    sub_2504DBC4C(v18, v19);
    if ((v66 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_19:
    v60[3] = (uint64_t)&type metadata for MemberSeed;
    v60[4] = sub_250522A2C();
    uint64_t result = sub_25051B884(v15, v14, v17, v16);
    *uint64_t v60 = v18;
    v60[1] = v19;
    return result;
  }
  uint64_t v20 = *(void *)(v5 + 104);
  unint64_t v21 = *(void *)(v5 + 96);
  unint64_t v22 = *(void *)(v5 + 112);
  uint64_t v23 = *(void *)(v5 + 72);
  unint64_t v24 = *(void *)(v5 + 24);
  v62[0] = *(void *)(v5 + 16);
  v62[1] = v24;
  uint64_t v26 = *(void *)(v5 + 40);
  unint64_t v25 = *(void *)(v5 + 48);
  v61[0] = v26;
  v61[1] = v25;
  unint64_t v57 = v21;
  unint64_t v58 = v22;
  uint64_t v55 = v20;
  sub_25051C95C(v15, v21, v20, v22);
  unint64_t v59 = v19;
  sub_2504DBC4C(v23, v19);
  uint64_t v56 = v62[0];
  sub_2504DBC4C(v62[0], v24);
  sub_2504DBC4C(v26, v25);
  sub_25059A764(v62, v61, a1, (uint64_t)v63);
  if (v4)
  {
    sub_25051B884(v15, v57, v55, v58);
    sub_250511528(v23, v19);
    sub_250511528(v26, v25);
    return sub_250511528(v56, v24);
  }
  uint64_t v54 = v23;
  uint64_t v36 = v63[0];
  unint64_t v35 = v63[1];
  unint64_t v52 = v63[3];
  uint64_t v53 = v63[2];
  unint64_t v37 = v63[5];
  uint64_t v51 = v63[4];
  sub_250511528(v26, v25);
  sub_250511528(v56, v24);
  sub_2505283F0((uint64_t)v63, (uint64_t)v64, &qword_269AB5F28);
  if (v65 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v38 = sub_2505BDC40();
    __swift_project_value_buffer(v38, (uint64_t)qword_269AC3188);
    os_log_type_t v39 = sub_2505BE3D0();
    uint64_t v40 = sub_2505BDC20();
    os_log_type_t v41 = v39;
    if (os_log_type_enabled(v40, v39))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_2504D2000, v40, v41, "expected seeds not present in device to device container", v42, 2u);
      MEMORY[0x25337FF10](v42, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v43 = 375;
    *(_OWORD *)(v43 + 8) = xmmword_2505C03D0;
    *(void *)(v43 + 24) = 0x80000002505C9700;
    *(void *)(v43 + 32) = 0xD000000000000052;
    *(void *)(v43 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v54, v59);
    return sub_25051B884(v15, v57, v55, v58);
  }
  sub_25051B884(v15, v57, v55, v58);
  uint64_t v17 = v53;
  sub_25051C95C(v36, v35, v53, v52);
  uint64_t v18 = v51;
  sub_2504DBC4C(v51, v37);
  sub_250511528(v51, v37);
  sub_250511528(v54, v59);
  sub_25051B884(v36, v35, v53, v52);
  uint64_t v15 = v36;
  unint64_t v19 = v37;
  unint64_t v14 = v35;
  unint64_t v16 = v52;
  if (v66) {
    goto LABEL_19;
  }
LABEL_27:
  if (v14 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_2505BDC40();
    __swift_project_value_buffer(v44, (uint64_t)qword_269AC3188);
    os_log_type_t v45 = sub_2505BE3D0();
    uint64_t v46 = sub_2505BDC20();
    os_log_type_t v47 = v45;
    if (os_log_type_enabled(v46, v45))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl(&dword_2504D2000, v46, v47, "missing admin seed", v48, 2u);
      MEMORY[0x25337FF10](v48, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v49 = 308;
    *(_OWORD *)(v49 + 8) = xmmword_2505C03C0;
    *(void *)(v49 + 24) = 0x80000002505C9700;
    *(void *)(v49 + 32) = 0xD000000000000052;
    *(void *)(v49 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return sub_250511528(v18, v19);
  }
  else
  {
    v60[3] = (uint64_t)&type metadata for AdminSeed;
    v60[4] = sub_25051CA18();
    uint64_t v50 = (void *)swift_allocObject();
    *uint64_t v60 = (uint64_t)v50;
    uint64_t result = sub_250511528(v18, v19);
    v50[2] = v15;
    v50[3] = v14;
    v50[4] = v17;
    v50[5] = v16;
  }
  return result;
}

uint64_t Group.deinit()
{
  sub_250511528(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_250511528(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  sub_250511528(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_25051B884(*(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  sub_25051AF3C(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
  sub_25051B8D4(*(void *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset), *(void *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25051B8D4(*(void *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(void *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
  sub_2504DAF60(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, &qword_269AB5A30);
  sub_2504DAF60(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_269AB5A38);
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup);
  *(void *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup);
      swift_retain();
      swift_release();
      uint64_t v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t Group.__deallocating_deinit()
{
  Group.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_25050C6A8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __b1[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_28;
          }
          if (v8 != HIDWORD(a3) - a3) {
            goto LABEL_14;
          }
          goto LABEL_11;
        case 2uLL:
          uint64_t v13 = *(void *)(a3 + 16);
          uint64_t v12 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v12, v13);
          uint64_t v14 = v12 - v13;
          if (v11) {
            goto LABEL_27;
          }
          if (v8 == v14)
          {
LABEL_11:
            switch(a2 >> 62)
            {
              case 1uLL:
                if (a1 >> 32 < (int)a1) {
                  goto LABEL_29;
                }
                sub_2504DBC4C(a3, a4);
                sub_2504DBC4C(a1, a2);
                char v15 = sub_25051AFBC((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, a1, a2);
LABEL_23:
                sub_250511528(a3, a4);
                sub_250511528(a1, a2);
                break;
              case 2uLL:
                uint64_t v16 = *(void *)(a1 + 16);
                uint64_t v17 = *(void *)(a1 + 24);
                sub_2504DBC4C(a3, a4);
                sub_2504DBC4C(a1, a2);
                swift_retain();
                swift_retain();
                char v15 = sub_25051AFBC(v16, v17, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, a1, a2);
                swift_release();
                swift_release();
                goto LABEL_23;
              case 3uLL:
                memset(__b1, 0, 14);
                sub_2504DBC4C(a3, a4);
                goto LABEL_20;
              default:
                __b1[0] = a1;
                LOWORD(__b1[1]) = a2;
                BYTE2(__b1[1]) = BYTE2(a2);
                BYTE3(__b1[1]) = BYTE3(a2);
                BYTE4(__b1[1]) = BYTE4(a2);
                BYTE5(__b1[1]) = BYTE5(a2);
                sub_2504DBC4C(a3, a4);
LABEL_20:
                sub_25050CA40(__b1, a3, a4, a1, a2, (BOOL *)&v19);
                sub_250511528(a3, a4);
                sub_250511528(a1, a2);
                char v15 = v19;
                break;
            }
          }
          else
          {
LABEL_14:
            char v15 = 0;
          }
          return v15 & 1;
        case 3uLL:
          if (v8) {
            goto LABEL_14;
          }
          goto LABEL_11;
        default:
          if (v8 != BYTE6(a4)) {
            goto LABEL_14;
          }
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_25050CA40@<X0>(void *__b1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, BOOL *a6@<X8>)
{
  __b2[2] = *MEMORY[0x263EF8340];
  switch(a3 >> 62)
  {
    case 1uLL:
LABEL_7:
      if ((int)a2 > a2 >> 32)
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      sub_2504DBC4C(a2, a3);
      uint64_t v14 = sub_2505BD7D0();
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = sub_2505BD800();
        uint64_t v17 = (int)a2 - v16;
        if (!__OFSUB__((int)a2, v16))
        {
          sub_2505BD7F0();
          if (__b1)
          {
            size_t v18 = 0;
            switch(a5 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(a4), a4)) {
                  goto LABEL_44;
                }
                size_t v18 = HIDWORD(a4) - (int)a4;
LABEL_35:
                int v31 = timingsafe_bcmp(__b1, (const void *)(v15 + v17), v18);
                uint64_t result = sub_250511528(a2, a3);
                break;
              case 2uLL:
                uint64_t v35 = *(void *)(a4 + 16);
                uint64_t v34 = *(void *)(a4 + 24);
                size_t v18 = v34 - v35;
                if (!__OFSUB__(v34, v35)) {
                  goto LABEL_35;
                }
                goto LABEL_45;
              case 3uLL:
                goto LABEL_35;
              default:
                size_t v18 = BYTE6(a5);
                goto LABEL_35;
            }
            goto LABEL_36;
          }
LABEL_48:
          __break(1u);
LABEL_49:
          sub_2505BD7F0();
          if (__b1)
          {
LABEL_53:
            __break(1u);
            JUMPOUT(0x25050CDD4);
          }
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
      }
      goto LABEL_47;
    case 2uLL:
      uint64_t v19 = *(void *)(a2 + 16);
      swift_retain();
      swift_retain();
      uint64_t v20 = sub_2505BD7D0();
      if (!v20) {
        goto LABEL_49;
      }
      uint64_t v21 = v20;
      uint64_t v22 = sub_2505BD800();
      BOOL v23 = __OFSUB__(v19, v22);
      uint64_t v24 = v19 - v22;
      if (v23) {
        goto LABEL_38;
      }
      sub_2505BD7F0();
      if (!__b1) {
        goto LABEL_50;
      }
      size_t v25 = 0;
      switch(a5 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_42;
          }
          size_t v25 = HIDWORD(a4) - (int)a4;
LABEL_31:
          int v31 = timingsafe_bcmp(__b1, (const void *)(v21 + v24), v25);
          swift_release();
          uint64_t result = swift_release();
          break;
        case 2uLL:
          uint64_t v33 = *(void *)(a4 + 16);
          uint64_t v32 = *(void *)(a4 + 24);
          size_t v25 = v32 - v33;
          if (!__OFSUB__(v32, v33)) {
            goto LABEL_31;
          }
          goto LABEL_43;
        case 3uLL:
          goto LABEL_31;
        default:
          size_t v25 = BYTE6(a5);
          goto LABEL_31;
      }
      goto LABEL_36;
    case 3uLL:
      memset(__b2, 0, 14);
      if (__b1)
      {
        size_t v12 = 0;
        switch(a5 >> 62)
        {
          case 1uLL:
            goto LABEL_24;
          case 2uLL:
            uint64_t v29 = *(void *)(a4 + 16);
            uint64_t v28 = *(void *)(a4 + 24);
            size_t v12 = v28 - v29;
            if (!__OFSUB__(v28, v29)) {
              goto LABEL_27;
            }
            goto LABEL_41;
          case 3uLL:
            goto LABEL_27;
          default:
            goto LABEL_20;
        }
      }
      goto LABEL_51;
    default:
      __b2[0] = a2;
      LOWORD(__b2[1]) = a3;
      BYTE2(__b2[1]) = BYTE2(a3);
      BYTE3(__b2[1]) = BYTE3(a3);
      BYTE4(__b2[1]) = BYTE4(a3);
      BYTE5(__b2[1]) = BYTE5(a3);
      if (!__b1)
      {
        __break(1u);
LABEL_47:
        sub_2505BD7F0();
        if (__b1) {
          goto LABEL_52;
        }
        goto LABEL_48;
      }
      size_t v12 = 0;
      switch(a5 >> 62)
      {
        case 1uLL:
          int v13 = HIDWORD(a4) - a4;
          if (!__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_25;
          }
          __break(1u);
          goto LABEL_7;
        case 2uLL:
          uint64_t v27 = *(void *)(a4 + 16);
          uint64_t v26 = *(void *)(a4 + 24);
          size_t v12 = v26 - v27;
          if (!__OFSUB__(v26, v27)) {
            goto LABEL_27;
          }
          __break(1u);
LABEL_24:
          int v13 = HIDWORD(a4) - a4;
          if (__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_40;
          }
LABEL_25:
          size_t v12 = v13;
LABEL_27:
          uint64_t result = timingsafe_bcmp(__b1, __b2, v12);
          int v31 = result;
          break;
        case 3uLL:
          goto LABEL_27;
        default:
LABEL_20:
          size_t v12 = BYTE6(a5);
          goto LABEL_27;
      }
LABEL_36:
      *a6 = v31 == 0;
      return result;
  }
}

uint64_t sub_25050CE24()
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505C0400;
  if (qword_269AB5470 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_269AC3240;
  unint64_t v3 = *(void *)algn_269AC3248;
  *(void *)(inited + 32) = qword_269AC3240;
  *(void *)(inited + 40) = v3;
  unsigned int v14 = bswap32(*(_DWORD *)v0);
  sub_2504DBC4C(v2, v3);
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)&v14, (uint64_t)v15);
  *(void *)(inited + 56) = v4;
  uint64_t v5 = *(void *)(v0 + 8);
  unint64_t v6 = *(void *)(v0 + 16);
  *(void *)(inited + 64) = v5;
  *(void *)(inited + 72) = v6;
  unint64_t v7 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    LODWORD(v7) = v7 != 0;
LABEL_7:
    unsigned int v14 = bswap32(v7);
    sub_2504DBC4C(v5, v6);
    *(void *)(inited + 80) = sub_25056DAD0((uint64_t)&v14, (uint64_t)v15);
    *(void *)(inited + 88) = v8;
    unsigned int v14 = bswap32(*(_DWORD *)(v0 + 36));
    *(void *)(inited + 96) = sub_25056DAD0((uint64_t)&v14, (uint64_t)v15);
    *(void *)(inited + 104) = v9;
    uint64_t v10 = *(void *)(v0 + 40);
    unint64_t v11 = *(void *)(v0 + 48);
    *(void *)(inited + 112) = v10;
    *(void *)(inited + 120) = v11;
    sub_2504DBC4C(v10, v11);
    uint64_t v12 = sub_250576544(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    return v12;
  }
  if ((v7 & 0x8000000000000000) == 0 && !HIDWORD(v7)) {
    goto LABEL_7;
  }
  uint64_t result = sub_2505BE5E0();
  __break(1u);
  return result;
}

uint64_t sub_25050D040()
{
  return sub_25050D0BC(&qword_269AB5468, &qword_269AC3230, (unint64_t *)algn_269AC3238);
}

uint64_t sub_25050D0BC(void *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505C0410;
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v8 = *a2;
  unint64_t v9 = *a3;
  *(void *)(inited + 32) = *a2;
  *(void *)(inited + 40) = v9;
  unsigned int v19 = bswap32(*(_DWORD *)v3);
  sub_2504DBC4C(v8, v9);
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)&v19, (uint64_t)v20);
  *(void *)(inited + 56) = v10;
  uint64_t v11 = *(void *)(v3 + 8);
  unint64_t v12 = *(void *)(v3 + 16);
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = v12;
  uint64_t v13 = *(void *)(v3 + 24);
  unint64_t v14 = *(void *)(v3 + 32);
  *(void *)(inited + 80) = v13;
  *(void *)(inited + 88) = v14;
  uint64_t v16 = *(void *)(v3 + 40);
  unint64_t v15 = *(void *)(v3 + 48);
  *(void *)(inited + 96) = v16;
  *(void *)(inited + 104) = v15;
  sub_2504DBC4C(v11, v12);
  sub_2504DBC4C(v13, v14);
  sub_2504DBC4C(v16, v15);
  uint64_t v17 = sub_250576544(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v17;
}

uint64_t GroupRole.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AC8);
  uint64_t v31 = *(void *)(v3 - 8);
  uint64_t v32 = v3;
  MEMORY[0x270FA5388](v3, v4, v5, v6, v7);
  uint64_t v30 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AD0);
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  MEMORY[0x270FA5388](v9, v10, v11, v12, v13);
  unint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AD8);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16, v18, v19, v20, v21);
  BOOL v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v24 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250522E78();
  sub_2505BE8A0();
  size_t v25 = (uint64_t (**)(char *, uint64_t))(v17 + 8);
  if (v24)
  {
    char v34 = 1;
    sub_250522ECC();
    uint64_t v26 = v30;
    sub_2505BE6F0();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v26, v32);
  }
  else
  {
    char v33 = 0;
    sub_250522F20();
    sub_2505BE6F0();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v29);
  }
  return (*v25)(v23, v16);
}

uint64_t GroupRole.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AF8);
  uint64_t v42 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39, v3, v4, v5, v6);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B00);
  uint64_t v40 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v10, v11, v12, v13);
  unint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B08);
  uint64_t v41 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16, v17, v18, v19, v20);
  uint64_t v22 = (char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250522E78();
  BOOL v23 = v44;
  sub_2505BE890();
  if (v23) {
    goto LABEL_6;
  }
  uint64_t v44 = a1;
  uint64_t v25 = v42;
  char v24 = v43;
  uint64_t v26 = v22;
  uint64_t v27 = sub_2505BE6D0();
  if (*(void *)(v27 + 16) != 1)
  {
    uint64_t v32 = sub_2505BE520();
    swift_allocError();
    char v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B10);
    void *v34 = &type metadata for GroupRole;
    sub_2505BE680();
    sub_2505BE510();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x263F8DCB0], v32);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v16);
    a1 = v44;
LABEL_6:
    uint64_t v35 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v35);
  }
  v38[1] = v27;
  char v28 = *(unsigned char *)(v27 + 32);
  if (v28)
  {
    char v29 = *(unsigned char *)(v27 + 32);
    char v46 = 1;
    sub_250522ECC();
    uint64_t v30 = v26;
    sub_2505BE670();
    uint64_t v31 = v41;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v16);
    char v28 = v29;
  }
  else
  {
    char v45 = 0;
    sub_250522F20();
    sub_2505BE670();
    uint64_t v37 = v41;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v9);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v16);
  }
  *char v24 = v28;
  uint64_t v35 = (uint64_t)v44;
  return __swift_destroy_boxed_opaque_existential_1(v35);
}

uint64_t sub_25050D90C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return GroupRole.init(from:)(a1, a2);
}

uint64_t sub_25050D924(void *a1)
{
  return GroupRole.encode(to:)(a1);
}

uint64_t GroupRole.RSVPStatus.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B18);
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  MEMORY[0x270FA5388](v3, v4, v5, v6, v7);
  unint64_t v59 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B20);
  uint64_t v57 = *(void *)(v9 - 8);
  uint64_t v58 = v9;
  MEMORY[0x270FA5388](v9, v10, v11, v12, v13);
  uint64_t v56 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B28);
  uint64_t v54 = *(void *)(v15 - 8);
  uint64_t v55 = v15;
  MEMORY[0x270FA5388](v15, v16, v17, v18, v19);
  uint64_t v53 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B30);
  uint64_t v51 = *(void *)(v21 - 8);
  uint64_t v52 = v21;
  MEMORY[0x270FA5388](v21, v22, v23, v24, v25);
  uint64_t v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B38);
  uint64_t v50 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28, v29, v30, v31, v32);
  char v34 = (char *)&v49 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B40);
  uint64_t v62 = *(void *)(v35 - 8);
  uint64_t v63 = v35;
  MEMORY[0x270FA5388](v35, v36, v37, v38, v39);
  uint64_t v41 = (char *)&v49 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_250522F74();
  sub_2505BE8A0();
  switch(v42)
  {
    case 1:
      char v65 = 1;
      sub_2505230C4();
      uint64_t v45 = v63;
      sub_2505BE6F0();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v52);
      goto LABEL_8;
    case 2:
      char v66 = 2;
      sub_250523070();
      char v46 = v53;
      uint64_t v45 = v63;
      sub_2505BE6F0();
      uint64_t v48 = v54;
      uint64_t v47 = v55;
      goto LABEL_7;
    case 3:
      char v67 = 3;
      sub_25052301C();
      char v46 = v56;
      uint64_t v45 = v63;
      sub_2505BE6F0();
      uint64_t v48 = v57;
      uint64_t v47 = v58;
      goto LABEL_7;
    case 4:
      char v68 = 4;
      sub_250522FC8();
      char v46 = v59;
      uint64_t v45 = v63;
      sub_2505BE6F0();
      uint64_t v48 = v60;
      uint64_t v47 = v61;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
LABEL_8:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v41, v45);
      break;
    default:
      char v64 = 0;
      sub_250523118();
      uint64_t v43 = v63;
      sub_2505BE6F0();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v28);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v41, v43);
      break;
  }
  return result;
}

uint64_t GroupRole.RSVPStatus.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v78 = a2;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B78);
  uint64_t v67 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74, v3, v4, v5, v6);
  uint64_t v77 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B80);
  uint64_t v73 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70, v8, v9, v10, v11);
  unint64_t v76 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B88);
  uint64_t v71 = *(void *)(v13 - 8);
  uint64_t v72 = v13;
  MEMORY[0x270FA5388](v13, v14, v15, v16, v17);
  uint64_t v75 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B90);
  uint64_t v68 = *(void *)(v19 - 8);
  uint64_t v69 = v19;
  MEMORY[0x270FA5388](v19, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B98);
  uint64_t v66 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26, v27, v28, v29, v30);
  uint64_t v32 = (char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5BA0);
  uint64_t v34 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v63 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a1[3];
  uint64_t v79 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v41);
  sub_250522F74();
  uint64_t v42 = v80;
  sub_2505BE890();
  if (v42)
  {
LABEL_7:
    uint64_t v57 = (uint64_t)v79;
    return __swift_destroy_boxed_opaque_existential_1(v57);
  }
  uint64_t v63 = v26;
  char v64 = v32;
  uint64_t v43 = v25;
  uint64_t v45 = v75;
  uint64_t v44 = v76;
  uint64_t v65 = 0;
  uint64_t v80 = v34;
  char v46 = v77;
  uint64_t v47 = v78;
  uint64_t v48 = v40;
  uint64_t v49 = sub_2505BE6D0();
  if (*(void *)(v49 + 16) != 1)
  {
    uint64_t v54 = sub_2505BE520();
    swift_allocError();
    uint64_t v56 = v55;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5B10);
    void *v56 = &type metadata for GroupRole.RSVPStatus;
    sub_2505BE680();
    sub_2505BE510();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v54 - 8) + 104))(v56, *MEMORY[0x263F8DCB0], v54);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v33);
    goto LABEL_7;
  }
  char v50 = *(unsigned char *)(v49 + 32);
  switch(v50)
  {
    case 1:
      char v82 = 1;
      sub_2505230C4();
      uint64_t v59 = v65;
      sub_2505BE670();
      if (v59) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v69);
      goto LABEL_19;
    case 2:
      char v83 = 2;
      sub_250523070();
      uint64_t v60 = v65;
      sub_2505BE670();
      if (v60) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v71 + 8))(v45, v72);
      goto LABEL_19;
    case 3:
      char v84 = 3;
      sub_25052301C();
      uint64_t v61 = v65;
      sub_2505BE670();
      if (v61) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v73 + 8))(v44, v70);
LABEL_19:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v33);
      goto LABEL_21;
    case 4:
      char v85 = 4;
      sub_250522FC8();
      uint64_t v62 = v65;
      sub_2505BE670();
      if (v62) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v74);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v33);
      uint64_t v47 = v78;
      goto LABEL_21;
    default:
      char v51 = *(unsigned char *)(v49 + 32);
      char v81 = 0;
      sub_250523118();
      uint64_t v53 = v64;
      uint64_t v52 = v65;
      sub_2505BE670();
      if (v52)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v33);
        uint64_t v57 = (uint64_t)v79;
        return __swift_destroy_boxed_opaque_existential_1(v57);
      }
      (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v63);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v33);
      char v50 = v51;
LABEL_21:
      *uint64_t v47 = v50;
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
      break;
  }
  return result;
}

uint64_t sub_25050E5C8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return GroupRole.RSVPStatus.init(from:)(a1, a2);
}

uint64_t sub_25050E5E0(void *a1)
{
  return GroupRole.RSVPStatus.encode(to:)(a1);
}

uint64_t GroupID.encode(to:)(void *a1)
{
  return sub_25050EE44(a1, &qword_269AB5BA8, (void (*)(void))sub_25052316C);
}

uint64_t GroupID.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_25050E718(a1, &qword_269AB5BC0, (void (*)(void))sub_25052316C, a2);
}

uint64_t sub_25050E670@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return GroupID.init(from:)(a1, a2);
}

uint64_t sub_25050E688(void *a1)
{
  return GroupID.encode(to:)(a1);
}

uint64_t GroupKitUserID.encode(to:)(void *a1)
{
  return sub_25050EE44(a1, &qword_269AB5BD0, (void (*)(void))sub_250523268);
}

uint64_t GroupKitUserID.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_25050E718(a1, &qword_269AB5BE0, (void (*)(void))sub_250523268, a2);
}

uint64_t sub_25050E718@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v19 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v8, v9, v10, v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2505BE890();
  if (!v4)
  {
    uint64_t v14 = v17;
    sub_250523214();
    sub_2505BE6C0();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v7);
    _OWORD *v14 = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25050E890@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return GroupKitUserID.init(from:)(a1, a2);
}

uint64_t sub_25050E8A8(void *a1)
{
  return GroupKitUserID.encode(to:)(a1);
}

uint64_t UserDSID.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5BE8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2505232BC();
  sub_2505BE8A0();
  sub_2505BE710();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t UserDSID.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5BF8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2505232BC();
  sub_2505BE890();
  if (!v2)
  {
    uint64_t v13 = sub_2505BE6A0();
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_25050EB68@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return UserDSID.init(from:)(a1, a2);
}

uint64_t sub_25050EB80(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5BE8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4, v5, v6, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2505232BC();
  sub_2505BE8A0();
  sub_2505BE710();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

uint64_t KeyShare.encode(to:)(void *a1)
{
  return sub_25050EE44(a1, &qword_269AB5C00, (void (*)(void))sub_250523310);
}

uint64_t KeyShare.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_25050E718(a1, &qword_269AB5C10, (void (*)(void))sub_250523310, a2);
}

uint64_t sub_25050ED30@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return KeyShare.init(from:)(a1, a2);
}

uint64_t sub_25050ED48(void *a1)
{
  return KeyShare.encode(to:)(a1);
}

uint64_t KeyOffset.encode(to:)(void *a1)
{
  return sub_25050EE44(a1, &qword_269AB5C18, (void (*)(void))sub_250523364);
}

uint64_t KeyOffset.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_25050E718(a1, &qword_269AB5C28, (void (*)(void))sub_250523364, a2);
}

uint64_t sub_25050EDD8@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return KeyOffset.init(from:)(a1, a2);
}

uint64_t sub_25050EDF0(void *a1)
{
  return KeyOffset.encode(to:)(a1);
}

uint64_t Nonce.encode(to:)(void *a1)
{
  return sub_25050EE44(a1, &qword_269AB5C30, (void (*)(void))sub_2505233B8);
}

uint64_t sub_25050EE44(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v16 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7, v8, v9, v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v3;
  uint64_t v15 = v3[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v16();
  sub_2505BE8A0();
  uint64_t v17 = v13;
  uint64_t v18 = v15;
  sub_2505231C0();
  sub_2505BE730();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v5);
}

uint64_t Nonce.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_25050E718(a1, &qword_269AB5C40, (void (*)(void))sub_2505233B8, a2);
}

uint64_t sub_25050EFDC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Nonce.init(from:)(a1, a2);
}

uint64_t sub_25050EFF4(void *a1)
{
  return Nonce.encode(to:)(a1);
}

id sub_25050F00C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10)
{
  uint64_t v50 = a8;
  uint64_t v11 = v10;
  uint64_t v52 = a6;
  uint64_t v53 = a7;
  unsigned int v51 = a5;
  uint64_t v47 = a3;
  unint64_t v48 = a4;
  unint64_t v46 = a9;
  uint64_t v55 = sub_2505BD9F0();
  uint64_t v45 = *(char **)(v55 - 8);
  MEMORY[0x270FA5388](v55, v14, v15, v16, v17);
  uint64_t v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = objc_allocWithZone(v11);
  id v54 = a10;
  id v44 = objc_msgSend(v20, sel_initWithContext_, a10);
  objc_msgSend(v44, sel_setSeedType_, 0);
  LODWORD(v43) = sub_2505BD990();
  v42[7] = sub_2505BD990();
  v42[6] = sub_2505BD990();
  v42[5] = sub_2505BD990();
  v42[4] = sub_2505BD990();
  v42[3] = sub_2505BD990();
  uint64_t v42[2] = sub_2505BD990();
  v42[1] = sub_2505BD990();
  v42[0] = sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  uint64_t v21 = v45;
  unint64_t v22 = v46;
  sub_2505BD9C0();
  uint64_t v23 = a1;
  id v24 = v44;
  sub_250511528(v23, a2);
  uint64_t v25 = (void *)sub_2505BD9A0();
  uint64_t v26 = (void (*)(char *, uint64_t))*((void *)v21 + 1);
  uint64_t v45 = v19;
  uint64_t v43 = v26;
  v26(v19, v55);
  objc_msgSend(v24, sel_setGroupID_, v25);

  uint64_t v28 = v47;
  unint64_t v27 = v48;
  uint64_t v29 = v49;
  uint64_t v56 = sub_2504DCA88(v47, v48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AA0);
  sub_250522D7C((unint64_t *)&qword_269AB5AA8, &qword_269AB5AA0);
  sub_2505BE110();
  uint64_t v30 = v50;
  swift_bridgeObjectRelease();
  sub_250511528(v28, v27);
  uint64_t v31 = (void *)sub_2505BE130();
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setUserID_, v31);

  objc_msgSend(v24, sel_setGroupVersion_, v51);
  uint64_t v32 = v52;
  unint64_t v33 = v53;
  uint64_t v34 = sub_25055D720(v52, v53, v30, v22);
  if (v29)
  {

    sub_250511528(v32, v33);
    sub_25051B8D4(v30, v22);
  }
  else
  {
    uint64_t v36 = v34;
    unint64_t v37 = v35;
    sub_250511528(v32, v33);
    sub_25051B8D4(v30, v22);
    uint64_t v38 = (void *)sub_2505BD920();
    sub_250511528(v36, v37);
    objc_msgSend(v24, sel_setRawData_, v38);

    uint64_t v39 = v45;
    sub_2505BD9E0();
    uint64_t v40 = (void *)sub_2505BD9A0();
    v43(v39, v55);
    objc_msgSend(v24, sel_setDedupeID_, v40);
  }
  return v24;
}

id sub_25050F4D8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, unint64_t a7, void *a8)
{
  unint64_t v39 = a4;
  uint64_t v9 = v8;
  unint64_t v43 = a7;
  id v44 = a8;
  uint64_t v42 = a6;
  unsigned int v41 = a5;
  uint64_t v38 = a3;
  uint64_t v13 = sub_2505BD9F0();
  uint64_t v36 = *(void *)(v13 - 8);
  uint64_t v37 = v13;
  MEMORY[0x270FA5388](v13, v14, v15, v16, v17);
  uint64_t v45 = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = objc_msgSend(objc_allocWithZone(v9), sel_initWithContext_, a8);
  objc_msgSend(v19, sel_setSeedType_, 1);
  v35[9] = sub_2505BD990();
  v35[8] = sub_2505BD990();
  v35[7] = sub_2505BD990();
  v35[6] = sub_2505BD990();
  v35[5] = sub_2505BD990();
  v35[4] = sub_2505BD990();
  v35[3] = sub_2505BD990();
  v35[2] = sub_2505BD990();
  v35[1] = sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  id v20 = v45;
  sub_2505BD9C0();
  sub_250511528(a1, a2);
  uint64_t v21 = (void *)sub_2505BD9A0();
  uint64_t v22 = v37;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v36 + 8);
  v23(v20, v37);
  objc_msgSend(v19, sel_setGroupID_, v21);

  uint64_t v25 = v38;
  unint64_t v24 = v39;
  uint64_t v26 = v40;
  uint64_t v27 = sub_2504DCA88(v38, v39);
  uint64_t v40 = v26;
  uint64_t v46 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AA0);
  sub_250522D7C((unint64_t *)&qword_269AB5AA8, &qword_269AB5AA0);
  sub_2505BE110();
  swift_bridgeObjectRelease();
  sub_250511528(v25, v24);
  uint64_t v28 = (void *)sub_2505BE130();
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_setUserID_, v28);

  objc_msgSend(v19, sel_setGroupVersion_, v41);
  uint64_t v30 = v42;
  unint64_t v29 = v43;
  uint64_t v31 = (void *)sub_2505BD920();
  sub_250511528(v30, v29);
  objc_msgSend(v19, sel_setRawData_, v31);

  uint64_t v32 = v45;
  sub_2505BD9E0();
  unint64_t v33 = (void *)sub_2505BD9A0();
  v23(v32, v22);
  objc_msgSend(v19, sel_setDedupeID_, v33);

  return v19;
}

uint64_t *sub_25050F920(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v94 = a8;
  uint64_t v96 = a6;
  unint64_t v97 = a7;
  uint64_t v95 = a5;
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v85 = sub_2505BE040();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85, v13, v14, v15, v16);
  char v89 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for GKCrypto_SeedBlob(0);
  MEMORY[0x270FA5388](v18, v19, v20, v21, v22);
  uint64_t v90 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E70);
  MEMORY[0x270FA5388](v24 - 8, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_2505BDDD0();
  uint64_t v92 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93, v31, v32, v33, v34);
  uint64_t v36 = (char *)&v83 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = a1;
  *(_OWORD *)(inited + 16) = xmmword_2505C0090;
  *(void *)(inited + 40) = a2;
  unsigned int v86 = a3;
  LODWORD(v101) = bswap32(a3);
  uint64_t v87 = a1;
  unint64_t v88 = a2;
  sub_2504DBC4C(a1, a2);
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)&v101, (uint64_t)&v101 + 4);
  *(void *)(inited + 56) = v38;
  if (qword_269AB5660 != -1) {
    swift_once();
  }
  uint64_t v91 = v18;
  uint64_t v39 = qword_269AC3770;
  unint64_t v40 = *(void *)algn_269AC3778;
  *(void *)(inited + 64) = qword_269AC3770;
  *(void *)(inited + 72) = v40;
  sub_2504DBC4C(v39, v40);
  if (qword_269AB5600 != -1) {
    swift_once();
  }
  uint64_t v41 = qword_269AC36B0;
  unint64_t v42 = *(void *)algn_269AC36B8;
  *(void *)(inited + 80) = qword_269AC36B0;
  *(void *)(inited + 88) = v42;
  sub_2504DBC4C(v41, v42);
  uint64_t v43 = sub_250576544(inited);
  uint64_t v45 = v44;
  swift_setDeallocating();
  swift_arrayDestroy();
  unint64_t v46 = (unint64_t)v98;
  uint64_t v47 = sub_25055D720(a4, v95, v96, v97);
  if (v46)
  {
    uint64_t v49 = v43;
    unint64_t v50 = (unint64_t)v45;
LABEL_13:
    sub_250511528(v49, v50);
    return v45;
  }
  uint64_t v101 = v47;
  unint64_t v102 = v48;
  uint64_t v51 = sub_2505BDD70();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v30, 1, 1, v51);
  uint64_t v99 = v43;
  os_log_type_t v100 = v45;
  sub_25051AE60();
  uint64_t v52 = v94;
  sub_2505BDD40();
  uint64_t v53 = v45;
  sub_2504DAF60((uint64_t)v30, &qword_269AB5E70);
  sub_250511528(v101, v102);
  uint64_t v54 = sub_2505BDDB0();
  unint64_t v56 = v55;
  uint64_t v57 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v36, v93);
  if (v56 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v62 = sub_2505BDC40();
    __swift_project_value_buffer(v62, (uint64_t)qword_269AC3188);
    os_log_type_t v63 = sub_2505BE3D0();
    char v64 = sub_2505BDC20();
    os_log_type_t v65 = v63;
    if (os_log_type_enabled(v64, v63))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl(&dword_2504D2000, v64, v65, "failed creating seed blob", v66, 2u);
      MEMORY[0x25337FF10](v66, -1, -1);
    }

    uint64_t v45 = &qword_269AB59E0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v67 = 360;
    *(_OWORD *)(v67 + 8) = xmmword_2505C0420;
    *(void *)(v67 + 24) = 0x80000002505C92D0;
    *(void *)(v67 + 32) = 0xD000000000000052;
    *(void *)(v67 + 40) = 0x80000002505C9310;
    swift_willThrow();
    uint64_t v49 = v43;
    unint64_t v50 = (unint64_t)v53;
    goto LABEL_13;
  }
  unint64_t v97 = v43;
  os_log_type_t v98 = v45;
  uint64_t v96 = a9;
  MEMORY[0x270FA5388](v57, v58, v59, v60, v61);
  uint64_t v69 = v54;
  *(&v83 - 4) = v54;
  *(&v83 - 3) = v56;
  *(&v83 - 2) = v52;
  *((_DWORD *)&v83 - 2) = v86;
  sub_2504DBC4C(v54, v56);
  uint64_t v70 = sub_250528338(&qword_269AB5E78, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
  uint64_t v71 = (uint64_t)v90;
  uint64_t v94 = v70;
  sub_2505BDB80();
  uint64_t v95 = 0;
  uint64_t v101 = v87;
  unint64_t v102 = v88;
  uint64_t v72 = qword_269AC3770;
  unint64_t v73 = *(void *)algn_269AC3778;
  sub_2504DBC4C(qword_269AC3770, *(unint64_t *)algn_269AC3778);
  uint64_t v45 = (uint64_t *)sub_25055E378(&v101, v72, v73);
  unint64_t v75 = v74;
  sub_250511528(v72, v73);
  uint64_t v101 = (uint64_t)v45;
  unint64_t v102 = v75;
  unint64_t v76 = v89;
  uint64_t v77 = v95;
  sub_2505BDFF0();
  sub_250511528((uint64_t)v45, v75);
  if (v77)
  {
    sub_25051B8D4(v54, v56);
    sub_25051B8D4(v54, v56);
    sub_250511528(v97, (unint64_t)v98);
  }
  else
  {
    uint64_t v78 = sub_2505BE010();
    uint64_t v80 = v79;
    sub_250511528(*(void *)(v71 + 24), *(void *)(v71 + 32));
    *(void *)(v71 + 24) = v78;
    *(void *)(v71 + 32) = v80;
    uint64_t v81 = sub_2505BDB40();
    unint64_t v82 = (unint64_t)v98;
    uint64_t v45 = (uint64_t *)v81;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v76, v85);
    sub_25051B8D4(v69, v56);
    sub_25051B8D4(v69, v56);
    sub_250511528(v97, v82);
  }
  sub_25051AF3C(v71, type metadata accessor for GKCrypto_SeedBlob);
  return v45;
}

char *sub_2505101BC(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v86 = a7;
  uint64_t v93 = a5;
  uint64_t v94 = (char *)a6;
  uint64_t v92 = a4;
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v82 = sub_2505BE040();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82, v10, v11, v12, v13);
  uint64_t v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for GKCrypto_SeedBlob(0);
  MEMORY[0x270FA5388](v16, v17, v18, v19, v20);
  char v89 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E70);
  MEMORY[0x270FA5388](v22 - 8, v23, v24, v25, v26);
  uint64_t v28 = (char *)&v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_2505BDDD0();
  uint64_t v90 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91, v29, v30, v31, v32);
  uint64_t v34 = (char *)&v80 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = a1;
  *(_OWORD *)(inited + 16) = xmmword_2505C0090;
  *(void *)(inited + 40) = a2;
  unsigned int v83 = a3;
  LODWORD(v98) = bswap32(a3);
  uint64_t v84 = a1;
  unint64_t v85 = a2;
  sub_2504DBC4C(a1, a2);
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)&v98, (uint64_t)&v98 + 4);
  *(void *)(inited + 56) = v36;
  if (qword_269AB5668 != -1) {
    swift_once();
  }
  uint64_t v87 = v16;
  unint64_t v88 = v15;
  uint64_t v37 = qword_269AC3780;
  unint64_t v38 = *(void *)algn_269AC3788;
  *(void *)(inited + 64) = qword_269AC3780;
  *(void *)(inited + 72) = v38;
  sub_2504DBC4C(v37, v38);
  if (qword_269AB5600 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_269AC36B0;
  unint64_t v40 = *(void *)algn_269AC36B8;
  *(void *)(inited + 80) = qword_269AC36B0;
  *(void *)(inited + 88) = v40;
  sub_2504DBC4C(v39, v40);
  uint64_t v41 = sub_250576544(inited);
  unint64_t v43 = v42;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v45 = v92;
  unint64_t v44 = v93;
  uint64_t v98 = v92;
  uint64_t v99 = v93;
  uint64_t v46 = sub_2505BDD70();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v28, 1, 1, v46);
  uint64_t v96 = v41;
  unint64_t v97 = v43;
  sub_2504DBC4C(v45, v44);
  sub_25051AE60();
  unint64_t v47 = v95;
  sub_2505BDD40();
  if (v47)
  {
    sub_2504DAF60((uint64_t)v28, &qword_269AB5E70);
    sub_250511528(v98, v99);
LABEL_13:
    sub_250511528(v41, v43);
    return v34;
  }
  sub_2504DAF60((uint64_t)v28, &qword_269AB5E70);
  sub_250511528(v98, v99);
  uint64_t v48 = sub_2505BDDB0();
  unint64_t v50 = v49;
  uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v34, v91);
  if (v50 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v56 = sub_2505BDC40();
    __swift_project_value_buffer(v56, (uint64_t)qword_269AC3188);
    os_log_type_t v57 = sub_2505BE3D0();
    uint64_t v58 = sub_2505BDC20();
    os_log_type_t v59 = v57;
    if (os_log_type_enabled(v58, v57))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_2504D2000, v58, v59, "failed creating seed blob", v60, 2u);
      MEMORY[0x25337FF10](v60, -1, -1);
    }

    uint64_t v34 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v61 = 360;
    *(_OWORD *)(v61 + 8) = xmmword_2505C0420;
    *(void *)(v61 + 24) = 0x80000002505C92D0;
    *(void *)(v61 + 32) = 0xD000000000000052;
    *(void *)(v61 + 40) = 0x80000002505C9310;
    swift_willThrow();
    goto LABEL_13;
  }
  uint64_t v93 = v41;
  unint64_t v95 = v43;
  MEMORY[0x270FA5388](v51, v52, v53, v54, v55);
  *(&v80 - 4) = v48;
  *(&v80 - 3) = v50;
  *(&v80 - 2) = v63;
  *((_DWORD *)&v80 - 2) = v83;
  sub_2504DBC4C(v48, v50);
  uint64_t v64 = sub_250528338(&qword_269AB5E78, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
  uint64_t v94 = (char *)v48;
  uint64_t v65 = (uint64_t)v89;
  uint64_t v91 = v64;
  sub_2505BDB80();
  uint64_t v92 = 0;
  uint64_t v98 = v84;
  uint64_t v99 = v85;
  uint64_t v66 = qword_269AC3780;
  unint64_t v67 = *(void *)algn_269AC3788;
  sub_2504DBC4C(qword_269AC3780, *(unint64_t *)algn_269AC3788);
  uint64_t v68 = sub_25055E378(&v98, v66, v67);
  unint64_t v70 = v69;
  sub_250511528(v66, v67);
  uint64_t v98 = v68;
  uint64_t v99 = v70;
  uint64_t v71 = v88;
  uint64_t v72 = v92;
  sub_2505BDFF0();
  sub_250511528(v68, v70);
  if (v72)
  {
    uint64_t v34 = v94;
    sub_25051B8D4((uint64_t)v94, v50);
    sub_25051B8D4((uint64_t)v34, v50);
    sub_250511528(v93, v95);
  }
  else
  {
    uint64_t v73 = (uint64_t)v94;
    uint64_t v74 = sub_2505BE010();
    uint64_t v76 = v75;
    sub_250511528(*(void *)(v65 + 24), *(void *)(v65 + 32));
    *(void *)(v65 + 24) = v74;
    *(void *)(v65 + 32) = v76;
    uint64_t v77 = sub_2505BDB40();
    unint64_t v78 = v95;
    uint64_t v79 = v93;
    uint64_t v34 = (char *)v77;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v71, v82);
    sub_25051B8D4(v73, v50);
    sub_25051B8D4(v73, v50);
    sub_250511528(v79, v78);
  }
  sub_25051AF3C(v65, type metadata accessor for GKCrypto_SeedBlob);
  return v34;
}

uint64_t sub_250510A48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(_DWORD *)a1 = 1;
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  sub_2504DBC4C(a2, a3);
  sub_250511528(v9, v10);
  sub_2505BDCB0();
  uint64_t v11 = sub_2504DBF8C(v15, v16);
  uint64_t v13 = v12;
  sub_250511528(v15, v16);
  uint64_t result = sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 64) = a6;
  *(unsigned char *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 56) = a5;
  return result;
}

uint64_t sub_250510B38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25058F260(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_250515C20(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_250510BA4(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for UserKeyingInfo(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_25058F274(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_2505163A4(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_250510C4C(void **a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_25058F29C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_250516F28(v6);
  *a1 = v3;
  return result;
}

void sub_250510CF8(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  v41[5] = *(id *)MEMORY[0x263EF8340];
  v41[0] = a2;
  v41[1] = a3;
  uint64_t v37 = a4;
  unint64_t v38 = a5;
  unsigned __int8 v36 = 0;
  id v19 = sub_25059CCA4((uint64_t *)v41, &v37, a6, &v36);
  if (!v10)
  {
    uint64_t v35 = a1;
    if (v19)
    {
      uint64_t v20 = v19;
      sub_25055A26C((uint64_t *)v41);
      uint64_t v25 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F40);
      if ((swift_dynamicCast() & 1) == 0 || (unint64_t v26 = v38, v38 >> 60 == 15))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v27 = 394;
        *(_OWORD *)(v27 + 8) = xmmword_2505C0440;
        *(void *)(v27 + 24) = 0x80000002505C9810;
        *(void *)(v27 + 32) = 0xD000000000000086;
        *(void *)(v27 + 40) = 0x80000002505C9840;
        swift_willThrow();

        return;
      }
      uint64_t v29 = v37;
      uint64_t v30 = v39;
      unint64_t v31 = v40;
      sub_2504DBC4C(v37, v38);
      sub_2504DBC4C(a7, a8);
      char v32 = sub_25050C6A8(v29, v26, a7, a8);
      sub_250511528(a7, a8);
      sub_250511528(v29, v26);
      if ((v32 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v33 = 393;
        *(_OWORD *)(v33 + 8) = xmmword_2505C0430;
        *(void *)(v33 + 24) = 0x80000002505C9810;
        *(void *)(v33 + 32) = 0xD000000000000086;
        *(void *)(v33 + 40) = 0x80000002505C9840;
        swift_willThrow();

        sub_25051B884(v29, v26, v30, v31);
        return;
      }
      sub_25051B884(v29, v26, v30, v31);

      uint64_t v22 = v35;
    }
    else
    {
      type metadata accessor for GroupKitCryptoGroupSeed();
      uint64_t v34 = *(void **)(a1 + 32);
      sub_2504DBC4C((uint64_t)a2, (unint64_t)a3);
      sub_2504DBC4C(a4, a5);
      sub_2504DBC4C(a7, a8);
      sub_25051B908(a9, a10);
      id v21 = sub_25050F00C((uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8, a9, a10, v34);
      objc_msgSend(*(id *)(v35 + 32), sel_assignObject_toPersistentStore_, v21, *(void *)(v35 + 24));

      uint64_t v22 = v35;
    }
    uint64_t v23 = *(void **)(v22 + 32);
    v41[0] = 0;
    if (objc_msgSend(v23, sel_save_, v41))
    {
      id v24 = v41[0];
    }
    else
    {
      id v28 = v41[0];
      sub_2505BD840();

      swift_willThrow();
    }
  }
}

void sub_2505110F8(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  v33[0] = a2;
  v33[1] = a3;
  uint64_t v34 = a4;
  unint64_t v35 = a5;
  unsigned __int8 v32 = 1;
  id v17 = sub_25059CCA4((uint64_t *)v33, &v34, a6, &v32);
  if (!v8)
  {
    uint64_t v31 = a1;
    if (v17)
    {
      uint64_t v18 = v17;
      sub_25055A26C((uint64_t *)v33);
      id v24 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F40);
      if ((swift_dynamicCast() & 1) == 0 || (unint64_t v25 = v35, v35 >> 60 == 15))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v26 = 394;
        *(_OWORD *)(v26 + 8) = xmmword_2505C0440;
        *(void *)(v26 + 24) = 0x80000002505C9810;
        *(void *)(v26 + 32) = 0xD000000000000086;
        *(void *)(v26 + 40) = 0x80000002505C9840;
        swift_willThrow();

        return;
      }
      uint64_t v28 = v34;
      sub_2504DBC4C(a7, a8);
      sub_25051B908(v28, v25);
      char v29 = sub_25050C6A8(v28, v25, a7, a8);
      sub_250511528(a7, a8);
      sub_25051B8D4(v28, v25);
      if ((v29 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
        swift_allocError();
        *(_WORD *)uint64_t v30 = 393;
        *(_OWORD *)(v30 + 8) = xmmword_2505C0430;
        *(void *)(v30 + 24) = 0x80000002505C9810;
        *(void *)(v30 + 32) = 0xD000000000000086;
        *(void *)(v30 + 40) = 0x80000002505C9840;
        swift_willThrow();

        sub_25051B8D4(v28, v25);
        return;
      }
      sub_25051B8D4(v28, v25);

      uint64_t v21 = v31;
    }
    else
    {
      type metadata accessor for GroupKitCryptoGroupSeed();
      id v19 = *(void **)(a1 + 32);
      sub_2504DBC4C((uint64_t)a2, (unint64_t)a3);
      sub_2504DBC4C(a4, a5);
      sub_2504DBC4C(a7, a8);
      id v20 = sub_25050F4D8((uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8, v19);
      objc_msgSend(*(id *)(v31 + 32), sel_assignObject_toPersistentStore_, v20, *(void *)(v31 + 24));

      uint64_t v21 = v31;
    }
    uint64_t v22 = *(void **)(v21 + 32);
    v33[0] = 0;
    if (objc_msgSend(v22, sel_save_, v33))
    {
      id v23 = v33[0];
    }
    else
    {
      id v27 = v33[0];
      sub_2505BD840();

      swift_willThrow();
    }
  }
}

uint64_t sub_2505114BC(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_2505114F8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_250511528(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void *sub_2505115C8(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)sub_2505BE650();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

unsigned char **sub_25051166C(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_25051167C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2505116A4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_25051171C(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_2505BE430();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_25051171C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_2505117F0(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_25052857C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_25052857C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_2505117F0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2505BE440();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_2505119AC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_2505BE530();
  if (!v8)
  {
    sub_2505BE5E0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_2505BE650();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_2505119AC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_250511A44(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_250511BBC(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_250511BBC(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_250511A44(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_25056ACE4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_2505BE4C0();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_2505BE5E0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_2505BE1A0();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_2505BE650();
    __break(1u);
LABEL_14:
    uint64_t result = sub_2505BE5E0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_250511BBC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6008);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250511D0C@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_250511D3C(int *a1)
{
  sub_2505BD8A0();
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = sub_2505BD7D0();
  if (!v4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    abort();
  }
  uint64_t v5 = v4;
  uint64_t v6 = sub_2505BD800();
  uint64_t v7 = v2 - v6;
  if (__OFSUB__(v2, v6)) {
    goto LABEL_11;
  }
  uint64_t v8 = v3 - v2;
  uint64_t v9 = sub_2505BD7F0();
  if (v9 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v10 < 32) {
    goto LABEL_12;
  }
  uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], 0x20uLL, (void *)(v5 + v7));
  if (result) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_250511DE8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512088(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250511E08(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2505121F4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250511E28(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512360(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511E48(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25051254C(a1, a2, a3, (void *)*v3, &qword_269AB5EF0, &qword_269AB5EF8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511E78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25051254C(a1, a2, a3, (void *)*v3, &qword_269AB5ED8, &qword_269AB5E90);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511EA8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512DA0(a1, a2, a3, (void *)*v3, &qword_269AB5FD0, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511EE4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25051254C(a1, a2, a3, (void *)*v3, &qword_269AB5FD8, &qword_269AB5FC8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511F14(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25051278C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250511F34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512DA0(a1, a2, a3, (void *)*v3, &qword_269AB5EE8, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511F70(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2505128F8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_250511F90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512A74(a1, a2, a3, (void *)*v3, &qword_269AB5F88, &qword_269AB5F80);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511FC0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512A74(a1, a2, a3, (void *)*v3, &qword_269AB5F90, &qword_269AB5F78);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250511FF0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512C04(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250512010(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512DA0(a1, a2, a3, (void *)*v3, &qword_269AB5F50, type metadata accessor for UserKeyingInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_25051204C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_250512DA0(a1, a2, a3, (void *)*v3, &qword_269AB5F20, type metadata accessor for Group.MemberIDAndDiversifiedKey);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_250512088(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B202198);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_2505121F4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250512360(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E28);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E30);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250512504(char a1, int64_t a2, char a3, void *a4)
{
  return sub_25051254C(a1, a2, a3, a4, &qword_269AB5ED8, &qword_269AB5E90);
}

uint64_t sub_250512518(char a1, int64_t a2, char a3, void *a4)
{
  return sub_250512DA0(a1, a2, a3, a4, &qword_269AB5F50, type metadata accessor for UserKeyingInfo);
}

uint64_t sub_250512538(char a1, int64_t a2, char a3, void *a4)
{
  return sub_25051254C(a1, a2, a3, a4, &qword_269AB5FD8, &qword_269AB5FC8);
}

uint64_t sub_25051254C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  id v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_25051278C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F58);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_2505128F8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5FC0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250512A74(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 1;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 32 * v11) {
      memmove(v13 + 4, a4 + 4, 32 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 32 * v11 || v16 >= v17 + 32 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250512C04(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F60);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 4;
  uint64_t v13 = a4 + 4;
  size_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F68);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250512DA0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  id v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

unint64_t sub_250512FEC(uint64_t a1, uint64_t a2)
{
  sub_2505BE850();
  sub_2505BE180();
  uint64_t v4 = sub_2505BE880();
  return sub_2505132D8(a1, a2, v4);
}

unint64_t sub_250513064(uint64_t a1, unint64_t a2)
{
  sub_2505BE850();
  sub_2504DBC4C(a1, a2);
  sub_2505BD950();
  sub_250511528(a1, a2);
  uint64_t v4 = sub_2505BE880();
  return sub_2505133BC(a1, a2, v4);
}

unint64_t sub_2505130F0(uint64_t a1)
{
  sub_2505BE850();
  type metadata accessor for CFString(0);
  sub_250528338(&qword_269AB5E40, type metadata accessor for CFString);
  sub_2505BDA10();
  uint64_t v2 = sub_2505BE880();
  return sub_250513D9C(a1, v2);
}

unint64_t sub_2505131A4(void *a1)
{
  sub_2505BE850();
  swift_bridgeObjectRetain();
  sub_2505BE180();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2505BE180();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_2505BE880();
  return sub_250513EF8(a1, v2);
}

unint64_t sub_25051324C(uint64_t a1)
{
  uint64_t v2 = sub_2505BE460();
  return sub_250513FCC(a1, v2);
}

unint64_t sub_250513290(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x25337F7B0](*(void *)(v1 + 40), a1, 4);
  return sub_250514094(a1, v3);
}

unint64_t sub_2505132D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    int64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2505BE780() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2505BE780() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_2505133BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_2504DBC4C(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_123;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_124;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_125;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_120;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_120:
              sub_250511528(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_126;
                }
                sub_2504DBC4C(v14, v13);
                uint64_t v26 = sub_2505BD7D0();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = sub_2505BD800();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_128;
                  }
                  char v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  char v29 = 0;
                }
                sub_2505BD7F0();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_156;
                  }
                  int v39 = memcmp(v29, __s1, __n);
                  goto LABEL_102;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_137;
                  }
                  swift_retain();
                  unint64_t v47 = (char *)sub_2505BD7D0();
                  if (v47)
                  {
                    uint64_t v48 = sub_2505BD800();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_144;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = sub_2505BD7F0();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_149;
                  }
                  if (!v47) {
                    goto LABEL_150;
                  }
                  int v39 = memcmp(v29, v47, v50);
                  sub_250511528(a1, v8);
LABEL_102:
                  uint64_t v40 = v14;
                  unint64_t v41 = v13;
LABEL_103:
                  sub_250511528(v40, v41);
                  goto LABEL_104;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = sub_2505BD7D0();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = sub_2505BD800();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_143;
                  }
                  uint64_t v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_138;
                }
                uint64_t v74 = sub_2505BD7F0();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_157;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_158;
                }
                int v62 = memcmp(v29, v73, v75);
                swift_release();
                swift_release();
                sub_250511528(v14, v13);
LABEL_117:
                sub_250511528(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = sub_2505BD7D0();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = sub_2505BD800();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_127;
                  }
                  uint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v34 = 0;
                }
                sub_2505BD7F0();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_153;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
LABEL_99:
                  swift_release();
                  goto LABEL_117;
                }
                if (v88 != 1)
                {
                  uint64_t v63 = *(void *)(a1 + 16);
                  uint64_t v77 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v64 = (char *)sub_2505BD7D0();
                  if (v64)
                  {
                    uint64_t v65 = sub_2505BD800();
                    if (__OFSUB__(v63, v65)) {
                      goto LABEL_141;
                    }
                    v64 += v63 - v65;
                  }
                  BOOL v21 = __OFSUB__(v77, v63);
                  int64_t v66 = v77 - v63;
                  if (v21) {
                    goto LABEL_136;
                  }
                  uint64_t v67 = sub_2505BD7F0();
                  if (v67 >= v66) {
                    size_t v68 = v66;
                  }
                  else {
                    size_t v68 = v67;
                  }
                  if (!v34) {
                    goto LABEL_154;
                  }
                  uint64_t v4 = v83;
                  if (!v64) {
                    goto LABEL_155;
                  }
                  int v62 = memcmp(v34, v64, v68);
                  swift_release();
                  swift_release();
                  swift_release();
                  goto LABEL_99;
                }
                if (v81 < v84) {
                  goto LABEL_131;
                }
                swift_retain();
                unint64_t v43 = (char *)sub_2505BD7D0();
                if (v43)
                {
                  uint64_t v44 = sub_2505BD800();
                  if (__OFSUB__(v84, v44)) {
                    goto LABEL_142;
                  }
                  v43 += v84 - v44;
                }
                uint64_t v45 = sub_2505BD7F0();
                size_t v46 = v79;
                if (v45 < v79) {
                  size_t v46 = v45;
                }
                if (!v34) {
                  goto LABEL_147;
                }
                if (!v43) {
                  goto LABEL_148;
                }
                int v39 = memcmp(v34, v43, v46);
                unint64_t v8 = a2;
                sub_250511528(a1, a2);
                swift_release();
                swift_release();
LABEL_104:
                sub_250511528(v14, v13);
                uint64_t v10 = v87;
                if (!v39) {
                  return v6;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  sub_2504DBC4C(a1, v8);
                  uint64_t v35 = sub_2505BD7D0();
                  if (!v35) {
                    goto LABEL_146;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = sub_2505BD800();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_135;
                  }
LABEL_41:
                  uint64_t v37 = sub_2505BD7F0();
                  if (v37 >= v79) {
                    size_t v38 = v79;
                  }
                  else {
                    size_t v38 = v37;
                  }
                  int v39 = memcmp(__s1, (const void *)(v23 + v25), v38);
                  uint64_t v40 = a1;
                  unint64_t v41 = v8;
                  goto LABEL_103;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)sub_2505BD7D0();
                if (v53)
                {
                  uint64_t v59 = sub_2505BD800();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_140;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_133;
                }
                uint64_t v56 = sub_2505BD7F0();
                if (!v53) {
                  goto LABEL_152;
                }
LABEL_82:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                sub_250511528(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v42 = memcmp(__s1, &__s2, __n);
                  sub_250511528(v14, v13);
                  if (!v42) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  sub_2504DBC4C(a1, v8);
                  uint64_t v22 = sub_2505BD7D0();
                  if (!v22)
                  {
                    sub_2505BD7F0();
                    __break(1u);
LABEL_146:
                    sub_2505BD7F0();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
                    JUMPOUT(0x250513D6CLL);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = sub_2505BD800();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_134;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)sub_2505BD7D0();
                if (v53)
                {
                  uint64_t v54 = sub_2505BD800();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_139;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = sub_2505BD7F0();
                if (!v53) {
                  goto LABEL_151;
                }
                goto LABEL_82;
            }
          }
          else
          {
LABEL_7:
            sub_250511528(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_250513D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    unint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_250528338(&qword_269AB5E40, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = sub_2505BDA00();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_2505BDA00();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_250513EF8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v7 = ~v4;
    uint64_t v8 = *(void *)(v2 + 48);
    do
    {
      uint64_t v9 = *(void **)(v8 + 8 * v5);
      BOOL v10 = v9[2] == a1[2] && v9[3] == a1[3];
      if (v10 || (sub_2505BE780() & 1) != 0)
      {
        BOOL v11 = v9[4] == a1[4] && v9[5] == a1[5];
        if (v11 || (sub_2505BE780() & 1) != 0) {
          break;
        }
      }
      unint64_t v5 = (v5 + 1) & v7;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_250513FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_250527D48(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x25337F3E0](v9, a1);
      sub_250527DA4((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_250514094(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_250514130(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_250513064(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = *(void *)(v18 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2505B6AAC();
    goto LABEL_7;
  }
  sub_2505B455C(v15, a4 & 1);
  unint64_t v21 = sub_250513064(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = sub_2505BE7E0();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_2505B67F8(v12, a2, a3, a1, v18);
  return sub_2504DBC4C(a2, a3);
}

uint64_t sub_250514274(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_2505131A4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    char v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_2505B6C74();
    goto LABEL_7;
  }
  sub_2505B4894(v13, a3 & 1);
  unint64_t v19 = sub_2505131A4(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    type metadata accessor for SimPCSIDSet();
    uint64_t result = sub_2505BE7E0();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  char v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  sub_2505B6844(v10, (uint64_t)a2, a1, v16);
  return swift_retain();
}

_OWORD *sub_2505143A4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_250512FEC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_2505B6E20();
      goto LABEL_7;
    }
    sub_2505B4BE4(v15, a4 & 1);
    unint64_t v21 = sub_250512FEC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_2505BE7E0();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return sub_250527D34(a1, v19);
  }
LABEL_13:
  sub_2505B688C(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_2505144F8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_250513064(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for GroupMembership.MemberProperties(0);
      return sub_2505284B0(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for GroupMembership.MemberProperties);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2505B7008();
    goto LABEL_7;
  }
  sub_2505B4EE4(v15, a4 & 1);
  unint64_t v22 = sub_250513064(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = sub_2505BE7E0();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_2505B68F8(v12, a2, a3, a1, v18);
  return sub_2504DBC4C(a2, a3);
}

uint64_t sub_250514668(_OWORD *a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_250513064(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_2505B71C4();
      goto LABEL_7;
    }
    sub_2505B4F2C(v15, a4 & 1);
    unint64_t v21 = sub_250513064(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_2505BE7E0();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 48 * v12;
    return sub_250528454((uint64_t)a1, v19);
  }
LABEL_13:
  sub_2505B6924(v12, a2, a3, a1, v18);
  return sub_2504DBC4C(a2, a3);
}

uint64_t sub_2505147B8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_250513064(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for MembershipVerifier(0);
      return sub_2505284B0(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for MembershipVerifier);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_2505B73D8();
    goto LABEL_7;
  }
  sub_2505B52C8(v15, a4 & 1);
  unint64_t v22 = sub_250513064(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = sub_2505BE7E0();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_2505B6980(v12, a2, a3, a1, v18);
  return sub_2504DBC4C(a2, a3);
}

unint64_t sub_250514928(_OWORD *a1, unsigned int a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_250513290(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2505B7698();
      goto LABEL_7;
    }
    sub_2505B5EB0(v13, a3 & 1);
    unint64_t v19 = sub_250513290(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = sub_2505BE7E0();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + (v10 << 6);
    return sub_250527DF8((uint64_t)a1, v17);
  }
LABEL_13:
  return sub_2505B6A58(v10, a2, a1, v16);
}

uint64_t sub_250514A58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_250570DC0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250514BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 16) < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v91 = a2 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a2 + 56);
  int64_t v87 = (unint64_t)(63 - v5) >> 6;
  uint64_t v8 = a1 + 56;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v90 = v3;
  uint64_t v94 = v4;
  uint64_t v96 = v8;
  unint64_t v10 = v7;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v11 = (v10 - 1) & v10;
  unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
  int64_t v13 = v9;
  if (!*(void *)(v4 + 16)) {
    goto LABEL_143;
  }
LABEL_23:
  unint64_t v88 = v11;
  int64_t v89 = v13;
  uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v12);
  uint64_t v19 = *v17;
  unint64_t v18 = v17[1];
  sub_2505BE850();
  sub_2504DBC4C(v19, v18);
  sub_2504DBC4C(v19, v18);
  sub_2505BD950();
  unint64_t v97 = v18;
  sub_250511528(v19, v18);
  uint64_t v20 = sub_2505BE880();
  uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v22 = v20 & ~v21;
  if (((*(void *)(v8 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
  {
LABEL_140:
    sub_250511528(v19, v97);
    uint64_t v2 = 0;
    goto LABEL_141;
  }
  unint64_t v23 = v18 >> 62;
  uint64_t v98 = ~v21;
  BOOL v24 = __OFSUB__(HIDWORD(v19), v19);
  BOOL v95 = v24;
  uint64_t v92 = (v19 >> 32) - (int)v19;
  uint64_t v93 = v19 >> 32;
  while (2)
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v22);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    uint64_t v28 = 0;
    switch(v26 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v27), v27))
        {
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
        }
        uint64_t v28 = HIDWORD(v27) - (int)v27;
LABEL_36:
        sub_2504DBC4C(v27, v26);
        break;
      case 2uLL:
        uint64_t v30 = *(void *)(v27 + 16);
        uint64_t v29 = *(void *)(v27 + 24);
        uint64_t v28 = v29 - v30;
        if (!__OFSUB__(v29, v30)) {
          goto LABEL_36;
        }
        goto LABEL_146;
      case 3uLL:
        break;
      default:
        uint64_t v28 = BYTE6(v26);
        break;
    }
    uint64_t v31 = BYTE6(v97);
    switch((int)v23)
    {
      case 1:
        uint64_t v31 = HIDWORD(v19) - (int)v19;
        if (v95) {
          goto LABEL_147;
        }
        goto LABEL_41;
      case 2:
        uint64_t v33 = *(void *)(v19 + 16);
        uint64_t v32 = *(void *)(v19 + 24);
        BOOL v34 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v34) {
          goto LABEL_41;
        }
        goto LABEL_148;
      case 3:
        if (v28) {
          goto LABEL_29;
        }
        goto LABEL_137;
      default:
LABEL_41:
        if (v28 != v31)
        {
LABEL_29:
          sub_250511528(v27, v26);
          goto LABEL_30;
        }
        if (v28 >= 1)
        {
          switch(v26 >> 62)
          {
            case 1uLL:
              if ((int)v27 > v27 >> 32) {
                goto LABEL_149;
              }
              sub_2504DBC4C(v27, v26);
              uint64_t v39 = sub_2505BD7D0();
              if (v39)
              {
                uint64_t v40 = v39;
                uint64_t v41 = sub_2505BD800();
                if (__OFSUB__((int)v27, v41)) {
                  goto LABEL_151;
                }
                int v42 = (const void *)(v40 + (int)v27 - v41);
                sub_2505BD7F0();
                if (!v23)
                {
LABEL_91:
                  *(void *)__s1 = v19;
                  *(_DWORD *)&__s1[8] = v97;
                  *(_WORD *)&__s1[12] = WORD2(v97);
                  if (!v42) {
                    goto LABEL_176;
                  }
                  int v47 = memcmp(v42, __s1, BYTE6(v97));
                  goto LABEL_132;
                }
              }
              else
              {
                int v42 = 0;
                sub_2505BD7F0();
                if (!v23) {
                  goto LABEL_91;
                }
              }
              if (v23 == 1)
              {
                if (v93 < (int)v19) {
                  goto LABEL_159;
                }
                swift_retain();
                unint64_t v43 = (char *)sub_2505BD7D0();
                if (v43)
                {
                  uint64_t v44 = sub_2505BD800();
                  if (__OFSUB__((int)v19, v44)) {
                    goto LABEL_168;
                  }
                  v43 += (int)v19 - v44;
                }
                uint64_t v45 = sub_2505BD7F0();
                size_t v46 = (v19 >> 32) - (int)v19;
                if (v45 < v92) {
                  size_t v46 = v45;
                }
                if (!v42) {
                  goto LABEL_171;
                }
                if (!v43) {
                  goto LABEL_172;
                }
                int v47 = memcmp(v42, v43, v46);
                sub_250511528(v19, v97);
              }
              else
              {
                uint64_t v79 = *(void *)(v19 + 16);
                uint64_t v78 = *(void *)(v19 + 24);
                swift_retain();
                swift_retain();
                unint64_t v80 = (char *)sub_2505BD7D0();
                if (v80)
                {
                  uint64_t v81 = sub_2505BD800();
                  if (__OFSUB__(v79, v81)) {
                    goto LABEL_167;
                  }
                  v80 += v79 - v81;
                }
                BOOL v34 = __OFSUB__(v78, v79);
                int64_t v82 = v78 - v79;
                if (v34) {
                  goto LABEL_161;
                }
                uint64_t v83 = sub_2505BD7F0();
                if (v83 >= v82) {
                  size_t v84 = v82;
                }
                else {
                  size_t v84 = v83;
                }
                if (!v42) {
                  goto LABEL_182;
                }
                uint64_t v3 = v90;
                uint64_t v4 = v94;
                if (!v80) {
                  goto LABEL_183;
                }
                int v47 = memcmp(v42, v80, v84);
                swift_release();
                swift_release();
              }
LABEL_132:
              uint64_t v59 = v27;
              unint64_t v60 = v26;
LABEL_133:
              sub_250511528(v59, v60);
LABEL_134:
              sub_250511528(v27, v26);
LABEL_135:
              uint64_t v8 = v96;
              if (!v47) {
                goto LABEL_138;
              }
              break;
            case 2uLL:
              uint64_t v48 = *(void *)(v27 + 16);
              swift_retain();
              swift_retain();
              uint64_t v49 = (char *)sub_2505BD7D0();
              if (!v49) {
                goto LABEL_68;
              }
              uint64_t v50 = sub_2505BD800();
              if (__OFSUB__(v48, v50)) {
                goto LABEL_150;
              }
              v49 += v48 - v50;
LABEL_68:
              sub_2505BD7F0();
              uint64_t v4 = v94;
              if (!v23)
              {
                *(void *)__s1 = v19;
                *(_DWORD *)&__s1[8] = v97;
                *(_WORD *)&__s1[12] = WORD2(v97);
                if (!v49) {
                  goto LABEL_179;
                }
                int v47 = memcmp(v49, __s1, BYTE6(v97));
                swift_release();
                swift_release();
                goto LABEL_134;
              }
              if (v23 == 1)
              {
                if (v93 < (int)v19) {
                  goto LABEL_154;
                }
                swift_retain();
                uint64_t v51 = (char *)sub_2505BD7D0();
                if (v51)
                {
                  uint64_t v52 = sub_2505BD800();
                  if (__OFSUB__((int)v19, v52)) {
                    goto LABEL_166;
                  }
                  v51 += (int)v19 - v52;
                }
                uint64_t v53 = sub_2505BD7F0();
                size_t v54 = (v19 >> 32) - (int)v19;
                if (v53 < v92) {
                  size_t v54 = v53;
                }
                if (!v49) {
                  goto LABEL_173;
                }
                if (!v51) {
                  goto LABEL_174;
                }
                int v47 = memcmp(v49, v51, v54);
                sub_250511528(v19, v97);
                swift_release();
              }
              else
              {
                uint64_t v72 = *(void *)(v19 + 16);
                uint64_t v86 = *(void *)(v19 + 24);
                swift_retain();
                swift_retain();
                uint64_t v73 = (char *)sub_2505BD7D0();
                if (v73)
                {
                  uint64_t v74 = sub_2505BD800();
                  if (__OFSUB__(v72, v74)) {
                    goto LABEL_165;
                  }
                  v73 += v72 - v74;
                }
                BOOL v34 = __OFSUB__(v86, v72);
                int64_t v75 = v86 - v72;
                if (v34) {
                  goto LABEL_160;
                }
                uint64_t v76 = sub_2505BD7F0();
                if (v76 >= v75) {
                  size_t v77 = v75;
                }
                else {
                  size_t v77 = v76;
                }
                if (!v49) {
                  goto LABEL_180;
                }
                uint64_t v3 = v90;
                if (!v73) {
                  goto LABEL_181;
                }
                int v47 = memcmp(v49, v73, v77);
                swift_release();
                swift_release();
LABEL_120:
                swift_release();
              }
              swift_release();
              sub_250511528(v27, v26);
              uint64_t v4 = v94;
              goto LABEL_135;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v23) {
                goto LABEL_88;
              }
              if (v23 == 1)
              {
                if (v93 < (int)v19) {
                  goto LABEL_153;
                }
                sub_2504DBC4C(v19, v97);
                uint64_t v55 = sub_2505BD7D0();
                if (!v55) {
                  goto LABEL_175;
                }
                uint64_t v36 = v55;
                uint64_t v56 = sub_2505BD800();
                uint64_t v38 = (int)v19 - v56;
                if (__OFSUB__((int)v19, v56)) {
                  goto LABEL_158;
                }
LABEL_84:
                uint64_t v57 = sub_2505BD7F0();
                if (v57 >= v92) {
                  size_t v58 = (v19 >> 32) - (int)v19;
                }
                else {
                  size_t v58 = v57;
                }
                int v47 = memcmp(__s1, (const void *)(v36 + v38), v58);
                uint64_t v59 = v19;
                unint64_t v60 = v97;
                goto LABEL_133;
              }
              uint64_t v68 = *(void *)(v19 + 16);
              uint64_t v69 = *(void *)(v19 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = (char *)sub_2505BD7D0();
              if (v64)
              {
                uint64_t v70 = sub_2505BD800();
                if (__OFSUB__(v68, v70)) {
                  goto LABEL_164;
                }
                v64 += v68 - v70;
              }
              BOOL v34 = __OFSUB__(v69, v68);
              int64_t v66 = v69 - v68;
              if (v34) {
                goto LABEL_156;
              }
              uint64_t v67 = sub_2505BD7F0();
              if (!v64) {
                goto LABEL_178;
              }
LABEL_104:
              if (v67 >= v66) {
                size_t v71 = v66;
              }
              else {
                size_t v71 = v67;
              }
              int v47 = memcmp(__s1, v64, v71);
              goto LABEL_120;
            default:
              *(void *)__s1 = v27;
              *(_WORD *)&__s1[8] = v26;
              __s1[10] = BYTE2(v26);
              __s1[11] = BYTE3(v26);
              __s1[12] = BYTE4(v26);
              __s1[13] = BYTE5(v26);
              if (!v23)
              {
LABEL_88:
                uint64_t __s2 = v19;
                int v100 = v97;
                __int16 v101 = WORD2(v97);
                int v61 = memcmp(__s1, &__s2, BYTE6(v97));
                sub_250511528(v27, v26);
                if (!v61) {
                  goto LABEL_138;
                }
                break;
              }
              if (v23 == 1)
              {
                if (v93 < (int)v19) {
                  goto LABEL_152;
                }
                sub_2504DBC4C(v19, v97);
                uint64_t v35 = sub_2505BD7D0();
                if (!v35)
                {
                  sub_2505BD7F0();
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  sub_2505BD7F0();
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
                  JUMPOUT(0x250515718);
                }
                uint64_t v36 = v35;
                uint64_t v37 = sub_2505BD800();
                uint64_t v38 = (int)v19 - v37;
                if (__OFSUB__((int)v19, v37)) {
                  goto LABEL_157;
                }
                goto LABEL_84;
              }
              uint64_t v62 = *(void *)(v19 + 16);
              uint64_t v63 = *(void *)(v19 + 24);
              swift_retain();
              swift_retain();
              uint64_t v64 = (char *)sub_2505BD7D0();
              if (v64)
              {
                uint64_t v65 = sub_2505BD800();
                if (__OFSUB__(v62, v65)) {
                  goto LABEL_163;
                }
                v64 += v62 - v65;
              }
              BOOL v34 = __OFSUB__(v63, v62);
              int64_t v66 = v63 - v62;
              if (v34) {
                goto LABEL_155;
              }
              uint64_t v67 = sub_2505BD7F0();
              if (!v64) {
                goto LABEL_177;
              }
              goto LABEL_104;
          }
LABEL_30:
          unint64_t v22 = (v22 + 1) & v98;
          if (((*(void *)(v8 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
            goto LABEL_140;
          }
          continue;
        }
LABEL_137:
        sub_250511528(v27, v26);
LABEL_138:
        sub_250511528(v19, v97);
        int64_t v9 = v89;
        unint64_t v10 = v88;
        if (v88) {
          goto LABEL_7;
        }
LABEL_9:
        int64_t v14 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_162;
        }
        if (v14 >= v87) {
          goto LABEL_144;
        }
        unint64_t v15 = *(void *)(v91 + 8 * v14);
        int64_t v13 = v9 + 1;
        if (v15) {
          goto LABEL_22;
        }
        int64_t v13 = v9 + 2;
        if (v9 + 2 >= v87) {
          goto LABEL_144;
        }
        unint64_t v15 = *(void *)(v91 + 8 * v13);
        if (v15) {
          goto LABEL_22;
        }
        int64_t v13 = v9 + 3;
        if (v9 + 3 >= v87) {
          goto LABEL_144;
        }
        unint64_t v15 = *(void *)(v91 + 8 * v13);
        if (v15) {
          goto LABEL_22;
        }
        int64_t v16 = v9 + 4;
        if (v9 + 4 >= v87)
        {
LABEL_144:
          uint64_t v2 = 1;
          goto LABEL_141;
        }
        unint64_t v15 = *(void *)(v91 + 8 * v16);
        if (!v15)
        {
          while (1)
          {
            int64_t v13 = v16 + 1;
            if (__OFADD__(v16, 1)) {
              goto LABEL_169;
            }
            if (v13 >= v87) {
              goto LABEL_144;
            }
            unint64_t v15 = *(void *)(v91 + 8 * v13);
            ++v16;
            if (v15) {
              goto LABEL_22;
            }
          }
        }
        int64_t v13 = v9 + 4;
LABEL_22:
        uint64_t v11 = (v15 - 1) & v15;
        unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
        if (*(void *)(v4 + 16)) {
          goto LABEL_23;
        }
LABEL_143:
        uint64_t v2 = 0;
LABEL_141:
        sub_250528314();
        return v2;
    }
  }
}

void sub_250515748(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v59 = a1;
  uint64_t v60 = a1 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v61 = v7;
  uint64_t v62 = 0;
  uint64_t v63 = v10 & v8;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25051A4B8(&v52);
  unint64_t v11 = *((void *)&v52 + 1);
  if (*((void *)&v52 + 1) >> 60 == 15)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_250528314();
    swift_release();
    return;
  }
  char v47 = a4;
  uint64_t v12 = v52;
  uint64_t v14 = v53;
  unint64_t v13 = v54;
  long long v51 = v52;
  uint64_t v16 = v55;
  unint64_t v15 = v56;
  uint64_t v17 = v57;
  unint64_t v49 = v58;
  unint64_t v18 = (void *)*a5;
  unint64_t v20 = sub_250513064(v52, *((unint64_t *)&v52 + 1));
  uint64_t v21 = v18[2];
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v24 = v19;
  if (v18[3] >= v23)
  {
    if (v47)
    {
      if (v19) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v48 = v20;
      sub_2505B71C4();
      unint64_t v20 = v48;
      if (v24) {
        goto LABEL_13;
      }
    }
LABEL_16:
    uint64_t v30 = (void *)*a5;
    *(void *)(*a5 + 8 * (v20 >> 6) + 64) |= 1 << v20;
    uint64_t v31 = (uint64_t *)(v30[6] + 16 * v20);
    *uint64_t v31 = v12;
    v31[1] = v11;
    for (unint64_t i = (uint64_t *)(v30[7] + 48 * v20); ; unint64_t i = (uint64_t *)(v30[7] + 48 * v39))
    {
      *unint64_t i = v14;
      i[1] = v13;
      i[2] = v16;
      i[3] = v15;
      i[4] = v17;
      i[5] = v49;
      uint64_t v33 = v30[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        break;
      }
      v30[2] = v35;
      sub_25051A4B8(&v52);
      unint64_t v36 = *((void *)&v52 + 1);
      if (*((void *)&v52 + 1) >> 60 == 15) {
        goto LABEL_5;
      }
      uint64_t v37 = v52;
      uint64_t v14 = v53;
      unint64_t v13 = v54;
      long long v51 = v52;
      uint64_t v16 = v55;
      unint64_t v15 = v56;
      uint64_t v17 = v57;
      unint64_t v49 = v58;
      uint64_t v38 = (void *)*a5;
      unint64_t v39 = sub_250513064(v52, *((unint64_t *)&v52 + 1));
      uint64_t v41 = v38[2];
      BOOL v42 = (v40 & 1) == 0;
      BOOL v34 = __OFADD__(v41, v42);
      uint64_t v43 = v41 + v42;
      if (v34) {
        goto LABEL_24;
      }
      char v44 = v40;
      if (v38[3] < v43)
      {
        sub_2505B4F2C(v43, 1);
        unint64_t v39 = sub_250513064(v37, v36);
        if ((v44 & 1) != (v45 & 1)) {
          goto LABEL_26;
        }
      }
      if (v44) {
        goto LABEL_13;
      }
      uint64_t v30 = (void *)*a5;
      *(void *)(*a5 + 8 * (v39 >> 6) + 64) |= 1 << v39;
      size_t v46 = (uint64_t *)(v30[6] + 16 * v39);
      *size_t v46 = v37;
      v46[1] = v36;
    }
    goto LABEL_25;
  }
  sub_2505B4F2C(v23, v47 & 1);
  unint64_t v25 = sub_250513064(v12, v11);
  if ((v24 & 1) != (v26 & 1))
  {
LABEL_26:
    sub_2505BE7E0();
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v20 = v25;
  if ((v24 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_13:
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
  uint64_t v27 = (void *)swift_allocError();
  *(_WORD *)uint64_t v28 = 331;
  *(_OWORD *)(v28 + 8) = xmmword_2505C0450;
  *(void *)(v28 + 24) = 0x80000002505C9B40;
  *(void *)(v28 + 32) = 0xD000000000000052;
  *(void *)(v28 + 40) = 0x80000002505C8CB0;
  swift_willThrow();
  id v66 = v27;
  id v29 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F38);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_250511528(v14, v13);
    sub_250511528(v16, v15);
    sub_250511528(v17, v49);
    sub_250511528(v51, *((unint64_t *)&v51 + 1));
    sub_250528314();
    swift_release();

    return;
  }
LABEL_27:
  sub_2505BE4B0();
  sub_2505BE190();
  sub_2505BE590();
  sub_2505BE190();
  sub_2505BE5F0();
  __break(1u);
}

uint64_t sub_250515C20(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t result = sub_2505BE760();
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_132;
    }
    if (v4) {
      return sub_2505184A0(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_140;
  }
  uint64_t v108 = v4;
  uint64_t v103 = result;
  __int16 v101 = a1;
  if (v4 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    unint64_t v111 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v4 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      unint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_98:
      uint64_t v105 = v8;
      if (v12 >= 2)
      {
        uint64_t v93 = *v101;
        do
        {
          unint64_t v94 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_127;
          }
          if (!v93) {
            goto LABEL_139;
          }
          uint64_t v95 = *(void *)&v11[16 * v94 + 32];
          uint64_t v96 = *(void *)&v11[16 * v12 + 24];
          sub_250519018((uint64_t *)(v93 + 16 * v95), (uint64_t *)(v93 + 16 * *(void *)&v11[16 * v12 + 16]), v93 + 16 * v96, v111);
          if (v2) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v11 = sub_25058F1A4((uint64_t)v11);
          }
          if (v94 >= *((void *)v11 + 2)) {
            goto LABEL_129;
          }
          unint64_t v97 = &v11[16 * v94 + 32];
          *(void *)unint64_t v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v11 + 2);
          if (v12 > v98) {
            goto LABEL_130;
          }
          memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v98 - v12));
          *((void *)v11 + 2) = v98 - 1;
          unint64_t v12 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_109:
      swift_bridgeObjectRelease();
      *(void *)(v105 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = sub_2505BE2F0();
    *(void *)(v8 + 16) = v7;
    uint64_t v4 = v108;
    unint64_t v111 = (char *)(v8 + 32);
  }
  uint64_t v105 = v8;
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v102 = *a1 + 40;
  uint64_t v100 = *a1 - 16;
  unint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v112 = *a1;
  while (1)
  {
    uint64_t v13 = v9 + 1;
    uint64_t v107 = v9;
    if (v9 + 1 < v4)
    {
      uint64_t v104 = v2;
      uint64_t v14 = (uint64_t *)(v10 + 16 * v13);
      uint64_t v16 = *v14;
      unint64_t v15 = v14[1];
      uint64_t v17 = (uint64_t *)(v10 + 16 * v9);
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      sub_2504DBC4C(v16, v15);
      sub_2504DBC4C(v18, v19);
      int v20 = sub_250559F4C(v18, v19, v16, v15);
      sub_250511528(v18, v19);
      sub_250511528(v16, v15);
      uint64_t v13 = v9 + 2;
      if (v9 + 2 < v4)
      {
        uint64_t v21 = (unint64_t *)(v102 + 16 * v9);
        while (1)
        {
          uint64_t v22 = v13;
          uint64_t v23 = *(v21 - 1);
          unint64_t v24 = *v21;
          uint64_t v25 = *(v21 - 3);
          unint64_t v26 = *(v21 - 2);
          sub_2504DBC4C(v23, *v21);
          sub_2504DBC4C(v25, v26);
          int v27 = sub_250559F4C(v25, v26, v23, v24);
          sub_250511528(v25, v26);
          sub_250511528(v23, v24);
          if ((v20 ^ v27)) {
            break;
          }
          v21 += 2;
          uint64_t v13 = v22 + 1;
          uint64_t v4 = v108;
          if (v108 == v22 + 1)
          {
            uint64_t v13 = v108;
            goto LABEL_22;
          }
        }
        uint64_t v4 = v108;
        uint64_t v13 = v22;
LABEL_22:
        uint64_t v9 = v107;
      }
      uint64_t v2 = v104;
      uint64_t v10 = v112;
      if (v20)
      {
        if (v13 < v9) {
          goto LABEL_133;
        }
        if (v9 < v13)
        {
          uint64_t v28 = (long long *)(v100 + 16 * v13);
          uint64_t v29 = v13;
          uint64_t v30 = v9;
          uint64_t v31 = (long long *)(v112 + 16 * v9);
          do
          {
            if (v30 != --v29)
            {
              if (!v112) {
                goto LABEL_138;
              }
              long long v32 = *v31;
              *uint64_t v31 = *v28;
              *uint64_t v28 = v32;
            }
            ++v30;
            --v28;
            ++v31;
          }
          while (v30 < v29);
        }
      }
    }
    if (v13 < v4)
    {
      if (__OFSUB__(v13, v9)) {
        goto LABEL_131;
      }
      if (v13 - v9 < v103) {
        break;
      }
    }
LABEL_49:
    if (v13 < v9) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = sub_25058EBC8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v43 = *((void *)v11 + 2);
    unint64_t v42 = *((void *)v11 + 3);
    unint64_t v12 = v43 + 1;
    uint64_t v10 = v112;
    uint64_t v110 = v13;
    if (v43 >= v42 >> 1)
    {
      uint64_t v92 = sub_25058EBC8((char *)(v42 > 1), v43 + 1, 1, v11);
      uint64_t v10 = v112;
      unint64_t v11 = v92;
    }
    *((void *)v11 + 2) = v12;
    char v44 = v11 + 32;
    char v45 = &v11[16 * v43 + 32];
    *(void *)char v45 = v9;
    *((void *)v45 + 1) = v110;
    if (v43)
    {
      while (1)
      {
        unint64_t v46 = v12 - 1;
        if (v12 >= 4)
        {
          long long v51 = &v44[16 * v12];
          uint64_t v52 = *((void *)v51 - 8);
          uint64_t v53 = *((void *)v51 - 7);
          BOOL v57 = __OFSUB__(v53, v52);
          uint64_t v54 = v53 - v52;
          if (v57) {
            goto LABEL_115;
          }
          uint64_t v56 = *((void *)v51 - 6);
          uint64_t v55 = *((void *)v51 - 5);
          BOOL v57 = __OFSUB__(v55, v56);
          uint64_t v49 = v55 - v56;
          char v50 = v57;
          if (v57) {
            goto LABEL_116;
          }
          unint64_t v58 = v12 - 2;
          uint64_t v59 = &v44[16 * v12 - 32];
          uint64_t v61 = *(void *)v59;
          uint64_t v60 = *((void *)v59 + 1);
          BOOL v57 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          if (v57) {
            goto LABEL_118;
          }
          BOOL v57 = __OFADD__(v49, v62);
          uint64_t v63 = v49 + v62;
          if (v57) {
            goto LABEL_121;
          }
          if (v63 >= v54)
          {
            uint64_t v81 = &v44[16 * v46];
            uint64_t v83 = *(void *)v81;
            uint64_t v82 = *((void *)v81 + 1);
            BOOL v57 = __OFSUB__(v82, v83);
            uint64_t v84 = v82 - v83;
            if (v57) {
              goto LABEL_125;
            }
            BOOL v74 = v49 < v84;
            goto LABEL_86;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v75 = *((void *)v11 + 4);
            uint64_t v76 = *((void *)v11 + 5);
            BOOL v57 = __OFSUB__(v76, v75);
            uint64_t v68 = v76 - v75;
            char v69 = v57;
            goto LABEL_80;
          }
          uint64_t v48 = *((void *)v11 + 4);
          uint64_t v47 = *((void *)v11 + 5);
          BOOL v57 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          char v50 = v57;
        }
        if (v50) {
          goto LABEL_117;
        }
        unint64_t v58 = v12 - 2;
        uint64_t v64 = &v44[16 * v12 - 32];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v67 = __OFSUB__(v65, v66);
        uint64_t v68 = v65 - v66;
        char v69 = v67;
        if (v67) {
          goto LABEL_120;
        }
        uint64_t v70 = &v44[16 * v46];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v57 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v57) {
          goto LABEL_123;
        }
        if (__OFADD__(v68, v73)) {
          goto LABEL_124;
        }
        if (v68 + v73 >= v49)
        {
          BOOL v74 = v49 < v73;
LABEL_86:
          if (v74) {
            unint64_t v46 = v58;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v69) {
          goto LABEL_119;
        }
        size_t v77 = &v44[16 * v46];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v57 = __OFSUB__(v78, v79);
        uint64_t v80 = v78 - v79;
        if (v57) {
          goto LABEL_122;
        }
        if (v80 < v68) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v85 = v46 - 1;
        if (v46 - 1 >= v12)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        if (!v10) {
          goto LABEL_137;
        }
        uint64_t v86 = v11;
        int64_t v87 = &v44[16 * v85];
        uint64_t v88 = *(void *)v87;
        int64_t v89 = &v44[16 * v46];
        uint64_t v90 = *((void *)v89 + 1);
        sub_250519018((uint64_t *)(v10 + 16 * *(void *)v87), (uint64_t *)(v10 + 16 * *(void *)v89), v10 + 16 * v90, v111);
        if (v2) {
          goto LABEL_109;
        }
        if (v90 < v88) {
          goto LABEL_112;
        }
        if (v46 > *((void *)v86 + 2)) {
          goto LABEL_113;
        }
        *(void *)int64_t v87 = v88;
        *(void *)&v44[16 * v85 + 8] = v90;
        unint64_t v91 = *((void *)v86 + 2);
        if (v46 >= v91) {
          goto LABEL_114;
        }
        unint64_t v11 = v86;
        unint64_t v12 = v91 - 1;
        memmove(&v44[16 * v46], v89 + 16, 16 * (v91 - 1 - v46));
        *((void *)v11 + 2) = v91 - 1;
        uint64_t v10 = v112;
        if (v91 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    uint64_t v4 = v108;
    uint64_t v9 = v110;
    uint64_t v8 = v105;
    if (v110 >= v108) {
      goto LABEL_98;
    }
  }
  uint64_t v33 = v9 + v103;
  if (__OFADD__(v9, v103)) {
    goto LABEL_134;
  }
  if (v33 >= v4) {
    uint64_t v33 = v4;
  }
  if (v33 >= v9)
  {
    if (v13 != v33)
    {
      char v99 = v11;
      BOOL v34 = (uint64_t *)(v10 + 16 * v13);
      uint64_t v106 = v33;
      do
      {
        uint64_t v35 = (uint64_t *)(v10 + 16 * v13);
        uint64_t v36 = *v35;
        unint64_t v37 = v35[1];
        unint64_t v109 = v34;
        while (1)
        {
          uint64_t v38 = v13;
          uint64_t v39 = *(v34 - 2);
          unint64_t v40 = *(v34 - 1);
          sub_2504DBC4C(v36, v37);
          sub_2504DBC4C(v39, v40);
          char v41 = sub_250559F4C(v39, v40, v36, v37);
          sub_250511528(v39, v40);
          sub_250511528(v36, v37);
          if ((v41 & 1) == 0) {
            break;
          }
          uint64_t v10 = v112;
          if (!v112) {
            goto LABEL_136;
          }
          uint64_t v13 = v38;
          uint64_t v36 = *v34;
          unint64_t v37 = v34[1];
          *(_OWORD *)BOOL v34 = *((_OWORD *)v34 - 1);
          *(v34 - 1) = v37;
          *(v34 - 2) = v36;
          v34 -= 2;
          if (v38 == ++v9) {
            goto LABEL_42;
          }
        }
        uint64_t v10 = v112;
        uint64_t v13 = v38;
LABEL_42:
        ++v13;
        BOOL v34 = v109 + 2;
        uint64_t v9 = v107;
      }
      while (v13 != v106);
      uint64_t v13 = v106;
      unint64_t v11 = v99;
    }
    goto LABEL_49;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  uint64_t result = sub_2505BE5E0();
  __break(1u);
  return result;
}

uint64_t sub_2505163A4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v161 = *(void *)(v4 - 8);
  uint64_t v162 = v4;
  uint64_t v9 = MEMORY[0x270FA5388](v4, v5, v6, v7, v8);
  uint64_t v157 = (uint64_t)&v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v9, v11, v12, v13, v14);
  uint64_t v169 = (uint64_t)&v151 - v16;
  uint64_t v21 = MEMORY[0x270FA5388](v15, v17, v18, v19, v20);
  unint64_t v167 = (uint64_t *)((char *)&v151 - v22);
  MEMORY[0x270FA5388](v21, v23, v24, v25, v26);
  uint64_t v166 = (uint64_t *)((char *)&v151 - v27);
  uint64_t v28 = a1[1];
  uint64_t result = sub_2505BE760();
  if (result >= v28)
  {
    if (v28 < 0) {
      goto LABEL_139;
    }
    if (v28) {
      return sub_2505185BC(0, v28, 1, a1);
    }
    return result;
  }
  if (v28 >= 0) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = v28 + 1;
  }
  if (v28 < -1) {
    goto LABEL_147;
  }
  uint64_t v154 = result;
  if (v28 < 2)
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    unint64_t v160 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80));
    if (v28 != 1)
    {
      unint64_t v37 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v36 = (char *)MEMORY[0x263F8EE78];
LABEL_104:
      uint64_t v143 = v36;
      uint64_t v153 = v34;
      if (v37 >= 2)
      {
        uint64_t v144 = *a1;
        uint64_t v145 = v161;
        do
        {
          unint64_t v146 = v37 - 2;
          if (v37 < 2) {
            goto LABEL_134;
          }
          if (!v144) {
            goto LABEL_146;
          }
          uint64_t v147 = *(void *)&v143[16 * v146 + 32];
          uint64_t v148 = *(void *)&v143[16 * v37 + 24];
          sub_250519340(v144 + *(void *)(v145 + 72) * v147, v144 + *(void *)(v145 + 72) * *(void *)&v143[16 * v37 + 16], v144 + *(void *)(v145 + 72) * v148, v160);
          if (v2) {
            break;
          }
          if (v148 < v147) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v143 = sub_25058F1A4((uint64_t)v143);
          }
          if (v146 >= *((void *)v143 + 2)) {
            goto LABEL_136;
          }
          uint64_t v149 = &v143[16 * v146 + 32];
          *(void *)uint64_t v149 = v147;
          *((void *)v149 + 1) = v148;
          unint64_t v150 = *((void *)v143 + 2);
          if (v37 > v150) {
            goto LABEL_137;
          }
          memmove(&v143[16 * v37 + 16], &v143[16 * v37 + 32], 16 * (v150 - v37));
          *((void *)v143 + 2) = v150 - 1;
          unint64_t v37 = v150 - 1;
        }
        while (v150 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v153 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v153 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v31 = v30 >> 1;
    uint64_t v32 = sub_2505BE2F0();
    *(void *)(v32 + 16) = v31;
    uint64_t v33 = *(unsigned __int8 *)(v161 + 80);
    uint64_t v153 = v32;
    unint64_t v160 = v32 + ((v33 + 32) & ~v33);
  }
  uint64_t v35 = 0;
  uint64_t v36 = (char *)MEMORY[0x263F8EE78];
  uint64_t v159 = a1;
  while (1)
  {
    uint64_t v38 = v35;
    uint64_t v39 = v35 + 1;
    uint64_t v158 = v35;
    if (v35 + 1 >= v28)
    {
      uint64_t v52 = v35 + 1;
    }
    else
    {
      uint64_t v40 = *a1;
      uint64_t v41 = *a1 + *(void *)(v161 + 72) * v39;
      uint64_t v172 = *(void *)(v161 + 72);
      uint64_t v42 = v172;
      uint64_t v43 = v40;
      uint64_t v164 = v40;
      uint64_t v171 = v28;
      char v44 = v166;
      sub_25051B91C(v41, (uint64_t)v166, type metadata accessor for UserKeyingInfo);
      uint64_t v45 = v43 + v42 * v38;
      unint64_t v46 = v167;
      sub_25051B91C(v45, (uint64_t)v167, type metadata accessor for UserKeyingInfo);
      uint64_t v47 = *v44;
      unint64_t v48 = v44[1];
      uint64_t v50 = *v46;
      unint64_t v49 = v46[1];
      sub_2504DBC4C(*v44, v48);
      sub_2504DBC4C(v50, v49);
      LODWORD(v170) = sub_250559F4C(v50, v49, v47, v48);
      sub_250511528(v50, v49);
      sub_250511528(v47, v48);
      uint64_t v51 = (uint64_t)v46;
      uint64_t v38 = v158;
      sub_25051AF3C(v51, type metadata accessor for UserKeyingInfo);
      uint64_t v28 = v171;
      sub_25051AF3C((uint64_t)v44, type metadata accessor for UserKeyingInfo);
      uint64_t v52 = v38 + 2;
      if (v38 + 2 < v28)
      {
        uint64_t v152 = v2;
        uint64_t v155 = v36;
        uint64_t v168 = v172 * v39;
        uint64_t v53 = v164;
        uint64_t v165 = v172 * v52;
        while (1)
        {
          uint64_t v54 = v52;
          uint64_t v55 = v166;
          sub_25051B91C(v53 + v165, (uint64_t)v166, type metadata accessor for UserKeyingInfo);
          uint64_t v56 = v167;
          sub_25051B91C(v53 + v168, (uint64_t)v167, type metadata accessor for UserKeyingInfo);
          uint64_t v57 = *v55;
          unint64_t v58 = v55[1];
          uint64_t v60 = *v56;
          unint64_t v59 = v56[1];
          sub_2504DBC4C(*v55, v58);
          sub_2504DBC4C(v60, v59);
          int v61 = sub_250559F4C(v60, v59, v57, v58);
          sub_250511528(v60, v59);
          sub_250511528(v57, v58);
          sub_25051AF3C((uint64_t)v56, type metadata accessor for UserKeyingInfo);
          sub_25051AF3C((uint64_t)v55, type metadata accessor for UserKeyingInfo);
          if ((v170 ^ v61)) {
            break;
          }
          uint64_t v52 = v54 + 1;
          v53 += v172;
          uint64_t v28 = v171;
          if (v171 == v54 + 1)
          {
            uint64_t v52 = v171;
            uint64_t v36 = v155;
            uint64_t v2 = v152;
            uint64_t v38 = v158;
            goto LABEL_24;
          }
        }
        uint64_t v36 = v155;
        uint64_t v52 = v54;
        uint64_t v2 = v152;
        uint64_t v38 = v158;
        uint64_t v28 = v171;
      }
LABEL_24:
      a1 = v159;
      if (v170)
      {
        if (v52 < v38) {
          goto LABEL_140;
        }
        if (v38 < v52)
        {
          uint64_t v155 = v36;
          uint64_t v62 = 0;
          uint64_t v63 = v38;
          uint64_t v64 = v172;
          uint64_t v65 = v172 * (v52 - 1);
          uint64_t v66 = v52 * v172;
          uint64_t v67 = v63;
          uint64_t v68 = v63 * v172;
          do
          {
            if (v67 != v52 + v62 - 1)
            {
              uint64_t v70 = v2;
              uint64_t v71 = v52;
              uint64_t v72 = v164;
              if (!v164) {
                goto LABEL_145;
              }
              unint64_t v73 = v164 + v68;
              uint64_t v170 = v164 + v65;
              sub_25051C8F4(v164 + v68, v157, type metadata accessor for UserKeyingInfo);
              if (v68 < v65 || v73 >= v72 + v66)
              {
                uint64_t v69 = v170;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v69 = v170;
                if (v68 != v65) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_25051C8F4(v157, v69, type metadata accessor for UserKeyingInfo);
              uint64_t v52 = v71;
              uint64_t v2 = v70;
              uint64_t v64 = v172;
            }
            ++v67;
            --v62;
            v65 -= v64;
            v66 -= v64;
            v68 += v64;
          }
          while (v67 < v52 + v62);
          uint64_t v38 = v158;
          a1 = v159;
          uint64_t v36 = v155;
          uint64_t v28 = v171;
        }
      }
    }
    if (v52 >= v28) {
      goto LABEL_56;
    }
    if (__OFSUB__(v52, v38)) {
      goto LABEL_138;
    }
    if (v52 - v38 >= v154) {
      goto LABEL_56;
    }
    if (__OFADD__(v38, v154)) {
      goto LABEL_141;
    }
    uint64_t v74 = v38 + v154 >= v28 ? v28 : v38 + v154;
    if (v74 < v38) {
      break;
    }
    if (v52 != v74)
    {
      uint64_t v155 = v36;
      uint64_t v156 = v74;
      uint64_t v152 = v2;
      uint64_t v75 = *(void *)(v161 + 72);
      uint64_t v76 = v75 * (v52 - 1);
      uint64_t v163 = v75;
      uint64_t v77 = v52 * v75;
      do
      {
        uint64_t v79 = 0;
        uint64_t v168 = v52;
        uint64_t v164 = v77;
        uint64_t v165 = v76;
        while (1)
        {
          uint64_t v80 = *a1;
          uint64_t v170 = v77 + v79;
          uint64_t v171 = v38;
          uint64_t v81 = v166;
          sub_25051B91C(v77 + v79 + v80, (uint64_t)v166, type metadata accessor for UserKeyingInfo);
          uint64_t v82 = v76 + v79 + v80;
          uint64_t v83 = v167;
          sub_25051B91C(v82, (uint64_t)v167, type metadata accessor for UserKeyingInfo);
          uint64_t v84 = *v81;
          unint64_t v85 = v81[1];
          uint64_t v86 = *v83;
          unint64_t v87 = v83[1];
          sub_2504DBC4C(*v81, v85);
          sub_2504DBC4C(v86, v87);
          LODWORD(v172) = sub_250559F4C(v86, v87, v84, v85);
          sub_250511528(v86, v87);
          sub_250511528(v84, v85);
          sub_25051AF3C((uint64_t)v83, type metadata accessor for UserKeyingInfo);
          sub_25051AF3C((uint64_t)v81, type metadata accessor for UserKeyingInfo);
          if ((v172 & 1) == 0) {
            break;
          }
          uint64_t v88 = *a1;
          if (!*a1) {
            goto LABEL_143;
          }
          uint64_t v77 = v164;
          uint64_t v76 = v165;
          uint64_t v89 = v88 + v165 + v79;
          sub_25051C8F4(v88 + v164 + v79, v169, type metadata accessor for UserKeyingInfo);
          swift_arrayInitWithTakeFrontToBack();
          sub_25051C8F4(v169, v89, type metadata accessor for UserKeyingInfo);
          v79 -= v163;
          uint64_t v38 = v171 + 1;
          uint64_t v78 = v168;
          if (v168 == v171 + 1) {
            goto LABEL_49;
          }
        }
        uint64_t v78 = v168;
        uint64_t v77 = v164;
        uint64_t v76 = v165;
LABEL_49:
        uint64_t v52 = v78 + 1;
        v76 += v163;
        v77 += v163;
        uint64_t v38 = v158;
      }
      while (v52 != v156);
      uint64_t v52 = v156;
      uint64_t v2 = v152;
      uint64_t v36 = v155;
    }
LABEL_56:
    if (v52 < v38) {
      goto LABEL_133;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v168 = v52;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v36 = sub_25058EBC8(0, *((void *)v36 + 2) + 1, 1, v36);
    }
    unint64_t v92 = *((void *)v36 + 2);
    unint64_t v91 = *((void *)v36 + 3);
    unint64_t v37 = v92 + 1;
    if (v92 >= v91 >> 1) {
      uint64_t v36 = sub_25058EBC8((char *)(v91 > 1), v92 + 1, 1, v36);
    }
    *((void *)v36 + 2) = v37;
    uint64_t v93 = v36 + 32;
    unint64_t v94 = &v36[16 * v92 + 32];
    uint64_t v95 = v168;
    *(void *)unint64_t v94 = v158;
    *((void *)v94 + 1) = v95;
    if (v92)
    {
      while (1)
      {
        unint64_t v96 = v37 - 1;
        if (v37 >= 4)
        {
          __int16 v101 = &v93[16 * v37];
          uint64_t v102 = *((void *)v101 - 8);
          uint64_t v103 = *((void *)v101 - 7);
          BOOL v107 = __OFSUB__(v103, v102);
          uint64_t v104 = v103 - v102;
          if (v107) {
            goto LABEL_122;
          }
          uint64_t v106 = *((void *)v101 - 6);
          uint64_t v105 = *((void *)v101 - 5);
          BOOL v107 = __OFSUB__(v105, v106);
          uint64_t v99 = v105 - v106;
          char v100 = v107;
          if (v107) {
            goto LABEL_123;
          }
          unint64_t v108 = v37 - 2;
          unint64_t v109 = &v93[16 * v37 - 32];
          uint64_t v111 = *(void *)v109;
          uint64_t v110 = *((void *)v109 + 1);
          BOOL v107 = __OFSUB__(v110, v111);
          uint64_t v112 = v110 - v111;
          if (v107) {
            goto LABEL_125;
          }
          BOOL v107 = __OFADD__(v99, v112);
          uint64_t v113 = v99 + v112;
          if (v107) {
            goto LABEL_128;
          }
          if (v113 >= v104)
          {
            uint64_t v131 = &v93[16 * v96];
            uint64_t v133 = *(void *)v131;
            uint64_t v132 = *((void *)v131 + 1);
            BOOL v107 = __OFSUB__(v132, v133);
            uint64_t v134 = v132 - v133;
            if (v107) {
              goto LABEL_132;
            }
            BOOL v124 = v99 < v134;
            goto LABEL_93;
          }
        }
        else
        {
          if (v37 != 3)
          {
            uint64_t v125 = *((void *)v36 + 4);
            uint64_t v126 = *((void *)v36 + 5);
            BOOL v107 = __OFSUB__(v126, v125);
            uint64_t v118 = v126 - v125;
            char v119 = v107;
            goto LABEL_87;
          }
          uint64_t v98 = *((void *)v36 + 4);
          uint64_t v97 = *((void *)v36 + 5);
          BOOL v107 = __OFSUB__(v97, v98);
          uint64_t v99 = v97 - v98;
          char v100 = v107;
        }
        if (v100) {
          goto LABEL_124;
        }
        unint64_t v108 = v37 - 2;
        uint64_t v114 = &v93[16 * v37 - 32];
        uint64_t v116 = *(void *)v114;
        uint64_t v115 = *((void *)v114 + 1);
        BOOL v117 = __OFSUB__(v115, v116);
        uint64_t v118 = v115 - v116;
        char v119 = v117;
        if (v117) {
          goto LABEL_127;
        }
        uint64_t v120 = &v93[16 * v96];
        uint64_t v122 = *(void *)v120;
        uint64_t v121 = *((void *)v120 + 1);
        BOOL v107 = __OFSUB__(v121, v122);
        uint64_t v123 = v121 - v122;
        if (v107) {
          goto LABEL_130;
        }
        if (__OFADD__(v118, v123)) {
          goto LABEL_131;
        }
        if (v118 + v123 >= v99)
        {
          BOOL v124 = v99 < v123;
LABEL_93:
          if (v124) {
            unint64_t v96 = v108;
          }
          goto LABEL_95;
        }
LABEL_87:
        if (v119) {
          goto LABEL_126;
        }
        uint64_t v127 = &v93[16 * v96];
        uint64_t v129 = *(void *)v127;
        uint64_t v128 = *((void *)v127 + 1);
        BOOL v107 = __OFSUB__(v128, v129);
        uint64_t v130 = v128 - v129;
        if (v107) {
          goto LABEL_129;
        }
        if (v130 < v118) {
          goto LABEL_15;
        }
LABEL_95:
        unint64_t v135 = v96 - 1;
        if (v96 - 1 >= v37)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        uint64_t v136 = *a1;
        if (!*a1) {
          goto LABEL_144;
        }
        uint64_t v137 = v36;
        uint64_t v138 = &v93[16 * v135];
        uint64_t v139 = *(void *)v138;
        uint64_t v140 = &v93[16 * v96];
        uint64_t v141 = *((void *)v140 + 1);
        sub_250519340(v136 + *(void *)(v161 + 72) * *(void *)v138, v136 + *(void *)(v161 + 72) * *(void *)v140, v136 + *(void *)(v161 + 72) * v141, v160);
        if (v2) {
          goto LABEL_115;
        }
        if (v141 < v139) {
          goto LABEL_119;
        }
        if (v96 > *((void *)v137 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v138 = v139;
        *(void *)&v93[16 * v135 + 8] = v141;
        unint64_t v142 = *((void *)v137 + 2);
        if (v96 >= v142) {
          goto LABEL_121;
        }
        uint64_t v36 = v137;
        unint64_t v37 = v142 - 1;
        memmove(&v93[16 * v96], v140 + 16, 16 * (v142 - 1 - v96));
        *((void *)v137 + 2) = v142 - 1;
        a1 = v159;
        if (v142 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v37 = 1;
LABEL_15:
    uint64_t v28 = a1[1];
    uint64_t v35 = v168;
    if (v168 >= v28)
    {
      uint64_t v34 = v153;
      goto LABEL_104;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  uint64_t result = sub_2505BE5E0();
  __break(1u);
  return result;
}

uint64_t sub_250516F28(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5ED0);
  uint64_t v9 = MEMORY[0x270FA5388](v4 - 8, v5, v6, v7, v8);
  uint64_t v266 = (uint64_t)&v254 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v9, v11, v12, v13, v14);
  uint64_t v269 = (uint64_t)&v254 - v16;
  uint64_t v21 = MEMORY[0x270FA5388](v15, v17, v18, v19, v20);
  uint64_t v271 = (uint64_t)&v254 - v22;
  MEMORY[0x270FA5388](v21, v23, v24, v25, v26);
  uint64_t v275 = (uint64_t)&v254 - v27;
  unint64_t v28 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v33 = MEMORY[0x270FA5388](v28, v29, v30, v31, v32);
  uint64_t v261 = (uint64_t)&v254 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v33, v35, v36, v37, v38);
  uint64_t v283 = (uint64_t)&v254 - v40;
  uint64_t v45 = MEMORY[0x270FA5388](v39, v41, v42, v43, v44);
  uint64_t v47 = (char *)&v254 - v46;
  MEMORY[0x270FA5388](v45, v48, v49, v50, v51);
  uint64_t v285 = (uint64_t)&v254 - v52;
  uint64_t v287 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v290 = *(void *)(v287 - 8);
  uint64_t v57 = MEMORY[0x270FA5388](v287, v53, v54, v55, v56);
  uint64_t v278 = (uint64_t)&v254 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x270FA5388](v57, v59, v60, v61, v62);
  uint64_t v279 = (uint64_t)&v254 - v64;
  uint64_t v69 = MEMORY[0x270FA5388](v63, v65, v66, v67, v68);
  uint64_t v282 = (uint64_t)&v254 - v70;
  uint64_t v75 = MEMORY[0x270FA5388](v69, v71, v72, v73, v74);
  uint64_t v281 = (uint64_t)&v254 - v76;
  uint64_t v81 = MEMORY[0x270FA5388](v75, v77, v78, v79, v80);
  uint64_t v284 = (char *)&v254 - v82;
  uint64_t v87 = MEMORY[0x270FA5388](v81, v83, v84, v85, v86);
  uint64_t v89 = (char *)&v254 - v88;
  uint64_t v94 = MEMORY[0x270FA5388](v87, v90, v91, v92, v93);
  unint64_t v96 = (char *)&v254 - v95;
  uint64_t v101 = MEMORY[0x270FA5388](v94, v97, v98, v99, v100);
  uint64_t v103 = (uint64_t)&v254 - v102;
  MEMORY[0x270FA5388](v101, v104, v105, v106, v107);
  uint64_t v109 = (uint64_t)&v254 - v108;
  unint64_t v291 = a1;
  uint64_t v110 = a1[1];
  uint64_t result = sub_2505BE760();
  uint64_t v265 = result;
  if (result >= v110)
  {
    if ((v110 & 0x8000000000000000) == 0)
    {
      if (v110) {
        return sub_2505188BC(0, v110, 1, v291);
      }
      return result;
    }
    goto LABEL_162;
  }
  if (v110 >= 0) {
    uint64_t v112 = v110;
  }
  else {
    uint64_t v112 = v110 + 1;
  }
  if (v110 < -1) {
    goto LABEL_172;
  }
  unint64_t v280 = v28;
  uint64_t v268 = v89;
  uint64_t v267 = v96;
  if (v110 < 2)
  {
    unint64_t v288 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v290 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v290 + 80));
    uint64_t v260 = MEMORY[0x263F8EE78];
    if (v110 == 1)
    {
      uint64_t v257 = v109;
      uint64_t v258 = v103;
      goto LABEL_13;
    }
    unint64_t v159 = *(void *)(MEMORY[0x263F8EE78] + 16);
    uint64_t v109 = MEMORY[0x263F8EE78];
LABEL_113:
    if (v159 < 2)
    {
LABEL_124:
      swift_bridgeObjectRelease();
      *(void *)(v260 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v237 = *v291;
    while (1)
    {
      unint64_t v238 = v159 - 2;
      if (v159 < 2) {
        break;
      }
      if (!v237) {
        goto LABEL_171;
      }
      unint64_t v28 = *(void *)(v109 + 32 + 16 * v238);
      uint64_t v103 = *(void *)(v109 + 32 + 16 * (v159 - 1) + 8);
      sub_2505198FC(v237 + *(void *)(v290 + 72) * v28, v237 + *(void *)(v290 + 72) * *(void *)(v109 + 32 + 16 * (v159 - 1)), v237 + *(void *)(v290 + 72) * v103, v288);
      if (v2) {
        goto LABEL_138;
      }
      if (v103 < (uint64_t)v28) {
        goto LABEL_158;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v109 = (uint64_t)sub_25058F1A4(v109);
      }
      if (v238 >= *(void *)(v109 + 16)) {
        goto LABEL_159;
      }
      unint64_t v239 = (unint64_t *)(v109 + 32 + 16 * v238);
      *unint64_t v239 = v28;
      v239[1] = v103;
      unint64_t v240 = *(void *)(v109 + 16);
      if (v159 > v240) {
        goto LABEL_160;
      }
      unint64_t v28 = v240 - 1;
      memmove((void *)(v109 + 32 + 16 * (v159 - 1)), (const void *)(v109 + 32 + 16 * v159), 16 * (v240 - v159));
      *(void *)(v109 + 16) = v240 - 1;
      unint64_t v159 = v240 - 1;
      if (v240 <= 2) {
        goto LABEL_124;
      }
    }
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  uint64_t v257 = v109;
  uint64_t v258 = v103;
  uint64_t v113 = v112 >> 1;
  uint64_t v114 = sub_2505BE2F0();
  *(void *)(v114 + 16) = v113;
  uint64_t v115 = *(unsigned __int8 *)(v290 + 80);
  uint64_t v260 = v114;
  unint64_t v288 = v114 + ((v115 + 32) & ~v115);
LABEL_13:
  uint64_t v116 = 0;
  uint64_t v109 = MEMORY[0x263F8EE78];
  uint64_t v259 = v47;
  uint64_t v117 = v265;
  while (1)
  {
    uint64_t v118 = v116;
    uint64_t v119 = v116 + 1;
    uint64_t v270 = v109;
    if (v116 + 1 >= v110)
    {
      uint64_t v150 = v116 + 1;
      goto LABEL_39;
    }
    uint64_t v120 = *v291;
    unint64_t v121 = *(void *)(v290 + 72);
    uint64_t v103 = v116;
    uint64_t v122 = v257;
    unint64_t v28 = (unint64_t)&qword_269AB5E90;
    sub_2504DAEFC(*v291 + v121 * v119, v257, &qword_269AB5E90);
    uint64_t v263 = v120;
    unint64_t v286 = v121;
    uint64_t v123 = v120 + v121 * v103;
    uint64_t v124 = v258;
    sub_2504DAEFC(v123, v258, &qword_269AB5E90);
    LODWORD(v274) = sub_250507A90(v122, v124);
    if (v2)
    {
      sub_2504DAF60(v124, &qword_269AB5E90);
      sub_2504DAF60(v122, &qword_269AB5E90);
LABEL_138:
      swift_bridgeObjectRelease();
      uint64_t v109 = v260;
      goto LABEL_139;
    }
    sub_2504DAF60(v124, &qword_269AB5E90);
    sub_2504DAF60(v122, &qword_269AB5E90);
    uint64_t v118 = v103;
    uint64_t v125 = (uint64_t)v259;
    if (v103 + 2 >= v110)
    {
      uint64_t v150 = v103 + 2;
      goto LABEL_25;
    }
    uint64_t v256 = v103;
    uint64_t v255 = 0;
    unint64_t v272 = v286 * v119;
    unint64_t v28 = v263;
    uint64_t v289 = v103 + 2;
    unint64_t v264 = v286 * (v103 + 2);
    uint64_t v126 = (uint64_t)v268;
    uint64_t v127 = (uint64_t)v267;
    uint64_t v273 = v110;
    while (1)
    {
      sub_2504DAEFC(v28 + v264, v127, &qword_269AB5E90);
      unint64_t v276 = v28;
      sub_2504DAEFC(v28 + v272, v126, &qword_269AB5E90);
      uint64_t v128 = v287;
      uint64_t v129 = *(int *)(v287 + 48);
      uint64_t v130 = v284;
      uint64_t v131 = (uint64_t)&v284[v129];
      sub_25051B91C(v127 + v129, (uint64_t)&v284[v129], type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v132 = v285;
      sub_25051C8F4(v131, v285, type metadata accessor for GroupMembership.MemberProperties);
      uint64_t v133 = *(int *)(v128 + 48);
      uint64_t v134 = (uint64_t)&v130[v133];
      sub_25051B91C(v126 + v133, (uint64_t)&v130[v133], type metadata accessor for GroupMembership.MemberProperties);
      sub_25051C8F4(v134, v125, type metadata accessor for GroupMembership.MemberProperties);
      unint64_t v135 = v280;
      uint64_t v136 = v275;
      sub_2504DAEFC(v132 + *(int *)(v280 + 28), v275, &qword_269AB5ED0);
      uint64_t v137 = sub_2505BE0B0();
      uint64_t v138 = *(void *)(v137 - 8);
      uint64_t v139 = v125;
      uint64_t v140 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48);
      if (v140(v136, 1, v137) == 1) {
        goto LABEL_126;
      }
      uint64_t v141 = sub_2505BDF10();
      uint64_t v277 = v142;
      uint64_t v143 = *(void (**)(uint64_t, uint64_t))(v138 + 8);
      v143(v136, v137);
      uint64_t v136 = v271;
      sub_2504DAEFC(v139 + *(int *)(v135 + 28), v271, &qword_269AB5ED0);
      if (v140(v136, 1, v137) == 1)
      {
        sub_250511528(v141, v277);
LABEL_126:
        sub_2504DAF60(v136, &qword_269AB5ED0);
        uint64_t v109 = v260;
        unint64_t v28 = (unint64_t)v268;
        uint64_t v103 = (uint64_t)v267;
        if (qword_269AB5418 != -1) {
          goto LABEL_167;
        }
        goto LABEL_127;
      }
      uint64_t v144 = v136;
      uint64_t v145 = sub_2505BDF10();
      unint64_t v147 = v146;
      v143(v144, v137);
      uint64_t v148 = v141;
      uint64_t v149 = v141;
      unint64_t v28 = v277;
      uint64_t v103 = sub_250559F4C(v145, v147, v149, v277);
      sub_25051AF3C(v139, type metadata accessor for GroupMembership.MemberProperties);
      sub_25051AF3C(v285, type metadata accessor for GroupMembership.MemberProperties);
      sub_250511528(v145, v147);
      sub_250511528(v148, v28);
      uint64_t v126 = (uint64_t)v268;
      sub_2504DAF60((uint64_t)v268, &qword_269AB5E90);
      uint64_t v127 = (uint64_t)v267;
      sub_2504DAF60((uint64_t)v267, &qword_269AB5E90);
      if ((v274 ^ v103)) {
        break;
      }
      uint64_t v125 = v139;
      unint64_t v28 = v276 + v286;
      ++v289;
      uint64_t v110 = v273;
      if (v273 == v289)
      {
        uint64_t v150 = v273;
        uint64_t v2 = v255;
        uint64_t v109 = v270;
        uint64_t v118 = v256;
        goto LABEL_25;
      }
    }
    uint64_t v2 = v255;
    uint64_t v109 = v270;
    uint64_t v150 = v289;
    uint64_t v118 = v256;
    uint64_t v110 = v273;
LABEL_25:
    uint64_t v117 = v265;
    if (v274)
    {
      if (v150 >= v118)
      {
        if (v118 < v150)
        {
          uint64_t v273 = v110;
          uint64_t v255 = v2;
          unint64_t v28 = 0;
          uint64_t v103 = v286 * (v150 - 1);
          unint64_t v151 = v150 * v286;
          int64_t v152 = v118;
          uint64_t v256 = v118;
          int64_t v153 = v118 * v286;
          do
          {
            if (v152 != v150 + v28 - 1)
            {
              uint64_t v154 = v263;
              if (!v263) {
                goto LABEL_170;
              }
              unint64_t v155 = v263 + v153;
              sub_2505283F0(v263 + v153, v278, &qword_269AB5E90);
              if (v153 < v103 || v155 >= v154 + v151)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v153 != v103)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              sub_2505283F0(v278, v154 + v103, &qword_269AB5E90);
            }
            ++v152;
            --v28;
            v103 -= v286;
            v151 -= v286;
            v153 += v286;
          }
          while (v152 < (uint64_t)(v150 + v28));
          uint64_t v2 = v255;
          uint64_t v109 = v270;
          uint64_t v117 = v265;
          uint64_t v118 = v256;
          uint64_t v110 = v273;
        }
        goto LABEL_39;
      }
LABEL_166:
      __break(1u);
LABEL_167:
      swift_once();
LABEL_127:
      uint64_t v241 = sub_2505BDC40();
      __swift_project_value_buffer(v241, (uint64_t)qword_269AC3188);
      os_log_type_t v242 = sub_2505BE3D0();
      unint64_t v243 = sub_2505BDC20();
      os_log_type_t v244 = v242;
      if (os_log_type_enabled(v243, v242))
      {
        uint64_t v245 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v245 = 0;
        _os_log_impl(&dword_2504D2000, v243, v244, "missing member key information", v245, 2u);
        MEMORY[0x25337FF10](v245, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v246 = 345;
      *(_OWORD *)(v246 + 8) = xmmword_2505C0360;
      *(void *)(v246 + 24) = 0x80000002505C93B0;
      *(void *)(v246 + 32) = 0xD000000000000052;
      *(void *)(v246 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_25051AF3C((uint64_t)v259, type metadata accessor for GroupMembership.MemberProperties);
      sub_25051AF3C(v285, type metadata accessor for GroupMembership.MemberProperties);
      sub_2504DAF60(v28, &qword_269AB5E90);
      uint64_t v247 = v103;
      goto LABEL_136;
    }
LABEL_39:
    if (v150 >= v110) {
      goto LABEL_48;
    }
    if (__OFSUB__(v150, v118)) {
      goto LABEL_163;
    }
    if (v150 - v118 >= v117)
    {
LABEL_48:
      if (v150 < v118) {
        goto LABEL_161;
      }
      goto LABEL_49;
    }
    if (__OFADD__(v118, v117)) {
      goto LABEL_164;
    }
    if (v118 + v117 >= v110) {
      uint64_t v156 = v110;
    }
    else {
      uint64_t v156 = v118 + v117;
    }
    if (v156 < v118) {
      goto LABEL_165;
    }
    if (v150 == v156) {
      goto LABEL_48;
    }
    uint64_t v256 = v118;
    uint64_t v255 = v2;
    uint64_t v205 = *(void *)(v290 + 72);
    unint64_t v28 = v205 * (v150 - 1);
    uint64_t v289 = v150;
    uint64_t v262 = v205;
    uint64_t v103 = v150 * v205;
    uint64_t v206 = v261;
    uint64_t v254 = v156;
    do
    {
      unint64_t v207 = 0;
      uint64_t v208 = v256;
      unint64_t v264 = v28;
      uint64_t v263 = v103;
      while (1)
      {
        uint64_t v209 = *v291;
        uint64_t v273 = v103 + v207;
        uint64_t v274 = v208;
        uint64_t v210 = v281;
        sub_2504DAEFC(v103 + v207 + v209, v281, &qword_269AB5E90);
        unint64_t v276 = v207;
        unint64_t v272 = v28 + v207;
        uint64_t v211 = v282;
        sub_2504DAEFC(v28 + v207 + v209, v282, &qword_269AB5E90);
        uint64_t v212 = v287;
        uint64_t v213 = *(int *)(v287 + 48);
        uint64_t v214 = v284;
        uint64_t v215 = (uint64_t)&v284[v213];
        sub_25051B91C(v210 + v213, (uint64_t)&v284[v213], type metadata accessor for GroupMembership.MemberProperties);
        uint64_t v216 = v283;
        sub_25051C8F4(v215, v283, type metadata accessor for GroupMembership.MemberProperties);
        uint64_t v217 = *(int *)(v212 + 48);
        uint64_t v218 = (uint64_t)&v214[v217];
        sub_25051B91C(v211 + v217, (uint64_t)&v214[v217], type metadata accessor for GroupMembership.MemberProperties);
        sub_25051C8F4(v218, v206, type metadata accessor for GroupMembership.MemberProperties);
        unint64_t v219 = v280;
        uint64_t v220 = v269;
        sub_2504DAEFC(v216 + *(int *)(v280 + 28), v269, &qword_269AB5ED0);
        uint64_t v221 = sub_2505BE0B0();
        uint64_t v222 = *(void *)(v221 - 8);
        uint64_t v223 = v206;
        uint64_t v224 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v222 + 48);
        if (v224(v220, 1, v221) == 1) {
          goto LABEL_131;
        }
        uint64_t v277 = sub_2505BDF10();
        unint64_t v286 = v225;
        unint64_t v226 = *(void (**)(uint64_t, uint64_t))(v222 + 8);
        v226(v220, v221);
        uint64_t v220 = v266;
        sub_2504DAEFC(v223 + *(int *)(v219 + 28), v266, &qword_269AB5ED0);
        if (v224(v220, 1, v221) == 1)
        {
          sub_250511528(v277, v286);
LABEL_131:
          uint64_t v109 = v260;
          sub_2504DAF60(v220, &qword_269AB5ED0);
          if (qword_269AB5418 != -1) {
            swift_once();
          }
          uint64_t v248 = sub_2505BDC40();
          __swift_project_value_buffer(v248, (uint64_t)qword_269AC3188);
          os_log_type_t v249 = sub_2505BE3D0();
          uint64_t v250 = sub_2505BDC20();
          os_log_type_t v251 = v249;
          if (os_log_type_enabled(v250, v249))
          {
            uint64_t v252 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v252 = 0;
            _os_log_impl(&dword_2504D2000, v250, v251, "missing member key information", v252, 2u);
            MEMORY[0x25337FF10](v252, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v253 = 345;
          *(_OWORD *)(v253 + 8) = xmmword_2505C0360;
          *(void *)(v253 + 24) = 0x80000002505C93B0;
          *(void *)(v253 + 32) = 0xD000000000000052;
          *(void *)(v253 + 40) = 0x80000002505C8CB0;
          swift_willThrow();
          sub_25051AF3C(v261, type metadata accessor for GroupMembership.MemberProperties);
          sub_25051AF3C(v283, type metadata accessor for GroupMembership.MemberProperties);
          sub_2504DAF60(v282, &qword_269AB5E90);
          uint64_t v247 = v281;
LABEL_136:
          sub_2504DAF60(v247, &qword_269AB5E90);
          swift_bridgeObjectRelease();
LABEL_139:
          *(void *)(v109 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        uint64_t v227 = v220;
        uint64_t v228 = sub_2505BDF10();
        unint64_t v230 = v229;
        v226(v227, v221);
        uint64_t v231 = v277;
        unint64_t v232 = v286;
        char v233 = sub_250559F4C(v228, v230, v277, v286);
        sub_25051AF3C(v223, type metadata accessor for GroupMembership.MemberProperties);
        sub_25051AF3C(v283, type metadata accessor for GroupMembership.MemberProperties);
        sub_250511528(v228, v230);
        sub_250511528(v231, v232);
        sub_2504DAF60(v282, &qword_269AB5E90);
        sub_2504DAF60(v281, &qword_269AB5E90);
        uint64_t v206 = v223;
        if ((v233 & 1) == 0) {
          break;
        }
        uint64_t v234 = *v291;
        if (!*v291) {
          goto LABEL_169;
        }
        uint64_t v103 = v263;
        unint64_t v235 = v276;
        unint64_t v28 = v264;
        uint64_t v236 = v234 + v264 + v276;
        sub_2505283F0(v234 + v263 + v276, v279, &qword_269AB5E90);
        uint64_t v109 = v270;
        swift_arrayInitWithTakeFrontToBack();
        sub_2505283F0(v279, v236, &qword_269AB5E90);
        unint64_t v207 = v235 - v262;
        uint64_t v208 = v274 + 1;
        if (v289 == v274 + 1) {
          goto LABEL_107;
        }
      }
      uint64_t v109 = v270;
      unint64_t v28 = v264;
      uint64_t v103 = v263;
LABEL_107:
      v28 += v262;
      v103 += v262;
      ++v289;
    }
    while (v289 != v254);
    uint64_t v150 = v254;
    uint64_t v2 = v255;
    uint64_t v118 = v256;
    if (v254 < v256) {
      goto LABEL_161;
    }
LABEL_49:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v109 = (uint64_t)sub_25058EBC8(0, *(void *)(v109 + 16) + 1, 1, (char *)v109);
    }
    unint64_t v158 = *(void *)(v109 + 16);
    unint64_t v157 = *(void *)(v109 + 24);
    unint64_t v159 = v158 + 1;
    uint64_t v289 = v150;
    if (v158 >= v157 >> 1) {
      uint64_t v109 = (uint64_t)sub_25058EBC8((char *)(v157 > 1), v158 + 1, 1, (char *)v109);
    }
    *(void *)(v109 + 16) = v159;
    uint64_t v160 = v109 + 32;
    uint64_t v161 = (uint64_t *)(v109 + 32 + 16 * v158);
    uint64_t v162 = v289;
    *uint64_t v161 = v118;
    v161[1] = v162;
    if (v158) {
      break;
    }
    unint64_t v159 = 1;
LABEL_96:
    uint64_t v110 = v291[1];
    uint64_t v116 = v289;
    uint64_t v117 = v265;
    if (v289 >= v110) {
      goto LABEL_113;
    }
  }
  while (2)
  {
    unint64_t v163 = v159 - 1;
    if (v159 >= 4)
    {
      unint64_t v168 = v160 + 16 * v159;
      uint64_t v169 = *(void *)(v168 - 64);
      uint64_t v170 = *(void *)(v168 - 56);
      BOOL v174 = __OFSUB__(v170, v169);
      uint64_t v171 = v170 - v169;
      if (v174) {
        goto LABEL_146;
      }
      uint64_t v173 = *(void *)(v168 - 48);
      uint64_t v172 = *(void *)(v168 - 40);
      BOOL v174 = __OFSUB__(v172, v173);
      uint64_t v166 = v172 - v173;
      char v167 = v174;
      if (v174) {
        goto LABEL_147;
      }
      unint64_t v175 = v159 - 2;
      uint64_t v176 = (uint64_t *)(v160 + 16 * (v159 - 2));
      uint64_t v178 = *v176;
      uint64_t v177 = v176[1];
      BOOL v174 = __OFSUB__(v177, v178);
      uint64_t v179 = v177 - v178;
      if (v174) {
        goto LABEL_149;
      }
      BOOL v174 = __OFADD__(v166, v179);
      uint64_t v180 = v166 + v179;
      if (v174) {
        goto LABEL_152;
      }
      if (v180 >= v171)
      {
        uint64_t v198 = (uint64_t *)(v160 + 16 * v163);
        uint64_t v200 = *v198;
        uint64_t v199 = v198[1];
        BOOL v174 = __OFSUB__(v199, v200);
        uint64_t v201 = v199 - v200;
        if (v174) {
          goto LABEL_156;
        }
        BOOL v191 = v166 < v201;
      }
      else
      {
LABEL_67:
        if (v167) {
          goto LABEL_148;
        }
        unint64_t v175 = v159 - 2;
        uint64_t v181 = (uint64_t *)(v160 + 16 * (v159 - 2));
        uint64_t v183 = *v181;
        uint64_t v182 = v181[1];
        BOOL v184 = __OFSUB__(v182, v183);
        uint64_t v185 = v182 - v183;
        char v186 = v184;
        if (v184) {
          goto LABEL_151;
        }
        uint64_t v187 = (uint64_t *)(v160 + 16 * v163);
        uint64_t v189 = *v187;
        uint64_t v188 = v187[1];
        BOOL v174 = __OFSUB__(v188, v189);
        uint64_t v190 = v188 - v189;
        if (v174) {
          goto LABEL_154;
        }
        if (__OFADD__(v185, v190)) {
          goto LABEL_155;
        }
        if (v185 + v190 < v166) {
          goto LABEL_79;
        }
        BOOL v191 = v166 < v190;
      }
      if (v191) {
        unint64_t v163 = v175;
      }
    }
    else
    {
      if (v159 == 3)
      {
        uint64_t v165 = *(void *)(v109 + 32);
        uint64_t v164 = *(void *)(v109 + 40);
        BOOL v174 = __OFSUB__(v164, v165);
        uint64_t v166 = v164 - v165;
        char v167 = v174;
        goto LABEL_67;
      }
      uint64_t v192 = *(void *)(v109 + 32);
      uint64_t v193 = *(void *)(v109 + 40);
      BOOL v174 = __OFSUB__(v193, v192);
      uint64_t v185 = v193 - v192;
      char v186 = v174;
LABEL_79:
      if (v186) {
        goto LABEL_150;
      }
      int v194 = (uint64_t *)(v160 + 16 * v163);
      uint64_t v196 = *v194;
      uint64_t v195 = v194[1];
      BOOL v174 = __OFSUB__(v195, v196);
      uint64_t v197 = v195 - v196;
      if (v174) {
        goto LABEL_153;
      }
      if (v197 < v185) {
        goto LABEL_96;
      }
    }
    unint64_t v28 = v163 - 1;
    if (v163 - 1 >= v159)
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    if (*v291)
    {
      uint64_t v202 = v109;
      uint64_t v203 = (uint64_t *)(v160 + 16 * v28);
      uint64_t v103 = *v203;
      uint64_t v204 = (void *)(v160 + 16 * v163);
      uint64_t v109 = v204[1];
      sub_2505198FC(*v291 + *(void *)(v290 + 72) * *v203, *v291 + *(void *)(v290 + 72) * *v204, *v291 + *(void *)(v290 + 72) * v109, v288);
      if (v2) {
        goto LABEL_138;
      }
      if (v109 < v103) {
        goto LABEL_143;
      }
      if (v163 > *(void *)(v202 + 16)) {
        goto LABEL_144;
      }
      *uint64_t v203 = v103;
      *(void *)(v160 + 16 * v28 + 8) = v109;
      unint64_t v28 = *(void *)(v202 + 16);
      if (v163 >= v28) {
        goto LABEL_145;
      }
      uint64_t v109 = v202;
      unint64_t v159 = v28 - 1;
      memmove((void *)(v160 + 16 * v163), v204 + 2, 16 * (v28 - 1 - v163));
      *(void *)(v202 + 16) = v28 - 1;
      if (v28 <= 2) {
        goto LABEL_96;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  uint64_t result = sub_2505BE5E0();
  __break(1u);
  return result;
}

uint64_t sub_2505184A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v16 = *a4;
    uint64_t v5 = (uint64_t *)(*a4 + 16 * a3);
LABEL_5:
    uint64_t v6 = (uint64_t *)(v16 + 16 * v4);
    uint64_t v7 = *v6;
    unint64_t v8 = v6[1];
    uint64_t v9 = v14;
    uint64_t v15 = v5;
    while (1)
    {
      uint64_t v10 = *(v5 - 2);
      unint64_t v11 = *(v5 - 1);
      sub_2504DBC4C(v7, v8);
      sub_2504DBC4C(v10, v11);
      char v12 = sub_250559F4C(v10, v11, v7, v8);
      sub_250511528(v10, v11);
      uint64_t result = sub_250511528(v7, v8);
      if ((v12 & 1) == 0)
      {
LABEL_4:
        ++v4;
        uint64_t v5 = v15 + 2;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v16) {
        break;
      }
      uint64_t v7 = *v5;
      unint64_t v8 = v5[1];
      *(_OWORD *)uint64_t v5 = *((_OWORD *)v5 - 1);
      *(v5 - 1) = v8;
      *(v5 - 2) = v7;
      v5 -= 2;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2505185BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = a1;
  uint64_t v48 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v11 = MEMORY[0x270FA5388](v48, v7, v8, v9, v10);
  uint64_t v56 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v11, v13, v14, v15, v16);
  uint64_t v51 = (uint64_t *)((char *)&v45 - v18);
  uint64_t result = MEMORY[0x270FA5388](v17, v19, v20, v21, v22);
  uint64_t v50 = (uint64_t *)((char *)&v45 - v25);
  uint64_t v55 = a3;
  uint64_t v46 = a2;
  if (a3 != a2)
  {
    uint64_t v26 = *(void *)(v24 + 72);
    uint64_t v27 = v26 * (v55 - 1);
    uint64_t v52 = v26;
    uint64_t v28 = v26 * v55;
    uint64_t v49 = a4;
LABEL_5:
    uint64_t v29 = 0;
    uint64_t v30 = v47;
    uint64_t v53 = v28;
    uint64_t v54 = v27;
    while (1)
    {
      uint64_t v31 = *a4;
      uint64_t v57 = v28 + v29;
      uint64_t v32 = v28 + v29 + v31;
      uint64_t v33 = v50;
      sub_25051B91C(v32, (uint64_t)v50, type metadata accessor for UserKeyingInfo);
      uint64_t v34 = v27 + v29 + v31;
      uint64_t v35 = v51;
      sub_25051B91C(v34, (uint64_t)v51, type metadata accessor for UserKeyingInfo);
      uint64_t v36 = *v33;
      unint64_t v37 = v33[1];
      uint64_t v38 = *v35;
      unint64_t v39 = v35[1];
      sub_2504DBC4C(*v33, v37);
      sub_2504DBC4C(v38, v39);
      int v58 = sub_250559F4C(v38, v39, v36, v37);
      uint64_t v40 = v38;
      a4 = v49;
      unint64_t v41 = v39;
      uint64_t v27 = v54;
      sub_250511528(v40, v41);
      sub_250511528(v36, v37);
      sub_25051AF3C((uint64_t)v35, type metadata accessor for UserKeyingInfo);
      uint64_t v42 = (uint64_t)v33;
      uint64_t v28 = v53;
      uint64_t result = sub_25051AF3C(v42, type metadata accessor for UserKeyingInfo);
      if ((v58 & 1) == 0)
      {
LABEL_4:
        v27 += v52;
        v28 += v52;
        if (++v55 == v46) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v43 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v44 = v43 + v27 + v29;
      sub_25051C8F4(v43 + v28 + v29, v56, type metadata accessor for UserKeyingInfo);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_25051C8F4(v56, v44, type metadata accessor for UserKeyingInfo);
      v29 -= v52;
      if (v55 == ++v30) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2505188BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5ED0);
  uint64_t v14 = MEMORY[0x270FA5388](v9 - 8, v10, v11, v12, v13);
  uint64_t v107 = (uint64_t)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v16, v17, v18, v19);
  uint64_t v110 = (uint64_t)&v98 - v20;
  uint64_t v109 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v25 = MEMORY[0x270FA5388](v109, v21, v22, v23, v24);
  uint64_t v27 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25, v28, v29, v30, v31);
  uint64_t v33 = (char *)&v98 - v32;
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v38 = MEMORY[0x270FA5388](v111, v34, v35, v36, v37);
  uint64_t v116 = (uint64_t)&v98 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x270FA5388](v38, v40, v41, v42, v43);
  uint64_t v108 = (char *)&v98 - v45;
  uint64_t v50 = MEMORY[0x270FA5388](v44, v46, v47, v48, v49);
  uint64_t v52 = (char *)&v98 - v51;
  uint64_t result = MEMORY[0x270FA5388](v50, v53, v54, v55, v56);
  uint64_t v60 = (char *)&v98 - v59;
  if (a3 != a2)
  {
    uint64_t v61 = *(void *)(v58 + 72);
    uint64_t v101 = a4;
    uint64_t v102 = v61;
    uint64_t v117 = v61 * a3;
    uint64_t v118 = v61 * (a3 - 1);
    uint64_t v104 = v33;
    uint64_t v105 = (char *)&v98 - v59;
    uint64_t v106 = v52;
    uint64_t v99 = a2;
    uint64_t v100 = v4;
    uint64_t v98 = a1;
    while (2)
    {
      uint64_t v119 = 0;
      uint64_t v115 = a1;
      uint64_t v103 = a3;
      do
      {
        uint64_t v62 = *a4;
        uint64_t v63 = v119;
        uint64_t v113 = v117 + v119;
        sub_2504DAEFC(v117 + v119 + v62, (uint64_t)v60, &qword_269AB5E90);
        uint64_t v112 = v118 + v63;
        sub_2504DAEFC(v118 + v63 + v62, (uint64_t)v52, &qword_269AB5E90);
        uint64_t v64 = v111;
        uint64_t v65 = *(int *)(v111 + 48);
        uint64_t v66 = v108;
        uint64_t v67 = (uint64_t)&v108[v65];
        sub_25051B91C((uint64_t)&v60[v65], (uint64_t)&v108[v65], type metadata accessor for GroupMembership.MemberProperties);
        sub_25051C8F4(v67, (uint64_t)v33, type metadata accessor for GroupMembership.MemberProperties);
        uint64_t v68 = *(int *)(v64 + 48);
        uint64_t v69 = (uint64_t)&v66[v68];
        sub_25051B91C((uint64_t)&v52[v68], (uint64_t)&v66[v68], type metadata accessor for GroupMembership.MemberProperties);
        sub_25051C8F4(v69, (uint64_t)v27, type metadata accessor for GroupMembership.MemberProperties);
        uint64_t v70 = v109;
        uint64_t v71 = v110;
        sub_2504DAEFC((uint64_t)&v33[*(int *)(v109 + 28)], v110, &qword_269AB5ED0);
        uint64_t v72 = sub_2505BE0B0();
        uint64_t v73 = *(void *)(v72 - 8);
        uint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
        if (v74(v71, 1, v72) == 1) {
          goto LABEL_13;
        }
        uint64_t v75 = sub_2505BDF10();
        unint64_t v114 = v76;
        uint64_t v77 = (uint64_t)v27;
        uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
        v78(v71, v72);
        uint64_t v71 = v107;
        sub_2504DAEFC(v77 + *(int *)(v70 + 28), v107, &qword_269AB5ED0);
        if (v74(v71, 1, v72) == 1)
        {
          sub_250511528(v75, v114);
          uint64_t v27 = (char *)v77;
LABEL_13:
          uint64_t v90 = (uint64_t)v104;
          sub_2504DAF60(v71, &qword_269AB5ED0);
          uint64_t v91 = (uint64_t)v106;
          if (qword_269AB5418 != -1) {
            swift_once();
          }
          uint64_t v92 = sub_2505BDC40();
          __swift_project_value_buffer(v92, (uint64_t)qword_269AC3188);
          os_log_type_t v93 = sub_2505BE3D0();
          uint64_t v94 = sub_2505BDC20();
          os_log_type_t v95 = v93;
          if (os_log_type_enabled(v94, v93))
          {
            unint64_t v96 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v96 = 0;
            _os_log_impl(&dword_2504D2000, v94, v95, "missing member key information", v96, 2u);
            MEMORY[0x25337FF10](v96, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
          swift_allocError();
          *(_WORD *)uint64_t v97 = 345;
          *(_OWORD *)(v97 + 8) = xmmword_2505C0360;
          *(void *)(v97 + 24) = 0x80000002505C93B0;
          *(void *)(v97 + 32) = 0xD000000000000052;
          *(void *)(v97 + 40) = 0x80000002505C8CB0;
          swift_willThrow();
          sub_25051AF3C((uint64_t)v27, type metadata accessor for GroupMembership.MemberProperties);
          sub_25051AF3C(v90, type metadata accessor for GroupMembership.MemberProperties);
          sub_2504DAF60(v91, &qword_269AB5E90);
          return sub_2504DAF60((uint64_t)v105, &qword_269AB5E90);
        }
        uint64_t v79 = v71;
        uint64_t v80 = sub_2505BDF10();
        unint64_t v82 = v81;
        v78(v79, v72);
        uint64_t v83 = v75;
        uint64_t v84 = v75;
        unint64_t v85 = v114;
        char v86 = sub_250559F4C(v80, v82, v84, v114);
        sub_25051AF3C(v77, type metadata accessor for GroupMembership.MemberProperties);
        uint64_t v33 = v104;
        sub_25051AF3C((uint64_t)v104, type metadata accessor for GroupMembership.MemberProperties);
        sub_250511528(v80, v82);
        sub_250511528(v83, v85);
        uint64_t v52 = v106;
        sub_2504DAF60((uint64_t)v106, &qword_269AB5E90);
        uint64_t v60 = v105;
        uint64_t result = sub_2504DAF60((uint64_t)v105, &qword_269AB5E90);
        uint64_t v27 = (char *)v77;
        a4 = v101;
        uint64_t v87 = v103;
        if ((v86 & 1) == 0) {
          break;
        }
        uint64_t v88 = *v101;
        if (!*v101)
        {
          __break(1u);
          return result;
        }
        uint64_t v89 = v88 + v118 + v119;
        sub_2505283F0(v88 + v117 + v119, v116, &qword_269AB5E90);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_2505283F0(v116, v89, &qword_269AB5E90);
        v119 -= v102;
        ++v115;
      }
      while (v87 != v115);
      a3 = v87 + 1;
      v118 += v102;
      v117 += v102;
      a1 = v98;
      if (a3 != v99) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_250519018(uint64_t *a1, uint64_t *__src, unint64_t a3, char *a4)
{
  uint64_t v4 = __src;
  uint64_t v5 = (char *)__src - (char *)a1;
  uint64_t v6 = (char *)__src - (char *)a1 + 15;
  if ((char *)__src - (char *)a1 >= 0) {
    uint64_t v6 = (char *)__src - (char *)a1;
  }
  uint64_t v7 = v6 >> 4;
  uint64_t v8 = a3 - (void)__src;
  uint64_t v9 = a3 - (void)__src + 15;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v9 = a3 - (void)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v38 = a1;
  uint64_t v37 = (uint64_t *)a4;
  if (v7 >= v9 >> 4)
  {
    if (v8 >= -15)
    {
      if (a4 != (char *)__src || &__src[2 * v10] <= (uint64_t *)a4) {
        memmove(a4, __src, 16 * v10);
      }
      uint64_t v20 = &a4[16 * v10];
      uint64_t v36 = v20;
      uint64_t v38 = v4;
      if (a1 < v4 && v8 >= 16)
      {
        uint64_t v21 = (uint64_t *)(a3 - 16);
        uint64_t v22 = v4;
        do
        {
          uint64_t v33 = v21 + 2;
          uint64_t v35 = v4;
          uint64_t v23 = *((void *)v20 - 2);
          unint64_t v25 = *((void *)v20 - 1);
          uint64_t v24 = v20 - 16;
          uint64_t v26 = *(v22 - 2);
          unint64_t v27 = *(v22 - 1);
          v22 -= 2;
          unint64_t v28 = (unint64_t)v20;
          sub_2504DBC4C(v23, v25);
          sub_2504DBC4C(v26, v27);
          char v29 = sub_250559F4C(v26, v27, v23, v25);
          sub_250511528(v26, v27);
          sub_250511528(v23, v25);
          if (v29)
          {
            if (v33 != v35 || v21 >= v35) {
              *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
            }
            uint64_t v38 = v22;
            uint64_t v20 = (char *)v28;
          }
          else
          {
            uint64_t v36 = v24;
            if ((unint64_t)v33 < v28 || (unint64_t)v21 >= v28 || v33 != (uint64_t *)v28) {
              *(_OWORD *)uint64_t v21 = *(_OWORD *)v24;
            }
            uint64_t v22 = v35;
            uint64_t v20 = v24;
          }
          if (v22 <= a1) {
            break;
          }
          v21 -= 2;
          uint64_t v4 = v22;
        }
        while (v20 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v5 >= -15)
  {
    if (a4 != (char *)a1 || &a1[2 * v7] <= (uint64_t *)a4) {
      memmove(a4, a1, 16 * v7);
    }
    uint64_t v11 = &a4[16 * v7];
    uint64_t v36 = v11;
    if ((unint64_t)v4 < a3 && v5 >= 16)
    {
      uint64_t v12 = (uint64_t *)a4;
      uint64_t v13 = a1;
      do
      {
        uint64_t v14 = *v4;
        unint64_t v15 = v4[1];
        uint64_t v16 = *v12;
        unint64_t v17 = v12[1];
        sub_2504DBC4C(*v4, v15);
        sub_2504DBC4C(v16, v17);
        char v18 = sub_250559F4C(v16, v17, v14, v15);
        sub_250511528(v16, v17);
        sub_250511528(v14, v15);
        if (v18)
        {
          uint64_t v19 = v4 + 2;
          if (v13 < v4 || v13 >= v19 || v13 != v4) {
            *(_OWORD *)uint64_t v13 = *(_OWORD *)v4;
          }
        }
        else
        {
          if (v13 != v12) {
            *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
          }
          v12 += 2;
          uint64_t v37 = v12;
          uint64_t v19 = v4;
        }
        v13 += 2;
        if (v12 >= (uint64_t *)v11) {
          break;
        }
        uint64_t v4 = v19;
      }
      while ((unint64_t)v19 < a3);
      uint64_t v38 = v13;
    }
LABEL_43:
    sub_25058ED90((void **)&v38, (const void **)&v37, &v36);
    return 1;
  }
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250519340(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v59 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v12 = MEMORY[0x270FA5388](v59, v8, v9, v10, v11);
  uint64_t v14 = (uint64_t *)((char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12, v15, v16, v17, v18);
  uint64_t v62 = (uint64_t *)((char *)&v56 - v19);
  uint64_t v21 = *(void *)(v20 + 72);
  if (!v21)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v21 == -1) {
    goto LABEL_62;
  }
  int64_t v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v21 == -1) {
    goto LABEL_63;
  }
  uint64_t v23 = (uint64_t)(a2 - a1) / v21;
  unint64_t v66 = a1;
  unint64_t v65 = a4;
  uint64_t v24 = v22 / v21;
  if (v23 >= v22 / v21)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      uint64_t v26 = v24 * v21;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v40 = a4 + v26;
      unint64_t v64 = a4 + v26;
      unint64_t v66 = a2;
      if (v26 >= 1 && a1 < a2)
      {
        uint64_t v42 = -v21;
        unint64_t v57 = a4;
        unint64_t v58 = a1;
        do
        {
          unint64_t v63 = a3;
          unint64_t v60 = a2;
          unint64_t v61 = a3 + v42;
          uint64_t v43 = v62;
          sub_25051B91C(v40 + v42, (uint64_t)v62, type metadata accessor for UserKeyingInfo);
          unint64_t v44 = a2 + v42;
          sub_25051B91C(a2 + v42, (uint64_t)v14, type metadata accessor for UserKeyingInfo);
          uint64_t v45 = *v43;
          unint64_t v46 = v43[1];
          uint64_t v47 = (uint64_t)v14;
          uint64_t v48 = *v14;
          unint64_t v49 = *(void *)(v47 + 8);
          sub_2504DBC4C(*v43, v46);
          sub_2504DBC4C(v48, v49);
          char v50 = sub_250559F4C(v48, v49, v45, v46);
          uint64_t v51 = v48;
          uint64_t v14 = (uint64_t *)v47;
          sub_250511528(v51, v49);
          sub_250511528(v45, v46);
          sub_25051AF3C(v47, type metadata accessor for UserKeyingInfo);
          sub_25051AF3C((uint64_t)v43, type metadata accessor for UserKeyingInfo);
          if (v50)
          {
            a3 = v61;
            if (v63 < v60 || v61 >= v60)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v52 = v57;
              unint64_t v53 = v58;
            }
            else
            {
              unint64_t v52 = v57;
              unint64_t v53 = v58;
              if (v63 != v60) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v66 += v42;
          }
          else
          {
            unint64_t v44 = v60;
            a3 = v61;
            unint64_t v54 = v64;
            v64 += v42;
            if (v63 < v54 || v61 >= v54)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v52 = v57;
              unint64_t v53 = v58;
            }
            else
            {
              unint64_t v53 = v58;
              if (v63 != v54) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v52 = v57;
            }
          }
          unint64_t v40 = v64;
          if (v64 <= v52) {
            break;
          }
          a2 = v44;
        }
        while (v44 > v53);
      }
      goto LABEL_60;
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = v23 * v21;
    if (a4 < a1 || a1 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v61 = a4 + v25;
    unint64_t v64 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      unint64_t v63 = a3;
      unint64_t v28 = v62;
      do
      {
        uint64_t v29 = v21;
        sub_25051B91C(a2, (uint64_t)v28, type metadata accessor for UserKeyingInfo);
        sub_25051B91C(a4, (uint64_t)v14, type metadata accessor for UserKeyingInfo);
        uint64_t v30 = *v28;
        unint64_t v31 = v28[1];
        unint64_t v32 = a2;
        uint64_t v33 = *v14;
        unint64_t v34 = v14[1];
        sub_2504DBC4C(*v28, v31);
        sub_2504DBC4C(v33, v34);
        char v35 = sub_250559F4C(v33, v34, v30, v31);
        sub_250511528(v33, v34);
        sub_250511528(v30, v31);
        sub_25051AF3C((uint64_t)v14, type metadata accessor for UserKeyingInfo);
        sub_25051AF3C((uint64_t)v28, type metadata accessor for UserKeyingInfo);
        unint64_t v36 = v66;
        if (v35)
        {
          uint64_t v21 = v29;
          unint64_t v37 = v32 + v29;
          if (v66 < v32 || v66 >= v37)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v38 = v63;
          }
          else
          {
            unint64_t v38 = v63;
            if (v66 == v32) {
              unint64_t v36 = v32;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v21 = v29;
          unint64_t v39 = v65 + v29;
          if (v66 < v65 || v66 >= v39)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v38 = v63;
          }
          else
          {
            unint64_t v38 = v63;
            if (v66 != v65) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v65 = v39;
          unint64_t v37 = v32;
        }
        unint64_t v66 = v36 + v21;
        a4 = v65;
        if (v65 >= v61) {
          break;
        }
        a2 = v37;
      }
      while (v37 < v38);
    }
LABEL_60:
    sub_25058EE4C(&v66, &v65, (uint64_t *)&v64);
    return 1;
  }
LABEL_64:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_2505198FC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v14 = MEMORY[0x270FA5388](v68, v10, v11, v12, v13);
  uint64_t v19 = MEMORY[0x270FA5388](v14, v15, v16, v17, v18);
  uint64_t v21 = (char *)&v62 - v20;
  uint64_t v26 = MEMORY[0x270FA5388](v19, v22, v23, v24, v25);
  unint64_t v28 = (char *)&v62 - v27;
  MEMORY[0x270FA5388](v26, v29, v30, v31, v32);
  char v35 = (char *)&v62 - v34;
  uint64_t v69 = *(void *)(v36 + 72);
  if (!v69)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v69 == -1) {
    goto LABEL_68;
  }
  int64_t v37 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v69 == -1) {
    goto LABEL_69;
  }
  uint64_t v38 = (uint64_t)(a2 - a1) / v69;
  unint64_t v72 = a1;
  unint64_t v71 = a4;
  uint64_t v39 = v37 / v69;
  if (v38 >= v37 / v69)
  {
    if ((v39 & 0x8000000000000000) == 0)
    {
      uint64_t v41 = v39 * v69;
      char v35 = v21;
      unint64_t v66 = (char *)v33;
      if (a4 < a2 || a2 + v41 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v48 = a4 + v41;
      unint64_t v70 = a4 + v41;
      unint64_t v72 = a2;
      if (v41 < 1 || a1 >= a2) {
        goto LABEL_65;
      }
      uint64_t v50 = -v69;
      unint64_t v63 = a1;
      uint64_t v64 = -v69;
      unint64_t v65 = a4;
      while (1)
      {
        sub_2504DAEFC(v48 + v50, (uint64_t)v21, &qword_269AB5E90);
        unint64_t v51 = a2;
        unint64_t v52 = a2 + v50;
        uint64_t v53 = a2 + v50;
        uint64_t v54 = v50;
        unint64_t v28 = v66;
        sub_2504DAEFC(v53, (uint64_t)v66, &qword_269AB5E90);
        char v55 = sub_250507A90((uint64_t)v21, (uint64_t)v28);
        if (v5) {
          goto LABEL_64;
        }
        char v56 = v55;
        uint64_t v69 = 0;
        unint64_t v67 = a3 + v54;
        sub_2504DAF60((uint64_t)v28, &qword_269AB5E90);
        sub_2504DAF60((uint64_t)v21, &qword_269AB5E90);
        if (v56)
        {
          unint64_t v57 = a3;
          BOOL v42 = a3 >= v51;
          a3 = v67;
          if (v42 && v67 < v51)
          {
            unint64_t v58 = v65;
            if (v57 != v51) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v58 = v65;
          }
          uint64_t v50 = v64;
          v72 += v64;
        }
        else
        {
          unint64_t v59 = v70;
          v70 += v54;
          unint64_t v60 = a3;
          BOOL v42 = a3 >= v59;
          a3 = v67;
          if (v42 && v67 < v59)
          {
            unint64_t v58 = v65;
            if (v60 != v59) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v52 = v51;
            uint64_t v50 = v64;
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v52 = v51;
            uint64_t v50 = v64;
            unint64_t v58 = v65;
          }
        }
        unint64_t v48 = v70;
        if (v70 > v58)
        {
          a2 = v52;
          uint64_t v5 = v69;
          if (v52 > v63) {
            continue;
          }
        }
        goto LABEL_65;
      }
    }
  }
  else if ((v38 & 0x8000000000000000) == 0)
  {
    uint64_t v40 = v38 * v69;
    if (a4 < a1 || a1 + v40 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v67 = a4 + v40;
    unint64_t v70 = a4 + v40;
    BOOL v42 = v40 < 1 || a2 >= a3;
    if (v42) {
      goto LABEL_65;
    }
    while (1)
    {
      sub_2504DAEFC(a2, (uint64_t)v35, &qword_269AB5E90);
      sub_2504DAEFC(a4, (uint64_t)v28, &qword_269AB5E90);
      char v43 = sub_250507A90((uint64_t)v35, (uint64_t)v28);
      if (v5) {
        break;
      }
      char v44 = v43;
      sub_2504DAF60((uint64_t)v28, &qword_269AB5E90);
      sub_2504DAF60((uint64_t)v35, &qword_269AB5E90);
      unint64_t v45 = v72;
      if (v44)
      {
        unint64_t v46 = a2 + v69;
        if (v72 < a2 || v72 >= v46)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v72 == a2)
        {
          unint64_t v45 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        unint64_t v47 = v71 + v69;
        if (v72 < v71 || v72 >= v47)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v72 != v71)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v71 = v47;
        unint64_t v46 = a2;
      }
      unint64_t v72 = v45 + v69;
      a4 = v71;
      if (v71 < v67)
      {
        a2 = v46;
        if (v46 < a3) {
          continue;
        }
      }
      goto LABEL_65;
    }
LABEL_64:
    sub_2504DAF60((uint64_t)v28, &qword_269AB5E90);
    sub_2504DAF60((uint64_t)v35, &qword_269AB5E90);
LABEL_65:
    sub_25058EF98(&v72, &v71, (uint64_t *)&v70);
    return 1;
  }
LABEL_70:
  uint64_t result = sub_2505BE650();
  __break(1u);
  return result;
}

uint64_t sub_250519EB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x250519F20);
  }
  return result;
}

uint64_t sub_250519F30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x250519FFCLL);
  }
  return result;
}

uint64_t sub_25051A020(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_25051A0A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5, v6, v7, v8);
  unint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E88);
  uint64_t v16 = MEMORY[0x270FA5388](v11 - 8, v12, v13, v14, v15);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v19, v20, v21, v22);
  uint64_t v24 = (uint64_t *)((char *)&v52 - v23);
  uint64_t v26 = *v1;
  uint64_t v25 = v1[1];
  uint64_t v28 = v1[2];
  int64_t v27 = v1[3];
  int64_t v29 = v27;
  unint64_t v30 = v1[4];
  unint64_t v52 = v10;
  uint64_t v57 = v28;
  if (v30)
  {
    uint64_t v55 = a1;
    int64_t v56 = v27;
    uint64_t v53 = v25;
    uint64_t v54 = v18;
    uint64_t v31 = v3;
    uint64_t v32 = (v30 - 1) & v30;
    unint64_t v33 = __clz(__rbit64(v30)) | (v27 << 6);
LABEL_3:
    uint64_t v34 = *(void *)(v26 + 56);
    char v35 = (uint64_t *)(*(void *)(v26 + 48) + 16 * v33);
    uint64_t v36 = v26;
    uint64_t v37 = *v35;
    unint64_t v38 = v35[1];
    uint64_t v39 = v34
        + *(void *)(*(void *)(type metadata accessor for GroupMembership.MemberProperties(0) - 8) + 72) * v33;
    uint64_t v3 = v31;
    sub_25051B91C(v39, (uint64_t)v24 + *(int *)(v31 + 48), type metadata accessor for GroupMembership.MemberProperties);
    *uint64_t v24 = v37;
    v24[1] = v38;
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v4 + 56))(v24, 0, 1, v31);
    unint64_t v40 = v38;
    uint64_t v26 = v36;
    sub_2504DBC4C(v37, v40);
    uint64_t v18 = v54;
    a1 = v55;
    uint64_t v25 = v53;
    goto LABEL_25;
  }
  int64_t v41 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v29 = v23;
    goto LABEL_24;
  }
  int64_t v42 = (unint64_t)(v28 + 64) >> 6;
  if (v41 < v42)
  {
    unint64_t v43 = *(void *)(v25 + 8 * v41);
    if (v43)
    {
LABEL_7:
      uint64_t v53 = v25;
      uint64_t v54 = v18;
      uint64_t v31 = v3;
      uint64_t v55 = a1;
      int64_t v56 = v41;
      uint64_t v32 = (v43 - 1) & v43;
      unint64_t v33 = __clz(__rbit64(v43)) + (v41 << 6);
      goto LABEL_3;
    }
    int64_t v44 = v27 + 2;
    int64_t v29 = v27 + 1;
    if (v27 + 2 < v42)
    {
      unint64_t v43 = *(void *)(v25 + 8 * v44);
      if (v43)
      {
LABEL_10:
        int64_t v41 = v44;
        goto LABEL_7;
      }
      int64_t v29 = v27 + 2;
      if (v27 + 3 < v42)
      {
        unint64_t v43 = *(void *)(v25 + 8 * (v27 + 3));
        if (v43)
        {
          int64_t v41 = v27 + 3;
          goto LABEL_7;
        }
        int64_t v44 = v27 + 4;
        int64_t v29 = v27 + 3;
        if (v27 + 4 < v42)
        {
          unint64_t v43 = *(void *)(v25 + 8 * v44);
          if (v43) {
            goto LABEL_10;
          }
          int64_t v41 = v27 + 5;
          int64_t v29 = v27 + 4;
          if (v27 + 5 < v42)
          {
            unint64_t v43 = *(void *)(v25 + 8 * v41);
            if (v43) {
              goto LABEL_7;
            }
            int64_t v23 = v42 - 1;
            uint64_t v45 = v27 + 6;
            while (v42 != v45)
            {
              unint64_t v43 = *(void *)(v25 + 8 * v45++);
              if (v43)
              {
                int64_t v41 = v45 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v56 = v29;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v24, 1, 1, v3);
  uint64_t v32 = 0;
LABEL_25:
  *unint64_t v1 = v26;
  v1[1] = v25;
  int64_t v46 = v56;
  v1[2] = v57;
  v1[3] = v46;
  v1[4] = v32;
  unint64_t v47 = (void (*)(uint64_t))v1[5];
  sub_2505283F0((uint64_t)v24, (uint64_t)v18, &qword_269AB5E88);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v18, 1, v3) == 1)
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5FC8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(a1, 1, 1, v48);
  }
  else
  {
    uint64_t v50 = (uint64_t)v52;
    sub_2505283F0((uint64_t)v18, (uint64_t)v52, &qword_269AB5E90);
    v47(v50);
    sub_2504DAF60(v50, &qword_269AB5E90);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5FC8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(a1, 0, 1, v51);
  }
}

void sub_25051A4B8(_OWORD *a1@<X8>)
{
  uint64_t v2 = *v1;
  int64_t v4 = v1[3];
  unint64_t v3 = v1[4];
  int64_t v5 = v4;
  if (!v3)
  {
    int64_t v19 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      return;
    }
    int64_t v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      uint64_t v21 = v1[1];
      unint64_t v22 = *(void *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_9:
        uint64_t v6 = (v22 - 1) & v22;
        unint64_t v7 = __clz(__rbit64(v22)) + (v19 << 6);
        int64_t v5 = v19;
        goto LABEL_3;
      }
      int64_t v23 = v4 + 2;
      int64_t v5 = v4 + 1;
      if (v4 + 2 < v20)
      {
        unint64_t v22 = *(void *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_12:
          int64_t v19 = v23;
          goto LABEL_9;
        }
        int64_t v5 = v4 + 2;
        if (v4 + 3 < v20)
        {
          unint64_t v22 = *(void *)(v21 + 8 * (v4 + 3));
          if (v22)
          {
            int64_t v19 = v4 + 3;
            goto LABEL_9;
          }
          int64_t v23 = v4 + 4;
          int64_t v5 = v4 + 3;
          if (v4 + 4 < v20)
          {
            unint64_t v22 = *(void *)(v21 + 8 * v23);
            if (v22) {
              goto LABEL_12;
            }
            int64_t v19 = v4 + 5;
            int64_t v5 = v4 + 4;
            if (v4 + 5 < v20)
            {
              unint64_t v22 = *(void *)(v21 + 8 * v19);
              if (v22) {
                goto LABEL_9;
              }
              int64_t v5 = v20 - 1;
              int64_t v24 = v4 + 6;
              while (v20 != v24)
              {
                unint64_t v22 = *(void *)(v21 + 8 * v24++);
                if (v22)
                {
                  int64_t v19 = v24 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v5;
    v1[4] = 0;
    *a1 = xmmword_2505BFEE0;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    return;
  }
  uint64_t v6 = (v3 - 1) & v3;
  unint64_t v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
  uint64_t v8 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v7);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  uint64_t v11 = (uint64_t *)(*(void *)(v2 + 56) + 48 * v7);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  unint64_t v15 = v11[3];
  uint64_t v16 = v11[4];
  unint64_t v17 = v11[5];
  v1[3] = v5;
  v1[4] = v6;
  uint64_t v18 = (void (*)(void *))v1[5];
  v25[0] = v9;
  v25[1] = v10;
  v25[2] = v12;
  v25[3] = v13;
  v25[4] = v14;
  v25[5] = v15;
  v25[6] = v16;
  void v25[7] = v17;
  sub_2504DBC4C(v9, v10);
  sub_2504DBC4C(v12, v13);
  sub_2504DBC4C(v14, v15);
  sub_2504DBC4C(v16, v17);
  v18(v25);
  sub_250511528(v9, v10);
  sub_250511528(v12, v13);
  sub_250511528(v14, v15);
  sub_250511528(v16, v17);
}

uint64_t sub_25051A6F0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  unint64_t v9 = a1[7];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  sub_2504DBC4C(v3, v2);
  sub_2504DBC4C(v4, v5);
  sub_2504DBC4C(v6, v7);
  return sub_2504DBC4C(v8, v9);
}

uint64_t sub_25051A774(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_25051A814(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_25051A8F8(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7)
{
}

void sub_25051A928(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7)
{
}

uint64_t sub_25051A948(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_250547340((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_25051AA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_2505BD7D0();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_2505BD800();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_2505BD7F0();
  sub_250547340(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_25051AAD8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x25051AD40);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_2504DBC4C(a3, a4);
                  sub_2504DBC4C(a1, a2);
                  char v17 = sub_25051AA20((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_250511528(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_2504DBC4C(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_25051AA20(v21, v22, v20, a3, a4);
                  sub_250511528(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_2504DBC4C(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_2504DBC4C(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_25051A948(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_250511528(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_25051AD70(uint64_t a1, uint64_t a2)
{
  return sub_2504DED88(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_25051AD8C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_25051ADE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_25051AE3C(uint64_t a1)
{
  return sub_2504E0B90(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

unint64_t sub_25051AE60()
{
  unint64_t result = qword_269AB5A08;
  if (!qword_269AB5A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5A08);
  }
  return result;
}

uint64_t sub_25051AEB4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2 >> 60 != 15)
  {
    sub_250511528(result, a2);
    sub_250511528(a3, a4);
    sub_250511528(a5, a6);
    return sub_250511528(a7, a8);
  }
  return result;
}

uint64_t sub_25051AF3C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Group.ValidateGroupMemberKeysTransition(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB5CD0);
}

uint64_t sub_25051AFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result = sub_2505BD7D0();
  uint64_t v15 = (char *)result;
  if (result)
  {
    uint64_t result = sub_2505BD800();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_2505BD7F0();
  sub_25050CA40(v15, a4, a5, a6, a7, &v17);
  if (!v7) {
    return v17;
  }
  return v16;
}

uint64_t sub_25051B08C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x747065636341 && a2 == 0xE600000000000000;
  if (v2 || (sub_2505BE780() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463656A6552 && a2 == 0xE600000000000000 || (sub_2505BE780() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002505C91F0 || (sub_2505BE780() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657661654CLL && a2 == 0xE500000000000000 || (sub_2505BE780() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x796F7274736544 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_2505BE780();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_25051B28C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7473696E696D6441 && a2 == 0xED0000726F746172;
  if (v2 || (sub_2505BE780() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265626D654DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2505BE780();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25051B39C(uint64_t a1, void (*a2)(long long *__return_ptr, uint64_t, uint64_t))
{
  void (*v49)(long long *__return_ptr, uint64_t, uint64_t);
  long long v50;
  char v51;
  uint64_t v52;

  unint64_t v49 = a2;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E90);
  uint64_t v8 = MEMORY[0x270FA5388](v48, v4, v5, v6, v7);
  uint64_t v47 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8, v10, v11, v12, v13);
  int64_t v46 = (uint64_t *)((char *)&v42 - v14);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v44 = a1 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v45 = (unint64_t)(v16 + 63) >> 6;
  unint64_t v52 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  unint64_t v43 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v20 >= v45) {
      goto LABEL_31;
    }
    unint64_t v24 = *(void *)(v44 + 8 * v20);
    if (!v24) {
      break;
    }
LABEL_18:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_19:
    uint64_t v26 = *(void *)(v52 + 56);
    int64_t v27 = (uint64_t *)(*(void *)(v52 + 48) + 16 * v22);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    uint64_t v30 = v26
        + *(void *)(*(void *)(type metadata accessor for GroupMembership.MemberProperties(0) - 8) + 72) * v22;
    uint64_t v31 = v48;
    uint64_t v32 = v46;
    sub_25051B91C(v30, (uint64_t)v46 + *(int *)(v48 + 48), type metadata accessor for GroupMembership.MemberProperties);
    *uint64_t v32 = v28;
    v32[1] = v29;
    uint64_t v33 = (uint64_t)v32;
    uint64_t v34 = v47;
    sub_2505283F0(v33, v47, &qword_269AB5E90);
    uint64_t v35 = v34 + *(int *)(v31 + 48);
    sub_2504DBC4C(v28, v29);
    v49(&v50, v34, v35);
    if (v2)
    {
      sub_2504DAF60(v34, &qword_269AB5E90);
      int64_t v41 = v43;
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return (uint64_t)v41;
    }
    uint64_t result = sub_2504DAF60(v34, &qword_269AB5E90);
    char v36 = v51;
    if (v51 != 2)
    {
      long long v42 = v50;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_250571234(0, v43[2] + 1, 1, v43);
        unint64_t v43 = (void *)result;
      }
      unint64_t v38 = v43[2];
      unint64_t v37 = v43[3];
      if (v38 >= v37 >> 1)
      {
        uint64_t result = (uint64_t)sub_250571234((void *)(v37 > 1), v38 + 1, 1, v43);
        unint64_t v43 = (void *)result;
      }
      uint64_t v39 = v43;
      void v43[2] = v38 + 1;
      unint64_t v40 = &v39[3 * v38];
      *((_OWORD *)v40 + 2) = v42;
      *((unsigned char *)v40 + 48) = v36 & 1;
    }
  }
  int64_t v25 = v20 + 1;
  if (v20 + 1 >= v45) {
    goto LABEL_31;
  }
  unint64_t v24 = *(void *)(v44 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v25 = v20 + 2;
  if (v20 + 2 >= v45) {
    goto LABEL_31;
  }
  unint64_t v24 = *(void *)(v44 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v25 = v20 + 3;
  if (v20 + 3 >= v45) {
    goto LABEL_31;
  }
  unint64_t v24 = *(void *)(v44 + 8 * v25);
  if (v24) {
    goto LABEL_17;
  }
  int64_t v25 = v20 + 4;
  if (v20 + 4 >= v45)
  {
LABEL_31:
    int64_t v41 = v43;
    goto LABEL_32;
  }
  unint64_t v24 = *(void *)(v44 + 8 * v25);
  if (v24)
  {
LABEL_17:
    int64_t v20 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v45) {
      goto LABEL_31;
    }
    unint64_t v24 = *(void *)(v44 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_25051B738(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E60);
    uint64_t v3 = (void *)sub_2505BE640();
    uint64_t v4 = (unint64_t *)(a1 + 48);
    while (1)
    {
      unsigned int v5 = *((_DWORD *)v4 - 4);
      uint64_t v6 = *(v4 - 1);
      unint64_t v7 = *v4;
      uint64_t v8 = v4[1];
      unint64_t v9 = v4[2];
      unint64_t v10 = v4[4];
      uint64_t v19 = v1;
      uint64_t v20 = v4[3];
      uint64_t v11 = v4[5];
      unint64_t v12 = v4[6];
      unint64_t result = sub_250513290(v5);
      if (v14) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      uint64_t v15 = (uint64_t *)(v3[7] + (result << 6));
      *uint64_t v15 = v6;
      v15[1] = v7;
      _OWORD v15[2] = v8;
      v15[3] = v9;
      v15[4] = v20;
      v15[5] = v10;
      v15[6] = v11;
      v15[7] = v12;
      uint64_t v16 = v3[2];
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_10;
      }
      v4 += 9;
      v3[2] = v18;
      sub_2504DBC4C(v6, v7);
      sub_2504DBC4C(v8, v9);
      sub_2504DBC4C(v20, v10);
      sub_2504DBC4C(v11, v12);
      uint64_t v1 = v19 - 1;
      if (v19 == 1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t sub_25051B884(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_250511528(result, a2);
    return sub_25051B8D4(a3, a4);
  }
  return result;
}

uint64_t sub_25051B8D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_250511528(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for Group(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB5C90);
}

uint64_t sub_25051B908(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_2504DBC4C(a1, a2);
  }
  return a1;
}

uint64_t sub_25051B91C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25051B984(_OWORD *a1, int a2, long long *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 432) = a5;
  *(void *)(v6 + 440) = a6;
  *(_DWORD *)(v6 + 584) = a2;
  uint64_t v10 = sub_2505BDF90();
  *(void *)(v6 + 448) = v10;
  *(void *)(v6 + 456) = *(void *)(v10 - 8);
  *(void *)(v6 + 464) = swift_task_alloc();
  uint64_t v11 = sub_2505BE000();
  *(void *)(v6 + 472) = v11;
  *(void *)(v6 + 480) = *(void *)(v11 - 8);
  *(void *)(v6 + 488) = swift_task_alloc();
  *(void *)(v6 + 496) = type metadata accessor for PCSKeyPair();
  *(void *)(v6 + 504) = swift_task_alloc();
  long long v12 = *a3;
  *(_OWORD *)(v6 + 512) = *a1;
  *(_OWORD *)(v6 + 528) = v12;
  uint64_t v13 = a4[1];
  *(void *)(v6 + 544) = *a4;
  *(void *)(v6 + 552) = v13;
  return MEMORY[0x270FA2498](sub_25051BB00, 0, 0);
}

uint64_t sub_25051BB00()
{
  uint64_t v12 = v0;
  if (qword_26B202478 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_25051AD8C((uint64_t)&byte_26B202498, v0 + 16);
  sub_2504DAEFC(v0 + 232, v0 + 272, &qword_26B202158);
  if (*(void *)(v0 + 296))
  {
    uint64_t v1 = *(void *)(v0 + 552);
    uint64_t v2 = *(void *)(v0 + 544);
    sub_2504DAEE4((long long *)(v0 + 272), v0 + 352);
    sub_25051ADE8(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void *)(v0 + 384);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 352), v3);
    v11[0] = v2;
    v11[1] = v1;
    (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))(v11, 0xD000000000000022, 0x80000002505C8D10, v3, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 352);
    uint64_t v6 = *(void *)(v0 + 336);
    uint64_t v7 = *(void *)(v0 + 344);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 312), v6);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 560) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_25051BE54;
    uint64_t v9 = *(void *)(v0 + 504);
    return v10(v9, v6, v7);
  }
  else
  {
    sub_2504DAF60(v0 + 272, &qword_26B202158);
    return sub_2505BE5F0();
  }
}

uint64_t sub_25051BE54()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = v2[67];
    uint64_t v4 = v2[66];
    sub_250511528(v2[64], v2[65]);
    sub_250511528(v4, v3);
    uint64_t v5 = sub_25051C824;
  }
  else
  {
    uint64_t v5 = sub_25051BF90;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_25051BF90()
{
  uint64_t v84 = v0;
  uint64_t v1 = v0 + 312;
  uint64_t v2 = *(void *)(v0 + 568);
  long long v3 = *(_OWORD *)(v0 + 528);
  long long v82 = *(_OWORD *)(v0 + 512);
  *(_OWORD *)uint64_t v83 = v3;
  sub_25058A02C((uint64_t *)&v82, v83);
  if (v2)
  {
    unint64_t v4 = *(void *)(v0 + 536);
    uint64_t v5 = *(void *)(v0 + 528);
    unint64_t v6 = *(void *)(v0 + 520);
    uint64_t v8 = *(void *)(v0 + 504);
    uint64_t v7 = *(void *)(v0 + 512);
    sub_250511528(*(void *)(v0 + 432), *(void *)(v0 + 440));
    sub_25051AF3C(v8, (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
    sub_250511528(v5, v4);
    sub_250511528(v7, v6);
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v58 = *(uint64_t (**)(void))(v0 + 8);
    return v58();
  }
  unint64_t v9 = *((void *)&v74 + 1);
  if (*((void *)&v74 + 1) >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    unint64_t v10 = *(void *)(v0 + 536);
    uint64_t v11 = *(void *)(v0 + 528);
    unint64_t v12 = *(void *)(v0 + 520);
    uint64_t v13 = *(void *)(v0 + 512);
    uint64_t v14 = sub_2505BDC40();
    __swift_project_value_buffer(v14, (uint64_t)qword_269AC3188);
    os_log_type_t v15 = sub_2505BE3D0();
    sub_2504DBC4C(v13, v12);
    sub_2504DBC4C(v11, v10);
    uint64_t v16 = sub_2505BDC20();
    os_log_type_t v17 = v15;
    BOOL v18 = os_log_type_enabled(v16, v15);
    unint64_t v19 = *(void *)(v0 + 536);
    uint64_t v20 = *(void *)(v0 + 528);
    unint64_t v21 = *(void *)(v0 + 520);
    uint64_t v22 = *(void *)(v0 + 512);
    if (v18)
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      *(void *)&long long v74 = v71;
      *(_DWORD *)uint64_t v23 = 136315394;
      sub_2504DBC4C(v22, v21);
      uint64_t v24 = sub_2505BD8B0();
      unint64_t v26 = v25;
      sub_250511528(v22, v21);
      *(void *)(v0 + 416) = sub_25051171C(v24, v26, (uint64_t *)&v74);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      sub_250511528(v22, v21);
      sub_250511528(v22, v21);
      *(_WORD *)(v23 + 12) = 2080;
      sub_2504DBC4C(v20, v19);
      uint64_t v27 = sub_2505BD8B0();
      unint64_t v29 = v28;
      sub_250511528(v20, v19);
      *(void *)(v0 + 424) = sub_25051171C(v27, v29, (uint64_t *)&v74);
      sub_2505BE430();
      swift_bridgeObjectRelease();
      sub_250511528(v20, v19);
      sub_250511528(v20, v19);
      _os_log_impl(&dword_2504D2000, v16, v17, "GroupAccessInfo not found in storage for groupID %s and userID %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v71, -1, -1);
      MEMORY[0x25337FF10](v23, -1, -1);
    }
    else
    {
      sub_250511528(*(void *)(v0 + 512), *(void *)(v0 + 520));
      sub_250511528(v22, v21);
      sub_250511528(v20, v19);
      sub_250511528(v20, v19);
    }

    uint64_t v44 = *(void *)(v0 + 504);
    uint64_t v46 = *(void *)(v0 + 432);
    unint64_t v45 = *(void *)(v0 + 440);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v47 = 358;
    *(_OWORD *)(v47 + 8) = xmmword_2505C0470;
    *(void *)(v47 + 24) = 0x80000002505CA0E0;
    *(void *)(v47 + 32) = 0xD000000000000052;
    *(void *)(v47 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v46, v45);
    sub_25051AF3C(v44, (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
    uint64_t v1 = v0 + 312;
    goto LABEL_17;
  }
  uint64_t v30 = v75;
  uint64_t v67 = v76;
  unint64_t v68 = v77;
  uint64_t type = v78;
  os_log_t log = v79;
  unsigned int v31 = *(_DWORD *)(v0 + 584);
  unint64_t v32 = *(void *)(v0 + 536);
  uint64_t v33 = *(void *)(v0 + 528);
  unint64_t v34 = *(void *)(v0 + 520);
  unsigned int v72 = v80;
  unint64_t v66 = *((void *)&v75 + 1);
  if (v80 > v31)
  {
    uint64_t v65 = v74;
    uint64_t v73 = v75;
    sub_250511528(*(void *)(v0 + 512), v34);
    sub_250511528(v33, v32);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_2505BDC40();
    __swift_project_value_buffer(v35, (uint64_t)qword_269AC3188);
    os_log_type_t v36 = sub_2505BE3D0();
    unint64_t v37 = sub_2505BDC20();
    if (os_log_type_enabled(v37, v36))
    {
      int v38 = *(_DWORD *)(v0 + 584);
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 67109376;
      *(_DWORD *)(v0 + 576) = v72;
      sub_2505BE430();
      *(_WORD *)(v39 + 8) = 1024;
      *(_DWORD *)(v0 + 580) = v38;
      sub_2505BE430();
      _os_log_impl(&dword_2504D2000, v37, v36, "GroupAccessInfo version needs more recent version of the group, checked %u against %u", (uint8_t *)v39, 0xEu);
      MEMORY[0x25337FF10](v39, -1, -1);
    }
    uint64_t v40 = *(void *)(v0 + 504);
    uint64_t v42 = *(void *)(v0 + 432);
    unint64_t v41 = *(void *)(v0 + 440);

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v43 = 398;
    *(_OWORD *)(v43 + 8) = xmmword_2505C0460;
    *(void *)(v43 + 24) = 0x80000002505CA0E0;
    *(void *)(v43 + 32) = 0xD000000000000052;
    *(void *)(v43 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v42, v41);
    sub_25051AEB4(v65, v9, v73, v66, v67, v68, type, (unint64_t)log);
    sub_25051AF3C(v40, (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
    goto LABEL_17;
  }
  uint64_t v48 = *(void *)(v0 + 496);
  uint64_t v49 = *(void *)(v0 + 504);
  uint64_t v50 = *(void *)(v0 + 480);
  uint64_t v52 = *(void *)(v0 + 464);
  uint64_t v51 = *(void *)(v0 + 472);
  uint64_t v53 = *(void *)(v0 + 456);
  uint64_t v61 = *(void *)(v0 + 448);
  unint64_t v62 = *(void *)(v0 + 440);
  uint64_t v63 = *(void *)(v0 + 488);
  uint64_t v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 432);
  v81[0] = *(void *)(v0 + 512);
  v81[1] = v34;
  *(void *)&long long v82 = v33;
  *((void *)&v82 + 1) = v32;
  uint64_t v54 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v63, v49, v51);
  unint64_t v55 = *((void *)&v74 + 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v52, v49 + *(int *)(v48 + 20), v61);
  *(_OWORD *)uint64_t v83 = v74;
  long long v74 = v75;
  type metadata accessor for Group(0);
  uint64_t v56 = swift_allocObject();
  sub_2504DBC4C(v54, v55);
  sub_2504DBC4C(v75, *((unint64_t *)&v75 + 1));
  sub_2504E6CBC(v81, v31, (uint64_t *)&v82, v63, v52, v83, (uint64_t *)&v74, v64, v62);
  uint64_t v57 = *(void *)(v0 + 504);
  sub_25051AEB4(v54, v55, v30, v66, v67, v68, type, (unint64_t)log);
  sub_25051AF3C(v57, (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
  __swift_destroy_boxed_opaque_existential_1(v0 + 312);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v60 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v60(v56);
}

uint64_t sub_25051C824()
{
  sub_250511528(v0[54], v0[55]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 39));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25051C8BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_2504DBC4C(a2, a3);
  }
  return result;
}

uint64_t sub_25051C8D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_250511528(a2, a3);
  }
  return result;
}

uint64_t sub_25051C8F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25051C95C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_2504DBC4C(result, a2);
    return sub_25051B908(a3, a4);
  }
  return result;
}

uint64_t sub_25051C9AC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_250511528(result, a2);
    sub_250511528(a3, a4);
    return sub_250511528(a5, a6);
  }
  return result;
}

unint64_t sub_25051CA18()
{
  unint64_t result = qword_269AB5A88;
  if (!qword_269AB5A88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5A88);
  }
  return result;
}

uint64_t sub_25051CA6C()
{
  sub_250511528(v0[2], v0[3]);
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_250511528(v0[4], v1);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25051CABC(uint64_t *a1, void *a2)
{
  __s1[2] = *(void **)MEMORY[0x263EF8340];
  uint64_t v173 = sub_2505BE0B0();
  uint64_t v5 = *(void *)(v173 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v173, v6, v7, v8, v9);
  uint64_t v172 = (char *)&v158 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v12, v13, v14, v15);
  uint64_t v171 = (char *)&v158 - v16;
  uint64_t v175 = sub_2505BDF30();
  uint64_t v17 = *(void *)(v175 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v175, v18, v19, v20, v21);
  BOOL v174 = (char *)&v158 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v24, v25, v26, v27);
  uint64_t v180 = (char *)&v158 - v28;
  uint64_t v29 = *a1;
  uint64_t v30 = (void *)a2[2];
  if (*(void **)(v29 + 16) != v30)
  {
    if (qword_269AB5418 == -1)
    {
LABEL_130:
      uint64_t v152 = sub_2505BDC40();
      __swift_project_value_buffer(v152, (uint64_t)qword_269AC3188);
      os_log_type_t v153 = sub_2505BE3D0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v154 = sub_2505BDC20();
      if (os_log_type_enabled(v154, v153))
      {
        uint64_t v155 = swift_slowAlloc();
        *(_DWORD *)uint64_t v155 = 134218240;
        __s1[0] = *(void **)(v29 + 16);
        sub_2505BE430();
        swift_bridgeObjectRelease();
        *(_WORD *)(v155 + 12) = 2048;
        __s1[0] = v30;
        sub_2505BE430();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2504D2000, v154, v153, "mismatch number of keying info, expected %ld got %ld", (uint8_t *)v155, 0x16u);
        MEMORY[0x25337FF10](v155, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v156 = 341;
      *(_OWORD *)(v156 + 8) = xmmword_2505C0480;
      *(void *)(v156 + 24) = 0x80000002505C9E70;
      *(void *)(v156 + 32) = 0xD000000000000052;
      *(void *)(v156 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      return v151 & 1;
    }
LABEL_143:
    swift_once();
    goto LABEL_130;
  }
  uint64_t v31 = swift_bridgeObjectRetain();
  unint64_t v32 = (void *)sub_2504DE698(v31);
  swift_bridgeObjectRelease();
  __s1[0] = v32;
  swift_bridgeObjectRetain();
  sub_250510BA4(__s1);
  if (v2) {
    goto LABEL_177;
  }
  uint64_t v29 = 0;
  swift_bridgeObjectRelease();
  uint64_t v33 = __s1[0];
  __s1[0] = a2;
  swift_bridgeObjectRetain();
  sub_250510BA4(__s1);
  unint64_t v34 = __s1[0];
  uint64_t v169 = v33[2];
  if (!v169)
  {
LABEL_128:
    swift_release();
    swift_release();
    char v151 = 1;
    return v151 & 1;
  }
  uint64_t v161 = 0;
  uint64_t v35 = type metadata accessor for UserKeyingInfo(0);
  unint64_t v36 = 0;
  uint64_t v37 = *(void *)(v35 - 8);
  unint64_t v179 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  unint64_t v168 = (void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v166 = v35;
  char v167 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v38 = *(void *)(v37 + 72);
  uint64_t v165 = (void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v164 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v160 = v33;
  uint64_t v39 = v33;
  uint64_t v30 = v34;
  uint64_t v163 = v38;
  uint64_t v170 = v34;
  while (2)
  {
    if (v36 >= v34[2])
    {
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
    unint64_t v177 = v36 + 1;
    uint64_t v29 = *(void *)((char *)v39 + v179);
    unint64_t v40 = *(void *)((char *)v39 + v179 + 8);
    unint64_t v41 = (char *)v39 + v38;
    uint64_t v43 = *(void *)((char *)v30 + v179);
    unint64_t v42 = *(void *)((char *)v30 + v179 + 8);
    unint64_t v44 = v40 >> 62;
    uint64_t v45 = 0;
    uint64_t v181 = v30;
    switch(v40 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v29), v29)) {
          goto LABEL_139;
        }
        uint64_t v45 = HIDWORD(v29) - (int)v29;
LABEL_11:
        uint64_t v48 = v29;
        uint64_t v49 = v43;
        uint64_t v50 = v39;
        unint64_t v51 = v42;
        uint64_t v52 = v29;
        unint64_t v53 = v40;
        uint64_t v54 = v41;
        sub_2504DBC4C(v48, v40);
        unint64_t v41 = v54;
        unint64_t v40 = v53;
        uint64_t v29 = v52;
        unint64_t v42 = v51;
        uint64_t v39 = v50;
        uint64_t v43 = v49;
        uint64_t v30 = v181;
        break;
      case 2uLL:
        uint64_t v47 = *(void *)(v29 + 16);
        uint64_t v46 = *(void *)(v29 + 24);
        uint64_t v45 = v46 - v47;
        if (!__OFSUB__(v46, v47)) {
          goto LABEL_11;
        }
        goto LABEL_140;
      case 3uLL:
        break;
      default:
        uint64_t v45 = BYTE6(v40);
        break;
    }
    unint64_t v55 = v42 >> 62;
    uint64_t v176 = v41;
    switch(v42 >> 62)
    {
      case 1uLL:
        LODWORD(v56) = HIDWORD(v43) - v43;
        if (__OFSUB__(HIDWORD(v43), v43)) {
          goto LABEL_141;
        }
        uint64_t v56 = (int)v56;
LABEL_21:
        if (v45 == v56)
        {
          if (v45 < 1)
          {
LABEL_31:
            sub_250511528(v29, v40);
          }
          else
          {
            switch((int)v44)
            {
              case 1:
                if ((int)v29 > v29 >> 32)
                {
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
                }
                uint64_t v162 = v29;
                unint64_t v178 = v40;
                sub_2504DBC4C(v29, v40);
                sub_2504DBC4C(v43, v42);
                uint64_t v79 = sub_2505BD7D0();
                if (v79)
                {
                  uint64_t v80 = v79;
                  uint64_t v81 = sub_2505BD800();
                  if (__OFSUB__((int)v29, v81)) {
                    goto LABEL_146;
                  }
                  long long v82 = (const void *)(v80 + (int)v29 - v81);
                }
                else
                {
                  long long v82 = 0;
                }
                uint64_t v30 = v181;
                sub_2505BD7F0();
                if (v55)
                {
                  if (v55 == 1)
                  {
                    if (v43 >> 32 < (int)v43) {
                      goto LABEL_155;
                    }
                    swift_retain();
                    uint64_t v84 = (char *)sub_2505BD7D0();
                    if (v84)
                    {
                      uint64_t v85 = sub_2505BD800();
                      if (__OFSUB__((int)v43, v85)) {
                        goto LABEL_162;
                      }
                      v84 += (int)v43 - v85;
                    }
                    uint64_t v30 = v181;
                    uint64_t v86 = sub_2505BD7F0();
                    if (v86 >= (v43 >> 32) - (int)v43) {
                      size_t v87 = (v43 >> 32) - (int)v43;
                    }
                    else {
                      size_t v87 = v86;
                    }
                    if (!v82) {
                      goto LABEL_168;
                    }
                    if (!v84) {
                      goto LABEL_169;
                    }
                    int v73 = memcmp(v82, v84, v87);
                    sub_250511528(v43, v42);
                  }
                  else
                  {
                    uint64_t v110 = *(void *)(v43 + 16);
                    unint64_t v159 = *(char **)(v43 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v111 = sub_2505BD7D0();
                    if (v111)
                    {
                      uint64_t v112 = v111;
                      uint64_t v113 = sub_2505BD800();
                      if (__OFSUB__(v110, v113)) {
                        goto LABEL_161;
                      }
                      unint64_t v114 = (const void *)(v112 + v110 - v113);
                    }
                    else
                    {
                      unint64_t v114 = 0;
                    }
                    unint64_t v121 = &v159[-v110];
                    if (__OFSUB__(v159, v110)) {
                      goto LABEL_156;
                    }
                    uint64_t v122 = sub_2505BD7F0();
                    if (v122 >= (uint64_t)v121) {
                      size_t v123 = (size_t)v121;
                    }
                    else {
                      size_t v123 = v122;
                    }
                    if (!v82) {
                      goto LABEL_175;
                    }
                    if (!v114) {
                      goto LABEL_176;
                    }
                    int v73 = memcmp(v82, v114, v123);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  __s1[0] = (void *)v43;
                  LOWORD(__s1[1]) = v42;
                  BYTE2(__s1[1]) = BYTE2(v42);
                  BYTE3(__s1[1]) = BYTE3(v42);
                  BYTE4(__s1[1]) = BYTE4(v42);
                  BYTE5(__s1[1]) = BYTE5(v42);
                  if (!v82) {
                    goto LABEL_171;
                  }
                  int v73 = memcmp(v82, __s1, BYTE6(v42));
                }
                uint64_t v29 = v162;
                unint64_t v83 = v178;
                sub_250511528(v162, v178);
                sub_250511528(v43, v42);
LABEL_123:
                uint64_t v95 = v29;
                unint64_t v96 = v83;
                goto LABEL_124;
              case 2:
                unint64_t v178 = v40;
                uint64_t v65 = v40 & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v66 = *(void *)(v29 + 16);
                sub_2504DBC4C(v43, v42);
                swift_retain();
                swift_retain();
                uint64_t v67 = (char *)sub_2505BD7D0();
                uint64_t v162 = v65;
                if (!v67) {
                  goto LABEL_35;
                }
                uint64_t v68 = sub_2505BD800();
                if (__OFSUB__(v66, v68)) {
                  goto LABEL_145;
                }
                v67 += v66 - v68;
LABEL_35:
                uint64_t v30 = v181;
                sub_2505BD7F0();
                if (v55)
                {
                  unint64_t v159 = v67;
                  if (v55 == 1)
                  {
                    if (v43 >> 32 < (int)v43) {
                      goto LABEL_150;
                    }
                    swift_retain();
                    uint64_t v69 = (char *)sub_2505BD7D0();
                    if (v69)
                    {
                      uint64_t v70 = sub_2505BD800();
                      if (__OFSUB__((int)v43, v70)) {
                        goto LABEL_160;
                      }
                      v69 += (int)v43 - v70;
                    }
                    uint64_t v30 = v181;
                    uint64_t v71 = sub_2505BD7F0();
                    if (v71 >= (v43 >> 32) - (int)v43) {
                      size_t v72 = (v43 >> 32) - (int)v43;
                    }
                    else {
                      size_t v72 = v71;
                    }
                    if (!v159) {
                      goto LABEL_166;
                    }
                    if (!v69) {
                      goto LABEL_167;
                    }
                    int v73 = memcmp(v159, v69, v72);
                    sub_250511528(v43, v42);
                  }
                  else
                  {
                    uint64_t v105 = *(void *)(v43 + 16);
                    uint64_t v158 = *(void *)(v43 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v106 = sub_2505BD7D0();
                    if (v106)
                    {
                      uint64_t v107 = v106;
                      uint64_t v108 = sub_2505BD800();
                      if (__OFSUB__(v105, v108)) {
                        goto LABEL_159;
                      }
                      uint64_t v109 = (const void *)(v107 + v105 - v108);
                    }
                    else
                    {
                      uint64_t v109 = 0;
                    }
                    int64_t v118 = v158 - v105;
                    if (__OFSUB__(v158, v105)) {
                      goto LABEL_154;
                    }
                    uint64_t v119 = sub_2505BD7F0();
                    if (v119 >= v118) {
                      size_t v120 = v118;
                    }
                    else {
                      size_t v120 = v119;
                    }
                    if (!v159) {
                      goto LABEL_172;
                    }
                    if (!v109) {
                      goto LABEL_173;
                    }
                    int v73 = memcmp(v159, v109, v120);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  __s1[0] = (void *)v43;
                  LOWORD(__s1[1]) = v42;
                  BYTE2(__s1[1]) = BYTE2(v42);
                  BYTE3(__s1[1]) = BYTE3(v42);
                  BYTE4(__s1[1]) = BYTE4(v42);
                  BYTE5(__s1[1]) = BYTE5(v42);
                  if (!v67) {
                    goto LABEL_165;
                  }
                  int v73 = memcmp(v67, __s1, BYTE6(v42));
                }
LABEL_113:
                swift_release();
                swift_release();
                sub_250511528(v43, v42);
                uint64_t v95 = v29;
                unint64_t v96 = v178;
                goto LABEL_124;
              case 3:
                memset(__s1, 0, 14);
                if (!v55) {
                  goto LABEL_61;
                }
                if (v55 == 1)
                {
                  unint64_t v178 = v40;
                  uint64_t v60 = (v43 >> 32) - (int)v43;
                  if (v43 >> 32 < (int)v43) {
                    goto LABEL_147;
                  }
                  sub_2504DBC4C(v43, v42);
                  uint64_t v74 = sub_2505BD7D0();
                  if (!v74)
                  {
                    sub_2505BD7F0();
                    __break(1u);
LABEL_164:
                    sub_2505BD7F0();
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    __break(1u);
LABEL_172:
                    __break(1u);
LABEL_173:
                    __break(1u);
LABEL_174:
                    __break(1u);
LABEL_175:
                    __break(1u);
LABEL_176:
                    __break(1u);
LABEL_177:
                    swift_release();
                    __break(1u);
                    JUMPOUT(0x25051DB20);
                  }
                  uint64_t v62 = v74;
                  uint64_t v75 = sub_2505BD800();
                  uint64_t v64 = (int)v43 - v75;
                  if (__OFSUB__((int)v43, v75)) {
                    goto LABEL_152;
                  }
LABEL_52:
                  uint64_t v76 = sub_2505BD7F0();
                  if (v76 >= v60) {
                    size_t v77 = v60;
                  }
                  else {
                    size_t v77 = v76;
                  }
                  int v78 = memcmp(__s1, (const void *)(v62 + v64), v77);
                  sub_250511528(v43, v42);
                  sub_250511528(v29, v178);
                  uint64_t v30 = v181;
                  if (v78) {
                    goto LABEL_136;
                  }
                }
                else
                {
                  unint64_t v88 = v40;
                  uint64_t v89 = *(void *)(v43 + 16);
                  uint64_t v162 = *(void *)(v43 + 24);
                  sub_2504DBC4C(v43, v42);
                  swift_retain();
                  swift_retain();
                  uint64_t v90 = (char *)sub_2505BD7D0();
                  if (v90)
                  {
                    uint64_t v91 = sub_2505BD800();
                    if (__OFSUB__(v89, v91)) {
                      goto LABEL_157;
                    }
                    v90 += v89 - v91;
                  }
                  BOOL v59 = __OFSUB__(v162, v89);
                  int64_t v92 = v162 - v89;
                  if (v59) {
                    goto LABEL_151;
                  }
                  uint64_t v93 = sub_2505BD7F0();
                  if (!v90) {
                    goto LABEL_170;
                  }
                  if (v93 >= v92) {
                    size_t v94 = v92;
                  }
                  else {
                    size_t v94 = v93;
                  }
                  int v73 = memcmp(__s1, v90, v94);
                  swift_release();
                  swift_release();
                  sub_250511528(v43, v42);
                  uint64_t v95 = v29;
                  unint64_t v96 = v88;
LABEL_124:
                  sub_250511528(v95, v96);
                  if (v73) {
                    goto LABEL_136;
                  }
                }
                break;
              default:
                __s1[0] = (void *)v29;
                LOWORD(__s1[1]) = v40;
                BYTE2(__s1[1]) = BYTE2(v40);
                BYTE3(__s1[1]) = BYTE3(v40);
                BYTE4(__s1[1]) = BYTE4(v40);
                BYTE5(__s1[1]) = BYTE5(v40);
                if (!v55)
                {
LABEL_61:
                  uint64_t __s2 = v43;
                  __int16 v183 = v42;
                  char v184 = BYTE2(v42);
                  char v185 = BYTE3(v42);
                  char v186 = BYTE4(v42);
                  char v187 = BYTE5(v42);
                  unint64_t v83 = v40;
                  int v73 = memcmp(__s1, &__s2, BYTE6(v42));
                  goto LABEL_123;
                }
                unint64_t v178 = v40;
                if (v55 == 1)
                {
                  uint64_t v60 = (v43 >> 32) - (int)v43;
                  if (v43 >> 32 < (int)v43) {
                    goto LABEL_148;
                  }
                  sub_2504DBC4C(v43, v42);
                  uint64_t v61 = sub_2505BD7D0();
                  if (!v61) {
                    goto LABEL_164;
                  }
                  uint64_t v62 = v61;
                  uint64_t v63 = sub_2505BD800();
                  uint64_t v64 = (int)v43 - v63;
                  if (__OFSUB__((int)v43, v63)) {
                    goto LABEL_153;
                  }
                  goto LABEL_52;
                }
                uint64_t v98 = *(void *)(v43 + 16);
                uint64_t v97 = *(void *)(v43 + 24);
                sub_2504DBC4C(v43, v42);
                swift_retain();
                swift_retain();
                uint64_t v99 = sub_2505BD7D0();
                if (v99)
                {
                  uint64_t v100 = v99;
                  uint64_t v101 = sub_2505BD800();
                  if (__OFSUB__(v98, v101)) {
                    goto LABEL_158;
                  }
                  uint64_t v102 = v98;
                  uint64_t v103 = (const void *)(v100 + v98 - v101);
                  int64_t v104 = v97 - v102;
                  if (__OFSUB__(v97, v102)) {
                    goto LABEL_149;
                  }
                }
                else
                {
                  uint64_t v115 = v98;
                  uint64_t v103 = 0;
                  int64_t v104 = v97 - v115;
                  if (__OFSUB__(v97, v115)) {
                    goto LABEL_149;
                  }
                }
                uint64_t v116 = sub_2505BD7F0();
                if (!v103) {
                  goto LABEL_174;
                }
                if (v116 >= v104) {
                  size_t v117 = v104;
                }
                else {
                  size_t v117 = v116;
                }
                int v73 = memcmp(__s1, v103, v117);
                goto LABEL_113;
            }
          }
          uint64_t v124 = v166;
          unint64_t v125 = v179;
          uint64_t v126 = (char *)v39 + v179;
          uint64_t v127 = *v168;
          uint64_t v128 = v175;
          (*v168)(v180, &v126[*(int *)(v166 + 20)], v175);
          uint64_t v129 = (char *)v30 + v125;
          uint64_t v130 = v174;
          v127(v174, &v129[*(int *)(v124 + 20)], v128);
          uint64_t v131 = sub_2505BDEE0();
          unint64_t v133 = v132;
          uint64_t v134 = sub_2505BDEE0();
          unint64_t v136 = v135;
          LODWORD(v178) = sub_25051AAD8(v131, v133, v134, v135);
          sub_250511528(v134, v136);
          sub_250511528(v131, v133);
          uint64_t v137 = *v167;
          (*v167)(v130, v128);
          v137(v180, v128);
          if ((v178 & 1) == 0) {
            goto LABEL_136;
          }
          uint64_t v138 = &v126[*(int *)(v124 + 28)];
          uint64_t v139 = *v165;
          uint64_t v140 = v171;
          uint64_t v141 = v173;
          (*v165)(v171, v138, v173);
          uint64_t v142 = &v129[*(int *)(v124 + 28)];
          uint64_t v143 = v172;
          v139(v172, v142, v141);
          uint64_t v144 = sub_2505BDEE0();
          uint64_t v29 = v145;
          uint64_t v146 = sub_2505BDEE0();
          unint64_t v148 = v147;
          char v149 = sub_25051AAD8(v144, v29, v146, v147);
          sub_250511528(v146, v148);
          sub_250511528(v144, v29);
          uint64_t v150 = *v164;
          (*v164)(v143, v141);
          v150(v140, v141);
          if ((v149 & 1) == 0) {
            goto LABEL_136;
          }
          uint64_t v38 = v163;
          uint64_t v30 = (void *)((char *)v181 + v163);
          uint64_t v39 = v176;
          unint64_t v36 = v177;
          unint64_t v34 = v170;
          if (v169 == v177) {
            goto LABEL_128;
          }
          continue;
        }
LABEL_135:
        sub_250511528(v29, v40);
LABEL_136:
        swift_release();
        swift_release();
        char v151 = 0;
        return v151 & 1;
      case 2uLL:
        uint64_t v58 = *(void *)(v43 + 16);
        uint64_t v57 = *(void *)(v43 + 24);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v56 = v57 - v58;
        if (!v59) {
          goto LABEL_21;
        }
        goto LABEL_142;
      case 3uLL:
        if (v45) {
          goto LABEL_135;
        }
        goto LABEL_31;
      default:
        uint64_t v56 = BYTE6(v42);
        goto LABEL_21;
    }
  }
}

uint64_t sub_25051DB50()
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v0 = sub_2505BDC90();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0, v2, v3, v4, v5);
  uint64_t v7 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v8 = *(void *)(v57 - 8);
  MEMORY[0x270FA5388](v57, v9, v10, v11, v12);
  uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_2505BE0E0();
  uint64_t v15 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55, v16, v17, v18, v19);
  uint64_t v21 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = (void *)sub_2504DE698(v22);
  swift_bridgeObjectRelease();
  v59[0] = v23;
  swift_bridgeObjectRetain();
  sub_250510BA4(v59);
  swift_bridgeObjectRelease();
  uint64_t v24 = v59[0];
  uint64_t v56 = v21;
  sub_2505BE0D0();
  uint64_t v25 = v24[2];
  if (v25)
  {
    v49[1] = 0;
    uint64_t v50 = v15;
    unint64_t v51 = v7;
    uint64_t v52 = v1;
    uint64_t v26 = *(unsigned __int8 *)(v8 + 80);
    v49[0] = v24;
    uint64_t v27 = (uint64_t)v24 + ((v26 + 32) & ~v26);
    uint64_t v28 = *(void *)(v8 + 72);
    uint64_t v53 = v0;
    uint64_t v54 = v28;
    while (2)
    {
      sub_25051B91C(v27, (uint64_t)v14, type metadata accessor for UserKeyingInfo);
      uint64_t v30 = *(void *)v14;
      unint64_t v29 = *((void *)v14 + 1);
      switch(v29 >> 62)
      {
        case 1uLL:
          if (v30 >> 32 < (int)v30)
          {
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
          }
          swift_retain();
          if (sub_2505BD7D0() && __OFSUB__((int)v30, sub_2505BD800())) {
            goto LABEL_51;
          }
          sub_2505BD7F0();
          sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
          sub_2505BDC60();
LABEL_18:
          sub_250511528(v30, v29);
          uint64_t v33 = sub_2505BDF10();
          uint64_t v35 = v33;
          unint64_t v36 = v34;
          switch(v34 >> 62)
          {
            case 1uLL:
              if (v33 >> 32 < (int)v33) {
                goto LABEL_45;
              }
              if (sub_2505BD7D0() && __OFSUB__((int)v35, sub_2505BD800())) {
                goto LABEL_53;
              }
              sub_2505BD7F0();
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
              sub_2505BDC60();
              break;
            case 2uLL:
              uint64_t v37 = *(void *)(v33 + 16);
              uint64_t v38 = *(void *)(v33 + 24);
              swift_retain();
              swift_retain();
              if (sub_2505BD7D0() && __OFSUB__(v37, sub_2505BD800())) {
                goto LABEL_50;
              }
              if (__OFSUB__(v38, v37)) {
                goto LABEL_46;
              }
              sub_2505BD7F0();
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
              sub_2505BDC60();
              swift_release();
              swift_release();
              break;
            case 3uLL:
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
              memset(v59, 0, 14);
              goto LABEL_25;
            default:
              v59[0] = (void *)v33;
              LOWORD(v59[1]) = v34;
              BYTE2(v59[1]) = BYTE2(v34);
              BYTE3(v59[1]) = BYTE3(v34);
              BYTE4(v59[1]) = BYTE4(v34);
              BYTE5(v59[1]) = BYTE5(v34);
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
LABEL_25:
              sub_2505BDC60();
              sub_250511528(v35, v36);
              break;
          }
          sub_250511528(v35, v36);
          uint64_t v39 = sub_2505BDF10();
          uint64_t v41 = v39;
          unint64_t v42 = v40;
          switch(v40 >> 62)
          {
            case 1uLL:
              if (v39 >> 32 < (int)v39) {
                goto LABEL_47;
              }
              if (sub_2505BD7D0() && __OFSUB__((int)v41, sub_2505BD800())) {
                goto LABEL_54;
              }
              sub_2505BD7F0();
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
              sub_2505BDC60();
              break;
            case 2uLL:
              uint64_t v43 = *(void *)(v39 + 16);
              uint64_t v44 = *(void *)(v39 + 24);
              swift_retain();
              swift_retain();
              if (sub_2505BD7D0() && __OFSUB__(v43, sub_2505BD800())) {
                goto LABEL_52;
              }
              if (__OFSUB__(v44, v43)) {
                goto LABEL_48;
              }
              sub_2505BD7F0();
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
              sub_2505BDC60();
              swift_release();
              swift_release();
              break;
            case 3uLL:
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
              memset(v59, 0, 14);
              goto LABEL_4;
            default:
              v59[0] = (void *)v39;
              LOWORD(v59[1]) = v40;
              BYTE2(v59[1]) = BYTE2(v40);
              BYTE3(v59[1]) = BYTE3(v40);
              BYTE4(v59[1]) = BYTE4(v40);
              BYTE5(v59[1]) = BYTE5(v40);
              sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
LABEL_4:
              sub_2505BDC60();
              sub_250511528(v41, v42);
              break;
          }
          sub_250511528(v41, v42);
          sub_25051AF3C((uint64_t)v14, type metadata accessor for UserKeyingInfo);
          v27 += v54;
          if (--v25) {
            continue;
          }
          swift_release();
          uint64_t v1 = v52;
          uint64_t v0 = v53;
          uint64_t v15 = v50;
          uint64_t v7 = v51;
          break;
        case 2uLL:
          uint64_t v31 = *(void *)(v30 + 16);
          uint64_t v32 = *(void *)(v30 + 24);
          sub_2504DBC4C(*(void *)v14, *((void *)v14 + 1));
          swift_retain();
          swift_retain();
          if (sub_2505BD7D0() && __OFSUB__(v31, sub_2505BD800())) {
            goto LABEL_49;
          }
          if (__OFSUB__(v32, v31)) {
            goto LABEL_44;
          }
          sub_2505BD7F0();
          sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
          sub_2505BDC60();
          swift_release();
          swift_release();
          goto LABEL_18;
        case 3uLL:
          sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
          memset(v59, 0, 14);
          goto LABEL_13;
        default:
          v59[0] = *(void **)v14;
          LOWORD(v59[1]) = v29;
          BYTE2(v59[1]) = BYTE2(v29);
          BYTE3(v59[1]) = BYTE3(v29);
          BYTE4(v59[1]) = BYTE4(v29);
          BYTE5(v59[1]) = BYTE5(v29);
          sub_250528338((unint64_t *)&qword_269AB5FB0, MEMORY[0x263F047F8]);
LABEL_13:
          sub_2505BDC60();
          sub_250511528(v30, v29);
          goto LABEL_18;
      }
      break;
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v45 = v56;
  sub_2505BE0C0();
  uint64_t v60 = v0;
  uint64_t v61 = sub_250528338(&qword_269AB5FB8, MEMORY[0x263F045C0]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v59);
  (*(void (**)(uint64_t *, char *, uint64_t))(v1 + 16))(boxed_opaque_existential_1, v7, v0);
  __swift_project_boxed_opaque_existential_1(v59, v60);
  sub_2505BD820();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
  uint64_t v47 = v58;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v45, v55);
  return v47;
}

uint64_t sub_25051E7C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for GKCrypto_VersionedSeed(0);
  MEMORY[0x270FA5388](v9 - 8, v10, v11, v12, v13);
  uint64_t v15 = (int *)((char *)&v31[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 8);
  unint64_t v17 = *(void *)(a1 + 16);
  sub_2504DBC4C(v16, v17);
  uint64_t v18 = sub_25055E814(v16, v17);
  if (!v4)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    if (*(_DWORD *)a1 == a2)
    {
      v31[3] = &type metadata for MemberSeed;
      void v31[4] = sub_250522A2C();
      v31[0] = v20;
      v31[1] = v21;
      sub_2504DBC4C(v20, v21);
      a2 = sub_250560C18(v31, 1, a3, a4);
      sub_250511528(v20, v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
    else
    {
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_2505BDC40();
      __swift_project_value_buffer(v22, (uint64_t)qword_269AC3188);
      os_log_type_t v23 = sub_2505BE3D0();
      sub_25051B91C(a1, (uint64_t)v15, type metadata accessor for GKCrypto_VersionedSeed);
      uint64_t v24 = sub_2505BDC20();
      os_log_type_t v25 = v23;
      if (os_log_type_enabled(v24, v23))
      {
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 67109376;
        int v27 = *v15;
        sub_25051AF3C((uint64_t)v15, type metadata accessor for GKCrypto_VersionedSeed);
        LODWORD(v31[0]) = v27;
        sub_2505BE430();
        *(_WORD *)(v26 + 8) = 1024;
        LODWORD(v31[0]) = a2;
        sub_2505BE430();
        _os_log_impl(&dword_2504D2000, v24, v25, "seed and group version mismatch, got %u expected %u", (uint8_t *)v26, 0xEu);
        MEMORY[0x25337FF10](v26, -1, -1);
      }
      else
      {
        sub_25051AF3C((uint64_t)v15, type metadata accessor for GKCrypto_VersionedSeed);
      }

      a2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v28 = 334;
      *(_OWORD *)(v28 + 8) = xmmword_2505C0490;
      *(void *)(v28 + 24) = 0x80000002505C9FC0;
      *(void *)(v28 + 32) = 0xD000000000000052;
      *(void *)(v28 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_250511528(v20, v21);
    }
  }
  return a2;
}

uint64_t sub_25051EB18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v78 = a3;
  uint64_t v5 = sub_2505BE040();
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v76 = v5;
  MEMORY[0x270FA5388](v5, v6, v7, v8, v9);
  uint64_t v80 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  MEMORY[0x270FA5388](v11 - 8, v12, v13, v14, v15);
  unint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v82 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18, v19, v20, v21, v22);
  uint64_t v79 = (uint64_t)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v24 - 8, v25, v26, v27, v28);
  uint64_t v30 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for GroupMembership.MemberProperties(0);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31, v33, v34, v35, v36);
  uint64_t v38 = (char *)&v75 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *a2;
  if (*(void *)(*a2 + 16))
  {
    uint64_t v41 = *a1;
    unint64_t v40 = a1[1];
    sub_2504DBC4C(v41, v40);
    unint64_t v42 = sub_250513064(v41, v40);
    if (v43)
    {
      sub_25051B91C(*(void *)(v39 + 56) + *(void *)(v32 + 72) * v42, (uint64_t)v30, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, 1, 1, v31);
    }
    sub_250511528(v41, v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1) {
      goto LABEL_7;
    }
    uint64_t v51 = (uint64_t)v38;
    sub_25051C8F4((uint64_t)v30, (uint64_t)v38, type metadata accessor for GroupMembership.MemberProperties);
    if (*v38)
    {
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v52 = sub_2505BDC40();
      __swift_project_value_buffer(v52, (uint64_t)qword_269AC3188);
      os_log_type_t v53 = sub_2505BE3D0();
      uint64_t v54 = sub_2505BDC20();
      os_log_type_t v55 = v53;
      if (os_log_type_enabled(v54, v53))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl(&dword_2504D2000, v54, v55, "originator not administrator", v56, 2u);
        MEMORY[0x25337FF10](v56, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v57 = 337;
      long long v58 = xmmword_2505C04C0;
    }
    else
    {
      sub_2504DAEFC((uint64_t)&v38[*(int *)(v31 + 24)], (uint64_t)v17, &qword_269AB5E80);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v17, 1, v18) != 1)
      {
        uint64_t v64 = v79;
        sub_25051C8F4((uint64_t)v17, v79, type metadata accessor for UserKeyingInfo);
        uint64_t v65 = v78;
        unint64_t v66 = *(void *)(v78 + 32);
        *(void *)&long long v81 = *(void *)(v78 + 24);
        *((void *)&v81 + 1) = v66;
        sub_2504DBC4C(v81, v66);
        sub_25051AE60();
        uint64_t v67 = v80;
        uint64_t v68 = v77;
        sub_2505BE020();
        if (!v68)
        {
          long long v81 = *(_OWORD *)(v65 + 8);
          if ((sub_2505BE050() & 1) == 0)
          {
            if (qword_269AB5418 != -1) {
              swift_once();
            }
            uint64_t v69 = sub_2505BDC40();
            __swift_project_value_buffer(v69, (uint64_t)qword_269AC3188);
            os_log_type_t v70 = sub_2505BE3D0();
            uint64_t v71 = sub_2505BDC20();
            os_log_type_t v72 = v70;
            if (os_log_type_enabled(v71, v70))
            {
              int v73 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)int v73 = 0;
              _os_log_impl(&dword_2504D2000, v71, v72, "originator signature in GroupBlob failed verification", v73, 2u);
              MEMORY[0x25337FF10](v73, -1, -1);
            }

            __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
            sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
            swift_allocError();
            *(_WORD *)uint64_t v74 = 343;
            *(_OWORD *)(v74 + 8) = xmmword_2505C04A0;
            *(void *)(v74 + 24) = 0x80000002505C9F70;
            *(void *)(v74 + 32) = 0xD000000000000052;
            *(void *)(v74 + 40) = 0x80000002505C8CB0;
            swift_willThrow();
          }
          (*(void (**)(char *, uint64_t))(v75 + 8))(v67, v76);
        }
        sub_25051AF3C(v64, type metadata accessor for UserKeyingInfo);
        return sub_25051AF3C(v51, type metadata accessor for GroupMembership.MemberProperties);
      }
      sub_2504DAF60((uint64_t)v17, &qword_269AB5E80);
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v59 = sub_2505BDC40();
      __swift_project_value_buffer(v59, (uint64_t)qword_269AC3188);
      os_log_type_t v60 = sub_2505BE3D0();
      uint64_t v61 = sub_2505BDC20();
      os_log_type_t v62 = v60;
      if (os_log_type_enabled(v61, v60))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl(&dword_2504D2000, v61, v62, "originator missing key info", v63, 2u);
        MEMORY[0x25337FF10](v63, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v57 = 339;
      long long v58 = xmmword_2505C04B0;
    }
    *(_OWORD *)(v57 + 8) = v58;
    *(void *)(v57 + 24) = 0x80000002505C9F70;
    *(void *)(v57 + 32) = 0xD000000000000052;
    *(void *)(v57 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    return sub_25051AF3C(v51, type metadata accessor for GroupMembership.MemberProperties);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, 1, 1, v31);
LABEL_7:
  sub_2504DAF60((uint64_t)v30, &qword_269AB5A80);
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v44 = sub_2505BDC40();
  __swift_project_value_buffer(v44, (uint64_t)qword_269AC3188);
  os_log_type_t v45 = sub_2505BE3D0();
  uint64_t v46 = sub_2505BDC20();
  os_log_type_t v47 = v45;
  if (os_log_type_enabled(v46, v45))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl(&dword_2504D2000, v46, v47, "originator not contained in membership list of group", v48, 2u);
    MEMORY[0x25337FF10](v48, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
  swift_allocError();
  *(_WORD *)uint64_t v49 = 336;
  *(_OWORD *)(v49 + 8) = xmmword_2505C04D0;
  *(void *)(v49 + 24) = 0x80000002505C9F70;
  *(void *)(v49 + 32) = 0xD000000000000052;
  *(void *)(v49 + 40) = 0x80000002505C8CB0;
  return swift_willThrow();
}

uint64_t sub_25051F4C8(uint64_t *a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, unint64_t a10)
{
  uint64_t v413 = a5;
  uint64_t v385 = a4;
  uint64_t v426 = *MEMORY[0x263EF8340];
  uint64_t v370 = sub_2505BE040();
  uint64_t v371 = *(void *)(v370 - 8);
  MEMORY[0x270FA5388](v370, v16, v17, v18, v19);
  v369 = (char *)&v359 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A80);
  MEMORY[0x270FA5388](v21 - 8, v22, v23, v24, v25);
  uint64_t v377 = (uint64_t)&v359 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5E80);
  MEMORY[0x270FA5388](v27 - 8, v28, v29, v30, v31);
  uint64_t v372 = (uint64_t)&v359 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5ED0);
  MEMORY[0x270FA5388](v33 - 8, v34, v35, v36, v37);
  uint64_t v376 = (uint64_t)&v359 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v379 = sub_2505BE0B0();
  uint64_t v378 = *(void *)(v379 - 8);
  uint64_t v43 = MEMORY[0x270FA5388](v379, v39, v40, v41, v42);
  uint64_t v368 = (char *)&v359 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v43, v45, v46, v47, v48);
  unint64_t v375 = (char *)&v359 - v49;
  uint64_t v374 = sub_2505BE000();
  uint64_t v373 = *(void *)(v374 - 8);
  MEMORY[0x270FA5388](v374, v50, v51, v52, v53);
  uint64_t v380 = (char *)&v359 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v383 = sub_2505BDF30();
  uint64_t v382 = *(void *)(v383 - 8);
  MEMORY[0x270FA5388](v383, v55, v56, v57, v58);
  uint64_t v381 = (char *)&v359 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v384 = sub_2505BDF90();
  uint64_t v386 = *(void *)(v384 - 8);
  uint64_t v64 = MEMORY[0x270FA5388](v384, v60, v61, v62, v63);
  uint64_t v367 = (char *)&v359 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v64, v66, v67, v68, v69);
  uint64_t v387 = (char *)&v359 - v70;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  uint64_t v76 = MEMORY[0x270FA5388](v71 - 8, v72, v73, v74, v75);
  uint64_t v389 = (uint64_t)&v359 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = MEMORY[0x270FA5388](v76, v78, v79, v80, v81);
  uint64_t v392 = (uint64_t)&v359 - v83;
  MEMORY[0x270FA5388](v82, v84, v85, v86, v87);
  unint64_t v396 = (unint64_t)&v359 - v88;
  uint64_t v397 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v400 = *(void *)(v397 - 8);
  uint64_t v93 = MEMORY[0x270FA5388](v397, v89, v90, v91, v92);
  uint64_t v388 = (_DWORD *)((char *)&v359 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v99 = MEMORY[0x270FA5388](v93, v95, v96, v97, v98);
  os_log_type_t v391 = (_DWORD *)((char *)&v359 - v100);
  MEMORY[0x270FA5388](v99, v101, v102, v103, v104);
  uint64_t v395 = (_DWORD *)((char *)&v359 - v105);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
  MEMORY[0x270FA5388](v106 - 8, v107, v108, v109, v110);
  uint64_t v403 = (uint64_t)&v359 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v402 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v401 = *((void *)v402 - 1);
  MEMORY[0x270FA5388](v402, v112, v113, v114, v115);
  unint64_t v404 = (uint64_t *)((char *)&v359 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v117 = sub_2505BDA70();
  MEMORY[0x270FA5388](v117 - 8, v118, v119, v120, v121);
  uint64_t v405 = (uint64_t)&v359 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v406 = type metadata accessor for GKCrypto_AdminPlainText(0);
  uint64_t v127 = MEMORY[0x270FA5388](v406, v123, v124, v125, v126);
  uint64_t v390 = (uint64_t)&v359 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v127, v129, v130, v131, v132);
  v407 = (uint64_t *)((char *)&v359 - v133);
  uint64_t v408 = sub_2505BDDD0();
  uint64_t v409 = *(void *)(v408 - 8);
  MEMORY[0x270FA5388](v408, v134, v135, v136, v137);
  long long v412 = (char *)&v359 - ((v138 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v410 = sub_2505BDCE0();
  uint64_t v411 = *(void *)(v410 - 8);
  uint64_t v143 = MEMORY[0x270FA5388](v410, v139, v140, v141, v142);
  unint64_t v366 = (char *)&v359 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v143, v145, v146, v147, v148);
  unint64_t v416 = (char *)&v359 - v149;
  uint64_t v150 = *a1;
  unint64_t v151 = a1[1];
  uint64_t v152 = *a6;
  uint64_t v153 = a6[1];
  uint64_t v399 = *a7;
  unint64_t v398 = a7[1];
  uint64_t v394 = *a8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505BFEC0;
  *(void *)(inited + 32) = v150;
  *(void *)(inited + 40) = v151;
  unsigned int v393 = a2;
  LODWORD(v423) = bswap32(a2);
  sub_2504DBC4C(v150, v151);
  *(void *)(inited + 48) = sub_25056DAD0((uint64_t)&v423, (uint64_t)&v423 + 4);
  *(void *)(inited + 56) = v155;
  unint64_t v156 = a3[1];
  uint64_t v415 = *a3;
  uint64_t v157 = a3[2];
  unint64_t v158 = a3[3];
  *(void *)&long long v423 = v152;
  *((void *)&v423 + 1) = v153;
  if (qword_269AB5448 != -1) {
    swift_once();
  }
  unint64_t v417 = v156;
  uint64_t v159 = qword_269AC31F0;
  unint64_t v160 = *(void *)algn_269AC31F8;
  sub_2504DBC4C(qword_269AC31F0, *(unint64_t *)algn_269AC31F8);
  sub_2504DBC4C(v159, v160);
  swift_bridgeObjectRetain();
  uint64_t v161 = (void *)inited;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v161 = sub_250570DC0(0, 3, 1, (void *)inited);
  }
  unint64_t v163 = v161[2];
  unint64_t v162 = v161[3];
  uint64_t v164 = v415;
  if (v163 >= v162 >> 1) {
    uint64_t v161 = sub_250570DC0((void *)(v162 > 1), v163 + 1, 1, v161);
  }
  v161[2] = v163 + 1;
  uint64_t v165 = &v161[2 * v163];
  v165[4] = v159;
  v165[5] = v160;
  sub_250511528(v159, v160);
  uint64_t v166 = (void (*)(uint64_t, uint64_t))sub_250576544((uint64_t)v161);
  unint64_t v168 = v167;
  swift_bridgeObjectRelease();
  uint64_t v169 = (uint64_t)v416;
  unint64_t v170 = v417;
  unint64_t v171 = v414;
  sub_250590418(v413, (unint64_t *)&v423, v166, v168, v164, v417, (uint64_t)v416);
  if (v171)
  {
    swift_bridgeObjectRelease();
    return sub_250511528((uint64_t)v166, v168);
  }
  sub_250511528((uint64_t)v166, v168);
  sub_2504DBC4C(v164, v170);
  swift_bridgeObjectRetain();
  sub_2504DBC4C(v164, v170);
  uint64_t v173 = (void *)inited;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v173 = sub_250570DC0(0, *(void *)(inited + 16) + 1, 1, (void *)inited);
  }
  unint64_t v175 = v173[2];
  unint64_t v174 = v173[3];
  if (v175 >= v174 >> 1) {
    uint64_t v173 = sub_250570DC0((void *)(v174 > 1), v175 + 1, 1, v173);
  }
  v173[2] = v175 + 1;
  uint64_t v176 = &v173[2 * v175];
  unint64_t v177 = v417;
  v176[4] = v164;
  v176[5] = v177;
  sub_250511528(v164, v177);
  uint64_t v178 = sub_250576544((uint64_t)v173);
  unint64_t v180 = v179;
  swift_bridgeObjectRelease();
  sub_2504DBC4C(v157, v158);
  uint64_t v181 = v412;
  sub_25059F624(v157, v158);
  *(void *)&long long v423 = v178;
  *((void *)&v423 + 1) = v180;
  unint64_t v182 = sub_25051AE60();
  unint64_t v183 = v180;
  uint64_t v184 = v178;
  uint64_t v185 = sub_2505BDD30();
  char v187 = (uint64_t *)v186;
  unint64_t v365 = v182;
  uint64_t v413 = v184;
  unint64_t v414 = v183;
  unint64_t v425 = 0;
  long long v423 = 0u;
  long long v424 = 0u;
  sub_2504DBC4C(v185, v186);
  sub_2505BDA60();
  sub_250528338(&qword_269AB5F08, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
  uint64_t v188 = v407;
  unint64_t v189 = v406;
  sub_2505BDB30();
  uint64_t v190 = (uint64_t)v188 + *(int *)(v189 + 28);
  uint64_t v191 = v403;
  sub_2504DAEFC(v190, v403, &qword_269AB5F18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v401 + 48))(v191, 1, v402) == 1)
  {
    uint64_t v192 = v404;
    *(_OWORD *)unint64_t v404 = xmmword_2505BFEF0;
    sub_2505BDA40();
    sub_2504DAF60(v191, &qword_269AB5F18);
  }
  else
  {
    uint64_t v192 = v404;
    sub_25051C8F4(v191, (uint64_t)v404, type metadata accessor for GKCrypto_AdminMetaData);
  }
  uint64_t v194 = *v192;
  unint64_t v193 = v192[1];
  sub_2504DBC4C(*v192, v193);
  sub_25051AF3C((uint64_t)v192, type metadata accessor for GKCrypto_AdminMetaData);
  GroupKitUserID.init(_:)(v194, v193, (uint64_t *)&v423);
  uint64_t v405 = v185;
  long long v195 = v423;
  char v196 = sub_25051AAD8(v423, *((unint64_t *)&v423 + 1), v399, v398);
  sub_250511528(v195, *((unint64_t *)&v195 + 1));
  uint64_t v197 = v407;
  if (v196)
  {
    unint64_t v404 = v187;
    uint64_t v198 = (uint64_t)v407 + *(int *)(v406 + 24);
    uint64_t v199 = v396;
    sub_2504DAEFC(v198, v396, &qword_269AB5EC0);
    uint64_t v200 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v400 + 48);
    v400 += 48;
    unint64_t v402 = v200;
    unsigned int v201 = v200(v199, 1, v397);
    uint64_t v401 = v198;
    uint64_t v202 = v395;
    if (v201 == 1)
    {
      *uint64_t v395 = 0;
      *(_OWORD *)(v202 + 2) = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60(v199, &qword_269AB5EC0);
    }
    else
    {
      sub_25051C8F4(v199, (uint64_t)v395, type metadata accessor for GKCrypto_VersionedSeed);
    }
    uint64_t v211 = *((void *)v202 + 1);
    unint64_t v212 = *((void *)v202 + 2);
    sub_2504DBC4C(v211, v212);
    sub_25051AF3C((uint64_t)v202, type metadata accessor for GKCrypto_VersionedSeed);
    uint64_t v213 = sub_25055E540(v211, v212);
    unint64_t v215 = v214;
    uint64_t v217 = v216;
    unint64_t v219 = v218;
    *(void *)&long long v423 = v394;
    uint64_t v220 = (_DWORD *)sub_25051DB50();
    unint64_t v222 = v221;
    uint64_t v403 = 0;
    *((void *)&v424 + 1) = &type metadata for AdminSeed;
    unint64_t v223 = sub_25051CA18();
    unint64_t v425 = v223;
    uint64_t v224 = (void *)swift_allocObject();
    *(void *)&long long v423 = v224;
    v224[2] = v213;
    v224[3] = v215;
    v224[4] = v217;
    v224[5] = v219;
    sub_2504DBC4C(v213, v215);
    sub_25051B908(v217, v219);
    uint64_t v395 = v220;
    unint64_t v396 = v222;
    uint64_t v225 = v403;
    uint64_t v226 = sub_25056103C(&v423, 1, (uint64_t)v220, v222);
    uint64_t v403 = v225;
    if (v225)
    {
      swift_bridgeObjectRelease();
      sub_250511528((uint64_t)v395, v396);
      sub_250511528(v413, v414);
      sub_250511528(v213, v215);
      sub_25051B8D4(v217, v219);
      sub_250511528(v405, (unint64_t)v404);
      sub_25051AF3C((uint64_t)v407, type metadata accessor for GKCrypto_AdminPlainText);
      (*(void (**)(char *, uint64_t))(v409 + 8))(v181, v408);
      (*(void (**)(char *, uint64_t))(v411 + 8))(v416, v410);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v423);
    }
    unint64_t v230 = v227;
    unint64_t v231 = v229;
    unint64_t v360 = v223;
    uint64_t v361 = v213;
    unint64_t v362 = v215;
    uint64_t v363 = v217;
    unint64_t v364 = v219;
    uint64_t v232 = v226;
    uint64_t v233 = v228;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v423);
    uint64_t v419 = v232;
    unint64_t v420 = v230;
    uint64_t v421 = v233;
    unint64_t v422 = v231;
    uint64_t v234 = v395;
    unint64_t v235 = v396;
    uint64_t v236 = v403;
    sub_25055B5D4((uint64_t)v395, v396);
    if (v236)
    {
      swift_bridgeObjectRelease();
      sub_250511528((uint64_t)v234, v235);
      sub_250511528(v413, v414);
      sub_250511528(v361, v362);
      sub_25051B8D4(v363, v364);
      sub_250511528(v405, (unint64_t)v404);
      uint64_t v237 = v421;
      unint64_t v238 = v422;
      sub_250511528(v419, v420);
      sub_25051B8D4(v237, v238);
      sub_25051AF3C((uint64_t)v407, type metadata accessor for GKCrypto_AdminPlainText);
      (*(void (**)(char *, uint64_t))(v409 + 8))(v181, v408);
      return (*(uint64_t (**)(char *, uint64_t))(v411 + 8))(v416, v410);
    }
    uint64_t v239 = v392;
    sub_2504DAEFC(v401, v392, &qword_269AB5EC0);
    if (v402(v239, 1, v397) == 1)
    {
      unint64_t v240 = v391;
      *os_log_type_t v391 = 0;
      *(_OWORD *)(v240 + 2) = xmmword_2505BFEF0;
      sub_2505BDA40();
      sub_2504DAF60(v239, &qword_269AB5EC0);
    }
    else
    {
      unint64_t v240 = v391;
      sub_25051C8F4(v239, (uint64_t)v391, type metadata accessor for GKCrypto_VersionedSeed);
    }
    int v241 = *v240;
    sub_25051AF3C((uint64_t)v240, type metadata accessor for GKCrypto_VersionedSeed);
    if (v241 != v393)
    {
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v247 = sub_2505BDC40();
      __swift_project_value_buffer(v247, (uint64_t)qword_269AC3188);
      os_log_type_t v248 = sub_2505BE3D0();
      uint64_t v249 = v390;
      sub_25051B91C((uint64_t)v407, v390, type metadata accessor for GKCrypto_AdminPlainText);
      uint64_t v250 = sub_2505BDC20();
      if (os_log_type_enabled(v250, v248))
      {
        uint64_t v251 = swift_slowAlloc();
        *(_DWORD *)uint64_t v251 = 67109376;
        uint64_t v252 = v249 + *(int *)(v406 + 24);
        uint64_t v253 = v389;
        sub_2504DAEFC(v252, v389, &qword_269AB5EC0);
        if (v402(v253, 1, v397) == 1)
        {
          uint64_t v254 = v388;
          *uint64_t v388 = 0;
          *(_OWORD *)(v254 + 2) = xmmword_2505BFEF0;
          sub_2505BDA40();
          sub_2504DAF60(v389, &qword_269AB5EC0);
        }
        else
        {
          sub_25051C8F4(v389, (uint64_t)v388, type metadata accessor for GKCrypto_VersionedSeed);
        }
        int v264 = *v388;
        sub_25051AF3C((uint64_t)v388, type metadata accessor for GKCrypto_VersionedSeed);
        sub_25051AF3C(v390, type metadata accessor for GKCrypto_AdminPlainText);
        LODWORD(v423) = v264;
        sub_2505BE430();
        *(_WORD *)(v251 + 8) = 1024;
        LODWORD(v423) = v393;
        sub_2505BE430();
        _os_log_impl(&dword_2504D2000, v250, v248, "seed and group version mismatch, got %u expected %u", (uint8_t *)v251, 0xEu);
        MEMORY[0x25337FF10](v251, -1, -1);
      }
      else
      {
        sub_25051AF3C(v249, type metadata accessor for GKCrypto_AdminPlainText);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v265 = 334;
      *(_OWORD *)(v265 + 8) = xmmword_2505C04F0;
      *(void *)(v265 + 24) = 0x80000002505C9EC0;
      *(void *)(v265 + 32) = 0xD000000000000052;
      *(void *)(v265 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      goto LABEL_48;
    }
    uint64_t v242 = v419;
    unint64_t v243 = v420;
    uint64_t v245 = v421;
    unint64_t v244 = v422;
    *((void *)&v424 + 1) = &type metadata for AdminSeed;
    unint64_t v425 = v360;
    uint64_t v246 = (void *)swift_allocObject();
    *(void *)&long long v423 = v246;
    v246[2] = v242;
    v246[3] = v243;
    v246[4] = v245;
    v246[5] = v244;
    sub_2504DBC4C(v242, v243);
    sub_25051B908(v245, v244);
    if (qword_269AB5428 != -1) {
      swift_once();
    }
    uint64_t v255 = sub_250560C18(&v423, 1, qword_269AC31B0, *(unint64_t *)algn_269AC31B8);
    unint64_t v257 = v256;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v423);
    sub_2504DBC4C(v255, v257);
    sub_2504DBC4C(a9, a10);
    char v258 = sub_25050C6A8(v255, v257, a9, a10);
    sub_250511528(a9, a10);
    uint64_t v403 = v255;
    unint64_t v406 = v257;
    sub_250511528(v255, v257);
    if ((v258 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v268 = sub_2505BDC40();
      __swift_project_value_buffer(v268, (uint64_t)qword_269AC3188);
      os_log_type_t v269 = sub_2505BE3D0();
      uint64_t v270 = sub_2505BDC20();
      os_log_type_t v271 = v269;
      if (os_log_type_enabled(v270, v269))
      {
        unint64_t v272 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v272 = 0;
        _os_log_impl(&dword_2504D2000, v270, v271, "admin seed does not generate member seed in GroupBlob", v272, 2u);
        MEMORY[0x25337FF10](v272, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v273 = 353;
      long long v274 = xmmword_2505C0500;
      goto LABEL_56;
    }
    uint64_t v260 = v419;
    unint64_t v259 = v420;
    uint64_t v261 = v421;
    unint64_t v262 = v422;
    *((void *)&v424 + 1) = &type metadata for AdminSeed;
    unint64_t v425 = v360;
    uint64_t v263 = (void *)swift_allocObject();
    *(void *)&long long v423 = v263;
    v263[2] = v260;
    v263[3] = v259;
    v263[4] = v261;
    v263[5] = v262;
    sub_2504DBC4C(v260, v259);
    sub_25051B908(v261, v262);
    sub_2504DBC4C(v260, v259);
    sub_25051B908(v261, v262);
    if (qword_269AB5620 != -1) {
      swift_once();
    }
    sub_2505603C4(&v423, 1, qword_269AC36F0, *(unint64_t *)algn_269AC36F8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v423);
    sub_250511528(v260, v259);
    sub_25051B8D4(v261, v262);
    uint64_t v275 = v381;
    unint64_t v276 = v387;
    sub_2505BDF50();
    uint64_t v277 = *(void (**)(char *, uint64_t))(v386 + 8);
    v386 += 8;
    v277(v276, v384);
    uint64_t v278 = sub_2505BDF10();
    unint64_t v280 = v279;
    (*(void (**)(char *, uint64_t))(v382 + 8))(v275, v383);
    LOBYTE(v275) = sub_25051AAD8(v278, v280, *(void *)(v385 + 48), *(void *)(v385 + 56));
    sub_250511528(v278, v280);
    if ((v275 & 1) == 0) {
      goto LABEL_64;
    }
    uint64_t v282 = v419;
    unint64_t v281 = v420;
    uint64_t v283 = v421;
    unint64_t v284 = v422;
    *((void *)&v424 + 1) = &type metadata for AdminSeed;
    unint64_t v425 = v360;
    uint64_t v285 = (void *)swift_allocObject();
    *(void *)&long long v423 = v285;
    v285[2] = v282;
    v285[3] = v281;
    v285[4] = v283;
    v285[5] = v284;
    sub_2504DBC4C(v282, v281);
    sub_25051B908(v283, v284);
    sub_2504DBC4C(v282, v281);
    sub_25051B908(v283, v284);
    if (qword_269AB5628 != -1) {
      swift_once();
    }
    sub_25056041C(&v423, 1, qword_269AC3700, *(unint64_t *)algn_269AC3708);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v423);
    sub_250511528(v282, v281);
    sub_25051B8D4(v283, v284);
    unint64_t v286 = v375;
    uint64_t v287 = v380;
    sub_2505BDFA0();
    (*(void (**)(char *, uint64_t))(v373 + 8))(v287, v374);
    uint64_t v288 = sub_2505BDF10();
    unint64_t v290 = v289;
    unint64_t v402 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v378 + 8);
    ((void (*)(char *, uint64_t))v402)(v286, v379);
    LOBYTE(v286) = sub_25051AAD8(v288, v290, *(void *)(v385 + 16), *(void *)(v385 + 24));
    sub_250511528(v288, v290);
    if ((v286 & 1) == 0)
    {
LABEL_64:
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v300 = sub_2505BDC40();
      __swift_project_value_buffer(v300, (uint64_t)qword_269AC3188);
      os_log_type_t v301 = sub_2505BE3D0();
      unint64_t v302 = sub_2505BDC20();
      os_log_type_t v303 = v301;
      if (os_log_type_enabled(v302, v301))
      {
        uint64_t v304 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v304 = 0;
        _os_log_impl(&dword_2504D2000, v302, v303, "public key mismatch in administrative group", v304, 2u);
        MEMORY[0x25337FF10](v304, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v273 = 350;
      long long v274 = xmmword_2505C0510;
      goto LABEL_56;
    }
    if (!*(void *)(v394 + 16))
    {
      uint64_t v305 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v305 - 8) + 56))(v377, 1, 1, v305);
LABEL_72:
      BOOL v306 = &qword_269AB5A80;
      uint64_t v307 = (uint64_t **)&v409;
LABEL_73:
      sub_2504DAF60((uint64_t)*(v307 - 32), v306);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v378 + 56))(v376, 1, 1, v379);
LABEL_74:
      swift_bridgeObjectRelease();
      sub_2504DAF60(v376, &qword_269AB5ED0);
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v308 = sub_2505BDC40();
      __swift_project_value_buffer(v308, (uint64_t)qword_269AC3188);
      os_log_type_t v309 = sub_2505BE3D0();
      uint64_t v310 = sub_2505BDC20();
      os_log_type_t v311 = v309;
      if (os_log_type_enabled(v310, v309))
      {
        unint64_t v312 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v312 = 0;
        _os_log_impl(&dword_2504D2000, v310, v311, "originator key material missing in group creation", v312, 2u);
        MEMORY[0x25337FF10](v312, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v273 = 323;
      long long v274 = xmmword_2505C0530;
LABEL_56:
      *(_OWORD *)(v273 + 8) = v274;
      *(void *)(v273 + 24) = 0x80000002505C9EC0;
      *(void *)(v273 + 32) = 0xD000000000000052;
      *(void *)(v273 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_250511528(v403, v406);
LABEL_48:
      sub_250511528((uint64_t)v234, v396);
      sub_250511528(v413, v414);
      sub_250511528(v361, v362);
      sub_25051B8D4(v363, v364);
      sub_250511528(v405, (unint64_t)v404);
LABEL_49:
      uint64_t v266 = v421;
      unint64_t v267 = v422;
      sub_250511528(v419, v420);
      sub_25051B8D4(v266, v267);
      sub_25051AF3C((uint64_t)v407, type metadata accessor for GKCrypto_AdminPlainText);
      (*(void (**)(char *, uint64_t))(v409 + 8))(v412, v408);
      return (*(uint64_t (**)(char *, uint64_t))(v411 + 8))(v416, v410);
    }
    uint64_t v291 = v399;
    unint64_t v292 = v398;
    sub_2504DBC4C(v399, v398);
    unint64_t v293 = sub_250513064(v291, v292);
    if (v294)
    {
      unint64_t v295 = v293;
      uint64_t v401 = *(void *)(v394 + 56);
      uint64_t v296 = type metadata accessor for GroupMembership.MemberProperties(0);
      uint64_t v297 = *(void *)(v296 - 8);
      uint64_t v298 = v401 + *(void *)(v297 + 72) * v295;
      uint64_t v299 = v377;
      sub_25051B91C(v298, v377, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v297 + 56))(v299, 0, 1, v296);
    }
    else
    {
      uint64_t v296 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v296 - 8) + 56))(v377, 1, 1, v296);
    }
    sub_250511528(v399, v398);
    type metadata accessor for GroupMembership.MemberProperties(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v296 - 8) + 48))(v377, 1, v296) == 1) {
      goto LABEL_72;
    }
    uint64_t v313 = *(int *)(v296 + 24);
    uint64_t v314 = v377;
    uint64_t v315 = v372;
    sub_2504DAEFC(v377 + v313, v372, &qword_269AB5E80);
    sub_25051AF3C(v314, type metadata accessor for GroupMembership.MemberProperties);
    uint64_t v316 = type metadata accessor for UserKeyingInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v316 - 8) + 48))(v315, 1, v316) == 1)
    {
      BOOL v306 = &qword_269AB5E80;
      uint64_t v307 = &v404;
      goto LABEL_73;
    }
    uint64_t v317 = v372;
    uint64_t v318 = v372 + *(int *)(v316 + 28);
    uint64_t v319 = v378;
    uint64_t v320 = v376;
    uint64_t v321 = v379;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v378 + 16))(v376, v318, v379);
    sub_25051AF3C(v317, type metadata accessor for UserKeyingInfo);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v319 + 56))(v320, 0, 1, v321);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v319 + 48))(v320, 1, v321) == 1) {
      goto LABEL_74;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v378 + 32))(v368, v376, v379);
    unint64_t v322 = v407[1];
    *(void *)&long long v423 = *v407;
    *((void *)&v423 + 1) = v322;
    sub_2504DBC4C(v423, v322);
    sub_2505BE020();
    uint64_t v323 = sub_250503C0C((void *)inited);
    unint64_t v325 = v324;
    *(void *)&long long v423 = v323;
    *((void *)&v423 + 1) = v324;
    char v326 = sub_2505BE050();
    sub_250511528(v323, v325);
    if ((v326 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v332 = sub_2505BDC40();
      __swift_project_value_buffer(v332, (uint64_t)qword_269AC3188);
      os_log_type_t v333 = sub_2505BE3D0();
      v334 = sub_2505BDC20();
      os_log_type_t v335 = v333;
      if (os_log_type_enabled(v334, v333))
      {
        uint64_t v336 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v336 = 0;
        _os_log_impl(&dword_2504D2000, v334, v335, "originator signature in admin blob failed verification", v336, 2u);
        MEMORY[0x25337FF10](v336, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
      swift_allocError();
      *(_WORD *)uint64_t v337 = 351;
      *(_OWORD *)(v337 + 8) = xmmword_2505C0520;
      *(void *)(v337 + 24) = 0x80000002505C9EC0;
      *(void *)(v337 + 32) = 0xD000000000000052;
      *(void *)(v337 + 40) = 0x80000002505C8CB0;
      swift_willThrow();
      sub_250511528(v403, v406);
      sub_250511528((uint64_t)v234, v396);
      sub_250511528(v413, v414);
      sub_250511528(v361, v362);
      sub_25051B8D4(v363, v364);
      sub_250511528(v405, (unint64_t)v404);
      (*(void (**)(char *, uint64_t))(v371 + 8))(v369, v370);
      ((void (*)(char *, uint64_t))v402)(v368, v379);
      goto LABEL_49;
    }
    uint64_t v328 = v419;
    unint64_t v327 = v420;
    uint64_t v329 = v421;
    unint64_t v330 = v422;
    *((void *)&v424 + 1) = &type metadata for AdminSeed;
    unint64_t v425 = v360;
    uint64_t v331 = (void *)swift_allocObject();
    *(void *)&long long v423 = v331;
    v331[2] = v328;
    v331[3] = v327;
    v331[4] = v329;
    v331[5] = v330;
    sub_2504DBC4C(v328, v327);
    sub_25051B908(v329, v330);
    sub_2504DBC4C(v328, v327);
    sub_25051B908(v329, v330);
    if (qword_269AB5618 != -1) {
      swift_once();
    }
    sub_2505603C4(&v423, 1, qword_269AC36E0, *(unint64_t *)algn_269AC36E8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v423);
    sub_250511528(v328, v327);
    sub_25051B8D4(v329, v330);
    uint64_t v339 = v419;
    unint64_t v338 = v420;
    uint64_t v340 = v421;
    unint64_t v341 = v422;
    *((void *)&v424 + 1) = &type metadata for AdminSeed;
    unint64_t v425 = v360;
    uint64_t v342 = (void *)swift_allocObject();
    *(void *)&long long v423 = v342;
    v342[2] = v339;
    v342[3] = v338;
    v342[4] = v340;
    v342[5] = v341;
    sub_2504DBC4C(v339, v338);
    sub_25051B908(v340, v341);
    sub_2504DBC4C(v339, v338);
    sub_25051B908(v340, v341);
    if (qword_269AB5608 != -1) {
      swift_once();
    }
    sub_2505601DC(&v423, 1, qword_269AC36C0, *(unint64_t *)algn_269AC36C8, (uint64_t)v366);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v423);
    sub_250511528(v339, v338);
    sub_25051B8D4(v340, v341);
    uint64_t v343 = swift_bridgeObjectRetain();
    uint64_t v348 = sub_2505B7E70(v343, v344, v345, v346, v347);
    swift_bridgeObjectRelease();
    sub_2505AFBF8(v348, &v423);
    uint64_t v401 = v423;
    uint64_t v418 = v423;
    uint64_t v349 = qword_269AC31F0;
    unint64_t v350 = *(void *)algn_269AC31F8;
    sub_2504DBC4C(qword_269AC31F0, *(unint64_t *)algn_269AC31F8);
    sub_2504DBC4C(v349, v350);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t inited = (uint64_t)sub_250570DC0(0, *(void *)(inited + 16) + 1, 1, (void *)inited);
    }
    unint64_t v352 = *(void *)(inited + 16);
    unint64_t v351 = *(void *)(inited + 24);
    if (v352 >= v351 >> 1) {
      uint64_t inited = (uint64_t)sub_250570DC0((void *)(v351 > 1), v352 + 1, 1, (void *)inited);
    }
    *(void *)(inited + 16) = v352 + 1;
    uint64_t v353 = inited + 16 * v352;
    *(void *)(v353 + 32) = v349;
    *(void *)(v353 + 40) = v350;
    sub_250511528(v349, v350);
    uint64_t v354 = (char *)sub_250576544(inited);
    uint64_t v356 = v355;
    swift_bridgeObjectRelease();
    sub_2505917CC(v367, v366, &v418, v354, v356, v415, v417);
    sub_250511528((uint64_t)v354, (unint64_t)v356);
    sub_250511528(v403, v406);
    sub_250511528((uint64_t)v234, v396);
    sub_250511528(v413, v414);
    sub_250511528(v361, v362);
    sub_25051B8D4(v363, v364);
    sub_250511528(v405, (unint64_t)v404);
    swift_bridgeObjectRelease();
    v357 = *(void (**)(char *, uint64_t))(v411 + 8);
    uint64_t v358 = v410;
    v357(v366, v410);
    v277(v367, v384);
    (*(void (**)(char *, uint64_t))(v371 + 8))(v369, v370);
    ((void (*)(char *, uint64_t))v402)(v368, v379);
    sub_25051AF3C((uint64_t)v407, type metadata accessor for GKCrypto_AdminPlainText);
    (*(void (**)(char *, uint64_t))(v409 + 8))(v412, v408);
    v357(v416, v358);
    return v419;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v203 = sub_2505BDC40();
    __swift_project_value_buffer(v203, (uint64_t)qword_269AC3188);
    os_log_type_t v204 = sub_2505BE3D0();
    uint64_t v205 = sub_2505BDC20();
    os_log_type_t v206 = v204;
    BOOL v207 = os_log_type_enabled(v205, v204);
    uint64_t v208 = v405;
    if (v207)
    {
      uint64_t v209 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v209 = 0;
      _os_log_impl(&dword_2504D2000, v205, v206, "admin and member originator conflict in GroupBlob", v209, 2u);
      MEMORY[0x25337FF10](v209, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v210 = 352;
    *(_OWORD *)(v210 + 8) = xmmword_2505C04E0;
    *(void *)(v210 + 24) = 0x80000002505C9EC0;
    *(void *)(v210 + 32) = 0xD000000000000052;
    *(void *)(v210 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
    sub_250511528(v413, v414);
    sub_250511528(v208, (unint64_t)v187);
    sub_25051AF3C((uint64_t)v197, type metadata accessor for GKCrypto_AdminPlainText);
    (*(void (**)(char *, uint64_t))(v409 + 8))(v181, v408);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v411 + 8))(v169, v410);
  }
}

uint64_t sub_250522798(uint64_t a1, long long *a2, unsigned char *a3, int a4)
{
  uint64_t v38 = sub_2505BE040();
  uint64_t v31 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for GKCrypto_SeedBlobRequest(0);
  MEMORY[0x270FA5388](v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v20) = *a3;
  long long v32 = *a2;
  char v33 = v20;
  int v34 = a4;
  uint64_t v35 = a1;
  sub_250528338(&qword_269AB5F48, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
  sub_2505BDB80();
  uint64_t v22 = sub_25050CE24();
  unint64_t v24 = v23;
  uint64_t v36 = v22;
  unint64_t v37 = v23;
  sub_25051AE60();
  uint64_t v25 = a1;
  sub_2505BDFF0();
  sub_250511528(v22, v24);
  if (v4)
  {
    sub_25051AF3C((uint64_t)v21, type metadata accessor for GKCrypto_SeedBlobRequest);
  }
  else
  {
    uint64_t v26 = sub_2505BE010();
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v38);
    sub_250511528(*((void *)v21 + 7), *((void *)v21 + 8));
    *((void *)v21 + 7) = v26;
    *((void *)v21 + 8) = v28;
    uint64_t v25 = sub_2505BDB40();
    sub_25051AF3C((uint64_t)v21, type metadata accessor for GKCrypto_SeedBlobRequest);
  }
  return v25;
}

unint64_t sub_250522A2C()
{
  unint64_t result = qword_269AB5A98;
  if (!qword_269AB5A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5A98);
  }
  return result;
}

uint64_t sub_250522A80(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_2505BDC40();
    __swift_project_value_buffer(v6, (uint64_t)qword_269AC3188);
    os_log_type_t v7 = sub_2505BE3D0();
    uint64_t v8 = sub_2505BDC20();
    os_log_type_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_2504D2000, v8, v9, "missing seed diversifier", v10, 2u);
      MEMORY[0x25337FF10](v10, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_250522D7C((unint64_t *)&qword_269AB59E8, &qword_269AB59E0);
    swift_allocError();
    *(_WORD *)uint64_t v11 = 372;
    *(_OWORD *)(v11 + 8) = xmmword_2505C0540;
    *(void *)(v11 + 24) = 0x80000002505C97A0;
    *(void *)(v11 + 32) = 0xD000000000000052;
    *(void *)(v11 + 40) = 0x80000002505C8CB0;
    swift_willThrow();
  }
  else
  {
    unint64_t v23 = &type metadata for AdminSeed;
    unint64_t v24 = sub_25051CA18();
    uint64_t v16 = (void *)swift_allocObject();
    v22[0] = v16;
    v16[2] = a1;
    v16[3] = a2;
    v16[4] = a3;
    v16[5] = a4;
    sub_25051B908(a3, a4);
    sub_2504DBC4C(a1, a2);
    sub_25051B908(a3, a4);
    if (qword_269AB5428 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_250560C18(v22, 1, qword_269AC31B0, *(unint64_t *)algn_269AC31B8);
    if (!v4)
    {
      uint64_t v19 = v17;
      unint64_t v20 = v18;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      unint64_t v23 = &type metadata for MemberSeed;
      unint64_t v24 = sub_250522A2C();
      v22[0] = v19;
      v22[1] = v20;
      sub_2504DBC4C(v19, v20);
      uint64_t v5 = sub_250560C18(v22, 1, a3, a4);
      sub_250511528(v19, v20);
    }
    sub_25051B8D4(a3, a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  return v5;
}

uint64_t sub_250522D7C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250522DC0(uint64_t a1)
{
  return sub_2505007C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_250522DE0(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    int v7 = 4;
  }
  else {
    int v7 = 0;
  }
  switch(v7 | (a2 >> 60) & 3)
  {
    case 0uLL:
    case 4uLL:
      goto LABEL_6;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      a2 &= 0xCFFFFFFFFFFFFFFFLL;
LABEL_6:
      sub_250511528(result, a2);
      uint64_t result = sub_25051B8D4(a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_250522E78()
{
  unint64_t result = qword_269AB5AE0;
  if (!qword_269AB5AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5AE0);
  }
  return result;
}

unint64_t sub_250522ECC()
{
  unint64_t result = qword_269AB5AE8;
  if (!qword_269AB5AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5AE8);
  }
  return result;
}

unint64_t sub_250522F20()
{
  unint64_t result = qword_269AB5AF0;
  if (!qword_269AB5AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5AF0);
  }
  return result;
}

unint64_t sub_250522F74()
{
  unint64_t result = qword_269AB5B48;
  if (!qword_269AB5B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5B48);
  }
  return result;
}

unint64_t sub_250522FC8()
{
  unint64_t result = qword_269AB5B50;
  if (!qword_269AB5B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5B50);
  }
  return result;
}

unint64_t sub_25052301C()
{
  unint64_t result = qword_269AB5B58;
  if (!qword_269AB5B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5B58);
  }
  return result;
}

unint64_t sub_250523070()
{
  unint64_t result = qword_269AB5B60;
  if (!qword_269AB5B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5B60);
  }
  return result;
}

unint64_t sub_2505230C4()
{
  unint64_t result = qword_269AB5B68;
  if (!qword_269AB5B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5B68);
  }
  return result;
}

unint64_t sub_250523118()
{
  unint64_t result = qword_269AB5B70;
  if (!qword_269AB5B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5B70);
  }
  return result;
}

unint64_t sub_25052316C()
{
  unint64_t result = qword_269AB5BB0;
  if (!qword_269AB5BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5BB0);
  }
  return result;
}

unint64_t sub_2505231C0()
{
  unint64_t result = qword_269AB5BB8;
  if (!qword_269AB5BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5BB8);
  }
  return result;
}

unint64_t sub_250523214()
{
  unint64_t result = qword_269AB5BC8;
  if (!qword_269AB5BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5BC8);
  }
  return result;
}

unint64_t sub_250523268()
{
  unint64_t result = qword_269AB5BD8;
  if (!qword_269AB5BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5BD8);
  }
  return result;
}

unint64_t sub_2505232BC()
{
  unint64_t result = qword_269AB5BF0;
  if (!qword_269AB5BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5BF0);
  }
  return result;
}

unint64_t sub_250523310()
{
  unint64_t result = qword_269AB5C08;
  if (!qword_269AB5C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C08);
  }
  return result;
}

unint64_t sub_250523364()
{
  unint64_t result = qword_269AB5C20;
  if (!qword_269AB5C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C20);
  }
  return result;
}

unint64_t sub_2505233B8()
{
  unint64_t result = qword_269AB5C38;
  if (!qword_269AB5C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C38);
  }
  return result;
}

unint64_t sub_250523410()
{
  unint64_t result = qword_269AB5C48;
  if (!qword_269AB5C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C48);
  }
  return result;
}

unint64_t sub_250523468()
{
  unint64_t result = qword_269AB5C50;
  if (!qword_269AB5C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C50);
  }
  return result;
}

unint64_t sub_2505234C0()
{
  unint64_t result = qword_269AB5C58;
  if (!qword_269AB5C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C58);
  }
  return result;
}

unint64_t sub_250523518()
{
  unint64_t result = qword_269AB5C60;
  if (!qword_269AB5C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C60);
  }
  return result;
}

unint64_t sub_250523570()
{
  unint64_t result = qword_269AB5C68;
  if (!qword_269AB5C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C68);
  }
  return result;
}

unint64_t sub_2505235C8()
{
  unint64_t result = qword_269AB5C70;
  if (!qword_269AB5C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C70);
  }
  return result;
}

unint64_t sub_250523620()
{
  unint64_t result = qword_269AB5C78;
  if (!qword_269AB5C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C78);
  }
  return result;
}

unint64_t sub_250523678()
{
  unint64_t result = qword_269AB5C80;
  if (!qword_269AB5C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C80);
  }
  return result;
}

unint64_t sub_2505236D0()
{
  unint64_t result = qword_269AB5C88;
  if (!qword_269AB5C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5C88);
  }
  return result;
}

uint64_t sub_250523724@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 32);
  return result;
}

uint64_t sub_25052376C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_2505237B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_250523800@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 64);
  return result;
}

uint64_t sub_250523848(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v3 + 64) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationResult()
{
  return &type metadata for SynchronizationResult;
}

ValueMetadata *type metadata accessor for GroupRole()
{
  return &type metadata for GroupRole;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus()
{
  return &type metadata for GroupRole.RSVPStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_2504DBC4C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for GroupID(uint64_t a1)
{
  return sub_250511528(*(void *)a1, *(void *)(a1 + 8));
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for GroupID(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_250511528(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for GroupID()
{
  return &type metadata for GroupID;
}

ValueMetadata *type metadata accessor for GroupKitUserID()
{
  return &type metadata for GroupKitUserID;
}

void *initializeBufferWithCopyOfBuffer for UserDSID(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for UserDSID()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for UserDSID(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for UserDSID(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDSID(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDSID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDSID()
{
  return &type metadata for UserDSID;
}

ValueMetadata *type metadata accessor for KeyShare()
{
  return &type metadata for KeyShare;
}

ValueMetadata *type metadata accessor for KeyOffset()
{
  return &type metadata for KeyOffset;
}

uint64_t *assignWithCopy for MemberSeed(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_2504DBC4C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_250511528(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MemberSeed(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MemberSeed(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Nonce()
{
  return &type metadata for Nonce;
}

uint64_t sub_250523BE4()
{
  return type metadata accessor for Group(0);
}

void sub_250523BEC()
{
  type metadata accessor for UserKeyingInfo(319);
  if (v0 <= 0x3F)
  {
    sub_2505245C0();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for Group(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Group);
}

uint64_t dispatch thunk of Group.memberRole.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of Group.membership.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of Group.version.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of Group.groupNeedsSeedValidation.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of Group.deleteGroupStateFromDeviceToDeviceEncryptedContainer()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of Group.__allocating_init(groupID:originatorGroupUserID:dsid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 600) + **(int **)(v3 + 600));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_250523F24;
  return v10(a1, a2, a3);
}

uint64_t sub_250523F24(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of Group.initiateMembershipUpdate(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of Group.initiateMembershipUpdate<A, B>(addMembership:deleteMembership:toggleRoleMembership:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of Group.finalizeMembershipUpdate(response:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of Group.signNonceForGroupBlobRequest(nonce:dsid:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 648) + **(int **)(*(void *)v2 + 648));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_2505241F4;
  return v8(a1, a2);
}

uint64_t sub_2505241F4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t dispatch thunk of Group.initiateVersionUpdate(newVersion:updatedGroupBlob:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of Group.retrieveGroupMembershipAndRoles()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of Group.retrieveGroupMembership()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of Group.validateMemberKeyingMaterial(userKeyingMaterial:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of Group.createSeedBlobRequest(nonce:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of Group.validateSeedBlobsAndFinalizeGroup<A>(seedBlobs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of Group.createDestroyGroupRequest(nonce:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of Group.createLeaveGroupRequest(nonce:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of Group.createDemoteAdministratorRequest(nonce:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of Group.createRSVPQueueRequest(nonce:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of Group.processRSVPQueueRequest(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

void sub_2505245C0()
{
  if (!qword_269AB5CB0)
  {
    type metadata accessor for Group.ValidateGroupMemberKeysTransition(255);
    unint64_t v0 = sub_2505BE410();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269AB5CB0);
    }
  }
}

uint64_t destroy for Group.ServerUpdateBlobs(uint64_t *a1)
{
  sub_250511528(*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[4];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_250511528(a1[3], v3);
  }
  unint64_t v4 = a1[6];
  if (v4 >> 60 != 15) {
    uint64_t result = sub_250511528(a1[5], v4);
  }
  unint64_t v5 = a1[8];
  if (v5 >> 60 != 15)
  {
    uint64_t v6 = a1[7];
    return sub_250511528(v6, v5);
  }
  return result;
}

uint64_t initializeWithCopy for Group.ServerUpdateBlobs(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_2504DBC4C(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v6 = a2 + 3;
  unint64_t v7 = a2[4];
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v6;
  }
  else
  {
    uint64_t v8 = *(void *)v6;
    sub_2504DBC4C(v8, v7);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v7;
  }
  uint64_t v9 = a2 + 5;
  unint64_t v10 = a2[6];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_2504DBC4C(*v9, a2[6]);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v10;
  }
  uint64_t v12 = a2 + 7;
  unint64_t v13 = a2[8];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_2504DBC4C(*v12, v13);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v13;
  }
  return a1;
}

uint64_t *assignWithCopy for Group.ServerUpdateBlobs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_2504DBC4C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_250511528(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a2 + 3;
  unint64_t v9 = a2[4];
  if ((unint64_t)a1[4] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *v8;
      sub_2504DBC4C(*v8, a2[4]);
      a1[3] = v10;
      a1[4] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_250524984((uint64_t)(a1 + 3));
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  uint64_t v11 = *v8;
  sub_2504DBC4C(*v8, a2[4]);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v11;
  a1[4] = v9;
  sub_250511528(v12, v13);
LABEL_8:
  uint64_t v14 = a2 + 5;
  unint64_t v15 = a2[6];
  if ((unint64_t)a1[6] >> 60 == 15)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *v14;
      sub_2504DBC4C(*v14, a2[6]);
      a1[5] = v16;
      a1[6] = v15;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
    sub_250524984((uint64_t)(a1 + 5));
LABEL_13:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  uint64_t v17 = *v14;
  sub_2504DBC4C(*v14, a2[6]);
  uint64_t v18 = a1[5];
  unint64_t v19 = a1[6];
  a1[5] = v17;
  a1[6] = v15;
  sub_250511528(v18, v19);
LABEL_15:
  unint64_t v20 = a2 + 7;
  unint64_t v21 = a2[8];
  if ((unint64_t)a1[8] >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v23 = *v20;
      sub_2504DBC4C(*v20, v21);
      uint64_t v24 = a1[7];
      unint64_t v25 = a1[8];
      a1[7] = v23;
      a1[8] = v21;
      sub_250511528(v24, v25);
      return a1;
    }
    sub_250524984((uint64_t)(a1 + 7));
    goto LABEL_20;
  }
  if (v21 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 7) = *(_OWORD *)v20;
    return a1;
  }
  uint64_t v22 = *v20;
  sub_2504DBC4C(*v20, v21);
  a1[7] = v22;
  a1[8] = v21;
  return a1;
}

uint64_t sub_250524984(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void *assignWithTake for Group.ServerUpdateBlobs(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_250511528(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a2 + 24);
  unint64_t v7 = a1[4];
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    sub_250524984((uint64_t)(a1 + 3));
LABEL_4:
    *(_OWORD *)(a1 + 3) = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = a1[3];
  a1[3] = *(void *)v6;
  a1[4] = v8;
  sub_250511528(v9, v7);
LABEL_6:
  uint64_t v10 = (_OWORD *)(a2 + 40);
  unint64_t v11 = a1[6];
  if (v11 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 5) = *v10;
    goto LABEL_11;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v12 >> 60 == 15)
  {
    sub_250524984((uint64_t)(a1 + 5));
    goto LABEL_9;
  }
  uint64_t v13 = a1[5];
  a1[5] = *(void *)v10;
  a1[6] = v12;
  sub_250511528(v13, v11);
LABEL_11:
  uint64_t v14 = (void *)(a2 + 56);
  unint64_t v15 = a1[8];
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = *(void *)(a2 + 64);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = a1[7];
      a1[7] = *v14;
      a1[8] = v16;
      sub_250511528(v17, v15);
      return a1;
    }
    sub_250524984((uint64_t)(a1 + 7));
  }
  *(_OWORD *)(a1 + 7) = *(_OWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for Group.ServerUpdateBlobs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Group.ServerUpdateBlobs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Group.ServerUpdateBlobs()
{
  return &type metadata for Group.ServerUpdateBlobs;
}

uint64_t getEnumTagSinglePayload for Group.GroupState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Group.GroupState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *__n128 result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250524D38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Group.GroupState()
{
  return &type metadata for Group.GroupState;
}

uint64_t sub_250524D7C()
{
  return 0;
}

ValueMetadata *type metadata accessor for Nonce.CodingKeys()
{
  return &type metadata for Nonce.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyOffset.CodingKeys()
{
  return &type metadata for KeyOffset.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyShare.CodingKeys()
{
  return &type metadata for KeyShare.CodingKeys;
}

ValueMetadata *type metadata accessor for UserDSID.CodingKeys()
{
  return &type metadata for UserDSID.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupKitUserID.CodingKeys()
{
  return &type metadata for GroupKitUserID.CodingKeys;
}

uint64_t _s14GroupKitCrypto5NonceV10CodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s14GroupKitCrypto5NonceV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x250524EC0);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupID.CodingKeys()
{
  return &type metadata for GroupID.CodingKeys;
}

uint64_t _s14GroupKitCrypto9GroupRoleO10RSVPStatusOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14GroupKitCrypto9GroupRoleO10RSVPStatusOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x250525054);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.CodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.AcceptCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.AcceptCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.RejectCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.RejectCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.DemoteFromAdministratorCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.DemoteFromAdministratorCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.LeaveCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.LeaveCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.DestroyCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.DestroyCodingKeys;
}

unsigned char *_s14GroupKitCrypto21SynchronizationResultOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2505251A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupRole.CodingKeys()
{
  return &type metadata for GroupRole.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.AdministratorCodingKeys()
{
  return &type metadata for GroupRole.AdministratorCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.MemberCodingKeys()
{
  return &type metadata for GroupRole.MemberCodingKeys;
}

uint64_t *sub_250525200(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    BOOL v7 = (uint64_t *)((char *)a1 + v6);
    int v8 = (char *)a2 + v6;
    *(_DWORD *)((char *)a1 + v6) = *(_DWORD *)((char *)a2 + v6);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    unint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 16);
    swift_bridgeObjectRetain();
    sub_2504DBC4C(v9, v10);
    v7[1] = v9;
    _OWORD v7[2] = v10;
    uint64_t v11 = *((void *)v8 + 3);
    unint64_t v12 = *((void *)v8 + 4);
    sub_2504DBC4C(v11, v12);
    v7[3] = v11;
    v7[4] = v12;
    uint64_t v13 = type metadata accessor for GKCrypto_GroupBlob(0);
    uint64_t v14 = *(int *)(v13 + 28);
    unint64_t v15 = (char *)v7 + v14;
    unint64_t v16 = &v8[v14];
    uint64_t v17 = sub_2505BDA50();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    uint64_t v62 = v13;
    uint64_t v19 = *(int *)(v13 + 32);
    unint64_t v20 = (void *)((char *)v7 + v19);
    unint64_t v21 = &v8[v19];
    uint64_t v22 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      *unint64_t v20 = *(void *)v21;
      uint64_t v25 = *(int *)(v22 + 20);
      uint64_t v26 = v18;
      uint64_t v27 = v17;
      uint64_t v28 = (char *)v20 + v25;
      uint64_t v29 = &v21[v25];
      swift_bridgeObjectRetain();
      uint64_t v30 = v28;
      uint64_t v17 = v27;
      uint64_t v18 = v26;
      v26(v30, v29, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    uint64_t v31 = *(int *)(v62 + 36);
    long long v32 = (void *)((char *)v7 + v31);
    char v33 = &v8[v31];
    uint64_t v34 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      uint64_t v59 = v18;
      uint64_t v60 = v17;
      uint64_t v37 = *(void *)v33;
      unint64_t v38 = *((void *)v33 + 1);
      sub_2504DBC4C(*(void *)v33, v38);
      *long long v32 = v37;
      v32[1] = v38;
      uint64_t v39 = *((void *)v33 + 2);
      unint64_t v40 = *((void *)v33 + 3);
      sub_2504DBC4C(v39, v40);
      void v32[2] = v39;
      v32[3] = v40;
      uint64_t v41 = *((void *)v33 + 4);
      unint64_t v42 = *((void *)v33 + 5);
      sub_2504DBC4C(v41, v42);
      v32[4] = v41;
      v32[5] = v42;
      uint64_t v43 = *((void *)v33 + 6);
      unint64_t v44 = *((void *)v33 + 7);
      sub_2504DBC4C(v43, v44);
      v32[6] = v43;
      v32[7] = v44;
      uint64_t v18 = v59;
      uint64_t v17 = v60;
      v59((char *)v32 + *(int *)(v34 + 32), &v33[*(int *)(v34 + 32)], v60);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v45 = *(int *)(v62 + 40);
    uint64_t v46 = (void *)((char *)v7 + v45);
    uint64_t v47 = &v8[v45];
    uint64_t v48 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      uint64_t v51 = v17;
      uint64_t v52 = *(void *)v47;
      unint64_t v53 = *((void *)v47 + 1);
      sub_2504DBC4C(*(void *)v47, v53);
      *uint64_t v46 = v52;
      v46[1] = v53;
      uint64_t v54 = *((void *)v47 + 2);
      unint64_t v55 = *((void *)v47 + 3);
      sub_2504DBC4C(v54, v55);
      v46[2] = v54;
      v46[3] = v55;
      uint64_t v56 = *((void *)v47 + 4);
      unint64_t v57 = *((void *)v47 + 5);
      sub_2504DBC4C(v56, v57);
      v46[4] = v56;
      v46[5] = v57;
      v18((char *)v46 + *(int *)(v48 + 28), &v47[*(int *)(v48 + 28)], v51);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_2505256CC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  sub_250511528(*(void *)(v4 + 8), *(void *)(v4 + 16));
  sub_250511528(*(void *)(v4 + 24), *(void *)(v4 + 32));
  uint64_t v5 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v6 = v4 + v5[7];
  uint64_t v7 = sub_2505BDA50();
  unint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v16(v6, v7);
  uint64_t v8 = v4 + v5[8];
  uint64_t v9 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    v16(v8 + *(int *)(v9 + 20), v7);
  }
  uint64_t v10 = v4 + v5[9];
  uint64_t v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    sub_250511528(*(void *)v10, *(void *)(v10 + 8));
    sub_250511528(*(void *)(v10 + 16), *(void *)(v10 + 24));
    sub_250511528(*(void *)(v10 + 32), *(void *)(v10 + 40));
    sub_250511528(*(void *)(v10 + 48), *(void *)(v10 + 56));
    v16(v10 + *(int *)(v11 + 32), v7);
  }
  uint64_t v12 = v4 + v5[10];
  uint64_t v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (!result)
  {
    sub_250511528(*(void *)v12, *(void *)(v12 + 8));
    sub_250511528(*(void *)(v12 + 16), *(void *)(v12 + 24));
    sub_250511528(*(void *)(v12 + 32), *(void *)(v12 + 40));
    uint64_t v15 = v12 + *(int *)(v13 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(v15, v7);
  }
  return result;
}

void *sub_250525918(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (void *)((char *)a1 + v3);
  uint64_t v5 = (char *)a2 + v3;
  *(_DWORD *)((char *)a1 + v3) = *(_DWORD *)((char *)a2 + v3);
  uint64_t v6 = *(void *)((char *)a2 + v3 + 8);
  unint64_t v7 = *(void *)((char *)a2 + v3 + 16);
  swift_bridgeObjectRetain();
  sub_2504DBC4C(v6, v7);
  v4[1] = v6;
  v4[2] = v7;
  uint64_t v8 = *((void *)v5 + 3);
  unint64_t v9 = *((void *)v5 + 4);
  sub_2504DBC4C(v8, v9);
  v4[3] = v8;
  v4[4] = v9;
  uint64_t v10 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v11 = v10[7];
  uint64_t v12 = (char *)v4 + v11;
  uint64_t v13 = &v5[v11];
  uint64_t v14 = sub_2505BDA50();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  uint64_t v16 = v10[8];
  uint64_t v17 = (void *)((char *)v4 + v16);
  uint64_t v18 = &v5[v16];
  uint64_t v19 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    *uint64_t v17 = *(void *)v18;
    uint64_t v22 = *(int *)(v19 + 20);
    uint64_t v23 = v14;
    uint64_t v24 = v15;
    uint64_t v25 = (char *)v17 + v22;
    uint64_t v26 = &v18[v22];
    swift_bridgeObjectRetain();
    uint64_t v27 = v25;
    uint64_t v15 = v24;
    uint64_t v14 = v23;
    v15(v27, v26, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v28 = v10[9];
  uint64_t v29 = (void *)((char *)v4 + v28);
  uint64_t v30 = &v5[v28];
  uint64_t v31 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    uint64_t v56 = v15;
    uint64_t v34 = *(void *)v30;
    unint64_t v35 = *((void *)v30 + 1);
    sub_2504DBC4C(*(void *)v30, v35);
    *uint64_t v29 = v34;
    v29[1] = v35;
    uint64_t v36 = *((void *)v30 + 2);
    unint64_t v37 = *((void *)v30 + 3);
    sub_2504DBC4C(v36, v37);
    v29[2] = v36;
    v29[3] = v37;
    uint64_t v38 = *((void *)v30 + 4);
    unint64_t v39 = *((void *)v30 + 5);
    sub_2504DBC4C(v38, v39);
    v29[4] = v38;
    v29[5] = v39;
    uint64_t v40 = *((void *)v30 + 6);
    unint64_t v41 = *((void *)v30 + 7);
    sub_2504DBC4C(v40, v41);
    v29[6] = v40;
    v29[7] = v41;
    uint64_t v15 = v56;
    v56((char *)v29 + *(int *)(v31 + 32), &v30[*(int *)(v31 + 32)], v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v42 = v10[10];
  uint64_t v43 = (void *)((char *)v4 + v42);
  unint64_t v44 = &v5[v42];
  uint64_t v45 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    uint64_t v48 = v15;
    uint64_t v49 = *(void *)v44;
    unint64_t v50 = *((void *)v44 + 1);
    sub_2504DBC4C(*(void *)v44, v50);
    *uint64_t v43 = v49;
    v43[1] = v50;
    uint64_t v51 = *((void *)v44 + 2);
    unint64_t v52 = *((void *)v44 + 3);
    sub_2504DBC4C(v51, v52);
    void v43[2] = v51;
    v43[3] = v52;
    uint64_t v53 = *((void *)v44 + 4);
    unint64_t v54 = *((void *)v44 + 5);
    sub_2504DBC4C(v53, v54);
    v43[4] = v53;
    v43[5] = v54;
    v48((char *)v43 + *(int *)(v45 + 28), &v44[*(int *)(v45 + 28)], v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  uint64_t result = a1;
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return result;
}

void *sub_250525D8C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = a3;
  uint64_t v98 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v99 = a1;
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  uint64_t v9 = *((void *)v8 + 1);
  unint64_t v10 = *((void *)v8 + 2);
  sub_2504DBC4C(v9, v10);
  uint64_t v11 = *((void *)v7 + 1);
  unint64_t v12 = *((void *)v7 + 2);
  *((void *)v7 + 1) = v9;
  *((void *)v7 + 2) = v10;
  sub_250511528(v11, v12);
  uint64_t v13 = *((void *)v8 + 3);
  unint64_t v14 = *((void *)v8 + 4);
  sub_2504DBC4C(v13, v14);
  uint64_t v15 = *((void *)v7 + 3);
  unint64_t v16 = *((void *)v7 + 4);
  *((void *)v7 + 3) = v13;
  *((void *)v7 + 4) = v14;
  sub_250511528(v15, v16);
  uint64_t v17 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v18 = v17[7];
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  uint64_t v100 = sub_2505BDA50();
  uint64_t v96 = *(void *)(v100 - 8);
  uint64_t v95 = *(void (**)(char *, char *))(v96 + 24);
  v95(v19, v20);
  uint64_t v21 = v17[8];
  uint64_t v22 = &v7[v21];
  uint64_t v23 = &v8[v21];
  uint64_t v24 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      *(void *)uint64_t v22 = *(void *)v23;
      uint64_t v29 = *(int *)(v24 + 20);
      uint64_t v30 = &v22[v29];
      uint64_t v31 = &v23[v29];
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
      swift_bridgeObjectRetain();
      v32(v30, v31, v100);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    sub_25051AF3C((uint64_t)v22, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v22, v23, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v22 = *(void *)v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v95)(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v100);
LABEL_7:
  uint64_t v34 = v17[9];
  unint64_t v35 = (uint64_t *)&v7[v34];
  uint64_t v36 = (uint64_t *)&v8[v34];
  uint64_t v37 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v38 = *(void *)(v37 - 8);
  unint64_t v39 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      uint64_t v42 = *v36;
      unint64_t v43 = v36[1];
      sub_2504DBC4C(*v36, v43);
      *unint64_t v35 = v42;
      v35[1] = v43;
      uint64_t v44 = v36[2];
      unint64_t v45 = v36[3];
      sub_2504DBC4C(v44, v45);
      v35[2] = v44;
      v35[3] = v45;
      uint64_t v46 = v36[4];
      unint64_t v47 = v36[5];
      sub_2504DBC4C(v46, v47);
      v35[4] = v46;
      v35[5] = v47;
      uint64_t v48 = v36[6];
      unint64_t v49 = v36[7];
      sub_2504DBC4C(v48, v49);
      v35[6] = v48;
      v35[7] = v49;
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v35 + *(int *)(v37 + 32), (char *)v36 + *(int *)(v37 + 32), v100);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    sub_25051AF3C((uint64_t)v35, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v35, v36, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v67 = *v36;
  unint64_t v68 = v36[1];
  sub_2504DBC4C(*v36, v68);
  uint64_t v69 = *v35;
  unint64_t v70 = v35[1];
  *unint64_t v35 = v67;
  v35[1] = v68;
  sub_250511528(v69, v70);
  uint64_t v71 = v36[2];
  unint64_t v72 = v36[3];
  sub_2504DBC4C(v71, v72);
  uint64_t v73 = v35[2];
  unint64_t v74 = v35[3];
  v35[2] = v71;
  v35[3] = v72;
  sub_250511528(v73, v74);
  uint64_t v75 = v36[4];
  unint64_t v76 = v36[5];
  sub_2504DBC4C(v75, v76);
  uint64_t v77 = v35[4];
  unint64_t v78 = v35[5];
  v35[4] = v75;
  v35[5] = v76;
  sub_250511528(v77, v78);
  uint64_t v79 = v36[6];
  unint64_t v80 = v36[7];
  sub_2504DBC4C(v79, v80);
  uint64_t v81 = v35[6];
  unint64_t v82 = v35[7];
  v35[6] = v79;
  v35[7] = v80;
  sub_250511528(v81, v82);
  ((void (*)(char *, char *, uint64_t))v95)((char *)v35 + *(int *)(v37 + 32), (char *)v36 + *(int *)(v37 + 32), v100);
LABEL_13:
  uint64_t v51 = v17[10];
  unint64_t v52 = (uint64_t *)&v7[v51];
  uint64_t v53 = (uint64_t *)&v8[v51];
  uint64_t v54 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v52, 1, v54);
  int v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (!v58)
    {
      uint64_t v83 = *v53;
      unint64_t v84 = v53[1];
      sub_2504DBC4C(*v53, v84);
      uint64_t v85 = *v52;
      unint64_t v86 = v52[1];
      *unint64_t v52 = v83;
      v52[1] = v84;
      sub_250511528(v85, v86);
      uint64_t v87 = v53[2];
      unint64_t v88 = v53[3];
      sub_2504DBC4C(v87, v88);
      uint64_t v89 = v52[2];
      unint64_t v90 = v52[3];
      v52[2] = v87;
      v52[3] = v88;
      sub_250511528(v89, v90);
      uint64_t v91 = v53[4];
      unint64_t v92 = v53[5];
      sub_2504DBC4C(v91, v92);
      uint64_t v93 = v52[4];
      unint64_t v94 = v52[5];
      v52[4] = v91;
      v52[5] = v92;
      sub_250511528(v93, v94);
      ((void (*)(char *, char *, uint64_t))v95)((char *)v52 + *(int *)(v54 + 28), (char *)v53 + *(int *)(v54 + 28), v100);
      goto LABEL_19;
    }
    sub_25051AF3C((uint64_t)v52, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v58)
  {
LABEL_18:
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v52, v53, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_19;
  }
  uint64_t v59 = *v53;
  unint64_t v60 = v53[1];
  sub_2504DBC4C(*v53, v60);
  *unint64_t v52 = v59;
  v52[1] = v60;
  uint64_t v61 = v53[2];
  unint64_t v62 = v53[3];
  sub_2504DBC4C(v61, v62);
  v52[2] = v61;
  v52[3] = v62;
  uint64_t v63 = v53[4];
  unint64_t v64 = v53[5];
  sub_2504DBC4C(v63, v64);
  v52[4] = v63;
  v52[5] = v64;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v52 + *(int *)(v54 + 28), (char *)v53 + *(int *)(v54 + 28), v100);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_19:
  uint64_t result = v99;
  *(_DWORD *)((char *)v99 + *(int *)(v97 + 24)) = *(_DWORD *)((char *)v98 + *(int *)(v97 + 24));
  return result;
}

void *sub_250526434(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)((char *)a2 + v3);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)((char *)a2 + v3 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)a2 + v3 + 24);
  uint64_t v6 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = &v4[v7];
  uint64_t v9 = &v5[v7];
  uint64_t v10 = sub_2505BDA50();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = v6[8];
  uint64_t v13 = &v4[v12];
  unint64_t v14 = &v5[v12];
  uint64_t v15 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v13 = *(void *)v14;
    v11(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = v6[9];
  uint64_t v19 = &v4[v18];
  uint64_t v20 = &v5[v18];
  uint64_t v21 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    long long v24 = *((_OWORD *)v20 + 1);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v24;
    long long v25 = *((_OWORD *)v20 + 3);
    *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
    *((_OWORD *)v19 + 3) = v25;
    v11(&v19[*(int *)(v21 + 32)], &v20[*(int *)(v21 + 32)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v26 = v6[10];
  int v27 = &v4[v26];
  int v28 = &v5[v26];
  uint64_t v29 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    long long v32 = *((_OWORD *)v28 + 1);
    *(_OWORD *)int v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v32;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    v11(&v27[*(int *)(v29 + 28)], &v28[*(int *)(v29 + 28)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t result = a1;
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return result;
}

void *sub_2505267F0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v64 = a3;
  uint64_t v65 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v66 = a1;
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_DWORD *)uint64_t v7 = *(_DWORD *)v8;
  uint64_t v9 = *(void *)((char *)a1 + v6 + 8);
  unint64_t v10 = *(void *)((char *)a1 + v6 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  sub_250511528(v9, v10);
  uint64_t v11 = *((void *)v7 + 3);
  unint64_t v12 = *((void *)v7 + 4);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  sub_250511528(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v14 = v13[7];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  uint64_t v67 = sub_2505BDA50();
  uint64_t v63 = *(void *)(v67 - 8);
  unint64_t v62 = *(void (**)(char *, char *))(v63 + 40);
  v62(v15, v16);
  uint64_t v17 = v13[8];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  uint64_t v20 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      *(void *)uint64_t v18 = *(void *)v19;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v18[*(int *)(v20 + 20)], &v19[*(int *)(v20 + 20)], v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    sub_25051AF3C((uint64_t)v18, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v18 = *(void *)v19;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v62)(&v18[*(int *)(v20 + 20)], &v19[*(int *)(v20 + 20)], v67);
LABEL_7:
  uint64_t v26 = v13[9];
  int v27 = &v7[v26];
  int v28 = &v8[v26];
  uint64_t v29 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      long long v34 = *((_OWORD *)v28 + 1);
      *(_OWORD *)int v27 = *(_OWORD *)v28;
      *((_OWORD *)v27 + 1) = v34;
      long long v35 = *((_OWORD *)v28 + 3);
      *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
      *((_OWORD *)v27 + 3) = v35;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v27[*(int *)(v29 + 32)], &v28[*(int *)(v29 + 32)], v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    sub_25051AF3C((uint64_t)v27, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v27, v28, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v48 = *(void *)v27;
  unint64_t v49 = *((void *)v27 + 1);
  *(_OWORD *)int v27 = *(_OWORD *)v28;
  sub_250511528(v48, v49);
  uint64_t v50 = *((void *)v27 + 2);
  unint64_t v51 = *((void *)v27 + 3);
  *((_OWORD *)v27 + 1) = *((_OWORD *)v28 + 1);
  sub_250511528(v50, v51);
  uint64_t v52 = *((void *)v27 + 4);
  unint64_t v53 = *((void *)v27 + 5);
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  sub_250511528(v52, v53);
  uint64_t v54 = *((void *)v27 + 6);
  unint64_t v55 = *((void *)v27 + 7);
  *((_OWORD *)v27 + 3) = *((_OWORD *)v28 + 3);
  sub_250511528(v54, v55);
  ((void (*)(char *, char *, uint64_t))v62)(&v27[*(int *)(v29 + 32)], &v28[*(int *)(v29 + 32)], v67);
LABEL_13:
  uint64_t v37 = v13[10];
  uint64_t v38 = (uint64_t *)&v7[v37];
  unint64_t v39 = &v8[v37];
  uint64_t v40 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48);
  int v43 = v42(v38, 1, v40);
  int v44 = v42((uint64_t *)v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      uint64_t v56 = *v38;
      unint64_t v57 = v38[1];
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
      sub_250511528(v56, v57);
      uint64_t v58 = v38[2];
      unint64_t v59 = v38[3];
      *((_OWORD *)v38 + 1) = *((_OWORD *)v39 + 1);
      sub_250511528(v58, v59);
      uint64_t v60 = v38[4];
      unint64_t v61 = v38[5];
      *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
      sub_250511528(v60, v61);
      ((void (*)(char *, char *, uint64_t))v62)((char *)v38 + *(int *)(v40 + 28), &v39[*(int *)(v40 + 28)], v67);
      goto LABEL_19;
    }
    sub_25051AF3C((uint64_t)v38, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v38, v39, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  long long v45 = *((_OWORD *)v39 + 1);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v45;
  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))((char *)v38 + *(int *)(v40 + 28), &v39[*(int *)(v40 + 28)], v67);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_19:
  uint64_t result = v66;
  *(_DWORD *)((char *)v66 + *(int *)(v64 + 24)) = *(_DWORD *)((char *)v65 + *(int *)(v64 + 24));
  return result;
}

uint64_t sub_250526DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250526DB8);
}

uint64_t sub_250526DB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for GKCrypto_GroupBlob(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250526E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250526E7C);
}

void *sub_250526E7C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for GKCrypto_GroupBlob(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_250526F24()
{
  uint64_t result = type metadata accessor for GKCrypto_GroupBlob(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_250526FD0()
{
  unint64_t result = qword_269AB5CE0;
  if (!qword_269AB5CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5CE0);
  }
  return result;
}

unint64_t sub_250527028()
{
  unint64_t result = qword_269AB5CE8;
  if (!qword_269AB5CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5CE8);
  }
  return result;
}

unint64_t sub_250527080()
{
  unint64_t result = qword_269AB5CF0;
  if (!qword_269AB5CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5CF0);
  }
  return result;
}

unint64_t sub_2505270D8()
{
  unint64_t result = qword_269AB5CF8;
  if (!qword_269AB5CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5CF8);
  }
  return result;
}

unint64_t sub_250527130()
{
  unint64_t result = qword_269AB5D00;
  if (!qword_269AB5D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D00);
  }
  return result;
}

unint64_t sub_250527188()
{
  unint64_t result = qword_269AB5D08;
  if (!qword_269AB5D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D08);
  }
  return result;
}

unint64_t sub_2505271E0()
{
  unint64_t result = qword_269AB5D10;
  if (!qword_269AB5D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D10);
  }
  return result;
}

unint64_t sub_250527238()
{
  unint64_t result = qword_269AB5D18;
  if (!qword_269AB5D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D18);
  }
  return result;
}

unint64_t sub_250527290()
{
  unint64_t result = qword_269AB5D20;
  if (!qword_269AB5D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D20);
  }
  return result;
}

unint64_t sub_2505272E8()
{
  unint64_t result = qword_269AB5D28;
  if (!qword_269AB5D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D28);
  }
  return result;
}

unint64_t sub_250527340()
{
  unint64_t result = qword_269AB5D30;
  if (!qword_269AB5D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D30);
  }
  return result;
}

unint64_t sub_250527398()
{
  unint64_t result = qword_269AB5D38;
  if (!qword_269AB5D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D38);
  }
  return result;
}

unint64_t sub_2505273F0()
{
  unint64_t result = qword_269AB5D40;
  if (!qword_269AB5D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D40);
  }
  return result;
}

unint64_t sub_250527448()
{
  unint64_t result = qword_269AB5D48;
  if (!qword_269AB5D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D48);
  }
  return result;
}

unint64_t sub_2505274A0()
{
  unint64_t result = qword_269AB5D50;
  if (!qword_269AB5D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D50);
  }
  return result;
}

unint64_t sub_2505274F8()
{
  unint64_t result = qword_269AB5D58;
  if (!qword_269AB5D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D58);
  }
  return result;
}

unint64_t sub_250527550()
{
  unint64_t result = qword_269AB5D60;
  if (!qword_269AB5D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D60);
  }
  return result;
}

unint64_t sub_2505275A8()
{
  unint64_t result = qword_269AB5D68;
  if (!qword_269AB5D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D68);
  }
  return result;
}

unint64_t sub_250527600()
{
  unint64_t result = qword_269AB5D70;
  if (!qword_269AB5D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D70);
  }
  return result;
}

unint64_t sub_250527658()
{
  unint64_t result = qword_269AB5D78;
  if (!qword_269AB5D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D78);
  }
  return result;
}

unint64_t sub_2505276B0()
{
  unint64_t result = qword_269AB5D80;
  if (!qword_269AB5D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D80);
  }
  return result;
}

unint64_t sub_250527708()
{
  unint64_t result = qword_269AB5D88;
  if (!qword_269AB5D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D88);
  }
  return result;
}

unint64_t sub_250527760()
{
  unint64_t result = qword_269AB5D90;
  if (!qword_269AB5D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D90);
  }
  return result;
}

unint64_t sub_2505277B8()
{
  unint64_t result = qword_269AB5D98;
  if (!qword_269AB5D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5D98);
  }
  return result;
}

unint64_t sub_250527810()
{
  unint64_t result = qword_269AB5DA0;
  if (!qword_269AB5DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DA0);
  }
  return result;
}

unint64_t sub_250527868()
{
  unint64_t result = qword_269AB5DA8;
  if (!qword_269AB5DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DA8);
  }
  return result;
}

unint64_t sub_2505278C0()
{
  unint64_t result = qword_269AB5DB0;
  if (!qword_269AB5DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DB0);
  }
  return result;
}

unint64_t sub_250527918()
{
  unint64_t result = qword_269AB5DB8;
  if (!qword_269AB5DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DB8);
  }
  return result;
}

unint64_t sub_250527970()
{
  unint64_t result = qword_269AB5DC0;
  if (!qword_269AB5DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DC0);
  }
  return result;
}

unint64_t sub_2505279C8()
{
  unint64_t result = qword_269AB5DC8;
  if (!qword_269AB5DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DC8);
  }
  return result;
}

unint64_t sub_250527A20()
{
  unint64_t result = qword_269AB5DD0;
  if (!qword_269AB5DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DD0);
  }
  return result;
}

unint64_t sub_250527A78()
{
  unint64_t result = qword_269AB5DD8;
  if (!qword_269AB5DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DD8);
  }
  return result;
}

unint64_t sub_250527AD0()
{
  unint64_t result = qword_269AB5DE0;
  if (!qword_269AB5DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DE0);
  }
  return result;
}

unint64_t sub_250527B28()
{
  unint64_t result = qword_269AB5DE8;
  if (!qword_269AB5DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DE8);
  }
  return result;
}

unint64_t sub_250527B80()
{
  unint64_t result = qword_269AB5DF0;
  if (!qword_269AB5DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DF0);
  }
  return result;
}

unint64_t sub_250527BD8()
{
  unint64_t result = qword_269AB5DF8;
  if (!qword_269AB5DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5DF8);
  }
  return result;
}

unint64_t sub_250527C30()
{
  unint64_t result = qword_269AB5E00;
  if (!qword_269AB5E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5E00);
  }
  return result;
}

unint64_t sub_250527C88()
{
  unint64_t result = qword_269AB5E08;
  if (!qword_269AB5E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5E08);
  }
  return result;
}

unint64_t sub_250527CE0()
{
  unint64_t result = qword_269AB5E10;
  if (!qword_269AB5E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5E10);
  }
  return result;
}

_OWORD *sub_250527D34(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_250527D48(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_250527DA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_250527DF8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_250527E54(uint64_t a1)
{
  return sub_250510A48(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(_DWORD *)(v1 + 40), 1);
}

uint64_t sub_250527E7C(uint64_t a1)
{
  return sub_250510A48(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(_DWORD *)(v1 + 40), 0);
}

uint64_t *sub_250527EA4(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

uint64_t sub_250527F14(uint64_t *a1)
{
  return sub_250507920(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_250527F30(void *a1)
{
  return sub_2505081BC(a1, *(_DWORD *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_250527F54(void *a1)
{
  return sub_25050847C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_250527F74(uint64_t a1)
{
  return sub_250507F88(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char **)(v1 + 56));
}

uint64_t sub_250527F98(uint64_t a1)
{
  int v3 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unint64_t v4 = *(void *)(v1 + 32);
  *(_DWORD *)a1 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  sub_2504DBC4C(v5, v4);
  uint64_t result = sub_250511528(v6, v7);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_250527FFC(uint64_t *a1)
{
  uint64_t v4 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  sub_2504DBC4C(v4, v3);
  uint64_t result = sub_250511528(v5, v6);
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t sub_250528058(uint64_t a1)
{
  return sub_2505055D0(a1, *(_DWORD *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_250528080(uint64_t *a1)
{
  return sub_250505874(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_2505280A0@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_250501C84(a1, a2, *(void *)(v3 + 16), a3);
}

void sub_2505280BC()
{
  sub_250510CF8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(_DWORD *)(v0 + 56), **(void **)(v0 + 64), *(void *)(*(void *)(v0 + 64) + 8), *(void *)(*(void *)(v0 + 64) + 16), *(void *)(*(void *)(v0 + 64) + 24));
}

uint64_t sub_2505280FC()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_25052810C()
{
  sub_25058AB64(*(void *)(v0 + 16), *(void (**)(uint64_t *__return_ptr))(v0 + 24));
}

uint64_t sub_250528118()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_250528128()
{
  return sub_25058AC70(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void sub_250528148(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_250528160(a1, a2 & 1);
  }
}

void sub_250528160(id a1, char a2)
{
  if (a2) {
}
  }

void sub_25052816C()
{
}

uint64_t sub_250528184()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_250528194()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2505281A4()
{
  sub_2505110F8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(_DWORD *)(v0 + 56), **(void **)(v0 + 64), *(void *)(*(void *)(v0 + 64) + 8));
}

uint64_t sub_2505281D4()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_2505281E4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2505281F4(uint64_t a1)
{
  return sub_2504FCA40(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(_DWORD *)(v1 + 36), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for Group.GroupCiphertextContents(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6018);
}

uint64_t sub_25052823C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_250528274()
{
  unint64_t result = qword_269AB5F98;
  if (!qword_269AB5F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5F98);
  }
  return result;
}

uint64_t sub_2505282C8(uint64_t a1)
{
  return sub_250508500(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_2505282EC(uint64_t a1)
{
  return sub_2504F49D0(a1, *(_DWORD *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_250528314()
{
  return swift_release();
}

uint64_t sub_25052831C(uint64_t *a1)
{
  return sub_250508B80(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_250528338(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_2505283E4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2505283F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250528454(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_2505284B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_250528518(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_25052857C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_2505285D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_2504DBC4C(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    uint64_t v11 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
    unint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_2505BDA50();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    uint64_t v16 = *(int *)(a3 + 20);
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v15;
    *(uint64_t *)((char *)v4 + v16) = *v18;
    uint64_t v20 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
    uint64_t v21 = *(int *)(v20 + 20);
    uint64_t v22 = &v17[v21];
    int v23 = (char *)v18 + v21;
    swift_bridgeObjectRetain();
    v19(v22, v23, v14);
    uint64_t v55 = v20;
    uint64_t v24 = *(int *)(v20 + 24);
    uint64_t v25 = &v17[v24];
    uint64_t v26 = (uint64_t *)((char *)v18 + v24);
    uint64_t v27 = type metadata accessor for GKCrypto_VersionedSeed(0);
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v54 = v19;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      uint64_t v52 = v14;
      uint64_t v31 = v26[1];
      unint64_t v32 = v26[2];
      sub_2504DBC4C(v31, v32);
      *((void *)v25 + 1) = v31;
      *((void *)v25 + 2) = v32;
      uint64_t v14 = v52;
      v54(&v25[*(int *)(v27 + 24)], (char *)v26 + *(int *)(v27 + 24), v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v33 = *(int *)(v55 + 28);
    long long v34 = &v17[v33];
    long long v35 = (uint64_t *)((char *)v18 + v33);
    uint64_t v36 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v56 = v37;
      uint64_t v39 = *v35;
      unint64_t v40 = v35[1];
      sub_2504DBC4C(*v35, v40);
      *(void *)long long v34 = v39;
      *((void *)v34 + 1) = v40;
      v54(&v34[*(int *)(v36 + 20)], (char *)v35 + *(int *)(v36 + 20), v14);
      uint64_t v41 = *(int *)(v36 + 24);
      uint64_t v42 = &v34[v41];
      int v43 = (uint64_t *)((char *)v35 + v41);
      uint64_t v44 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      uint64_t v45 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        uint64_t v53 = v14;
        uint64_t v48 = *v43;
        unint64_t v47 = v43[1];
        sub_2504DBC4C(*v43, v47);
        *(void *)uint64_t v42 = v48;
        *((void *)v42 + 1) = v47;
        uint64_t v50 = v43[2];
        unint64_t v49 = v43[3];
        sub_2504DBC4C(v50, v49);
        *((void *)v42 + 2) = v50;
        *((void *)v42 + 3) = v49;
        v54(&v42[*(int *)(v44 + 24)], (char *)v43 + *(int *)(v44 + 24), v53);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v34, 0, 1, v36);
    }
  }
  return v4;
}

uint64_t sub_250528A64(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_250511528(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v16)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v7 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v16(v6 + v7[5], v5);
  uint64_t v8 = v6 + v7[6];
  uint64_t v9 = type metadata accessor for GKCrypto_VersionedSeed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    sub_250511528(*(void *)(v8 + 8), *(void *)(v8 + 16));
    v16(v8 + *(int *)(v9 + 24), v5);
  }
  uint64_t v10 = v6 + v7[7];
  uint64_t v11 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    sub_250511528(*(void *)v10, *(void *)(v10 + 8));
    v16(v10 + *(int *)(v11 + 20), v5);
    uint64_t v13 = v10 + *(int *)(v11 + 24);
    uint64_t v14 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
    if (!result)
    {
      sub_250511528(*(void *)v13, *(void *)(v13 + 8));
      sub_250511528(*(void *)(v13 + 16), *(void *)(v13 + 24));
      uint64_t v15 = v13 + *(int *)(v14 + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v16)(v15, v5);
    }
  }
  return result;
}

uint64_t sub_250528CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v55 = a1;
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = a2 + v15;
  *uint64_t v16 = *(void *)(a2 + v15);
  uint64_t v18 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  uint64_t v19 = v18[5];
  uint64_t v20 = (char *)v16 + v19;
  uint64_t v21 = v17 + v19;
  swift_bridgeObjectRetain();
  v14((uint64_t)v20, v21, v13);
  uint64_t v22 = v18[6];
  int v23 = (void *)((char *)v16 + v22);
  uint64_t v24 = (void *)(v17 + v22);
  uint64_t v25 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *(_DWORD *)int v23 = *(_DWORD *)v24;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    uint64_t v28 = v24[1];
    unint64_t v29 = v24[2];
    sub_2504DBC4C(v28, v29);
    v23[1] = v28;
    v23[2] = v29;
    uint64_t v14 = v52;
    uint64_t v13 = v53;
    v52((uint64_t)v23 + *(int *)(v25 + 24), (uint64_t)v24 + *(int *)(v25 + 24), v53);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  uint64_t v30 = v18[7];
  uint64_t v31 = (void *)((char *)v16 + v30);
  unint64_t v32 = (uint64_t *)(v17 + v30);
  uint64_t v33 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    uint64_t v36 = (void (*)(char *, char *, uint64_t))v14;
    uint64_t v37 = *v32;
    unint64_t v38 = v32[1];
    sub_2504DBC4C(*v32, v38);
    *uint64_t v31 = v37;
    v31[1] = v38;
    v36((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v13);
    uint64_t v39 = *(int *)(v33 + 24);
    unint64_t v40 = (void *)((char *)v31 + v39);
    uint64_t v41 = (uint64_t *)((char *)v32 + v39);
    uint64_t v42 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v54 = v34;
      uint64_t v45 = v13;
      uint64_t v47 = *v41;
      unint64_t v46 = v41[1];
      sub_2504DBC4C(*v41, v46);
      *unint64_t v40 = v47;
      v40[1] = v46;
      uint64_t v49 = v41[2];
      unint64_t v48 = v41[3];
      sub_2504DBC4C(v49, v48);
      v40[2] = v49;
      v40[3] = v48;
      uint64_t v50 = v45;
      uint64_t v34 = v54;
      v36((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v50);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return v55;
}

uint64_t sub_2505290EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  uint64_t v88 = *(void *)(v17 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 24);
  v18(v15, v16, v17);
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v89 = a1;
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  uint64_t v90 = v17;
  uint64_t v87 = (void (*)(char *, char *, uint64_t))v18;
  v18(v20 + v22[5], v21 + v22[5], v17);
  uint64_t v23 = v22[6];
  uint64_t v24 = (char *)(v20 + v23);
  uint64_t v25 = (char *)(v21 + v23);
  uint64_t v26 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v17) = v28(v24, 1, v26);
  int v29 = v28(v25, 1, v26);
  if (v17)
  {
    if (!v29)
    {
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      uint64_t v30 = *((void *)v25 + 1);
      unint64_t v31 = *((void *)v25 + 2);
      sub_2504DBC4C(v30, v31);
      *((void *)v24 + 1) = v30;
      *((void *)v24 + 2) = v31;
      uint64_t v32 = v90;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v90);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    sub_25051AF3C((uint64_t)v24, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v24, v25, *(void *)(*(void *)(v33 - 8) + 64));
    uint64_t v32 = v90;
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  uint64_t v54 = *((void *)v25 + 1);
  unint64_t v55 = *((void *)v25 + 2);
  sub_2504DBC4C(v54, v55);
  uint64_t v56 = *((void *)v24 + 1);
  unint64_t v57 = *((void *)v24 + 2);
  *((void *)v24 + 1) = v54;
  *((void *)v24 + 2) = v55;
  sub_250511528(v56, v57);
  uint64_t v32 = v90;
  v87(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v90);
LABEL_7:
  uint64_t v34 = v22[7];
  uint64_t v35 = (uint64_t *)(v20 + v34);
  uint64_t v36 = (uint64_t *)(v21 + v34);
  uint64_t v37 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      uint64_t v58 = *v36;
      unint64_t v59 = v36[1];
      sub_2504DBC4C(*v36, v59);
      uint64_t v60 = *v35;
      unint64_t v61 = v35[1];
      *uint64_t v35 = v58;
      v35[1] = v59;
      sub_250511528(v60, v61);
      v87((char *)v35 + *(int *)(v37 + 20), (char *)v36 + *(int *)(v37 + 20), v32);
      uint64_t v62 = *(int *)(v37 + 24);
      uint64_t v63 = (uint64_t *)((char *)v35 + v62);
      uint64_t v64 = (uint64_t *)((char *)v36 + v62);
      uint64_t v65 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      uint64_t v66 = *(void *)(v65 - 8);
      uint64_t v67 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v66 + 48);
      LODWORD(v58) = v67(v63, 1, v65);
      int v68 = v67(v64, 1, v65);
      if (v58)
      {
        if (!v68)
        {
          uint64_t v69 = *v64;
          unint64_t v70 = v64[1];
          sub_2504DBC4C(*v64, v70);
          uint64_t *v63 = v69;
          v63[1] = v70;
          uint64_t v71 = v64[2];
          unint64_t v72 = v64[3];
          sub_2504DBC4C(v71, v72);
          void v63[2] = v71;
          v63[3] = v72;
          (*(void (**)(char *, char *, uint64_t))(v88 + 16))((char *)v63 + *(int *)(v65 + 24), (char *)v64 + *(int *)(v65 + 24), v32);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
          return v89;
        }
      }
      else
      {
        if (!v68)
        {
          uint64_t v79 = *v64;
          unint64_t v80 = v64[1];
          sub_2504DBC4C(*v64, v80);
          uint64_t v81 = *v63;
          unint64_t v82 = v63[1];
          uint64_t *v63 = v79;
          v63[1] = v80;
          sub_250511528(v81, v82);
          uint64_t v83 = v64[2];
          unint64_t v84 = v64[3];
          sub_2504DBC4C(v83, v84);
          uint64_t v85 = v63[2];
          unint64_t v86 = v63[3];
          void v63[2] = v83;
          v63[3] = v84;
          sub_250511528(v85, v86);
          v87((char *)v63 + *(int *)(v65 + 24), (char *)v64 + *(int *)(v65 + 24), v32);
          return v89;
        }
        sub_25051AF3C((uint64_t)v63, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0) - 8) + 64);
      uint64_t v52 = v63;
      uint64_t v53 = v64;
      goto LABEL_14;
    }
    sub_25051AF3C((uint64_t)v35, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_13:
    size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8) - 8) + 64);
    uint64_t v52 = v35;
    uint64_t v53 = v36;
LABEL_14:
    memcpy(v52, v53, v51);
    return v89;
  }
  if (v41) {
    goto LABEL_13;
  }
  uint64_t v42 = *v36;
  unint64_t v43 = v36[1];
  sub_2504DBC4C(*v36, v43);
  *uint64_t v35 = v42;
  v35[1] = v43;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  v44((char *)v35 + *(int *)(v37 + 20), (char *)v36 + *(int *)(v37 + 20), v32);
  uint64_t v45 = *(int *)(v37 + 24);
  unint64_t v46 = (uint64_t *)((char *)v35 + v45);
  uint64_t v47 = (uint64_t *)((char *)v36 + v45);
  uint64_t v48 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    uint64_t v73 = v32;
    uint64_t v91 = v44;
    uint64_t v74 = *v47;
    unint64_t v75 = v47[1];
    sub_2504DBC4C(*v47, v75);
    *unint64_t v46 = v74;
    v46[1] = v75;
    uint64_t v76 = v47[2];
    unint64_t v77 = v47[3];
    sub_2504DBC4C(v76, v77);
    v46[2] = v76;
    v46[3] = v77;
    v91((char *)v46 + *(int *)(v48 + 24), (char *)v47 + *(int *)(v48 + 24), v73);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return v89;
}

uint64_t sub_2505297F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v35 = a1;
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v10(&v12[v14[5]], v13 + v14[5], v9);
  uint64_t v15 = v14[6];
  uint64_t v16 = &v12[v15];
  uint64_t v17 = (_DWORD *)(v13 + v15);
  uint64_t v18 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    *(_DWORD *)uint64_t v16 = *v17;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)(v17 + 2);
    v10(&v16[*(int *)(v18 + 24)], (uint64_t)v17 + *(int *)(v18 + 24), v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = v14[7];
  uint64_t v22 = &v12[v21];
  uint64_t v23 = (_OWORD *)(v13 + v21);
  uint64_t v24 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v22 = *v23;
    v10(&v22[*(int *)(v24 + 20)], (uint64_t)v23 + *(int *)(v24 + 20), v9);
    uint64_t v27 = *(int *)(v24 + 24);
    uint64_t v28 = &v22[v27];
    int v29 = (_OWORD *)((char *)v23 + v27);
    uint64_t v30 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      long long v33 = v29[1];
      *(_OWORD *)uint64_t v28 = *v29;
      *((_OWORD *)v28 + 1) = v33;
      v10(&v28[*(int *)(v30 + 24)], (uint64_t)v29 + *(int *)(v30 + 24), v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return v35;
}

uint64_t sub_250529BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 40);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v68 = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  swift_bridgeObjectRelease();
  uint64_t v18 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  uint64_t v67 = v13;
  uint64_t v65 = (void (*)(char *, uint64_t, uint64_t))v14;
  v14(v16 + v18[5], v17 + v18[5], v13);
  uint64_t v19 = v18[6];
  uint64_t v20 = (void *)(v16 + v19);
  uint64_t v21 = v17 + v19;
  uint64_t v22 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24((void *)v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))((char *)v20 + *(int *)(v22 + 24), v21 + *(int *)(v22 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    sub_25051AF3C((uint64_t)v20, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v20, (const void *)v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  uint64_t v46 = v20[1];
  unint64_t v47 = v20[2];
  *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 8);
  sub_250511528(v46, v47);
  v65((char *)v20 + *(int *)(v22 + 24), v21 + *(int *)(v22 + 24), v13);
LABEL_7:
  uint64_t v28 = v18[7];
  int v29 = (uint64_t *)(v16 + v28);
  uint64_t v30 = (char *)(v17 + v28);
  uint64_t v31 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v32 = *(void *)(v31 - 8);
  long long v33 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v29, 1, v31);
  int v35 = v33((uint64_t *)v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      uint64_t v48 = *v29;
      unint64_t v49 = v29[1];
      *(_OWORD *)int v29 = *(_OWORD *)v30;
      sub_250511528(v48, v49);
      v65((char *)v29 + *(int *)(v31 + 20), (uint64_t)&v30[*(int *)(v31 + 20)], v13);
      uint64_t v50 = *(int *)(v31 + 24);
      uint64_t v51 = (uint64_t)v29 + v50;
      uint64_t v52 = &v30[v50];
      uint64_t v53 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      uint64_t v54 = *(void *)(v53 - 8);
      unint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
      int v56 = v55(v51, 1, v53);
      int v57 = v55((uint64_t)v52, 1, v53);
      if (v56)
      {
        if (!v57)
        {
          long long v58 = *((_OWORD *)v52 + 1);
          *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
          *(_OWORD *)(v51 + 16) = v58;
          (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v51 + *(int *)(v53 + 24), &v52[*(int *)(v53 + 24)], v67);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
          return v68;
        }
      }
      else
      {
        if (!v57)
        {
          uint64_t v61 = *(void *)v51;
          unint64_t v62 = *(void *)(v51 + 8);
          *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
          sub_250511528(v61, v62);
          uint64_t v63 = *(void *)(v51 + 16);
          unint64_t v64 = *(void *)(v51 + 24);
          *(_OWORD *)(v51 + 16) = *((_OWORD *)v52 + 1);
          sub_250511528(v63, v64);
          v65((char *)(v51 + *(int *)(v53 + 24)), (uint64_t)&v52[*(int *)(v53 + 24)], v67);
          return v68;
        }
        sub_25051AF3C(v51, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      size_t v43 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0) - 8) + 64);
      uint64_t v44 = (void *)v51;
      uint64_t v45 = v52;
      goto LABEL_14;
    }
    sub_25051AF3C((uint64_t)v29, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_13:
    size_t v43 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8) - 8) + 64);
    uint64_t v44 = v29;
    uint64_t v45 = v30;
LABEL_14:
    memcpy(v44, v45, v43);
    return v68;
  }
  if (v35) {
    goto LABEL_13;
  }
  *(_OWORD *)int v29 = *(_OWORD *)v30;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
  v36((char *)v29 + *(int *)(v31 + 20), &v30[*(int *)(v31 + 20)], v13);
  uint64_t v37 = *(int *)(v31 + 24);
  uint64_t v38 = (_OWORD *)((char *)v29 + v37);
  uint64_t v39 = &v30[v37];
  uint64_t v40 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    long long v59 = *((_OWORD *)v39 + 1);
    *uint64_t v38 = *(_OWORD *)v39;
    v38[1] = v59;
    v36((char *)v38 + *(int *)(v40 + 24), &v39[*(int *)(v40 + 24)], v67);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return v68;
}

uint64_t sub_25052A1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25052A200);
}

uint64_t sub_25052A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_25052A2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25052A30C);
}

uint64_t sub_25052A30C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_25052A410()
{
  uint64_t result = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for GKCrypto_GroupAETextToSign(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_25052A4EC(uint64_t a1, uint64_t a2)
{
  return sub_25051AD70(a1, a2);
}

uint64_t *sub_25052A554(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (_DWORD *)((char *)v4 + v14);
    uint64_t v16 = (_DWORD *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for GKCrypto_RSVP(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v15 = *v16;
      *((void *)v15 + 1) = *((void *)v16 + 1);
      *((unsigned char *)v15 + 16) = *((unsigned char *)v16 + 16);
      uint64_t v21 = *((void *)v16 + 3);
      unint64_t v22 = *((void *)v16 + 4);
      sub_2504DBC4C(v21, v22);
      *((void *)v15 + 3) = v21;
      *((void *)v15 + 4) = v22;
      uint64_t v23 = *((void *)v16 + 5);
      unint64_t v24 = *((void *)v16 + 6);
      sub_2504DBC4C(v23, v24);
      *((void *)v15 + 5) = v23;
      *((void *)v15 + 6) = v24;
      uint64_t v25 = *((void *)v16 + 7);
      unint64_t v26 = *((void *)v16 + 8);
      sub_2504DBC4C(v25, v26);
      *((void *)v15 + 7) = v25;
      *((void *)v15 + 8) = v26;
      v13((char *)v15 + *(int *)(v17 + 36), (char *)v16 + *(int *)(v17 + 36), v12);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_RSVP(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6040);
}

uint64_t sub_25052A7A0(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_250511528(*(void *)(v6 + 24), *(void *)(v6 + 32));
    sub_250511528(*(void *)(v6 + 40), *(void *)(v6 + 48));
    sub_250511528(*(void *)(v6 + 56), *(void *)(v6 + 64));
    uint64_t v9 = v6 + *(int *)(v7 + 36);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t sub_25052A8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = sub_2505BDA50();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (_DWORD *)(a1 + v13);
  uint64_t v15 = (_DWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    _DWORD *v14 = *v15;
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((unsigned char *)v14 + 16) = *((unsigned char *)v15 + 16);
    uint64_t v19 = *((void *)v15 + 3);
    unint64_t v20 = *((void *)v15 + 4);
    sub_2504DBC4C(v19, v20);
    *((void *)v14 + 3) = v19;
    *((void *)v14 + 4) = v20;
    uint64_t v21 = *((void *)v15 + 5);
    unint64_t v22 = *((void *)v15 + 6);
    sub_2504DBC4C(v21, v22);
    *((void *)v14 + 5) = v21;
    *((void *)v14 + 6) = v22;
    uint64_t v23 = *((void *)v15 + 7);
    unint64_t v24 = *((void *)v15 + 8);
    sub_2504DBC4C(v23, v24);
    *((void *)v14 + 7) = v23;
    *((void *)v14 + 8) = v24;
    v12((char *)v14 + *(int *)(v16 + 36), (char *)v15 + *(int *)(v16 + 36), v11);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_25052AAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v44 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
      uint64_t v31 = *(void *)(v17 + 8);
      *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
      *(void *)(v16 + 8) = v31;
      uint64_t v32 = *(void *)(v17 + 24);
      unint64_t v33 = *(void *)(v17 + 32);
      sub_2504DBC4C(v32, v33);
      uint64_t v34 = *(void *)(v16 + 24);
      unint64_t v35 = *(void *)(v16 + 32);
      *(void *)(v16 + 24) = v32;
      *(void *)(v16 + 32) = v33;
      sub_250511528(v34, v35);
      uint64_t v36 = *(void *)(v17 + 40);
      unint64_t v37 = *(void *)(v17 + 48);
      sub_2504DBC4C(v36, v37);
      uint64_t v38 = *(void *)(v16 + 40);
      unint64_t v39 = *(void *)(v16 + 48);
      *(void *)(v16 + 40) = v36;
      *(void *)(v16 + 48) = v37;
      sub_250511528(v38, v39);
      uint64_t v40 = *(void *)(v17 + 56);
      unint64_t v41 = *(void *)(v17 + 64);
      sub_2504DBC4C(v40, v41);
      uint64_t v42 = *(void *)(v16 + 56);
      unint64_t v43 = *(void *)(v16 + 64);
      *(void *)(v16 + 56) = v40;
      *(void *)(v16 + 64) = v41;
      sub_250511528(v42, v43);
      ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v16 + *(int *)(v18 + 36), v17 + *(int *)(v18 + 36), v45);
      return a1;
    }
    sub_25052D638(v16, type metadata accessor for GKCrypto_RSVP);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v22 = *(void *)(v17 + 8);
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  *(void *)(v16 + 8) = v22;
  uint64_t v23 = *(void *)(v17 + 24);
  unint64_t v24 = *(void *)(v17 + 32);
  sub_2504DBC4C(v23, v24);
  *(void *)(v16 + 24) = v23;
  *(void *)(v16 + 32) = v24;
  uint64_t v25 = *(void *)(v17 + 40);
  unint64_t v26 = *(void *)(v17 + 48);
  sub_2504DBC4C(v25, v26);
  *(void *)(v16 + 40) = v25;
  *(void *)(v16 + 48) = v26;
  uint64_t v27 = *(void *)(v17 + 56);
  unint64_t v28 = *(void *)(v17 + 64);
  sub_2504DBC4C(v27, v28);
  *(void *)(v16 + 56) = v27;
  *(void *)(v16 + 64) = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v16 + *(int *)(v18 + 36), v17 + *(int *)(v18 + 36), v45);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_25052AD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_DWORD *)(a1 + v11);
  uint64_t v13 = (_DWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    _DWORD *v12 = *v13;
    *((void *)v12 + 1) = *((void *)v13 + 1);
    *((unsigned char *)v12 + 16) = *((unsigned char *)v13 + 16);
    *(_OWORD *)(v12 + 6) = *(_OWORD *)(v13 + 6);
    *(_OWORD *)(v12 + 10) = *(_OWORD *)(v13 + 10);
    *(_OWORD *)(v12 + 14) = *(_OWORD *)(v13 + 14);
    v10((char *)v12 + *(int *)(v14 + 36), (char *)v13 + *(int *)(v14 + 36), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_25052AF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v28 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
      *(void *)(v14 + 8) = *(void *)(v15 + 8);
      *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
      uint64_t v22 = *(void *)(v14 + 24);
      unint64_t v23 = *(void *)(v14 + 32);
      *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
      sub_250511528(v22, v23);
      uint64_t v24 = *(void *)(v14 + 40);
      unint64_t v25 = *(void *)(v14 + 48);
      *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
      sub_250511528(v24, v25);
      uint64_t v26 = *(void *)(v14 + 56);
      unint64_t v27 = *(void *)(v14 + 64);
      *(_OWORD *)(v14 + 56) = *(_OWORD *)(v15 + 56);
      sub_250511528(v26, v27);
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v29);
      return a1;
    }
    sub_25052D638(v14, type metadata accessor for GKCrypto_RSVP);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v15 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v14 + *(int *)(v16 + 36), v15 + *(int *)(v16 + 36), v29);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_25052B198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25052B1AC);
}

uint64_t sub_25052B1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_269AB5AB8);
}

uint64_t sub_25052B1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25052B1CC);
}

uint64_t sub_25052B1CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_269AB5AB8);
}

uint64_t type metadata accessor for GKCrypto_SignedRSVP(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6028);
}

void sub_25052B1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *sub_25052B218(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = a2[3];
    unint64_t v8 = a2[4];
    sub_2504DBC4C(v7, v8);
    v4[3] = v7;
    v4[4] = v8;
    uint64_t v9 = a2[5];
    unint64_t v10 = a2[6];
    sub_2504DBC4C(v9, v10);
    v4[5] = v9;
    v4[6] = v10;
    uint64_t v11 = a2[7];
    unint64_t v12 = a2[8];
    sub_2504DBC4C(v11, v12);
    v4[7] = v11;
    v4[8] = v12;
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = sub_2505BDA50();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_25052B340(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 24), *(void *)(a1 + 32));
  sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_250511528(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_25052B3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  unint64_t v11 = *(void *)(a2 + 64);
  sub_2504DBC4C(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_25052B4A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  sub_2504DBC4C(v7, v8);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  sub_250511528(v9, v10);
  uint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  sub_2504DBC4C(v11, v12);
  uint64_t v13 = *(void *)(a1 + 40);
  unint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  sub_250511528(v13, v14);
  uint64_t v15 = *(void *)(a2 + 56);
  unint64_t v16 = *(void *)(a2 + 64);
  sub_2504DBC4C(v15, v16);
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  sub_250511528(v17, v18);
  uint64_t v19 = *(int *)(a3 + 36);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_25052B594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_25052B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_250511528(v10, v11);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_25052B700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25052B714);
}

uint64_t sub_25052B714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 32) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25052B7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25052B7E4);
}

uint64_t sub_25052B7E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25052B894()
{
  return sub_250557500();
}

uint64_t sub_25052B8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_5Tm);
}

uint64_t sub_25052B8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_6Tm);
}

uint64_t type metadata accessor for GKCrypto_RSVPQueueRequest(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6050);
}

uint64_t sub_25052B908()
{
  return sub_250557500();
}

uint64_t *sub_25052B914(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_2504DBC4C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_2504DBC4C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_25052BA24(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_250511528(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_25052BAB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_2504DBC4C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_2504DBC4C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_25052BB70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_2504DBC4C(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_250511528(v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_25052BC48(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_25052BCCC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_250511528(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_250511528(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_250511528(v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_25052BD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25052BD90);
}

uint64_t sub_25052BD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25052BE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25052BE60);
}

void *sub_25052BE60(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6060);
}

uint64_t sub_25052BF30()
{
  return sub_250556DCC();
}

uint64_t sub_25052BF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_11Tm);
}

uint64_t sub_25052BF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_12Tm);
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6070);
}

uint64_t sub_25052BFA8()
{
  return sub_2505504D4();
}

uint64_t *sub_25052BFB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_2505BDA50();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_25052C098(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_25052C110(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2505BDA50();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_25052C1A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_25052C23C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_25052C2B8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_25052C344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25052C358);
}

uint64_t sub_25052C358(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25052C408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25052C41C);
}

void *sub_25052C41C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6080);
}

uint64_t sub_25052C4E4()
{
  return sub_250551968();
}

uint64_t *sub_25052C4F4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_2504DBC4C(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    uint64_t v11 = a3[7];
    uint64_t v12 = (char *)v4 + v11;
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_2505BDA50();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    uint64_t v16 = a3[8];
    unint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v54 = v15;
    uint64_t v55 = v14;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      *unint64_t v17 = *v18;
      uint64_t v23 = *(int *)(v19 + 20);
      uint64_t v53 = (char *)v17 + v23;
      uint64_t v24 = (char *)v18 + v23;
      swift_bridgeObjectRetain();
      v15(v53, v24, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v25 = a3[9];
    uint64_t v26 = (uint64_t *)((char *)v4 + v25);
    unint64_t v27 = (uint64_t *)((char *)a2 + v25);
    uint64_t v28 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      uint64_t v31 = v14;
    }
    else
    {
      uint64_t v32 = *v27;
      unint64_t v33 = v27[1];
      sub_2504DBC4C(*v27, v33);
      *uint64_t v26 = v32;
      v26[1] = v33;
      uint64_t v34 = v27[2];
      unint64_t v35 = v27[3];
      sub_2504DBC4C(v34, v35);
      v26[2] = v34;
      v26[3] = v35;
      uint64_t v36 = v27[4];
      unint64_t v37 = v27[5];
      sub_2504DBC4C(v36, v37);
      v26[4] = v36;
      v26[5] = v37;
      uint64_t v38 = v27[6];
      unint64_t v39 = v27[7];
      sub_2504DBC4C(v38, v39);
      v26[6] = v38;
      v26[7] = v39;
      uint64_t v31 = v55;
      v54((char *)v26 + *(int *)(v28 + 32), (char *)v27 + *(int *)(v28 + 32), v55);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    uint64_t v40 = a3[10];
    unint64_t v41 = (uint64_t *)((char *)v4 + v40);
    uint64_t v42 = (uint64_t *)((char *)a2 + v40);
    uint64_t v43 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
    uint64_t v44 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
      memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      uint64_t v46 = *v42;
      unint64_t v47 = v42[1];
      sub_2504DBC4C(*v42, v47);
      *unint64_t v41 = v46;
      v41[1] = v47;
      uint64_t v48 = v42[2];
      unint64_t v49 = v42[3];
      sub_2504DBC4C(v48, v49);
      v41[2] = v48;
      uint64_t v41[3] = v49;
      uint64_t v50 = v42[4];
      unint64_t v51 = v42[5];
      sub_2504DBC4C(v50, v51);
      v41[4] = v50;
      v41[5] = v51;
      v54((char *)v41 + *(int *)(v43 + 28), (char *)v42 + *(int *)(v43 + 28), v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
  }
  return v4;
}

uint64_t sub_25052C974(uint64_t a1, int *a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_250511528(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = sub_2505BDA50();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v14(v6 + *(int *)(v7 + 20), v5);
  }
  uint64_t v8 = a1 + a2[9];
  uint64_t v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    sub_250511528(*(void *)v8, *(void *)(v8 + 8));
    sub_250511528(*(void *)(v8 + 16), *(void *)(v8 + 24));
    sub_250511528(*(void *)(v8 + 32), *(void *)(v8 + 40));
    sub_250511528(*(void *)(v8 + 48), *(void *)(v8 + 56));
    v14(v8 + *(int *)(v9 + 32), v5);
  }
  uint64_t v10 = a1 + a2[10];
  uint64_t v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  if (!result)
  {
    sub_250511528(*(void *)v10, *(void *)(v10 + 8));
    sub_250511528(*(void *)(v10 + 16), *(void *)(v10 + 24));
    sub_250511528(*(void *)(v10 + 32), *(void *)(v10 + 40));
    uint64_t v13 = v10 + *(int *)(v11 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
  }
  return result;
}

uint64_t sub_25052CBA8(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)(a1 + v15);
  unint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v55 = (void (*)(char *, char *, uint64_t))v14;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    *uint64_t v16 = *v17;
    uint64_t v21 = *(int *)(v18 + 20);
    uint64_t v54 = a3;
    uint64_t v22 = (char *)v16 + v21;
    uint64_t v23 = (char *)v17 + v21;
    swift_bridgeObjectRetain();
    uint64_t v24 = v22;
    a3 = v54;
    v14((uint64_t)v24, (uint64_t)v23, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)(a1 + v25);
  unint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    uint64_t v31 = v13;
  }
  else
  {
    uint64_t v32 = a3;
    uint64_t v33 = *v27;
    unint64_t v34 = v27[1];
    sub_2504DBC4C(*v27, v34);
    *uint64_t v26 = v33;
    v26[1] = v34;
    uint64_t v35 = v27[2];
    unint64_t v36 = v27[3];
    sub_2504DBC4C(v35, v36);
    v26[2] = v35;
    v26[3] = v36;
    uint64_t v37 = v27[4];
    unint64_t v38 = v27[5];
    sub_2504DBC4C(v37, v38);
    v26[4] = v37;
    v26[5] = v38;
    uint64_t v39 = v27[6];
    unint64_t v40 = v27[7];
    sub_2504DBC4C(v39, v40);
    v26[6] = v39;
    v26[7] = v40;
    a3 = v32;
    uint64_t v31 = v13;
    v55((char *)v26 + *(int *)(v28 + 32), (char *)v27 + *(int *)(v28 + 32), v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  uint64_t v41 = a3[10];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v44 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    uint64_t v47 = *v43;
    unint64_t v48 = v43[1];
    sub_2504DBC4C(*v43, v48);
    *uint64_t v42 = v47;
    v42[1] = v48;
    uint64_t v49 = v43[2];
    unint64_t v50 = v43[3];
    sub_2504DBC4C(v49, v50);
    uint64_t v42[2] = v49;
    v42[3] = v50;
    uint64_t v51 = v43[4];
    unint64_t v52 = v43[5];
    sub_2504DBC4C(v51, v52);
    v42[4] = v51;
    v42[5] = v52;
    v55((char *)v42 + *(int *)(v44 + 28), (char *)v43 + *(int *)(v44 + 28), v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  return a1;
}

uint64_t sub_25052CFE4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  uint64_t v93 = *(void *)(v17 - 8);
  uint64_t v94 = v17;
  unint64_t v92 = *(void (**)(char *, char *, uint64_t))(v93 + 24);
  ((void (*)(uint64_t, uint64_t))v92)(v15, v16);
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *uint64_t v19 = *v20;
      uint64_t v26 = *(int *)(v21 + 20);
      unint64_t v27 = (char *)v19 + v26;
      uint64_t v28 = (char *)v20 + v26;
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v94);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v19 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v92((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v94);
LABEL_7:
  uint64_t v31 = a3[9];
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v34 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v35 = *(void *)(v34 - 8);
  unint64_t v36 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      uint64_t v39 = *v33;
      unint64_t v40 = v33[1];
      sub_2504DBC4C(*v33, v40);
      *uint64_t v32 = v39;
      v32[1] = v40;
      uint64_t v41 = v33[2];
      unint64_t v42 = v33[3];
      sub_2504DBC4C(v41, v42);
      void v32[2] = v41;
      v32[3] = v42;
      uint64_t v43 = v33[4];
      unint64_t v44 = v33[5];
      sub_2504DBC4C(v43, v44);
      v32[4] = v43;
      v32[5] = v44;
      uint64_t v45 = v33[6];
      unint64_t v46 = v33[7];
      sub_2504DBC4C(v45, v46);
      v32[6] = v45;
      v32[7] = v46;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))((char *)v32 + *(int *)(v34 + 32), (char *)v33 + *(int *)(v34 + 32), v94);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    sub_25052D638((uint64_t)v32, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v32, v33, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v64 = *v33;
  unint64_t v65 = v33[1];
  sub_2504DBC4C(*v33, v65);
  uint64_t v66 = *v32;
  unint64_t v67 = v32[1];
  *uint64_t v32 = v64;
  v32[1] = v65;
  sub_250511528(v66, v67);
  uint64_t v68 = v33[2];
  unint64_t v69 = v33[3];
  sub_2504DBC4C(v68, v69);
  uint64_t v70 = v32[2];
  unint64_t v71 = v32[3];
  void v32[2] = v68;
  v32[3] = v69;
  sub_250511528(v70, v71);
  uint64_t v72 = v33[4];
  unint64_t v73 = v33[5];
  sub_2504DBC4C(v72, v73);
  uint64_t v74 = v32[4];
  unint64_t v75 = v32[5];
  v32[4] = v72;
  v32[5] = v73;
  sub_250511528(v74, v75);
  uint64_t v76 = v33[6];
  unint64_t v77 = v33[7];
  sub_2504DBC4C(v76, v77);
  uint64_t v78 = v32[6];
  unint64_t v79 = v32[7];
  v32[6] = v76;
  v32[7] = v77;
  sub_250511528(v78, v79);
  v92((char *)v32 + *(int *)(v34 + 32), (char *)v33 + *(int *)(v34 + 32), v94);
LABEL_13:
  uint64_t v48 = a3[10];
  uint64_t v49 = (uint64_t *)(a1 + v48);
  unint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v51 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      uint64_t v80 = *v50;
      unint64_t v81 = v50[1];
      sub_2504DBC4C(*v50, v81);
      uint64_t v82 = *v49;
      unint64_t v83 = v49[1];
      *uint64_t v49 = v80;
      v49[1] = v81;
      sub_250511528(v82, v83);
      uint64_t v84 = v50[2];
      unint64_t v85 = v50[3];
      sub_2504DBC4C(v84, v85);
      uint64_t v86 = v49[2];
      unint64_t v87 = v49[3];
      void v49[2] = v84;
      v49[3] = v85;
      sub_250511528(v86, v87);
      uint64_t v88 = v50[4];
      unint64_t v89 = v50[5];
      sub_2504DBC4C(v88, v89);
      uint64_t v90 = v49[4];
      unint64_t v91 = v49[5];
      v49[4] = v88;
      v49[5] = v89;
      sub_250511528(v90, v91);
      v92((char *)v49 + *(int *)(v51 + 28), (char *)v50 + *(int *)(v51 + 28), v94);
      return a1;
    }
    sub_25052D638((uint64_t)v49, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v55)
  {
LABEL_18:
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v49, v50, *(void *)(*(void *)(v62 - 8) + 64));
    return a1;
  }
  uint64_t v56 = *v50;
  unint64_t v57 = v50[1];
  sub_2504DBC4C(*v50, v57);
  *uint64_t v49 = v56;
  v49[1] = v57;
  uint64_t v58 = v50[2];
  unint64_t v59 = v50[3];
  sub_2504DBC4C(v58, v59);
  void v49[2] = v58;
  v49[3] = v59;
  uint64_t v60 = v50[4];
  unint64_t v61 = v50[5];
  sub_2504DBC4C(v60, v61);
  v49[4] = v60;
  v49[5] = v61;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))((char *)v49 + *(int *)(v51 + 28), (char *)v50 + *(int *)(v51 + 28), v94);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  return a1;
}

uint64_t sub_25052D638(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25052D698(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a3[7];
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    void *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[9];
  uint64_t v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    long long v23 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v23;
    long long v24 = v19[3];
    v18[2] = v19[2];
    v18[3] = v24;
    v10((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v25 = a3[10];
  uint64_t v26 = (_OWORD *)(a1 + v25);
  unint64_t v27 = (_OWORD *)(a2 + v25);
  uint64_t v28 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    long long v31 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v31;
    v26[2] = v27[2];
    v10((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

uint64_t sub_25052DA14(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_250511528(v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v60 = *(void *)(v13 - 8);
  uint64_t v61 = v13;
  unint64_t v59 = *(void (**)(uint64_t, uint64_t))(v60 + 40);
  v59(v11, v12);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v61);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_25052D638((uint64_t)v15, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v59)(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v61);
LABEL_7:
  uint64_t v23 = a3[9];
  long long v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      long long v31 = *((_OWORD *)v25 + 1);
      *(_OWORD *)long long v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v31;
      long long v32 = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = v32;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v24[*(int *)(v26 + 32)], &v25[*(int *)(v26 + 32)], v61);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    sub_25052D638((uint64_t)v24, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
    memcpy(v24, v25, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v45 = *(void *)v24;
  unint64_t v46 = *((void *)v24 + 1);
  *(_OWORD *)long long v24 = *(_OWORD *)v25;
  sub_250511528(v45, v46);
  uint64_t v47 = *((void *)v24 + 2);
  unint64_t v48 = *((void *)v24 + 3);
  *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
  sub_250511528(v47, v48);
  uint64_t v49 = *((void *)v24 + 4);
  unint64_t v50 = *((void *)v24 + 5);
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  sub_250511528(v49, v50);
  uint64_t v51 = *((void *)v24 + 6);
  unint64_t v52 = *((void *)v24 + 7);
  *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
  sub_250511528(v51, v52);
  ((void (*)(char *, char *, uint64_t))v59)(&v24[*(int *)(v26 + 32)], &v25[*(int *)(v26 + 32)], v61);
LABEL_13:
  uint64_t v34 = a3[10];
  uint64_t v35 = (uint64_t *)(a1 + v34);
  unint64_t v36 = (uint64_t *)(a2 + v34);
  uint64_t v37 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      uint64_t v53 = *v35;
      unint64_t v54 = v35[1];
      *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
      sub_250511528(v53, v54);
      uint64_t v55 = v35[2];
      unint64_t v56 = v35[3];
      *((_OWORD *)v35 + 1) = *((_OWORD *)v36 + 1);
      sub_250511528(v55, v56);
      uint64_t v57 = v35[4];
      unint64_t v58 = v35[5];
      *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
      sub_250511528(v57, v58);
      ((void (*)(char *, char *, uint64_t))v59)((char *)v35 + *(int *)(v37 + 28), (char *)v36 + *(int *)(v37 + 28), v61);
      return a1;
    }
    sub_25052D638((uint64_t)v35, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v41)
  {
LABEL_18:
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
    memcpy(v35, v36, *(void *)(*(void *)(v43 - 8) + 64));
    return a1;
  }
  long long v42 = *((_OWORD *)v36 + 1);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v42;
  *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))((char *)v35 + *(int *)(v37 + 28), (char *)v36 + *(int *)(v37 + 28), v61);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return a1;
}

uint64_t sub_25052DF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25052DF90);
}

uint64_t sub_25052DF90(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = sub_2505BDA50();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_11;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[10];
  return v16(v18, a2, v17);
}

uint64_t sub_25052E16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25052E180);
}

uint64_t sub_25052E180(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = sub_2505BDA50();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_9;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[10];
  return v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for GKCrypto_GroupBlob(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6090);
}

void sub_25052E378()
{
  sub_2505BDA50();
  if (v0 <= 0x3F)
  {
    sub_25052E528(319, &qword_269AB60A0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    if (v1 <= 0x3F)
    {
      sub_25052E528(319, &qword_269AB60A8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      if (v2 <= 0x3F)
      {
        sub_25052E528(319, &qword_269AB60B0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_25052E528(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2505BE410();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_25052E57C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_2504DBC4C(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    uint64_t v11 = a2[5];
    unint64_t v12 = a2[6];
    sub_2504DBC4C(v11, v12);
    v4[5] = v11;
    v4[6] = v12;
    uint64_t v13 = a2[7];
    unint64_t v14 = a2[8];
    sub_2504DBC4C(v13, v14);
    v4[7] = v13;
    v4[8] = v14;
    uint64_t v15 = a2[10];
    v4[9] = a2[9];
    unint64_t v16 = a2[11];
    swift_bridgeObjectRetain();
    sub_2504DBC4C(v15, v16);
    v4[10] = v15;
    v4[11] = v16;
    uint64_t v17 = *(int *)(a3 + 44);
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return v4;
}

uint64_t sub_25052E6C8(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_250511528(*(void *)(a1 + 24), *(void *)(a1 + 32));
  sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_250511528(*(void *)(a1 + 56), *(void *)(a1 + 64));
  swift_bridgeObjectRelease();
  sub_250511528(*(void *)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_25052E76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  sub_2504DBC4C(v10, v11);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  uint64_t v12 = *(void *)(a2 + 56);
  unint64_t v13 = *(void *)(a2 + 64);
  sub_2504DBC4C(v12, v13);
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  unint64_t v15 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  sub_2504DBC4C(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t sub_25052E868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_2504DBC4C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_250511528(v16, v17);
  uint64_t v18 = *(void *)(a2 + 56);
  unint64_t v19 = *(void *)(a2 + 64);
  sub_2504DBC4C(v18, v19);
  uint64_t v20 = *(void *)(a1 + 56);
  unint64_t v21 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  sub_250511528(v20, v21);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 80);
  unint64_t v23 = *(void *)(a2 + 88);
  sub_2504DBC4C(v22, v23);
  uint64_t v24 = *(void *)(a1 + 80);
  unint64_t v25 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v22;
  *(void *)(a1 + 88) = v23;
  sub_250511528(v24, v25);
  uint64_t v26 = *(int *)(a3 + 44);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

uint64_t sub_25052E998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_25052EA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_250511528(v10, v11);
  uint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_250511528(v12, v13);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a1 + 80);
  unint64_t v15 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_250511528(v14, v15);
  uint64_t v16 = *(int *)(a3 + 44);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t sub_25052EB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25052EB40);
}

uint64_t sub_25052EB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25052EBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25052EC04);
}

uint64_t sub_25052EC04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 72) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for GKCrypto_UserKeys(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB60B8);
}

uint64_t sub_25052ECCC()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_25052ED88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_5Tm_0);
}

uint64_t sub_25052EDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_6Tm_0);
}

uint64_t type metadata accessor for GKCrypto_GroupBlobRequest(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB60C8);
}

unint64_t sub_25052EDD8@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_25052EDF0()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

void *sub_25052EE0C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_25052EE28(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t sub_25052EE4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_25054D008();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_25052EE9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

void sub_25052EED8()
{
  qword_269AC32D0 = (uint64_t)&unk_270191808;
}

uint64_t sub_25052EEEC@<X0>(void *a1@<X8>)
{
  return sub_25052F10C(&qword_269AB5490, &qword_269AC32D0, a1);
}

void sub_25052EF10(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void sub_25052EF20(uint64_t a1@<X8>)
{
  sub_250557E90();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t sub_25052EF54()
{
  return *(void *)v0;
}

void sub_25052EF5C(uint64_t a1@<X8>)
{
  sub_250557E90();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

void sub_25052EF94(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25052EFA0()
{
  return sub_2505BE880();
}

uint64_t sub_25052F00C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_25054D05C();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t sub_25052F058()
{
  return sub_2505BE880();
}

BOOL sub_25052F0C0(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_25052F0D4()
{
  qword_269AC32D8 = (uint64_t)&unk_270191848;
}

uint64_t sub_25052F0E8@<X0>(void *a1@<X8>)
{
  return sub_25052F10C(&qword_269AB5498, &qword_269AC32D8, a1);
}

uint64_t sub_25052F10C@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25052F164()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC32E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC32E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505BFEC0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "Member";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "Administrator";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25052F31C@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54A0, (uint64_t)qword_269AC32E0, a1);
}

uint64_t sub_25052F340()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC32F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC32F8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "ephemeralKey";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "nonce";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "ciphertexts";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25052F544()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(0);
        sub_25053E684(&qword_269AB63F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
        sub_2505BDB00();
      }
      else if (result == 2 || result == 1)
      {
        sub_2505BDAE0();
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_25052F67C()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_2505BDBB0();
            if (!v1)
            {
LABEL_15:
              if (!*(void *)(v0[4] + 16)
                || (type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(0),
                    sub_25053E684(&qword_269AB63F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag), uint64_t result = sub_2505BDBD0(), !v1))
              {
                type metadata accessor for GKCrypto_GroupHandle(0);
                uint64_t result = sub_2505BDA30();
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_25052F870@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 16) = xmmword_2505BFEF0;
  *(void *)(a1 + 32) = MEMORY[0x263F8EE78];
  return sub_2505BDA40();
}

unint64_t sub_25052F8A8()
{
  return 0xD000000000000014;
}

uint64_t (*sub_25052F8D0())()
{
  return nullsub_1;
}

uint64_t sub_25052F8F4()
{
  return sub_25052F544();
}

uint64_t sub_25052F90C()
{
  return sub_25052F67C();
}

uint64_t sub_25052F928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64A0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25052F9A8@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54A8, (uint64_t)qword_269AC32F8, a1);
}

uint64_t sub_25052F9CC(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6418, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25052FA3C()
{
  sub_25053E684(&qword_269AB6418, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle);
  return sub_2505BDB70();
}

uint64_t sub_25052FAC0()
{
  uint64_t result = sub_2505BE190();
  qword_269AC3310 = 0xD000000000000014;
  *(void *)algn_269AC3318 = 0x80000002505CA540;
  return result;
}

uint64_t sub_25052FB34()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3320);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3320);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0090;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "publicKeyHash";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ciphertext";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "tag";
  *((void *)v12 + 1) = 3;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "keyShareHint";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25052FD68()
{
  return sub_250531734();
}

uint64_t sub_25052FD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250531840(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
}

uint64_t sub_25052FDB0(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB54B0, &qword_269AC3310);
}

uint64_t (*sub_25052FDE0())()
{
  return nullsub_1;
}

uint64_t sub_25052FE04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64B0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25052FE80@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54B8, (uint64_t)qword_269AC3320, a1);
}

uint64_t sub_25052FEA4(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB63F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25052FF10()
{
  sub_25053E684(&qword_269AB63F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
  return sub_2505BDB70();
}

uint64_t sub_25052FF8C(uint64_t a1, uint64_t a2)
{
  return sub_25054AF3C(a1, a2, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag) & 1;
}

uint64_t sub_25052FFBC()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3338);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3338);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2505C0400;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)unint64_t v4 = "version";
  *(void *)(v4 + 8) = 7;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = sub_2505BDBF0();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "groupHandle";
  *(void *)(v8 + 8) = 11;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)unint64_t v10 = "AEGroupBlobCiphertext";
  *((void *)v10 + 1) = 21;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "randomizedVerificationKeys";
  *((void *)v12 + 1) = 26;
  v12[16] = 2;
  v7();
  unint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 5;
  *(void *)uint64_t v14 = "groupBlobPublicKeys";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v7();
  unint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *unint64_t v15 = 6;
  *(void *)uint64_t v16 = "groupBlobSignatures";
  *((void *)v16 + 1) = 19;
  v16[16] = 2;
  v7();
  return sub_2505BDC00();
}

uint64_t sub_250530270()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_2505BDAF0();
          break;
        case 2:
        case 3:
          sub_2505BDAE0();
          break;
        case 4:
          sub_2505303A8();
          break;
        case 5:
          sub_250530458();
          break;
        case 6:
          sub_250530508();
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_2505303A8()
{
  return sub_2505BDB10();
}

uint64_t sub_250530458()
{
  return sub_2505BDB10();
}

uint64_t sub_250530508()
{
  return sub_2505BDB10();
}

uint64_t sub_2505305B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(_DWORD *)v5 || (uint64_t result = sub_2505BDBC0(), !v4))
  {
    uint64_t v10 = *(void *)(v5 + 8);
    unint64_t v11 = *(void *)(v5 + 16);
    switch(v11 >> 62)
    {
      case 1uLL:
        if ((int)v10 != v10 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v11 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v4)
        {
LABEL_10:
          uint64_t v12 = *(void *)(v5 + 24);
          unint64_t v13 = *(void *)(v5 + 32);
          switch(v13 >> 62)
          {
            case 1uLL:
              if ((int)v12 != v12 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v12 + 16) != *(void *)(v12 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v13 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = sub_2505BDBB0();
              if (!v4)
              {
LABEL_17:
                uint64_t result = sub_2505307AC(v5, a1, a2, a3);
                if (!v4)
                {
                  sub_2505309B0(v5, a1, a2, a3);
                  sub_250530BB4(v5, a1, a2, a3);
                  type metadata accessor for GKCrypto_GroupBlob(0);
                  uint64_t result = sub_2505BDA30();
                }
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

uint64_t sub_2505307AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  unint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupBlob(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 32), (uint64_t)v11, &qword_269AB5CB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB5CB8);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_25053E684(&qword_269AB5FA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
}

uint64_t sub_2505309B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  unint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupBlob(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 36), (uint64_t)v11, &qword_269AB5CC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB5CC0);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_25053E684(&qword_269AB5FA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
}

uint64_t sub_250530BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  unint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupBlob(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 40), (uint64_t)v11, &qword_269AB5CC8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB5CC8);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  sub_25053E684(&qword_269AB6390, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
}

uint64_t sub_250530DB8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_2505BFEF0;
  *(_OWORD *)(a2 + 24) = xmmword_2505BFEF0;
  sub_2505BDA40();
  uint64_t v4 = a2 + a1[8];
  uint64_t v5 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[9];
  uint64_t v7 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[10];
  uint64_t v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  return v10(v8, 1, 1, v9);
}

unint64_t sub_250530EE8()
{
  return 0xD000000000000012;
}

uint64_t sub_250530F04()
{
  return sub_250530270();
}

uint64_t sub_250530F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2505305B8(a1, a2, a3);
}

uint64_t sub_250530F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64B8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250530FB0@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54C0, (uint64_t)qword_269AC3338, a1);
}

uint64_t sub_250530FD4(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5F70, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250531040()
{
  sub_25053E684(&qword_269AB5F70, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
  return sub_2505BDB70();
}

uint64_t sub_2505310C0()
{
  uint64_t result = sub_2505BE190();
  qword_269AC3350 = 0xD000000000000012;
  *(void *)algn_269AC3358 = 0x80000002505CA5C0;
  return result;
}

uint64_t sub_250531130(uint64_t a1)
{
  return sub_250535EF8(a1, qword_269AC3360, (uint64_t)"randomizedVerificationKeys", 26);
}

uint64_t sub_250531148()
{
  while (1)
  {
    uint64_t result = sub_2505BDAB0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_2505BDAD0();
    }
  }
  return result;
}

uint64_t sub_2505311B8()
{
  if (!*(void *)(*(void *)v0 + 16) || (uint64_t result = sub_2505BDBA0(), !v1))
  {
    type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    return sub_2505BDA30();
  }
  return result;
}

uint64_t sub_250531250@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  return sub_2505BDA40();
}

uint64_t sub_25053127C(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB54C8, &qword_269AC3350);
}

uint64_t (*sub_2505312AC())()
{
  return nullsub_1;
}

uint64_t sub_2505312D0()
{
  return sub_250531148();
}

uint64_t sub_2505312E8()
{
  return sub_2505311B8();
}

uint64_t sub_250531300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64D8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053137C@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54D0, (uint64_t)qword_269AC3360, a1);
}

uint64_t sub_2505313A0(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5FA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053140C()
{
  sub_25053E684(&qword_269AB5FA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  return sub_2505BDB70();
}

uint64_t sub_25053148C()
{
  uint64_t result = sub_2505BE190();
  qword_269AC3378 = 0xD000000000000012;
  unk_269AC3380 = 0x80000002505CA5C0;
  return result;
}

uint64_t sub_2505314F8()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3388);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3388);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0090;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "groupVerificationKey";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "adminVerificationKey";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *unint64_t v11 = 3;
  *(void *)uint64_t v12 = "groupPublicEncryptionKey";
  *((void *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "adminPublicEncryptionKey";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250531734()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          sub_2505BDAE0();
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_250531814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250531840(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
}

uint64_t sub_250531840(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v7 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v5)
      {
LABEL_8:
        uint64_t v10 = v4[2];
        unint64_t v11 = v4[3];
        switch(v11 >> 62)
        {
          case 1uLL:
            if ((int)v10 != v10 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v11 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_2505BDBB0();
            if (!v5)
            {
LABEL_15:
              uint64_t v12 = v4[4];
              unint64_t v13 = v4[5];
              switch(v13 >> 62)
              {
                case 1uLL:
                  if ((int)v12 != v12 >> 32) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 2uLL:
                  if (*(void *)(v12 + 16) != *(void *)(v12 + 24)) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 3uLL:
                  goto LABEL_22;
                default:
                  if ((v13 & 0xFF000000000000) == 0) {
                    goto LABEL_22;
                  }
LABEL_21:
                  uint64_t result = sub_2505BDBB0();
                  if (!v5)
                  {
LABEL_22:
                    uint64_t v14 = v4[6];
                    unint64_t v15 = v4[7];
                    switch(v15 >> 62)
                    {
                      case 1uLL:
                        if ((int)v14 != v14 >> 32) {
                          goto LABEL_28;
                        }
                        goto LABEL_29;
                      case 2uLL:
                        if (*(void *)(v14 + 16) != *(void *)(v14 + 24)) {
                          goto LABEL_28;
                        }
                        goto LABEL_29;
                      case 3uLL:
                        goto LABEL_29;
                      default:
                        if ((v15 & 0xFF000000000000) == 0) {
                          goto LABEL_29;
                        }
LABEL_28:
                        uint64_t result = sub_2505BDBB0();
                        if (!v5)
                        {
LABEL_29:
                          a4(0);
                          uint64_t result = sub_2505BDA30();
                        }
                        break;
                    }
                  }
                  break;
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_250531ACC(uint64_t a1, uint64_t a2)
{
  return sub_25054AF3C(a1, a2, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys) & 1;
}

uint64_t sub_250531AFC@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_2505BFEF0;
  a1[1] = xmmword_2505BFEF0;
  a1[2] = xmmword_2505BFEF0;
  a1[3] = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

uint64_t sub_250531B2C(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB54D8, &qword_269AC3378);
}

uint64_t sub_250531B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250531BD0@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54E0, (uint64_t)qword_269AC3388, a1);
}

uint64_t sub_250531BF4(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5FA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250531C60()
{
  sub_25053E684(&qword_269AB5FA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  return sub_2505BDB70();
}

uint64_t sub_250531CDC()
{
  uint64_t result = sub_2505BE190();
  qword_269AC33A0 = 0xD000000000000012;
  *(void *)algn_269AC33A8 = 0x80000002505CA5C0;
  return result;
}

uint64_t sub_250531D48()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC33B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC33B0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "currentGroupAdminSignature";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "previousGroupAdminSignature";
  *((void *)v10 + 1) = 27;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "currentMemberSignature";
  *(void *)(v11 + 8) = 22;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250531F4C()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        sub_2505BDAE0();
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_250531FF4()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_2505BDBB0();
            if (!v1)
            {
LABEL_15:
              uint64_t v7 = v0[4];
              unint64_t v8 = v0[5];
              switch(v8 >> 62)
              {
                case 1uLL:
                  if ((int)v7 != v7 >> 32) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 2uLL:
                  if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 3uLL:
                  goto LABEL_22;
                default:
                  if ((v8 & 0xFF000000000000) == 0) {
                    goto LABEL_22;
                  }
LABEL_21:
                  uint64_t result = sub_2505BDBB0();
                  if (!v1)
                  {
LABEL_22:
                    type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
                    uint64_t result = sub_2505BDA30();
                  }
                  break;
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_2505321F0@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_2505BFEF0;
  a1[1] = xmmword_2505BFEF0;
  a1[2] = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

uint64_t sub_250532220(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB54E8, &qword_269AC33A0);
}

uint64_t sub_250532248()
{
  return sub_250531F4C();
}

uint64_t sub_250532260()
{
  return sub_250531FF4();
}

uint64_t sub_250532278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64E8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_2505322F4@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54F0, (uint64_t)qword_269AC33B0, a1);
}

uint64_t sub_250532318(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6390, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250532384()
{
  sub_25053E684(&qword_269AB6390, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  return sub_2505BDB70();
}

uint64_t sub_250532400()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC33C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC33C8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505BFEC0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "adminGroupHandleBlob";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "adminGroupAEBlobCiphertext";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_2505325B8()
{
  return sub_25053BB58();
}

uint64_t sub_2505325D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250533B4C(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_AdminGroupBlob);
}

uint64_t sub_2505325FC@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_2505BFEF0;
  a1[1] = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

unint64_t sub_250532628()
{
  return 0xD000000000000017;
}

uint64_t (*sub_25053264C())()
{
  return nullsub_1;
}

uint64_t sub_250532670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_2505326EC@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB54F8, (uint64_t)qword_269AC33C8, a1);
}

uint64_t sub_250532710(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5F10, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053277C()
{
  sub_25053E684(&qword_269AB5F10, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
  return sub_2505BDB70();
}

uint64_t sub_2505327F8(uint64_t a1, uint64_t a2)
{
  return sub_25054CDD0(a1, a2, type metadata accessor for GKCrypto_AdminGroupBlob) & 1;
}

uint64_t sub_250532828()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC33E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC33E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505BFEC0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "groupVersion";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "seed";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_2505329E0()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_2505BDAE0();
      }
      else if (result == 1)
      {
        sub_2505BDAF0();
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_250532A84()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_2505BDBC0(), !v1))
  {
    uint64_t v3 = *(void *)(v0 + 8);
    unint64_t v4 = *(void *)(v0 + 16);
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v1)
        {
LABEL_10:
          type metadata accessor for GKCrypto_VersionedSeed(0);
          uint64_t result = sub_2505BDA30();
        }
        break;
    }
  }
  return result;
}

uint64_t sub_250532B9C@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

unint64_t sub_250532BCC()
{
  return 0xD000000000000016;
}

uint64_t sub_250532BE8()
{
  return sub_2505329E0();
}

uint64_t sub_250532C00()
{
  return sub_250532A84();
}

uint64_t sub_250532C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB64F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250532C94@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5500, (uint64_t)qword_269AC33E0, a1);
}

uint64_t sub_250532CB8(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5EB8, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250532D24()
{
  sub_25053E684(&qword_269AB5EB8, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
  return sub_2505BDB70();
}

uint64_t sub_250532DA4()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC33F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC33F8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BB0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "encryptionKey";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "verificationKey";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "encryptionKeySignature";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  unint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *unint64_t v15 = 5;
  *(void *)uint64_t v16 = "verificationKeySelfSignature";
  *((void *)v16 + 1) = 28;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "verificationKeyExternalSignatures";
  *((void *)v18 + 1) = 33;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)uint64_t v20 = "metadata";
  *((void *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053309C()
{
  uint64_t result = sub_2505BDAB0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          sub_2505BDAF0();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          uint64_t v4 = v3;
          sub_2505BDAE0();
          goto LABEL_8;
        case 6:
          type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair(0);
          sub_25053E684(&qword_269AB6330, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
          uint64_t v4 = v3;
          sub_2505BDB00();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_250533244()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_2505BDBC0(), !v1))
  {
    uint64_t v3 = *(void *)(v0 + 8);
    unint64_t v4 = *(void *)(v0 + 16);
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v1)
        {
LABEL_10:
          uint64_t v5 = *(void *)(v0 + 24);
          unint64_t v6 = *(void *)(v0 + 32);
          switch(v6 >> 62)
          {
            case 1uLL:
              if ((int)v5 != v5 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v6 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = sub_2505BDBB0();
              if (!v1)
              {
LABEL_17:
                uint64_t v7 = *(void *)(v0 + 40);
                unint64_t v8 = *(void *)(v0 + 48);
                switch(v8 >> 62)
                {
                  case 1uLL:
                    if ((int)v7 != v7 >> 32) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 2uLL:
                    if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 3uLL:
                    goto LABEL_24;
                  default:
                    if ((v8 & 0xFF000000000000) == 0) {
                      goto LABEL_24;
                    }
LABEL_23:
                    uint64_t result = sub_2505BDBB0();
                    if (!v1)
                    {
LABEL_24:
                      uint64_t v9 = *(void *)(v0 + 56);
                      unint64_t v10 = *(void *)(v0 + 64);
                      switch(v10 >> 62)
                      {
                        case 1uLL:
                          if ((int)v9 != v9 >> 32) {
                            goto LABEL_30;
                          }
                          goto LABEL_31;
                        case 2uLL:
                          if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
                            goto LABEL_30;
                          }
                          goto LABEL_31;
                        case 3uLL:
                          goto LABEL_31;
                        default:
                          if ((v10 & 0xFF000000000000) == 0) {
                            goto LABEL_31;
                          }
LABEL_30:
                          uint64_t result = sub_2505BDBB0();
                          if (!v1)
                          {
LABEL_31:
                            if (!*(void *)(*(void *)(v0 + 72) + 16)
                              || (type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair(0),
                                  sub_25053E684(&qword_269AB6330, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair), uint64_t result = sub_2505BDBD0(), !v1))
                            {
                              uint64_t v11 = *(void *)(v0 + 80);
                              unint64_t v12 = *(void *)(v0 + 88);
                              switch(v12 >> 62)
                              {
                                case 1uLL:
                                  if ((int)v11 != v11 >> 32) {
                                    goto LABEL_39;
                                  }
                                  goto LABEL_40;
                                case 2uLL:
                                  if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
                                    goto LABEL_39;
                                  }
                                  goto LABEL_40;
                                case 3uLL:
                                  goto LABEL_40;
                                default:
                                  if ((v12 & 0xFF000000000000) == 0) {
                                    goto LABEL_40;
                                  }
LABEL_39:
                                  uint64_t result = sub_2505BDBB0();
                                  if (!v1)
                                  {
LABEL_40:
                                    type metadata accessor for GKCrypto_UserKeys(0);
                                    uint64_t result = sub_2505BDA30();
                                  }
                                  break;
                              }
                            }
                          }
                          break;
                      }
                    }
                    break;
                }
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

uint64_t sub_2505335D4@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 24) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 40) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 56) = xmmword_2505BFEF0;
  *(void *)(a1 + 72) = MEMORY[0x263F8EE78];
  *(_OWORD *)(a1 + 80) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

unint64_t sub_250533620()
{
  return 0xD000000000000011;
}

uint64_t sub_25053363C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_2505336AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_25053371C())()
{
  return nullsub_1;
}

uint64_t sub_250533740()
{
  return sub_25053309C();
}

uint64_t sub_250533758()
{
  return sub_250533244();
}

uint64_t sub_250533770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6478, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_2505337EC@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5508, (uint64_t)qword_269AC33F8, a1);
}

uint64_t sub_250533810(uint64_t a1)
{
  uint64_t v2 = sub_25053E684((unint64_t *)&qword_269AB5A40, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053387C()
{
  sub_25053E684((unint64_t *)&qword_269AB5A40, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
  return sub_2505BDB70();
}

uint64_t sub_2505338FC()
{
  uint64_t result = sub_2505BE190();
  qword_269AC3410 = 0xD000000000000011;
  *(void *)algn_269AC3418 = 0x80000002505CA4D0;
  return result;
}

uint64_t sub_250533968()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3420);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3420);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505BFEC0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "verificationKey";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "signature";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250533B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250533B4C(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
}

uint64_t sub_250533B4C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v7 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v5)
      {
LABEL_8:
        uint64_t v10 = v4[2];
        unint64_t v11 = v4[3];
        switch(v11 >> 62)
        {
          case 1uLL:
            if ((int)v10 != v10 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v11 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_2505BDBB0();
            if (!v5)
            {
LABEL_15:
              a4(0);
              uint64_t result = sub_2505BDA30();
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_250533CD0(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB5510, &qword_269AC3410);
}

uint64_t sub_250533CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6500, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250533D74@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5518, (uint64_t)qword_269AC3420, a1);
}

uint64_t sub_250533D98(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6330, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250533E04()
{
  sub_25053E684(&qword_269AB6330, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
  return sub_2505BDB70();
}

uint64_t sub_250533E80(uint64_t a1, uint64_t a2)
{
  return sub_25054CDD0(a1, a2, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair) & 1;
}

uint64_t sub_250533EB0()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3438);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3438);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "users";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "preliminarySeed";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "groupAssociatedData";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_2505340B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_2505BDAB0();
  uint64_t v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if (v10) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v12 = v11;
        sub_250536684(a1, v5, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_GroupAETextToSign);
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
        sub_25053E684(&qword_269AB5EB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
        uint64_t v12 = v11;
        sub_2505BDB00();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = sub_2505BDAB0();
    }
    uint64_t v12 = v11;
    sub_2505341FC();
LABEL_5:
    uint64_t v11 = v12;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_2505341FC()
{
  return sub_2505BDB10();
}

uint64_t sub_2505342AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(*(void *)v3 + 16)
    || (type metadata accessor for GKCrypto_GroupAETextToSign.User(0),
        sub_25053E684(&qword_269AB5EB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User), uint64_t result = sub_2505BDBD0(), !v4))
  {
    uint64_t result = sub_250536928(v3, a1, a2, a3, type metadata accessor for GKCrypto_GroupAETextToSign, 2);
    if (!v4)
    {
      sub_2505343F0(v3, a1, a2, a3);
      type metadata accessor for GKCrypto_GroupAETextToSign(0);
      return sub_2505BDA30();
    }
  }
  return result;
}

uint64_t sub_2505343F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 28), (uint64_t)v11, &qword_269AB5EC8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB5EC8);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_25053E684(&qword_269AB5E98, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
}

uint64_t sub_2505345F4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  sub_2505BDA40();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for GKCrypto_VersionedSeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t sub_2505346D4()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_2505346F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2505340B4(a1, a2, a3);
}

uint64_t sub_250534708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2505342AC(a1, a2, a3);
}

uint64_t sub_250534720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6508, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053479C@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5520, (uint64_t)qword_269AC3438, a1);
}

uint64_t sub_2505347C0(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5EA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053482C()
{
  sub_25053E684(&qword_269AB5EA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
  return sub_2505BDB70();
}

uint64_t sub_2505348AC()
{
  uint64_t result = sub_2505BE190();
  qword_269AC3450 = 0xD00000000000001ALL;
  *(void *)algn_269AC3458 = 0x80000002505CA900;
  return result;
}

uint64_t sub_250534914()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3460);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3460);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0090;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "groupKitID";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "userKeysBlob";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "role";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "keyShare";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250534B54()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
          sub_2505BDAE0();
          break;
        case 3:
          sub_25054D008();
          sub_2505BDAC0();
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_250534C84()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_2505BDBB0();
            if (!v1)
            {
LABEL_15:
              if (!v0[4] || (sub_25054D008(), uint64_t result = sub_2505BDB90(), !v1))
              {
                uint64_t v7 = v0[6];
                unint64_t v8 = v0[7];
                switch(v8 >> 62)
                {
                  case 1uLL:
                    if ((int)v7 != v7 >> 32) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 2uLL:
                    if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 3uLL:
                    goto LABEL_24;
                  default:
                    if ((v8 & 0xFF000000000000) == 0) {
                      goto LABEL_24;
                    }
LABEL_23:
                    uint64_t result = sub_2505BDBB0();
                    if (!v1)
                    {
LABEL_24:
                      type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
                      uint64_t result = sub_2505BDA30();
                    }
                    break;
                }
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_250534ECC@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 16) = xmmword_2505BFEF0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

uint64_t sub_250534F08(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB5528, &qword_269AC3450);
}

uint64_t sub_250534F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_250534FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_250535010()
{
  return sub_250534B54();
}

uint64_t sub_250535028()
{
  return sub_250534C84();
}

uint64_t sub_250535040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6528, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_2505350BC@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5530, (uint64_t)qword_269AC3460, a1);
}

uint64_t sub_2505350E0(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5EB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053514C()
{
  sub_25053E684(&qword_269AB5EB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
  return sub_2505BDB70();
}

uint64_t sub_2505351CC()
{
  uint64_t result = sub_2505BE190();
  qword_269AC3478 = 0xD00000000000001ALL;
  unk_269AC3480 = 0x80000002505CA900;
  return result;
}

uint64_t sub_250535240()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3488);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3488);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505BFEC0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "originatorID";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "adminGroupBlob";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_2505353F8()
{
  while (1)
  {
    uint64_t result = sub_2505BDAB0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      sub_250535488();
    }
    else if (result == 1)
    {
      sub_2505BDAE0();
    }
  }
  return result;
}

uint64_t sub_250535488()
{
  return sub_2505BDB10();
}

uint64_t sub_250535538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v4)
      {
LABEL_8:
        uint64_t result = sub_250535648((uint64_t)v3, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
          return sub_2505BDA30();
        }
      }
      return result;
  }
}

uint64_t sub_250535648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 24), (uint64_t)v11, &qword_269AB5EE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB5EE0);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_AdminGroupBlob);
  sub_25053E684(&qword_269AB5F10, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_AdminGroupBlob);
}

uint64_t sub_250535850@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_2505BFEF0;
  sub_2505BDA40();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_2505358E0(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB5538, &qword_269AC3478);
}

uint64_t sub_250535908()
{
  return sub_2505353F8();
}

uint64_t sub_250535920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250535538(a1, a2, a3);
}

uint64_t sub_250535938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6538, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_2505359B4@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5540, (uint64_t)qword_269AC3488, a1);
}

uint64_t sub_2505359D8(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5E98, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250535A44()
{
  sub_25053E684(&qword_269AB5E98, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  return sub_2505BDB70();
}

uint64_t sub_250535AC0()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC34A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC34A0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "groupAETextToSignBlob";
  *((void *)v10 + 1) = 21;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "signature";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250535CC4()
{
  return sub_25053E0C0();
}

uint64_t sub_250535CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250539938(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
}

unint64_t sub_250535D0C()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_250535D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6540, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250535DA4@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5548, (uint64_t)qword_269AC34A0, a1);
}

uint64_t sub_250535DC8(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5EA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250535E34()
{
  sub_25053E684(&qword_269AB5EA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  return sub_2505BDB70();
}

uint64_t sub_250535EB0(uint64_t a1, uint64_t a2)
{
  return sub_25054B86C(a1, a2, type metadata accessor for GKCrypto_GroupAEDataToEncrypt) & 1;
}

uint64_t sub_250535EE0(uint64_t a1)
{
  return sub_250535EF8(a1, qword_269AC34B8, (uint64_t)"administratorID", 15);
}

uint64_t sub_250535EF8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_2505BDC10();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2505BFE80;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x263F50718];
  uint64_t v13 = sub_2505BDBF0();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return sub_2505BDC00();
}

uint64_t sub_250536054()
{
  while (1)
  {
    uint64_t result = sub_2505BDAB0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_2505BDAE0();
    }
  }
  return result;
}

uint64_t sub_2505360C4()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for GKCrypto_AdminMetaData(0);
        return sub_2505BDA30();
      }
      return result;
  }
}

uint64_t sub_2505361B4@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

unint64_t sub_2505361E0()
{
  return 0xD000000000000016;
}

uint64_t sub_2505361FC()
{
  return sub_250536054();
}

uint64_t sub_250536214()
{
  return sub_2505360C4();
}

uint64_t sub_25053622C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6548, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_2505362A8@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5550, (uint64_t)qword_269AC34B8, a1);
}

uint64_t sub_2505362CC(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5F00, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250536338()
{
  sub_25053E684(&qword_269AB5F00, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
  return sub_2505BDB70();
}

uint64_t sub_2505363B8()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC34D0);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC34D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "adminPreliminarySeed";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "metaData";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "signature";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_2505365BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = sub_2505BDAB0();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3:
        sub_2505BDAE0();
        break;
      case 2:
        sub_250536738();
        break;
      case 1:
        sub_250536684(a1, v5, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_AdminPlainText);
        break;
    }
  }
  return result;
}

uint64_t sub_250536684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return sub_2505BDB10();
}

uint64_t sub_250536738()
{
  return sub_2505BDB10();
}

uint64_t sub_2505367E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_250536928((uint64_t)v3, a1, a2, a3, type metadata accessor for GKCrypto_AdminPlainText, 1);
  if (!v4)
  {
    sub_250536B38((uint64_t)v3, a1, a2, a3);
    uint64_t v9 = *v3;
    unint64_t v10 = v3[1];
    switch(v10 >> 62)
    {
      case 1uLL:
        if ((int)v9 != v9 >> 32) {
          goto LABEL_8;
        }
        break;
      case 2uLL:
        if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
          goto LABEL_8;
        }
        break;
      case 3uLL:
        break;
      default:
        if ((v10 & 0xFF000000000000) != 0) {
LABEL_8:
        }
          sub_2505BDBB0();
        break;
    }
    type metadata accessor for GKCrypto_AdminPlainText(0);
    return sub_2505BDA30();
  }
  return result;
}

uint64_t sub_250536928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  v25[0] = a6;
  v25[1] = a3;
  v25[3] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  MEMORY[0x270FA5388](v8 - 8, v9, v10, v11, v12);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15, v17, v18, v19, v20);
  uint64_t v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a5(0);
  sub_2504DAEFC(a1 + *(int *)(v23 + 24), (uint64_t)v14, &qword_269AB5EC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
    return sub_2504DAF60((uint64_t)v14, &qword_269AB5EC0);
  }
  sub_250549DC8((uint64_t)v14, (uint64_t)v22, type metadata accessor for GKCrypto_VersionedSeed);
  sub_25053E684(&qword_269AB5EB8, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v22, type metadata accessor for GKCrypto_VersionedSeed);
}

uint64_t sub_250536B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_AdminPlainText(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 28), (uint64_t)v11, &qword_269AB5F18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB5F18);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_AdminMetaData);
  sub_25053E684(&qword_269AB5F00, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_AdminMetaData);
}

uint64_t sub_250536D3C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_2505BFEF0;
  sub_2505BDA40();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for GKCrypto_VersionedSeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v7 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t sub_250536E1C()
{
  return 0xD000000000000017;
}

uint64_t sub_250536E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_250536EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_250536F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2505365BC(a1, a2, a3);
}

uint64_t sub_250536F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2505367E8(a1, a2, a3);
}

uint64_t sub_250536F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6550, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250536FC4@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5558, (uint64_t)qword_269AC34D0, a1);
}

uint64_t sub_250536FE8(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5F08, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250537054()
{
  sub_25053E684(&qword_269AB5F08, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
  return sub_2505BDB70();
}

uint64_t sub_2505370D4()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC34E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC34E8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2505C1BC0;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "inviteeID";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_2505BDBF0();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "groupID";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "randomizedVerificationKey";
  *((void *)v11 + 1) = 25;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 4;
  *(void *)uint64_t v13 = "keyOffset";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "metadata";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "inviterID";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "rsvpResponseDigest";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)uint64_t v21 = "groupVersionWhenInvited";
  *((void *)v21 + 1) = 23;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "inviterKeyHint";
  *(void *)(v22 + 8) = 14;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return sub_2505BDC00();
}

uint64_t sub_25053744C()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
          sub_2505BDAE0();
          break;
        case 8:
          sub_2505BDAF0();
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_2505375A4()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v3 = *(void *)(v0 + 8);
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_2505BDBB0();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = *(void *)(v0 + 16);
        unint64_t v6 = *(void *)(v0 + 24);
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_2505BDBB0();
            if (!v1)
            {
LABEL_15:
              uint64_t v7 = *(void *)(v0 + 32);
              unint64_t v8 = *(void *)(v0 + 40);
              switch(v8 >> 62)
              {
                case 1uLL:
                  if ((int)v7 != v7 >> 32) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 2uLL:
                  if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 3uLL:
                  goto LABEL_22;
                default:
                  if ((v8 & 0xFF000000000000) == 0) {
                    goto LABEL_22;
                  }
LABEL_21:
                  uint64_t result = sub_2505BDBB0();
                  if (!v1)
                  {
LABEL_22:
                    uint64_t v9 = *(void *)(v0 + 48);
                    unint64_t v10 = *(void *)(v0 + 56);
                    switch(v10 >> 62)
                    {
                      case 1uLL:
                        if ((int)v9 != v9 >> 32) {
                          goto LABEL_28;
                        }
                        goto LABEL_29;
                      case 2uLL:
                        if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
                          goto LABEL_28;
                        }
                        goto LABEL_29;
                      case 3uLL:
                        goto LABEL_29;
                      default:
                        if ((v10 & 0xFF000000000000) == 0) {
                          goto LABEL_29;
                        }
LABEL_28:
                        uint64_t result = sub_2505BDBB0();
                        if (!v1)
                        {
LABEL_29:
                          uint64_t v11 = *(void *)(v0 + 64);
                          unint64_t v12 = *(void *)(v0 + 72);
                          switch(v12 >> 62)
                          {
                            case 1uLL:
                              if ((int)v11 != v11 >> 32) {
                                goto LABEL_35;
                              }
                              goto LABEL_36;
                            case 2uLL:
                              if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
                                goto LABEL_35;
                              }
                              goto LABEL_36;
                            case 3uLL:
                              goto LABEL_36;
                            default:
                              if ((v12 & 0xFF000000000000) == 0) {
                                goto LABEL_36;
                              }
LABEL_35:
                              uint64_t result = sub_2505BDBB0();
                              if (!v1)
                              {
LABEL_36:
                                uint64_t v13 = *(void *)(v0 + 80);
                                unint64_t v14 = *(void *)(v0 + 88);
                                switch(v14 >> 62)
                                {
                                  case 1uLL:
                                    if ((int)v13 != v13 >> 32) {
                                      goto LABEL_42;
                                    }
                                    goto LABEL_43;
                                  case 2uLL:
                                    if (*(void *)(v13 + 16) != *(void *)(v13 + 24)) {
                                      goto LABEL_42;
                                    }
                                    goto LABEL_43;
                                  case 3uLL:
                                    goto LABEL_43;
                                  default:
                                    if ((v14 & 0xFF000000000000) == 0) {
                                      goto LABEL_43;
                                    }
LABEL_42:
                                    uint64_t result = sub_2505BDBB0();
                                    if (!v1)
                                    {
LABEL_43:
                                      uint64_t v15 = *(void *)(v0 + 96);
                                      unint64_t v16 = *(void *)(v0 + 104);
                                      switch(v16 >> 62)
                                      {
                                        case 1uLL:
                                          if ((int)v15 != v15 >> 32) {
                                            goto LABEL_49;
                                          }
                                          goto LABEL_50;
                                        case 2uLL:
                                          if (*(void *)(v15 + 16) != *(void *)(v15 + 24)) {
                                            goto LABEL_49;
                                          }
                                          goto LABEL_50;
                                        case 3uLL:
                                          goto LABEL_50;
                                        default:
                                          if ((v16 & 0xFF000000000000) == 0) {
                                            goto LABEL_50;
                                          }
LABEL_49:
                                          uint64_t result = sub_2505BDBB0();
                                          if (!v1)
                                          {
LABEL_50:
                                            if (!*(_DWORD *)(v0 + 112) || (uint64_t result = sub_2505BDBC0(), !v1))
                                            {
                                              uint64_t v17 = *(void *)(v0 + 120);
                                              unint64_t v18 = *(void *)(v0 + 128);
                                              switch(v18 >> 62)
                                              {
                                                case 1uLL:
                                                  uint64_t v19 = (int)v17;
                                                  uint64_t v20 = v17 >> 32;
                                                  goto LABEL_57;
                                                case 2uLL:
                                                  uint64_t v19 = *(void *)(v17 + 16);
                                                  uint64_t v20 = *(void *)(v17 + 24);
LABEL_57:
                                                  if (v19 != v20) {
                                                    goto LABEL_58;
                                                  }
                                                  goto LABEL_59;
                                                case 3uLL:
                                                  goto LABEL_59;
                                                default:
                                                  if ((v18 & 0xFF000000000000) == 0) {
                                                    goto LABEL_59;
                                                  }
LABEL_58:
                                                  uint64_t result = sub_2505BDBB0();
                                                  if (!v1)
                                                  {
LABEL_59:
                                                    type metadata accessor for GKCrypto_Invite(0);
                                                    uint64_t result = sub_2505BDA30();
                                                  }
                                                  break;
                                              }
                                            }
                                          }
                                          break;
                                      }
                                    }
                                    break;
                                }
                              }
                              break;
                          }
                        }
                        break;
                    }
                  }
                  break;
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_250537A34@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 16) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 32) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 48) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 64) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 80) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 96) = xmmword_2505BFEF0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

uint64_t sub_250537A74()
{
  return 0x6F74707972434B47;
}

uint64_t sub_250537A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_250537B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 52);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_250537B78())()
{
  return nullsub_1;
}

uint64_t sub_250537B9C()
{
  return sub_25053744C();
}

uint64_t sub_250537BB4()
{
  return sub_2505375A4();
}

uint64_t sub_250537BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6560, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250537C48@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5560, (uint64_t)qword_269AC34E8, a1);
}

uint64_t sub_250537C6C(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6280, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250537CD8()
{
  sub_25053E684(&qword_269AB6280, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
  return sub_2505BDB70();
}

uint64_t sub_250537D54()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3500);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3500);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "invite";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "signature";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250537F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053AB80(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_250537F84);
}

uint64_t sub_250537F84()
{
  return sub_2505BDB10();
}

uint64_t sub_250538034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053AD40(a1, a2, a3, sub_250538074, (void (*)(void))type metadata accessor for GKCrypto_SignedInvite);
}

uint64_t sub_250538074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6570);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_Invite(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_SignedInvite(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 28), (uint64_t)v11, &qword_269AB6570);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB6570);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_Invite);
  sub_25053E684(&qword_269AB6280, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_Invite);
}

uint64_t sub_250538278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2505394BC(a1, type metadata accessor for GKCrypto_Invite, a2);
}

unint64_t sub_250538290()
{
  return 0xD000000000000015;
}

uint64_t sub_2505382AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6568, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedInvite);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250538328@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5568, (uint64_t)qword_269AC3500, a1);
}

uint64_t sub_25053834C(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6260, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedInvite);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_2505383B8()
{
  sub_25053E684(&qword_269AB6260, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedInvite);
  return sub_2505BDB70();
}

uint64_t sub_250538438()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3518);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3518);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0410;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "response";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "nonce";
  *((void *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "groupIdHint";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "verificationKey";
  *(void *)(v15 + 8) = 15;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_2505386BC()
{
  uint64_t result = sub_2505BDAB0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          sub_2505BDAF0();
          goto LABEL_5;
        case 2:
          sub_25054D05C();
          uint64_t v4 = v3;
          sub_2505BDAC0();
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
          uint64_t v4 = v3;
          sub_2505BDAE0();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_2505387FC()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_2505BDBC0(), !v1))
  {
    if (!*(void *)(v0 + 8) || (sub_25054D05C(), uint64_t result = sub_2505BDB90(), !v1))
    {
      uint64_t v3 = *(void *)(v0 + 24);
      unint64_t v4 = *(void *)(v0 + 32);
      switch(v4 >> 62)
      {
        case 1uLL:
          if ((int)v3 != v3 >> 32) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 2uLL:
          if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_12;
        default:
          if ((v4 & 0xFF000000000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          uint64_t result = sub_2505BDBB0();
          if (!v1)
          {
LABEL_12:
            uint64_t v5 = *(void *)(v0 + 40);
            unint64_t v6 = *(void *)(v0 + 48);
            switch(v6 >> 62)
            {
              case 1uLL:
                if ((int)v5 != v5 >> 32) {
                  goto LABEL_18;
                }
                goto LABEL_19;
              case 2uLL:
                if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                  goto LABEL_18;
                }
                goto LABEL_19;
              case 3uLL:
                goto LABEL_19;
              default:
                if ((v6 & 0xFF000000000000) == 0) {
                  goto LABEL_19;
                }
LABEL_18:
                uint64_t result = sub_2505BDBB0();
                if (!v1)
                {
LABEL_19:
                  uint64_t v7 = *(void *)(v0 + 56);
                  unint64_t v8 = *(void *)(v0 + 64);
                  switch(v8 >> 62)
                  {
                    case 1uLL:
                      if ((int)v7 != v7 >> 32) {
                        goto LABEL_25;
                      }
                      goto LABEL_26;
                    case 2uLL:
                      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                        goto LABEL_25;
                      }
                      goto LABEL_26;
                    case 3uLL:
                      goto LABEL_26;
                    default:
                      if ((v8 & 0xFF000000000000) == 0) {
                        goto LABEL_26;
                      }
LABEL_25:
                      uint64_t result = sub_2505BDBB0();
                      if (!v1)
                      {
LABEL_26:
                        type metadata accessor for GKCrypto_RSVP(0);
                        uint64_t result = sub_2505BDA30();
                      }
                      break;
                  }
                }
                break;
            }
          }
          break;
      }
    }
  }
  return result;
}

uint64_t sub_250538A60@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 40) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 56) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

uint64_t sub_250538AA4()
{
  return 0x6F74707972434B47;
}

uint64_t (*sub_250538AD0())()
{
  return nullsub_1;
}

uint64_t sub_250538AF4()
{
  return sub_2505386BC();
}

uint64_t sub_250538B0C()
{
  return sub_2505387FC();
}

uint64_t sub_250538B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6580, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250538BA0@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5570, (uint64_t)qword_269AC3518, a1);
}

uint64_t sub_250538BC4(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6240, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250538C30()
{
  sub_25053E684(&qword_269AB6240, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
  return sub_2505BDB70();
}

uint64_t sub_250538CAC()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3530);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3530);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2505C0400;
  unint64_t v4 = v19 + v3;
  unint64_t v5 = v19 + v3 + v1[14];
  *(void *)(v19 + v3) = 0;
  *(void *)unint64_t v5 = "UNSPECIFIED";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_2505BDBF0();
  unint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "ACCEPT";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "REJECT";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 3;
  *(void *)uint64_t v13 = "LEAVE";
  *((void *)v13 + 1) = 5;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "DEMOTE";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "DESTROY";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  return sub_2505BDC00();
}

uint64_t sub_250538F5C@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5578, (uint64_t)qword_269AC3530, a1);
}

uint64_t sub_250538F80()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3548);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3548);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "rsvp";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "signature";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250539184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053AB80(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_2505391B0);
}

uint64_t sub_2505391B0()
{
  return sub_2505BDB10();
}

uint64_t sub_250539260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053AD40(a1, a2, a3, sub_2505392A0, (void (*)(void))type metadata accessor for GKCrypto_SignedRSVP);
}

uint64_t sub_2505392A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_SignedRSVP(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 28), (uint64_t)v11, &qword_269AB5AB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB5AB8);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_RSVP);
  sub_25053E684(&qword_269AB6240, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_RSVP);
}

uint64_t sub_2505394A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2505394BC(a1, type metadata accessor for GKCrypto_RSVP, a2);
}

uint64_t sub_2505394BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 8) = xmmword_2505BFEF0;
  sub_2505BDA40();
  uint64_t v6 = a3 + *(int *)(a1 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(v6, 1, 1, v7);
}

unint64_t sub_250539560()
{
  return 0xD000000000000013;
}

uint64_t sub_25053957C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6488, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_2505395F8@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5580, (uint64_t)qword_269AC3548, a1);
}

uint64_t sub_25053961C(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5AC0, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250539688()
{
  sub_25053E684(&qword_269AB5AC0, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
  return sub_2505BDB70();
}

uint64_t sub_250539708()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3560);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3560);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "randomizedVerificationKey";
  *((void *)v10 + 1) = 25;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "ciphertextOfKeyShare";
  *(void *)(v11 + 8) = 20;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053990C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250539938(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_RSVPResponse);
}

uint64_t sub_250539938(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(_DWORD *)v4 || (uint64_t result = sub_2505BDBC0(), !v5))
  {
    uint64_t v8 = *(void *)(v4 + 8);
    unint64_t v9 = *(void *)(v4 + 16);
    switch(v9 >> 62)
    {
      case 1uLL:
        if ((int)v8 != v8 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v8 + 16) != *(void *)(v8 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v9 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v5)
        {
LABEL_10:
          uint64_t v10 = *(void *)(v4 + 24);
          unint64_t v11 = *(void *)(v4 + 32);
          switch(v11 >> 62)
          {
            case 1uLL:
              if ((int)v10 != v10 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v11 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = sub_2505BDBB0();
              if (!v5)
              {
LABEL_17:
                a4(0);
                uint64_t result = sub_2505BDA30();
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

unint64_t sub_250539AE4()
{
  return 0xD000000000000015;
}

uint64_t sub_250539B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6598, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPResponse);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250539B7C@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5588, (uint64_t)qword_269AC3560, a1);
}

uint64_t sub_250539BA0(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6210, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPResponse);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250539C0C()
{
  sub_25053E684(&qword_269AB6210, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPResponse);
  return sub_2505BDB70();
}

uint64_t sub_250539C88(uint64_t a1, uint64_t a2)
{
  return sub_25054B86C(a1, a2, type metadata accessor for GKCrypto_RSVPResponse) & 1;
}

uint64_t sub_250539CB8()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3578);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3578);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505BFEC0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "encapsulatedKey";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sealedMessage";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_250539E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250533B4C(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
}

unint64_t sub_250539E9C()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_250539EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65A0, (void (*)(uint64_t))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_250539F34@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5590, (uint64_t)qword_269AC3578, a1);
}

uint64_t sub_250539F58(uint64_t a1)
{
  uint64_t v2 = sub_25053E684((unint64_t *)&qword_269AB61F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_250539FC4()
{
  sub_25053E684((unint64_t *)&qword_269AB61F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
  return sub_2505BDB70();
}

uint64_t sub_25053A040(uint64_t a1, uint64_t a2)
{
  return sub_25054CDD0(a1, a2, type metadata accessor for GKCrypto_HPKEOneShotCipherText) & 1;
}

uint64_t sub_25053A070()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3590);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3590);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0400;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ciphertext";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *unint64_t v11 = 3;
  *(void *)uint64_t v12 = "signature";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "keyHint";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "seedVersion";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "role";
  *((void *)v18 + 1) = 4;
  v18[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053A32C()
{
  uint64_t result = sub_2505BDAB0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
          uint64_t v4 = v3;
          sub_2505BDAF0();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          uint64_t v4 = v3;
          sub_2505BDAE0();
          goto LABEL_5;
        case 6:
          sub_25054D008();
          uint64_t v4 = v3;
          sub_2505BDAC0();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_25053A480()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_2505BDBC0(), !v1))
  {
    uint64_t v3 = *(void *)(v0 + 8);
    unint64_t v4 = *(void *)(v0 + 16);
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v1)
        {
LABEL_10:
          uint64_t v5 = *(void *)(v0 + 24);
          unint64_t v6 = *(void *)(v0 + 32);
          switch(v6 >> 62)
          {
            case 1uLL:
              if ((int)v5 != v5 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v6 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = sub_2505BDBB0();
              if (!v1)
              {
LABEL_17:
                uint64_t v7 = *(void *)(v0 + 40);
                unint64_t v8 = *(void *)(v0 + 48);
                switch(v8 >> 62)
                {
                  case 1uLL:
                    if ((int)v7 != v7 >> 32) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 2uLL:
                    if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 3uLL:
                    goto LABEL_24;
                  default:
                    if ((v8 & 0xFF000000000000) == 0) {
                      goto LABEL_24;
                    }
LABEL_23:
                    uint64_t result = sub_2505BDBB0();
                    if (!v1)
                    {
LABEL_24:
                      if (!*(_DWORD *)(v0 + 56) || (uint64_t result = sub_2505BDBC0(), !v1))
                      {
                        if (!*(void *)(v0 + 64) || (sub_25054D008(), uint64_t result = sub_2505BDB90(), !v1))
                        {
                          type metadata accessor for GKCrypto_SeedBlob(0);
                          uint64_t result = sub_2505BDA30();
                        }
                      }
                    }
                    break;
                }
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

uint64_t sub_25053A704@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 24) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 40) = xmmword_2505BFEF0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  return sub_2505BDA40();
}

unint64_t sub_25053A74C()
{
  return 0xD000000000000011;
}

uint64_t (*sub_25053A770())()
{
  return nullsub_1;
}

uint64_t sub_25053A794()
{
  return sub_25053A32C();
}

uint64_t sub_25053A7AC()
{
  return sub_25053A480();
}

uint64_t sub_25053A7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65A8, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053A840@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB5598, (uint64_t)qword_269AC3590, a1);
}

uint64_t sub_25053A864(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5E78, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053A8D0()
{
  sub_25053E684(&qword_269AB5E78, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
  return sub_2505BDB70();
}

uint64_t sub_25053A950()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC35A8);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC35A8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "context";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "ciphertext";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053AB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053AB80(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_25053AC50);
}

uint64_t sub_25053AB80(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v4;
  uint64_t result = sub_2505BDAB0();
  if (!v5)
  {
    while ((v12 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          sub_2505BDAE0();
          break;
        case 2:
          a4(a1, v7, a2, a3);
          break;
        case 1:
          sub_2505BDAF0();
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_25053AC50()
{
  return sub_2505BDB10();
}

uint64_t sub_25053AD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053AD40(a1, a2, a3, sub_25053AE90, (void (*)(void))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
}

uint64_t sub_25053AD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(void))
{
  if (!*(_DWORD *)v5 || (uint64_t result = sub_2505BDBC0(), !v6))
  {
    uint64_t result = a4(v5, a1, a2, a3);
    if (!v6)
    {
      uint64_t v13 = *(void *)(v5 + 8);
      unint64_t v14 = *(void *)(v5 + 16);
      switch(v14 >> 62)
      {
        case 1uLL:
          if ((int)v13 != v13 >> 32) {
            goto LABEL_10;
          }
          break;
        case 2uLL:
          if (*(void *)(v13 + 16) != *(void *)(v13 + 24)) {
            goto LABEL_10;
          }
          break;
        case 3uLL:
          break;
        default:
          if ((v14 & 0xFF000000000000) != 0) {
LABEL_10:
          }
            sub_2505BDBB0();
          break;
      }
      a5(0);
      return sub_2505BDA30();
    }
  }
  return result;
}

uint64_t sub_25053AE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65B8);
  MEMORY[0x270FA5388](v5 - 8, v6, v7, v8, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext(0);
  sub_2504DAEFC(a1 + *(int *)(v20 + 28), (uint64_t)v11, &qword_269AB65B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return sub_2504DAF60((uint64_t)v11, &qword_269AB65B8);
  }
  sub_250549DC8((uint64_t)v11, (uint64_t)v19, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  sub_25053E684(&qword_269AB6198, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  sub_2505BDBE0();
  return sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
}

uint64_t sub_25053B094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2505394BC(a1, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, a2);
}

unint64_t sub_25053B0AC()
{
  return 0xD000000000000025;
}

uint64_t sub_25053B0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65B0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053B144@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55A0, (uint64_t)qword_269AC35A8, a1);
}

uint64_t sub_25053B168(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB61B8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053B1D4()
{
  sub_25053E684(&qword_269AB61B8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
  return sub_2505BDB70();
}

uint64_t sub_25053B254()
{
  uint64_t result = sub_2505BE190();
  qword_269AC35C0 = 0xD000000000000025;
  *(void *)algn_269AC35C8 = 0x80000002505CAC20;
  return result;
}

uint64_t sub_25053B2C0()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC35D0);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC35D0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "groupVersion";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "keyHash";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "role";
  *(void *)(v11 + 8) = 4;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053B4C4()
{
  uint64_t result = sub_2505BDAB0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        sub_2505BDAE0();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        sub_2505BDAF0();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = sub_2505BDAB0();
    }
    sub_25054D008();
    uint64_t v4 = v3;
    sub_2505BDAC0();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_25053B5C0()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_2505BDBC0(), !v1))
  {
    uint64_t v3 = *(void *)(v0 + 8);
    unint64_t v4 = *(void *)(v0 + 16);
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v1)
        {
LABEL_10:
          if (!*(void *)(v0 + 24) || (sub_25054D008(), uint64_t result = sub_2505BDB90(), !v1))
          {
            type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
            uint64_t result = sub_2505BDA30();
          }
        }
        break;
    }
  }
  return result;
}

uint64_t sub_25053B72C@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2505BFEF0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  return sub_2505BDA40();
}

uint64_t sub_25053B768(uint64_t a1, uint64_t a2)
{
  return sub_25053B790(a1, a2, &qword_269AB55A8, &qword_269AC35C0);
}

uint64_t sub_25053B790(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_25053B7E8()
{
  return sub_25053B4C4();
}

uint64_t sub_25053B800()
{
  return sub_25053B5C0();
}

uint64_t sub_25053B818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65C8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053B894@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55B0, (uint64_t)qword_269AC35D0, a1);
}

uint64_t sub_25053B8B8(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6198, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053B924()
{
  sub_25053E684(&qword_269AB6198, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  return sub_2505BDB70();
}

uint64_t sub_25053B9A0()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC35E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC35E8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505BFEC0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "seed";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "diversifier";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053BB58()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        sub_2505BDAE0();
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_25053BBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250533B4C(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_AdminSeed);
}

unint64_t sub_25053BC18()
{
  return 0xD000000000000012;
}

uint64_t sub_25053BC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_25053BCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_25053BD14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65D0, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053BD90@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55B8, (uint64_t)qword_269AC35E8, a1);
}

uint64_t sub_25053BDB4(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6178, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053BE20()
{
  sub_25053E684(&qword_269AB6178, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
  return sub_2505BDB70();
}

uint64_t sub_25053BE9C(uint64_t a1, uint64_t a2)
{
  return sub_25054CDD0(a1, a2, type metadata accessor for GKCrypto_AdminSeed) & 1;
}

uint64_t sub_25053BECC()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3600);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3600);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2505C0400;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)unint64_t v4 = "version";
  *(void *)(v4 + 8) = 7;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = sub_2505BDBF0();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "nonce";
  *(void *)(v8 + 8) = 5;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  uint64_t v10 = (char *)v9 + v1[14];
  *uint64_t v9 = 3;
  *(void *)uint64_t v10 = "role";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "lastKnowSeedVersion";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "verificationKey";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "signature";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v7();
  return sub_2505BDC00();
}

uint64_t sub_25053C180()
{
  uint64_t result = sub_2505BDAB0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          uint64_t v4 = v3;
          sub_2505BDAF0();
          goto LABEL_5;
        case 2:
        case 5:
        case 6:
          uint64_t v4 = v3;
          sub_2505BDAE0();
          goto LABEL_5;
        case 3:
          sub_25054D008();
          uint64_t v4 = v3;
          sub_2505BDAC0();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_25053C2D4()
{
  if (!*(_DWORD *)v0 || (uint64_t result = sub_2505BDBC0(), !v1))
  {
    uint64_t v3 = *(void *)(v0 + 8);
    unint64_t v4 = *(void *)(v0 + 16);
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v1)
        {
LABEL_10:
          if (!*(void *)(v0 + 24) || (sub_25054D008(), uint64_t result = sub_2505BDB90(), !v1))
          {
            if (!*(_DWORD *)(v0 + 36) || (uint64_t result = sub_2505BDBC0(), !v1))
            {
              uint64_t v5 = *(void *)(v0 + 40);
              unint64_t v6 = *(void *)(v0 + 48);
              switch(v6 >> 62)
              {
                case 1uLL:
                  if ((int)v5 != v5 >> 32) {
                    goto LABEL_20;
                  }
                  goto LABEL_21;
                case 2uLL:
                  if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                    goto LABEL_20;
                  }
                  goto LABEL_21;
                case 3uLL:
                  goto LABEL_21;
                default:
                  if ((v6 & 0xFF000000000000) == 0) {
                    goto LABEL_21;
                  }
LABEL_20:
                  uint64_t result = sub_2505BDBB0();
                  if (!v1)
                  {
LABEL_21:
                    uint64_t v7 = *(void *)(v0 + 56);
                    unint64_t v8 = *(void *)(v0 + 64);
                    switch(v8 >> 62)
                    {
                      case 1uLL:
                        if ((int)v7 != v7 >> 32) {
                          goto LABEL_27;
                        }
                        goto LABEL_28;
                      case 2uLL:
                        if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                          goto LABEL_27;
                        }
                        goto LABEL_28;
                      case 3uLL:
                        goto LABEL_28;
                      default:
                        if ((v8 & 0xFF000000000000) == 0) {
                          goto LABEL_28;
                        }
LABEL_27:
                        uint64_t result = sub_2505BDBB0();
                        if (!v1)
                        {
LABEL_28:
                          type metadata accessor for GKCrypto_SeedBlobRequest(0);
                          uint64_t result = sub_2505BDA30();
                        }
                        break;
                    }
                  }
                  break;
              }
            }
          }
        }
        break;
    }
  }
  return result;
}

uint64_t sub_25053C558@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2505BFEF0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 56) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

unint64_t sub_25053C5A0()
{
  return 0xD000000000000018;
}

uint64_t sub_25053C5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_25053C62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_25053C69C()
{
  return sub_25053C180();
}

uint64_t sub_25053C6B4()
{
  return sub_25053C2D4();
}

uint64_t sub_25053C6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65D8, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053C748@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55C0, (uint64_t)qword_269AC3600, a1);
}

uint64_t sub_25053C76C(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5F48, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053C7D8()
{
  sub_25053E684(&qword_269AB5F48, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
  return sub_2505BDB70();
}

uint64_t sub_25053C858()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3618);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3618);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0410;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "nonce";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "groupID";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "groupMemberVerificationKey";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "signature";
  *(void *)(v15 + 8) = 9;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053CADC()
{
  return sub_25053DAA0();
}

uint64_t sub_25053CAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053D3AC(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_RSVPQueueRequest);
}

unint64_t sub_25053CB24()
{
  return 0xD000000000000019;
}

uint64_t sub_25053CB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6480, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053CBBC@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55C8, (uint64_t)qword_269AC3618, a1);
}

uint64_t sub_25053CBE0(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5AB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053CC4C()
{
  sub_25053E684(&qword_269AB5AB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
  return sub_2505BDB70();
}

uint64_t sub_25053CCC8(uint64_t a1, uint64_t a2)
{
  return sub_25054CBD0(a1, a2, type metadata accessor for GKCrypto_RSVPQueueRequest) & 1;
}

uint64_t sub_25053CCF8()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3630);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3630);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "signingKey";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "decryptionKey";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053CEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250539938(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_KeyChainUserKeys);
}

unint64_t sub_25053CF28()
{
  return 0xD000000000000019;
}

uint64_t sub_25053CF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_KeyChainUserKeys);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053CFC0@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55D0, (uint64_t)qword_269AC3630, a1);
}

uint64_t sub_25053CFE4(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB6130, (void (*)(uint64_t))type metadata accessor for GKCrypto_KeyChainUserKeys);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053D050()
{
  sub_25053E684(&qword_269AB6130, (void (*)(uint64_t))type metadata accessor for GKCrypto_KeyChainUserKeys);
  return sub_2505BDB70();
}

uint64_t sub_25053D0CC(uint64_t a1, uint64_t a2)
{
  return sub_25054B86C(a1, a2, type metadata accessor for GKCrypto_KeyChainUserKeys) & 1;
}

uint64_t sub_25053D0FC()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3648);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3648);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0410;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "keyShare";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "keyOffset";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "decryptionKeyHash";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "signingKeyHash";
  *(void *)(v15 + 8) = 14;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053D380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053D3AC(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_GroupAccessInfo);
}

uint64_t sub_25053D3AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(_DWORD *)v4 || (uint64_t result = sub_2505BDBC0(), !v5))
  {
    uint64_t v8 = *(void *)(v4 + 8);
    unint64_t v9 = *(void *)(v4 + 16);
    switch(v9 >> 62)
    {
      case 1uLL:
        if ((int)v8 != v8 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v8 + 16) != *(void *)(v8 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v9 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_2505BDBB0();
        if (!v5)
        {
LABEL_10:
          uint64_t v10 = *(void *)(v4 + 24);
          unint64_t v11 = *(void *)(v4 + 32);
          switch(v11 >> 62)
          {
            case 1uLL:
              if ((int)v10 != v10 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v11 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = sub_2505BDBB0();
              if (!v5)
              {
LABEL_17:
                uint64_t v12 = *(void *)(v4 + 40);
                unint64_t v13 = *(void *)(v4 + 48);
                switch(v13 >> 62)
                {
                  case 1uLL:
                    if ((int)v12 != v12 >> 32) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 2uLL:
                    if (*(void *)(v12 + 16) != *(void *)(v12 + 24)) {
                      goto LABEL_23;
                    }
                    goto LABEL_24;
                  case 3uLL:
                    goto LABEL_24;
                  default:
                    if ((v13 & 0xFF000000000000) == 0) {
                      goto LABEL_24;
                    }
LABEL_23:
                    uint64_t result = sub_2505BDBB0();
                    if (!v5)
                    {
LABEL_24:
                      uint64_t v14 = *(void *)(v4 + 56);
                      unint64_t v15 = *(void *)(v4 + 64);
                      switch(v15 >> 62)
                      {
                        case 1uLL:
                          if ((int)v14 != v14 >> 32) {
                            goto LABEL_30;
                          }
                          goto LABEL_31;
                        case 2uLL:
                          if (*(void *)(v14 + 16) != *(void *)(v14 + 24)) {
                            goto LABEL_30;
                          }
                          goto LABEL_31;
                        case 3uLL:
                          goto LABEL_31;
                        default:
                          if ((v15 & 0xFF000000000000) == 0) {
                            goto LABEL_31;
                          }
LABEL_30:
                          uint64_t result = sub_2505BDBB0();
                          if (!v5)
                          {
LABEL_31:
                            a4(0);
                            uint64_t result = sub_2505BDA30();
                          }
                          break;
                      }
                    }
                    break;
                }
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

unint64_t sub_25053D648()
{
  return 0xD000000000000018;
}

uint64_t sub_25053D664(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65E8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAccessInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053D6E0@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55D8, (uint64_t)qword_269AC3648, a1);
}

uint64_t sub_25053D704(uint64_t a1)
{
  uint64_t v2 = sub_25053E684((unint64_t *)&qword_269AB6110, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAccessInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053D770()
{
  sub_25053E684((unint64_t *)&qword_269AB6110, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAccessInfo);
  return sub_2505BDB70();
}

uint64_t sub_25053D7EC(uint64_t a1, uint64_t a2)
{
  return sub_25054CBD0(a1, a2, type metadata accessor for GKCrypto_GroupAccessInfo) & 1;
}

uint64_t sub_25053D81C()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3660);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3660);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C0410;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "nonce";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *unint64_t v11 = 3;
  *(void *)uint64_t v12 = "groupID";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "diversifiedVerificationKey";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "signature";
  *(void *)(v15 + 8) = 9;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053DAA0()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_2505BDAF0();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
          sub_2505BDAE0();
          break;
        default:
          break;
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_25053DBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25053D3AC(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_GroupBlobRequest);
}

uint64_t sub_25053DBCC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 24) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 40) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 56) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

unint64_t sub_25053DC08()
{
  return 0xD000000000000019;
}

uint64_t sub_25053DC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_25053DC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_25053DD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB6470, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053DD80@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55E0, (uint64_t)qword_269AC3660, a1);
}

uint64_t sub_25053DDA4(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB5A00, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053DE10()
{
  sub_25053E684(&qword_269AB5A00, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
  return sub_2505BDB70();
}

uint64_t sub_25053DE8C(uint64_t a1, uint64_t a2)
{
  return sub_25054CBD0(a1, a2, type metadata accessor for GKCrypto_GroupBlobRequest) & 1;
}

uint64_t sub_25053DEBC()
{
  uint64_t v0 = sub_2505BDC10();
  __swift_allocate_value_buffer(v0, qword_269AC3678);
  __swift_project_value_buffer(v0, (uint64_t)qword_269AC3678);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6490);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB6498) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2505C1BA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_2505BDBF0();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "keyCheck";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "EncryptedInvitation";
  *(void *)(v11 + 8) = 19;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_2505BDC00();
}

uint64_t sub_25053E0C0()
{
  uint64_t result = sub_2505BDAB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        sub_2505BDAE0();
      }
      else if (result == 1)
      {
        sub_2505BDAF0();
      }
      uint64_t result = sub_2505BDAB0();
    }
  }
  return result;
}

uint64_t sub_25053E178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_250539938(a1, a2, a3, (void (*)(void))type metadata accessor for GKCrypto_EncryptedInvitation);
}

uint64_t sub_25053E1A4@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2505BFEF0;
  *(_OWORD *)(a1 + 24) = xmmword_2505BFEF0;
  return sub_2505BDA40();
}

unint64_t sub_25053E1D8()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_25053E1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_25053E264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = sub_2505BDA50();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_25053E2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25053E684(&qword_269AB65F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_EncryptedInvitation);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_25053E350@<X0>(uint64_t a1@<X8>)
{
  return sub_25053E374(&qword_269AB55E8, (uint64_t)qword_269AC3678, a1);
}

uint64_t sub_25053E374@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_2505BDC10();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t sub_25053E410(uint64_t a1)
{
  uint64_t v2 = sub_25053E684(&qword_269AB60E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_EncryptedInvitation);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_25053E47C()
{
  return sub_2505BE880();
}

uint64_t sub_25053E4D4()
{
  sub_25053E684(&qword_269AB60E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_EncryptedInvitation);
  return sub_2505BDB70();
}

uint64_t sub_25053E550()
{
  return sub_2505BE880();
}

uint64_t sub_25053E5A4(uint64_t a1, uint64_t a2)
{
  return sub_25054B86C(a1, a2, type metadata accessor for GKCrypto_EncryptedInvitation) & 1;
}

uint64_t sub_25053E5D4()
{
  return sub_25053E684(&qword_269AB60D8, (void (*)(uint64_t))type metadata accessor for GKCrypto_EncryptedInvitation);
}

uint64_t type metadata accessor for GKCrypto_EncryptedInvitation(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6768);
}

uint64_t sub_25053E63C()
{
  return sub_25053E684(&qword_269AB60E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_EncryptedInvitation);
}

uint64_t sub_25053E684(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25053E6CC()
{
  return sub_25053E684(&qword_269AB60E8, (void (*)(uint64_t))type metadata accessor for GKCrypto_EncryptedInvitation);
}

uint64_t sub_25053E714()
{
  return sub_25053E684(&qword_269AB60F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_EncryptedInvitation);
}

uint64_t sub_25053E75C()
{
  return sub_25053E684(&qword_269AB60F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
}

uint64_t sub_25053E7A4()
{
  return sub_25053E684(&qword_269AB5A00, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
}

uint64_t sub_25053E7EC()
{
  return sub_25053E684(&qword_269AB6100, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
}

uint64_t sub_25053E834()
{
  return sub_25053E684(&qword_269AB6108, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAccessInfo);
}

uint64_t type metadata accessor for GKCrypto_GroupAccessInfo(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6778);
}

uint64_t sub_25053E89C()
{
  return sub_25053E684((unint64_t *)&qword_269AB6110, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAccessInfo);
}

uint64_t sub_25053E8E4()
{
  return sub_25053E684(&qword_269AB6118, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAccessInfo);
}

uint64_t sub_25053E92C()
{
  return sub_25053E684(&qword_269AB6120, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAccessInfo);
}

uint64_t sub_25053E974()
{
  return sub_25053E684(&qword_269AB6128, (void (*)(uint64_t))type metadata accessor for GKCrypto_KeyChainUserKeys);
}

uint64_t type metadata accessor for GKCrypto_KeyChainUserKeys(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6758);
}

uint64_t sub_25053E9DC()
{
  return sub_25053E684(&qword_269AB6130, (void (*)(uint64_t))type metadata accessor for GKCrypto_KeyChainUserKeys);
}

uint64_t sub_25053EA24()
{
  return sub_25053E684(&qword_269AB6138, (void (*)(uint64_t))type metadata accessor for GKCrypto_KeyChainUserKeys);
}

uint64_t sub_25053EA6C()
{
  return sub_25053E684(&qword_269AB6140, (void (*)(uint64_t))type metadata accessor for GKCrypto_KeyChainUserKeys);
}

uint64_t sub_25053EAB4()
{
  return sub_25053E684(&qword_269AB6148, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
}

uint64_t sub_25053EAFC()
{
  return sub_25053E684(&qword_269AB5AB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
}

uint64_t sub_25053EB44()
{
  return sub_25053E684(&qword_269AB6150, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
}

uint64_t sub_25053EB8C()
{
  return sub_25053E684(&qword_269AB6158, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
}

uint64_t type metadata accessor for GKCrypto_SeedBlobRequest(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6748);
}

uint64_t sub_25053EBF4()
{
  return sub_25053E684(&qword_269AB5F48, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
}

uint64_t sub_25053EC3C()
{
  return sub_25053E684(&qword_269AB6160, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
}

uint64_t sub_25053EC84()
{
  return sub_25053E684(&qword_269AB6168, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlobRequest);
}

uint64_t sub_25053ECCC()
{
  return sub_25053E684(&qword_269AB6170, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
}

uint64_t type metadata accessor for GKCrypto_AdminSeed(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6738);
}

uint64_t sub_25053ED34()
{
  return sub_25053E684(&qword_269AB6178, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
}

uint64_t sub_25053ED7C()
{
  return sub_25053E684(&qword_269AB6180, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
}

uint64_t sub_25053EDC4()
{
  return sub_25053E684(&qword_269AB6188, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
}

uint64_t sub_25053EE0C()
{
  return sub_25053E684(&qword_269AB6190, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
}

uint64_t type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6728);
}

uint64_t sub_25053EE74()
{
  return sub_25053E684(&qword_269AB6198, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
}

uint64_t sub_25053EEBC()
{
  return sub_25053E684(&qword_269AB61A0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
}

uint64_t sub_25053EF04()
{
  return sub_25053E684(&qword_269AB61A8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
}

uint64_t sub_25053EF4C()
{
  return sub_25053E684(&qword_269AB61B0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
}

uint64_t type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6710);
}

uint64_t sub_25053EFB4()
{
  return sub_25053E684(&qword_269AB61B8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
}

uint64_t sub_25053EFFC()
{
  return sub_25053E684(&qword_269AB61C0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
}

uint64_t sub_25053F044()
{
  return sub_25053E684(&qword_269AB61C8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext);
}

uint64_t sub_25053F08C()
{
  return sub_25053E684(&qword_269AB61D0, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
}

uint64_t type metadata accessor for GKCrypto_SeedBlob(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6700);
}

uint64_t sub_25053F0F4()
{
  return sub_25053E684(&qword_269AB5E78, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
}

uint64_t sub_25053F13C()
{
  return sub_25053E684(&qword_269AB61D8, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
}

uint64_t sub_25053F184()
{
  return sub_25053E684(&qword_269AB61E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
}

uint64_t sub_25053F1CC()
{
  return sub_25053E684(&qword_269AB61E8, (void (*)(uint64_t))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
}

uint64_t type metadata accessor for GKCrypto_HPKEOneShotCipherText(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB66F0);
}

uint64_t sub_25053F234()
{
  return sub_25053E684((unint64_t *)&qword_269AB61F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
}

uint64_t sub_25053F27C()
{
  return sub_25053E684(&qword_269AB61F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
}

uint64_t sub_25053F2C4()
{
  return sub_25053E684(&qword_269AB6200, (void (*)(uint64_t))type metadata accessor for GKCrypto_HPKEOneShotCipherText);
}

uint64_t sub_25053F30C()
{
  return sub_25053E684(&qword_269AB6208, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPResponse);
}

uint64_t type metadata accessor for GKCrypto_RSVPResponse(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB66E0);
}

uint64_t sub_25053F374()
{
  return sub_25053E684(&qword_269AB6210, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPResponse);
}

uint64_t sub_25053F3BC()
{
  return sub_25053E684(&qword_269AB6218, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPResponse);
}

uint64_t sub_25053F404()
{
  return sub_25053E684(&qword_269AB6220, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPResponse);
}

uint64_t sub_25053F44C()
{
  return sub_25053E684(&qword_269AB6228, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
}

uint64_t sub_25053F494()
{
  return sub_25053E684(&qword_269AB5AC0, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
}

uint64_t sub_25053F4DC()
{
  return sub_25053E684(&qword_269AB6230, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
}

uint64_t sub_25053F524()
{
  return sub_25053E684(&qword_269AB6238, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
}

uint64_t sub_25053F56C()
{
  return sub_25053E684(&qword_269AB6240, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
}

uint64_t sub_25053F5B4()
{
  return sub_25053E684(&qword_269AB6248, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
}

uint64_t sub_25053F5FC()
{
  return sub_25053E684(&qword_269AB6250, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
}

uint64_t sub_25053F644()
{
  return sub_25053E684(&qword_269AB6258, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedInvite);
}

uint64_t type metadata accessor for GKCrypto_SignedInvite(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB66C8);
}

uint64_t sub_25053F6AC()
{
  return sub_25053E684(&qword_269AB6260, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedInvite);
}

uint64_t sub_25053F6F4()
{
  return sub_25053E684(&qword_269AB6268, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedInvite);
}

uint64_t sub_25053F73C()
{
  return sub_25053E684(&qword_269AB6270, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedInvite);
}

uint64_t sub_25053F784()
{
  return sub_25053E684(&qword_269AB6278, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
}

uint64_t type metadata accessor for GKCrypto_Invite(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB66B8);
}

uint64_t sub_25053F7EC()
{
  return sub_25053E684(&qword_269AB6280, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
}

uint64_t sub_25053F834()
{
  return sub_25053E684(&qword_269AB6288, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
}

uint64_t sub_25053F87C()
{
  return sub_25053E684(&qword_269AB6290, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
}

uint64_t sub_25053F8C4()
{
  return sub_25053E684(&qword_269AB6298, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
}

uint64_t type metadata accessor for GKCrypto_AdminPlainText(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB66A0);
}

uint64_t sub_25053F92C()
{
  return sub_25053E684(&qword_269AB5F08, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
}

uint64_t sub_25053F974()
{
  return sub_25053E684(&qword_269AB62A0, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
}

uint64_t sub_25053F9BC()
{
  return sub_25053E684(&qword_269AB62A8, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminPlainText);
}

uint64_t sub_25053FA04()
{
  return sub_25053E684(&qword_269AB62B0, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
}

uint64_t type metadata accessor for GKCrypto_AdminMetaData(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6690);
}

uint64_t sub_25053FA6C()
{
  return sub_25053E684(&qword_269AB5F00, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
}

uint64_t sub_25053FAB4()
{
  return sub_25053E684(&qword_269AB62B8, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
}

uint64_t sub_25053FAFC()
{
  return sub_25053E684(&qword_269AB62C0, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
}

uint64_t sub_25053FB44()
{
  return sub_25053E684(&qword_269AB62C8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
}

uint64_t type metadata accessor for GKCrypto_GroupAEDataToEncrypt(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6680);
}

uint64_t sub_25053FBAC()
{
  return sub_25053E684(&qword_269AB5EA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
}

uint64_t sub_25053FBF4()
{
  return sub_25053E684(&qword_269AB62D0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
}

uint64_t sub_25053FC3C()
{
  return sub_25053E684(&qword_269AB62D8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
}

uint64_t sub_25053FC84()
{
  return sub_25053E684(&qword_269AB62E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6668);
}

uint64_t sub_25053FCEC()
{
  return sub_25053E684(&qword_269AB5E98, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
}

uint64_t sub_25053FD34()
{
  return sub_25053E684(&qword_269AB62E8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
}

uint64_t sub_25053FD7C()
{
  return sub_25053E684(&qword_269AB62F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
}

uint64_t sub_25053FDC4()
{
  return sub_25053E684(&qword_269AB62F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign.User(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6658);
}

uint64_t sub_25053FE2C()
{
  return sub_25053E684(&qword_269AB5EB0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
}

uint64_t sub_25053FE74()
{
  return sub_25053E684(&qword_269AB6300, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
}

uint64_t sub_25053FEBC()
{
  return sub_25053E684(&qword_269AB6308, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.User);
}

uint64_t sub_25053FF04()
{
  return sub_25053E684(&qword_269AB6310, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6638);
}

uint64_t sub_25053FF6C()
{
  return sub_25053E684(&qword_269AB5EA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
}

uint64_t sub_25053FFB4()
{
  return sub_25053E684(&qword_269AB6318, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
}

uint64_t sub_25053FFFC()
{
  return sub_25053E684(&qword_269AB6320, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign);
}

uint64_t sub_250540044()
{
  return sub_25053E684(&qword_269AB6328, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
}

uint64_t type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6788);
}

uint64_t sub_2505400AC()
{
  return sub_25053E684(&qword_269AB6330, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
}

uint64_t sub_2505400F4()
{
  return sub_25053E684(&qword_269AB6338, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
}

uint64_t sub_25054013C()
{
  return sub_25053E684(&qword_269AB6340, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
}

uint64_t sub_250540184()
{
  return sub_25053E684(&qword_269AB6348, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
}

uint64_t sub_2505401CC()
{
  return sub_25053E684((unint64_t *)&qword_269AB5A40, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
}

uint64_t sub_250540214()
{
  return sub_25053E684(&qword_269AB6350, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
}

uint64_t sub_25054025C()
{
  return sub_25053E684(&qword_269AB6358, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
}

uint64_t type metadata accessor for GKCrypto_VersionedSeed(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6628);
}

uint64_t sub_2505402C4()
{
  return sub_25053E684(&qword_269AB5EB8, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
}

uint64_t sub_25054030C()
{
  return sub_25053E684(&qword_269AB6360, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
}

uint64_t sub_250540354()
{
  return sub_25053E684(&qword_269AB6368, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
}

uint64_t sub_25054039C()
{
  return sub_25053E684(&qword_269AB6370, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
}

uint64_t type metadata accessor for GKCrypto_AdminGroupBlob(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6618);
}

uint64_t sub_250540404()
{
  return sub_25053E684(&qword_269AB5F10, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
}

uint64_t sub_25054044C()
{
  return sub_25053E684(&qword_269AB6378, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
}

uint64_t sub_250540494()
{
  return sub_25053E684(&qword_269AB6380, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
}

uint64_t sub_2505404DC()
{
  return sub_25053E684(&qword_269AB6388, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
}

uint64_t sub_250540524()
{
  return sub_25053E684(&qword_269AB6390, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
}

uint64_t sub_25054056C()
{
  return sub_25053E684(&qword_269AB6398, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
}

uint64_t sub_2505405B4()
{
  return sub_25053E684(&qword_269AB63A0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
}

uint64_t sub_2505405FC()
{
  return sub_25053E684(&qword_269AB63A8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
}

uint64_t sub_250540644()
{
  return sub_25053E684(&qword_269AB5FA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
}

uint64_t sub_25054068C()
{
  return sub_25053E684(&qword_269AB63B0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
}

uint64_t sub_2505406D4()
{
  return sub_25053E684(&qword_269AB63B8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
}

uint64_t sub_25054071C()
{
  return sub_25053E684(&qword_269AB63C0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
}

uint64_t sub_250540764()
{
  return sub_25053E684(&qword_269AB5FA8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
}

uint64_t sub_2505407AC()
{
  return sub_25053E684(&qword_269AB63C8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
}

uint64_t sub_2505407F4()
{
  return sub_25053E684(&qword_269AB63D0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
}

uint64_t sub_25054083C()
{
  return sub_25053E684(&qword_269AB63D8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
}

uint64_t sub_250540884()
{
  return sub_25053E684(&qword_269AB5F70, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
}

uint64_t sub_2505408CC()
{
  return sub_25053E684(&qword_269AB63E0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
}

uint64_t sub_250540914()
{
  return sub_25053E684(&qword_269AB63E8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob);
}

uint64_t sub_25054095C()
{
  return sub_25053E684(&qword_269AB63F0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
}

uint64_t type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB6608);
}

uint64_t sub_2505409C4()
{
  return sub_25053E684(&qword_269AB63F8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
}

uint64_t sub_250540A0C()
{
  return sub_25053E684(&qword_269AB6400, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
}

uint64_t sub_250540A54()
{
  return sub_25053E684(&qword_269AB6408, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
}

uint64_t sub_250540A9C()
{
  return sub_25053E684(&qword_269AB6410, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle);
}

uint64_t type metadata accessor for GKCrypto_GroupHandle(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB65F8);
}

uint64_t sub_250540B04()
{
  return sub_25053E684(&qword_269AB6418, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle);
}

uint64_t sub_250540B4C()
{
  return sub_25053E684(&qword_269AB6420, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle);
}

uint64_t sub_250540B94()
{
  return sub_25053E684(&qword_269AB6428, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupHandle);
}

uint64_t sub_250540BDC()
{
  return sub_250540C2C(&qword_269AB6430, &qword_269AB6438);
}

uint64_t sub_250540C04()
{
  return sub_250540C2C(&qword_269AB6440, &qword_269AB6448);
}

uint64_t sub_250540C2C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_250540C7C()
{
  return sub_25053E684(&qword_269AB6450, (void (*)(uint64_t))type metadata accessor for GKCrypto_SignedRSVP);
}

uint64_t sub_250540CC4()
{
  return sub_25053E684(&qword_269AB6458, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVPQueueRequest);
}

uint64_t sub_250540D0C()
{
  return sub_25053E684(&qword_269AB6460, (void (*)(uint64_t))type metadata accessor for GKCrypto_UserKeys);
}

uint64_t sub_250540D54()
{
  return sub_25053E684(&qword_269AB6468, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlobRequest);
}

uint64_t sub_250540D9C(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v149 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair(0);
  uint64_t v8 = MEMORY[0x270FA5388](v149, v4, v5, v6, v7);
  unint64_t v10 = (void *)((char *)v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8, v11, v12, v13, v14);
  uint64_t v17 = (void *)((char *)v144 - v16);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v18 && a1 != a2)
  {
    unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v20 = *(void *)(v15 + 72);
    uint64_t v146 = a2;
    uint64_t v147 = v20;
    uint64_t v148 = a1;
    while (1)
    {
      sub_25054CFA0(a1 + v19, (uint64_t)v17, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
      unint64_t v151 = v19;
      sub_25054CFA0(a2 + v19, (uint64_t)v10, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
      uint64_t v22 = *v17;
      unint64_t v21 = v17[1];
      uint64_t v23 = *v10;
      unint64_t v24 = v10[1];
      uint64_t v25 = 0;
      switch(v21 >> 62)
      {
        case 1uLL:
          LODWORD(v25) = HIDWORD(v22) - v22;
          if (__OFSUB__(HIDWORD(v22), v22))
          {
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
LABEL_259:
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
LABEL_264:
            __break(1u);
LABEL_265:
            __break(1u);
LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
          }
          uint64_t v25 = (int)v25;
LABEL_10:
          uint64_t v150 = v18;
          unint64_t v29 = v24 >> 62;
          switch(v24 >> 62)
          {
            case 1uLL:
              LODWORD(v30) = HIDWORD(v23) - v23;
              if (__OFSUB__(HIDWORD(v23), v23)) {
                goto LABEL_230;
              }
              uint64_t v30 = (int)v30;
LABEL_15:
              if (v25 != v30) {
                goto LABEL_226;
              }
              if (v25 < 1) {
                goto LABEL_114;
              }
              break;
            case 2uLL:
              uint64_t v32 = *(void *)(v23 + 16);
              uint64_t v31 = *(void *)(v23 + 24);
              BOOL v28 = __OFSUB__(v31, v32);
              uint64_t v30 = v31 - v32;
              if (!v28) {
                goto LABEL_15;
              }
              goto LABEL_231;
            case 3uLL:
              if (v25) {
                goto LABEL_226;
              }
              goto LABEL_114;
            default:
              uint64_t v30 = BYTE6(v24);
              goto LABEL_15;
          }
          break;
        case 2uLL:
          uint64_t v27 = *(void *)(v22 + 16);
          uint64_t v26 = *(void *)(v22 + 24);
          BOOL v28 = __OFSUB__(v26, v27);
          uint64_t v25 = v26 - v27;
          if (!v28) {
            goto LABEL_10;
          }
          goto LABEL_229;
        case 3uLL:
          goto LABEL_10;
        default:
          uint64_t v25 = BYTE6(v21);
          goto LABEL_10;
      }
      switch(v21 >> 62)
      {
        case 1uLL:
          if ((int)v22 > v22 >> 32) {
            goto LABEL_236;
          }
          sub_2504DBC4C(v22, v21);
          uint64_t v38 = (char *)sub_2505BD7D0();
          if (!v38) {
            goto LABEL_31;
          }
          uint64_t v39 = sub_2505BD800();
          if (__OFSUB__((int)v22, v39)) {
            goto LABEL_239;
          }
          v38 += (int)v22 - v39;
LABEL_31:
          a2 = v146;
          sub_2505BD7F0();
          if (v29)
          {
            uint64_t v145 = v38;
            if (v29 == 1)
            {
              if (v23 >> 32 < (int)v23) {
                goto LABEL_250;
              }
              swift_retain();
              int v40 = (char *)sub_2505BD7D0();
              if (v40)
              {
                uint64_t v41 = sub_2505BD800();
                if (__OFSUB__((int)v23, v41)) {
                  goto LABEL_267;
                }
                v40 += (int)v23 - v41;
              }
              a2 = v146;
              uint64_t v42 = sub_2505BD7F0();
              if (v42 >= (v23 >> 32) - (int)v23) {
                size_t v43 = (v23 >> 32) - (int)v23;
              }
              else {
                size_t v43 = v42;
              }
              if (!v145) {
                goto LABEL_275;
              }
              if (!v40) {
                goto LABEL_276;
              }
              int v44 = memcmp(v145, v40, v43);
              sub_250511528(v23, v24);
            }
            else
            {
              uint64_t v76 = *(void *)(v23 + 16);
              uint64_t v77 = *(void *)(v23 + 24);
              swift_retain();
              swift_retain();
              uint64_t v78 = (char *)sub_2505BD7D0();
              if (v78)
              {
                uint64_t v79 = sub_2505BD800();
                if (__OFSUB__(v76, v79)) {
                  goto LABEL_266;
                }
                v78 += v76 - v79;
              }
              BOOL v28 = __OFSUB__(v77, v76);
              int64_t v80 = v77 - v76;
              if (v28) {
                goto LABEL_251;
              }
              uint64_t v81 = sub_2505BD7F0();
              if (v81 >= v80) {
                size_t v82 = v80;
              }
              else {
                size_t v82 = v81;
              }
              if (!v145) {
                goto LABEL_286;
              }
              if (!v78) {
                goto LABEL_287;
              }
              int v44 = memcmp(v145, v78, v82);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v23;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v38) {
              goto LABEL_285;
            }
            int v44 = memcmp(v38, __s1, BYTE6(v24));
          }
          sub_250511528(v22, v21);
          if (v44) {
            goto LABEL_226;
          }
          goto LABEL_114;
        case 2uLL:
          uint64_t v45 = v21 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v46 = *(void *)(v22 + 16);
          swift_retain();
          swift_retain();
          uint64_t v47 = (char *)sub_2505BD7D0();
          if (!v47) {
            goto LABEL_46;
          }
          uint64_t v48 = sub_2505BD800();
          if (__OFSUB__(v46, v48)) {
            goto LABEL_238;
          }
          v47 += v46 - v48;
LABEL_46:
          a2 = v146;
          sub_2505BD7F0();
          if (!v29)
          {
            __s1[0] = v23;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v47) {
              goto LABEL_282;
            }
            int v53 = memcmp(v47, __s1, BYTE6(v24));
LABEL_88:
            swift_release();
            goto LABEL_99;
          }
          uint64_t v145 = v47;
          if (v29 == 1)
          {
            v144[1] = v45;
            if (v23 >> 32 < (int)v23) {
              goto LABEL_244;
            }
            swift_retain();
            uint64_t v49 = (char *)sub_2505BD7D0();
            if (v49)
            {
              uint64_t v50 = sub_2505BD800();
              if (__OFSUB__((int)v23, v50)) {
                goto LABEL_265;
              }
              v49 += (int)v23 - v50;
            }
            uint64_t v51 = sub_2505BD7F0();
            if (v51 >= (v23 >> 32) - (int)v23) {
              size_t v52 = (v23 >> 32) - (int)v23;
            }
            else {
              size_t v52 = v51;
            }
            if (!v145) {
              goto LABEL_277;
            }
            if (!v49) {
              goto LABEL_278;
            }
            int v53 = memcmp(v145, v49, v52);
            sub_250511528(v23, v24);
            goto LABEL_88;
          }
          uint64_t v69 = *(void *)(v23 + 16);
          uint64_t v70 = *(void *)(v23 + 24);
          swift_retain();
          swift_retain();
          unint64_t v71 = (char *)sub_2505BD7D0();
          if (v71)
          {
            uint64_t v72 = sub_2505BD800();
            if (__OFSUB__(v69, v72)) {
              goto LABEL_264;
            }
            v71 += v69 - v72;
          }
          BOOL v28 = __OFSUB__(v70, v69);
          int64_t v73 = v70 - v69;
          if (v28) {
            goto LABEL_249;
          }
          uint64_t v74 = sub_2505BD7F0();
          if (v74 >= v73) {
            size_t v75 = v73;
          }
          else {
            size_t v75 = v74;
          }
          if (!v145) {
            goto LABEL_283;
          }
          if (!v71) {
            goto LABEL_284;
          }
          int v53 = memcmp(v145, v71, v75);
          swift_release();
          swift_release();
          swift_release();
LABEL_99:
          swift_release();
          if (v53) {
            goto LABEL_226;
          }
LABEL_114:
          uint64_t v84 = v17[2];
          unint64_t v83 = v17[3];
          uint64_t v85 = v10[2];
          unint64_t v86 = v10[3];
          uint64_t v87 = 0;
          switch(v83 >> 62)
          {
            case 1uLL:
              LODWORD(v87) = HIDWORD(v84) - v84;
              if (__OFSUB__(HIDWORD(v84), v84)) {
                goto LABEL_232;
              }
              uint64_t v87 = (int)v87;
LABEL_119:
              unint64_t v90 = v86 >> 62;
              switch(v86 >> 62)
              {
                case 1uLL:
                  LODWORD(v91) = HIDWORD(v85) - v85;
                  if (__OFSUB__(HIDWORD(v85), v85)) {
                    goto LABEL_234;
                  }
                  uint64_t v91 = (int)v91;
LABEL_124:
                  if (v87 != v91) {
                    goto LABEL_226;
                  }
                  if (v87 < 1) {
                    goto LABEL_223;
                  }
                  break;
                case 2uLL:
                  uint64_t v93 = *(void *)(v85 + 16);
                  uint64_t v92 = *(void *)(v85 + 24);
                  BOOL v28 = __OFSUB__(v92, v93);
                  uint64_t v91 = v92 - v93;
                  if (!v28) {
                    goto LABEL_124;
                  }
                  goto LABEL_235;
                case 3uLL:
                  if (v87) {
                    goto LABEL_226;
                  }
                  goto LABEL_223;
                default:
                  uint64_t v91 = BYTE6(v86);
                  goto LABEL_124;
              }
              break;
            case 2uLL:
              uint64_t v89 = *(void *)(v84 + 16);
              uint64_t v88 = *(void *)(v84 + 24);
              BOOL v28 = __OFSUB__(v88, v89);
              uint64_t v87 = v88 - v89;
              if (!v28) {
                goto LABEL_119;
              }
              goto LABEL_233;
            case 3uLL:
              goto LABEL_119;
            default:
              uint64_t v87 = BYTE6(v83);
              goto LABEL_119;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v29) {
            goto LABEL_67;
          }
          if (v29 == 1)
          {
            uint64_t v33 = (v23 >> 32) - (int)v23;
            if (v23 >> 32 < (int)v23) {
              goto LABEL_243;
            }
            swift_retain();
            uint64_t v54 = sub_2505BD7D0();
            if (!v54) {
              goto LABEL_279;
            }
            uint64_t v35 = v54;
            uint64_t v55 = sub_2505BD800();
            uint64_t v37 = (int)v23 - v55;
            if (__OFSUB__((int)v23, v55)) {
              goto LABEL_248;
            }
            goto LABEL_63;
          }
          uint64_t v65 = *(void *)(v23 + 16);
          uint64_t v66 = *(void *)(v23 + 24);
          swift_retain();
          swift_retain();
          uint64_t v61 = (char *)sub_2505BD7D0();
          if (v61)
          {
            uint64_t v67 = sub_2505BD800();
            if (__OFSUB__(v65, v67)) {
              goto LABEL_263;
            }
            v61 += v65 - v67;
          }
          int64_t v63 = v66 - v65;
          if (__OFSUB__(v66, v65)) {
            goto LABEL_246;
          }
          uint64_t v64 = sub_2505BD7F0();
          if (!v61) {
            goto LABEL_281;
          }
          goto LABEL_80;
        default:
          __s1[0] = v22;
          LOWORD(__s1[1]) = v21;
          BYTE2(__s1[1]) = BYTE2(v21);
          BYTE3(__s1[1]) = BYTE3(v21);
          BYTE4(__s1[1]) = BYTE4(v21);
          BYTE5(__s1[1]) = BYTE5(v21);
          if (v29)
          {
            if (v29 == 1)
            {
              uint64_t v33 = (v23 >> 32) - (int)v23;
              if (v23 >> 32 < (int)v23) {
                goto LABEL_242;
              }
              swift_retain();
              uint64_t v34 = sub_2505BD7D0();
              if (!v34)
              {
                sub_2505BD7F0();
                __break(1u);
LABEL_275:
                __break(1u);
LABEL_276:
                __break(1u);
LABEL_277:
                __break(1u);
LABEL_278:
                __break(1u);
LABEL_279:
                sub_2505BD7F0();
                __break(1u);
LABEL_280:
                __break(1u);
LABEL_281:
                __break(1u);
LABEL_282:
                __break(1u);
LABEL_283:
                __break(1u);
LABEL_284:
                __break(1u);
LABEL_285:
                __break(1u);
LABEL_286:
                __break(1u);
LABEL_287:
                __break(1u);
LABEL_288:
                sub_2505BD7F0();
                __break(1u);
LABEL_289:
                __break(1u);
LABEL_290:
                __break(1u);
LABEL_291:
                __break(1u);
LABEL_292:
                __break(1u);
LABEL_293:
                sub_2505BD7F0();
                __break(1u);
LABEL_294:
                __break(1u);
LABEL_295:
                __break(1u);
LABEL_296:
                __break(1u);
LABEL_297:
                __break(1u);
LABEL_298:
                __break(1u);
LABEL_299:
                __break(1u);
LABEL_300:
                __break(1u);
LABEL_301:
                __break(1u);
                JUMPOUT(0x250541F54);
              }
              uint64_t v35 = v34;
              uint64_t v36 = sub_2505BD800();
              uint64_t v37 = (int)v23 - v36;
              if (__OFSUB__((int)v23, v36)) {
                goto LABEL_247;
              }
LABEL_63:
              uint64_t v56 = sub_2505BD7F0();
              if (v56 >= v33) {
                size_t v57 = v33;
              }
              else {
                size_t v57 = v56;
              }
              int v58 = memcmp(__s1, (const void *)(v35 + v37), v57);
              sub_250511528(v23, v24);
            }
            else
            {
              uint64_t v59 = *(void *)(v23 + 16);
              uint64_t v60 = *(void *)(v23 + 24);
              swift_retain();
              swift_retain();
              uint64_t v61 = (char *)sub_2505BD7D0();
              if (v61)
              {
                uint64_t v62 = sub_2505BD800();
                if (__OFSUB__(v59, v62)) {
                  goto LABEL_262;
                }
                v61 += v59 - v62;
              }
              int64_t v63 = v60 - v59;
              if (__OFSUB__(v60, v59)) {
                goto LABEL_245;
              }
              uint64_t v64 = sub_2505BD7F0();
              if (!v61) {
                goto LABEL_280;
              }
LABEL_80:
              if (v64 >= v63) {
                size_t v68 = v63;
              }
              else {
                size_t v68 = v64;
              }
              int v58 = memcmp(__s1, v61, v68);
              swift_release();
              swift_release();
            }
            a2 = v146;
            if (v58) {
              goto LABEL_226;
            }
          }
          else
          {
LABEL_67:
            uint64_t __s2 = v23;
            __int16 v153 = v24;
            char v154 = BYTE2(v24);
            char v155 = BYTE3(v24);
            char v156 = BYTE4(v24);
            char v157 = BYTE5(v24);
            if (memcmp(__s1, &__s2, BYTE6(v24))) {
              goto LABEL_226;
            }
          }
          goto LABEL_114;
      }
      switch(v83 >> 62)
      {
        case 1uLL:
          if ((int)v84 > v84 >> 32) {
            goto LABEL_237;
          }
          sub_2504DBC4C(v17[2], v17[3]);
          uint64_t v99 = (char *)sub_2505BD7D0();
          if (!v99) {
            goto LABEL_140;
          }
          uint64_t v100 = sub_2505BD800();
          if (__OFSUB__((int)v84, v100)) {
            goto LABEL_241;
          }
          v99 += (int)v84 - v100;
LABEL_140:
          a2 = v146;
          sub_2505BD7F0();
          if (v90)
          {
            uint64_t v145 = v99;
            if (v90 == 1)
            {
              if (v85 >> 32 < (int)v85) {
                goto LABEL_260;
              }
              swift_retain();
              uint64_t v101 = (char *)sub_2505BD7D0();
              if (v101)
              {
                uint64_t v102 = sub_2505BD800();
                if (__OFSUB__((int)v85, v102)) {
                  goto LABEL_273;
                }
                v101 += (int)v85 - v102;
              }
              a2 = v146;
              uint64_t v103 = sub_2505BD7F0();
              if (v103 >= (v85 >> 32) - (int)v85) {
                size_t v104 = (v85 >> 32) - (int)v85;
              }
              else {
                size_t v104 = v103;
              }
              if (!v145) {
                goto LABEL_289;
              }
              if (!v101) {
                goto LABEL_290;
              }
              int v105 = memcmp(v145, v101, v104);
              sub_250511528(v85, v86);
            }
            else
            {
              uint64_t v136 = *(void *)(v85 + 16);
              uint64_t v137 = *(void *)(v85 + 24);
              swift_retain();
              swift_retain();
              uint64_t v138 = (char *)sub_2505BD7D0();
              if (v138)
              {
                uint64_t v139 = sub_2505BD800();
                if (__OFSUB__(v136, v139)) {
                  goto LABEL_272;
                }
                v138 += v136 - v139;
              }
              BOOL v28 = __OFSUB__(v137, v136);
              int64_t v140 = v137 - v136;
              if (v28) {
                goto LABEL_261;
              }
              uint64_t v141 = sub_2505BD7F0();
              if (v141 >= v140) {
                size_t v142 = v140;
              }
              else {
                size_t v142 = v141;
              }
              if (!v145) {
                goto LABEL_300;
              }
              if (!v138) {
                goto LABEL_301;
              }
              int v105 = memcmp(v145, v138, v142);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v85;
            LOWORD(__s1[1]) = v86;
            BYTE2(__s1[1]) = BYTE2(v86);
            BYTE3(__s1[1]) = BYTE3(v86);
            BYTE4(__s1[1]) = BYTE4(v86);
            BYTE5(__s1[1]) = BYTE5(v86);
            if (!v99) {
              goto LABEL_299;
            }
            int v105 = memcmp(v99, __s1, BYTE6(v86));
          }
          sub_250511528(v84, v83);
          if (v105) {
            goto LABEL_226;
          }
          goto LABEL_223;
        case 2uLL:
          uint64_t v106 = *(void *)(v84 + 16);
          swift_retain();
          swift_retain();
          uint64_t v107 = (char *)sub_2505BD7D0();
          if (!v107) {
            goto LABEL_155;
          }
          uint64_t v108 = sub_2505BD800();
          if (__OFSUB__(v106, v108)) {
            goto LABEL_240;
          }
          v107 += v106 - v108;
LABEL_155:
          a2 = v146;
          sub_2505BD7F0();
          if (!v90)
          {
            __s1[0] = v85;
            LOWORD(__s1[1]) = v86;
            BYTE2(__s1[1]) = BYTE2(v86);
            BYTE3(__s1[1]) = BYTE3(v86);
            BYTE4(__s1[1]) = BYTE4(v86);
            BYTE5(__s1[1]) = BYTE5(v86);
            if (!v107) {
              goto LABEL_296;
            }
            int v113 = memcmp(v107, __s1, BYTE6(v86));
LABEL_197:
            swift_release();
            goto LABEL_208;
          }
          uint64_t v145 = v107;
          if (v90 == 1)
          {
            if (v85 >> 32 < (int)v85) {
              goto LABEL_254;
            }
            swift_retain();
            uint64_t v109 = (char *)sub_2505BD7D0();
            if (v109)
            {
              uint64_t v110 = sub_2505BD800();
              if (__OFSUB__((int)v85, v110)) {
                goto LABEL_271;
              }
              v109 += (int)v85 - v110;
            }
            a2 = v146;
            uint64_t v111 = sub_2505BD7F0();
            if (v111 >= (v85 >> 32) - (int)v85) {
              size_t v112 = (v85 >> 32) - (int)v85;
            }
            else {
              size_t v112 = v111;
            }
            if (!v145) {
              goto LABEL_291;
            }
            if (!v109) {
              goto LABEL_292;
            }
            int v113 = memcmp(v145, v109, v112);
            sub_250511528(v85, v86);
            goto LABEL_197;
          }
          uint64_t v129 = *(void *)(v85 + 16);
          uint64_t v130 = *(void *)(v85 + 24);
          swift_retain();
          swift_retain();
          uint64_t v131 = (char *)sub_2505BD7D0();
          if (v131)
          {
            uint64_t v132 = sub_2505BD800();
            if (__OFSUB__(v129, v132)) {
              goto LABEL_270;
            }
            v131 += v129 - v132;
          }
          BOOL v28 = __OFSUB__(v130, v129);
          int64_t v133 = v130 - v129;
          if (v28) {
            goto LABEL_259;
          }
          uint64_t v134 = sub_2505BD7F0();
          if (v134 >= v133) {
            size_t v135 = v133;
          }
          else {
            size_t v135 = v134;
          }
          if (!v145) {
            goto LABEL_297;
          }
          if (!v131) {
            goto LABEL_298;
          }
          int v113 = memcmp(v145, v131, v135);
          swift_release();
          swift_release();
          swift_release();
LABEL_208:
          swift_release();
          if (v113) {
            goto LABEL_226;
          }
LABEL_223:
          sub_2505BDA50();
          sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
          if ((sub_2505BE120() & 1) == 0)
          {
LABEL_226:
            sub_25052D638((uint64_t)v10, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
            sub_25052D638((uint64_t)v17, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
            return 0;
          }
          sub_25052D638((uint64_t)v10, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
          sub_25052D638((uint64_t)v17, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
          a1 = v148;
          unint64_t v19 = v151 + v147;
          uint64_t v18 = v150 - 1;
          if (v150 == 1) {
            return 1;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v90) {
            goto LABEL_176;
          }
          if (v90 == 1)
          {
            uint64_t v94 = (v85 >> 32) - (int)v85;
            if (v85 >> 32 < (int)v85) {
              goto LABEL_253;
            }
            swift_retain();
            uint64_t v114 = sub_2505BD7D0();
            if (!v114) {
              goto LABEL_293;
            }
            uint64_t v96 = v114;
            uint64_t v115 = sub_2505BD800();
            uint64_t v98 = (int)v85 - v115;
            if (__OFSUB__((int)v85, v115)) {
              goto LABEL_258;
            }
LABEL_172:
            uint64_t v116 = sub_2505BD7F0();
            if (v116 >= v94) {
              size_t v117 = v94;
            }
            else {
              size_t v117 = v116;
            }
            int v118 = memcmp(__s1, (const void *)(v96 + v98), v117);
            sub_250511528(v85, v86);
          }
          else
          {
            uint64_t v125 = *(void *)(v85 + 16);
            uint64_t v126 = *(void *)(v85 + 24);
            swift_retain();
            swift_retain();
            uint64_t v121 = (char *)sub_2505BD7D0();
            if (v121)
            {
              uint64_t v127 = sub_2505BD800();
              if (__OFSUB__(v125, v127)) {
                goto LABEL_269;
              }
              v121 += v125 - v127;
            }
            int64_t v123 = v126 - v125;
            if (__OFSUB__(v126, v125)) {
              goto LABEL_256;
            }
            uint64_t v124 = sub_2505BD7F0();
            if (!v121) {
              goto LABEL_295;
            }
LABEL_189:
            if (v124 >= v123) {
              size_t v128 = v123;
            }
            else {
              size_t v128 = v124;
            }
            int v118 = memcmp(__s1, v121, v128);
            swift_release();
            swift_release();
          }
          a2 = v146;
          if (v118) {
            goto LABEL_226;
          }
          goto LABEL_223;
        default:
          __s1[0] = v17[2];
          LOWORD(__s1[1]) = v83;
          BYTE2(__s1[1]) = BYTE2(v83);
          BYTE3(__s1[1]) = BYTE3(v83);
          BYTE4(__s1[1]) = BYTE4(v83);
          BYTE5(__s1[1]) = BYTE5(v83);
          if (!v90)
          {
LABEL_176:
            uint64_t __s2 = v85;
            __int16 v153 = v86;
            char v154 = BYTE2(v86);
            char v155 = BYTE3(v86);
            char v156 = BYTE4(v86);
            char v157 = BYTE5(v86);
            if (memcmp(__s1, &__s2, BYTE6(v86))) {
              goto LABEL_226;
            }
            goto LABEL_223;
          }
          if (v90 == 1)
          {
            uint64_t v94 = (v85 >> 32) - (int)v85;
            if (v85 >> 32 < (int)v85) {
              goto LABEL_252;
            }
            swift_retain();
            uint64_t v95 = sub_2505BD7D0();
            if (!v95) {
              goto LABEL_288;
            }
            uint64_t v96 = v95;
            uint64_t v97 = sub_2505BD800();
            uint64_t v98 = (int)v85 - v97;
            if (__OFSUB__((int)v85, v97)) {
              goto LABEL_257;
            }
            goto LABEL_172;
          }
          uint64_t v119 = *(void *)(v85 + 16);
          uint64_t v120 = *(void *)(v85 + 24);
          swift_retain();
          swift_retain();
          uint64_t v121 = (char *)sub_2505BD7D0();
          if (v121)
          {
            uint64_t v122 = sub_2505BD800();
            if (__OFSUB__(v119, v122)) {
              goto LABEL_268;
            }
            v121 += v119 - v122;
          }
          int64_t v123 = v120 - v119;
          if (__OFSUB__(v120, v119)) {
            goto LABEL_255;
          }
          uint64_t v124 = sub_2505BD7F0();
          if (!v121) {
            goto LABEL_294;
          }
          goto LABEL_189;
      }
    }
  }
  return 1;
}

uint64_t sub_250541FB4(uint64_t a1, uint64_t a2)
{
  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(0);
  uint64_t v9 = MEMORY[0x270FA5388](v4, v5, v6, v7, v8);
  uint64_t v11 = (uint64_t *)((char *)&v219 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = MEMORY[0x270FA5388](v9, v12, v13, v14, v15);
  unint64_t v19 = (uint64_t *)((char *)&v219 - v18);
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v20 && a1 != a2)
  {
    uint64_t v233 = a2;
    uint64_t v234 = v16;
    uint64_t v237 = 0;
    unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v231 = *(void *)(v17 + 72);
    uint64_t v232 = a1;
    while (1)
    {
      sub_25054CFA0(a1 + v21, (uint64_t)v19, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
      unint64_t v236 = v21;
      sub_25054CFA0(a2 + v21, (uint64_t)v11, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
      uint64_t v23 = *v19;
      unint64_t v22 = v19[1];
      uint64_t v25 = *v11;
      unint64_t v24 = v11[1];
      uint64_t v26 = 0;
      switch(v22 >> 62)
      {
        case 1uLL:
          LODWORD(v26) = HIDWORD(v23) - v23;
          if (__OFSUB__(HIDWORD(v23), v23))
          {
            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
LABEL_297:
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
LABEL_313:
            __break(1u);
LABEL_314:
            __break(1u);
LABEL_315:
            __break(1u);
LABEL_316:
            __break(1u);
LABEL_317:
            __break(1u);
LABEL_318:
            __break(1u);
LABEL_319:
            __break(1u);
LABEL_320:
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
LABEL_323:
            __break(1u);
LABEL_324:
            __break(1u);
LABEL_325:
            __break(1u);
LABEL_326:
            __break(1u);
LABEL_327:
            __break(1u);
LABEL_328:
            __break(1u);
          }
          uint64_t v26 = (int)v26;
LABEL_10:
          uint64_t v235 = v20;
          unint64_t v30 = v24 >> 62;
          switch(v24 >> 62)
          {
            case 1uLL:
              LODWORD(v31) = HIDWORD(v25) - v25;
              if (__OFSUB__(HIDWORD(v25), v25)) {
                goto LABEL_278;
              }
              uint64_t v31 = (int)v31;
LABEL_19:
              if (v26 != v31) {
                goto LABEL_273;
              }
              if (v26 < 1) {
                goto LABEL_108;
              }
              break;
            case 2uLL:
              uint64_t v33 = *(void *)(v25 + 16);
              uint64_t v32 = *(void *)(v25 + 24);
              BOOL v29 = __OFSUB__(v32, v33);
              uint64_t v31 = v32 - v33;
              if (!v29) {
                goto LABEL_19;
              }
              goto LABEL_279;
            case 3uLL:
              if (v26) {
                goto LABEL_273;
              }
              goto LABEL_108;
            default:
              uint64_t v31 = BYTE6(v24);
              goto LABEL_19;
          }
          break;
        case 2uLL:
          uint64_t v28 = *(void *)(v23 + 16);
          uint64_t v27 = *(void *)(v23 + 24);
          BOOL v29 = __OFSUB__(v27, v28);
          uint64_t v26 = v27 - v28;
          if (!v29) {
            goto LABEL_10;
          }
          goto LABEL_277;
        case 3uLL:
          goto LABEL_10;
        default:
          uint64_t v26 = BYTE6(v22);
          goto LABEL_10;
      }
      switch(v22 >> 62)
      {
        case 1uLL:
          if ((int)v23 > v23 >> 32) {
            goto LABEL_292;
          }
          sub_2504DBC4C(v23, v22);
          uint64_t v51 = (char *)sub_2505BD7D0();
          if (!v51) {
            goto LABEL_45;
          }
          uint64_t v52 = sub_2505BD800();
          if (__OFSUB__((int)v23, v52)) {
            goto LABEL_297;
          }
          v51 += (int)v23 - v52;
LABEL_45:
          sub_2505BD7F0();
          if (v30)
          {
            if (v30 == 1)
            {
              uint64_t v225 = v51;
              if (v25 >> 32 < (int)v25) {
                goto LABEL_311;
              }
              swift_retain();
              int v53 = (char *)sub_2505BD7D0();
              if (v53)
              {
                uint64_t v54 = sub_2505BD800();
                if (__OFSUB__((int)v25, v54)) {
                  goto LABEL_328;
                }
                v53 += (int)v25 - v54;
              }
              uint64_t v55 = v225;
              uint64_t v56 = sub_2505BD7F0();
              if (v56 >= (v25 >> 32) - (int)v25) {
                size_t v57 = (v25 >> 32) - (int)v25;
              }
              else {
                size_t v57 = v56;
              }
              if (!v55) {
                goto LABEL_337;
              }
              if (!v53) {
                goto LABEL_338;
              }
              int v48 = memcmp(v55, v53, v57);
              sub_250511528(v25, v24);
            }
            else
            {
              uint64_t v78 = *(void *)(v25 + 16);
              uint64_t v79 = *(void *)(v25 + 24);
              swift_retain();
              swift_retain();
              int64_t v80 = (char *)sub_2505BD7D0();
              if (v80)
              {
                uint64_t v81 = sub_2505BD800();
                if (__OFSUB__(v78, v81)) {
                  goto LABEL_327;
                }
                v80 += v78 - v81;
              }
              BOOL v29 = __OFSUB__(v79, v78);
              int64_t v82 = v79 - v78;
              if (v29) {
                goto LABEL_312;
              }
              uint64_t v83 = sub_2505BD7F0();
              if (v83 >= v82) {
                size_t v84 = v82;
              }
              else {
                size_t v84 = v83;
              }
              if (!v51) {
                goto LABEL_339;
              }
              if (!v80) {
                goto LABEL_340;
              }
              int v48 = memcmp(v51, v80, v84);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v25;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v51) {
              goto LABEL_334;
            }
            int v48 = memcmp(v51, __s1, BYTE6(v24));
          }
          uint64_t v49 = v23;
          unint64_t v50 = v22;
LABEL_107:
          sub_250511528(v49, v50);
          if (v48) {
            goto LABEL_273;
          }
          goto LABEL_108;
        case 2uLL:
          uint64_t v39 = *(void *)(v23 + 16);
          swift_retain();
          swift_retain();
          uint64_t v40 = sub_2505BD7D0();
          if (v40)
          {
            uint64_t v41 = v40;
            uint64_t v42 = sub_2505BD800();
            if (__OFSUB__(v39, v42)) {
              goto LABEL_296;
            }
            size_t v43 = (const void *)(v41 + v39 - v42);
          }
          else
          {
            size_t v43 = 0;
          }
          sub_2505BD7F0();
          if (!v30)
          {
            __s1[0] = v25;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v43) {
              goto LABEL_333;
            }
            int v62 = memcmp(v43, __s1, BYTE6(v24));
LABEL_89:
            swift_release();
            goto LABEL_90;
          }
          if (v30 == 1)
          {
            uint64_t v225 = v43;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_307;
            }
            swift_retain();
            int v58 = (char *)sub_2505BD7D0();
            if (v58)
            {
              uint64_t v59 = sub_2505BD800();
              if (__OFSUB__((int)v25, v59)) {
                goto LABEL_326;
              }
              v58 += (int)v25 - v59;
            }
            uint64_t v60 = sub_2505BD7F0();
            if (v60 >= (v25 >> 32) - (int)v25) {
              size_t v61 = (v25 >> 32) - (int)v25;
            }
            else {
              size_t v61 = v60;
            }
            if (!v225) {
              goto LABEL_335;
            }
            if (!v58) {
              goto LABEL_336;
            }
            int v62 = memcmp(v225, v58, v61);
            sub_250511528(v25, v24);
            goto LABEL_89;
          }
          uint64_t v73 = v24 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v74 = *(void *)(v25 + 16);
          uint64_t v75 = *(void *)(v25 + 24);
          swift_retain();
          swift_retain();
          uint64_t v76 = v43;
          uint64_t v77 = v237;
          LOBYTE(v74) = sub_250547610(v74, v75, v73, v76);
          uint64_t v237 = v77;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if ((v74 & 1) == 0) {
            goto LABEL_273;
          }
LABEL_108:
          uint64_t v85 = v19[2];
          unint64_t v86 = v19[3];
          uint64_t v88 = v11[2];
          unint64_t v87 = v11[3];
          uint64_t v89 = 0;
          switch(v86 >> 62)
          {
            case 1uLL:
              LODWORD(v89) = HIDWORD(v85) - v85;
              if (__OFSUB__(HIDWORD(v85), v85)) {
                goto LABEL_281;
              }
              uint64_t v89 = (int)v89;
LABEL_113:
              unint64_t v92 = v87 >> 62;
              switch(v87 >> 62)
              {
                case 1uLL:
                  LODWORD(v93) = HIDWORD(v88) - v88;
                  if (__OFSUB__(HIDWORD(v88), v88)) {
                    goto LABEL_282;
                  }
                  uint64_t v93 = (int)v93;
LABEL_122:
                  if (v89 != v93) {
                    goto LABEL_273;
                  }
                  if (v89 < 1) {
                    goto LABEL_163;
                  }
                  break;
                case 2uLL:
                  uint64_t v95 = *(void *)(v88 + 16);
                  uint64_t v94 = *(void *)(v88 + 24);
                  BOOL v29 = __OFSUB__(v94, v95);
                  uint64_t v93 = v94 - v95;
                  if (!v29) {
                    goto LABEL_122;
                  }
                  goto LABEL_283;
                case 3uLL:
                  if (v89) {
                    goto LABEL_273;
                  }
                  goto LABEL_163;
                default:
                  uint64_t v93 = BYTE6(v87);
                  goto LABEL_122;
              }
              break;
            case 2uLL:
              uint64_t v91 = *(void *)(v85 + 16);
              uint64_t v90 = *(void *)(v85 + 24);
              BOOL v29 = __OFSUB__(v90, v91);
              uint64_t v89 = v90 - v91;
              if (!v29) {
                goto LABEL_113;
              }
              goto LABEL_280;
            case 3uLL:
              goto LABEL_113;
            default:
              uint64_t v89 = BYTE6(v86);
              goto LABEL_113;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v30) {
            goto LABEL_57;
          }
          if (v30 == 1)
          {
            uint64_t v34 = (v25 >> 32) - (int)v25;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_305;
            }
            swift_retain();
            uint64_t v44 = sub_2505BD7D0();
            if (!v44) {
              goto LABEL_332;
            }
            uint64_t v36 = v44;
            uint64_t v45 = sub_2505BD800();
            uint64_t v38 = (int)v25 - v45;
            if (__OFSUB__((int)v25, v45)) {
              goto LABEL_309;
            }
            goto LABEL_37;
          }
          uint64_t v63 = *(void *)(v25 + 16);
          uint64_t v64 = *(void *)(v25 + 24);
          swift_retain();
          swift_retain();
          uint64_t v65 = (char *)sub_2505BD7D0();
          if (v65)
          {
            uint64_t v66 = sub_2505BD800();
            if (__OFSUB__(v63, v66)) {
              goto LABEL_325;
            }
            v65 += v63 - v66;
          }
          BOOL v29 = __OFSUB__(v64, v63);
          int64_t v67 = v64 - v63;
          if (v29) {
            goto LABEL_306;
          }
          uint64_t v68 = sub_2505BD7F0();
          if (!v65) {
            goto LABEL_331;
          }
          goto LABEL_83;
        default:
          __s1[0] = v23;
          LOWORD(__s1[1]) = v22;
          BYTE2(__s1[1]) = BYTE2(v22);
          BYTE3(__s1[1]) = BYTE3(v22);
          BYTE4(__s1[1]) = BYTE4(v22);
          BYTE5(__s1[1]) = BYTE5(v22);
          if (!v30)
          {
LABEL_57:
            uint64_t __s2 = v25;
            __int16 v239 = v24;
            char v240 = BYTE2(v24);
            char v241 = BYTE3(v24);
            char v242 = BYTE4(v24);
            char v243 = BYTE5(v24);
            if (memcmp(__s1, &__s2, BYTE6(v24))) {
              goto LABEL_273;
            }
            goto LABEL_108;
          }
          if (v30 == 1)
          {
            uint64_t v34 = (v25 >> 32) - (int)v25;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_304;
            }
            sub_2504DBC4C(v25, v24);
            uint64_t v35 = sub_2505BD7D0();
            if (!v35)
            {
              sub_2505BD7F0();
              __break(1u);
LABEL_330:
              __break(1u);
LABEL_331:
              __break(1u);
LABEL_332:
              sub_2505BD7F0();
              __break(1u);
LABEL_333:
              __break(1u);
LABEL_334:
              __break(1u);
LABEL_335:
              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
LABEL_338:
              __break(1u);
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
LABEL_341:
              swift_release();
              swift_release();
              __break(1u);
              JUMPOUT(0x2505437B0);
            }
            uint64_t v36 = v35;
            uint64_t v37 = sub_2505BD800();
            uint64_t v38 = (int)v25 - v37;
            if (__OFSUB__((int)v25, v37)) {
              goto LABEL_310;
            }
LABEL_37:
            uint64_t v46 = sub_2505BD7F0();
            if (v46 >= v34) {
              size_t v47 = v34;
            }
            else {
              size_t v47 = v46;
            }
            int v48 = memcmp(__s1, (const void *)(v36 + v38), v47);
            uint64_t v49 = v25;
            unint64_t v50 = v24;
            goto LABEL_107;
          }
          uint64_t v69 = *(void *)(v25 + 16);
          uint64_t v70 = *(void *)(v25 + 24);
          swift_retain();
          swift_retain();
          uint64_t v65 = (char *)sub_2505BD7D0();
          if (v65)
          {
            uint64_t v71 = sub_2505BD800();
            if (__OFSUB__(v69, v71)) {
              goto LABEL_324;
            }
            v65 += v69 - v71;
          }
          BOOL v29 = __OFSUB__(v70, v69);
          int64_t v67 = v70 - v69;
          if (v29) {
            goto LABEL_308;
          }
          uint64_t v68 = sub_2505BD7F0();
          if (!v65) {
            goto LABEL_330;
          }
LABEL_83:
          if (v68 >= v67) {
            size_t v72 = v67;
          }
          else {
            size_t v72 = v68;
          }
          int v62 = memcmp(__s1, v65, v72);
          swift_release();
LABEL_90:
          swift_release();
          if (v62) {
            goto LABEL_273;
          }
          goto LABEL_108;
      }
      switch(v86 >> 62)
      {
        case 1uLL:
          if ((int)v85 > v85 >> 32) {
            goto LABEL_293;
          }
          sub_2504DBC4C(v19[2], v19[3]);
          uint64_t v109 = (char *)sub_2505BD7D0();
          if (!v109) {
            goto LABEL_143;
          }
          uint64_t v110 = sub_2505BD800();
          if (__OFSUB__((int)v85, v110)) {
            goto LABEL_299;
          }
          v109 += (int)v85 - v110;
LABEL_143:
          sub_2505BD7F0();
          if (!v92)
          {
            unint64_t v223 = v223 & 0xFF00000000000000 | v87 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v127 = v237;
            char v106 = sub_2505476B0(v88, v223, v109);
            uint64_t v237 = v127;
            goto LABEL_161;
          }
          if (v92 == 1)
          {
            if (v88 >> 32 < (int)v88) {
              goto LABEL_316;
            }
            sub_2504DBC4C(v88, v87);
            uint64_t v111 = v237;
            char v106 = sub_250547610((int)v88, v88 >> 32, v87 & 0x3FFFFFFFFFFFFFFFLL, v109);
            uint64_t v237 = v111;
            sub_250511528(v88, v87);
LABEL_161:
            uint64_t v107 = v85;
            unint64_t v108 = v86;
LABEL_162:
            sub_250511528(v107, v108);
            if ((v106 & 1) == 0) {
              goto LABEL_273;
            }
            goto LABEL_163;
          }
          uint64_t v160 = v87 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v161 = *(void *)(v88 + 16);
          uint64_t v162 = *(void *)(v88 + 24);
          swift_retain();
          swift_retain();
          uint64_t v163 = v237;
          LOBYTE(v161) = sub_250547610(v161, v162, v160, v109);
          uint64_t v237 = v163;
          swift_release();
          swift_release();
          sub_250511528(v85, v86);
          if ((v161 & 1) == 0) {
            goto LABEL_273;
          }
LABEL_163:
          uint64_t v128 = v19[4];
          unint64_t v129 = v19[5];
          uint64_t v131 = v11[4];
          unint64_t v130 = v11[5];
          uint64_t v132 = 0;
          switch(v129 >> 62)
          {
            case 1uLL:
              LODWORD(v132) = HIDWORD(v128) - v128;
              if (__OFSUB__(HIDWORD(v128), v128)) {
                goto LABEL_285;
              }
              uint64_t v132 = (int)v132;
LABEL_168:
              unint64_t v135 = v130 >> 62;
              switch(v130 >> 62)
              {
                case 1uLL:
                  LODWORD(v136) = HIDWORD(v131) - v131;
                  if (__OFSUB__(HIDWORD(v131), v131)) {
                    goto LABEL_287;
                  }
                  uint64_t v136 = (int)v136;
LABEL_177:
                  if (v132 != v136) {
                    goto LABEL_273;
                  }
                  if (v132 < 1) {
                    goto LABEL_220;
                  }
                  break;
                case 2uLL:
                  uint64_t v138 = *(void *)(v131 + 16);
                  uint64_t v137 = *(void *)(v131 + 24);
                  BOOL v29 = __OFSUB__(v137, v138);
                  uint64_t v136 = v137 - v138;
                  if (!v29) {
                    goto LABEL_177;
                  }
                  goto LABEL_286;
                case 3uLL:
                  if (v132) {
                    goto LABEL_273;
                  }
                  goto LABEL_220;
                default:
                  uint64_t v136 = BYTE6(v130);
                  goto LABEL_177;
              }
              break;
            case 2uLL:
              uint64_t v134 = *(void *)(v128 + 16);
              uint64_t v133 = *(void *)(v128 + 24);
              BOOL v29 = __OFSUB__(v133, v134);
              uint64_t v132 = v133 - v134;
              if (!v29) {
                goto LABEL_168;
              }
              goto LABEL_284;
            case 3uLL:
              goto LABEL_168;
            default:
              uint64_t v132 = BYTE6(v129);
              goto LABEL_168;
          }
          break;
        case 2uLL:
          uint64_t v98 = *(void *)(v85 + 16);
          swift_retain();
          swift_retain();
          uint64_t v99 = (char *)sub_2505BD7D0();
          if (v99)
          {
            uint64_t v100 = sub_2505BD800();
            BOOL v29 = __OFSUB__(v98, v100);
            uint64_t v101 = v98 - v100;
            unint64_t v102 = v229;
            if (v29) {
              goto LABEL_298;
            }
            v99 += v101;
            sub_2505BD7F0();
            if (!v92)
            {
LABEL_150:
              unint64_t v229 = v102 & 0xFF00000000000000 | v87 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v115 = v237;
              char v104 = sub_2505476B0(v88, v229, v99);
              uint64_t v237 = v115;
              goto LABEL_151;
            }
          }
          else
          {
            unint64_t v102 = v229;
            sub_2505BD7F0();
            if (!v92) {
              goto LABEL_150;
            }
          }
          if (v92 == 1)
          {
            if (v88 >> 32 < (int)v88) {
              goto LABEL_315;
            }
            sub_2504DBC4C(v88, v87);
            uint64_t v103 = v237;
            char v104 = sub_250547610((int)v88, v88 >> 32, v87 & 0x3FFFFFFFFFFFFFFFLL, v99);
            uint64_t v237 = v103;
            sub_250511528(v88, v87);
LABEL_151:
            swift_release();
            swift_release();
            if ((v104 & 1) == 0) {
              goto LABEL_273;
            }
            goto LABEL_163;
          }
          uint64_t v120 = v87 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v121 = *(void *)(v88 + 16);
          uint64_t v122 = *(void *)(v88 + 24);
          swift_retain();
          swift_retain();
          uint64_t v123 = v121;
          uint64_t v124 = v237;
          char v125 = sub_250547610(v123, v122, v120, v99);
          uint64_t v237 = v124;
          if (v124) {
            goto LABEL_341;
          }
          char v126 = v125;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if ((v126 & 1) == 0) {
            goto LABEL_273;
          }
          goto LABEL_163;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v92)
          {
            unint64_t v116 = v230 & 0xFF00000000000000 | v87 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v117 = v88;
            unint64_t v230 = v116;
            goto LABEL_155;
          }
          if (v92 != 1) {
            goto LABEL_147;
          }
          uint64_t v96 = (int)v88;
          uint64_t v97 = v88 >> 32;
          if (v88 >> 32 < (int)v88) {
            goto LABEL_314;
          }
          goto LABEL_138;
        default:
          __s1[0] = v19[2];
          LOWORD(__s1[1]) = v86;
          BYTE2(__s1[1]) = BYTE2(v86);
          BYTE3(__s1[1]) = BYTE3(v86);
          BYTE4(__s1[1]) = BYTE4(v86);
          BYTE5(__s1[1]) = BYTE5(v86);
          if (!v92)
          {
            unint64_t v116 = v224 & 0xFF00000000000000 | v87 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v117 = v88;
            unint64_t v224 = v116;
LABEL_155:
            uint64_t v118 = v237;
            BOOL v119 = sub_2505476B0(v117, v116, __s1);
            uint64_t v237 = v118;
            if (!v119) {
              goto LABEL_273;
            }
            goto LABEL_163;
          }
          if (v92 != 1)
          {
LABEL_147:
            uint64_t v112 = *(void *)(v88 + 16);
            uint64_t v113 = *(void *)(v88 + 24);
            swift_retain();
            swift_retain();
            uint64_t v114 = v237;
            LOBYTE(v112) = sub_250547610(v112, v113, v87 & 0x3FFFFFFFFFFFFFFFLL, __s1);
            uint64_t v237 = v114;
            swift_release();
            swift_release();
            if ((v112 & 1) == 0) {
              goto LABEL_273;
            }
            goto LABEL_163;
          }
          uint64_t v96 = (int)v88;
          uint64_t v97 = v88 >> 32;
          if (v88 >> 32 < (int)v88) {
            goto LABEL_313;
          }
LABEL_138:
          sub_2504DBC4C(v88, v87);
          uint64_t v105 = v237;
          char v106 = sub_250547610(v96, v97, v87 & 0x3FFFFFFFFFFFFFFFLL, __s1);
          uint64_t v237 = v105;
          uint64_t v107 = v88;
          unint64_t v108 = v87;
          goto LABEL_162;
      }
      switch(v129 >> 62)
      {
        case 1uLL:
          if ((int)v128 > v128 >> 32) {
            goto LABEL_294;
          }
          sub_2504DBC4C(v19[4], v19[5]);
          uint64_t v152 = (char *)sub_2505BD7D0();
          if (!v152) {
            goto LABEL_198;
          }
          uint64_t v153 = sub_2505BD800();
          if (__OFSUB__((int)v128, v153)) {
            goto LABEL_301;
          }
          v152 += (int)v128 - v153;
LABEL_198:
          sub_2505BD7F0();
          if (!v135)
          {
            unint64_t v221 = v221 & 0xFF00000000000000 | v130 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v175 = v237;
            char v149 = sub_2505476B0(v131, v221, v152);
            uint64_t v237 = v175;
            goto LABEL_218;
          }
          if (v135 == 1)
          {
            if (v131 >> 32 < (int)v131) {
              goto LABEL_320;
            }
            sub_2504DBC4C(v131, v130);
            uint64_t v154 = v237;
            char v149 = sub_250547610((int)v131, v131 >> 32, v130 & 0x3FFFFFFFFFFFFFFFLL, v152);
            uint64_t v237 = v154;
            sub_250511528(v131, v130);
LABEL_218:
            uint64_t v150 = v128;
            unint64_t v151 = v129;
LABEL_219:
            sub_250511528(v150, v151);
            if ((v149 & 1) == 0) {
              goto LABEL_273;
            }
            goto LABEL_220;
          }
          uint64_t v205 = *(void *)(v131 + 16);
          uint64_t v206 = *(void *)(v131 + 24);
          swift_retain();
          swift_retain();
          uint64_t v207 = v206;
          uint64_t v208 = v237;
          LOBYTE(v205) = sub_250547610(v205, v207, v130 & 0x3FFFFFFFFFFFFFFFLL, v152);
          uint64_t v237 = v208;
          swift_release();
          swift_release();
          sub_250511528(v128, v129);
          if ((v205 & 1) == 0) {
            goto LABEL_273;
          }
          goto LABEL_220;
        case 2uLL:
          uint64_t v141 = *(void *)(v128 + 16);
          swift_retain();
          swift_retain();
          size_t v142 = (char *)sub_2505BD7D0();
          if (v142)
          {
            uint64_t v143 = sub_2505BD800();
            BOOL v29 = __OFSUB__(v141, v143);
            uint64_t v144 = v141 - v143;
            unint64_t v145 = v227;
            if (v29) {
              goto LABEL_300;
            }
            v142 += v144;
            sub_2505BD7F0();
            if (!v135)
            {
LABEL_205:
              unint64_t v227 = v145 & 0xFF00000000000000 | v130 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v159 = v237;
              char v147 = sub_2505476B0(v131, v227, v142);
              uint64_t v237 = v159;
              goto LABEL_206;
            }
          }
          else
          {
            unint64_t v145 = v227;
            sub_2505BD7F0();
            if (!v135) {
              goto LABEL_205;
            }
          }
          if (v135 != 1)
          {
            uint64_t v168 = v130 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v169 = *(void *)(v131 + 16);
            uint64_t v170 = *(void *)(v131 + 24);
            swift_retain();
            swift_retain();
            uint64_t v171 = v169;
            uint64_t v172 = v237;
            char v173 = sub_250547610(v171, v170, v168, v142);
            uint64_t v237 = v172;
            if (v172) {
              goto LABEL_341;
            }
            char v174 = v173;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            if ((v174 & 1) == 0)
            {
LABEL_273:
              sub_25052D638((uint64_t)v11, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
              sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
              return 0;
            }
            goto LABEL_220;
          }
          if (v131 >> 32 < (int)v131) {
            goto LABEL_319;
          }
          sub_2504DBC4C(v131, v130);
          uint64_t v146 = v237;
          char v147 = sub_250547610((int)v131, v131 >> 32, v130 & 0x3FFFFFFFFFFFFFFFLL, v142);
          uint64_t v237 = v146;
          sub_250511528(v131, v130);
LABEL_206:
          swift_release();
          swift_release();
          if ((v147 & 1) == 0) {
            goto LABEL_273;
          }
LABEL_220:
          uint64_t v176 = v19[6];
          unint64_t v177 = v19[7];
          uint64_t v179 = v11[6];
          unint64_t v178 = v11[7];
          uint64_t v180 = 0;
          switch(v177 >> 62)
          {
            case 1uLL:
              LODWORD(v180) = HIDWORD(v176) - v176;
              if (__OFSUB__(HIDWORD(v176), v176)) {
                goto LABEL_288;
              }
              uint64_t v180 = (int)v180;
LABEL_225:
              unint64_t v183 = v178 >> 62;
              switch(v178 >> 62)
              {
                case 1uLL:
                  LODWORD(v184) = HIDWORD(v179) - v179;
                  if (__OFSUB__(HIDWORD(v179), v179)) {
                    goto LABEL_291;
                  }
                  uint64_t v184 = (int)v184;
LABEL_234:
                  if (v180 != v184) {
                    goto LABEL_273;
                  }
                  if (v180 < 1) {
                    goto LABEL_269;
                  }
                  break;
                case 2uLL:
                  uint64_t v186 = *(void *)(v179 + 16);
                  uint64_t v185 = *(void *)(v179 + 24);
                  BOOL v29 = __OFSUB__(v185, v186);
                  uint64_t v184 = v185 - v186;
                  if (!v29) {
                    goto LABEL_234;
                  }
                  goto LABEL_290;
                case 3uLL:
                  if (v180) {
                    goto LABEL_273;
                  }
                  goto LABEL_269;
                default:
                  uint64_t v184 = BYTE6(v178);
                  goto LABEL_234;
              }
              break;
            case 2uLL:
              uint64_t v182 = *(void *)(v176 + 16);
              uint64_t v181 = *(void *)(v176 + 24);
              BOOL v29 = __OFSUB__(v181, v182);
              uint64_t v180 = v181 - v182;
              if (!v29) {
                goto LABEL_225;
              }
              goto LABEL_289;
            case 3uLL:
              goto LABEL_225;
            default:
              uint64_t v180 = BYTE6(v177);
              goto LABEL_225;
          }
          switch(v177 >> 62)
          {
            case 1uLL:
              if ((int)v176 > v176 >> 32) {
                goto LABEL_295;
              }
              sub_2504DBC4C(v19[6], v19[7]);
              uint64_t v198 = (char *)sub_2505BD7D0();
              if (!v198) {
                goto LABEL_254;
              }
              uint64_t v199 = sub_2505BD800();
              if (__OFSUB__((int)v176, v199)) {
                goto LABEL_303;
              }
              v198 += (int)v176 - v199;
LABEL_254:
              sub_2505BD7F0();
              if (!v183)
              {
                unint64_t v219 = v219 & 0xFF00000000000000 | v178 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v213 = v237;
                char v195 = sub_2505476B0(v179, v219, v198);
                uint64_t v237 = v213;
                goto LABEL_267;
              }
              if (v183 == 1)
              {
                if (v179 >> 32 < (int)v179) {
                  goto LABEL_323;
                }
                sub_2504DBC4C(v179, v178);
                uint64_t v200 = v237;
                char v195 = sub_250547610((int)v179, v179 >> 32, v178 & 0x3FFFFFFFFFFFFFFFLL, v198);
                uint64_t v237 = v200;
                sub_250511528(v179, v178);
LABEL_267:
                uint64_t v196 = v176;
                unint64_t v197 = v177;
LABEL_268:
                sub_250511528(v196, v197);
                if ((v195 & 1) == 0) {
                  goto LABEL_273;
                }
                goto LABEL_269;
              }
              uint64_t v215 = *(void *)(v179 + 16);
              uint64_t v216 = *(void *)(v179 + 24);
              swift_retain();
              swift_retain();
              uint64_t v217 = v216;
              uint64_t v218 = v237;
              LOBYTE(v215) = sub_250547610(v215, v217, v178 & 0x3FFFFFFFFFFFFFFFLL, v198);
              uint64_t v237 = v218;
              swift_release();
              swift_release();
              sub_250511528(v176, v177);
              if ((v215 & 1) == 0) {
                goto LABEL_273;
              }
LABEL_269:
              sub_2505BDA50();
              sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
              if ((sub_2505BE120() & 1) == 0) {
                goto LABEL_273;
              }
              sub_25052D638((uint64_t)v11, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
              sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
              a1 = v232;
              unint64_t v21 = v236 + v231;
              uint64_t result = 1;
              uint64_t v20 = v235 - 1;
              a2 = v233;
              if (v235 == 1) {
                return result;
              }
              break;
            case 2uLL:
              uint64_t v189 = *(void *)(v176 + 16);
              swift_retain();
              swift_retain();
              uint64_t v190 = (char *)sub_2505BD7D0();
              if (!v190) {
                goto LABEL_244;
              }
              uint64_t v191 = sub_2505BD800();
              if (__OFSUB__(v189, v191)) {
                goto LABEL_302;
              }
              v190 += v189 - v191;
LABEL_244:
              sub_2505BD7F0();
              uint64_t v192 = v237;
              char v193 = sub_250547794(v179, v178, v190);
              uint64_t v237 = v192;
              swift_release();
              swift_release();
              if ((v193 & 1) == 0) {
                goto LABEL_273;
              }
              goto LABEL_269;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v183)
              {
                unint64_t v209 = v226 & 0xFF00000000000000 | v178 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v210 = v179;
                unint64_t v226 = v209;
                goto LABEL_264;
              }
              if (v183 != 1) {
                goto LABEL_258;
              }
              uint64_t v187 = (int)v179;
              uint64_t v188 = v179 >> 32;
              if (v179 >> 32 < (int)v179) {
                goto LABEL_322;
              }
              goto LABEL_249;
            default:
              __s1[0] = v19[6];
              LOWORD(__s1[1]) = v177;
              BYTE2(__s1[1]) = BYTE2(v177);
              BYTE3(__s1[1]) = BYTE3(v177);
              BYTE4(__s1[1]) = BYTE4(v177);
              BYTE5(__s1[1]) = BYTE5(v177);
              if (!v183)
              {
                unint64_t v209 = v220 & 0xFF00000000000000 | v178 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v210 = v179;
                unint64_t v220 = v209;
LABEL_264:
                uint64_t v211 = v237;
                BOOL v212 = sub_2505476B0(v210, v209, __s1);
                uint64_t v237 = v211;
                if (!v212) {
                  goto LABEL_273;
                }
                goto LABEL_269;
              }
              if (v183 != 1)
              {
LABEL_258:
                uint64_t v201 = *(void *)(v179 + 16);
                uint64_t v202 = *(void *)(v179 + 24);
                swift_retain();
                swift_retain();
                uint64_t v203 = v202;
                uint64_t v204 = v237;
                LOBYTE(v201) = sub_250547610(v201, v203, v178 & 0x3FFFFFFFFFFFFFFFLL, __s1);
                uint64_t v237 = v204;
                swift_release();
                swift_release();
                if ((v201 & 1) == 0) {
                  goto LABEL_273;
                }
                goto LABEL_269;
              }
              uint64_t v187 = (int)v179;
              uint64_t v188 = v179 >> 32;
              if (v179 >> 32 < (int)v179) {
                goto LABEL_321;
              }
LABEL_249:
              sub_2504DBC4C(v179, v178);
              uint64_t v194 = v237;
              char v195 = sub_250547610(v187, v188, v178 & 0x3FFFFFFFFFFFFFFFLL, __s1);
              uint64_t v237 = v194;
              uint64_t v196 = v179;
              unint64_t v197 = v178;
              goto LABEL_268;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v135)
          {
            unint64_t v164 = v228 & 0xFF00000000000000 | v130 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v165 = v131;
            unint64_t v228 = v164;
            goto LABEL_212;
          }
          if (v135 != 1) {
            goto LABEL_202;
          }
          uint64_t v139 = (int)v131;
          uint64_t v140 = v131 >> 32;
          if (v131 >> 32 < (int)v131) {
            goto LABEL_318;
          }
          goto LABEL_193;
        default:
          __s1[0] = v19[4];
          LOWORD(__s1[1]) = v129;
          BYTE2(__s1[1]) = BYTE2(v129);
          BYTE3(__s1[1]) = BYTE3(v129);
          BYTE4(__s1[1]) = BYTE4(v129);
          BYTE5(__s1[1]) = BYTE5(v129);
          if (!v135)
          {
            unint64_t v164 = v222 & 0xFF00000000000000 | v130 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v165 = v131;
            unint64_t v222 = v164;
LABEL_212:
            uint64_t v166 = v237;
            BOOL v167 = sub_2505476B0(v165, v164, __s1);
            uint64_t v237 = v166;
            if (!v167) {
              goto LABEL_273;
            }
            goto LABEL_220;
          }
          if (v135 != 1)
          {
LABEL_202:
            uint64_t v155 = *(void *)(v131 + 16);
            uint64_t v156 = *(void *)(v131 + 24);
            swift_retain();
            swift_retain();
            uint64_t v157 = v156;
            uint64_t v158 = v237;
            LOBYTE(v155) = sub_250547610(v155, v157, v130 & 0x3FFFFFFFFFFFFFFFLL, __s1);
            uint64_t v237 = v158;
            swift_release();
            swift_release();
            if ((v155 & 1) == 0) {
              goto LABEL_273;
            }
            goto LABEL_220;
          }
          uint64_t v139 = (int)v131;
          uint64_t v140 = v131 >> 32;
          if (v131 >> 32 < (int)v131) {
            goto LABEL_317;
          }
LABEL_193:
          sub_2504DBC4C(v131, v130);
          uint64_t v148 = v237;
          char v149 = sub_250547610(v139, v140, v130 & 0x3FFFFFFFFFFFFFFFLL, __s1);
          uint64_t v237 = v148;
          uint64_t v150 = v131;
          unint64_t v151 = v130;
          goto LABEL_219;
      }
    }
  }
  return 1;
}

uint64_t sub_250543870(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    unint64_t v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      unint64_t v7 = *v4;
      unint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          sub_2504DBC4C(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            sub_250511528(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                uint64_t v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                sub_2504DBC4C(v8, v7);
                uint64_t v23 = (char *)sub_2505BD7D0();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = sub_2505BD800();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                sub_2505BD7F0();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  size_t v41 = BYTE6(v7);
                  uint64_t v40 = __s1;
                  uint64_t v39 = v23;
LABEL_103:
                  int v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)sub_2505BD7D0();
                  if (v25)
                  {
                    uint64_t v26 = sub_2505BD800();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = sub_2505BD7F0();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    size_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    size_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  int v29 = memcmp(v23, v25, v28);
                  sub_250511528(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                uint64_t v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = sub_2505BD7D0();
                if (v68)
                {
                  uint64_t v69 = sub_2505BD800();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = sub_2505BD7F0();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                uint64_t v56 = v23;
                unint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                size_t v55 = (size_t)v71;
                size_t v57 = (const void *)v68;
LABEL_116:
                int v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                sub_2504DBC4C(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = sub_2505BD7D0();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = sub_2505BD800();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  uint64_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                sub_2505BD7F0();
                unint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)sub_2505BD7D0();
                    if (v42)
                    {
                      uint64_t v43 = sub_2505BD800();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = sub_2505BD7F0();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      size_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      size_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    unint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    int v29 = memcmp(v73, v42, v45);
                    sub_250511528(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    sub_250511528(v8, v7);
LABEL_104:
                    sub_250511528(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    size_t v61 = (char *)sub_2505BD7D0();
                    if (v61)
                    {
                      uint64_t v62 = sub_2505BD800();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    BOOL v17 = __OFSUB__(v59, v60);
                    int64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = sub_2505BD7F0();
                    if (v64 >= v63) {
                      size_t v65 = v63;
                    }
                    else {
                      size_t v65 = v64;
                    }
                    unint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    sub_250511528(v8, v7);
                    sub_250511528(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  int v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  sub_250511528(v8, v7);
                  sub_250511528(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  sub_2504DBC4C(v8, v7);
                  uint64_t v34 = sub_2505BD7D0();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  uint64_t v35 = sub_2505BD800();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = sub_2505BD7F0();
                  if (v36 >= v18) {
                    size_t v37 = v18;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  sub_250511528(v8, v7);
                  sub_250511528(v6, v5);
                  unint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                sub_2504DBC4C(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = sub_2505BD7D0();
                if (v48)
                {
                  uint64_t v54 = sub_2505BD800();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                BOOL v17 = __OFSUB__(v53, v52);
                int64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = sub_2505BD7F0();
                unint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  size_t v55 = v50;
                }
                else {
                  size_t v55 = v51;
                }
                uint64_t v56 = __s1;
                size_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  __int16 v79 = v7;
                  char v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  char v82 = BYTE4(v7);
                  char v83 = BYTE5(v7);
                  sub_2504DBC4C(v8, v7);
                  uint64_t v39 = __s1;
                  uint64_t v40 = &v78;
                  size_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  sub_2504DBC4C(v8, v7);
                  uint64_t v19 = sub_2505BD7D0();
                  if (!v19)
                  {
                    sub_2505BD7F0();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    sub_2505BD7F0();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x2505441A8);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = sub_2505BD800();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                sub_2504DBC4C(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = sub_2505BD7D0();
                if (v48)
                {
                  uint64_t v49 = sub_2505BD800();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                BOOL v17 = __OFSUB__(v47, v46);
                int64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = sub_2505BD7F0();
                unint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          BOOL v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          sub_2504DBC4C(v8, v7);
LABEL_121:
          sub_250511528(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

uint64_t sub_2505441D8(uint64_t a1, uint64_t a2)
{
  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  uint64_t v9 = MEMORY[0x270FA5388](v4, v5, v6, v7, v8);
  uint64_t v11 = (char *)&v197 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v9, v12, v13, v14, v15);
  uint64_t v19 = (char *)&v197 - v18;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v20 && a1 != a2)
  {
    uint64_t v205 = v16;
    uint64_t v206 = 0;
    unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v202 = *(void *)(v17 + 72);
    uint64_t v203 = a1;
    uint64_t v204 = a2;
    while (1)
    {
      sub_25054CFA0(a1 + v21, (uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      unint64_t v208 = v21;
      sub_25054CFA0(a2 + v21, (uint64_t)v11, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      uint64_t v23 = *(void *)v19;
      unint64_t v22 = *((void *)v19 + 1);
      uint64_t v25 = *(void *)v11;
      unint64_t v24 = *((void *)v11 + 1);
      uint64_t v26 = 0;
      switch(v22 >> 62)
      {
        case 1uLL:
          LODWORD(v26) = HIDWORD(v23) - v23;
          if (__OFSUB__(HIDWORD(v23), v23)) {
            goto LABEL_296;
          }
          uint64_t v26 = (int)v26;
LABEL_10:
          uint64_t v207 = v20;
          unint64_t v30 = v24 >> 62;
          switch(v24 >> 62)
          {
            case 1uLL:
              LODWORD(v31) = HIDWORD(v25) - v25;
              if (__OFSUB__(HIDWORD(v25), v25)) {
                goto LABEL_297;
              }
              uint64_t v31 = (int)v31;
LABEL_19:
              if (v26 != v31) {
                goto LABEL_292;
              }
              if (v26 < 1) {
                goto LABEL_119;
              }
              break;
            case 2uLL:
              uint64_t v33 = *(void *)(v25 + 16);
              uint64_t v32 = *(void *)(v25 + 24);
              BOOL v29 = __OFSUB__(v32, v33);
              uint64_t v31 = v32 - v33;
              if (!v29) {
                goto LABEL_19;
              }
              goto LABEL_298;
            case 3uLL:
              if (v26) {
                goto LABEL_292;
              }
              goto LABEL_119;
            default:
              uint64_t v31 = BYTE6(v24);
              goto LABEL_19;
          }
          break;
        case 2uLL:
          uint64_t v28 = *(void *)(v23 + 16);
          uint64_t v27 = *(void *)(v23 + 24);
          BOOL v29 = __OFSUB__(v27, v28);
          uint64_t v26 = v27 - v28;
          if (!v29) {
            goto LABEL_10;
          }
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
          goto LABEL_313;
        case 3uLL:
          goto LABEL_10;
        default:
          uint64_t v26 = BYTE6(v22);
          goto LABEL_10;
      }
      switch(v22 >> 62)
      {
        case 1uLL:
          if ((int)v23 > v23 >> 32) {
            goto LABEL_307;
          }
          sub_2504DBC4C(v23, v22);
          uint64_t v56 = (char *)sub_2505BD7D0();
          if (!v56) {
            goto LABEL_59;
          }
          uint64_t v57 = sub_2505BD800();
          if (__OFSUB__((int)v23, v57)) {
            goto LABEL_312;
          }
          v56 += (int)v23 - v57;
LABEL_59:
          sub_2505BD7F0();
          if (v30)
          {
            if (v30 == 1)
            {
              uint64_t v201 = v56;
              if (v25 >> 32 < (int)v25) {
                goto LABEL_324;
              }
              swift_retain();
              int v58 = (char *)sub_2505BD7D0();
              if (v58)
              {
                uint64_t v59 = sub_2505BD800();
                if (__OFSUB__((int)v25, v59)) {
                  goto LABEL_344;
                }
                v58 += (int)v25 - v59;
              }
              uint64_t v60 = v201;
              uint64_t v61 = sub_2505BD7F0();
              if (v61 >= (v25 >> 32) - (int)v25) {
                size_t v62 = (v25 >> 32) - (int)v25;
              }
              else {
                size_t v62 = v61;
              }
              if (!v60) {
                goto LABEL_361;
              }
              if (!v58) {
                goto LABEL_362;
              }
              if (v206) {
                goto LABEL_377;
              }
              int v53 = memcmp(v60, v58, v62);
              sub_250511528(v25, v24);
            }
            else
            {
              uint64_t v80 = *(void *)(v25 + 16);
              unint64_t v24 = *(void *)(v25 + 24);
              swift_retain();
              swift_retain();
              char v81 = (char *)sub_2505BD7D0();
              if (v81)
              {
                uint64_t v82 = sub_2505BD800();
                if (__OFSUB__(v80, v82)) {
                  goto LABEL_342;
                }
                v81 += v80 - v82;
              }
              BOOL v29 = __OFSUB__(v24, v80);
              int64_t v83 = v24 - v80;
              if (v29) {
                goto LABEL_326;
              }
              uint64_t v84 = sub_2505BD7F0();
              if (v84 >= v83) {
                size_t v85 = v83;
              }
              else {
                size_t v85 = v84;
              }
              if (!v56) {
                goto LABEL_363;
              }
              if (!v81) {
                goto LABEL_364;
              }
              if (v206) {
                goto LABEL_378;
              }
              int v53 = memcmp(v56, v81, v85);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v25;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v56) {
              goto LABEL_355;
            }
            int v53 = memcmp(v56, __s1, BYTE6(v24));
          }
          uint64_t v54 = v23;
          unint64_t v55 = v22;
          goto LABEL_118;
        case 2uLL:
          uint64_t v39 = v22 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v40 = *(void *)(v23 + 16);
          uint64_t v41 = *(void *)(v23 + 24);
          swift_retain();
          swift_retain();
          uint64_t v42 = (char *)sub_2505BD7D0();
          uint64_t v201 = (char *)v39;
          if (!v42) {
            goto LABEL_32;
          }
          uint64_t v43 = sub_2505BD800();
          if (__OFSUB__(v40, v43)) {
            goto LABEL_311;
          }
          v42 += v40 - v43;
LABEL_32:
          if (__OFSUB__(v41, v40)) {
            goto LABEL_308;
          }
          sub_2505BD7F0();
          if (v30)
          {
            if (v30 == 1)
            {
              if (v25 >> 32 < (int)v25) {
                goto LABEL_323;
              }
              swift_retain();
              uint64_t v44 = (char *)sub_2505BD7D0();
              if (v44)
              {
                uint64_t v45 = sub_2505BD800();
                if (__OFSUB__((int)v25, v45)) {
                  goto LABEL_345;
                }
                v44 += (int)v25 - v45;
              }
              uint64_t v46 = sub_2505BD7F0();
              if (v46 >= (v25 >> 32) - (int)v25) {
                size_t v47 = (v25 >> 32) - (int)v25;
              }
              else {
                size_t v47 = v46;
              }
              if (!v42) {
                goto LABEL_357;
              }
              if (!v44) {
                goto LABEL_358;
              }
              if (v206) {
                goto LABEL_377;
              }
              int v48 = memcmp(v42, v44, v47);
              sub_250511528(v25, v24);
            }
            else
            {
              uint64_t v73 = *(void *)(v25 + 16);
              uint64_t v74 = *(void *)(v25 + 24);
              swift_retain();
              swift_retain();
              uint64_t v75 = (char *)sub_2505BD7D0();
              if (v75)
              {
                uint64_t v76 = sub_2505BD800();
                if (__OFSUB__(v73, v76)) {
                  goto LABEL_343;
                }
                v75 += v73 - v76;
              }
              BOOL v29 = __OFSUB__(v74, v73);
              int64_t v77 = v74 - v73;
              if (v29) {
                goto LABEL_325;
              }
              uint64_t v78 = sub_2505BD7F0();
              if (v78 >= v77) {
                size_t v79 = v77;
              }
              else {
                size_t v79 = v78;
              }
              if (!v42) {
                goto LABEL_359;
              }
              if (!v75) {
                goto LABEL_360;
              }
              if (v206) {
                goto LABEL_378;
              }
              int v48 = memcmp(v42, v75, v79);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v25;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v42) {
              goto LABEL_354;
            }
            int v48 = memcmp(v42, __s1, BYTE6(v24));
          }
          goto LABEL_104;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v30) {
            goto LABEL_72;
          }
          if (v30 == 1)
          {
            uint64_t v34 = (v25 >> 32) - (int)v25;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_318;
            }
            swift_retain();
            uint64_t v49 = sub_2505BD7D0();
            if (!v49) {
              goto LABEL_353;
            }
            uint64_t v36 = v49;
            uint64_t v50 = sub_2505BD800();
            uint64_t v38 = (int)v25 - v50;
            if (__OFSUB__((int)v25, v50)) {
              goto LABEL_321;
            }
            goto LABEL_51;
          }
          uint64_t v69 = *(void *)(v25 + 16);
          uint64_t v70 = *(void *)(v25 + 24);
          swift_retain();
          swift_retain();
          size_t v65 = (char *)sub_2505BD7D0();
          if (v65)
          {
            uint64_t v71 = sub_2505BD800();
            if (__OFSUB__(v69, v71)) {
              goto LABEL_340;
            }
            v65 += v69 - v71;
          }
          BOOL v29 = __OFSUB__(v70, v69);
          int64_t v67 = v70 - v69;
          if (v29) {
            goto LABEL_320;
          }
          uint64_t v68 = sub_2505BD7F0();
          if (!v65) {
            goto LABEL_352;
          }
          goto LABEL_85;
        default:
          __s1[0] = v23;
          LOWORD(__s1[1]) = v22;
          BYTE2(__s1[1]) = BYTE2(v22);
          BYTE3(__s1[1]) = BYTE3(v22);
          BYTE4(__s1[1]) = BYTE4(v22);
          BYTE5(__s1[1]) = BYTE5(v22);
          if (v30)
          {
            if (v30 == 1)
            {
              uint64_t v34 = (v25 >> 32) - (int)v25;
              if (v25 >> 32 < (int)v25) {
                goto LABEL_317;
              }
              swift_retain();
              uint64_t v35 = sub_2505BD7D0();
              if (!v35)
              {
                sub_2505BD7F0();
                __break(1u);
LABEL_352:
                __break(1u);
LABEL_353:
                sub_2505BD7F0();
                __break(1u);
LABEL_354:
                __break(1u);
LABEL_355:
                __break(1u);
LABEL_356:
                __break(1u);
LABEL_357:
                __break(1u);
LABEL_358:
                __break(1u);
LABEL_359:
                __break(1u);
LABEL_360:
                __break(1u);
LABEL_361:
                __break(1u);
LABEL_362:
                __break(1u);
LABEL_363:
                __break(1u);
LABEL_364:
                __break(1u);
LABEL_365:
                __break(1u);
LABEL_366:
                sub_2505BD7F0();
                __break(1u);
LABEL_367:
                __break(1u);
LABEL_368:
                __break(1u);
LABEL_369:
                __break(1u);
LABEL_370:
                __break(1u);
LABEL_371:
                __break(1u);
LABEL_372:
                __break(1u);
LABEL_373:
                __break(1u);
LABEL_374:
                __break(1u);
LABEL_375:
                __break(1u);
LABEL_376:
                sub_2505BD7F0();
                __break(1u);
LABEL_377:
                sub_250511528(v25, v24);
                __break(1u);
LABEL_378:
                swift_release();
                swift_release();
                __break(1u);
LABEL_379:
                swift_release();
                swift_release();
                __break(1u);
                JUMPOUT(0x2505458F8);
              }
              uint64_t v36 = v35;
              uint64_t v37 = sub_2505BD800();
              uint64_t v38 = (int)v25 - v37;
              if (__OFSUB__((int)v25, v37)) {
                goto LABEL_322;
              }
LABEL_51:
              uint64_t v51 = sub_2505BD7F0();
              if (v51 >= v34) {
                size_t v52 = v34;
              }
              else {
                size_t v52 = v51;
              }
              int v53 = memcmp(__s1, (const void *)(v36 + v38), v52);
              uint64_t v54 = v25;
              unint64_t v55 = v24;
LABEL_118:
              sub_250511528(v54, v55);
              if (v53) {
                goto LABEL_292;
              }
            }
            else
            {
              uint64_t v63 = *(void *)(v25 + 16);
              uint64_t v64 = *(void *)(v25 + 24);
              swift_retain();
              swift_retain();
              size_t v65 = (char *)sub_2505BD7D0();
              if (v65)
              {
                uint64_t v66 = sub_2505BD800();
                if (__OFSUB__(v63, v66)) {
                  goto LABEL_341;
                }
                v65 += v63 - v66;
              }
              BOOL v29 = __OFSUB__(v64, v63);
              int64_t v67 = v64 - v63;
              if (v29) {
                goto LABEL_319;
              }
              uint64_t v68 = sub_2505BD7F0();
              if (!v65) {
                goto LABEL_356;
              }
LABEL_85:
              if (v68 >= v67) {
                size_t v72 = v67;
              }
              else {
                size_t v72 = v68;
              }
              int v48 = memcmp(__s1, v65, v72);
LABEL_104:
              swift_release();
              swift_release();
              if (v48) {
                goto LABEL_292;
              }
            }
          }
          else
          {
LABEL_72:
            uint64_t __s2 = v25;
            __int16 v210 = v24;
            char v211 = BYTE2(v24);
            char v212 = BYTE3(v24);
            char v213 = BYTE4(v24);
            char v214 = BYTE5(v24);
            if (memcmp(__s1, &__s2, BYTE6(v24))) {
              goto LABEL_292;
            }
          }
LABEL_119:
          uint64_t v87 = *((void *)v19 + 2);
          unint64_t v86 = *((void *)v19 + 3);
          uint64_t v25 = *((void *)v11 + 2);
          unint64_t v24 = *((void *)v11 + 3);
          uint64_t v88 = 0;
          switch(v86 >> 62)
          {
            case 1uLL:
              LODWORD(v88) = HIDWORD(v87) - v87;
              if (__OFSUB__(HIDWORD(v87), v87)) {
                goto LABEL_299;
              }
              uint64_t v88 = (int)v88;
LABEL_124:
              unint64_t v91 = v24 >> 62;
              switch(v24 >> 62)
              {
                case 1uLL:
                  LODWORD(v92) = HIDWORD(v25) - v25;
                  if (__OFSUB__(HIDWORD(v25), v25)) {
                    goto LABEL_302;
                  }
                  uint64_t v92 = (int)v92;
LABEL_133:
                  if (v88 != v92) {
                    goto LABEL_292;
                  }
                  if (v88 < 1) {
                    goto LABEL_224;
                  }
                  break;
                case 2uLL:
                  uint64_t v94 = *(void *)(v25 + 16);
                  uint64_t v93 = *(void *)(v25 + 24);
                  BOOL v29 = __OFSUB__(v93, v94);
                  uint64_t v92 = v93 - v94;
                  if (!v29) {
                    goto LABEL_133;
                  }
                  goto LABEL_301;
                case 3uLL:
                  if (v88) {
                    goto LABEL_292;
                  }
                  goto LABEL_224;
                default:
                  uint64_t v92 = BYTE6(v24);
                  goto LABEL_133;
              }
              break;
            case 2uLL:
              uint64_t v90 = *(void *)(v87 + 16);
              uint64_t v89 = *(void *)(v87 + 24);
              BOOL v29 = __OFSUB__(v89, v90);
              uint64_t v88 = v89 - v90;
              if (!v29) {
                goto LABEL_124;
              }
              goto LABEL_300;
            case 3uLL:
              goto LABEL_124;
            default:
              uint64_t v88 = BYTE6(v86);
              goto LABEL_124;
          }
          break;
      }
      switch(v86 >> 62)
      {
        case 1uLL:
          if ((int)v87 > v87 >> 32) {
            goto LABEL_309;
          }
          sub_2504DBC4C(*((void *)v19 + 2), *((void *)v19 + 3));
          uint64_t v112 = (char *)sub_2505BD7D0();
          if (!v112) {
            goto LABEL_159;
          }
          uint64_t v113 = sub_2505BD800();
          if (__OFSUB__((int)v87, v113)) {
            goto LABEL_314;
          }
          v112 += (int)v87 - v113;
LABEL_159:
          sub_2505BD7F0();
          if (v91)
          {
            if (v91 == 1)
            {
              uint64_t v201 = v112;
              if (v25 >> 32 < (int)v25) {
                goto LABEL_334;
              }
              swift_retain();
              uint64_t v114 = (char *)sub_2505BD7D0();
              if (v114)
              {
                uint64_t v115 = sub_2505BD800();
                if (__OFSUB__((int)v25, v115)) {
                  goto LABEL_350;
                }
                v114 += (int)v25 - v115;
              }
              unint64_t v116 = v201;
              uint64_t v117 = sub_2505BD7F0();
              if (v117 >= (v25 >> 32) - (int)v25) {
                size_t v118 = (v25 >> 32) - (int)v25;
              }
              else {
                size_t v118 = v117;
              }
              if (!v116) {
                goto LABEL_370;
              }
              if (!v114) {
                goto LABEL_371;
              }
              int v109 = memcmp(v116, v114, v118);
              sub_250511528(v25, v24);
            }
            else
            {
              uint64_t v141 = *(void *)(v25 + 16);
              uint64_t v201 = *(char **)(v25 + 24);
              swift_retain();
              swift_retain();
              size_t v142 = (char *)sub_2505BD7D0();
              if (v142)
              {
                uint64_t v143 = sub_2505BD800();
                if (__OFSUB__(v141, v143)) {
                  goto LABEL_348;
                }
                unint64_t v24 = (unint64_t)v112;
                v142 += v141 - v143;
              }
              else
              {
                unint64_t v24 = (unint64_t)v112;
              }
              int64_t v144 = (int64_t)&v201[-v141];
              if (__OFSUB__(v201, v141)) {
                goto LABEL_335;
              }
              uint64_t v145 = sub_2505BD7F0();
              if (v145 >= v144) {
                size_t v146 = v144;
              }
              else {
                size_t v146 = v145;
              }
              if (!v24) {
                goto LABEL_373;
              }
              if (!v142) {
                goto LABEL_374;
              }
              int v109 = memcmp((const void *)v24, v142, v146);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v25;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v112) {
              goto LABEL_372;
            }
            int v109 = memcmp(v112, __s1, BYTE6(v24));
          }
          uint64_t v110 = v87;
          unint64_t v111 = v86;
          goto LABEL_223;
        case 2uLL:
          uint64_t v101 = *(void *)(v87 + 16);
          swift_retain();
          swift_retain();
          uint64_t v102 = sub_2505BD7D0();
          if (v102)
          {
            uint64_t v103 = v102;
            uint64_t v104 = sub_2505BD800();
            if (__OFSUB__(v101, v104))
            {
LABEL_313:
              __break(1u);
LABEL_314:
              __break(1u);
LABEL_315:
              __break(1u);
LABEL_316:
              __break(1u);
LABEL_317:
              __break(1u);
LABEL_318:
              __break(1u);
LABEL_319:
              __break(1u);
LABEL_320:
              __break(1u);
LABEL_321:
              __break(1u);
LABEL_322:
              __break(1u);
LABEL_323:
              __break(1u);
LABEL_324:
              __break(1u);
LABEL_325:
              __break(1u);
LABEL_326:
              __break(1u);
LABEL_327:
              __break(1u);
LABEL_328:
              __break(1u);
LABEL_329:
              __break(1u);
LABEL_330:
              __break(1u);
LABEL_331:
              __break(1u);
LABEL_332:
              __break(1u);
LABEL_333:
              __break(1u);
LABEL_334:
              __break(1u);
LABEL_335:
              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
LABEL_338:
              __break(1u);
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
LABEL_341:
              __break(1u);
LABEL_342:
              __break(1u);
LABEL_343:
              __break(1u);
LABEL_344:
              __break(1u);
LABEL_345:
              __break(1u);
LABEL_346:
              __break(1u);
LABEL_347:
              __break(1u);
LABEL_348:
              __break(1u);
LABEL_349:
              __break(1u);
LABEL_350:
              __break(1u);
            }
            uint64_t v105 = (char *)(v103 + v101 - v104);
          }
          else
          {
            uint64_t v105 = 0;
          }
          sub_2505BD7F0();
          if (!v91)
          {
            __s1[0] = v25;
            LOWORD(__s1[1]) = v24;
            BYTE2(__s1[1]) = BYTE2(v24);
            BYTE3(__s1[1]) = BYTE3(v24);
            BYTE4(__s1[1]) = BYTE4(v24);
            BYTE5(__s1[1]) = BYTE5(v24);
            if (!v105) {
              goto LABEL_369;
            }
            int v124 = memcmp(v105, __s1, BYTE6(v24));
LABEL_205:
            swift_release();
            swift_release();
            if (v124) {
              goto LABEL_292;
            }
            goto LABEL_224;
          }
          if (v91 == 1)
          {
            uint64_t v201 = v105;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_331;
            }
            swift_retain();
            BOOL v119 = (char *)sub_2505BD7D0();
            if (v119)
            {
              uint64_t v120 = sub_2505BD800();
              if (__OFSUB__((int)v25, v120)) {
                goto LABEL_349;
              }
              v119 += (int)v25 - v120;
            }
            uint64_t v121 = v201;
            uint64_t v122 = sub_2505BD7F0();
            if (v122 >= (v25 >> 32) - (int)v25) {
              size_t v123 = (v25 >> 32) - (int)v25;
            }
            else {
              size_t v123 = v122;
            }
            if (!v121) {
              goto LABEL_367;
            }
            if (!v119) {
              goto LABEL_368;
            }
            int v124 = memcmp(v121, v119, v123);
            sub_250511528(v25, v24);
            goto LABEL_205;
          }
          uint64_t v136 = v24 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v137 = *(void *)(v25 + 16);
          uint64_t v138 = *(void *)(v25 + 24);
          swift_retain();
          swift_retain();
          uint64_t v139 = v105;
          uint64_t v140 = v206;
          LOBYTE(v137) = sub_250547610(v137, v138, v136, v139);
          uint64_t v206 = v140;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if ((v137 & 1) == 0) {
            goto LABEL_292;
          }
LABEL_224:
          uint64_t v147 = *((void *)v19 + 4);
          uint64_t v148 = *((void *)v11 + 4);
          if (v19[40]) {
            uint64_t v147 = v147 != 0;
          }
          if (v11[40] == 1)
          {
            if (v148)
            {
              if (v147 != 1) {
                goto LABEL_292;
              }
            }
            else if (v147)
            {
              goto LABEL_292;
            }
          }
          else if (v147 != v148)
          {
            goto LABEL_292;
          }
          uint64_t v149 = *((void *)v19 + 6);
          unint64_t v150 = *((void *)v19 + 7);
          uint64_t v152 = *((void *)v11 + 6);
          unint64_t v151 = *((void *)v11 + 7);
          uint64_t v153 = 0;
          switch(v150 >> 62)
          {
            case 1uLL:
              LODWORD(v153) = HIDWORD(v149) - v149;
              if (__OFSUB__(HIDWORD(v149), v149)) {
                goto LABEL_304;
              }
              uint64_t v153 = (int)v153;
LABEL_238:
              unint64_t v156 = v151 >> 62;
              switch(v151 >> 62)
              {
                case 1uLL:
                  LODWORD(v157) = HIDWORD(v152) - v152;
                  if (__OFSUB__(HIDWORD(v152), v152)) {
                    goto LABEL_305;
                  }
                  uint64_t v157 = (int)v157;
LABEL_247:
                  if (v153 != v157) {
                    goto LABEL_292;
                  }
                  if (v153 < 1) {
                    goto LABEL_288;
                  }
                  break;
                case 2uLL:
                  uint64_t v159 = *(void *)(v152 + 16);
                  uint64_t v158 = *(void *)(v152 + 24);
                  BOOL v29 = __OFSUB__(v158, v159);
                  uint64_t v157 = v158 - v159;
                  if (!v29) {
                    goto LABEL_247;
                  }
                  goto LABEL_306;
                case 3uLL:
                  if (v153) {
                    goto LABEL_292;
                  }
                  goto LABEL_288;
                default:
                  uint64_t v157 = BYTE6(v151);
                  goto LABEL_247;
              }
              break;
            case 2uLL:
              uint64_t v155 = *(void *)(v149 + 16);
              uint64_t v154 = *(void *)(v149 + 24);
              BOOL v29 = __OFSUB__(v154, v155);
              uint64_t v153 = v154 - v155;
              if (!v29) {
                goto LABEL_238;
              }
              goto LABEL_303;
            case 3uLL:
              goto LABEL_238;
            default:
              uint64_t v153 = BYTE6(v150);
              goto LABEL_238;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v91) {
            goto LABEL_171;
          }
          if (v91 == 1)
          {
            uint64_t v95 = (v25 >> 32) - (int)v25;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_327;
            }
            swift_retain();
            uint64_t v106 = sub_2505BD7D0();
            if (!v106) {
              goto LABEL_366;
            }
            uint64_t v97 = v106;
            uint64_t v107 = sub_2505BD800();
            uint64_t v99 = (int)v25 - v107;
            if (__OFSUB__((int)v25, v107)) {
              goto LABEL_332;
            }
            uint64_t v100 = sub_2505BD7F0();
            if (v206) {
              goto LABEL_377;
            }
LABEL_151:
            if (v100 >= v95) {
              size_t v108 = v95;
            }
            else {
              size_t v108 = v100;
            }
            int v109 = memcmp(__s1, (const void *)(v97 + v99), v108);
            uint64_t v110 = v25;
            unint64_t v111 = v24;
LABEL_223:
            sub_250511528(v110, v111);
            if (v109) {
              goto LABEL_292;
            }
          }
          else
          {
            uint64_t v125 = *(void *)(v25 + 16);
            uint64_t v126 = *(void *)(v25 + 24);
            swift_retain();
            swift_retain();
            uint64_t v127 = (char *)sub_2505BD7D0();
            if (v127)
            {
              uint64_t v128 = sub_2505BD800();
              if (__OFSUB__(v125, v128)) {
                goto LABEL_346;
              }
              v127 += v125 - v128;
            }
            BOOL v29 = __OFSUB__(v126, v125);
            int64_t v129 = v126 - v125;
            if (v29) {
              goto LABEL_329;
            }
            uint64_t v130 = sub_2505BD7F0();
            if (!v127) {
              goto LABEL_365;
            }
            if (v206) {
              goto LABEL_378;
            }
LABEL_198:
            if (v130 >= v129) {
              size_t v134 = v129;
            }
            else {
              size_t v134 = v130;
            }
            int v135 = memcmp(__s1, v127, v134);
            swift_release();
            swift_release();
            if (v135) {
              goto LABEL_292;
            }
          }
          goto LABEL_224;
        default:
          __s1[0] = *((void *)v19 + 2);
          LOWORD(__s1[1]) = v86;
          BYTE2(__s1[1]) = BYTE2(v86);
          BYTE3(__s1[1]) = BYTE3(v86);
          BYTE4(__s1[1]) = BYTE4(v86);
          BYTE5(__s1[1]) = BYTE5(v86);
          if (!v91)
          {
LABEL_171:
            uint64_t __s2 = v25;
            __int16 v210 = v24;
            char v211 = BYTE2(v24);
            char v212 = BYTE3(v24);
            char v213 = BYTE4(v24);
            char v214 = BYTE5(v24);
            if (memcmp(__s1, &__s2, BYTE6(v24))) {
              goto LABEL_292;
            }
            goto LABEL_224;
          }
          if (v91 == 1)
          {
            uint64_t v95 = (v25 >> 32) - (int)v25;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_328;
            }
            swift_retain();
            uint64_t v96 = sub_2505BD7D0();
            if (!v96) {
              goto LABEL_376;
            }
            uint64_t v97 = v96;
            uint64_t v98 = sub_2505BD800();
            uint64_t v99 = (int)v25 - v98;
            if (__OFSUB__((int)v25, v98)) {
              goto LABEL_333;
            }
            uint64_t v100 = sub_2505BD7F0();
            goto LABEL_151;
          }
          uint64_t v131 = *(void *)(v25 + 16);
          uint64_t v132 = *(void *)(v25 + 24);
          swift_retain();
          swift_retain();
          uint64_t v127 = (char *)sub_2505BD7D0();
          if (v127)
          {
            uint64_t v133 = sub_2505BD800();
            if (__OFSUB__(v131, v133)) {
              goto LABEL_347;
            }
            v127 += v131 - v133;
          }
          BOOL v29 = __OFSUB__(v132, v131);
          int64_t v129 = v132 - v131;
          if (v29) {
            goto LABEL_330;
          }
          uint64_t v130 = sub_2505BD7F0();
          if (!v127) {
            goto LABEL_375;
          }
          goto LABEL_198;
      }
      switch(v150 >> 62)
      {
        case 1uLL:
          if ((int)v149 > v149 >> 32) {
            goto LABEL_310;
          }
          sub_2504DBC4C(*((void *)v19 + 6), *((void *)v19 + 7));
          char v173 = (char *)sub_2505BD7D0();
          if (!v173) {
            goto LABEL_268;
          }
          uint64_t v174 = sub_2505BD800();
          if (__OFSUB__((int)v149, v174)) {
            goto LABEL_316;
          }
          v173 += (int)v149 - v174;
LABEL_268:
          sub_2505BD7F0();
          if (!v156)
          {
            unint64_t v197 = v197 & 0xFF00000000000000 | v151 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v191 = v206;
            char v170 = sub_2505476B0(v152, v197, v173);
            uint64_t v206 = v191;
            goto LABEL_286;
          }
          if (v156 == 1)
          {
            if (v152 >> 32 < (int)v152) {
              goto LABEL_339;
            }
            sub_2504DBC4C(v152, v151);
            uint64_t v175 = v206;
            char v170 = sub_250547610((int)v152, v152 >> 32, v151 & 0x3FFFFFFFFFFFFFFFLL, v173);
            uint64_t v206 = v175;
            sub_250511528(v152, v151);
LABEL_286:
            uint64_t v171 = v149;
            unint64_t v172 = v150;
LABEL_287:
            sub_250511528(v171, v172);
            if ((v170 & 1) == 0) {
              goto LABEL_292;
            }
            goto LABEL_288;
          }
          uint64_t v193 = v151 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v194 = *(void *)(v152 + 16);
          uint64_t v195 = *(void *)(v152 + 24);
          swift_retain();
          swift_retain();
          uint64_t v196 = v206;
          LOBYTE(v194) = sub_250547610(v194, v195, v193, v173);
          uint64_t v206 = v196;
          swift_release();
          swift_release();
          sub_250511528(v149, v150);
          if ((v194 & 1) == 0) {
            goto LABEL_292;
          }
          goto LABEL_288;
        case 2uLL:
          uint64_t v162 = *(void *)(v149 + 16);
          swift_retain();
          swift_retain();
          uint64_t v163 = (char *)sub_2505BD7D0();
          if (v163)
          {
            uint64_t v164 = sub_2505BD800();
            BOOL v29 = __OFSUB__(v162, v164);
            uint64_t v165 = v162 - v164;
            unint64_t v166 = v199;
            if (v29) {
              goto LABEL_315;
            }
            v163 += v165;
            sub_2505BD7F0();
            if (!v156)
            {
LABEL_275:
              unint64_t v199 = v166 & 0xFF00000000000000 | v151 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v179 = v206;
              char v168 = sub_2505476B0(v152, v199, v163);
              uint64_t v206 = v179;
              goto LABEL_276;
            }
          }
          else
          {
            unint64_t v166 = v199;
            sub_2505BD7F0();
            if (!v156) {
              goto LABEL_275;
            }
          }
          if (v156 == 1)
          {
            if (v152 >> 32 < (int)v152) {
              goto LABEL_338;
            }
            sub_2504DBC4C(v152, v151);
            uint64_t v167 = v206;
            char v168 = sub_250547610((int)v152, v152 >> 32, v151 & 0x3FFFFFFFFFFFFFFFLL, v163);
            uint64_t v206 = v167;
            sub_250511528(v152, v151);
LABEL_276:
            swift_release();
            swift_release();
            if ((v168 & 1) == 0) {
              goto LABEL_292;
            }
            goto LABEL_288;
          }
          uint64_t v184 = v151 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v185 = *(void *)(v152 + 16);
          uint64_t v186 = *(void *)(v152 + 24);
          swift_retain();
          swift_retain();
          uint64_t v187 = v185;
          uint64_t v188 = v206;
          char v189 = sub_250547610(v187, v186, v184, v163);
          uint64_t v206 = v188;
          if (v188) {
            goto LABEL_379;
          }
          char v190 = v189;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          if ((v190 & 1) == 0)
          {
LABEL_292:
            sub_25052D638((uint64_t)v11, type metadata accessor for GKCrypto_GroupAETextToSign.User);
            sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.User);
            return 0;
          }
LABEL_288:
          sub_2505BDA50();
          sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
          if ((sub_2505BE120() & 1) == 0) {
            goto LABEL_292;
          }
          sub_25052D638((uint64_t)v11, type metadata accessor for GKCrypto_GroupAETextToSign.User);
          sub_25052D638((uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.User);
          a1 = v203;
          unint64_t v21 = v208 + v202;
          uint64_t result = 1;
          uint64_t v20 = v207 - 1;
          a2 = v204;
          if (v207 == 1) {
            return result;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v156)
          {
            unint64_t v180 = v200 & 0xFF00000000000000 | v151 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v181 = v152;
            unint64_t v200 = v180;
            goto LABEL_280;
          }
          if (v156 != 1) {
            goto LABEL_272;
          }
          uint64_t v160 = (int)v152;
          uint64_t v161 = v152 >> 32;
          if (v152 >> 32 < (int)v152) {
            goto LABEL_337;
          }
          goto LABEL_263;
        default:
          __s1[0] = *((void *)v19 + 6);
          LOWORD(__s1[1]) = v150;
          BYTE2(__s1[1]) = BYTE2(v150);
          BYTE3(__s1[1]) = BYTE3(v150);
          BYTE4(__s1[1]) = BYTE4(v150);
          BYTE5(__s1[1]) = BYTE5(v150);
          if (!v156)
          {
            unint64_t v180 = v198 & 0xFF00000000000000 | v151 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v181 = v152;
            unint64_t v198 = v180;
LABEL_280:
            uint64_t v182 = v206;
            BOOL v183 = sub_2505476B0(v181, v180, __s1);
            uint64_t v206 = v182;
            if (!v183) {
              goto LABEL_292;
            }
            goto LABEL_288;
          }
          if (v156 != 1)
          {
LABEL_272:
            uint64_t v176 = *(void *)(v152 + 16);
            uint64_t v177 = *(void *)(v152 + 24);
            swift_retain();
            swift_retain();
            uint64_t v178 = v206;
            LOBYTE(v176) = sub_250547610(v176, v177, v151 & 0x3FFFFFFFFFFFFFFFLL, __s1);
            uint64_t v206 = v178;
            swift_release();
            swift_release();
            if ((v176 & 1) == 0) {
              goto LABEL_292;
            }
            goto LABEL_288;
          }
          uint64_t v160 = (int)v152;
          uint64_t v161 = v152 >> 32;
          if (v152 >> 32 < (int)v152) {
            goto LABEL_336;
          }
LABEL_263:
          sub_2504DBC4C(v152, v151);
          uint64_t v169 = v206;
          char v170 = sub_250547610(v160, v161, v151 & 0x3FFFFFFFFFFFFFFFLL, __s1);
          uint64_t v206 = v169;
          uint64_t v171 = v152;
          unint64_t v172 = v151;
          goto LABEL_287;
      }
    }
  }
  return 1;
}

uint64_t sub_250545988(uint64_t a1, uint64_t a2)
{
  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2505BDDD0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v216 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v216 - v17;
  uint64_t v229 = type metadata accessor for HashAndCipher();
  uint64_t v23 = MEMORY[0x270FA5388](v229, v19, v20, v21, v22);
  uint64_t v25 = (char *)&v216 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v23, v26, v27, v28, v29);
  uint64_t v32 = (char *)&v216 - v31;
  uint64_t v37 = MEMORY[0x270FA5388](v30, v33, v34, v35, v36);
  uint64_t v234 = (uint64_t *)((char *)&v216 - v38);
  MEMORY[0x270FA5388](v37, v39, v40, v41, v42);
  uint64_t v233 = (uint64_t)&v216 - v44;
  uint64_t v45 = *(void *)(a1 + 16);
  if (v45 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v45 || a1 == a2) {
    return 1;
  }
  uint64_t v46 = (char *)((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  uint64_t v47 = *(void *)(v43 + 72);
  uint64_t v221 = 0;
  uint64_t v222 = v47;
  uint64_t v225 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v226 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v227 = v4;
  unint64_t v228 = v25;
  uint64_t v231 = v12;
  uint64_t v232 = v32;
  unint64_t v230 = v18;
  uint64_t v223 = a2;
  uint64_t v224 = a1;
  while (2)
  {
    uint64_t v49 = v233;
    sub_25054CFA0((uint64_t)&v46[a1], v233, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
    uint64_t v50 = (uint64_t)&v46[a2];
    uint64_t v51 = v234;
    sub_25054CFA0(v50, (uint64_t)v234, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
    uint64_t v52 = *(void *)v49;
    unint64_t v53 = *(void *)(v49 + 8);
    uint64_t v54 = *v51;
    unint64_t v55 = v51[1];
    uint64_t v56 = 0;
    switch(v53 >> 62)
    {
      case 1uLL:
        LODWORD(v56) = HIDWORD(v52) - v52;
        if (__OFSUB__(HIDWORD(v52), v52))
        {
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
LABEL_275:
          __break(1u);
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
LABEL_279:
          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
LABEL_282:
          __break(1u);
LABEL_283:
          __break(1u);
LABEL_284:
          __break(1u);
LABEL_285:
          __break(1u);
LABEL_286:
          __break(1u);
LABEL_287:
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          __break(1u);
LABEL_314:
          __break(1u);
        }
        uint64_t v56 = (int)v56;
        break;
      case 2uLL:
        uint64_t v58 = *(void *)(v52 + 16);
        uint64_t v57 = *(void *)(v52 + 24);
        BOOL v59 = __OFSUB__(v57, v58);
        uint64_t v56 = v57 - v58;
        if (!v59) {
          break;
        }
        goto LABEL_262;
      case 3uLL:
        break;
      default:
        uint64_t v56 = BYTE6(v53);
        break;
    }
    unint64_t v60 = v55 >> 62;
    switch(v55 >> 62)
    {
      case 1uLL:
        LODWORD(v61) = HIDWORD(v54) - v54;
        if (__OFSUB__(HIDWORD(v54), v54)) {
          goto LABEL_263;
        }
        uint64_t v61 = (int)v61;
LABEL_18:
        if (v56 != v61)
        {
LABEL_255:
          uint64_t v69 = (uint64_t)v232;
          sub_25054CFA0(v233, (uint64_t)v232, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
          sub_25054CFA0((uint64_t)v234, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
          goto LABEL_259;
        }
        if (v56 < 1)
        {
LABEL_29:
          uint64_t v69 = (uint64_t)v232;
          sub_25054CFA0(v233, (uint64_t)v232, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
          sub_25054CFA0((uint64_t)v234, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
        }
        else
        {
          switch(v53 >> 62)
          {
            case 1uLL:
              if ((int)v52 > v52 >> 32) {
                goto LABEL_273;
              }
              sub_2504DBC4C(*(void *)v49, *(void *)(v49 + 8));
              uint64_t v70 = sub_2505BD7D0();
              if (v70)
              {
                uint64_t v71 = v70;
                uint64_t v72 = sub_2505BD800();
                if (__OFSUB__((int)v52, v72)) {
                  goto LABEL_278;
                }
                unint64_t v220 = (char *)(v71 + (int)v52 - v72);
              }
              else
              {
                unint64_t v220 = 0;
              }
              uint64_t v25 = v228;
              sub_2505BD7F0();
              if (v60)
              {
                if (v60 == 1)
                {
                  if (v54 >> 32 < (int)v54) {
                    goto LABEL_291;
                  }
                  swift_retain();
                  uint64_t v88 = (char *)sub_2505BD7D0();
                  if (v88)
                  {
                    uint64_t v89 = sub_2505BD800();
                    if (__OFSUB__((int)v54, v89)) {
                      goto LABEL_308;
                    }
                    v88 += (int)v54 - v89;
                  }
                  uint64_t v25 = v228;
                  uint64_t v90 = sub_2505BD7F0();
                  if (v90 >= (v54 >> 32) - (int)v54) {
                    size_t v91 = (v54 >> 32) - (int)v54;
                  }
                  else {
                    size_t v91 = v90;
                  }
                  if (!v220) {
                    goto LABEL_319;
                  }
                  if (!v88) {
                    goto LABEL_320;
                  }
                  int v81 = memcmp(v220, v88, v91);
                  sub_250511528(v54, v55);
                }
                else
                {
                  uint64_t v109 = *(void *)(v54 + 16);
                  uint64_t v110 = *(void *)(v54 + 24);
                  swift_retain();
                  swift_retain();
                  unint64_t v111 = (char *)sub_2505BD7D0();
                  if (v111)
                  {
                    uint64_t v112 = sub_2505BD800();
                    if (__OFSUB__(v109, v112)) {
                      goto LABEL_307;
                    }
                    v111 += v109 - v112;
                  }
                  BOOL v59 = __OFSUB__(v110, v109);
                  int64_t v113 = v110 - v109;
                  if (v59) {
                    goto LABEL_292;
                  }
                  uint64_t v114 = sub_2505BD7F0();
                  if (v114 >= v113) {
                    size_t v115 = v113;
                  }
                  else {
                    size_t v115 = v114;
                  }
                  if (!v220) {
                    goto LABEL_327;
                  }
                  if (!v111) {
                    goto LABEL_328;
                  }
                  int v81 = memcmp(v220, v111, v115);
                  swift_release();
                  swift_release();
                }
              }
              else
              {
                __s1[0] = v54;
                LOWORD(__s1[1]) = v55;
                BYTE2(__s1[1]) = BYTE2(v55);
                BYTE3(__s1[1]) = BYTE3(v55);
                BYTE4(__s1[1]) = BYTE4(v55);
                BYTE5(__s1[1]) = BYTE5(v55);
                if (!v220) {
                  goto LABEL_326;
                }
                int v81 = memcmp(v220, __s1, BYTE6(v55));
              }
              uint64_t v82 = v52;
              unint64_t v83 = v53;
              goto LABEL_115;
            case 2uLL:
              uint64_t v73 = *(void *)(v52 + 16);
              swift_retain();
              swift_retain();
              uint64_t v74 = sub_2505BD7D0();
              if (v74)
              {
                uint64_t v75 = v74;
                uint64_t v76 = sub_2505BD800();
                if (__OFSUB__(v73, v76)) {
                  goto LABEL_277;
                }
                unint64_t v220 = (char *)(v75 + v73 - v76);
              }
              else
              {
                unint64_t v220 = 0;
              }
              uint64_t v25 = v228;
              sub_2505BD7F0();
              if (!v60)
              {
                __s1[0] = v54;
                LOWORD(__s1[1]) = v55;
                BYTE2(__s1[1]) = BYTE2(v55);
                BYTE3(__s1[1]) = BYTE3(v55);
                BYTE4(__s1[1]) = BYTE4(v55);
                BYTE5(__s1[1]) = BYTE5(v55);
                if (!v220) {
                  goto LABEL_323;
                }
                int v81 = memcmp(v220, __s1, BYTE6(v55));
LABEL_90:
                swift_release();
                goto LABEL_101;
              }
              if (v60 == 1)
              {
                if (v54 >> 32 < (int)v54) {
                  goto LABEL_287;
                }
                swift_retain();
                uint64_t v84 = (char *)sub_2505BD7D0();
                if (v84)
                {
                  uint64_t v85 = sub_2505BD800();
                  if (__OFSUB__((int)v54, v85)) {
                    goto LABEL_306;
                  }
                  v84 += (int)v54 - v85;
                }
                uint64_t v25 = v228;
                uint64_t v86 = sub_2505BD7F0();
                if (v86 >= (v54 >> 32) - (int)v54) {
                  size_t v87 = (v54 >> 32) - (int)v54;
                }
                else {
                  size_t v87 = v86;
                }
                if (!v220) {
                  goto LABEL_317;
                }
                if (!v84) {
                  goto LABEL_318;
                }
                int v81 = memcmp(v220, v84, v87);
                sub_250511528(v54, v55);
                goto LABEL_90;
              }
              uint64_t v102 = *(void *)(v54 + 16);
              uint64_t v103 = *(void *)(v54 + 24);
              swift_retain();
              swift_retain();
              uint64_t v104 = (char *)sub_2505BD7D0();
              if (v104)
              {
                uint64_t v105 = sub_2505BD800();
                if (__OFSUB__(v102, v105)) {
                  goto LABEL_305;
                }
                v104 += v102 - v105;
              }
              BOOL v59 = __OFSUB__(v103, v102);
              int64_t v106 = v103 - v102;
              if (v59) {
                goto LABEL_290;
              }
              uint64_t v107 = sub_2505BD7F0();
              if (v107 >= v106) {
                size_t v108 = v106;
              }
              else {
                size_t v108 = v107;
              }
              if (!v220) {
                goto LABEL_324;
              }
              if (!v104) {
                goto LABEL_325;
              }
              int v81 = memcmp(v220, v104, v108);
              swift_release();
              swift_release();
              swift_release();
LABEL_101:
              swift_release();
LABEL_116:
              uint64_t v69 = (uint64_t)v232;
LABEL_117:
              sub_25054CFA0(v233, v69, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
              sub_25054CFA0((uint64_t)v234, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
              if (v81) {
                goto LABEL_259;
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v60) {
                goto LABEL_46;
              }
              if (v60 == 1)
              {
                uint64_t v64 = (v54 >> 32) - (int)v54;
                if (v54 >> 32 < (int)v54) {
                  goto LABEL_284;
                }
                swift_retain();
                uint64_t v77 = sub_2505BD7D0();
                if (!v77) {
                  goto LABEL_316;
                }
                uint64_t v66 = v77;
                uint64_t v78 = sub_2505BD800();
                uint64_t v68 = (int)v54 - v78;
                if (__OFSUB__((int)v54, v78)) {
                  goto LABEL_286;
                }
                goto LABEL_42;
              }
              uint64_t v98 = *(void *)(v54 + 16);
              uint64_t v99 = *(void *)(v54 + 24);
              swift_retain();
              swift_retain();
              uint64_t v94 = (char *)sub_2505BD7D0();
              if (v94)
              {
                uint64_t v100 = sub_2505BD800();
                if (__OFSUB__(v98, v100)) {
                  goto LABEL_304;
                }
                v94 += v98 - v100;
              }
              BOOL v59 = __OFSUB__(v99, v98);
              int64_t v96 = v99 - v98;
              if (v59) {
                goto LABEL_289;
              }
              uint64_t v97 = sub_2505BD7F0();
              uint64_t v69 = (uint64_t)v232;
              if (!v94) {
                goto LABEL_322;
              }
              goto LABEL_84;
            default:
              __s1[0] = *(void *)v49;
              LOWORD(__s1[1]) = v53;
              BYTE2(__s1[1]) = BYTE2(v53);
              BYTE3(__s1[1]) = BYTE3(v53);
              BYTE4(__s1[1]) = BYTE4(v53);
              BYTE5(__s1[1]) = BYTE5(v53);
              if (!v60)
              {
LABEL_46:
                uint64_t __s2 = v54;
                __int16 v236 = v55;
                char v237 = BYTE2(v55);
                char v238 = BYTE3(v55);
                char v239 = BYTE4(v55);
                char v240 = BYTE5(v55);
                int v81 = memcmp(__s1, &__s2, BYTE6(v55));
                goto LABEL_116;
              }
              if (v60 != 1)
              {
                uint64_t v92 = *(void *)(v54 + 16);
                uint64_t v93 = *(void *)(v54 + 24);
                swift_retain();
                swift_retain();
                uint64_t v94 = (char *)sub_2505BD7D0();
                if (v94)
                {
                  uint64_t v95 = sub_2505BD800();
                  if (__OFSUB__(v92, v95)) {
                    goto LABEL_303;
                  }
                  v94 += v92 - v95;
                }
                BOOL v59 = __OFSUB__(v93, v92);
                int64_t v96 = v93 - v92;
                if (v59) {
                  goto LABEL_288;
                }
                uint64_t v97 = sub_2505BD7F0();
                uint64_t v69 = (uint64_t)v232;
                if (!v94) {
                  goto LABEL_321;
                }
LABEL_84:
                if (v97 >= v96) {
                  size_t v101 = v96;
                }
                else {
                  size_t v101 = v97;
                }
                int v81 = memcmp(__s1, v94, v101);
                swift_release();
                swift_release();
                goto LABEL_117;
              }
              uint64_t v64 = (v54 >> 32) - (int)v54;
              if (v54 >> 32 < (int)v54) {
                goto LABEL_283;
              }
              swift_retain();
              uint64_t v65 = sub_2505BD7D0();
              if (!v65)
              {
                sub_2505BD7F0();
                __break(1u);
LABEL_316:
                sub_2505BD7F0();
                __break(1u);
LABEL_317:
                __break(1u);
LABEL_318:
                __break(1u);
LABEL_319:
                __break(1u);
LABEL_320:
                __break(1u);
LABEL_321:
                __break(1u);
LABEL_322:
                __break(1u);
LABEL_323:
                __break(1u);
LABEL_324:
                __break(1u);
LABEL_325:
                __break(1u);
LABEL_326:
                __break(1u);
LABEL_327:
                __break(1u);
LABEL_328:
                __break(1u);
LABEL_329:
                sub_2505BD7F0();
                __break(1u);
LABEL_330:
                __break(1u);
LABEL_331:
                __break(1u);
LABEL_332:
                __break(1u);
LABEL_333:
                __break(1u);
LABEL_334:
                sub_2505BD7F0();
                __break(1u);
LABEL_335:
                __break(1u);
LABEL_336:
                __break(1u);
LABEL_337:
                __break(1u);
LABEL_338:
                __break(1u);
LABEL_339:
                __break(1u);
LABEL_340:
                __break(1u);
LABEL_341:
                __break(1u);
LABEL_342:
                __break(1u);
                JUMPOUT(0x2505472B0);
              }
              uint64_t v66 = v65;
              uint64_t v67 = sub_2505BD800();
              uint64_t v68 = (int)v54 - v67;
              if (__OFSUB__((int)v54, v67)) {
                goto LABEL_285;
              }
LABEL_42:
              uint64_t v79 = sub_2505BD7F0();
              if (v79 >= v64) {
                size_t v80 = v64;
              }
              else {
                size_t v80 = v79;
              }
              int v81 = memcmp(__s1, (const void *)(v66 + v68), v80);
              uint64_t v82 = v54;
              unint64_t v83 = v55;
LABEL_115:
              sub_250511528(v82, v83);
              goto LABEL_116;
          }
        }
        uint64_t v116 = *(int *)(v229 + 20);
        uint64_t v117 = v69 + v116;
        size_t v118 = &v25[v116];
        uint64_t v119 = sub_2505BDD80();
        unint64_t v121 = v120;
        uint64_t v122 = sub_2505BDD80();
        uint64_t v124 = v122;
        unint64_t v125 = v123;
        uint64_t v126 = 0;
        switch(v121 >> 62)
        {
          case 1uLL:
            LODWORD(v126) = HIDWORD(v119) - v119;
            if (__OFSUB__(HIDWORD(v119), v119)) {
              goto LABEL_265;
            }
            uint64_t v126 = (int)v126;
            break;
          case 2uLL:
            uint64_t v128 = *(void *)(v119 + 16);
            uint64_t v127 = *(void *)(v119 + 24);
            BOOL v59 = __OFSUB__(v127, v128);
            uint64_t v126 = v127 - v128;
            if (!v59) {
              goto LABEL_123;
            }
            goto LABEL_266;
          case 3uLL:
            goto LABEL_123;
          default:
            uint64_t v126 = BYTE6(v121);
            goto LABEL_123;
        }
        break;
      case 2uLL:
        uint64_t v63 = *(void *)(v54 + 16);
        uint64_t v62 = *(void *)(v54 + 24);
        BOOL v59 = __OFSUB__(v62, v63);
        uint64_t v61 = v62 - v63;
        if (!v59) {
          goto LABEL_18;
        }
        goto LABEL_264;
      case 3uLL:
        if (!v56) {
          goto LABEL_29;
        }
        goto LABEL_255;
      default:
        uint64_t v61 = BYTE6(v55);
        goto LABEL_18;
    }
LABEL_123:
    unint64_t v129 = v123 >> 62;
    switch(v123 >> 62)
    {
      case 1uLL:
        LODWORD(v130) = HIDWORD(v122) - v122;
        if (__OFSUB__(HIDWORD(v122), v122)) {
          goto LABEL_267;
        }
        uint64_t v130 = (int)v130;
LABEL_128:
        if (v126 == v130)
        {
          if (v126 < 1)
          {
LABEL_139:
            sub_250511528(v122, v123);
            sub_250511528(v119, v121);
            uint64_t v138 = v227;
            uint64_t v139 = *v226;
            (*v226)(v230, v117, v227);
            v139(v231, (uint64_t)v118, v138);
            uint64_t v25 = v228;
          }
          else
          {
            unint64_t v220 = v118;
            uint64_t v219 = v117;
            switch(v121 >> 62)
            {
              case 1uLL:
                if ((int)v119 > v119 >> 32) {
                  goto LABEL_274;
                }
                sub_2504DBC4C(v119, v121);
                uint64_t v140 = sub_2505BD7D0();
                if (v140)
                {
                  uint64_t v141 = v140;
                  uint64_t v142 = sub_2505BD800();
                  if (__OFSUB__((int)v119, v142)) {
                    goto LABEL_280;
                  }
                  uint64_t v143 = (char *)(v141 + (int)v119 - v142);
                  sub_2505BD7F0();
                  if (!v129)
                  {
LABEL_181:
                    __s1[0] = v124;
                    LOWORD(__s1[1]) = v125;
                    BYTE2(__s1[1]) = BYTE2(v125);
                    BYTE3(__s1[1]) = BYTE3(v125);
                    BYTE4(__s1[1]) = BYTE4(v125);
                    BYTE5(__s1[1]) = BYTE5(v125);
                    if (!v143) {
                      goto LABEL_335;
                    }
                    int v149 = memcmp(v143, __s1, BYTE6(v125));
                    sub_250511528(v119, v121);
                    goto LABEL_212;
                  }
                }
                else
                {
                  uint64_t v143 = 0;
                  sub_2505BD7F0();
                  if (!v129) {
                    goto LABEL_181;
                  }
                }
                uint64_t v218 = v143;
                if (v129 == 1)
                {
                  if (v124 >> 32 < (int)v124) {
                    goto LABEL_300;
                  }
                  swift_retain();
                  int64_t v144 = (char *)sub_2505BD7D0();
                  if (v144)
                  {
                    uint64_t v145 = sub_2505BD800();
                    if (__OFSUB__((int)v124, v145)) {
                      goto LABEL_314;
                    }
                    v144 += (int)v124 - v145;
                  }
                  size_t v146 = v218;
                  uint64_t v147 = sub_2505BD7F0();
                  if (v147 >= (v124 >> 32) - (int)v124) {
                    size_t v148 = (v124 >> 32) - (int)v124;
                  }
                  else {
                    size_t v148 = v147;
                  }
                  if (!v146) {
                    goto LABEL_330;
                  }
                  uint64_t v25 = v228;
                  if (!v144) {
                    goto LABEL_331;
                  }
                  int v149 = memcmp(v146, v144, v148);
                  sub_250511528(v124, v125);
                }
                else
                {
                  uint64_t v177 = *(void *)(v124 + 16);
                  uint64_t v217 = *(char **)(v124 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v178 = (char *)sub_2505BD7D0();
                  if (v178)
                  {
                    uint64_t v179 = sub_2505BD800();
                    if (__OFSUB__(v177, v179)) {
                      goto LABEL_313;
                    }
                    v178 += v177 - v179;
                  }
                  unint64_t v180 = &v217[-v177];
                  if (__OFSUB__(v217, v177)) {
                    goto LABEL_302;
                  }
                  uint64_t v181 = sub_2505BD7F0();
                  if (v181 >= (uint64_t)v180) {
                    size_t v182 = (size_t)v180;
                  }
                  else {
                    size_t v182 = v181;
                  }
                  uint64_t v25 = v228;
                  if (!v218) {
                    goto LABEL_340;
                  }
                  if (!v178) {
                    goto LABEL_341;
                  }
                  int v149 = memcmp(v218, v178, v182);
                  swift_release();
                  swift_release();
                }
                sub_250511528(v119, v121);
LABEL_224:
                sub_250511528(v124, v125);
                sub_250511528(v119, v121);
                goto LABEL_225;
              case 2uLL:
                uint64_t v218 = v46;
                uint64_t v150 = v45;
                uint64_t v151 = *(void *)(v119 + 16);
                swift_retain();
                swift_retain();
                uint64_t v152 = (char *)sub_2505BD7D0();
                if (!v152) {
                  goto LABEL_158;
                }
                uint64_t v153 = sub_2505BD800();
                if (__OFSUB__(v151, v153)) {
                  goto LABEL_279;
                }
                v152 += v151 - v153;
LABEL_158:
                uint64_t v45 = v150;
                sub_2505BD7F0();
                uint64_t v46 = v218;
                if (!v129)
                {
                  __s1[0] = v124;
                  LOWORD(__s1[1]) = v125;
                  BYTE2(__s1[1]) = BYTE2(v125);
                  BYTE3(__s1[1]) = BYTE3(v125);
                  BYTE4(__s1[1]) = BYTE4(v125);
                  BYTE5(__s1[1]) = BYTE5(v125);
                  if (!v152) {
                    goto LABEL_338;
                  }
                  int v149 = memcmp(v152, __s1, BYTE6(v125));
LABEL_200:
                  swift_release();
                  goto LABEL_211;
                }
                uint64_t v217 = v152;
                if (v129 == 1)
                {
                  uint64_t v216 = v121 & 0x3FFFFFFFFFFFFFFFLL;
                  if (v124 >> 32 < (int)v124) {
                    goto LABEL_295;
                  }
                  swift_retain();
                  uint64_t v154 = (char *)sub_2505BD7D0();
                  if (v154)
                  {
                    uint64_t v155 = sub_2505BD800();
                    if (__OFSUB__((int)v124, v155)) {
                      goto LABEL_312;
                    }
                    v154 += (int)v124 - v155;
                  }
                  uint64_t v156 = sub_2505BD7F0();
                  if (v156 >= (v124 >> 32) - (int)v124) {
                    size_t v157 = (v124 >> 32) - (int)v124;
                  }
                  else {
                    size_t v157 = v156;
                  }
                  if (!v217) {
                    goto LABEL_332;
                  }
                  if (!v154) {
                    goto LABEL_333;
                  }
                  int v149 = memcmp(v217, v154, v157);
                  sub_250511528(v124, v125);
                  goto LABEL_200;
                }
                uint64_t v171 = *(void *)(v124 + 16);
                uint64_t v216 = *(void *)(v124 + 24);
                swift_retain();
                swift_retain();
                unint64_t v172 = (char *)sub_2505BD7D0();
                if (v172)
                {
                  uint64_t v173 = sub_2505BD800();
                  if (__OFSUB__(v171, v173)) {
                    goto LABEL_311;
                  }
                  v172 += v171 - v173;
                }
                BOOL v59 = __OFSUB__(v216, v171);
                int64_t v174 = v216 - v171;
                if (v59) {
                  goto LABEL_301;
                }
                uint64_t v175 = sub_2505BD7F0();
                if (v175 >= v174) {
                  size_t v176 = v174;
                }
                else {
                  size_t v176 = v175;
                }
                if (!v217) {
                  goto LABEL_342;
                }
                if (!v172) {
                  goto LABEL_339;
                }
                int v149 = memcmp(v217, v172, v176);
                swift_release();
                swift_release();
                swift_release();
LABEL_211:
                swift_release();
LABEL_212:
                sub_250511528(v124, v125);
                sub_250511528(v119, v121);
                uint64_t v25 = v228;
LABEL_225:
                uint64_t v138 = v227;
                BOOL v183 = *v226;
                uint64_t v184 = v230;
                (*v226)(v230, v219, v227);
                uint64_t v185 = v231;
                v183(v231, (uint64_t)v220, v138);
                if (v149) {
                  goto LABEL_258;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v129) {
                  goto LABEL_178;
                }
                if (v129 == 1)
                {
                  uint64_t v133 = (v122 >> 32) - (int)v122;
                  if (v122 >> 32 < (int)v122) {
                    goto LABEL_294;
                  }
                  uint64_t v158 = sub_2505BD7D0();
                  if (!v158) {
                    goto LABEL_334;
                  }
                  uint64_t v135 = v158;
                  uint64_t v159 = sub_2505BD800();
                  uint64_t v137 = (int)v124 - v159;
                  if (__OFSUB__((int)v124, v159)) {
                    goto LABEL_299;
                  }
LABEL_175:
                  uint64_t v160 = sub_2505BD7F0();
                  p_s2 = (uint64_t *)(v135 + v137);
                  if (v160 >= v133) {
                    size_t v162 = v133;
                  }
                  else {
                    size_t v162 = v160;
                  }
LABEL_179:
                  int v149 = memcmp(__s1, p_s2, v162);
                  goto LABEL_212;
                }
                uint64_t v168 = *(void *)(v122 + 16);
                uint64_t v218 = *(char **)(v122 + 24);
                swift_retain();
                swift_retain();
                uint64_t v164 = (char *)sub_2505BD7D0();
                if (v164)
                {
                  uint64_t v169 = sub_2505BD800();
                  if (__OFSUB__(v168, v169)) {
                    goto LABEL_310;
                  }
                  v164 += v168 - v169;
                }
                unint64_t v166 = &v218[-v168];
                if (__OFSUB__(v218, v168)) {
                  goto LABEL_297;
                }
                uint64_t v167 = sub_2505BD7F0();
                uint64_t v25 = v228;
                if (!v164) {
                  goto LABEL_337;
                }
LABEL_194:
                if (v167 >= (uint64_t)v166) {
                  size_t v170 = (size_t)v166;
                }
                else {
                  size_t v170 = v167;
                }
                int v149 = memcmp(__s1, v164, v170);
                swift_release();
                swift_release();
                goto LABEL_224;
              default:
                __s1[0] = v119;
                LOWORD(__s1[1]) = v121;
                BYTE2(__s1[1]) = BYTE2(v121);
                BYTE3(__s1[1]) = BYTE3(v121);
                BYTE4(__s1[1]) = BYTE4(v121);
                BYTE5(__s1[1]) = BYTE5(v121);
                if (!v129)
                {
LABEL_178:
                  uint64_t __s2 = v122;
                  __int16 v236 = v123;
                  char v237 = BYTE2(v123);
                  char v238 = BYTE3(v123);
                  char v239 = BYTE4(v123);
                  size_t v162 = BYTE6(v123);
                  char v240 = BYTE5(v123);
                  p_s2 = &__s2;
                  goto LABEL_179;
                }
                if (v129 == 1)
                {
                  uint64_t v133 = (v122 >> 32) - (int)v122;
                  if (v122 >> 32 < (int)v122) {
                    goto LABEL_293;
                  }
                  uint64_t v134 = sub_2505BD7D0();
                  if (!v134) {
                    goto LABEL_329;
                  }
                  uint64_t v135 = v134;
                  uint64_t v136 = sub_2505BD800();
                  uint64_t v137 = (int)v124 - v136;
                  if (__OFSUB__((int)v124, v136)) {
                    goto LABEL_298;
                  }
                  goto LABEL_175;
                }
                uint64_t v163 = *(void *)(v122 + 16);
                uint64_t v218 = *(char **)(v122 + 24);
                swift_retain();
                swift_retain();
                uint64_t v164 = (char *)sub_2505BD7D0();
                if (v164)
                {
                  uint64_t v165 = sub_2505BD800();
                  if (__OFSUB__(v163, v165)) {
                    goto LABEL_309;
                  }
                  v164 += v163 - v165;
                }
                unint64_t v166 = &v218[-v163];
                if (__OFSUB__(v218, v163)) {
                  goto LABEL_296;
                }
                uint64_t v167 = sub_2505BD7F0();
                uint64_t v25 = v228;
                if (!v164) {
                  goto LABEL_336;
                }
                goto LABEL_194;
            }
          }
          uint64_t v186 = sub_2505BDD90();
          unint64_t v188 = v187;
          uint64_t v189 = sub_2505BDD90();
          uint64_t v191 = v189;
          unint64_t v192 = v190;
          uint64_t v193 = 0;
          switch(v188 >> 62)
          {
            case 1uLL:
              LODWORD(v193) = HIDWORD(v186) - v186;
              if (__OFSUB__(HIDWORD(v186), v186)) {
                goto LABEL_269;
              }
              uint64_t v193 = (int)v193;
              break;
            case 2uLL:
              uint64_t v195 = *(void *)(v186 + 16);
              uint64_t v194 = *(void *)(v186 + 24);
              BOOL v59 = __OFSUB__(v194, v195);
              uint64_t v193 = v194 - v195;
              if (!v59) {
                break;
              }
              goto LABEL_270;
            case 3uLL:
              break;
            default:
              uint64_t v193 = BYTE6(v188);
              break;
          }
          switch(v190 >> 62)
          {
            case 1uLL:
              LODWORD(v196) = HIDWORD(v189) - v189;
              if (__OFSUB__(HIDWORD(v189), v189)) {
                goto LABEL_271;
              }
              uint64_t v196 = (int)v196;
LABEL_236:
              if (v193 != v196)
              {
LABEL_257:
                sub_250511528(v189, v190);
                sub_250511528(v186, v188);
                uint64_t v184 = v230;
                uint64_t v185 = v231;
                goto LABEL_258;
              }
              if (v193 < 1)
              {
LABEL_6:
                sub_250511528(v189, v190);
                sub_250511528(v186, v188);
                int v48 = *v225;
                (*v225)(v231, v138);
                v48(v230, v138);
                sub_25052D638((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                sub_25052D638((uint64_t)v232, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                sub_25052D638((uint64_t)v234, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                sub_25052D638(v233, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                a1 = v224;
              }
              else
              {
                switch(v188 >> 62)
                {
                  case 1uLL:
                    if (v186 >> 32 < (int)v186) {
                      goto LABEL_275;
                    }
                    sub_2504DBC4C(v186, v188);
                    uint64_t v199 = sub_2505BD7D0();
                    if (!v199) {
                      goto LABEL_244;
                    }
                    uint64_t v200 = sub_2505BD800();
                    if (__OFSUB__((int)v186, v200)) {
                      goto LABEL_282;
                    }
                    v199 += (int)v186 - v200;
LABEL_244:
                    uint64_t v25 = v228;
                    sub_2505BD7F0();
                    uint64_t v201 = v199;
                    uint64_t v202 = v221;
                    sub_250547340(v201, v191, v192, (char *)__s1);
                    uint64_t v221 = v202;
                    sub_250511528(v186, v188);
                    sub_250511528(v191, v192);
                    sub_250511528(v186, v188);
                    int v203 = LOBYTE(__s1[0]);
                    uint64_t v138 = v227;
                    break;
                  case 2uLL:
                    uint64_t v204 = *(void *)(v186 + 16);
                    uint64_t v205 = *(void *)(v186 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v206 = sub_2505BD7D0();
                    if (!v206) {
                      goto LABEL_248;
                    }
                    uint64_t v207 = sub_2505BD800();
                    if (__OFSUB__(v204, v207)) {
                      goto LABEL_281;
                    }
                    v206 += v204 - v207;
LABEL_248:
                    if (__OFSUB__(v205, v204)) {
                      goto LABEL_276;
                    }
                    sub_2505BD7F0();
                    uint64_t v208 = v206;
                    uint64_t v209 = v221;
                    sub_250547340(v208, v191, v192, (char *)__s1);
                    uint64_t v221 = v209;
                    swift_release();
                    swift_release();
                    sub_250511528(v191, v192);
                    sub_250511528(v186, v188);
                    int v203 = LOBYTE(__s1[0]);
                    uint64_t v138 = v227;
                    uint64_t v25 = v228;
                    break;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    goto LABEL_251;
                  default:
                    __s1[0] = v186;
                    LOWORD(__s1[1]) = v188;
                    BYTE2(__s1[1]) = BYTE2(v188);
                    BYTE3(__s1[1]) = BYTE3(v188);
                    BYTE4(__s1[1]) = BYTE4(v188);
                    BYTE5(__s1[1]) = BYTE5(v188);
LABEL_251:
                    uint64_t v210 = v221;
                    sub_250547340((uint64_t)__s1, v189, v190, (char *)&__s2);
                    uint64_t v221 = v210;
                    sub_250511528(v191, v192);
                    sub_250511528(v186, v188);
                    int v203 = __s2;
                    break;
                }
                char v211 = *v225;
                (*v225)(v231, v138);
                v211(v230, v138);
                sub_25052D638((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                sub_25052D638((uint64_t)v232, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                sub_25052D638((uint64_t)v234, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                sub_25052D638(v233, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
                a1 = v224;
                if (!v203) {
                  return 0;
                }
              }
              a2 = v223;
              v46 += v222;
              if (!--v45) {
                return 1;
              }
              break;
            case 2uLL:
              uint64_t v198 = *(void *)(v189 + 16);
              uint64_t v197 = *(void *)(v189 + 24);
              BOOL v59 = __OFSUB__(v197, v198);
              uint64_t v196 = v197 - v198;
              if (!v59) {
                goto LABEL_236;
              }
              goto LABEL_272;
            case 3uLL:
              if (!v193) {
                goto LABEL_6;
              }
              goto LABEL_257;
            default:
              uint64_t v196 = BYTE6(v190);
              goto LABEL_236;
          }
          continue;
        }
LABEL_256:
        sub_250511528(v122, v123);
        sub_250511528(v119, v121);
        uint64_t v138 = v227;
        char v213 = *v226;
        uint64_t v184 = v230;
        (*v226)(v230, v117, v227);
        char v214 = v118;
        uint64_t v185 = v231;
        v213(v231, (uint64_t)v214, v138);
        uint64_t v25 = v228;
LABEL_258:
        uint64_t v215 = *v225;
        (*v225)(v185, v138);
        v215(v184, v138);
        uint64_t v69 = (uint64_t)v232;
LABEL_259:
        sub_25052D638((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
        sub_25052D638(v69, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
        sub_25052D638((uint64_t)v234, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
        sub_25052D638(v233, (uint64_t (*)(void))type metadata accessor for HashAndCipher);
        return 0;
      case 2uLL:
        uint64_t v132 = *(void *)(v122 + 16);
        uint64_t v131 = *(void *)(v122 + 24);
        BOOL v59 = __OFSUB__(v131, v132);
        uint64_t v130 = v131 - v132;
        if (!v59) {
          goto LABEL_128;
        }
        goto LABEL_268;
      case 3uLL:
        if (!v126) {
          goto LABEL_139;
        }
        goto LABEL_256;
      default:
        uint64_t v130 = BYTE6(v123);
        goto LABEL_128;
    }
  }
}

uint64_t sub_250547340@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_2504DBC4C(a2, a3);
      uint64_t v10 = (char *)sub_2505BD7D0();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_2505BD800();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_2505BD7F0();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x2505475A4);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      uint64_t __s1 = sub_250511528(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)sub_2505BD7D0();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_2505BD800();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_2505BD7F0();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      uint64_t __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        uint64_t __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_2505475B4@<X0>(uint64_t __s2@<X0>, void *__s1@<X2>, uint64_t a3@<X1>, BOOL *a4@<X8>)
{
  if (__s1)
  {
    if (__s2)
    {
      uint64_t __s2 = memcmp(__s1, (const void *)__s2, a3 - __s2);
      *a4 = __s2 == 0;
      return __s2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return __s2;
}

uint64_t sub_250547610(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = sub_2505BD7D0();
  BOOL v8 = (char *)result;
  if (result)
  {
    uint64_t result = sub_2505BD800();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = sub_2505BD7F0();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

BOOL sub_2505476B0(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t __s2 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  if (!__s1) {
    __break(1u);
  }
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

uint64_t sub_250547794(uint64_t a1, unint64_t a2, void *__s1)
{
  uint64_t v7 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
        JUMPOUT(0x2505478C0);
      }
      swift_retain();
      char v4 = sub_250547610((int)v7, v7 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, __s1);
      sub_250511528(v7, a2);
      break;
    case 2uLL:
      uint64_t v9 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v4 = sub_250547610(v10, v11, v9, __s1);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      a1 = 0;
      uint64_t v8 = 0;
      goto LABEL_7;
    default:
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFFFLL;
LABEL_7:
      BOOL v12 = sub_2505476B0(a1, v8, __s1);
      if (!v3) {
        char v4 = v12;
      }
      break;
  }
  return v4 & 1;
}

uint64_t sub_2505478D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  BOOL v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v26 - v17;
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || (sub_25051AAD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v20 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v19 = v19 != 0;
  }
  if (*(unsigned char *)(a2 + 32) != 1)
  {
    if (v19 == v20) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  if (!v20)
  {
    if (!v19) {
      goto LABEL_12;
    }
LABEL_16:
    char v23 = 0;
    return v23 & 1;
  }
  if (v19 != 1) {
    goto LABEL_16;
  }
LABEL_12:
  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)
    || (sub_25051AAD8(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) == 0
    || (sub_25051AAD8(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a2 + 56), *(void *)(a2 + 64)) & 1) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v21 = type metadata accessor for GKCrypto_SeedBlobRequest(0);
  size_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v22(v18, a1 + *(int *)(v21 + 40), v4);
  v22(v12, a2 + *(int *)(v21 + 40), v4);
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v23 = sub_2505BE120();
  char v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v12, v4);
  v24(v18, v4);
  return v23 & 1;
}

uint64_t sub_250547B10(uint64_t a1, uint64_t a2)
{
  uint64_t v125 = a2;
  uint64_t v114 = sub_2505BDA50();
  uint64_t v112 = *(void *)(v114 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v114, v3, v4, v5, v6);
  unint64_t v111 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7, v9, v10, v11, v12);
  uint64_t v110 = (char *)&v110 - v13;
  uint64_t v120 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v117 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120, v14, v15, v16, v17);
  uint64_t v113 = (uint64_t)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6558);
  MEMORY[0x270FA5388](v116, v19, v20, v21, v22);
  uint64_t v121 = (uint64_t)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
  uint64_t v29 = MEMORY[0x270FA5388](v24 - 8, v25, v26, v27, v28);
  uint64_t v115 = (uint64_t)&v110 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v29, v31, v32, v33, v34);
  uint64_t v118 = (uint64_t)&v110 - v36;
  MEMORY[0x270FA5388](v35, v37, v38, v39, v40);
  uint64_t v119 = (uint64_t)&v110 - v41;
  uint64_t v42 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v43 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42, v44, v45, v46, v47);
  uint64_t v49 = (char *)&v110 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6518);
  uint64_t v51 = v50 - 8;
  MEMORY[0x270FA5388](v50, v52, v53, v54, v55);
  uint64_t v57 = (char *)&v110 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  uint64_t v63 = MEMORY[0x270FA5388](v58 - 8, v59, v60, v61, v62);
  uint64_t v124 = (uint64_t)&v110 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = MEMORY[0x270FA5388](v63, v65, v66, v67, v68);
  uint64_t v71 = (char *)&v110 - v70;
  MEMORY[0x270FA5388](v69, v72, v73, v74, v75);
  uint64_t v77 = (char *)&v110 - v76;
  uint64_t v78 = type metadata accessor for GKCrypto_AdminPlainText(0);
  uint64_t v79 = *(int *)(v78 + 24);
  uint64_t v122 = a1;
  sub_2504DAEFC(a1 + v79, (uint64_t)v77, &qword_269AB5EC0);
  uint64_t v123 = v78;
  sub_2504DAEFC(v125 + *(int *)(v78 + 24), (uint64_t)v71, &qword_269AB5EC0);
  uint64_t v80 = (uint64_t)&v57[*(int *)(v51 + 56)];
  sub_2504DAEFC((uint64_t)v77, (uint64_t)v57, &qword_269AB5EC0);
  sub_2504DAEFC((uint64_t)v71, v80, &qword_269AB5EC0);
  int v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (v81((uint64_t)v57, 1, v42) == 1)
  {
    sub_2504DAF60((uint64_t)v71, &qword_269AB5EC0);
    sub_2504DAF60((uint64_t)v77, &qword_269AB5EC0);
    if (v81(v80, 1, v42) == 1)
    {
      sub_2504DAF60((uint64_t)v57, &qword_269AB5EC0);
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v92 = &qword_269AB6518;
    uint64_t v93 = (uint64_t)v57;
LABEL_19:
    sub_2504DAF60(v93, v92);
    goto LABEL_20;
  }
  uint64_t v91 = v124;
  sub_2504DAEFC((uint64_t)v57, v124, &qword_269AB5EC0);
  if (v81(v80, 1, v42) == 1)
  {
    sub_2504DAF60((uint64_t)v71, &qword_269AB5EC0);
    sub_2504DAF60((uint64_t)v77, &qword_269AB5EC0);
    sub_25052D638(v91, type metadata accessor for GKCrypto_VersionedSeed);
    goto LABEL_9;
  }
  sub_250549DC8(v80, (uint64_t)v49, type metadata accessor for GKCrypto_VersionedSeed);
  if (*(_DWORD *)v91 != *(_DWORD *)v49
    || (sub_25051AAD8(*(void *)(v91 + 8), *(void *)(v91 + 16), *((void *)v49 + 1), *((void *)v49 + 2)) & 1) == 0)
  {
    sub_25052D638((uint64_t)v49, type metadata accessor for GKCrypto_VersionedSeed);
    uint64_t v95 = &qword_269AB5EC0;
    sub_2504DAF60((uint64_t)v71, &qword_269AB5EC0);
    sub_2504DAF60((uint64_t)v77, &qword_269AB5EC0);
    sub_25052D638(v91, type metadata accessor for GKCrypto_VersionedSeed);
    uint64_t v93 = (uint64_t)v57;
LABEL_15:
    uint64_t v92 = v95;
    goto LABEL_19;
  }
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v94 = sub_2505BE120();
  sub_25052D638((uint64_t)v49, type metadata accessor for GKCrypto_VersionedSeed);
  sub_2504DAF60((uint64_t)v71, &qword_269AB5EC0);
  sub_2504DAF60((uint64_t)v77, &qword_269AB5EC0);
  sub_25052D638(v91, type metadata accessor for GKCrypto_VersionedSeed);
  sub_2504DAF60((uint64_t)v57, &qword_269AB5EC0);
  if ((v94 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_4:
  uint64_t v83 = v122;
  uint64_t v82 = v123;
  uint64_t v84 = v119;
  sub_2504DAEFC(v122 + *(int *)(v123 + 28), v119, &qword_269AB5F18);
  uint64_t v85 = v125;
  uint64_t v86 = v118;
  sub_2504DAEFC(v125 + *(int *)(v82 + 28), v118, &qword_269AB5F18);
  uint64_t v87 = v121;
  uint64_t v88 = v121 + *(int *)(v116 + 48);
  sub_2504DAEFC(v84, v121, &qword_269AB5F18);
  sub_2504DAEFC(v86, v88, &qword_269AB5F18);
  uint64_t v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  uint64_t v90 = v120;
  if (v89(v87, 1, v120) != 1)
  {
    uint64_t v96 = v115;
    sub_2504DAEFC(v87, v115, &qword_269AB5F18);
    if (v89(v88, 1, v90) == 1)
    {
      sub_2504DAF60(v86, &qword_269AB5F18);
      sub_2504DAF60(v84, &qword_269AB5F18);
      sub_25052D638(v96, type metadata accessor for GKCrypto_AdminMetaData);
      goto LABEL_18;
    }
    uint64_t v99 = v113;
    sub_250549DC8(v88, v113, type metadata accessor for GKCrypto_AdminMetaData);
    if (sub_25051AAD8(*(void *)v96, *(void *)(v96 + 8), *(void *)v99, *(void *)(v99 + 8)))
    {
      sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
      char v100 = sub_2505BE120();
      sub_25052D638(v99, type metadata accessor for GKCrypto_AdminMetaData);
      sub_2504DAF60(v86, &qword_269AB5F18);
      sub_2504DAF60(v84, &qword_269AB5F18);
      sub_25052D638(v96, type metadata accessor for GKCrypto_AdminMetaData);
      sub_2504DAF60(v87, &qword_269AB5F18);
      if ((v100 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_24;
    }
    sub_25052D638(v99, type metadata accessor for GKCrypto_AdminMetaData);
    uint64_t v95 = &qword_269AB5F18;
    sub_2504DAF60(v86, &qword_269AB5F18);
    sub_2504DAF60(v84, &qword_269AB5F18);
    sub_25052D638(v96, type metadata accessor for GKCrypto_AdminMetaData);
    uint64_t v93 = v87;
    goto LABEL_15;
  }
  sub_2504DAF60(v86, &qword_269AB5F18);
  sub_2504DAF60(v84, &qword_269AB5F18);
  if (v89(v88, 1, v90) != 1)
  {
LABEL_18:
    uint64_t v92 = &qword_269AB6558;
    uint64_t v93 = v87;
    goto LABEL_19;
  }
  sub_2504DAF60(v87, &qword_269AB5F18);
LABEL_24:
  if (sub_25051AAD8(*(void *)v83, *(void *)(v83 + 8), *(void *)v85, *(void *)(v85 + 8)))
  {
    uint64_t v101 = v123;
    uint64_t v102 = v83 + *(int *)(v123 + 20);
    uint64_t v103 = v112;
    uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t))(v112 + 16);
    uint64_t v105 = v110;
    uint64_t v106 = v114;
    v104(v110, v102, v114);
    uint64_t v107 = v85 + *(int *)(v101 + 20);
    size_t v108 = v111;
    v104(v111, v107, v106);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v97 = sub_2505BE120();
    uint64_t v109 = *(void (**)(char *, uint64_t))(v103 + 8);
    v109(v108, v106);
    v109(v105, v106);
    return v97 & 1;
  }
LABEL_20:
  char v97 = 0;
  return v97 & 1;
}

uint64_t sub_250548500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_25051AAD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) != 0)
  {
    uint64_t v19 = type metadata accessor for GKCrypto_VersionedSeed(0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v18, a1 + *(int *)(v19 + 24), v4);
    v20(v12, a2 + *(int *)(v19 + 24), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v12, v4);
    v22(v18, v4);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_2505486C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if (sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v19 = type metadata accessor for GKCrypto_AdminMetaData(0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v18, a1 + *(int *)(v19 + 20), v4);
    v20(v12, a2 + *(int *)(v19 + 20), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v12, v4);
    v22(v18, v4);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_250548880(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  uint64_t v9 = MEMORY[0x270FA5388](v4, v5, v6, v7, v8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = type metadata accessor for GKCrypto_Invite(0);
  uint64_t v79 = *(void *)(v18 - 8);
  uint64_t v80 = v18;
  MEMORY[0x270FA5388](v18, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6578);
  MEMORY[0x270FA5388](v25, v26, v27, v28, v29);
  uint64_t v31 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6570);
  uint64_t v37 = MEMORY[0x270FA5388](v32 - 8, v33, v34, v35, v36);
  uint64_t v42 = MEMORY[0x270FA5388](v37, v38, v39, v40, v41);
  uint64_t v44 = (char *)&v71 - v43;
  MEMORY[0x270FA5388](v42, v45, v46, v47, v48);
  uint64_t v51 = (char *)&v71 - v50;
  if (*a1 != *a2) {
    goto LABEL_11;
  }
  uint64_t v52 = a1;
  uint64_t v75 = v24;
  uint64_t v76 = v49;
  uint64_t v73 = v17;
  uint64_t v74 = v11;
  uint64_t v53 = type metadata accessor for GKCrypto_SignedInvite(0);
  sub_2504DAEFC((uint64_t)a1 + *(int *)(v53 + 28), (uint64_t)v51, &qword_269AB6570);
  uint64_t v72 = v53;
  uint64_t v54 = a2;
  sub_2504DAEFC((uint64_t)a2 + *(int *)(v53 + 28), (uint64_t)v44, &qword_269AB6570);
  uint64_t v55 = (uint64_t)&v31[*(int *)(v25 + 48)];
  sub_2504DAEFC((uint64_t)v51, (uint64_t)v31, &qword_269AB6570);
  sub_2504DAEFC((uint64_t)v44, v55, &qword_269AB6570);
  uint64_t v56 = v80;
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  if (v57((uint64_t)v31, 1, v80) == 1)
  {
    sub_2504DAF60((uint64_t)v44, &qword_269AB6570);
    sub_2504DAF60((uint64_t)v51, &qword_269AB6570);
    if (v57(v55, 1, v56) == 1)
    {
      sub_2504DAF60((uint64_t)v31, &qword_269AB6570);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v58 = v76;
  sub_2504DAEFC((uint64_t)v31, v76, &qword_269AB6570);
  if (v57(v55, 1, v56) == 1)
  {
    sub_2504DAF60((uint64_t)v44, &qword_269AB6570);
    sub_2504DAF60((uint64_t)v51, &qword_269AB6570);
    sub_25052D638(v58, type metadata accessor for GKCrypto_Invite);
LABEL_7:
    sub_2504DAF60((uint64_t)v31, &qword_269AB6578);
LABEL_11:
    char v68 = 0;
    return v68 & 1;
  }
  uint64_t v59 = (uint64_t)v75;
  sub_250549DC8(v55, (uint64_t)v75, type metadata accessor for GKCrypto_Invite);
  char v60 = sub_25054973C(v58, v59);
  sub_25052D638(v59, type metadata accessor for GKCrypto_Invite);
  sub_2504DAF60((uint64_t)v44, &qword_269AB6570);
  sub_2504DAF60((uint64_t)v51, &qword_269AB6570);
  sub_25052D638(v58, type metadata accessor for GKCrypto_Invite);
  sub_2504DAF60((uint64_t)v31, &qword_269AB6570);
  if ((v60 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  if ((sub_25051AAD8(*((void *)v52 + 1), *((void *)v52 + 2), *((void *)v54 + 1), *((void *)v54 + 2)) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v61 = v72;
  uint64_t v62 = v73;
  uint64_t v64 = v77;
  uint64_t v63 = v78;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v65(v73, (char *)v52 + *(int *)(v72 + 24), v78);
  uint64_t v66 = (char *)v54 + *(int *)(v61 + 24);
  uint64_t v67 = v74;
  v65(v74, v66, v63);
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v68 = sub_2505BE120();
  uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
  v69(v67, v63);
  v69(v62, v63);
  return v68 & 1;
}

uint64_t sub_250548DB4(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  uint64_t v9 = MEMORY[0x270FA5388](v4, v5, v6, v7, v8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v79 = *(void *)(v18 - 8);
  uint64_t v80 = v18;
  MEMORY[0x270FA5388](v18, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6590);
  MEMORY[0x270FA5388](v25, v26, v27, v28, v29);
  uint64_t v31 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AB8);
  uint64_t v37 = MEMORY[0x270FA5388](v32 - 8, v33, v34, v35, v36);
  uint64_t v42 = MEMORY[0x270FA5388](v37, v38, v39, v40, v41);
  uint64_t v44 = (char *)&v71 - v43;
  MEMORY[0x270FA5388](v42, v45, v46, v47, v48);
  uint64_t v51 = (char *)&v71 - v50;
  if (*a1 != *a2) {
    goto LABEL_11;
  }
  uint64_t v52 = a1;
  uint64_t v75 = v24;
  uint64_t v76 = v49;
  uint64_t v73 = v17;
  uint64_t v74 = v11;
  uint64_t v53 = type metadata accessor for GKCrypto_SignedRSVP(0);
  sub_2504DAEFC((uint64_t)a1 + *(int *)(v53 + 28), (uint64_t)v51, &qword_269AB5AB8);
  uint64_t v72 = v53;
  uint64_t v54 = a2;
  sub_2504DAEFC((uint64_t)a2 + *(int *)(v53 + 28), (uint64_t)v44, &qword_269AB5AB8);
  uint64_t v55 = (uint64_t)&v31[*(int *)(v25 + 48)];
  sub_2504DAEFC((uint64_t)v51, (uint64_t)v31, &qword_269AB5AB8);
  sub_2504DAEFC((uint64_t)v44, v55, &qword_269AB5AB8);
  uint64_t v56 = v80;
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  if (v57((uint64_t)v31, 1, v80) == 1)
  {
    sub_2504DAF60((uint64_t)v44, &qword_269AB5AB8);
    sub_2504DAF60((uint64_t)v51, &qword_269AB5AB8);
    if (v57(v55, 1, v56) == 1)
    {
      sub_2504DAF60((uint64_t)v31, &qword_269AB5AB8);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v58 = v76;
  sub_2504DAEFC((uint64_t)v31, v76, &qword_269AB5AB8);
  if (v57(v55, 1, v56) == 1)
  {
    sub_2504DAF60((uint64_t)v44, &qword_269AB5AB8);
    sub_2504DAF60((uint64_t)v51, &qword_269AB5AB8);
    sub_25052D638(v58, type metadata accessor for GKCrypto_RSVP);
LABEL_7:
    sub_2504DAF60((uint64_t)v31, &qword_269AB6590);
LABEL_11:
    char v68 = 0;
    return v68 & 1;
  }
  uint64_t v59 = (uint64_t)v75;
  sub_250549DC8(v55, (uint64_t)v75, type metadata accessor for GKCrypto_RSVP);
  char v60 = sub_250549974(v58, v59);
  sub_25052D638(v59, type metadata accessor for GKCrypto_RSVP);
  sub_2504DAF60((uint64_t)v44, &qword_269AB5AB8);
  sub_2504DAF60((uint64_t)v51, &qword_269AB5AB8);
  sub_25052D638(v58, type metadata accessor for GKCrypto_RSVP);
  sub_2504DAF60((uint64_t)v31, &qword_269AB5AB8);
  if ((v60 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  if ((sub_25051AAD8(*((void *)v52 + 1), *((void *)v52 + 2), *((void *)v54 + 1), *((void *)v54 + 2)) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v61 = v72;
  uint64_t v62 = v73;
  uint64_t v64 = v77;
  uint64_t v63 = v78;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v65(v73, (char *)v52 + *(int *)(v72 + 24), v78);
  uint64_t v66 = (char *)v54 + *(int *)(v61 + 24);
  uint64_t v67 = v74;
  v65(v74, v66, v63);
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v68 = sub_2505BE120();
  uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
  v69(v67, v63);
  v69(v62, v63);
  return v68 & 1;
}

uint64_t sub_2505492E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_25051AAD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a2 + 56), *(void *)(a2 + 64)) & 1) != 0
    && (sub_250540D9C(*(void *)(a1 + 72), *(void *)(a2 + 72)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a2 + 80), *(void *)(a2 + 88)) & 1) != 0)
  {
    uint64_t v19 = type metadata accessor for GKCrypto_UserKeys(0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v18, a1 + *(int *)(v19 + 44), v4);
    v20(v12, a2 + *(int *)(v19 + 44), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v12, v4);
    v22(v18, v4);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_250549500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v26 - v17;
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || (sub_25051AAD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) == 0
    || (sub_25051AAD8(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) == 0
    || (sub_25051AAD8(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) == 0
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
  {
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a2 + 64);
  if (*(unsigned char *)(a1 + 72)) {
    uint64_t v19 = v19 != 0;
  }
  if (*(unsigned char *)(a2 + 72) != 1)
  {
    if (v19 != v20) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v23 = type metadata accessor for GKCrypto_SeedBlob(0);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v24(v18, a1 + *(int *)(v23 + 40), v4);
    v24(v12, a2 + *(int *)(v23 + 40), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v12, v4);
    v25(v18, v4);
    return v21 & 1;
  }
  if (!v20)
  {
    if (v19) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  if (v19 == 1) {
    goto LABEL_14;
  }
LABEL_11:
  char v21 = 0;
  return v21 & 1;
}

uint64_t sub_25054973C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if ((sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 48), *(void *)(a2 + 56)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a2 + 64), *(void *)(a2 + 72)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a2 + 80), *(void *)(a2 + 88)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a2 + 96), *(void *)(a2 + 104)) & 1) != 0
    && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
    && (sub_25051AAD8(*(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a2 + 120), *(void *)(a2 + 128)) & 1) != 0)
  {
    uint64_t v19 = type metadata accessor for GKCrypto_Invite(0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v18, a1 + *(int *)(v19 + 52), v4);
    v20(v12, a2 + *(int *)(v19 + 52), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v12, v4);
    v22(v18, v4);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_250549974(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v26 - v17;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16) == 1)
  {
    switch(v20)
    {
      case 1:
        if (v19 != 1) {
          goto LABEL_20;
        }
        goto LABEL_7;
      case 2:
        if (v19 != 2) {
          goto LABEL_20;
        }
        goto LABEL_7;
      case 3:
        if (v19 != 3) {
          goto LABEL_20;
        }
        goto LABEL_7;
      case 4:
        if (v19 != 4) {
          goto LABEL_20;
        }
        goto LABEL_7;
      case 5:
        if (v19 != 5) {
          goto LABEL_20;
        }
        goto LABEL_7;
      default:
        if (!v19) {
          goto LABEL_7;
        }
        goto LABEL_20;
    }
  }
  if (v19 != v20) {
    goto LABEL_20;
  }
LABEL_7:
  if ((sub_25051AAD8(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) == 0
    || (sub_25051AAD8(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) == 0
    || (sub_25051AAD8(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a2 + 56), *(void *)(a2 + 64)) & 1) == 0)
  {
LABEL_20:
    char v23 = 0;
    return v23 & 1;
  }
  uint64_t v21 = type metadata accessor for GKCrypto_RSVP(0);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v22(v18, a1 + *(int *)(v21 + 36), v4);
  v22(v12, a2 + *(int *)(v21 + 36), v4);
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v23 = sub_2505BE120();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v12, v4);
  v24(v18, v4);
  return v23 & 1;
}

uint64_t sub_250549BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if ((sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0
    && (sub_250541FB4(*(void *)(a1 + 32), *(void *)(a2 + 32)) & 1) != 0)
  {
    uint64_t v19 = type metadata accessor for GKCrypto_GroupHandle(0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v18, a1 + *(int *)(v19 + 28), v4);
    v20(v12, a2 + *(int *)(v19 + 28), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v12, v4);
    v22(v18, v4);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_250549DC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_250549E30(uint64_t a1, uint64_t a2)
{
  uint64_t v184 = a2;
  uint64_t v185 = a1;
  uint64_t v178 = sub_2505BDA50();
  uint64_t v171 = *(void *)(v178 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v178, v2, v3, v4, v5);
  size_t v170 = (char *)&v157 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6, v8, v9, v10, v11);
  uint64_t v169 = (char *)&v157 - v12;
  uint64_t v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v175 = v13;
  uint64_t v176 = v14;
  MEMORY[0x270FA5388](v13, v15, v16, v17, v18);
  unint64_t v180 = (char *)&v157 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB64C0);
  MEMORY[0x270FA5388](v174, v20, v21, v22, v23);
  uint64_t v177 = (uint64_t)&v157 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC8);
  uint64_t v30 = MEMORY[0x270FA5388](v25 - 8, v26, v27, v28, v29);
  uint64_t v172 = (uint64_t)&v157 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x270FA5388](v30, v32, v33, v34, v35);
  uint64_t v179 = (uint64_t)&v157 - v37;
  MEMORY[0x270FA5388](v36, v38, v39, v40, v41);
  uint64_t v183 = (uint64_t)&v157 - v42;
  uint64_t v43 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  uint64_t v181 = *(void *)(v43 - 8);
  uint64_t v182 = v43;
  MEMORY[0x270FA5388](v43, v44, v45, v46, v47);
  uint64_t v173 = (uint64_t)&v157 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB64C8);
  MEMORY[0x270FA5388](v49, v50, v51, v52, v53);
  uint64_t v55 = (char *)&v157 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CC0);
  uint64_t v61 = MEMORY[0x270FA5388](v56 - 8, v57, v58, v59, v60);
  uint64_t v63 = (char *)&v157 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = MEMORY[0x270FA5388](v61, v64, v65, v66, v67);
  uint64_t v70 = (char *)&v157 - v69;
  MEMORY[0x270FA5388](v68, v71, v72, v73, v74);
  uint64_t v76 = (char *)&v157 - v75;
  uint64_t v77 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  uint64_t v78 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77, v79, v80, v81, v82);
  uint64_t v84 = (uint64_t *)((char *)&v157 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB64D0);
  MEMORY[0x270FA5388](v85, v86, v87, v88, v89);
  uint64_t v91 = (char *)&v157 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5CB8);
  uint64_t v97 = MEMORY[0x270FA5388](v92 - 8, v93, v94, v95, v96);
  uint64_t v102 = MEMORY[0x270FA5388](v97, v98, v99, v100, v101);
  MEMORY[0x270FA5388](v102, v103, v104, v105, v106);
  uint64_t v110 = (char *)&v157 - v109;
  if (*(_DWORD *)v185 != *(_DWORD *)v184) {
    goto LABEL_27;
  }
  uint64_t v165 = v78;
  uint64_t v167 = v108;
  uint64_t v168 = v110;
  uint64_t v159 = v84;
  uint64_t v164 = (uint64_t *)v107;
  unint64_t v166 = v91;
  uint64_t v160 = v49;
  size_t v162 = v70;
  uint64_t v163 = v76;
  uint64_t v158 = v63;
  uint64_t v161 = v55;
  uint64_t v111 = v185;
  uint64_t v112 = v184;
  if ((sub_25051AAD8(*(void *)(v185 + 8), *(void *)(v185 + 16), *(void *)(v184 + 8), *(void *)(v184 + 16)) & 1) == 0
    || (sub_25051AAD8(*(void *)(v111 + 24), *(void *)(v111 + 32), *(void *)(v112 + 24), *(void *)(v112 + 32)) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v113 = type metadata accessor for GKCrypto_GroupBlob(0);
  uint64_t v114 = (uint64_t)v168;
  sub_2504DAEFC(v111 + *(int *)(v113 + 32), (uint64_t)v168, &qword_269AB5CB8);
  uint64_t v157 = v113;
  uint64_t v115 = v112 + *(int *)(v113 + 32);
  uint64_t v116 = v167;
  sub_2504DAEFC(v115, v167, &qword_269AB5CB8);
  uint64_t v117 = (uint64_t)v166;
  uint64_t v118 = (uint64_t)&v166[*(int *)(v85 + 48)];
  sub_2504DAEFC(v114, (uint64_t)v166, &qword_269AB5CB8);
  sub_2504DAEFC(v116, v118, &qword_269AB5CB8);
  uint64_t v119 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 + 48);
  if (v119(v117, 1, v77) == 1)
  {
    sub_2504DAF60(v116, &qword_269AB5CB8);
    sub_2504DAF60(v114, &qword_269AB5CB8);
    if (v119(v118, 1, v77) == 1)
    {
      sub_2504DAF60(v117, &qword_269AB5CB8);
      uint64_t v120 = v157;
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v122 = &qword_269AB64D0;
    uint64_t v123 = v117;
LABEL_26:
    sub_2504DAF60(v123, v122);
    goto LABEL_27;
  }
  uint64_t v121 = v164;
  sub_2504DAEFC(v117, (uint64_t)v164, &qword_269AB5CB8);
  if (v119(v118, 1, v77) == 1)
  {
    sub_2504DAF60(v167, &qword_269AB5CB8);
    sub_2504DAF60((uint64_t)v168, &qword_269AB5CB8);
    sub_25052D638((uint64_t)v121, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    goto LABEL_9;
  }
  uint64_t v124 = v159;
  sub_250549DC8(v118, (uint64_t)v159, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  if ((sub_250543870(*v121, *v124) & 1) == 0)
  {
    sub_25052D638((uint64_t)v124, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_2504DAF60(v167, &qword_269AB5CB8);
    sub_2504DAF60((uint64_t)v168, &qword_269AB5CB8);
    sub_25052D638((uint64_t)v121, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    uint64_t v123 = v117;
    uint64_t v122 = &qword_269AB5CB8;
    goto LABEL_26;
  }
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v125 = sub_2505BE120();
  sub_25052D638((uint64_t)v124, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_2504DAF60(v167, &qword_269AB5CB8);
  sub_2504DAF60((uint64_t)v168, &qword_269AB5CB8);
  sub_25052D638((uint64_t)v121, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  uint64_t v120 = v157;
  sub_2504DAF60(v117, &qword_269AB5CB8);
  if ((v125 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  uint64_t v126 = (uint64_t)v163;
  sub_2504DAEFC(v111 + *(int *)(v120 + 36), (uint64_t)v163, &qword_269AB5CC0);
  uint64_t v127 = (uint64_t)v162;
  sub_2504DAEFC(v112 + *(int *)(v120 + 36), (uint64_t)v162, &qword_269AB5CC0);
  uint64_t v128 = (uint64_t)v161;
  uint64_t v129 = (uint64_t)&v161[*(int *)(v160 + 48)];
  sub_2504DAEFC(v126, (uint64_t)v161, &qword_269AB5CC0);
  sub_2504DAEFC(v127, v129, &qword_269AB5CC0);
  uint64_t v130 = v182;
  uint64_t v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  if (v131(v128, 1, v182) != 1)
  {
    uint64_t v135 = (uint64_t)v158;
    sub_2504DAEFC(v128, (uint64_t)v158, &qword_269AB5CC0);
    int v136 = v131(v129, 1, v130);
    uint64_t v133 = (uint64_t)v180;
    uint64_t v134 = v183;
    if (v136 != 1)
    {
      uint64_t v137 = v173;
      sub_250549DC8(v129, v173, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      char v138 = sub_25054AF3C(v135, v137, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      sub_25052D638(v137, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      sub_2504DAF60((uint64_t)v162, &qword_269AB5CC0);
      sub_2504DAF60((uint64_t)v163, &qword_269AB5CC0);
      sub_25052D638(v135, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      sub_2504DAF60(v128, &qword_269AB5CC0);
      if ((v138 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
    sub_2504DAF60((uint64_t)v162, &qword_269AB5CC0);
    sub_2504DAF60((uint64_t)v163, &qword_269AB5CC0);
    sub_25052D638(v135, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
    goto LABEL_17;
  }
  sub_2504DAF60(v127, &qword_269AB5CC0);
  sub_2504DAF60(v126, &qword_269AB5CC0);
  int v132 = v131(v129, 1, v130);
  uint64_t v133 = (uint64_t)v180;
  uint64_t v134 = v183;
  if (v132 != 1)
  {
LABEL_17:
    uint64_t v122 = &qword_269AB64C8;
    uint64_t v123 = v128;
    goto LABEL_26;
  }
  sub_2504DAF60(v128, &qword_269AB5CC0);
LABEL_20:
  uint64_t v139 = v157;
  sub_2504DAEFC(v185 + *(int *)(v157 + 40), v134, &qword_269AB5CC8);
  uint64_t v140 = v179;
  sub_2504DAEFC(v184 + *(int *)(v139 + 40), v179, &qword_269AB5CC8);
  uint64_t v141 = v177;
  uint64_t v142 = v177 + *(int *)(v174 + 48);
  sub_2504DAEFC(v134, v177, &qword_269AB5CC8);
  sub_2504DAEFC(v140, v142, &qword_269AB5CC8);
  uint64_t v143 = v175;
  int64_t v144 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48);
  if (v144(v141, 1, v175) == 1)
  {
    sub_2504DAF60(v140, &qword_269AB5CC8);
    sub_2504DAF60(v134, &qword_269AB5CC8);
    if (v144(v142, 1, v143) == 1)
    {
      sub_2504DAF60(v141, &qword_269AB5CC8);
LABEL_30:
      uint64_t v149 = v157;
      uint64_t v150 = v171;
      uint64_t v151 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 16);
      uint64_t v152 = v169;
      uint64_t v153 = v178;
      v151(v169, v185 + *(int *)(v157 + 28), v178);
      uint64_t v154 = v184 + *(int *)(v149 + 28);
      uint64_t v155 = v170;
      v151(v170, v154, v153);
      sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
      char v146 = sub_2505BE120();
      uint64_t v156 = *(void (**)(char *, uint64_t))(v150 + 8);
      v156(v155, v153);
      v156(v152, v153);
      return v146 & 1;
    }
    goto LABEL_25;
  }
  uint64_t v145 = v172;
  sub_2504DAEFC(v141, v172, &qword_269AB5CC8);
  if (v144(v142, 1, v143) == 1)
  {
    sub_2504DAF60(v179, &qword_269AB5CC8);
    sub_2504DAF60(v183, &qword_269AB5CC8);
    sub_25052D638(v145, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
LABEL_25:
    uint64_t v122 = &qword_269AB64C0;
    uint64_t v123 = v141;
    goto LABEL_26;
  }
  sub_250549DC8(v142, v133, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  char v148 = sub_25054AD64(v145, v133);
  sub_25052D638(v133, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  sub_2504DAF60(v179, &qword_269AB5CC8);
  sub_2504DAF60(v183, &qword_269AB5CC8);
  sub_25052D638(v145, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  sub_2504DAF60(v141, &qword_269AB5CC8);
  if (v148) {
    goto LABEL_30;
  }
LABEL_27:
  char v146 = 0;
  return v146 & 1;
}

uint64_t sub_25054ABAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if (sub_250543870(*a1, *a2))
  {
    uint64_t v19 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v20(v18, (char *)a1 + *(int *)(v19 + 20), v4);
    v20(v12, (char *)a2 + *(int *)(v19 + 20), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v12, v4);
    v22(v18, v4);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_25054AD64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if ((sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) != 0)
  {
    uint64_t v19 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v18, a1 + *(int *)(v19 + 28), v4);
    v20(v12, a2 + *(int *)(v19 + 28), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v12, v4);
    v22(v18, v4);
  }
  else
  {
    char v21 = 0;
  }
  return v21 & 1;
}

uint64_t sub_25054AF3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_2505BDA50();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v6, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v26 - v19;
  if ((sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 48), *(void *)(a2 + 56)) & 1) != 0)
  {
    uint64_t v21 = a3(0);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v22(v20, a1 + *(int *)(v21 + 32), v6);
    v22(v14, a2 + *(int *)(v21 + 32), v6);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v23 = sub_2505BE120();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v14, v6);
    v24(v20, v6);
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_25054B12C(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v77 = *(void *)(v4 - 8);
  uint64_t v78 = v4;
  uint64_t v9 = MEMORY[0x270FA5388](v4, v5, v6, v7, v8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  uint64_t v79 = *(void *)(v18 - 8);
  uint64_t v80 = v18;
  MEMORY[0x270FA5388](v18, v19, v20, v21, v22);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65C0);
  MEMORY[0x270FA5388](v25, v26, v27, v28, v29);
  uint64_t v31 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65B8);
  uint64_t v37 = MEMORY[0x270FA5388](v32 - 8, v33, v34, v35, v36);
  uint64_t v42 = MEMORY[0x270FA5388](v37, v38, v39, v40, v41);
  uint64_t v44 = (char *)&v71 - v43;
  MEMORY[0x270FA5388](v42, v45, v46, v47, v48);
  uint64_t v51 = (char *)&v71 - v50;
  if (*a1 != *a2) {
    goto LABEL_11;
  }
  uint64_t v52 = a1;
  uint64_t v75 = v24;
  uint64_t v76 = v49;
  uint64_t v73 = v17;
  uint64_t v74 = v11;
  uint64_t v53 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext(0);
  sub_2504DAEFC((uint64_t)a1 + *(int *)(v53 + 28), (uint64_t)v51, &qword_269AB65B8);
  uint64_t v72 = v53;
  uint64_t v54 = a2;
  sub_2504DAEFC((uint64_t)a2 + *(int *)(v53 + 28), (uint64_t)v44, &qword_269AB65B8);
  uint64_t v55 = (uint64_t)&v31[*(int *)(v25 + 48)];
  sub_2504DAEFC((uint64_t)v51, (uint64_t)v31, &qword_269AB65B8);
  sub_2504DAEFC((uint64_t)v44, v55, &qword_269AB65B8);
  uint64_t v56 = v80;
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  if (v57((uint64_t)v31, 1, v80) == 1)
  {
    sub_2504DAF60((uint64_t)v44, &qword_269AB65B8);
    sub_2504DAF60((uint64_t)v51, &qword_269AB65B8);
    if (v57(v55, 1, v56) == 1)
    {
      sub_2504DAF60((uint64_t)v31, &qword_269AB65B8);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  uint64_t v58 = v76;
  sub_2504DAEFC((uint64_t)v31, v76, &qword_269AB65B8);
  if (v57(v55, 1, v56) == 1)
  {
    sub_2504DAF60((uint64_t)v44, &qword_269AB65B8);
    sub_2504DAF60((uint64_t)v51, &qword_269AB65B8);
    sub_25052D638(v58, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
LABEL_7:
    sub_2504DAF60((uint64_t)v31, &qword_269AB65C0);
LABEL_11:
    char v68 = 0;
    return v68 & 1;
  }
  uint64_t v59 = (uint64_t)v75;
  sub_250549DC8(v55, (uint64_t)v75, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  char v60 = sub_25054B660(v58, v59);
  sub_25052D638(v59, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  sub_2504DAF60((uint64_t)v44, &qword_269AB65B8);
  sub_2504DAF60((uint64_t)v51, &qword_269AB65B8);
  sub_25052D638(v58, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  sub_2504DAF60((uint64_t)v31, &qword_269AB65B8);
  if ((v60 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_9:
  if ((sub_25051AAD8(*((void *)v52 + 1), *((void *)v52 + 2), *((void *)v54 + 1), *((void *)v54 + 2)) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v61 = v72;
  uint64_t v62 = v73;
  uint64_t v64 = v77;
  uint64_t v63 = v78;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
  v65(v73, (char *)v52 + *(int *)(v72 + 24), v78);
  uint64_t v66 = (char *)v54 + *(int *)(v61 + 24);
  uint64_t v67 = v74;
  v65(v74, v66, v63);
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v68 = sub_2505BE120();
  uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
  v69(v67, v63);
  v69(v62, v63);
  return v68 & 1;
}

uint64_t sub_25054B660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v26 - v17;
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || (sub_25051AAD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v20 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v19 = v19 != 0;
  }
  if (*(unsigned char *)(a2 + 32) != 1)
  {
    if (v19 != v20) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v23 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v24(v18, a1 + *(int *)(v23 + 28), v4);
    v24(v12, a2 + *(int *)(v23 + 28), v4);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v21 = sub_2505BE120();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v12, v4);
    v25(v18, v4);
    return v21 & 1;
  }
  if (!v20)
  {
    if (v19) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  if (v19 == 1) {
    goto LABEL_11;
  }
LABEL_8:
  char v21 = 0;
  return v21 & 1;
}

uint64_t sub_25054B86C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_2505BDA50();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v6, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v26 - v19;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_25051AAD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) != 0)
  {
    uint64_t v21 = a3(0);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v22(v20, a1 + *(int *)(v21 + 28), v6);
    v22(v14, a2 + *(int *)(v21 + 28), v6);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v23 = sub_2505BE120();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v14, v6);
    v24(v20, v6);
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_25054BA4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v134 = sub_2505BDA50();
  uint64_t v128 = *(void *)(v134 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v134, v4, v5, v6, v7);
  uint64_t v127 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8, v10, v11, v12, v13);
  uint64_t v126 = (char *)&v119 - v14;
  uint64_t v15 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v131 = *(void *)(v15 - 8);
  uint64_t v132 = v15;
  MEMORY[0x270FA5388](v15, v16, v17, v18, v19);
  uint64_t v125 = (uint64_t)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6510);
  MEMORY[0x270FA5388](v130, v21, v22, v23, v24);
  uint64_t v133 = (uint64_t)&v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
  uint64_t v31 = MEMORY[0x270FA5388](v26 - 8, v27, v28, v29, v30);
  uint64_t v129 = (uint64_t)&v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v31, v33, v34, v35, v36);
  uint64_t v39 = (char *)&v119 - v38;
  MEMORY[0x270FA5388](v37, v40, v41, v42, v43);
  uint64_t v45 = (char *)&v119 - v44;
  uint64_t v46 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v135 = v46;
  uint64_t v136 = v47;
  MEMORY[0x270FA5388](v46, v48, v49, v50, v51);
  uint64_t v53 = (char *)&v119 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6518);
  MEMORY[0x270FA5388](v54, v55, v56, v57, v58);
  char v60 = (char *)&v119 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  uint64_t v66 = MEMORY[0x270FA5388](v61 - 8, v62, v63, v64, v65);
  char v68 = (char *)&v119 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = MEMORY[0x270FA5388](v66, v69, v70, v71, v72);
  uint64_t v75 = (char *)&v119 - v74;
  MEMORY[0x270FA5388](v73, v76, v77, v78, v79);
  uint64_t v81 = (char *)&v119 - v80;
  if ((sub_2505441D8(*a1, *a2) & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v120 = v53;
  uint64_t v121 = v39;
  uint64_t v123 = v45;
  uint64_t v124 = v68;
  uint64_t v82 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  uint64_t v83 = a1;
  sub_2504DAEFC((uint64_t)a1 + *(int *)(v82 + 24), (uint64_t)v81, &qword_269AB5EC0);
  uint64_t v122 = v82;
  uint64_t v84 = a2;
  sub_2504DAEFC((uint64_t)a2 + *(int *)(v82 + 24), (uint64_t)v75, &qword_269AB5EC0);
  uint64_t v85 = (uint64_t)&v60[*(int *)(v54 + 48)];
  sub_2504DAEFC((uint64_t)v81, (uint64_t)v60, &qword_269AB5EC0);
  sub_2504DAEFC((uint64_t)v75, v85, &qword_269AB5EC0);
  uint64_t v86 = v135;
  uint64_t v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
  uint64_t v88 = (uint64_t)v81;
  if (v87((uint64_t)v60, 1, v135) == 1)
  {
    sub_2504DAF60((uint64_t)v75, &qword_269AB5EC0);
    sub_2504DAF60((uint64_t)v81, &qword_269AB5EC0);
    if (v87(v85, 1, v86) == 1)
    {
      sub_2504DAF60((uint64_t)v60, &qword_269AB5EC0);
      uint64_t v89 = v134;
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t v97 = (uint64_t)v75;
  uint64_t v98 = (uint64_t)v124;
  sub_2504DAEFC((uint64_t)v60, (uint64_t)v124, &qword_269AB5EC0);
  if (v87(v85, 1, v86) == 1)
  {
    sub_2504DAF60((uint64_t)v75, &qword_269AB5EC0);
    sub_2504DAF60(v88, &qword_269AB5EC0);
    sub_25052D638(v98, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_10:
    uint64_t v99 = &qword_269AB6518;
    uint64_t v100 = (uint64_t)v60;
LABEL_19:
    sub_2504DAF60(v100, v99);
    goto LABEL_20;
  }
  uint64_t v101 = v88;
  uint64_t v102 = (uint64_t)v120;
  sub_250549DC8(v85, (uint64_t)v120, type metadata accessor for GKCrypto_VersionedSeed);
  if (*(_DWORD *)v98 != *(_DWORD *)v102
    || (sub_25051AAD8(*(void *)(v98 + 8), *(void *)(v98 + 16), *(void *)(v102 + 8), *(void *)(v102 + 16)) & 1) == 0)
  {
    sub_25052D638(v102, type metadata accessor for GKCrypto_VersionedSeed);
    sub_2504DAF60((uint64_t)v75, &qword_269AB5EC0);
    sub_2504DAF60(v101, &qword_269AB5EC0);
    sub_25052D638(v98, type metadata accessor for GKCrypto_VersionedSeed);
    uint64_t v100 = (uint64_t)v60;
    uint64_t v99 = &qword_269AB5EC0;
    goto LABEL_19;
  }
  uint64_t v103 = (uint64_t)v60;
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  uint64_t v104 = v134;
  char v105 = sub_2505BE120();
  sub_25052D638(v102, type metadata accessor for GKCrypto_VersionedSeed);
  sub_2504DAF60(v97, &qword_269AB5EC0);
  uint64_t v106 = v101;
  uint64_t v89 = v104;
  sub_2504DAF60(v106, &qword_269AB5EC0);
  sub_25052D638(v98, type metadata accessor for GKCrypto_VersionedSeed);
  sub_2504DAF60(v103, &qword_269AB5EC0);
  if ((v105 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_5:
  uint64_t v90 = v122;
  uint64_t v91 = (uint64_t)v123;
  sub_2504DAEFC((uint64_t)v83 + *(int *)(v122 + 28), (uint64_t)v123, &qword_269AB5EC8);
  uint64_t v92 = (uint64_t)v121;
  sub_2504DAEFC((uint64_t)v84 + *(int *)(v90 + 28), (uint64_t)v121, &qword_269AB5EC8);
  uint64_t v93 = v133;
  uint64_t v94 = v133 + *(int *)(v130 + 48);
  sub_2504DAEFC(v91, v133, &qword_269AB5EC8);
  sub_2504DAEFC(v92, v94, &qword_269AB5EC8);
  uint64_t v95 = v132;
  uint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  if (v96(v93, 1, v132) == 1)
  {
    sub_2504DAF60(v92, &qword_269AB5EC8);
    sub_2504DAF60(v91, &qword_269AB5EC8);
    if (v96(v94, 1, v95) == 1)
    {
      sub_2504DAF60(v93, &qword_269AB5EC8);
LABEL_23:
      uint64_t v112 = v122;
      uint64_t v113 = v128;
      uint64_t v114 = *(void (**)(char *, char *, uint64_t))(v128 + 16);
      uint64_t v115 = v126;
      v114(v126, (char *)v83 + *(int *)(v122 + 20), v89);
      uint64_t v116 = (char *)v84 + *(int *)(v112 + 20);
      uint64_t v117 = v127;
      v114(v127, v116, v89);
      sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
      char v108 = sub_2505BE120();
      uint64_t v118 = *(void (**)(char *, uint64_t))(v113 + 8);
      v118(v117, v89);
      v118(v115, v89);
      return v108 & 1;
    }
    goto LABEL_18;
  }
  uint64_t v107 = v129;
  sub_2504DAEFC(v93, v129, &qword_269AB5EC8);
  if (v96(v94, 1, v95) == 1)
  {
    sub_2504DAF60(v92, &qword_269AB5EC8);
    sub_2504DAF60((uint64_t)v123, &qword_269AB5EC8);
    sub_25052D638(v107, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_18:
    uint64_t v99 = &qword_269AB6510;
    uint64_t v100 = v93;
    goto LABEL_19;
  }
  uint64_t v110 = v125;
  sub_250549DC8(v94, v125, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  char v111 = sub_25054C5E0(v107, v110);
  sub_25052D638(v110, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_2504DAF60(v92, &qword_269AB5EC8);
  sub_2504DAF60((uint64_t)v123, &qword_269AB5EC8);
  sub_25052D638(v107, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_2504DAF60(v93, &qword_269AB5EC8);
  if (v111) {
    goto LABEL_23;
  }
LABEL_20:
  char v108 = 0;
  return v108 & 1;
}

uint64_t sub_25054C3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13, v14, v15, v16);
  uint64_t v18 = (char *)&v26 - v17;
  if ((sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0
    || (sub_25051AAD8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)
  {
    goto LABEL_14;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v19 = v19 != 0;
  }
  if (*(unsigned char *)(a2 + 40) != 1)
  {
    if (v19 == v20) {
      goto LABEL_12;
    }
LABEL_14:
    char v23 = 0;
    return v23 & 1;
  }
  if (!v20)
  {
    if (!v19) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  if (v19 != 1) {
    goto LABEL_14;
  }
LABEL_12:
  if ((sub_25051AAD8(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 48), *(void *)(a2 + 56)) & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v21 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v22(v18, a1 + *(int *)(v21 + 32), v4);
  v22(v12, a2 + *(int *)(v21 + 32), v4);
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v23 = sub_2505BE120();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
  v24(v12, v4);
  v24(v18, v4);
  return v23 & 1;
}

uint64_t sub_25054C5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2505BDA50();
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v81 = v4;
  uint64_t v9 = MEMORY[0x270FA5388](v4, v5, v6, v7, v8);
  uint64_t v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12, v13, v14, v15);
  uint64_t v17 = (char *)&v74 - v16;
  uint64_t v18 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v82 = v18;
  uint64_t v83 = v19;
  MEMORY[0x270FA5388](v18, v20, v21, v22, v23);
  uint64_t v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6520);
  MEMORY[0x270FA5388](v26, v27, v28, v29, v30);
  uint64_t v32 = (char *)&v74 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
  uint64_t v38 = MEMORY[0x270FA5388](v33 - 8, v34, v35, v36, v37);
  uint64_t v40 = (char *)&v74 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v38, v41, v42, v43, v44);
  uint64_t v47 = (char *)&v74 - v46;
  MEMORY[0x270FA5388](v45, v48, v49, v50, v51);
  uint64_t v53 = (char *)&v74 - v52;
  if ((sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v75 = v25;
  uint64_t v78 = v11;
  uint64_t v79 = v40;
  uint64_t v77 = v17;
  uint64_t v54 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  sub_2504DAEFC(a1 + *(int *)(v54 + 24), (uint64_t)v53, &qword_269AB5EE0);
  sub_2504DAEFC(a2 + *(int *)(v54 + 24), (uint64_t)v47, &qword_269AB5EE0);
  uint64_t v55 = (uint64_t)&v32[*(int *)(v26 + 48)];
  sub_2504DAEFC((uint64_t)v53, (uint64_t)v32, &qword_269AB5EE0);
  sub_2504DAEFC((uint64_t)v47, v55, &qword_269AB5EE0);
  uint64_t v56 = v82;
  uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  int v58 = v57(v32, 1, v82);
  uint64_t v76 = a2;
  if (v58 != 1)
  {
    uint64_t v67 = (uint64_t)v47;
    uint64_t v68 = (uint64_t)v79;
    sub_2504DAEFC((uint64_t)v32, (uint64_t)v79, &qword_269AB5EE0);
    if (v57((char *)v55, 1, v56) != 1)
    {
      uint64_t v71 = (uint64_t)v75;
      sub_250549DC8(v55, (uint64_t)v75, type metadata accessor for GKCrypto_AdminGroupBlob);
      if ((sub_25051AAD8(*(void *)v68, *(void *)(v68 + 8), *(void *)v71, *(void *)(v71 + 8)) & 1) != 0
        && (sub_25051AAD8(*(void *)(v68 + 16), *(void *)(v68 + 24), *(void *)(v71 + 16), *(void *)(v71 + 24)) & 1) != 0)
      {
        sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
        uint64_t v59 = v81;
        char v72 = sub_2505BE120();
        sub_25052D638(v71, type metadata accessor for GKCrypto_AdminGroupBlob);
        sub_2504DAF60(v67, &qword_269AB5EE0);
        sub_2504DAF60((uint64_t)v53, &qword_269AB5EE0);
        sub_25052D638(v68, type metadata accessor for GKCrypto_AdminGroupBlob);
        sub_2504DAF60((uint64_t)v32, &qword_269AB5EE0);
        if (v72) {
          goto LABEL_5;
        }
LABEL_15:
        char v65 = 0;
        return v65 & 1;
      }
      sub_25052D638(v71, type metadata accessor for GKCrypto_AdminGroupBlob);
      sub_2504DAF60(v67, &qword_269AB5EE0);
      sub_2504DAF60((uint64_t)v53, &qword_269AB5EE0);
      sub_25052D638(v68, type metadata accessor for GKCrypto_AdminGroupBlob);
      uint64_t v70 = (uint64_t)v32;
      uint64_t v69 = &qword_269AB5EE0;
LABEL_14:
      sub_2504DAF60(v70, v69);
      goto LABEL_15;
    }
    sub_2504DAF60(v67, &qword_269AB5EE0);
    sub_2504DAF60((uint64_t)v53, &qword_269AB5EE0);
    sub_25052D638(v68, type metadata accessor for GKCrypto_AdminGroupBlob);
LABEL_8:
    uint64_t v69 = &qword_269AB6520;
    uint64_t v70 = (uint64_t)v32;
    goto LABEL_14;
  }
  sub_2504DAF60((uint64_t)v47, &qword_269AB5EE0);
  sub_2504DAF60((uint64_t)v53, &qword_269AB5EE0);
  if (v57((char *)v55, 1, v56) != 1) {
    goto LABEL_8;
  }
  sub_2504DAF60((uint64_t)v32, &qword_269AB5EE0);
  uint64_t v59 = v81;
LABEL_5:
  uint64_t v60 = a1 + *(int *)(v54 + 20);
  uint64_t v61 = v80;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  uint64_t v63 = v77;
  v62(v77, v60, v59);
  uint64_t v64 = v78;
  v62(v78, v76 + *(int *)(v54 + 20), v59);
  sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
  char v65 = sub_2505BE120();
  uint64_t v66 = *(void (**)(char *, uint64_t))(v61 + 8);
  v66(v64, v59);
  v66(v63, v59);
  return v65 & 1;
}

uint64_t sub_25054CBD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_2505BDA50();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v6, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v26 - v19;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_25051AAD8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a2 + 56), *(void *)(a2 + 64)) & 1) != 0)
  {
    uint64_t v21 = a3(0);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v22(v20, a1 + *(int *)(v21 + 36), v6);
    v22(v14, a2 + *(int *)(v21 + 36), v6);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v23 = sub_2505BE120();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v14, v6);
    v24(v20, v6);
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_25054CDD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_2505BDA50();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v6, v8, v9, v10, v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15, v16, v17, v18);
  uint64_t v20 = (char *)&v26 - v19;
  if ((sub_25051AAD8(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_25051AAD8(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0)
  {
    uint64_t v21 = a3(0);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v22(v20, a1 + *(int *)(v21 + 24), v6);
    v22(v14, a2 + *(int *)(v21 + 24), v6);
    sub_25053E684(&qword_269AB64A8, MEMORY[0x263F50560]);
    char v23 = sub_2505BE120();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v14, v6);
    v24(v20, v6);
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_25054CFA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_25054D008()
{
  unint64_t result = qword_269AB6530;
  if (!qword_269AB6530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB6530);
  }
  return result;
}

unint64_t sub_25054D05C()
{
  unint64_t result = qword_269AB6588;
  if (!qword_269AB6588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB6588);
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_Role()
{
  return &type metadata for GKCrypto_Role;
}

uint64_t *sub_25054D0D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_2504DBC4C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = a2[4];
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_2505BDA50();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_25054D1EC(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_25054D278(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_2504DBC4C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = a2[4];
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  return a1;
}

uint64_t *sub_25054D340(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_250511528(v12, v13);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_25054D414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_25054D498(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_250511528(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_250511528(v8, v9);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_25054D548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25054D55C);
}

uint64_t sub_25054D55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25054D60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25054D620);
}

uint64_t sub_25054D620(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25054D6C8()
{
  return sub_250556DCC();
}

uint64_t *sub_25054D6E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_2504DBC4C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_2504DBC4C(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_2504DBC4C(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_25054D804(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_250511528(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_250511528(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_25054D898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_2504DBC4C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_2504DBC4C(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_2504DBC4C(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t *sub_25054D96C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_2504DBC4C(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_250511528(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_2504DBC4C(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_250511528(v20, v21);
  uint64_t v22 = *(int *)(a3 + 32);
  char v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

_OWORD *sub_25054DA60(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t *sub_25054DAE4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_250511528(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_250511528(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_250511528(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_250511528(v12, v13);
  uint64_t v14 = *(int *)(a3 + 32);
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_25054DBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_11Tm_0);
}

uint64_t sub_25054DBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_12Tm_0);
}

uint64_t sub_25054DBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_37Tm);
}

uint64_t sub_25054DC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_38Tm);
}

uint64_t sub_25054DC1C()
{
  return sub_250557BE8();
}

uint64_t *sub_25054DC28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_25054DD18(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_25054DD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_25054DE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_25054DEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_25054DF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_25054DFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25054E00C);
}

uint64_t sub_25054E00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25054E0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25054E0DC);
}

uint64_t sub_25054E0DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25054E18C()
{
  return sub_250557BE8();
}

uint64_t *sub_25054E19C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_2505BDA50();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    unint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for GKCrypto_VersionedSeed(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
      uint64_t v43 = v11;
      unint64_t v19 = v12;
      uint64_t v20 = v15[1];
      unint64_t v21 = v15[2];
      sub_2504DBC4C(v20, v21);
      v14[1] = v20;
      v14[2] = v21;
      uint64_t v12 = v19;
      uint64_t v11 = v43;
      v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v22 = a3[7];
    char v23 = (uint64_t *)((char *)v7 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v42 = v26;
      uint64_t v28 = *v24;
      unint64_t v29 = v24[1];
      sub_2504DBC4C(*v24, v29);
      *char v23 = v28;
      v23[1] = v29;
      v12((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v11);
      uint64_t v30 = *(int *)(v25 + 24);
      uint64_t v31 = (void *)((char *)v23 + v30);
      uint64_t v32 = (uint64_t *)((char *)v24 + v30);
      uint64_t v33 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
        memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        uint64_t v41 = v12;
        uint64_t v36 = *v32;
        unint64_t v37 = v32[1];
        sub_2504DBC4C(*v32, v37);
        *uint64_t v31 = v36;
        v31[1] = v37;
        uint64_t v38 = v32[2];
        unint64_t v39 = v32[3];
        sub_2504DBC4C(v38, v39);
        v31[2] = v38;
        v31[3] = v39;
        v41((char *)v31 + *(int *)(v33 + 24), (char *)v32 + *(int *)(v33 + 24), v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v23, 0, 1, v25);
    }
  }
  return v7;
}

uint64_t sub_25054E5A8(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_2505BDA50();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v14(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for GKCrypto_VersionedSeed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_250511528(*(void *)(v6 + 8), *(void *)(v6 + 16));
    v14(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    sub_250511528(*(void *)v8, *(void *)(v8 + 8));
    v14(v8 + *(int *)(v9 + 20), v5);
    uint64_t v11 = v8 + *(int *)(v9 + 24);
    uint64_t v12 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
    if (!result)
    {
      sub_250511528(*(void *)v11, *(void *)(v11 + 8));
      sub_250511528(*(void *)(v11 + 16), *(void *)(v11 + 24));
      uint64_t v13 = v11 + *(int *)(v12 + 24);
      return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v5);
    }
  }
  return result;
}

void *sub_25054E7B0(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)v5 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    uint64_t v41 = v5;
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    uint64_t v19 = v13[1];
    unint64_t v20 = v13[2];
    sub_2504DBC4C(v19, v20);
    v12[1] = v19;
    v12[2] = v20;
    uint64_t v10 = v18;
    uint64_t v9 = v17;
    uint64_t v5 = v41;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)((char *)v5 + v21);
  char v23 = (void *)((char *)a2 + v21);
  uint64_t v24 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v42 = v25;
    uint64_t v27 = *v23;
    unint64_t v28 = v23[1];
    sub_2504DBC4C(*v23, v28);
    *uint64_t v22 = v27;
    v22[1] = v28;
    v10((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v9);
    uint64_t v29 = *(int *)(v24 + 24);
    uint64_t v30 = (void *)((char *)v22 + v29);
    uint64_t v31 = (uint64_t *)((char *)v23 + v29);
    uint64_t v32 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v40 = v10;
      uint64_t v35 = *v31;
      unint64_t v36 = v31[1];
      sub_2504DBC4C(*v31, v36);
      *uint64_t v30 = v35;
      v30[1] = v36;
      uint64_t v37 = v31[2];
      unint64_t v38 = v31[3];
      sub_2504DBC4C(v37, v38);
      v30[2] = v37;
      v30[3] = v38;
      v40((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v22, 0, 1, v24);
  }
  return v5;
}

void *sub_25054EB70(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  uint64_t v75 = *(void *)(v9 - 8);
  uint64_t v76 = v9;
  uint64_t v73 = *(void (**)(char *, char *))(v75 + 24);
  v73(v7, v8);
  uint64_t v10 = a3[6];
  uint64_t v77 = a1;
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
      uint64_t v18 = *((void *)v12 + 1);
      unint64_t v19 = *((void *)v12 + 2);
      sub_2504DBC4C(v18, v19);
      *((void *)v11 + 1) = v18;
      *((void *)v11 + 2) = v19;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v76);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_25052D638((uint64_t)v11, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v11, v12, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v41 = *((void *)v12 + 1);
  unint64_t v42 = *((void *)v12 + 2);
  sub_2504DBC4C(v41, v42);
  uint64_t v43 = *((void *)v11 + 1);
  unint64_t v44 = *((void *)v11 + 2);
  *((void *)v11 + 1) = v41;
  *((void *)v11 + 2) = v42;
  sub_250511528(v43, v44);
  ((void (*)(char *, char *, uint64_t))v73)(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v76);
LABEL_7:
  uint64_t v21 = v77;
  uint64_t v22 = a3[7];
  char v23 = (void *)((char *)v77 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      uint64_t v45 = *v24;
      unint64_t v46 = v24[1];
      sub_2504DBC4C(*v24, v46);
      uint64_t v47 = *v23;
      unint64_t v48 = v23[1];
      *char v23 = v45;
      v23[1] = v46;
      sub_250511528(v47, v48);
      ((void (*)(char *, char *, uint64_t))v73)((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v76);
      uint64_t v49 = *(int *)(v25 + 24);
      uint64_t v50 = (uint64_t *)((char *)v23 + v49);
      uint64_t v51 = (uint64_t *)((char *)v24 + v49);
      uint64_t v52 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      uint64_t v53 = *(void *)(v52 - 8);
      uint64_t v54 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v53 + 48);
      LODWORD(v45) = v54(v50, 1, v52);
      int v55 = v54(v51, 1, v52);
      if (v45)
      {
        if (!v55)
        {
          uint64_t v56 = *v51;
          unint64_t v57 = v51[1];
          sub_2504DBC4C(*v51, v57);
          *uint64_t v50 = v56;
          v50[1] = v57;
          uint64_t v58 = v51[2];
          unint64_t v59 = v51[3];
          sub_2504DBC4C(v58, v59);
          v50[2] = v58;
          v50[3] = v59;
          (*(void (**)(char *, char *, uint64_t))(v75 + 16))((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v76);
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
          return v21;
        }
      }
      else
      {
        if (!v55)
        {
          uint64_t v65 = *v51;
          unint64_t v66 = v51[1];
          sub_2504DBC4C(*v51, v66);
          uint64_t v67 = *v50;
          unint64_t v68 = v50[1];
          *uint64_t v50 = v65;
          v50[1] = v66;
          sub_250511528(v67, v68);
          uint64_t v69 = v51[2];
          unint64_t v70 = v51[3];
          sub_2504DBC4C(v69, v70);
          uint64_t v71 = v50[2];
          unint64_t v72 = v50[3];
          v50[2] = v69;
          v50[3] = v70;
          sub_250511528(v71, v72);
          ((void (*)(char *, char *, uint64_t))v73)((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v76);
          return v21;
        }
        sub_25052D638((uint64_t)v50, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      size_t v38 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0) - 8) + 64);
      unint64_t v39 = v50;
      uint64_t v40 = v51;
      goto LABEL_14;
    }
    sub_25052D638((uint64_t)v23, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_13:
    size_t v38 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8) - 8) + 64);
    unint64_t v39 = v23;
    uint64_t v40 = v24;
LABEL_14:
    memcpy(v39, v40, v38);
    return v21;
  }
  if (v29) {
    goto LABEL_13;
  }
  uint64_t v30 = *v24;
  unint64_t v31 = v24[1];
  sub_2504DBC4C(*v24, v31);
  *char v23 = v30;
  v23[1] = v31;
  uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  v74((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v76);
  uint64_t v32 = *(int *)(v25 + 24);
  uint64_t v33 = (uint64_t *)((char *)v23 + v32);
  uint64_t v34 = (uint64_t *)((char *)v24 + v32);
  uint64_t v35 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    uint64_t v61 = *v34;
    unint64_t v60 = v34[1];
    sub_2504DBC4C(*v34, v60);
    *uint64_t v33 = v61;
    v33[1] = v60;
    uint64_t v63 = v34[2];
    unint64_t v62 = v34[3];
    sub_2504DBC4C(v63, v62);
    v33[2] = v63;
    uint64_t v33[3] = v62;
    uint64_t v21 = v77;
    v74((char *)v33 + *(int *)(v35 + 24), (char *)v34 + *(int *)(v35 + 24), v76);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return v21;
}

void *sub_25054F1E0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_DWORD *)((char *)a1 + v11);
  uint64_t v13 = (_DWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    _DWORD *v12 = *v13;
    *(_OWORD *)(v12 + 2) = *(_OWORD *)(v13 + 2);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = (_OWORD *)((char *)a1 + v17);
  unint64_t v19 = (_OWORD *)((char *)a2 + v17);
  uint64_t v20 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    uint64_t v23 = *(int *)(v20 + 24);
    __dst = (_OWORD *)((char *)v18 + v23);
    uint64_t v24 = (_OWORD *)((char *)v19 + v23);
    uint64_t v25 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
      memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      long long v28 = v24[1];
      _OWORD *__dst = *v24;
      __dst[1] = v28;
      v10((char *)__dst + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

void *sub_25054F544(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  unint64_t v57 = *(void (**)(char *, char *))(v58 + 40);
  v57(v7, v8);
  uint64_t v10 = a3[6];
  unint64_t v60 = a1;
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15((char *)v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(v12 + 8);
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))((char *)v11 + *(int *)(v13 + 24), &v12[*(int *)(v13 + 24)], v59);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_25052D638((uint64_t)v11, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  uint64_t v38 = v11[1];
  unint64_t v39 = v11[2];
  *(_OWORD *)(v11 + 1) = *(_OWORD *)(v12 + 8);
  sub_250511528(v38, v39);
  ((void (*)(char *, char *, uint64_t))v57)((char *)v11 + *(int *)(v13 + 24), &v12[*(int *)(v13 + 24)], v59);
LABEL_7:
  unint64_t v19 = v60;
  uint64_t v20 = a3[7];
  uint64_t v21 = (void *)((char *)v60 + v20);
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25((uint64_t *)v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v40 = *v21;
      unint64_t v41 = v21[1];
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      sub_250511528(v40, v41);
      ((void (*)(char *, char *, uint64_t))v57)((char *)v21 + *(int *)(v23 + 20), &v22[*(int *)(v23 + 20)], v59);
      uint64_t v42 = *(int *)(v23 + 24);
      uint64_t v43 = (uint64_t)v21 + v42;
      unint64_t v44 = &v22[v42];
      uint64_t v45 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      uint64_t v46 = *(void *)(v45 - 8);
      uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
      int v48 = v47(v43, 1, v45);
      int v49 = v47((uint64_t)v44, 1, v45);
      if (v48)
      {
        if (!v49)
        {
          long long v50 = *((_OWORD *)v44 + 1);
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
          *(_OWORD *)(v43 + 16) = v50;
          (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v43 + *(int *)(v45 + 24), &v44[*(int *)(v45 + 24)], v59);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
          return v19;
        }
      }
      else
      {
        if (!v49)
        {
          uint64_t v53 = *(void *)v43;
          unint64_t v54 = *(void *)(v43 + 8);
          *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
          sub_250511528(v53, v54);
          uint64_t v55 = *(void *)(v43 + 16);
          unint64_t v56 = *(void *)(v43 + 24);
          *(_OWORD *)(v43 + 16) = *((_OWORD *)v44 + 1);
          sub_250511528(v55, v56);
          ((void (*)(uint64_t, char *, uint64_t))v57)(v43 + *(int *)(v45 + 24), &v44[*(int *)(v45 + 24)], v59);
          return v19;
        }
        sub_25052D638(v43, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0) - 8) + 64);
      uint64_t v36 = (void *)v43;
      uint64_t v37 = v44;
      goto LABEL_14;
    }
    sub_25052D638((uint64_t)v21, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_13:
    size_t v35 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8) - 8) + 64);
    uint64_t v36 = v21;
    uint64_t v37 = v22;
LABEL_14:
    memcpy(v36, v37, v35);
    return v19;
  }
  if (v27) {
    goto LABEL_13;
  }
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  long long v28 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v28((char *)v21 + *(int *)(v23 + 20), &v22[*(int *)(v23 + 20)], v59);
  uint64_t v29 = *(int *)(v23 + 24);
  uint64_t v30 = (_OWORD *)((char *)v21 + v29);
  unint64_t v31 = &v22[v29];
  uint64_t v32 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    long long v51 = *((_OWORD *)v31 + 1);
    *uint64_t v30 = *(_OWORD *)v31;
    v30[1] = v51;
    v28((char *)v30 + *(int *)(v32 + 24), &v31[*(int *)(v32 + 24)], v59);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  unint64_t v19 = v60;
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return v19;
}

uint64_t sub_25054FB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25054FB34);
}

uint64_t sub_25054FB34(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_2505BDA50();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  int v17 = &a1[a3[7]];
  return v15(v17, a2, v16);
}

uint64_t sub_25054FCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25054FCC8);
}

char *sub_25054FCC8(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_2505BDA50();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  int v17 = &v5[a4[7]];
  return (char *)v15(v17, a2, a2, v16);
}

void sub_25054FE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t sub_25054FE74(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_2504DBC4C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_2504DBC4C(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    uint64_t v11 = *(void *)(a2 + 48);
    unint64_t v12 = *(void *)(a2 + 56);
    sub_2504DBC4C(v11, v12);
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v12;
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = sub_2505BDA50();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_25054FF94(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_250511528(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_250550020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_2504DBC4C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_2504DBC4C(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_2505500F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_2504DBC4C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v14;
  uint64_t v15 = *(void *)(a2 + 48);
  unint64_t v16 = *(void *)(a2 + 56);
  sub_2504DBC4C(v15, v16);
  uint64_t v17 = *(void *)(a1 + 48);
  unint64_t v18 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v16;
  sub_250511528(v17, v18);
  uint64_t v19 = *(int *)(a3 + 32);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_2505501D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_25055026C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_250511528(v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_250511528(v10, v11);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_25055032C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250550340);
}

uint64_t __swift_get_extra_inhabitant_index_11Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250550400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250550414);
}

void *__swift_store_extra_inhabitant_index_12Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_2505504C8()
{
  return sub_2505504D4();
}

uint64_t sub_2505504D4()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_250550570(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    unint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      sub_2504DBC4C(*v16, v22);
      *uint64_t v15 = v21;
      v15[1] = v22;
      uint64_t v23 = v16[2];
      unint64_t v24 = v16[3];
      sub_2504DBC4C(v23, v24);
      _OWORD v15[2] = v23;
      v15[3] = v24;
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_250550768(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_250511528(*(void *)v6, *(void *)(v6 + 8));
    sub_250511528(*(void *)(v6 + 16), *(void *)(v6 + 24));
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t *sub_250550888(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    sub_2504DBC4C(*v15, v20);
    void *v14 = v19;
    v14[1] = v20;
    uint64_t v21 = v15[2];
    unint64_t v22 = v15[3];
    sub_2504DBC4C(v21, v22);
    v14[2] = v21;
    v14[3] = v22;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *sub_250550A30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v36 = *(void *)(v13 - 8);
  uint64_t v37 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v36 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v28 = *v17;
      unint64_t v29 = v17[1];
      sub_2504DBC4C(*v17, v29);
      uint64_t v30 = *v16;
      unint64_t v31 = v16[1];
      *uint64_t v16 = v28;
      v16[1] = v29;
      sub_250511528(v30, v31);
      uint64_t v32 = v17[2];
      unint64_t v33 = v17[3];
      sub_2504DBC4C(v32, v33);
      uint64_t v34 = v16[2];
      unint64_t v35 = v16[3];
      v16[2] = v32;
      v16[3] = v33;
      sub_250511528(v34, v35);
      ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v37);
      return a1;
    }
    sub_25052D638((uint64_t)v16, type metadata accessor for GKCrypto_AdminGroupBlob);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v16, v17, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  uint64_t v22 = *v17;
  unint64_t v23 = v17[1];
  sub_2504DBC4C(*v17, v23);
  *uint64_t v16 = v22;
  v16[1] = v23;
  uint64_t v24 = v17[2];
  unint64_t v25 = v17[3];
  sub_2504DBC4C(v24, v25);
  v16[2] = v24;
  v16[3] = v25;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v37);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

_OWORD *sub_250550C98(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    _OWORD *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_250550E0C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_250511528(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v27 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v23 = *v14;
      unint64_t v24 = v14[1];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      sub_250511528(v23, v24);
      uint64_t v25 = v14[2];
      unint64_t v26 = v14[3];
      *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
      sub_250511528(v25, v26);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v28);
      return a1;
    }
    sub_25052D638((uint64_t)v14, type metadata accessor for GKCrypto_AdminGroupBlob);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  long long v20 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v20;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v28);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_250551034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250551048);
}

uint64_t sub_250551048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_250551184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250551198);
}

void *sub_250551198(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EE0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_2505512D0()
{
  sub_2505BDA50();
  if (v0 <= 0x3F)
  {
    sub_25052E528(319, &qword_269AB6678, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_2505513D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_52Tm);
}

uint64_t sub_2505513F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_53Tm);
}

uint64_t sub_250551408()
{
  return sub_250556DCC();
}

uint64_t *sub_250551420(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_250551508(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_250551584(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_25055161C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_2505516BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_250551738(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_250511528(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_2505517C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2505517DC);
}

uint64_t sub_2505517DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250551898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2505518AC);
}

void *sub_2505518AC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25055195C()
{
  return sub_250551968();
}

uint64_t sub_250551968()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2505519F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = a3[6];
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for GKCrypto_VersionedSeed(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
      uint64_t v33 = v12;
      uint64_t v21 = v13;
      uint64_t v22 = v16[1];
      unint64_t v23 = v16[2];
      sub_2504DBC4C(v22, v23);
      v15[1] = v22;
      _OWORD v15[2] = v23;
      uint64_t v13 = v21;
      uint64_t v12 = v33;
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v24 = a3[7];
    uint64_t v25 = (uint64_t *)((char *)a1 + v24);
    unint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = type metadata accessor for GKCrypto_AdminMetaData(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v30 = *v26;
      unint64_t v31 = v26[1];
      sub_2504DBC4C(*v26, v31);
      *uint64_t v25 = v30;
      v25[1] = v31;
      v13((char *)v25 + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  return a1;
}

uint64_t sub_250551D04(uint64_t a1, int *a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_2505BDA50();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for GKCrypto_VersionedSeed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_250511528(*(void *)(v6 + 8), *(void *)(v6 + 16));
    v12(v6 + *(int *)(v7 + 24), v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    sub_250511528(*(void *)v8, *(void *)(v8 + 8));
    uint64_t v11 = v8 + *(int *)(v9 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
  }
  return result;
}

uint64_t *sub_250551E98(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = a3[6];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
    uint64_t v31 = v11;
    uint64_t v19 = v12;
    uint64_t v20 = v15[1];
    unint64_t v21 = v15[2];
    sub_2504DBC4C(v20, v21);
    v14[1] = v20;
    v14[2] = v21;
    uint64_t v12 = v19;
    uint64_t v11 = v31;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v31);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v22 = a3[7];
  unint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v25 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    uint64_t v28 = *v24;
    unint64_t v29 = v24[1];
    sub_2504DBC4C(*v24, v29);
    *unint64_t v23 = v28;
    v23[1] = v29;
    v12((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  return a1;
}

uint64_t *sub_250552154(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v47 = v13;
  uint64_t v45 = *(void (**)(char *, char *))(v46 + 24);
  v45(v11, v12);
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
      uint64_t v22 = *((void *)v16 + 1);
      unint64_t v23 = *((void *)v16 + 2);
      sub_2504DBC4C(v22, v23);
      *((void *)v15 + 1) = v22;
      *((void *)v15 + 2) = v23;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_25052D638((uint64_t)v15, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v15, v16, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v37 = *((void *)v16 + 1);
  unint64_t v38 = *((void *)v16 + 2);
  sub_2504DBC4C(v37, v38);
  uint64_t v39 = *((void *)v15 + 1);
  unint64_t v40 = *((void *)v15 + 2);
  *((void *)v15 + 1) = v37;
  *((void *)v15 + 2) = v38;
  sub_250511528(v39, v40);
  ((void (*)(char *, char *, uint64_t))v45)(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v47);
LABEL_7:
  uint64_t v25 = a3[7];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)((char *)a2 + v25);
  uint64_t v28 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      uint64_t v41 = *v27;
      unint64_t v42 = v27[1];
      sub_2504DBC4C(*v27, v42);
      uint64_t v43 = *v26;
      unint64_t v44 = v26[1];
      *uint64_t v26 = v41;
      v26[1] = v42;
      sub_250511528(v43, v44);
      ((void (*)(char *, char *, uint64_t))v45)((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v47);
      return a1;
    }
    sub_25052D638((uint64_t)v26, type metadata accessor for GKCrypto_AdminMetaData);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
    memcpy(v26, v27, *(void *)(*(void *)(v35 - 8) + 64));
    return a1;
  }
  uint64_t v33 = *v27;
  unint64_t v34 = v27[1];
  sub_2504DBC4C(*v27, v34);
  *uint64_t v26 = v33;
  v26[1] = v34;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v47);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  return a1;
}

_OWORD *sub_250552524(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (_DWORD *)((char *)a1 + v11);
  uint64_t v13 = (_DWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    _DWORD *v12 = *v13;
    *(_OWORD *)(v12 + 2) = *(_OWORD *)(v13 + 2);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = (_OWORD *)((char *)a1 + v17);
  uint64_t v19 = (_OWORD *)((char *)a2 + v17);
  uint64_t v20 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *uint64_t v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t *sub_250552798(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_250511528(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v37 = v11;
  uint64_t v35 = *(void (**)(char *, char *))(v36 + 40);
  v35(v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for GKCrypto_VersionedSeed(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17((char *)v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
      *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 8);
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_25052D638((uint64_t)v13, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  uint64_t v31 = v13[1];
  unint64_t v32 = v13[2];
  *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 8);
  sub_250511528(v31, v32);
  ((void (*)(char *, char *, uint64_t))v35)((char *)v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v37);
LABEL_7:
  uint64_t v21 = a3[7];
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  unint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = type metadata accessor for GKCrypto_AdminMetaData(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v33 = *v22;
      unint64_t v34 = v22[1];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      sub_250511528(v33, v34);
      ((void (*)(char *, char *, uint64_t))v35)((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v37);
      return a1;
    }
    sub_25052D638((uint64_t)v22, type metadata accessor for GKCrypto_AdminMetaData);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v37);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_250552B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250552B44);
}

uint64_t sub_250552B44(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = sub_2505BDA50();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[7];
  return v15(v17, a2, v16);
}

uint64_t sub_250552CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250552CE4);
}

char *sub_250552CE4(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = sub_2505BDA50();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5EC0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5F18);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[7]];
  return (char *)v15(v17, a2, a2, v16);
}

void sub_250552E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_250552E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  sub_2505BDA50();
  if (v8 <= 0x3F)
  {
    sub_25052E528(319, &qword_269AB6648, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
    if (v9 <= 0x3F)
    {
      sub_25052E528(319, a5, a6);
      if (v10 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unint64_t sub_250552FD0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_2504DBC4C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_2504DBC4C(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    uint64_t v11 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40);
    sub_2504DBC4C(v11, v12);
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v12;
    uint64_t v13 = *(void *)(a2 + 48);
    unint64_t v14 = *(void *)(a2 + 56);
    sub_2504DBC4C(v13, v14);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v14;
    uint64_t v15 = *(void *)(a2 + 64);
    unint64_t v16 = *(void *)(a2 + 72);
    sub_2504DBC4C(v15, v16);
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v16;
    uint64_t v17 = *(void *)(a2 + 80);
    unint64_t v18 = *(void *)(a2 + 88);
    sub_2504DBC4C(v17, v18);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 88) = v18;
    uint64_t v19 = *(void *)(a2 + 96);
    unint64_t v20 = *(void *)(a2 + 104);
    sub_2504DBC4C(v19, v20);
    *(void *)(a1 + 96) = v19;
    *(void *)(a1 + 104) = v20;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    uint64_t v21 = *(void *)(a2 + 120);
    unint64_t v22 = *(void *)(a2 + 128);
    sub_2504DBC4C(v21, v22);
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v22;
    uint64_t v23 = *(int *)(a3 + 52);
    uint64_t v24 = a1 + v23;
    uint64_t v25 = a2 + v23;
    uint64_t v26 = sub_2505BDA50();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_25055314C(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_250511528(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_250511528(*(void *)(a1 + 48), *(void *)(a1 + 56));
  sub_250511528(*(void *)(a1 + 64), *(void *)(a1 + 72));
  sub_250511528(*(void *)(a1 + 80), *(void *)(a1 + 88));
  sub_250511528(*(void *)(a1 + 96), *(void *)(a1 + 104));
  sub_250511528(*(void *)(a1 + 120), *(void *)(a1 + 128));
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_250553200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_2504DBC4C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  uint64_t v10 = *(void *)(a2 + 32);
  unint64_t v11 = *(void *)(a2 + 40);
  sub_2504DBC4C(v10, v11);
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  uint64_t v12 = *(void *)(a2 + 48);
  unint64_t v13 = *(void *)(a2 + 56);
  sub_2504DBC4C(v12, v13);
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  uint64_t v14 = *(void *)(a2 + 64);
  unint64_t v15 = *(void *)(a2 + 72);
  sub_2504DBC4C(v14, v15);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v15;
  uint64_t v16 = *(void *)(a2 + 80);
  unint64_t v17 = *(void *)(a2 + 88);
  sub_2504DBC4C(v16, v17);
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v17;
  uint64_t v18 = *(void *)(a2 + 96);
  unint64_t v19 = *(void *)(a2 + 104);
  sub_2504DBC4C(v18, v19);
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = v19;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v20 = *(void *)(a2 + 120);
  unint64_t v21 = *(void *)(a2 + 128);
  sub_2504DBC4C(v20, v21);
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v21;
  uint64_t v22 = *(int *)(a3 + 52);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  return a1;
}

uint64_t sub_25055332C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_2504DBC4C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = *(void *)(a2 + 40);
  sub_2504DBC4C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 32);
  unint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v15;
  sub_250511528(v16, v17);
  uint64_t v18 = *(void *)(a2 + 48);
  unint64_t v19 = *(void *)(a2 + 56);
  sub_2504DBC4C(v18, v19);
  uint64_t v20 = *(void *)(a1 + 48);
  unint64_t v21 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  sub_250511528(v20, v21);
  uint64_t v22 = *(void *)(a2 + 64);
  unint64_t v23 = *(void *)(a2 + 72);
  sub_2504DBC4C(v22, v23);
  uint64_t v24 = *(void *)(a1 + 64);
  unint64_t v25 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v22;
  *(void *)(a1 + 72) = v23;
  sub_250511528(v24, v25);
  uint64_t v26 = *(void *)(a2 + 80);
  unint64_t v27 = *(void *)(a2 + 88);
  sub_2504DBC4C(v26, v27);
  uint64_t v28 = *(void *)(a1 + 80);
  unint64_t v29 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v26;
  *(void *)(a1 + 88) = v27;
  sub_250511528(v28, v29);
  uint64_t v30 = *(void *)(a2 + 96);
  unint64_t v31 = *(void *)(a2 + 104);
  sub_2504DBC4C(v30, v31);
  uint64_t v32 = *(void *)(a1 + 96);
  unint64_t v33 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v30;
  *(void *)(a1 + 104) = v31;
  sub_250511528(v32, v33);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v34 = *(void *)(a2 + 120);
  unint64_t v35 = *(void *)(a2 + 128);
  sub_2504DBC4C(v34, v35);
  uint64_t v36 = *(void *)(a1 + 120);
  unint64_t v37 = *(void *)(a1 + 128);
  *(void *)(a1 + 120) = v34;
  *(void *)(a1 + 128) = v35;
  sub_250511528(v36, v37);
  uint64_t v38 = *(int *)(a3 + 52);
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  uint64_t v41 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t sub_250553498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v7 = *(int *)(a3 + 52);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v10 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_25055353C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_250511528(v10, v11);
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_250511528(v12, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  unint64_t v15 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_250511528(v14, v15);
  uint64_t v16 = *(void *)(a1 + 80);
  unint64_t v17 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_250511528(v16, v17);
  uint64_t v18 = *(void *)(a1 + 96);
  unint64_t v19 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_250511528(v18, v19);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_250511528(v20, v21);
  uint64_t v22 = *(int *)(a3 + 52);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t sub_250553644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250553658);
}

uint64_t sub_250553658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250553714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250553728);
}

void *sub_250553728(void *result, uint64_t a2, int a3, uint64_t a4)
{
  long long v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 52);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_2505537D8()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25055388C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    unint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    unint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for GKCrypto_Invite(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6570);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      sub_2504DBC4C(*v16, v22);
      *unint64_t v15 = v21;
      v15[1] = v22;
      uint64_t v23 = v16[2];
      unint64_t v24 = v16[3];
      sub_2504DBC4C(v23, v24);
      _OWORD v15[2] = v23;
      v15[3] = v24;
      uint64_t v25 = v16[4];
      unint64_t v26 = v16[5];
      sub_2504DBC4C(v25, v26);
      v15[4] = v25;
      v15[5] = v26;
      uint64_t v27 = v16[6];
      unint64_t v28 = v16[7];
      sub_2504DBC4C(v27, v28);
      v15[6] = v27;
      v15[7] = v28;
      uint64_t v29 = v16[8];
      unint64_t v30 = v16[9];
      sub_2504DBC4C(v29, v30);
      v15[8] = v29;
      v15[9] = v30;
      uint64_t v31 = v16[10];
      unint64_t v32 = v16[11];
      sub_2504DBC4C(v31, v32);
      v15[10] = v31;
      v15[11] = v32;
      uint64_t v33 = v16[12];
      unint64_t v34 = v16[13];
      sub_2504DBC4C(v33, v34);
      v15[12] = v33;
      v15[13] = v34;
      *((_DWORD *)v15 + 28) = *((_DWORD *)v16 + 28);
      uint64_t v35 = v16[15];
      unint64_t v36 = v16[16];
      sub_2504DBC4C(v35, v36);
      v15[15] = v35;
      v15[16] = v36;
      v13((char *)v15 + *(int *)(v17 + 52), (char *)v16 + *(int *)(v17 + 52), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_250553B0C(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for GKCrypto_Invite(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_250511528(*(void *)v6, *(void *)(v6 + 8));
    sub_250511528(*(void *)(v6 + 16), *(void *)(v6 + 24));
    sub_250511528(*(void *)(v6 + 32), *(void *)(v6 + 40));
    sub_250511528(*(void *)(v6 + 48), *(void *)(v6 + 56));
    sub_250511528(*(void *)(v6 + 64), *(void *)(v6 + 72));
    sub_250511528(*(void *)(v6 + 80), *(void *)(v6 + 88));
    sub_250511528(*(void *)(v6 + 96), *(void *)(v6 + 104));
    sub_250511528(*(void *)(v6 + 120), *(void *)(v6 + 128));
    uint64_t v9 = v6 + *(int *)(v7 + 52);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t sub_250553C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = sub_2505BDA50();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)(a1 + v13);
  unint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = type metadata accessor for GKCrypto_Invite(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6570);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    sub_2504DBC4C(*v15, v20);
    void *v14 = v19;
    v14[1] = v20;
    uint64_t v21 = v15[2];
    unint64_t v22 = v15[3];
    sub_2504DBC4C(v21, v22);
    v14[2] = v21;
    v14[3] = v22;
    uint64_t v23 = v15[4];
    unint64_t v24 = v15[5];
    sub_2504DBC4C(v23, v24);
    v14[4] = v23;
    v14[5] = v24;
    uint64_t v25 = v15[6];
    unint64_t v26 = v15[7];
    sub_2504DBC4C(v25, v26);
    v14[6] = v25;
    v14[7] = v26;
    uint64_t v27 = v15[8];
    unint64_t v28 = v15[9];
    sub_2504DBC4C(v27, v28);
    v14[8] = v27;
    v14[9] = v28;
    uint64_t v29 = v15[10];
    unint64_t v30 = v15[11];
    sub_2504DBC4C(v29, v30);
    v14[10] = v29;
    v14[11] = v30;
    uint64_t v31 = v15[12];
    unint64_t v32 = v15[13];
    sub_2504DBC4C(v31, v32);
    v14[12] = v31;
    v14[13] = v32;
    *((_DWORD *)v14 + 28) = *((_DWORD *)v15 + 28);
    uint64_t v33 = v15[15];
    unint64_t v34 = v15[16];
    sub_2504DBC4C(v33, v34);
    v14[15] = v33;
    v14[16] = v34;
    v12((char *)v14 + *(int *)(v16 + 52), (char *)v15 + *(int *)(v16 + 52), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_250553E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v72 = *(void *)(v13 - 8);
  uint64_t v73 = v13;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v72 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for GKCrypto_Invite(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v40 = *(void *)v17;
      unint64_t v41 = *(void *)(v17 + 8);
      sub_2504DBC4C(*(void *)v17, v41);
      uint64_t v42 = *(void *)v16;
      unint64_t v43 = *(void *)(v16 + 8);
      *(void *)uint64_t v16 = v40;
      *(void *)(v16 + 8) = v41;
      sub_250511528(v42, v43);
      uint64_t v44 = *(void *)(v17 + 16);
      unint64_t v45 = *(void *)(v17 + 24);
      sub_2504DBC4C(v44, v45);
      uint64_t v46 = *(void *)(v16 + 16);
      unint64_t v47 = *(void *)(v16 + 24);
      *(void *)(v16 + 16) = v44;
      *(void *)(v16 + 24) = v45;
      sub_250511528(v46, v47);
      uint64_t v48 = *(void *)(v17 + 32);
      unint64_t v49 = *(void *)(v17 + 40);
      sub_2504DBC4C(v48, v49);
      uint64_t v50 = *(void *)(v16 + 32);
      unint64_t v51 = *(void *)(v16 + 40);
      *(void *)(v16 + 32) = v48;
      *(void *)(v16 + 40) = v49;
      sub_250511528(v50, v51);
      uint64_t v52 = *(void *)(v17 + 48);
      unint64_t v53 = *(void *)(v17 + 56);
      sub_2504DBC4C(v52, v53);
      uint64_t v54 = *(void *)(v16 + 48);
      unint64_t v55 = *(void *)(v16 + 56);
      *(void *)(v16 + 48) = v52;
      *(void *)(v16 + 56) = v53;
      sub_250511528(v54, v55);
      uint64_t v56 = *(void *)(v17 + 64);
      unint64_t v57 = *(void *)(v17 + 72);
      sub_2504DBC4C(v56, v57);
      uint64_t v58 = *(void *)(v16 + 64);
      unint64_t v59 = *(void *)(v16 + 72);
      *(void *)(v16 + 64) = v56;
      *(void *)(v16 + 72) = v57;
      sub_250511528(v58, v59);
      uint64_t v60 = *(void *)(v17 + 80);
      unint64_t v61 = *(void *)(v17 + 88);
      sub_2504DBC4C(v60, v61);
      uint64_t v62 = *(void *)(v16 + 80);
      unint64_t v63 = *(void *)(v16 + 88);
      *(void *)(v16 + 80) = v60;
      *(void *)(v16 + 88) = v61;
      sub_250511528(v62, v63);
      uint64_t v64 = *(void *)(v17 + 96);
      unint64_t v65 = *(void *)(v17 + 104);
      sub_2504DBC4C(v64, v65);
      uint64_t v66 = *(void *)(v16 + 96);
      unint64_t v67 = *(void *)(v16 + 104);
      *(void *)(v16 + 96) = v64;
      *(void *)(v16 + 104) = v65;
      sub_250511528(v66, v67);
      *(_DWORD *)(v16 + 112) = *(_DWORD *)(v17 + 112);
      uint64_t v68 = *(void *)(v17 + 120);
      unint64_t v69 = *(void *)(v17 + 128);
      sub_2504DBC4C(v68, v69);
      uint64_t v70 = *(void *)(v16 + 120);
      unint64_t v71 = *(void *)(v16 + 128);
      *(void *)(v16 + 120) = v68;
      *(void *)(v16 + 128) = v69;
      sub_250511528(v70, v71);
      ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v16 + *(int *)(v18 + 52), v17 + *(int *)(v18 + 52), v73);
      return a1;
    }
    sub_25052D638(v16, type metadata accessor for GKCrypto_Invite);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6570);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  uint64_t v22 = *(void *)v17;
  unint64_t v23 = *(void *)(v17 + 8);
  sub_2504DBC4C(*(void *)v17, v23);
  *(void *)uint64_t v16 = v22;
  *(void *)(v16 + 8) = v23;
  uint64_t v24 = *(void *)(v17 + 16);
  unint64_t v25 = *(void *)(v17 + 24);
  sub_2504DBC4C(v24, v25);
  *(void *)(v16 + 16) = v24;
  *(void *)(v16 + 24) = v25;
  uint64_t v26 = *(void *)(v17 + 32);
  unint64_t v27 = *(void *)(v17 + 40);
  sub_2504DBC4C(v26, v27);
  *(void *)(v16 + 32) = v26;
  *(void *)(v16 + 40) = v27;
  uint64_t v28 = *(void *)(v17 + 48);
  unint64_t v29 = *(void *)(v17 + 56);
  sub_2504DBC4C(v28, v29);
  *(void *)(v16 + 48) = v28;
  *(void *)(v16 + 56) = v29;
  uint64_t v30 = *(void *)(v17 + 64);
  unint64_t v31 = *(void *)(v17 + 72);
  sub_2504DBC4C(v30, v31);
  *(void *)(v16 + 64) = v30;
  *(void *)(v16 + 72) = v31;
  uint64_t v32 = *(void *)(v17 + 80);
  unint64_t v33 = *(void *)(v17 + 88);
  sub_2504DBC4C(v32, v33);
  *(void *)(v16 + 80) = v32;
  *(void *)(v16 + 88) = v33;
  uint64_t v34 = *(void *)(v17 + 96);
  unint64_t v35 = *(void *)(v17 + 104);
  sub_2504DBC4C(v34, v35);
  *(void *)(v16 + 96) = v34;
  *(void *)(v16 + 104) = v35;
  *(_DWORD *)(v16 + 112) = *(_DWORD *)(v17 + 112);
  uint64_t v36 = *(void *)(v17 + 120);
  unint64_t v37 = *(void *)(v17 + 128);
  sub_2504DBC4C(v36, v37);
  *(void *)(v16 + 120) = v36;
  *(void *)(v16 + 128) = v37;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v16 + *(int *)(v18 + 52), v17 + *(int *)(v18 + 52), v73);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_25055422C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_Invite(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6570);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    _OWORD *v12 = *v13;
    v12[1] = v17;
    long long v18 = v13[3];
    v12[2] = v13[2];
    uint64_t v12[3] = v18;
    long long v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    v12[6] = v13[6];
    *((_DWORD *)v12 + 28) = *((_DWORD *)v13 + 28);
    *(_OWORD *)((char *)v12 + 120) = *(_OWORD *)((char *)v13 + 120);
    v10((char *)v12 + *(int *)(v14 + 52), (char *)v13 + *(int *)(v14 + 52), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_2505543D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v41 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for GKCrypto_Invite(0);
  uint64_t v17 = *(void *)(v16 - 8);
  long long v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v25 = *(void *)v14;
      unint64_t v26 = *(void *)(v14 + 8);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      sub_250511528(v25, v26);
      uint64_t v27 = *(void *)(v14 + 16);
      unint64_t v28 = *(void *)(v14 + 24);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
      sub_250511528(v27, v28);
      uint64_t v29 = *(void *)(v14 + 32);
      unint64_t v30 = *(void *)(v14 + 40);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
      sub_250511528(v29, v30);
      uint64_t v31 = *(void *)(v14 + 48);
      unint64_t v32 = *(void *)(v14 + 56);
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(v15 + 48);
      sub_250511528(v31, v32);
      uint64_t v33 = *(void *)(v14 + 64);
      unint64_t v34 = *(void *)(v14 + 72);
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(v15 + 64);
      sub_250511528(v33, v34);
      uint64_t v35 = *(void *)(v14 + 80);
      unint64_t v36 = *(void *)(v14 + 88);
      *(_OWORD *)(v14 + 80) = *(_OWORD *)(v15 + 80);
      sub_250511528(v35, v36);
      uint64_t v37 = *(void *)(v14 + 96);
      unint64_t v38 = *(void *)(v14 + 104);
      *(_OWORD *)(v14 + 96) = *(_OWORD *)(v15 + 96);
      sub_250511528(v37, v38);
      *(_DWORD *)(v14 + 112) = *(_DWORD *)(v15 + 112);
      uint64_t v39 = *(void *)(v14 + 120);
      unint64_t v40 = *(void *)(v14 + 128);
      *(_OWORD *)(v14 + 120) = *(_OWORD *)(v15 + 120);
      sub_250511528(v39, v40);
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v14 + *(int *)(v16 + 52), v15 + *(int *)(v16 + 52), v42);
      return a1;
    }
    sub_25052D638(v14, type metadata accessor for GKCrypto_Invite);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6570);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  long long v20 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v20;
  long long v21 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v14 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v14 + 48) = v21;
  long long v22 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(v14 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(v14 + 80) = v22;
  *(_OWORD *)(v14 + 96) = *(_OWORD *)(v15 + 96);
  *(_DWORD *)(v14 + 112) = *(_DWORD *)(v15 + 112);
  *(_OWORD *)(v14 + 120) = *(_OWORD *)(v15 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v14 + *(int *)(v16 + 52), v15 + *(int *)(v16 + 52), v42);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_250554690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2505546A4);
}

uint64_t sub_2505546A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_269AB6570);
}

uint64_t sub_2505546B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2505546C4);
}

uint64_t sub_2505546C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_269AB6570);
}

void sub_2505546D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_2505546F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_52Tm_0);
}

uint64_t sub_250554708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_53Tm_0);
}

uint64_t sub_250554720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_37Tm_0);
}

uint64_t sub_250554738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_38Tm_0);
}

_DWORD *sub_250554750(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_DWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_2504DBC4C(v9, v10);
    *((void *)v4 + 3) = v9;
    *((void *)v4 + 4) = v10;
    uint64_t v11 = a2[5];
    unint64_t v12 = a2[6];
    sub_2504DBC4C(v11, v12);
    *((void *)v4 + 5) = v11;
    *((void *)v4 + 6) = v12;
    v4[14] = *((_DWORD *)a2 + 14);
    *((void *)v4 + 8) = a2[8];
    *((unsigned char *)v4 + 72) = *((unsigned char *)a2 + 72);
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = sub_2505BDA50();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_250554880(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_250511528(*(void *)(a1 + 24), *(void *)(a1 + 32));
  sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_25055490C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  sub_2504DBC4C(v10, v11);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_2505549EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_2504DBC4C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_250511528(v16, v17);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v18;
  uint64_t v19 = *(int *)(a3 + 40);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_250554AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t sub_250554B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_250511528(v10, v11);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_250554C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_73Tm);
}

uint64_t sub_250554C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_74Tm);
}

uint64_t sub_250554C90()
{
  return sub_25055671C();
}

uint64_t *sub_250554CB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (_DWORD *)((char *)v4 + v14);
    uint64_t v16 = (_DWORD *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65B8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *uint64_t v15 = *v16;
      uint64_t v21 = *((void *)v16 + 1);
      unint64_t v22 = *((void *)v16 + 2);
      sub_2504DBC4C(v21, v22);
      *((void *)v15 + 1) = v21;
      *((void *)v15 + 2) = v22;
      *((void *)v15 + 3) = *((void *)v16 + 3);
      *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_250554EB8(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_250511528(*(void *)(v6 + 8), *(void *)(v6 + 16));
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t sub_250554FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = sub_2505BDA50();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (_DWORD *)(a1 + v13);
  uint64_t v15 = (_DWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65B8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    _DWORD *v14 = *v15;
    uint64_t v19 = *((void *)v15 + 1);
    unint64_t v20 = *((void *)v15 + 2);
    sub_2504DBC4C(v19, v20);
    *((void *)v14 + 1) = v19;
    *((void *)v14 + 2) = v20;
    *((void *)v14 + 3) = *((void *)v15 + 3);
    *((unsigned char *)v14 + 32) = *((unsigned char *)v15 + 32);
    v12((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v11);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_250555184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  uint64_t v32 = *(void *)(v13 - 8);
  uint64_t v33 = v13;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v32 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
      uint64_t v27 = *(void *)(v17 + 8);
      unint64_t v28 = *(void *)(v17 + 16);
      sub_2504DBC4C(v27, v28);
      uint64_t v29 = *(void *)(v16 + 8);
      unint64_t v30 = *(void *)(v16 + 16);
      *(void *)(v16 + 8) = v27;
      *(void *)(v16 + 16) = v28;
      sub_250511528(v29, v30);
      uint64_t v31 = *(void *)(v17 + 24);
      *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
      *(void *)(v16 + 24) = v31;
      ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v16 + *(int *)(v18 + 28), v17 + *(int *)(v18 + 28), v33);
      return a1;
    }
    sub_25052D638(v16, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65B8);
    memcpy((void *)v16, (const void *)v17, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v22 = *(void *)(v17 + 8);
  unint64_t v23 = *(void *)(v17 + 16);
  sub_2504DBC4C(v22, v23);
  *(void *)(v16 + 8) = v22;
  *(void *)(v16 + 16) = v23;
  uint64_t v24 = *(void *)(v17 + 24);
  *(unsigned char *)(v16 + 32) = *(unsigned char *)(v17 + 32);
  *(void *)(v16 + 24) = v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v16 + *(int *)(v18 + 28), v17 + *(int *)(v18 + 28), v33);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t sub_2505553F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_2505BDA50();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_DWORD *)(a1 + v11);
  uint64_t v13 = (_DWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65B8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    _DWORD *v12 = *v13;
    *(_OWORD *)(v12 + 2) = *(_OWORD *)(v13 + 2);
    *((void *)v12 + 3) = *((void *)v13 + 3);
    *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_250555588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  uint64_t v24 = *(void *)(v11 - 8);
  uint64_t v25 = v11;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v24 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
      uint64_t v22 = *(void *)(v14 + 8);
      unint64_t v23 = *(void *)(v14 + 16);
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
      sub_250511528(v22, v23);
      *(void *)(v14 + 24) = *(void *)(v15 + 24);
      *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v14 + *(int *)(v16 + 28), v15 + *(int *)(v16 + 28), v25);
      return a1;
    }
    sub_25052D638(v14, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB65B8);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v14 + *(int *)(v16 + 28), v15 + *(int *)(v16 + 28), v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_2505557D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2505557EC);
}

uint64_t sub_2505557EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_269AB65B8);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 == 12)
  {
    uint64_t v5 = *(void *)(a1 + 16) >> 60;
    if (((4 * v5) & 0xC) != 0) {
      return 16 - ((4 * v5) & 0xC | (v5 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_2505BDA50();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 28);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t sub_250555934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250555948);
}

uint64_t sub_250555948(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_269AB65B8);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v10 = sub_2505BDA50();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      uint64_t v12 = v10;
      uint64_t v13 = v6 + *(int *)(a4 + 24);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      return v14(v13, a2, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
      uint64_t v17 = v15;
      uint64_t v18 = v6 + *(int *)(a4 + 28);
      return v16(v18, a2, a2, v17);
    }
  }
  return result;
}

void sub_250555A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_250555ABC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  sub_2505BDA50();
  if (v7 <= 0x3F)
  {
    sub_25052E528(319, a4, a5);
    if (v8 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

_DWORD *sub_250555BB4(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_DWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    *((void *)v4 + 3) = a2[3];
    *((unsigned char *)v4 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_2505BDA50();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_250555CB4(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_250555D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_250555DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v10;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_250555E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_250555F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_250555FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_52Tm_1);
}

uint64_t sub_250555FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_53Tm_1);
}

uint64_t sub_250556004()
{
  return sub_250556DCC();
}

uint64_t sub_25055601C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_37Tm_1);
}

uint64_t sub_250556034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_38Tm_1);
}

_DWORD *sub_25055604C(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_DWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v8;
    *((void *)v4 + 3) = a2[3];
    *((unsigned char *)v4 + 32) = *((unsigned char *)a2 + 32);
    v4[9] = *((_DWORD *)a2 + 9);
    uint64_t v9 = a2[5];
    unint64_t v10 = a2[6];
    sub_2504DBC4C(v9, v10);
    *((void *)v4 + 5) = v9;
    *((void *)v4 + 6) = v10;
    uint64_t v11 = a2[7];
    unint64_t v12 = a2[8];
    sub_2504DBC4C(v11, v12);
    *((void *)v4 + 7) = v11;
    *((void *)v4 + 8) = v12;
    uint64_t v13 = *(int *)(a3 + 40);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = sub_2505BDA50();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_25055617C(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_250511528(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_250556208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  unint64_t v11 = *(void *)(a2 + 64);
  sub_2504DBC4C(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_2505562E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  sub_2504DBC4C(v11, v12);
  uint64_t v13 = *(void *)(a1 + 40);
  unint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  sub_250511528(v13, v14);
  uint64_t v15 = *(void *)(a2 + 56);
  unint64_t v16 = *(void *)(a2 + 64);
  sub_2504DBC4C(v15, v16);
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  sub_250511528(v17, v18);
  uint64_t v19 = *(int *)(a3 + 40);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_2505563E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_25055648C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_250511528(v10, v11);
  uint64_t v12 = *(int *)(a3 + 40);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_25055655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250556570);
}

uint64_t __swift_get_extra_inhabitant_index_73Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250556630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250556644);
}

uint64_t __swift_store_extra_inhabitant_index_74Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_2505566F8()
{
  return sub_25055671C();
}

uint64_t sub_25055671C()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_2505567CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_52Tm_2);
}

uint64_t sub_2505567E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_53Tm_2);
}

uint64_t *sub_2505567FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_2504DBC4C(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_250556900(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_250511528(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_250556984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_250556A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_250556AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_250556B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_250556C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250556C44);
}

uint64_t __swift_get_extra_inhabitant_index_52Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250556D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250556D18);
}

uint64_t __swift_store_extra_inhabitant_index_53Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_250556DCC()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_250556E68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_2504DBC4C(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a2[3];
    unint64_t v10 = a2[4];
    sub_2504DBC4C(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    uint64_t v11 = a2[5];
    unint64_t v12 = a2[6];
    sub_2504DBC4C(v11, v12);
    v4[5] = v11;
    v4[6] = v12;
    uint64_t v13 = a2[7];
    unint64_t v14 = a2[8];
    sub_2504DBC4C(v13, v14);
    v4[7] = v13;
    v4[8] = v14;
    uint64_t v15 = *(int *)(a3 + 36);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v4;
}

uint64_t sub_250556F94(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_250511528(*(void *)(a1 + 24), *(void *)(a1 + 32));
  sub_250511528(*(void *)(a1 + 40), *(void *)(a1 + 48));
  sub_250511528(*(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_250557028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_2504DBC4C(v8, v9);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  sub_2504DBC4C(v10, v11);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  uint64_t v12 = *(void *)(a2 + 56);
  unint64_t v13 = *(void *)(a2 + 64);
  sub_2504DBC4C(v12, v13);
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t sub_250557104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_2504DBC4C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_2504DBC4C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_250511528(v16, v17);
  uint64_t v18 = *(void *)(a2 + 56);
  unint64_t v19 = *(void *)(a2 + 64);
  sub_2504DBC4C(v18, v19);
  uint64_t v20 = *(void *)(a1 + 56);
  unint64_t v21 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  sub_250511528(v20, v21);
  uint64_t v22 = *(int *)(a3 + 36);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

uint64_t sub_250557200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_25055729C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_250511528(v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_250511528(v8, v9);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_250511528(v10, v11);
  uint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_250511528(v12, v13);
  uint64_t v14 = *(int *)(a3 + 36);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_250557364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250557378);
}

uint64_t __swift_get_extra_inhabitant_index_5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250557438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25055744C);
}

uint64_t __swift_store_extra_inhabitant_index_6Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_250557500()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVP.Response(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GKCrypto_RSVP.Response(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_2505575FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_250557618(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_RSVP.Response()
{
  return &type metadata for GKCrypto_RSVP.Response;
}

uint64_t *sub_250557648(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_2504DBC4C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_2505BDA50();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_250557744(uint64_t a1, uint64_t a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  sub_250511528(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_2505BDA50();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *sub_2505577C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_2504DBC4C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_250557874(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_2504DBC4C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_250511528(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_250557930(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_2505579AC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_250511528(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_250511528(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2505BDA50();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_250557A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_250557A60);
}

uint64_t __swift_get_extra_inhabitant_index_37Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_2505BDA50();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_250557B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_250557B34);
}

void *__swift_store_extra_inhabitant_index_38Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_2505BDA50();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_250557BE8()
{
  uint64_t result = sub_2505BDA50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_250557C84()
{
  unint64_t result = qword_269AB6798;
  if (!qword_269AB6798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB6798);
  }
  return result;
}

unint64_t sub_250557CDC()
{
  unint64_t result = qword_269AB67A0;
  if (!qword_269AB67A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB67A0);
  }
  return result;
}

unint64_t sub_250557D34()
{
  unint64_t result = qword_269AB67A8;
  if (!qword_269AB67A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB67A8);
  }
  return result;
}

unint64_t sub_250557D8C()
{
  unint64_t result = qword_269AB67B0;
  if (!qword_269AB67B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB67B0);
  }
  return result;
}

unint64_t sub_250557DE4()
{
  unint64_t result = qword_269AB67B8;
  if (!qword_269AB67B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB67B8);
  }
  return result;
}

unint64_t sub_250557E3C()
{
  unint64_t result = qword_269AB67C0;
  if (!qword_269AB67C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB67C0);
  }
  return result;
}

void sub_250557EBC()
{
  id v0 = objc_allocWithZone(NSString);
  unint64_t v1 = (void *)sub_2505BE130();
  id v2 = objc_msgSend(v0, sel_initWithString_, v1);

  id v3 = objc_msgSend(v2, sel_stringByExpandingTildeInPath);
  uint64_t v4 = sub_2505BE140();
  uint64_t v6 = v5;

  qword_26B202160 = v4;
  *(void *)algn_26B202168 = v6;
}

uint64_t sub_250557F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  uint64_t v9 = v7;
  int v144 = a7;
  uint64_t v139 = a5;
  id v140 = a6;
  uint64_t v138 = a4;
  uint64_t v13 = *v7;
  uint64_t v135 = v8;
  uint64_t v136 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B202150);
  uint64_t v19 = MEMORY[0x270FA5388](v14 - 8, v15, v16, v17, v18);
  uint64_t v141 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19, v21, v22, v23, v24);
  unint64_t v26 = (char *)&v135 - v25;
  uint64_t v145 = sub_2505BD880();
  uint64_t v27 = *(void *)(v145 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v145, v28, v29, v30, v31);
  uint64_t v143 = (char *)&v135 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32, v34, v35, v36, v37);
  uint64_t v142 = (char *)&v135 - v38;
  v9[9] = 0xD000000000000019;
  v9[10] = 0x80000002505CAFD0;
  v9[11] = 0xD000000000000025;
  v9[12] = 0x80000002505CAFF0;
  v9[13] = 0x64756F6C43;
  v9[14] = 0xE500000000000000;
  v9[15] = 0xD000000000000015;
  v9[16] = 0x80000002505CB020;
  v9[17] = 0;
  *((unsigned char *)v9 + 144) = 1;
  v9[19] = 0;
  *((unsigned char *)v9 + 160) = 1;
  v9[22] = 0;
  uint64_t v147 = v27;
  if (!a2)
  {
    if (qword_26B202170 != -1) {
      swift_once();
    }
    a1 = qword_26B202160;
    a2 = *(void *)algn_26B202168;
    swift_bridgeObjectRetain();
  }
  v9[2] = a1;
  uint64_t v9[3] = a2;
  uint64_t v39 = self;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B202198);
  uint64_t v40 = swift_allocObject();
  long long v137 = xmmword_2505BFEC0;
  *(_OWORD *)(v40 + 16) = xmmword_2505BFEC0;
  *(void *)(v40 + 32) = a1;
  *(void *)(v40 + 40) = a2;
  uint64_t v41 = v138;
  *(void *)(v40 + 48) = a3;
  *(void *)(v40 + 56) = v41;
  swift_bridgeObjectRetain();
  uint64_t v42 = (void *)sub_2505BE2A0();
  swift_bridgeObjectRelease();
  id v43 = objc_msgSend(v39, sel_pathWithComponents_, v42);

  uint64_t v44 = sub_2505BE140();
  uint64_t v46 = v45;

  v9[4] = v44;
  v9[5] = v46;
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = v137;
  uint64_t v48 = v9[3];
  *(void *)(v47 + 32) = v9[2];
  *(void *)(v47 + 40) = v48;
  id v49 = v140;
  *(void *)(v47 + 48) = v139;
  *(void *)(v47 + 56) = v49;
  swift_bridgeObjectRetain();
  uint64_t v50 = (void *)sub_2505BE2A0();
  swift_bridgeObjectRelease();
  id v51 = objc_msgSend(v39, sel_pathWithComponents_, v50);

  uint64_t v52 = sub_2505BE140();
  uint64_t v54 = v53;

  v9[6] = v52;
  v9[7] = v54;
  *((unsigned char *)v9 + 64) = v144 & 1;
  v9[17] = 0;
  *((unsigned char *)v9 + 144) = 1;
  v9[19] = 0;
  *((unsigned char *)v9 + 160) = 1;
  unint64_t v55 = (void *)sub_2505BE130();
  id v56 = objc_msgSend(self, sel_bundleWithIdentifier_, v55);

  if (!v56)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v147 + 56))(v26, 1, 1, v145);
LABEL_32:
    sub_250559B00((uint64_t)v26);
    if (qword_26B202180 != -1) {
      swift_once();
    }
    uint64_t v126 = sub_2505BDC40();
    __swift_project_value_buffer(v126, (uint64_t)qword_26B202480);
    os_log_type_t v127 = sub_2505BE3D0();
    uint64_t v128 = sub_2505BDC20();
    os_log_type_t v129 = v127;
    if (os_log_type_enabled(v128, v127))
    {
      uint64_t v130 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v130 = 0;
      _os_log_impl(&dword_2504D2000, v128, v129, "Unable to locate CoreData model", v130, 2u);
      MEMORY[0x25337FF10](v130, -1, -1);
    }
    goto LABEL_41;
  }
  unint64_t v57 = (void *)sub_2505BE130();
  uint64_t v58 = (void *)sub_2505BE130();
  id v59 = objc_msgSend(v56, sel_URLForResource_withExtension_, v57, v58);

  uint64_t v60 = v145;
  uint64_t v61 = (uint64_t)v141;
  if (v59)
  {
    sub_2505BD870();

    uint64_t v62 = v147;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v61, 0, 1, v60);
  }
  else
  {
    uint64_t v62 = v147;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v147 + 56))(v141, 1, 1, v145);
  }
  sub_250559B60(v61, (uint64_t)v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v26, 1, v60) == 1) {
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v142, v26, v60);
  id v63 = objc_allocWithZone(MEMORY[0x263EFF298]);
  swift_bridgeObjectRetain();
  uint64_t v64 = (void *)sub_2505BD860();
  id v65 = objc_msgSend(v63, sel_initWithContentsOfURL_, v64);

  uint64_t v66 = (void *)sub_2505BE130();
  swift_bridgeObjectRelease();
  id v67 = objc_msgSend(self, sel_persistentContainerWithPath_managedObjectModel_, v66, v65);

  if (!v67)
  {
    if (qword_26B202180 != -1) {
      swift_once();
    }
    uint64_t v131 = sub_2505BDC40();
    __swift_project_value_buffer(v131, (uint64_t)qword_26B202480);
    os_log_type_t v132 = sub_2505BE3D0();
    uint64_t v128 = sub_2505BDC20();
    os_log_type_t v133 = v132;
    if (os_log_type_enabled(v128, v132))
    {
      uint64_t v134 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v134 = 0;
      _os_log_impl(&dword_2504D2000, v128, v133, "Unable to init NSPersistentContainer", v134, 2u);
      MEMORY[0x25337FF10](v134, -1, -1);
    }
LABEL_41:

    uint64_t result = sub_2505BE5F0();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v68 = v143;
  sub_2505BD850();
  swift_bridgeObjectRelease();
  id v69 = objc_allocWithZone(MEMORY[0x263EFF328]);
  uint64_t v70 = (void *)sub_2505BD860();
  id v71 = objc_msgSend(v69, sel_initWithURL_, v70);

  uint64_t v72 = *(char **)(v62 + 8);
  uint64_t v147 = v62 + 8;
  uint64_t v141 = v72;
  ((void (*)(char *, uint64_t))v72)(v68, v60);
  if (v144)
  {
    uint64_t v73 = self;
    swift_bridgeObjectRetain();
    uint64_t v74 = (void *)sub_2505BE130();
    swift_bridgeObjectRelease();
    uint64_t v75 = (void *)sub_2505BE130();
    id v76 = objc_msgSend(v73, sel_gpkCrypto_optionsWithContainerIdentifier_apnsServiceName_, v74, v75);

    objc_msgSend(v71, sel_setCloudKitContainerOptions_, v76);
  }
  objc_msgSend(v71, sel_setShouldInferMappingModelAutomatically_, 1, v135, v136);
  objc_msgSend(v71, sel_setShouldMigrateStoreAutomatically_, 1);
  swift_bridgeObjectRetain();
  uint64_t v77 = (void *)sub_2505BE130();
  swift_bridgeObjectRelease();
  objc_msgSend(v71, sel_setConfiguration_, v77);

  __swift_instantiateConcreteTypeFromMangledName(&qword_26B2021A0);
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_2505C4F70;
  *(void *)(v78 + 32) = v71;
  aBlock[0] = v78;
  sub_2505BE2D0();
  sub_250559BC8();
  id v79 = v67;
  id v140 = v71;
  uint64_t v80 = (void *)sub_2505BE2A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v79, sel_setPersistentStoreDescriptions_, v80);

  swift_bridgeObjectRetain();
  uint64_t v81 = v143;
  sub_2505BD850();
  swift_bridgeObjectRelease();
  id v82 = objc_allocWithZone(MEMORY[0x263EFF328]);
  uint64_t v83 = (void *)sub_2505BD860();
  id v84 = objc_msgSend(v82, sel_initWithURL_, v83);

  ((void (*)(char *, uint64_t))v141)(v81, v145);
  if (v144)
  {
    uint64_t v85 = self;
    swift_bridgeObjectRetain();
    uint64_t v86 = (void *)sub_2505BE130();
    swift_bridgeObjectRelease();
    uint64_t v87 = (void *)sub_2505BE130();
    id v88 = objc_msgSend(v85, sel_gpkCrypto_optionsWithContainerIdentifier_apnsServiceName_, v86, v87);

    objc_msgSend(v84, sel_setCloudKitContainerOptions_, v88);
  }
  objc_msgSend(v84, sel_setShouldInferMappingModelAutomatically_, 1);
  objc_msgSend(v84, sel_setShouldMigrateStoreAutomatically_, 1);
  swift_bridgeObjectRetain();
  uint64_t v89 = (void *)sub_2505BE130();
  swift_bridgeObjectRelease();
  objc_msgSend(v84, sel_setConfiguration_, v89);

  id v90 = v79;
  uint64_t v91 = v84;
  id v92 = objc_msgSend(v90, sel_persistentStoreDescriptions);
  unint64_t v93 = sub_2505BE2C0();

  aBlock[0] = v93;
  if (v93 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v125 = sub_2505BE600();
    swift_bridgeObjectRelease();
    if (v125 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
  }
  sub_250559C08(0, 0, (uint64_t)v91);
  uint64_t v94 = (void *)sub_2505BE2A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v90, sel_setPersistentStoreDescriptions_, v94);

  id v95 = objc_msgSend(v90, sel_persistentStoreDescriptions);
  unint64_t v96 = sub_2505BE2C0();

  sub_250558F50((uint64_t)v91, v96);
  uint64_t v98 = v97;
  char v100 = v99;
  swift_bridgeObjectRelease();
  v9[17] = v98;
  *((unsigned char *)v9 + 144) = v100 & 1;
  if (qword_26B202180 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v101 = sub_2505BDC40();
  __swift_project_value_buffer(v101, (uint64_t)qword_26B202480);
  uint64_t v102 = sub_2505BDC20();
  os_log_type_t v103 = sub_2505BE3E0();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v104 = 0;
    _os_log_impl(&dword_2504D2000, v102, v103, "Initialized persistent store for strict peers container", v104, 2u);
    MEMORY[0x25337FF10](v104, -1, -1);
    char v105 = v91;
  }
  else
  {
    char v105 = v102;
    uint64_t v102 = v91;
  }
  uint64_t v106 = v145;
  uint64_t v107 = v140;

  id v108 = objc_msgSend(v90, sel_persistentStoreDescriptions);
  unint64_t v109 = sub_2505BE2C0();

  sub_250558F50((uint64_t)v107, v109);
  uint64_t v111 = v110;
  char v113 = v112;
  swift_bridgeObjectRelease();
  v9[19] = v111;
  *((unsigned char *)v9 + 160) = v113 & 1;
  uint64_t v114 = sub_2505BDC20();
  os_log_type_t v115 = sub_2505BE3E0();
  if (os_log_type_enabled(v114, v115))
  {
    uint64_t v116 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v116 = 0;
    _os_log_impl(&dword_2504D2000, v114, v115, "Initialized persistent store for all peers container", v116, 2u);
    MEMORY[0x25337FF10](v116, -1, -1);
  }

  uint64_t v117 = swift_allocObject();
  *(void *)(v117 + 16) = 0;
  uint64_t v118 = (void **)(v117 + 16);
  aBlock[4] = sub_250559F2C;
  aBlock[5] = v117;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2505592DC;
  aBlock[3] = &block_descriptor_0;
  uint64_t v119 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v90, sel_loadPersistentStoresWithCompletionHandler_, v119);
  _Block_release(v119);
  swift_beginAccess();
  uint64_t v120 = *v118;
  if (v120)
  {
    v120;
    swift_willThrow();

    ((void (*)(char *, uint64_t))v141)(v142, v106);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v121 = sub_2505BDC20();
    uint64_t v122 = sub_2505BE3E0();
    if (os_log_type_enabled(v121, (os_log_type_t)v122))
    {
      uint64_t v123 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v123 = 0;
      _os_log_impl(&dword_2504D2000, v121, (os_log_type_t)v122, "Persistent container created", v123, 2u);
      MEMORY[0x25337FF10](v123, -1, -1);
    }

    ((void (*)(char *, uint64_t))v141)(v142, v106);
    v9[21] = v90;
    swift_release();
  }
  return (uint64_t)v9;
}

void sub_250558F50(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x25337F460](0, a2);
      }
      else
      {
        if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v4 = *(id *)(a2 + 32);
      }
      uint64_t v5 = v4;
      sub_250559BC8();
      char v6 = sub_2505BE400();

      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; ; ++i)
        {
          unint64_t v11 = i + 1;
          if (__OFADD__(i, 1)) {
            break;
          }
          if (v11 == v3) {
            return;
          }
          if ((a2 & 0xC000000000000001) != 0)
          {
            id v8 = (id)MEMORY[0x25337F460](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_18;
            }
            if (v11 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_19;
            }
            id v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          uint64_t v9 = v8;
          char v10 = sub_2505BE400();

          if (v10) {
            return;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        uint64_t v3 = sub_2505BE600();
        swift_bridgeObjectRelease();
        if (v3) {
          continue;
        }
      }
      return;
    }
  }
}

void sub_2505590DC(int a1, id a2, uint64_t a3)
{
  if (a2)
  {
    id v5 = a2;
    if (qword_26B202180 != -1) {
      swift_once();
    }
    char v6 = (void **)(a3 + 16);
    uint64_t v7 = sub_2505BDC40();
    __swift_project_value_buffer(v7, (uint64_t)qword_26B202480);
    os_log_type_t v8 = sub_2505BE3D0();
    id v9 = a2;
    id v10 = a2;
    unint64_t v11 = sub_2505BDC20();
    os_log_type_t v12 = v8;
    if (os_log_type_enabled(v11, v8))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      id v15 = a2;
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      sub_2505BE430();
      void *v14 = v18;

      _os_log_impl(&dword_2504D2000, v11, v12, "Unable to load persistent stores: %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB67D0);
      swift_arrayDestroy();
      MEMORY[0x25337FF10](v14, -1, -1);
      MEMORY[0x25337FF10](v13, -1, -1);
    }
    else
    {
    }
    uint64_t v16 = sub_2505BD830();

    swift_beginAccess();
    uint64_t v17 = *v6;
    *char v6 = (void *)v16;
  }
}

void sub_2505592DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

id sub_250559368()
{
  unint64_t v1 = *(void **)(v0 + 176);
  if (v1)
  {
    id v2 = *(id *)(v0 + 176);
  }
  else
  {
    id v3 = objc_msgSend(*(id *)(v0 + 168), sel_newBackgroundContext);
    objc_msgSend(v3, sel_setMergePolicy_, *MEMORY[0x263EFF060]);
    id v4 = *(void **)(v0 + 176);
    *(void *)(v0 + 176) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t sub_2505593E8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_250559448()
{
  sub_2505593E8();
  return swift_deallocClassInstance();
}

uint64_t static SchemaInitializer.initializeCKSchema()()
{
  return MEMORY[0x270FA2498](sub_250559508, 0, 0);
}

uint64_t sub_250559508()
{
  uint64_t v1 = (void **)(v0 + 2);
  if (qword_26B202478 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_25051AD8C((uint64_t)&byte_26B202498, (uint64_t)(v0 + 2));
  uint64_t v2 = v0[28];
  if (!v2) {
    return sub_2505BE5F0();
  }
  swift_retain();
  sub_25051ADE8((uint64_t)(v0 + 2));
  id v3 = *(id *)(v2 + 168);
  swift_release();
  *uint64_t v1 = 0;
  unsigned __int8 v4 = objc_msgSend(v3, sel_initializeCloudKitSchemaWithOptions_error_, 0, v0 + 2);
  id v5 = *v1;
  if (v4)
  {
    uint64_t v6 = qword_26B202180;
    id v7 = v5;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_2505BDC40();
    __swift_project_value_buffer(v8, (uint64_t)qword_26B202480);
    id v9 = sub_2505BDC20();
    os_log_type_t v10 = sub_2505BE3E0();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl(&dword_2504D2000, v9, v10, "successfully initialized CloudKit schema", v11, 2u);
      MEMORY[0x25337FF10](v11, -1, -1);
    }

    goto LABEL_16;
  }
  id v13 = v5;
  uint64_t v14 = (void *)sub_2505BD840();

  swift_willThrow();
  if (qword_26B202180 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_2505BDC40();
  __swift_project_value_buffer(v15, (uint64_t)qword_26B202480);
  id v16 = v14;
  id v17 = v14;
  id v9 = sub_2505BDC20();
  os_log_type_t v18 = sub_2505BE3E0();
  if (!os_log_type_enabled(v9, v18))
  {

LABEL_16:
    goto LABEL_17;
  }
  uint64_t v19 = (uint8_t *)swift_slowAlloc();
  uint64_t v24 = v3;
  uint64_t v20 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v19 = 138412290;
  id v21 = v14;
  uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
  v0[2] = v22;
  sub_2505BE430();
  *uint64_t v20 = v22;

  _os_log_impl(&dword_2504D2000, v9, v18, "error initializing CloudKit schema: %@", v19, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB67D0);
  swift_arrayDestroy();
  MEMORY[0x25337FF10](v20, -1, -1);
  MEMORY[0x25337FF10](v19, -1, -1);

LABEL_17:
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t SchemaInitializer.deinit()
{
  return v0;
}

uint64_t SchemaInitializer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_25055995C(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_250559994(uint64_t (*a1)(void))
{
  return a1();
}

void sub_2505599BC(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  sub_2505BE430();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t type metadata accessor for CoreDataUtils()
{
  return self;
}

uint64_t sub_250559A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))() & 1;
}

uint64_t type metadata accessor for SchemaInitializer()
{
  return self;
}

uint64_t method lookup function for SchemaInitializer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SchemaInitializer);
}

uint64_t sub_250559B00(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B202150);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_250559B60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B202150);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_250559BC8()
{
  unint64_t result = qword_26B202190;
  if (!qword_26B202190)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B202190);
  }
  return result;
}

uint64_t sub_250559C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_2505BE600();
  swift_bridgeObjectRelease();
  if (v23 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_2505BE600();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_2505BE600();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x25337F470](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v15 = (void *)(v13 + 32 + 8 * v6);
  sub_250559BC8();
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_2505BE600();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_21:
        if (v17 < 0)
        {
LABEL_46:
          uint64_t result = sub_2505BE650();
          __break(1u);
          return result;
        }
        os_log_type_t v18 = (char *)(v15 + 1);
        uint64_t v19 = (char *)(v13 + 32 + 8 * v5);
        if (v15 + 1 != (void *)v19 || v18 >= &v19[8 * v17]) {
          memmove(v18, v19, 8 * v17);
        }
        if (!(v7 >> 62))
        {
          uint64_t v20 = *(void *)(v13 + 16);
          uint64_t v21 = v20 + v8;
          if (!__OFADD__(v20, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v21;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_2505BE600();
        swift_bridgeObjectRelease();
        uint64_t v21 = v25 + v8;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v16 - v5;
      if (!__OFSUB__(v16, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *uint64_t v15 = v3;
  return sub_2505BE2D0();
}

uint64_t sub_250559EF4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_250559F2C(int a1, void *a2)
{
  sub_2505590DC(a1, a2, v2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_250559F4C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_2505BD970();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v8, v10, v11, v12, v13);
  uint64_t v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14, v17, v18, v19, v20);
  uint64_t v22 = &v29[-v21];
  switch(a4 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_2504DBC4C(a3, a4);
      sub_2504DBC4C(a3, a4);
      break;
    default:
      break;
  }
  sub_2505BD980();
  sub_250511528(a3, a4);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_2504DBC4C(a1, a2);
      sub_2504DBC4C(a1, a2);
      break;
    default:
      break;
  }
  sub_2505BD980();
  sub_250511528(a1, a2);
  sub_25055B148(&qword_269AB67F0, MEMORY[0x263F06F40]);
  while (1)
  {
    sub_2505BE420();
    if (v34)
    {
      unint64_t v26 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
      v26(v22, v8);
      sub_2505BE420();
      v26(v16, v8);
      char v25 = v32 ^ 1;
      return v25 & 1;
    }
    unsigned int v23 = v33;
    sub_2505BE420();
    if (v31) {
      goto LABEL_10;
    }
    if (v23 < v30) {
      break;
    }
    if (v30 < v23)
    {
LABEL_10:
      uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
      v24(v16, v8);
      v24(v22, v8);
      char v25 = 0;
      return v25 & 1;
    }
  }
  uint64_t v27 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v27(v16, v8);
  v27(v22, v8);
  char v25 = 1;
  return v25 & 1;
}

uint64_t sub_25055A26C@<X0>(uint64_t *a1@<X8>)
{
  id v4 = objc_msgSend(v1, sel_rawData);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = sub_2505BD940();
    unint64_t v8 = v7;

    uint64_t v9 = sub_25055A3B8();
    if (v2)
    {
      return sub_250511528(v6, v8);
    }
    else
    {
      uint64_t v13 = v9;
      uint64_t v14 = v10;
      uint64_t v15 = *(uint64_t (**)(uint64_t, unint64_t, ValueMetadata *, uint64_t))(v10 + 64);
      a1[3] = (uint64_t)v9;
      a1[4] = v10;
      __swift_allocate_boxed_opaque_existential_1(a1);
      return v15(v6, v8, v13, v14);
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    swift_allocError();
    *(_WORD *)uint64_t v12 = 392;
    *(_OWORD *)(v12 + 8) = xmmword_2505C5060;
    *(_OWORD *)(v12 + 24) = xmmword_2505C5070;
    *(void *)(v12 + 40) = 0x80000002505CB1B0;
    return swift_willThrow();
  }
}

ValueMetadata *sub_25055A3B8()
{
  id v1 = [(ValueMetadata *)v0 seedType];
  if (v1 == (id)1)
  {
    uint64_t v0 = &type metadata for MemberSeed;
    sub_250522A2C();
  }
  else if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    swift_allocError();
    *(_WORD *)uint64_t v2 = 391;
    *(_OWORD *)(v2 + 8) = xmmword_2505C5080;
    *(_OWORD *)(v2 + 24) = xmmword_2505C5090;
    *(void *)(v2 + 40) = 0x80000002505CB1B0;
    swift_willThrow();
  }
  else
  {
    uint64_t v0 = &type metadata for AdminSeed;
    sub_25051CA18();
  }
  return v0;
}

id sub_25055A4E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GroupKitCryptoGroupSeed();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GroupKitCryptoGroupSeed()
{
  return self;
}

uint64_t sub_25055A538(void *a1)
{
  objc_super v2 = v1;
  id v140 = a1;
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_2505BD9F0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5, v6, v7, v8);
  uint64_t v135 = &v128[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB67D8);
  MEMORY[0x270FA5388](v10, v11, v12, v13, v14);
  uint64_t v16 = &v128[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB67E0);
  uint64_t v22 = MEMORY[0x270FA5388](v17 - 8, v18, v19, v20, v21);
  os_log_type_t v133 = &v128[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = MEMORY[0x270FA5388](v22, v24, v25, v26, v27);
  uint64_t v134 = &v128[-v29];
  uint64_t v34 = MEMORY[0x270FA5388](v28, v30, v31, v32, v33);
  uint64_t v131 = &v128[-v35];
  uint64_t v40 = MEMORY[0x270FA5388](v34, v36, v37, v38, v39);
  os_log_type_t v132 = &v128[-v41];
  uint64_t v46 = MEMORY[0x270FA5388](v40, v42, v43, v44, v45);
  uint64_t v48 = &v128[-v47];
  uint64_t v53 = MEMORY[0x270FA5388](v46, v49, v50, v51, v52);
  unint64_t v55 = &v128[-v54];
  MEMORY[0x270FA5388](v53, v56, v57, v58, v59);
  uint64_t v61 = &v128[-v60];
  id v138 = v2;
  id v62 = objc_msgSend(v2, sel_groupID);
  if (v62)
  {
    id v63 = v62;
    sub_2505BD9B0();

    uint64_t v64 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    id v65 = v61;
    uint64_t v66 = 0;
  }
  else
  {
    uint64_t v64 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    id v65 = v61;
    uint64_t v66 = 1;
  }
  uint64_t v139 = v64;
  v64(v65, v66, 1, v3);
  id v67 = objc_msgSend(v140, sel_groupID);
  if (v67)
  {
    uint64_t v68 = v67;
    sub_2505BD9B0();

    uint64_t v69 = 0;
  }
  else
  {
    uint64_t v69 = 1;
  }
  v139(v55, v69, 1, v3);
  uint64_t v70 = (uint64_t)&v16[*(int *)(v10 + 48)];
  sub_25055AF68((uint64_t)v61, (uint64_t)v16);
  sub_25055AF68((uint64_t)v55, v70);
  uint64_t v137 = v4;
  id v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v71((uint64_t)v16, 1, v3) == 1)
  {
    sub_2504DAF60((uint64_t)v55, &qword_269AB67E0);
    sub_2504DAF60((uint64_t)v61, &qword_269AB67E0);
    if (v71(v70, 1, v3) == 1)
    {
      uint64_t v130 = v4 + 56;
      sub_2504DAF60((uint64_t)v16, &qword_269AB67E0);
      goto LABEL_14;
    }
LABEL_12:
    sub_2504DAF60((uint64_t)v16, &qword_269AB67D8);
    goto LABEL_32;
  }
  sub_25055AF68((uint64_t)v16, (uint64_t)v48);
  if (v71(v70, 1, v3) == 1)
  {
    sub_2504DAF60((uint64_t)v55, &qword_269AB67E0);
    sub_2504DAF60((uint64_t)v61, &qword_269AB67E0);
    (*(void (**)(unsigned char *, uint64_t))(v137 + 8))(v48, v3);
    goto LABEL_12;
  }
  uint64_t v130 = v4 + 56;
  uint64_t v72 = v137;
  uint64_t v73 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v137 + 32);
  uint64_t v136 = v71;
  uint64_t v74 = v135;
  v73(v135, v70, v3);
  sub_25055B148((unint64_t *)&qword_269AB67E8, MEMORY[0x263F07508]);
  int v129 = sub_2505BE120();
  uint64_t v75 = *(void (**)(unsigned char *, uint64_t))(v72 + 8);
  v75(v74, v3);
  sub_2504DAF60((uint64_t)v55, &qword_269AB67E0);
  sub_2504DAF60((uint64_t)v61, &qword_269AB67E0);
  v75(v48, v3);
  id v71 = v136;
  sub_2504DAF60((uint64_t)v16, &qword_269AB67E0);
  if ((v129 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_14:
  uint64_t v136 = v71;
  id v76 = objc_msgSend(v138, sel_userID);
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = sub_2505BE140();
    uint64_t v80 = v79;
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v80 = 0;
  }
  id v81 = objc_msgSend(v140, sel_userID);
  id v82 = v136;
  if (!v81)
  {
    if (!v80) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  uint64_t v83 = v81;
  uint64_t v84 = sub_2505BE140();
  uint64_t v86 = v85;

  if (!v80)
  {
    if (!v86) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (!v86)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (v78 != v84 || v80 != v86)
  {
    char v87 = sub_2505BE780();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v87) {
      goto LABEL_28;
    }
LABEL_32:
    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    swift_allocError();
    *(_WORD *)uint64_t v95 = 402;
    *(_OWORD *)(v95 + 8) = xmmword_2505C50A0;
    *(void *)(v95 + 24) = 0x80000002505CB190;
    *(void *)(v95 + 32) = 0xD000000000000072;
    *(void *)(v95 + 40) = 0x80000002505CB1B0;
    swift_willThrow();
    return v3 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_28:
  id v88 = objc_msgSend(v138, sel_groupVersion);
  if (v88 != objc_msgSend(v140, sel_groupVersion)) {
    goto LABEL_32;
  }
  id v89 = objc_msgSend(v138, sel_seedType);
  if (v89 != objc_msgSend(v140, sel_seedType)) {
    goto LABEL_32;
  }
  id v90 = objc_msgSend(v138, sel_dedupeID);
  if (v90)
  {
    uint64_t v91 = v90;
    uint64_t v92 = (uint64_t)v131;
    sub_2505BD9B0();

    uint64_t v93 = 0;
  }
  else
  {
    uint64_t v93 = 1;
    uint64_t v92 = (uint64_t)v131;
  }
  uint64_t v94 = (uint64_t)v132;
  v139((unsigned char *)v92, v93, 1, v3);
  sub_25055B02C(v92, v94);
  if (v82(v94, 1, v3))
  {
    sub_2504DAF60(v94, &qword_269AB67E0);
    uint64_t v97 = 0;
    unint64_t v98 = 0xC000000000000000;
  }
  else
  {
    uint64_t v99 = v137;
    char v100 = v135;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v137 + 16))(v135, v94, v3);
    sub_2504DAF60(v94, &qword_269AB67E0);
    uint64_t __src = sub_2505BD9D0();
    char v142 = v101;
    char v143 = v102;
    char v144 = v103;
    char v145 = v104;
    char v146 = v105;
    char v147 = v106;
    char v148 = v107;
    char v149 = v108;
    uint64_t v97 = sub_25055B094(&__src, 16);
    unint64_t v98 = v109;
    (*(void (**)(unsigned char *, uint64_t))(v99 + 8))(v100, v3);
  }
  id v110 = objc_msgSend(v140, sel_dedupeID);
  if (v110)
  {
    uint64_t v111 = v110;
    uint64_t v112 = (uint64_t)v133;
    sub_2505BD9B0();

    uint64_t v113 = 0;
  }
  else
  {
    uint64_t v113 = 1;
    uint64_t v112 = (uint64_t)v133;
  }
  uint64_t v114 = (uint64_t)v134;
  v139((unsigned char *)v112, v113, 1, v3);
  sub_25055B02C(v112, v114);
  if (v136(v114, 1, v3))
  {
    sub_2504DAF60(v114, &qword_269AB67E0);
    uint64_t v115 = 0;
    unint64_t v116 = 0xC000000000000000;
  }
  else
  {
    uint64_t v117 = v137;
    uint64_t v118 = v135;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v137 + 16))(v135, v114, v3);
    sub_2504DAF60(v114, &qword_269AB67E0);
    uint64_t __src = sub_2505BD9D0();
    char v142 = v119;
    char v143 = v120;
    char v144 = v121;
    char v145 = v122;
    char v146 = v123;
    char v147 = v124;
    char v148 = v125;
    char v149 = v126;
    uint64_t v115 = sub_25055B094(&__src, 16);
    unint64_t v116 = v127;
    (*(void (**)(unsigned char *, uint64_t))(v117 + 8))(v118, v3);
  }
  LOBYTE(v3) = sub_250559F4C(v97, v98, v115, v116);
  sub_250511528(v97, v98);
  sub_250511528(v115, v116);
  return v3 & 1;
}

uint64_t sub_25055AF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB67E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_25055AFD0()
{
  unint64_t result = qword_269AB59E8;
  if (!qword_269AB59E8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269AB59E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB59E8);
  }
  return result;
}

uint64_t sub_25055B02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB67E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25055B094(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_250572178(__src, &__src[a2]);
  }
  sub_2505BD810();
  swift_allocObject();
  sub_2505BD7C0();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  sub_2505BD8C0();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_25055B148(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x25337FF10);
  }
  return result;
}

uint64_t sub_25055B1E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_25055B1F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_25055B20C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_25055B220(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_25055B234(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_25055B25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t sub_25055B284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t sub_25055B2AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

ValueMetadata *type metadata accessor for MemberSeed()
{
  return &type metadata for MemberSeed;
}

uint64_t destroy for AdminSeed(uint64_t *a1)
{
  uint64_t result = sub_250511528(*a1, a1[1]);
  unint64_t v3 = a1[3];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[2];
    return sub_250511528(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for AdminSeed(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_2504DBC4C(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2 + 2;
  unint64_t v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_2504DBC4C(*v6, v7);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t *assignWithCopy for AdminSeed(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_2504DBC4C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_250511528(v6, v7);
  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = *v8;
      sub_2504DBC4C(*v8, v9);
      uint64_t v12 = a1[2];
      unint64_t v13 = a1[3];
      a1[2] = v11;
      a1[3] = v9;
      sub_250511528(v12, v13);
      return a1;
    }
    sub_250524984((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    return a1;
  }
  uint64_t v10 = *v8;
  sub_2504DBC4C(*v8, v9);
  a1[2] = v10;
  a1[3] = v9;
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for AdminSeed(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_250511528(v4, v5);
  uint64_t v6 = (uint64_t *)(a2 + 16);
  unint64_t v7 = a1[3];
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = a1[2];
      a1[2] = *v6;
      a1[3] = v8;
      sub_250511528(v9, v7);
      return a1;
    }
    sub_250524984((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for AdminSeed(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AdminSeed(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdminSeed()
{
  return &type metadata for AdminSeed;
}

uint64_t sub_25055B5D4(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v6 = (int)v6;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_25;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v6 = BYTE6(a2);
LABEL_6:
      if (v6 == 32)
      {
        if (*(void *)(v2 + 24) >> 60 == 15)
        {
          *(void *)(v2 + 16) = a1;
          *(void *)(v2 + 24) = a2;
          return sub_2504DBC4C(a1, a2);
        }
        if (qword_269AB5418 != -1) {
LABEL_26:
        }
          swift_once();
        uint64_t v15 = sub_2505BDC40();
        __swift_project_value_buffer(v15, (uint64_t)qword_269AC3188);
        os_log_type_t v16 = sub_2505BE3D0();
        uint64_t v17 = sub_2505BDC20();
        os_log_type_t v18 = v16;
        if (os_log_type_enabled(v17, v16))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl(&dword_2504D2000, v17, v18, "attempted to set admin seed diversifier when it has already been set", v19, 2u);
          MEMORY[0x25337FF10](v19, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_25055AFD0();
        swift_allocError();
        *(unsigned char *)uint64_t v20 = 110;
        uint64_t v21 = 143;
      }
      else
      {
LABEL_9:
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v11 = sub_2505BDC40();
        __swift_project_value_buffer(v11, (uint64_t)qword_269AC3188);
        os_log_type_t v12 = sub_2505BE3D0();
        sub_2504DBC4C(a1, a2);
        unint64_t v13 = sub_2505BDC20();
        if (os_log_type_enabled(v13, v12))
        {
          uint64_t v14 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 134218240;
          sub_2505BE430();
          *(_WORD *)(v14 + 12) = 2048;
          switch((int)v3)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(a1), a1)) {
                goto LABEL_21;
              }
              __break(1u);
LABEL_28:
              __break(1u);
              JUMPOUT(0x25055B98CLL);
            case 2:
              if (!__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
                goto LABEL_21;
              }
              goto LABEL_28;
            default:
LABEL_21:
              sub_2505BE430();
              sub_250511528(a1, a2);
              _os_log_impl(&dword_2504D2000, v13, v12, "invalid admin seedDiversifier length, expected %ld got %ld", (uint8_t *)v14, 0x16u);
              MEMORY[0x25337FF10](v14, -1, -1);
              break;
          }
        }
        else
        {
          sub_250511528(a1, a2);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_25055AFD0();
        swift_allocError();
        *(unsigned char *)uint64_t v20 = 4;
        uint64_t v21 = 139;
      }
      *(unsigned char *)(v20 + 1) = 1;
      *(void *)(v20 + 8) = v21;
      *(void *)(v20 + 16) = 0xD000000000000024;
      *(void *)(v20 + 24) = 0x80000002505CB6C0;
      *(void *)(v20 + 32) = 0xD000000000000052;
      *(void *)(v20 + 40) = 0x80000002505C9310;
      return swift_willThrow();
  }
}

unint64_t sub_25055B9AC(long long *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v173 = a6;
  uint64_t v170 = a5;
  uint64_t v166 = a4;
  uint64_t v172 = a1;
  uint64_t v162 = sub_2505BE410();
  uint64_t v161 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162, v14, v15, v16, v17);
  uint64_t v160 = (char *)v146 - v18;
  uint64_t v163 = a9;
  uint64_t v178 = type metadata accessor for VersionedSeed();
  uint64_t v23 = MEMORY[0x270FA5388](v178, v19, v20, v21, v22);
  uint64_t v176 = (_DWORD *)((char *)v146 - v24);
  uint64_t v25 = *(void *)(a7 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v23, v26, v27, v28, v29);
  uint64_t v158 = (char *)v146 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x270FA5388](v30, v32, v33, v34, v35);
  uint64_t v159 = (char *)v146 - v37;
  uint64_t v42 = MEMORY[0x270FA5388](v36, v38, v39, v40, v41);
  uint64_t v174 = (char *)v146 - v43;
  MEMORY[0x270FA5388](v42, v44, v45, v46, v47);
  uint64_t v177 = (char *)v146 - v48;
  uint64_t v180 = sub_2505BDCE0();
  uint64_t v168 = *(void *)(v180 - 8);
  uint64_t v53 = MEMORY[0x270FA5388](v180, v49, v50, v51, v52);
  uint64_t v175 = (char *)v146 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v53, v55, v56, v57, v58);
  uint64_t v179 = (char *)v146 - v59;
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269AB6818);
  uint64_t v169 = a10;
  uint64_t v61 = *(void *)(a10 + 8);
  unint64_t v62 = sub_25055F2C0();
  uint64_t v171 = a8;
  *(void *)&long long v181 = a8;
  *((void *)&v181 + 1) = v60;
  uint64_t v165 = (uint64_t (*)(uint64_t, uint64_t))v60;
  uint64_t v182 = v61;
  unint64_t v183 = v62;
  uint64_t v63 = sub_2505BE4E0();
  MEMORY[0x270FA5388](v63, v64, v65, v66, v67);
  if (a3 >= a2)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v69 = sub_2505BDC40();
    __swift_project_value_buffer(v69, (uint64_t)qword_269AC3188);
    os_log_type_t v70 = sub_2505BE3D0();
    id v71 = sub_2505BDC20();
    unint64_t v72 = v70;
    if (os_log_type_enabled(v71, v70))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl(&dword_2504D2000, v71, (os_log_type_t)v72, "failed opening blob chain due to outdated version", v73, 2u);
      MEMORY[0x25337FF10](v73, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    swift_allocError();
    *(_WORD *)uint64_t v74 = 361;
    long long v75 = xmmword_2505C50F0;
    goto LABEL_27;
  }
  long long v167 = *v172;
  uint64_t v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v150 = a7;
  uint64_t v149 = v25 + 48;
  char v148 = v68;
  if (v68(v173, 1, a7) == 1)
  {
    if (!a3)
    {
      a3 = 1;
      goto LABEL_11;
    }
LABEL_19:
    if (qword_269AB5418 == -1)
    {
LABEL_20:
      uint64_t v106 = sub_2505BDC40();
      __swift_project_value_buffer(v106, (uint64_t)qword_269AC3188);
      os_log_type_t v107 = sub_2505BE3D0();
      char v108 = sub_2505BDC20();
      unint64_t v72 = v107;
      if (os_log_type_enabled(v108, v107))
      {
        unint64_t v109 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v109 = 0;
        _os_log_impl(&dword_2504D2000, v108, (os_log_type_t)v72, "failed opening blob chain due to invalid version", v109, 2u);
        MEMORY[0x25337FF10](v109, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_25055AFD0();
      swift_allocError();
      *(_WORD *)uint64_t v74 = 363;
      long long v75 = xmmword_2505C5100;
      goto LABEL_27;
    }
LABEL_42:
    swift_once();
    goto LABEL_20;
  }
  if (!a3) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v147 = v25;
  uint64_t v76 = sub_2505BE380();
  if (a2 < a3)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v76 != a2 - a3)
  {
    if (qword_269AB5418 == -1)
    {
LABEL_24:
      uint64_t v110 = sub_2505BDC40();
      __swift_project_value_buffer(v110, (uint64_t)qword_269AC3188);
      os_log_type_t v111 = sub_2505BE3D0();
      uint64_t v112 = sub_2505BDC20();
      unint64_t v72 = v111;
      if (os_log_type_enabled(v112, v111))
      {
        uint64_t v113 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v113 = 0;
        _os_log_impl(&dword_2504D2000, v112, (os_log_type_t)v72, "failed opening blob chain due to wrong number of seed blobs", v113, 2u);
        MEMORY[0x25337FF10](v113, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_25055AFD0();
      swift_allocError();
      *(_WORD *)uint64_t v74 = 370;
      long long v75 = xmmword_2505C5110;
LABEL_27:
      *(_OWORD *)(v74 + 8) = v75;
      *(void *)(v74 + 24) = 0x80000002505CB4D0;
      *(void *)(v74 + 32) = 0xD000000000000052;
      *(void *)(v74 + 40) = 0x80000002505C9310;
      swift_willThrow();
      return v72;
    }
LABEL_44:
    swift_once();
    goto LABEL_24;
  }
  if (a3 > a2)
  {
    __break(1u);
    goto LABEL_44;
  }
  *(void *)&long long v181 = __PAIR64__(a2, a3);
  sub_2505BE7C0();
  swift_getWitnessTable();
  uint64_t v77 = sub_2505BE240();
  uint64_t v78 = v168;
  uint64_t v80 = v179;
  uint64_t v79 = v180;
  (*(void (**)(char *, uint64_t, uint64_t))(v168 + 16))(v179, v166, v180);
  uint64_t v81 = v178;
  uint64_t v184 = sub_2505BE2E0();
  uint64_t v82 = *(void *)(v77 + 16);
  v146[1] = v77;
  if (!v82)
  {
    uint64_t v86 = v150;
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v115 = v161;
    unint64_t v116 = v160;
    uint64_t v117 = v162;
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v160, v173, v162);
    if (v148(v116, 1, v86) == 1)
    {
      (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
LABEL_35:
      *(void *)&long long v181 = v184;
      sub_2505BE320();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      unint64_t v72 = sub_2505BE240();
      (*(void (**)(char *, uint64_t))(v168 + 8))(v80, v79);
      swift_bridgeObjectRelease();
      return v72;
    }
    uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v147 + 32);
    v118(v159, v116, v86);
    uint64_t v119 = swift_bridgeObjectRetain();
    uint64_t v120 = MEMORY[0x25337F270](v119, v81);
    swift_bridgeObjectRelease();
    if (__OFSUB__(v120, 1))
    {
      __break(1u);
    }
    else
    {
      char v121 = v176;
      sub_2505BE330();
      char v122 = (char *)v121 + *(int *)(v81 + 36);
      char v123 = v158;
      v118(v158, v122, v86);
      uint64_t v124 = v163;
      char v125 = *(uint64_t (**)(uint64_t, uint64_t))(v163 + 40);
      uint64_t v126 = v125(v86, v163);
      unint64_t v128 = v127;
      uint64_t v129 = v125(v86, v124);
      unint64_t v131 = v130;
      uint64_t v132 = v86;
      char v133 = sub_25050C6A8(v126, v128, v129, v130);
      sub_250511528(v129, v131);
      sub_250511528(v126, v128);
      if (v133)
      {
        uint64_t v134 = *(void (**)(char *, uint64_t))(v147 + 8);
        v134(v123, v132);
        v134(v159, v132);
        uint64_t v80 = v179;
        uint64_t v79 = v180;
        goto LABEL_35;
      }
      uint64_t v118 = (void (*)(char *, char *, uint64_t))v180;
      if (qword_269AB5418 == -1)
      {
LABEL_38:
        uint64_t v135 = sub_2505BDC40();
        __swift_project_value_buffer(v135, (uint64_t)qword_269AC3188);
        os_log_type_t v136 = sub_2505BE3D0();
        uint64_t v137 = sub_2505BDC20();
        os_log_type_t v138 = v136;
        BOOL v139 = os_log_type_enabled(v137, v136);
        uint64_t v140 = v150;
        uint64_t v141 = v179;
        char v142 = v158;
        if (v139)
        {
          char v143 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v143 = 0;
          _os_log_impl(&dword_2504D2000, v137, v138, "failed opening blob chain due to mismatch seeds", v143, 2u);
          MEMORY[0x25337FF10](v143, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_25055AFD0();
        swift_allocError();
        *(_WORD *)uint64_t v144 = 364;
        *(_OWORD *)(v144 + 8) = xmmword_2505C5120;
        *(void *)(v144 + 24) = 0x80000002505CB4D0;
        *(void *)(v144 + 32) = 0xD000000000000052;
        *(void *)(v144 + 40) = 0x80000002505C9310;
        swift_willThrow();
        unint64_t v72 = v147 + 8;
        char v145 = *(void (**)(char *, uint64_t))(v147 + 8);
        v145(v142, v140);
        v145(v159, v140);
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v168 + 8))(v141, v118);
        swift_bridgeObjectRelease();
        return v72;
      }
    }
    swift_once();
    goto LABEL_38;
  }
  uint64_t v83 = v163;
  uint64_t v165 = *(uint64_t (**)(uint64_t, uint64_t))(v163 + 16);
  uint64_t v156 = v163 + 64;
  uint64_t v166 = v163 + 16;
  uint64_t v154 = v163 + 48;
  uint64_t v157 = (void (**)(char *, uint64_t))(v78 + 8);
  uint64_t v153 = (void (**)(char *, char *, uint64_t))(v78 + 32);
  uint64_t v152 = (void (**)(char *, char *, uint64_t))(v147 + 16);
  uint64_t v151 = (void (**)(char *, char *, uint64_t))(v147 + 32);
  uint64_t v155 = (void (**)(char *, uint64_t))(v147 + 8);
  uint64_t v84 = (unsigned int *)(v77 + 48);
  uint64_t v85 = v164;
  uint64_t v86 = v150;
  while (1)
  {
    uint64_t v170 = v82;
    uint64_t v88 = *((void *)v84 - 2);
    unint64_t v87 = *((void *)v84 - 1);
    unsigned int v89 = *v84;
    long long v181 = v167;
    sub_2504DBC4C(v88, v87);
    unint64_t v90 = v165(v86, v83);
    uint64_t v91 = (uint64_t)v80;
    uint64_t v92 = v86;
    uint64_t v93 = v90;
    unint64_t v72 = v94;
    LODWORD(v169) = v89;
    uint64_t v171 = v88;
    uint64_t v172 = (long long *)v87;
    uint64_t v95 = sub_25055CC30((char **)&v181, v89, v91, v90, v94, v88, v87);
    if (v85) {
      break;
    }
    uint64_t v97 = v95;
    uint64_t v98 = v96;
    sub_250511528(v93, v72);
    uint64_t v99 = v177;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 64))(v97, v98, v92, v83);
    uint64_t v86 = v92;
    char v100 = v175;
    (*(void (**)(uint64_t, uint64_t))(v83 + 48))(v86, v83);
    char v102 = v179;
    uint64_t v101 = v180;
    v84 += 6;
    (*v157)(v179, v180);
    (*v153)(v102, v100, v101);
    char v103 = v174;
    (*v152)(v174, v99, v86);
    char v104 = (char *)v176;
    _DWORD *v176 = v169;
    uint64_t v81 = v178;
    char v105 = v103;
    uint64_t v85 = 0;
    (*v151)(&v104[*(int *)(v178 + 36)], v105, v86);
    sub_2505BE320();
    sub_2505BE310();
    sub_250511528(v171, (unint64_t)v172);
    uint64_t v80 = v179;
    uint64_t v79 = v180;
    (*v155)(v99, v86);
    uint64_t v82 = v170 - 1;
    if (v170 == 1) {
      goto LABEL_30;
    }
  }
  sub_250511528(v93, v72);
  sub_250511528(v171, (unint64_t)v172);
  swift_bridgeObjectRelease();
  (*v157)(v179, v180);
  swift_bridgeObjectRelease();
  return v72;
}

uint64_t sub_25055C8E8()
{
  uint64_t result = sub_25056CFB4(0xD00000000000002CLL, 0x80000002505CB250);
  qword_269AC3690 = result;
  *(void *)algn_269AC3698 = v1;
  return result;
}

uint64_t sub_25055C924()
{
  uint64_t result = sub_25056CFB4(0xD00000000000002DLL, 0x80000002505CB280);
  qword_269AC36A0 = result;
  *(void *)algn_269AC36A8 = v1;
  return result;
}

uint64_t sub_25055C960()
{
  uint64_t result = sub_25056CFB4(0xD00000000000002FLL, 0x80000002505CB2D0);
  qword_269AC36B0 = result;
  *(void *)algn_269AC36B8 = v1;
  return result;
}

uint64_t sub_25055C99C()
{
  uint64_t result = sub_25056CFB4(0xD000000000000031, 0x80000002505CB380);
  qword_269AC36C0 = result;
  *(void *)algn_269AC36C8 = v1;
  return result;
}

uint64_t sub_25055C9D8()
{
  uint64_t result = sub_25056CFB4(0xD000000000000033, 0x80000002505CB490);
  qword_269AC36D0 = result;
  *(void *)algn_269AC36D8 = v1;
  return result;
}

uint64_t sub_25055CA14()
{
  uint64_t result = sub_25056CFB4(0xD000000000000035, 0x80000002505CB3C0);
  qword_269AC36E0 = result;
  *(void *)algn_269AC36E8 = v1;
  return result;
}

uint64_t sub_25055CA50()
{
  uint64_t result = sub_25056CFB4(0xD000000000000042, 0x80000002505CB620);
  qword_269AC36F0 = result;
  *(void *)algn_269AC36F8 = v1;
  return result;
}

uint64_t sub_25055CA8C()
{
  uint64_t result = sub_25056CFB4(0xD00000000000002DLL, 0x80000002505CB5F0);
  qword_269AC3700 = result;
  *(void *)algn_269AC3708 = v1;
  return result;
}

uint64_t sub_25055CAC8()
{
  uint64_t result = sub_25056CFB4(0xD000000000000032, 0x80000002505CB300);
  qword_269AC3710 = result;
  *(void *)algn_269AC3718 = v1;
  return result;
}

uint64_t sub_25055CB04()
{
  uint64_t result = sub_25056CFB4(0xD000000000000034, 0x80000002505CB5B0);
  qword_269AC3720 = result;
  *(void *)algn_269AC3728 = v1;
  return result;
}

uint64_t sub_25055CB40()
{
  uint64_t result = sub_25056CFB4(0xD000000000000036, 0x80000002505CB340);
  qword_269AC3730 = result;
  *(void *)algn_269AC3738 = v1;
  return result;
}

uint64_t sub_25055CB7C()
{
  uint64_t result = sub_25056CFB4(0xD000000000000043, 0x80000002505CB670);
  qword_269AC3740 = result;
  *(void *)algn_269AC3748 = v1;
  return result;
}

uint64_t sub_25055CBB8()
{
  uint64_t result = sub_25056CFB4(0xD00000000000002ELL, 0x80000002505CB460);
  qword_269AC3750 = result;
  *(void *)algn_269AC3758 = v1;
  return result;
}

uint64_t sub_25055CBF4()
{
  uint64_t result = sub_25056CFB4(0xD000000000000054, 0x80000002505CB400);
  qword_269AC3760 = result;
  *(void *)algn_269AC3768 = v1;
  return result;
}

uint64_t sub_25055CC30(char **a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v108 = a5;
  unint64_t v107 = a4;
  uint64_t v110 = a3;
  unsigned int v112 = a2;
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v105 = sub_2505BDDD0();
  uint64_t v111 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105, v10, v11, v12, v13);
  char v104 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2505BDCE0();
  uint64_t v109 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15, v16, v17, v18, v19);
  uint64_t v21 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_2505BDA70();
  MEMORY[0x270FA5388](v22 - 8, v23, v24, v25, v26);
  uint64_t v27 = type metadata accessor for GKCrypto_SeedBlob(0);
  uint64_t v32 = MEMORY[0x270FA5388](v27, v28, v29, v30, v31);
  uint64_t v34 = (char *)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32, v35, v36, v37, v38);
  uint64_t v40 = (char *)&v100 - v39;
  uint64_t v41 = *a1;
  uint64_t v42 = (uint64_t)a1[1];
  uint64_t v106 = v41;
  uint64_t v115 = 0;
  memset(v114, 0, sizeof(v114));
  sub_2504DBC4C(a6, a7);
  sub_2505BDA60();
  sub_25055F390(&qword_269AB5E78, (void (*)(uint64_t))type metadata accessor for GKCrypto_SeedBlob);
  uint64_t v43 = (uint64_t)v113;
  sub_2505BDB30();
  uint64_t v44 = v43;
  if (v43) {
    return v42;
  }
  uint64_t v113 = v34;
  char v103 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  unint64_t v46 = v42;
  uint64_t v47 = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_2505C0090;
  uint64_t v48 = inited;
  uint64_t v49 = (uint64_t)v106;
  *(void *)(v48 + 32) = v106;
  v47[5] = v46;
  LODWORD(v114[0]) = bswap32(v112);
  sub_2504DBC4C(v49, v46);
  v47[6] = sub_25056DAD0((uint64_t)v114, (uint64_t)v114 + 4);
  v47[7] = v50;
  uint64_t v51 = v107;
  unint64_t v52 = v108;
  v47[8] = v107;
  v47[9] = v52;
  sub_2504DBC4C(v51, v52);
  if (qword_269AB5600 != -1) {
    swift_once();
  }
  uint64_t v53 = qword_269AC36B0;
  unint64_t v54 = *(void *)algn_269AC36B8;
  v47[10] = qword_269AC36B0;
  v47[11] = v54;
  sub_2504DBC4C(v53, v54);
  uint64_t v108 = sub_250576544((uint64_t)v47);
  unint64_t v107 = v55;
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v56 = *((void *)v40 + 5);
  unint64_t v57 = *((void *)v40 + 6);
  uint64_t v58 = v111;
  uint64_t v59 = v15;
  uint64_t v60 = (uint64_t)v113;
  uint64_t v61 = 0;
  unsigned int v62 = v112;
  uint64_t v63 = v109;
  switch(v57 >> 62)
  {
    case 1uLL:
      BOOL v64 = __OFSUB__(HIDWORD(v56), v56);
      int v65 = HIDWORD(v56) - v56;
      if (v64)
      {
        __break(1u);
LABEL_31:
        __break(1u);
      }
      uint64_t v61 = v65;
LABEL_9:
      sub_25055F3D8((uint64_t)v40, (uint64_t)v113);
      uint64_t v69 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v103, v110, v59);
      if (v61)
      {
        uint64_t v106 = v40;
        uint64_t v70 = *(void *)(v60 + 40);
        unint64_t v102 = *(void *)(v60 + 48);
        sub_2505BDCB0();
        uint64_t v101 = 0;
        uint64_t v71 = v63;
        long long v72 = v114[0];
        uint64_t v73 = sub_2504DBF8C(*(uint64_t *)&v114[0], *((unint64_t *)&v114[0] + 1));
        unint64_t v75 = v74;
        sub_250511528(v72, *((unint64_t *)&v72 + 1));
        LOBYTE(v70) = sub_25051AAD8(v70, v102, v73, v75);
        sub_250511528(v73, v75);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v59);
        sub_25055F43C(v60, type metadata accessor for GKCrypto_SeedBlob);
        if ((v70 & 1) == 0)
        {
          unint64_t v90 = v107;
          uint64_t v91 = v108;
          if (qword_269AB5418 != -1) {
            swift_once();
          }
          uint64_t v92 = sub_2505BDC40();
          __swift_project_value_buffer(v92, (uint64_t)qword_269AC3188);
          os_log_type_t v93 = sub_2505BE3D0();
          uint64_t v94 = sub_2505BDC20();
          os_log_type_t v95 = v93;
          BOOL v96 = os_log_type_enabled(v94, v93);
          uint64_t v40 = v106;
          if (v96)
          {
            uint64_t v97 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v97 = 0;
            _os_log_impl(&dword_2504D2000, v94, v95, "failed opening seed blob due to key hint mismatch", v97, 2u);
            MEMORY[0x25337FF10](v97, -1, -1);
          }

          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
          sub_25055AFD0();
          swift_allocError();
          *(_WORD *)uint64_t v98 = 359;
          *(_OWORD *)(v98 + 8) = xmmword_2505C5130;
          *(void *)(v98 + 24) = 0x80000002505CB550;
          *(void *)(v98 + 32) = 0xD000000000000052;
          *(void *)(v98 + 40) = 0x80000002505C9310;
          swift_willThrow();
          uint64_t v88 = v91;
          unint64_t v89 = v90;
          goto LABEL_28;
        }
        unint64_t v76 = v107;
        uint64_t v77 = v108;
        uint64_t v40 = v106;
        uint64_t v78 = v105;
        uint64_t v44 = v101;
        uint64_t v79 = v111;
        unsigned int v62 = v112;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v63 + 8))(v69, v59);
        sub_25055F43C(v60, type metadata accessor for GKCrypto_SeedBlob);
        unint64_t v76 = v107;
        uint64_t v77 = v108;
        uint64_t v79 = v58;
        uint64_t v78 = v105;
      }
      if (*((_DWORD *)v40 + 14) != v62)
      {
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v82 = sub_2505BDC40();
        __swift_project_value_buffer(v82, (uint64_t)qword_269AC3188);
        os_log_type_t v83 = sub_2505BE3D0();
        uint64_t v84 = sub_2505BDC20();
        os_log_type_t v85 = v83;
        if (os_log_type_enabled(v84, v83))
        {
          uint64_t v86 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v86 = 0;
          _os_log_impl(&dword_2504D2000, v84, v85, "failed opening seed blob due to version mismatch", v86, 2u);
          MEMORY[0x25337FF10](v86, -1, -1);
        }

        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_25055AFD0();
        swift_allocError();
        *(_WORD *)uint64_t v87 = 367;
        *(_OWORD *)(v87 + 8) = xmmword_2505C5140;
        *(void *)(v87 + 24) = 0x80000002505CB550;
        *(void *)(v87 + 32) = 0xD000000000000052;
        *(void *)(v87 + 40) = 0x80000002505C9310;
        swift_willThrow();
        uint64_t v88 = v77;
        unint64_t v89 = v76;
LABEL_28:
        sub_250511528(v88, v89);
        sub_25055F43C((uint64_t)v40, type metadata accessor for GKCrypto_SeedBlob);
        return v42;
      }
      uint64_t v42 = *((void *)v40 + 1);
      unint64_t v80 = *((void *)v40 + 2);
      sub_2504DBC4C(v42, v80);
      uint64_t v81 = v104;
      sub_25059F624(v42, v80);
      if (!v44)
      {
        *(void *)&v114[0] = v77;
        *((void *)&v114[0] + 1) = v76;
        sub_25051AE60();
        uint64_t v42 = sub_2505BDD30();
        (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v78);
      }
      sub_25055F43C((uint64_t)v40, type metadata accessor for GKCrypto_SeedBlob);
      sub_250511528(v77, v76);
      return v42;
    case 2uLL:
      uint64_t v68 = v56 + 16;
      uint64_t v66 = *(void *)(v56 + 16);
      uint64_t v67 = *(void *)(v68 + 8);
      uint64_t v61 = v67 - v66;
      if (!__OFSUB__(v67, v66)) {
        goto LABEL_9;
      }
      goto LABEL_31;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v61 = BYTE6(v57);
      goto LABEL_9;
  }
}

uint64_t sub_25055D5E8()
{
  if (qword_269AB55F0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_269AC3690;
  unint64_t v1 = *(void *)algn_269AC3698;
  qword_269AC3770 = qword_269AC3690;
  *(void *)algn_269AC3778 = *(void *)algn_269AC3698;
  return sub_2504DBC4C(v0, v1);
}

uint64_t sub_25055D654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x263F8D3E8];
  v14[4] = MEMORY[0x263F07B80];
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x263F8D3E8]);
  unint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_250572178(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_25057223C((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_2505722B8((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_25055D720(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for GKCrypto_AdminSeed(0);
  uint64_t v15 = MEMORY[0x270FA5388](v10, v11, v12, v13, v14);
  uint64_t v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4 >> 60 == 15)
  {
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_2505BDC40();
    __swift_project_value_buffer(v22, (uint64_t)qword_269AC3188);
    os_log_type_t v23 = sub_2505BE3D0();
    uint64_t v24 = sub_2505BDC20();
    os_log_type_t v25 = v23;
    if (os_log_type_enabled(v24, v23))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_2504D2000, v24, v25, "attempted serialization without a seed diversifier", v26, 2u);
      MEMORY[0x25337FF10](v26, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    swift_allocError();
    *(_WORD *)uint64_t v27 = 365;
    *(_OWORD *)(v27 + 8) = xmmword_2505C5150;
    *(void *)(v27 + 24) = 0x80000002505CB2B0;
    *(void *)(v27 + 32) = 0xD000000000000052;
    *(void *)(v27 + 40) = 0x80000002505C9310;
    swift_willThrow();
  }
  else
  {
    MEMORY[0x270FA5388](v15, v16, v17, v18, v19);
    v29[-6] = a1;
    v29[-5] = a2;
    v29[-4] = a3;
    v29[-3] = a4;
    v29[-2] = a3;
    v29[-1] = a4;
    sub_2504DBC4C(a3, a4);
    sub_25055F390(&qword_269AB6178, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
    sub_2505BDB80();
    uint64_t v5 = sub_2505BDB40();
    sub_25055F43C((uint64_t)v21, type metadata accessor for GKCrypto_AdminSeed);
    sub_25051B8D4(a3, a4);
  }
  return v5;
}

uint64_t sub_25055D9EC(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12 = *a1;
  unint64_t v13 = a1[1];
  sub_2504DBC4C(a2, a3);
  sub_250511528(v12, v13);
  *a1 = a2;
  a1[1] = a3;
  uint64_t v14 = a1[2];
  unint64_t v15 = a1[3];
  sub_2504DBC4C(a6, a7);
  uint64_t result = sub_250511528(v14, v15);
  a1[2] = a6;
  a1[3] = a7;
  return result;
}

uint64_t sub_25055DA7C(uint64_t a1, uint64_t a2)
{
  return sub_25055E0FC(a1, a2, &qword_269AB5660, &qword_269AC3770, (unint64_t *)algn_269AC3778);
}

uint64_t sub_25055DAA4()
{
  uint64_t v1 = *(void *)v0;
  sub_2504DBC4C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_25055DAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  unint64_t v6 = v3[1];
  uint64_t v8 = v3[2];
  unint64_t v7 = v3[3];
  void v11[3] = a1;
  v11[4] = a2;
  unint64_t v9 = (void *)swift_allocObject();
  v11[0] = v9;
  v9[2] = v5;
  uint64_t v9[3] = v6;
  v9[4] = v8;
  v9[5] = v7;
  sub_2504DBC4C(v5, v6);
  sub_25051B908(v8, v7);
  if (qword_269AB5610 != -1) {
    swift_once();
  }
  sub_2505601DC(v11, 1, qword_269AC36D0, *(unint64_t *)algn_269AC36D8, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t sub_25055DBB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_25055F00C(a1, a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v8;
  }
  return result;
}

uint64_t sub_25055DBE8()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  sub_2505BE850();
  sub_2504DBC4C(v1, v2);
  sub_2505BD950();
  sub_250511528(v1, v2);
  sub_2505BE870();
  if (v4 >> 60 != 15)
  {
    sub_2504DBC4C(v3, v4);
    sub_2505BD950();
    sub_25051B8D4(v3, v4);
  }
  return sub_2505BE880();
}

uint64_t sub_25055DCAC()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  sub_2504DBC4C(*v0, v2);
  sub_2505BD950();
  sub_250511528(v1, v2);
  if (v4 >> 60 == 15) {
    return sub_2505BE870();
  }
  sub_2505BE870();
  sub_2504DBC4C(v3, v4);
  sub_2505BD950();
  return sub_25051B8D4(v3, v4);
}

uint64_t sub_25055DD78()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  sub_2505BE850();
  sub_2504DBC4C(v1, v2);
  sub_2505BD950();
  sub_250511528(v1, v2);
  sub_2505BE870();
  if (v4 >> 60 != 15)
  {
    sub_2504DBC4C(v3, v4);
    sub_2505BD950();
    sub_25051B8D4(v3, v4);
  }
  return sub_2505BE880();
}

uint64_t sub_25055DE38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_2504DBC4C(*a1, v3);
  sub_2504DBC4C(v4, v5);
  char v6 = sub_25050C6A8(v2, v3, v4, v5);
  sub_250511528(v4, v5);
  sub_250511528(v2, v3);
  return v6 & 1;
}

unint64_t sub_25055DEBC()
{
  unint64_t result = qword_269AB67F8;
  if (!qword_269AB67F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB67F8);
  }
  return result;
}

uint64_t sub_25055DF10()
{
  if (qword_269AB55F8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_269AC36A0;
  unint64_t v1 = *(void *)algn_269AC36A8;
  qword_269AC3780 = qword_269AC36A0;
  *(void *)algn_269AC3788 = *(void *)algn_269AC36A8;
  return sub_2504DBC4C(v0, v1);
}

uint64_t sub_25055DF7C(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (qword_269AB5658 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_269AC3760;
  unint64_t v9 = *(void *)algn_269AC3768;
  sub_2504DBC4C(qword_269AC3760, *(unint64_t *)algn_269AC3768);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_25056CFB4(a1, a2);
  unint64_t v12 = v11;
  sub_2504DBC4C(v8, v9);
  sub_2505980CC(v10, v12);
  sub_250511528(v10, v12);
  sub_250511528(v8, v9);
  v14[3] = &type metadata for MemberSeed;
  v14[4] = sub_250522A2C();
  v14[0] = a3;
  v14[1] = a4;
  sub_2504DBC4C(a3, a4);
  sub_2505603C4(v14, 2, v8, v9);
  sub_250511528(v8, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t sub_25055E0D4(uint64_t a1, uint64_t a2)
{
  return sub_25055E0FC(a1, a2, &qword_269AB5668, &qword_269AC3780, (unint64_t *)algn_269AC3788);
}

uint64_t sub_25055E0FC(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v7 = *a4;
  sub_2504DBC4C(v7, *a5);
  return v7;
}

uint64_t sub_25055E158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3;
  unint64_t v6 = v3[1];
  v8[3] = a1;
  v8[4] = a2;
  v8[0] = v5;
  v8[1] = v6;
  sub_2504DBC4C(v5, v6);
  if (qword_269AB5638 != -1) {
    swift_once();
  }
  sub_2505601DC(v8, 1, qword_269AC3720, *(unint64_t *)algn_269AC3728, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t sub_25055E1FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_25055E814(a1, a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
  }
  return result;
}

unint64_t sub_25055E22C()
{
  unint64_t result = qword_269AB6800;
  if (!qword_269AB6800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB6800);
  }
  return result;
}

unint64_t sub_25055E280(uint64_t a1)
{
  unint64_t result = sub_25055E2A8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_25055E2A8()
{
  unint64_t result = qword_269AB6808;
  if (!qword_269AB6808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB6808);
  }
  return result;
}

unint64_t sub_25055E2FC(uint64_t a1)
{
  unint64_t result = sub_25055E324();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_25055E324()
{
  unint64_t result = qword_269AB6810;
  if (!qword_269AB6810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB6810);
  }
  return result;
}

uint64_t sub_25055E378(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2505C0410;
  unsigned int v15 = bswap32(*(_DWORD *)v3);
  *(void *)(inited + 32) = sub_25056DAD0((uint64_t)&v15, (uint64_t)v16);
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v7;
  unsigned int v15 = bswap32(*(_DWORD *)(v3 + 56));
  sub_2504DBC4C(v6, v7);
  *(void *)(inited + 64) = sub_25056DAD0((uint64_t)&v15, (uint64_t)v16);
  *(void *)(inited + 72) = v10;
  uint64_t v11 = *(void *)(v3 + 8);
  unint64_t v12 = *(void *)(v3 + 16);
  *(void *)(inited + 80) = v11;
  *(void *)(inited + 88) = v12;
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  sub_2504DBC4C(v11, v12);
  sub_2504DBC4C(a2, a3);
  uint64_t v13 = sub_250576544(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v13;
}

uint64_t sub_25055E4B8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  uint64_t v6 = (char *)a4 + *(int *)(type metadata accessor for VersionedSeed() + 36);
  unint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);
  return v7(v6, a2, a3);
}

uint64_t sub_25055E540(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x25055E7F4);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 != 64)
      {
LABEL_7:
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v9 = sub_2505BDC40();
        __swift_project_value_buffer(v9, (uint64_t)qword_269AC3188);
        os_log_type_t v10 = sub_2505BE3D0();
        sub_2504DBC4C(a1, a2);
        uint64_t v11 = sub_2505BDC20();
        if (os_log_type_enabled(v11, v10))
        {
          uint64_t v12 = swift_slowAlloc();
          *(_DWORD *)uint64_t v12 = 134218240;
          sub_2505BE430();
          *(_WORD *)(v12 + 12) = 2048;
          switch((int)v2)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(a1), a1)) {
                goto LABEL_15;
              }
              goto LABEL_20;
            case 2:
              if (!__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
                goto LABEL_15;
              }
              goto LABEL_21;
            default:
LABEL_15:
              sub_2505BE430();
              sub_250511528(a1, a2);
              _os_log_impl(&dword_2504D2000, v11, v10, "invalid admin seed length, expected %ld got %ld", (uint8_t *)v12, 0x16u);
              MEMORY[0x25337FF10](v12, -1, -1);
              break;
          }
        }
        else
        {
          sub_250511528(a1, a2);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_25055AFD0();
        swift_allocError();
        *(_WORD *)uint64_t v13 = 259;
        *(_OWORD *)(v13 + 8) = xmmword_2505C5160;
        *(_OWORD *)(v13 + 24) = xmmword_2505BFE50;
        *(void *)(v13 + 40) = 0x80000002505C9310;
        swift_willThrow();
        sub_250511528(a1, a2);
        sub_25051B8D4(0, 0xF000000000000000);
      }
      return a1;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_25055E814(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x25055EAB0);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 != 64)
      {
LABEL_7:
        if (qword_269AB5418 != -1) {
          swift_once();
        }
        uint64_t v9 = sub_2505BDC40();
        __swift_project_value_buffer(v9, (uint64_t)qword_269AC3188);
        os_log_type_t v10 = sub_2505BE3D0();
        sub_2504DBC4C(a1, a2);
        uint64_t v11 = sub_2505BDC20();
        if (os_log_type_enabled(v11, v10))
        {
          uint64_t v12 = swift_slowAlloc();
          *(_DWORD *)uint64_t v12 = 134218240;
          sub_2505BE430();
          *(_WORD *)(v12 + 12) = 2048;
          switch((int)v2)
          {
            case 1:
              if (!__OFSUB__(HIDWORD(a1), a1)) {
                goto LABEL_15;
              }
              goto LABEL_20;
            case 2:
              if (!__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
                goto LABEL_15;
              }
              goto LABEL_21;
            default:
LABEL_15:
              sub_2505BE430();
              sub_250511528(a1, a2);
              _os_log_impl(&dword_2504D2000, v11, v10, "invalid member seed length, expected %ld got %ld", (uint8_t *)v12, 0x16u);
              MEMORY[0x25337FF10](v12, -1, -1);
              break;
          }
        }
        else
        {
          sub_250511528(a1, a2);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
        sub_25055AFD0();
        swift_allocError();
        *(_WORD *)uint64_t v13 = 261;
        *(_OWORD *)(v13 + 8) = xmmword_2505C5170;
        *(_OWORD *)(v13 + 24) = xmmword_2505BFE50;
        *(void *)(v13 + 40) = 0x80000002505C9310;
        swift_willThrow();
        sub_250511528(a1, a2);
      }
      return a1;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_25055EAD0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v9 = (int)v9;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_35;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
LABEL_35:
      __break(1u);
LABEL_36:
      swift_once();
LABEL_19:
      uint64_t v20 = sub_2505BDC40();
      __swift_project_value_buffer(v20, (uint64_t)qword_269AC3188);
      os_log_type_t v21 = sub_2505BE3D0();
      sub_2504DBC4C(a3, a4);
      uint64_t v22 = sub_2505BDC20();
      if (os_log_type_enabled(v22, v21))
      {
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 134218240;
        sub_2505BE430();
        *(_WORD *)(v23 + 12) = 2048;
        switch((int)v4)
        {
          case 1:
            if (!__OFSUB__(HIDWORD(a3), a3)) {
              goto LABEL_30;
            }
            goto LABEL_41;
          case 2:
            if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
              goto LABEL_30;
            }
            goto LABEL_42;
          default:
LABEL_30:
            sub_2505BE430();
            sub_250511528(a3, a4);
            _os_log_impl(&dword_2504D2000, v22, v21, "invalid admin seedDiversifier length, expected %ld got %ld", (uint8_t *)v23, 0x16u);
            MEMORY[0x25337FF10](v23, -1, -1);
            break;
        }
      }
      else
      {
        sub_250511528(a3, a4);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_25055AFD0();
      swift_allocError();
      *(unsigned char *)uint64_t v24 = 4;
      uint64_t v25 = 129;
      break;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v9 = BYTE6(a2);
LABEL_6:
      if (v9 == 64)
      {
        unint64_t v4 = a4 >> 62;
        switch(a4 >> 62)
        {
          case 1uLL:
            LODWORD(v13) = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3))
            {
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
              JUMPOUT(0x25055EFCCLL);
            }
            uint64_t v13 = (int)v13;
LABEL_17:
            if (v13 == 32) {
              return a1;
            }
LABEL_18:
            if (qword_269AB5418 == -1) {
              goto LABEL_19;
            }
            goto LABEL_36;
          case 2uLL:
            uint64_t v19 = *(void *)(a3 + 16);
            uint64_t v18 = *(void *)(a3 + 24);
            BOOL v12 = __OFSUB__(v18, v19);
            uint64_t v13 = v18 - v19;
            if (!v12) {
              goto LABEL_17;
            }
            goto LABEL_38;
          case 3uLL:
            goto LABEL_18;
          default:
            uint64_t v13 = BYTE6(a4);
            goto LABEL_17;
        }
      }
LABEL_9:
      if (qword_269AB5418 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_2505BDC40();
      __swift_project_value_buffer(v14, (uint64_t)qword_269AC3188);
      os_log_type_t v15 = sub_2505BE3D0();
      sub_2504DBC4C(a1, a2);
      uint64_t v16 = sub_2505BDC20();
      if (os_log_type_enabled(v16, v15))
      {
        uint64_t v17 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 134218240;
        sub_2505BE430();
        *(_WORD *)(v17 + 12) = 2048;
        switch((int)v4)
        {
          case 1:
            if (!__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_25;
            }
            goto LABEL_39;
          case 2:
            if (!__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
              goto LABEL_25;
            }
            goto LABEL_40;
          default:
LABEL_25:
            sub_2505BE430();
            sub_250511528(a1, a2);
            _os_log_impl(&dword_2504D2000, v16, v15, "invalid admin seed length, expected %ld got %ld", (uint8_t *)v17, 0x16u);
            MEMORY[0x25337FF10](v17, -1, -1);
            break;
        }
      }
      else
      {
        sub_250511528(a1, a2);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
      sub_25055AFD0();
      swift_allocError();
      *(unsigned char *)uint64_t v24 = 3;
      uint64_t v25 = 125;
      break;
  }
  *(unsigned char *)(v24 + 1) = 1;
  *(void *)(v24 + 8) = v25;
  *(void *)(v24 + 16) = 0xD00000000000001BLL;
  *(void *)(v24 + 24) = 0x80000002505CB230;
  *(void *)(v24 + 32) = 0xD000000000000052;
  *(void *)(v24 + 40) = 0x80000002505C9310;
  swift_willThrow();
  sub_250511528(a3, a4);
  sub_250511528(a1, a2);
  sub_25051B8D4(0, 0xF000000000000000);
  return a1;
}

uint64_t sub_25055F00C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_2505BDA70();
  MEMORY[0x270FA5388](v6 - 8, v7, v8, v9, v10);
  uint64_t v11 = type metadata accessor for GKCrypto_AdminSeed(0);
  MEMORY[0x270FA5388](v11, v12, v13, v14, v15);
  uint64_t v17 = (uint64_t *)((char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  sub_2504DBC4C(a1, a2);
  sub_2505BDA60();
  sub_25055F390(&qword_269AB6178, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminSeed);
  sub_2505BDB30();
  if (v2)
  {
    sub_250511528(a1, a2);
  }
  else
  {
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    unint64_t v21 = v17[3];
    sub_2504DBC4C(*v17, v19);
    sub_2504DBC4C(v20, v21);
    uint64_t v3 = sub_25055EAD0(v18, v19, v20, v21);
    sub_250511528(a1, a2);
    sub_25055F43C((uint64_t)v17, type metadata accessor for GKCrypto_AdminSeed);
  }
  return v3;
}

uint64_t sub_25055F234()
{
  sub_250511528(v0[2], v0[3]);
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_250511528(v0[4], v1);
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25055F284(uint64_t *a1)
{
  return sub_25055D9EC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t type metadata accessor for VersionedSeed()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t sub_25055F2C0()
{
  unint64_t result = qword_269AB6820;
  if (!qword_269AB6820)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269AB6818);
    sub_25055F33C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB6820);
  }
  return result;
}

unint64_t sub_25055F33C()
{
  unint64_t result = qword_269AB6828[0];
  if (!qword_269AB6828[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_269AB6828);
  }
  return result;
}

uint64_t sub_25055F390(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25055F3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GKCrypto_SeedBlob(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25055F43C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25055F49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_25055F4A4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25055F544(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t sub_25055F62C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

_DWORD *sub_25055F668(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *sub_25055F6D8(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *sub_25055F748(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *sub_25055F7B8(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_25055F828(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void sub_25055F9A4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x25055FBD8);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

id sub_25055FC30(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  id v36 = a1;
  unsigned int v7 = v6;
  unsigned int v39 = a6;
  uint64_t v37 = a4;
  unint64_t v38 = a5;
  uint64_t v11 = sub_2505BD9F0();
  uint64_t v32 = *(void *)(v11 - 8);
  uint64_t v33 = v11;
  MEMORY[0x270FA5388](v11, v12, v13, v14, v15);
  unint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a2;
  unint64_t v18 = a2[1];
  uint64_t v20 = *a3;
  unint64_t v34 = a3[1];
  uint64_t v35 = v20;
  id v31 = objc_msgSend(objc_allocWithZone(v7), sel_initWithContext_, a1);
  v30[9] = sub_2505BD990();
  v30[8] = sub_2505BD990();
  v30[7] = sub_2505BD990();
  v30[6] = sub_2505BD990();
  v30[5] = sub_2505BD990();
  v30[4] = sub_2505BD990();
  v30[3] = sub_2505BD990();
  v30[2] = sub_2505BD990();
  v30[1] = sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD990();
  sub_2505BD9C0();
  sub_250511528(v19, v18);
  unint64_t v21 = (void *)sub_2505BD9A0();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
  id v22 = v31;
  objc_msgSend(v31, sel_setGroupID_, v21);

  unint64_t v24 = v34;
  uint64_t v23 = v35;
  uint64_t v40 = sub_2504DCA88(v35, v34);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5AA0);
  sub_250560180();
  sub_2505BE110();
  swift_bridgeObjectRelease();
  sub_250511528(v23, v24);
  uint64_t v25 = (void *)sub_2505BE130();
  swift_bridgeObjectRelease();
  objc_msgSend(v22, sel_setUserID_, v25);

  uint64_t v27 = v37;
  unint64_t v26 = v38;
  uint64_t v28 = (void *)sub_2505BD920();
  objc_msgSend(v22, sel_setGroupAccessInfo_, v28);

  objc_msgSend(v22, sel_setVersion_, v39);
  sub_250511528(v27, v26);

  return v22;
}

id GroupAccessInfoBlob.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id GroupAccessInfoBlob.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for GroupAccessInfoBlob();
  id v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for GroupAccessInfoBlob()
{
  return self;
}

id GroupAccessInfoBlob.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GroupAccessInfoBlob();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for GroupAccessInfoBlob(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GroupAccessInfoBlob);
}

unint64_t sub_250560180()
{
  unint64_t result = qword_269AB5AA8;
  if (!qword_269AB5AA8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269AB5AA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5AA8);
  }
  return result;
}

uint64_t sub_2505601DC@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v24[1] = a5;
  uint64_t v9 = sub_2505BDD20();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11, v12, v13, v14);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_250560740(0xD00000000000002ELL, 0x80000002505CB7A0, a2, a3, a4);
  unint64_t v19 = v18;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v21);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v21, v20);
  unint64_t v28 = v22;
  uint64_t v25 = v17;
  unint64_t v26 = v19;
  sub_2504DBC4C(v17, v19);
  sub_2505BDCF0();
  sub_2505BDD10();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  sub_2505BE0E0();
  sub_250560FE4();
  sub_25051AE60();
  sub_2505BDDE0();
  sub_250511528(v17, v19);
  sub_25051B8D4(v25, v26);
  return sub_250511528(v27, v28);
}

uint64_t sub_2505603C4(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  return sub_250560474(a1, a2, a3, a4, 0xD00000000000003ELL, 0x80000002505CB810, (uint64_t)sub_250560ADC, MEMORY[0x263F04788]);
}

uint64_t sub_25056041C(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  return sub_250560474(a1, a2, a3, a4, 0xD000000000000039, 0x80000002505CB7D0, (uint64_t)sub_250560ADC, MEMORY[0x263F047B8]);
}

uint64_t sub_250560474(void *a1, char a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v42 = a7;
  uint64_t v15 = sub_2505BDCE0();
  uint64_t v20 = MEMORY[0x270FA5388](v15, v16, v17, v18, v19);
  uint64_t v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_8;
      }
      uint64_t v24 = (int)v24;
LABEL_5:
      if (v24 >= 0x8000)
      {
        __break(1u);
LABEL_8:
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x2505606DCLL);
      }
LABEL_6:
      uint64_t v41 = v20;
      unint64_t v28 = a6;
      uint64_t v29 = v21;
      uint64_t v30 = sub_250560740(a5, v28, a2, a3, a4);
      unint64_t v39 = v31;
      uint64_t v40 = v30;
      unint64_t v32 = v31;
      uint64_t v33 = a1[3];
      uint64_t v34 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v33);
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 40))(v33, v34);
      unint64_t v37 = v36;
      uint64_t v45 = v35;
      unint64_t v46 = v36;
      uint64_t v43 = v30;
      unint64_t v44 = v32;
      sub_2505BE0E0();
      sub_250560FE4();
      sub_25051AE60();
      sub_2505BDDE0();
      sub_250511528(v35, v37);
      sub_2505BDCB0();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v41);
      a8(v45, v46, 1);
      return sub_250511528(v40, v39);
    case 2uLL:
      uint64_t v26 = *(void *)(a3 + 16);
      uint64_t v25 = *(void *)(a3 + 24);
      BOOL v27 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v27) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
      goto LABEL_6;
  }
}

void sub_2505606EC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6C616E7265746E69;
  unint64_t v3 = 0xE800000000000000;
  if (*v1 != 1)
  {
    uint64_t v2 = 0x424470756F7247;
    unint64_t v3 = 0xE700000000000000;
  }
  if (*v1)
  {
    unint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0x6C616E7265747865;
    unint64_t v4 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v4;
}

uint64_t sub_250560740(unint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_25056CFB4(a1, a2);
  unint64_t v11 = v10;
  if (a3)
  {
    if (a3 == 1) {
      unint64_t v12 = 0x6C616E7265746E69;
    }
    else {
      unint64_t v12 = 0x424470756F7247;
    }
    if (a3 == 1) {
      unint64_t v13 = 0xE800000000000000;
    }
    else {
      unint64_t v13 = 0xE700000000000000;
    }
  }
  else
  {
    unint64_t v12 = 0x6C616E7265747865;
    unint64_t v13 = 0xE800000000000000;
  }
  uint64_t v14 = sub_25056CFB4(v12, v13);
  unint64_t v16 = v15;
  uint64_t v17 = 0;
  switch(v11 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v9), v9))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        JUMPOUT(0x250560AACLL);
      }
      uint64_t v17 = HIDWORD(v9) - (int)v9;
LABEL_14:
      sub_250575194(v17, 2);
      uint64_t v21 = v20;
      unint64_t v23 = v22;
      uint64_t v40 = v20;
      unint64_t v41 = v22;
      sub_2504DBC4C(v20, v22);
      sub_2504DBC4C(v9, v11);
      sub_2505980CC(v9, v11);
      sub_250511528(v9, v11);
      sub_250511528(v21, v23);
      uint64_t v24 = 0;
      switch(v16 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14)) {
            goto LABEL_27;
          }
          uint64_t v24 = HIDWORD(v14) - (int)v14;
LABEL_19:
          sub_250575194(v24, 2);
          uint64_t v28 = v27;
          unint64_t v30 = v29;
          sub_2504DBC4C(v40, v41);
          sub_2505980CC(v28, v30);
          sub_250511528(v28, v30);
          sub_250511528(v40, v41);
          sub_2504DBC4C(v40, v41);
          sub_2504DBC4C(v14, v16);
          sub_2505980CC(v14, v16);
          sub_250511528(v14, v16);
          sub_250511528(v40, v41);
          uint64_t v31 = 0;
          switch(a5 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(a4), a4)) {
                goto LABEL_29;
              }
              uint64_t v31 = HIDWORD(a4) - (int)a4;
LABEL_24:
              sub_250575194(v31, 2);
              uint64_t v35 = v34;
              unint64_t v37 = v36;
              sub_2504DBC4C(v40, v41);
              sub_2505980CC(v35, v37);
              sub_250511528(v35, v37);
              sub_250511528(v40, v41);
              sub_2504DBC4C(v40, v41);
              sub_2504DBC4C(a4, a5);
              sub_2505980CC(a4, a5);
              sub_250511528(a4, a5);
              sub_250511528(v14, v16);
              sub_250511528(v9, v11);
              sub_250511528(v40, v41);
              return v40;
            case 2uLL:
              uint64_t v33 = *(void *)(a4 + 16);
              uint64_t v32 = *(void *)(a4 + 24);
              uint64_t v31 = v32 - v33;
              if (!__OFSUB__(v32, v33)) {
                goto LABEL_24;
              }
              goto LABEL_30;
            case 3uLL:
              goto LABEL_24;
            default:
              uint64_t v31 = BYTE6(a5);
              goto LABEL_24;
          }
        case 2uLL:
          uint64_t v26 = *(void *)(v14 + 16);
          uint64_t v25 = *(void *)(v14 + 24);
          uint64_t v24 = v25 - v26;
          if (!__OFSUB__(v25, v26)) {
            goto LABEL_19;
          }
          goto LABEL_28;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v24 = BYTE6(v16);
          goto LABEL_19;
      }
    case 2uLL:
      uint64_t v19 = *(void *)(v9 + 16);
      uint64_t v18 = *(void *)(v9 + 24);
      uint64_t v17 = v18 - v19;
      if (!__OFSUB__(v18, v19)) {
        goto LABEL_14;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v17 = BYTE6(v11);
      goto LABEL_14;
  }
}

uint64_t sub_250560ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_25055D654(a1, a2, a3);
}

uint64_t sub_250560AF4()
{
  uint64_t v0 = sub_2505BDF10();
  unint64_t v2 = v1;
  uint64_t v3 = sub_2504DBF8C(v0, v1);
  sub_250511528(v0, v2);
  return v3;
}

uint64_t sub_250560B44()
{
  sub_2505BDCB0();
  uint64_t v0 = sub_2504DBF8C(v2, v3);
  sub_250511528(v2, v3);
  return v0;
}

uint64_t sub_250560BC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_250560BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t sub_250560C04(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_250560C18(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v32 = sub_2505BDCE0();
  uint64_t v8 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    uint64_t v16 = sub_250560740(0xD00000000000002CLL, 0x80000002505CB770, a2, a3, a4);
    unint64_t v18 = v17;
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v19, v20);
    unint64_t v23 = v22;
    uint64_t v35 = v21;
    unint64_t v36 = v22;
    uint64_t v33 = v16;
    unint64_t v34 = v18;
    sub_2505BE0E0();
    sub_250560FE4();
    sub_25051AE60();
    sub_2505BDDE0();
    sub_250511528(v21, v23);
    sub_2505BDCB0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v32);
    uint64_t v24 = sub_25055E814(v35, v36);
    sub_250511528(v16, v18);
    return v24;
  }
  char v15 = sub_2505BE780();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_4;
  }
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_2505BDC40();
  __swift_project_value_buffer(v25, (uint64_t)qword_269AC3188);
  os_log_type_t v26 = sub_2505BE3D0();
  uint64_t v27 = sub_2505BDC20();
  uint64_t v24 = v26;
  if (os_log_type_enabled(v27, v26))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_2504D2000, v27, (os_log_type_t)v24, "cannot derive external member seeds", v28, 2u);
    MEMORY[0x25337FF10](v28, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_25055AFD0();
  swift_allocError();
  *(_WORD *)uint64_t v29 = 304;
  *(_OWORD *)(v29 + 8) = xmmword_2505C5320;
  *(void *)(v29 + 24) = 0x80000002505CB6F0;
  *(void *)(v29 + 32) = 0xD000000000000051;
  *(void *)(v29 + 40) = 0x80000002505CB710;
  swift_willThrow();
  return v24;
}

unint64_t sub_250560FE4()
{
  unint64_t result = qword_269AB5FB0;
  if (!qword_269AB5FB0)
  {
    sub_2505BE0E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5FB0);
  }
  return result;
}

uint64_t sub_25056103C(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v34 = sub_2505BDCE0();
  uint64_t v8 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34, v9, v10, v11, v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    uint64_t v16 = sub_250560740(0xD00000000000002BLL, 0x80000002505CB850, a2, a3, a4);
    unint64_t v18 = v17;
    uint64_t v19 = a1[3];
    uint64_t v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v19);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 40))(v19, v20);
    unint64_t v23 = v22;
    uint64_t v37 = v21;
    unint64_t v38 = v22;
    uint64_t v35 = v16;
    unint64_t v36 = v18;
    sub_2505BE0E0();
    sub_250560FE4();
    sub_25051AE60();
    sub_2505BDDE0();
    sub_250511528(v21, v23);
    uint64_t v24 = (uint64_t)v14;
    uint64_t v25 = v39;
    sub_2505BDCB0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v34);
    uint64_t v26 = sub_25055E540(v37, v38);
    if (!v25) {
      uint64_t v24 = v26;
    }
    sub_250511528(v16, v18);
    return v24;
  }
  char v15 = sub_2505BE780();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_4;
  }
  if (qword_269AB5418 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_2505BDC40();
  __swift_project_value_buffer(v27, (uint64_t)qword_269AC3188);
  os_log_type_t v28 = sub_2505BE3D0();
  uint64_t v29 = sub_2505BDC20();
  uint64_t v24 = v28;
  if (os_log_type_enabled(v29, v28))
  {
    unint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v30 = 0;
    _os_log_impl(&dword_2504D2000, v29, (os_log_type_t)v24, "cannot derive external admin seeds", v30, 2u);
    MEMORY[0x25337FF10](v30, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
  sub_25055AFD0();
  swift_allocError();
  *(_WORD *)uint64_t v31 = 304;
  *(_OWORD *)(v31 + 8) = xmmword_2505C5330;
  *(void *)(v31 + 24) = 0x80000002505CB6F0;
  *(void *)(v31 + 32) = 0xD000000000000051;
  *(void *)(v31 + 40) = 0x80000002505CB710;
  swift_willThrow();
  return v24;
}

uint64_t UserKeyingInfo.init(userID:dsid:)(uint64_t a1, _OWORD *a2, void *a3)
{
  *(void *)(v3 + 416) = a1;
  uint64_t v6 = sub_2505BDF90();
  *(void *)(v3 + 424) = v6;
  *(void *)(v3 + 432) = *(void *)(v6 - 8);
  *(void *)(v3 + 440) = swift_task_alloc();
  uint64_t v7 = sub_2505BE000();
  *(void *)(v3 + 448) = v7;
  *(void *)(v3 + 456) = *(void *)(v7 - 8);
  *(void *)(v3 + 464) = swift_task_alloc();
  type metadata accessor for UserKeyingInfo(0);
  *(void *)(v3 + 472) = swift_task_alloc();
  *(void *)(v3 + 480) = type metadata accessor for PCSKeyPair();
  *(void *)(v3 + 488) = swift_task_alloc();
  *(_OWORD *)(v3 + 496) = *a2;
  uint64_t v8 = a3[1];
  *(void *)(v3 + 512) = *a3;
  *(void *)(v3 + 520) = v8;
  return MEMORY[0x270FA2498](sub_2505615BC, 0, 0);
}

uint64_t sub_2505615BC()
{
  uint64_t v12 = v0;
  if (qword_26B202478 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_25051AD8C((uint64_t)&byte_26B202498, v0 + 16);
  sub_2504DAEFC(v0 + 232, v0 + 352, &qword_26B202158);
  if (*(void *)(v0 + 376))
  {
    uint64_t v1 = *(void *)(v0 + 520);
    uint64_t v2 = *(void *)(v0 + 512);
    sub_2504DAEE4((long long *)(v0 + 352), v0 + 312);
    sub_25051ADE8(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v4 = *(void *)(v0 + 344);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 312), v3);
    v11[0] = v2;
    v11[1] = v1;
    (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))(v11, 0xD000000000000022, 0x80000002505C8D10, v3, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 312);
    uint64_t v6 = *(void *)(v0 + 296);
    uint64_t v7 = *(void *)(v0 + 304);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 272), v6);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_2505618F0;
    uint64_t v9 = *(void *)(v0 + 488);
    return v10(v9, v6, v7);
  }
  else
  {
    sub_2504DAF60(v0 + 352, &qword_26B202158);
    return sub_2505BE5F0();
  }
}

uint64_t sub_2505618F0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_250511528(*(void *)(v2 + 496), *(void *)(v2 + 504));
    uint64_t v3 = sub_250561BCC;
  }
  else
  {
    uint64_t v3 = sub_250561A0C;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_250561A0C()
{
  uint64_t v16 = v0;
  uint64_t v1 = *(void *)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 464);
  uint64_t v4 = *(uint64_t **)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 448);
  uint64_t v7 = *(void *)(v0 + 456);
  uint64_t v9 = *(void *)(v0 + 432);
  uint64_t v8 = *(void *)(v0 + 440);
  uint64_t v10 = *(void *)(v0 + 424);
  *(_OWORD *)char v15 = *(_OWORD *)(v0 + 496);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v2, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v2 + *(int *)(v3 + 20), v10);
  sub_250561DCC(v15, v5, v8, v4);
  if (v1)
  {
    sub_2505659B0(*(void *)(v0 + 488), (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 472);
    uint64_t v13 = *(void *)(v0 + 416);
    sub_2505659B0(*(void *)(v0 + 488), (uint64_t (*)(void))type metadata accessor for PCSKeyPair);
    sub_250569DF8(v12, v13, type metadata accessor for UserKeyingInfo);
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_250561BCC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for UserKeyingInfo(uint64_t a1)
{
  return sub_25052823C(a1, (uint64_t *)&unk_269AB68B8);
}

uint64_t UserKeyingInfo.serializePublicKeysAndSignatures()()
{
  uint64_t v0 = type metadata accessor for GKCrypto_UserKeys(0);
  MEMORY[0x270FA5388](v0, v1, v2, v3, v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v6 + 9) = MEMORY[0x263F8EE78];
  *((_OWORD *)v6 + 5) = xmmword_2505BFEF0;
  sub_2505BDA40();
  *(_DWORD *)uint64_t v6 = 1;
  type metadata accessor for UserKeyingInfo(0);
  *((void *)v6 + 1) = sub_2505BDF10();
  *((void *)v6 + 2) = v7;
  *((void *)v6 + 3) = sub_2505BDF10();
  *((void *)v6 + 4) = v8;
  *((void *)v6 + 5) = sub_2505BE010();
  *((void *)v6 + 6) = v9;
  *((void *)v6 + 7) = sub_2505BE010();
  *((void *)v6 + 8) = v10;
  sub_250565958();
  uint64_t v11 = sub_2505BDB40();
  sub_2505659B0((uint64_t)v6, type metadata accessor for GKCrypto_UserKeys);
  return v11;
}

uint64_t sub_250561DCC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v80 = sub_2505BE040();
  uint64_t v65 = *(void *)(v80 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v80, v8, v9, v10, v11);
  BOOL v64 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v14, v15, v16, v17);
  uint64_t v77 = (char *)&v63 - v18;
  uint64_t v20 = *a1;
  unint64_t v19 = a1[1];
  *a4 = *a1;
  a4[1] = v19;
  uint64_t v21 = (int *)type metadata accessor for UserKeyingInfo(0);
  uint64_t v22 = (uint64_t)a4 + v21[10];
  uint64_t v23 = sub_2505BDF90();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, a3, v23);
  uint64_t v72 = v24;
  uint64_t v25 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56);
  uint64_t v69 = v22;
  uint64_t v73 = v23;
  v25(v22, 0, 1, v23);
  uint64_t v26 = (uint64_t)a4 + v21[11];
  uint64_t v27 = sub_2505BE000();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, a2, v27);
  uint64_t v70 = v28;
  uint64_t v29 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56);
  uint64_t v68 = v26;
  uint64_t v71 = v27;
  v29(v26, 0, 1, v27);
  unint64_t v30 = (char *)a4 + v21[5];
  sub_2504DBC4C(v20, v19);
  uint64_t v74 = a3;
  sub_2505BDF50();
  uint64_t v86 = v21;
  uint64_t v31 = v21[7];
  uint64_t v81 = a4;
  uint64_t v32 = (char *)a4 + v31;
  uint64_t v79 = a2;
  sub_2505BDFA0();
  uint64_t v66 = v30;
  uint64_t v33 = sub_2505BDF10();
  unint64_t v35 = v34;
  if (qword_269AB5670 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_269AC3790;
  unint64_t v37 = *(void *)algn_269AC3798;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = v36;
  long long v75 = xmmword_2505C1BA0;
  *(_OWORD *)(inited + 16) = xmmword_2505C1BA0;
  *(void *)(inited + 40) = v37;
  *(void *)(inited + 48) = v20;
  *(void *)(inited + 56) = v19;
  *(void *)(inited + 64) = v33;
  *(void *)(inited + 72) = v35;
  sub_2504DBC4C(v20, v19);
  sub_2504DBC4C(v36, v37);
  sub_2504DBC4C(v33, v35);
  uint64_t v82 = sub_250576544(inited);
  unint64_t v83 = v39;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_250511528(v33, v35);
  uint64_t v67 = v32;
  uint64_t v40 = sub_2505BDF10();
  unint64_t v42 = v41;
  if (qword_269AB5678 != -1) {
    swift_once();
  }
  uint64_t v43 = qword_269AC37A0;
  unint64_t v44 = *(void *)algn_269AC37A8;
  uint64_t v45 = swift_initStackObject();
  *(void *)(v45 + 32) = v43;
  *(_OWORD *)(v45 + 16) = v75;
  *(void *)(v45 + 40) = v44;
  *(void *)(v45 + 48) = v20;
  *(void *)(v45 + 56) = v19;
  *(void *)(v45 + 64) = v40;
  *(void *)(v45 + 72) = v42;
  sub_2504DBC4C(v20, v19);
  sub_2504DBC4C(v43, v44);
  sub_2504DBC4C(v40, v42);
  uint64_t v46 = sub_250576544(v45);
  unint64_t v48 = v47;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_250511528(v40, v42);
  sub_250511528(v20, v19);
  uint64_t v49 = v82;
  uint64_t v84 = v82;
  unint64_t v50 = v83;
  unint64_t v85 = v83;
  sub_25051AE60();
  uint64_t v51 = v77;
  uint64_t v52 = v79;
  uint64_t v53 = v78;
  sub_2505BDFF0();
  if (v53)
  {
    sub_250511528(v46, v48);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v74, v73);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v52, v71);
    sub_250511528(v49, v50);
    sub_250511528(*v81, v81[1]);
    uint64_t v58 = sub_2505BDF30();
    (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v66, v58);
    uint64_t v59 = v67;
    uint64_t v60 = sub_2505BE0B0();
    (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
    sub_2504DAF60(v69, &qword_269AB5A78);
    return sub_2504DAF60(v68, &qword_269AB5A28);
  }
  else
  {
    unint64_t v54 = v81;
    unint64_t v55 = (char *)v81 + v86[6];
    uint64_t v56 = v80;
    uint64_t v78 = *(void (**)(void, void, void))(v65 + 32);
    v78(v55, v51, v80);
    uint64_t v84 = v46;
    unint64_t v85 = v48;
    unint64_t v57 = v64;
    sub_2505BDFF0();
    unsigned int v62 = v86;
    v78((char *)v54 + v86[8], v57, v56);
    sub_250511528(v46, v48);
    sub_250511528(v82, v83);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v74, v73);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v52, v71);
    *(uint64_t *)((char *)v54 + v62[9]) = MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_2505625AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v149 = a5;
  uint64_t v150 = a4;
  unint64_t v155 = a3;
  uint64_t v142 = sub_2505BE040();
  uint64_t v141 = *(void *)(v142 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v142, v9, v10, v11, v12);
  *(void *)&long long v140 = (char *)v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v15, v16, v17, v18);
  *((void *)&v140 + 1) = (char *)v132 - v19;
  uint64_t v143 = sub_2505BE0B0();
  uint64_t v144 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143, v20, v21, v22, v23);
  uint64_t v147 = (char *)v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_2505BDF30();
  uint64_t v145 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146, v25, v26, v27, v28);
  uint64_t v29 = sub_2505BDA70();
  MEMORY[0x270FA5388](v29 - 8, v30, v31, v32, v33);
  uint64_t v34 = type metadata accessor for GKCrypto_UserKeys(0);
  uint64_t v39 = MEMORY[0x270FA5388](v34, v35, v36, v37, v38);
  unint64_t v41 = (int *)((char *)v132 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v39, v42, v43, v44, v45);
  unint64_t v47 = (char *)v132 - v46;
  uint64_t v48 = *a1;
  unint64_t v49 = a1[1];
  *a6 = v48;
  a6[1] = v49;
  uint64_t v151 = a6;
  uint64_t v50 = a2;
  unint64_t v51 = v155;
  uint64_t v154 = 0;
  long long v152 = 0u;
  long long v153 = 0u;
  sub_2504DBC4C(v48, v49);
  sub_2504DBC4C(v50, v51);
  sub_2505BDA60();
  sub_250565958();
  uint64_t v52 = v148;
  sub_2505BDB30();
  if (v52)
  {
    sub_250511528(v50, v51);
    sub_250511528(v48, v49);
    sub_2504DAF60(v149, &qword_269AB5A78);
    sub_2504DAF60(v150, &qword_269AB5A28);
LABEL_16:
    unint64_t v54 = v151;
    return sub_250511528(*v54, v54[1]);
  }
  uint64_t v148 = v50;
  uint64_t v53 = v150;
  if (*(_DWORD *)v47 != 1)
  {
    sub_250511528(v48, v49);
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v61 = sub_2505BDC40();
    __swift_project_value_buffer(v61, (uint64_t)qword_269AC3188);
    os_log_type_t v62 = sub_2505BE3D0();
    sub_250569D90((uint64_t)v47, (uint64_t)v41, type metadata accessor for GKCrypto_UserKeys);
    uint64_t v63 = sub_2505BDC20();
    os_log_type_t v64 = v62;
    uint64_t v65 = v53;
    if (os_log_type_enabled(v63, v62))
    {
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 67109376;
      int v67 = *v41;
      sub_2505659B0((uint64_t)v41, type metadata accessor for GKCrypto_UserKeys);
      LODWORD(v152) = v67;
      sub_2505BE430();
      *(_WORD *)(v66 + 8) = 1024;
      LODWORD(v152) = 1;
      sub_2505BE430();
      _os_log_impl(&dword_2504D2000, v63, v64, "unsupported protobuf version, got %u expected %u", (uint8_t *)v66, 0xEu);
      MEMORY[0x25337FF10](v66, -1, -1);
    }
    else
    {
      sub_2505659B0((uint64_t)v41, type metadata accessor for GKCrypto_UserKeys);
    }
    uint64_t v68 = v149;
    unint64_t v69 = v155;
    uint64_t v70 = v148;

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    swift_allocError();
    *(_WORD *)uint64_t v71 = 275;
    *(_OWORD *)(v71 + 8) = xmmword_2505C5490;
    *(void *)(v71 + 24) = 0x80000002505CB880;
    *(void *)(v71 + 32) = 0xD00000000000005BLL;
    *(void *)(v71 + 40) = 0x80000002505CB8C0;
    swift_willThrow();
    sub_250511528(v70, v69);
    sub_2504DAF60(v68, &qword_269AB5A78);
    sub_2504DAF60(v65, &qword_269AB5A28);
    sub_2505659B0((uint64_t)v47, type metadata accessor for GKCrypto_UserKeys);
    goto LABEL_16;
  }
  if (*(void *)(*((void *)v47 + 9) + 16))
  {
    sub_250511528(v48, v49);
    unint64_t v54 = v151;
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v55 = sub_2505BDC40();
    __swift_project_value_buffer(v55, (uint64_t)qword_269AC3188);
    os_log_type_t v56 = sub_2505BE3D0();
    unint64_t v57 = sub_2505BDC20();
    os_log_type_t v58 = v56;
    if (os_log_type_enabled(v57, v56))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl(&dword_2504D2000, v57, v58, "empty verificationKey signatures", v59, 2u);
      MEMORY[0x25337FF10](v59, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    swift_allocError();
    *(_WORD *)uint64_t v60 = 276;
    *(_OWORD *)(v60 + 8) = xmmword_2505C54A0;
    *(void *)(v60 + 24) = 0x80000002505CB880;
    *(void *)(v60 + 32) = 0xD00000000000005BLL;
    *(void *)(v60 + 40) = 0x80000002505CB8C0;
    swift_willThrow();
    sub_250511528(v148, v155);
    sub_2504DAF60(v149, &qword_269AB5A78);
    sub_2504DAF60(v53, &qword_269AB5A28);
    sub_2505659B0((uint64_t)v47, type metadata accessor for GKCrypto_UserKeys);
    return sub_250511528(*v54, v54[1]);
  }
  unint64_t v73 = *((void *)v47 + 2);
  *(void *)&long long v152 = *((void *)v47 + 1);
  *((void *)&v152 + 1) = v73;
  sub_2504DBC4C(v152, v73);
  sub_2505BDF20();
  uint64_t v74 = v151;
  long long v75 = (int *)type metadata accessor for UserKeyingInfo(0);
  uint64_t v76 = *(void (**)(void))(v145 + 32);
  *(void *)&long long v138 = (char *)v74 + v75[5];
  v76();
  unint64_t v77 = *((void *)v47 + 4);
  *(void *)&long long v152 = *((void *)v47 + 3);
  *((void *)&v152 + 1) = v77;
  sub_2504DBC4C(v152, v77);
  sub_2505BE0A0();
  BOOL v139 = v75;
  uint64_t v80 = *(void (**)(void))(v144 + 32);
  uint64_t v136 = (uint64_t)v74 + v75[7];
  v80();
  unint64_t v81 = *((void *)v47 + 6);
  *(void *)&long long v152 = *((void *)v47 + 5);
  *((void *)&v152 + 1) = v81;
  sub_2504DBC4C(v152, v81);
  unint64_t v82 = sub_25051AE60();
  uint64_t v137 = 0;
  sub_2505BE020();
  unint64_t v83 = *(void (**)(void))(v141 + 32);
  uint64_t v134 = (uint64_t)v74 + v75[6];
  *((void *)&v140 + 1) = v141 + 32;
  uint64_t v135 = v83;
  v83();
  unint64_t v84 = *((void *)v47 + 8);
  *(void *)&long long v152 = *((void *)v47 + 7);
  *((void *)&v152 + 1) = v84;
  sub_2504DBC4C(v152, v84);
  sub_2505BE020();
  uint64_t v147 = 0;
  v132[2] = v82;
  char v133 = v47;
  v132[1] = (char *)v74 + v75[8];
  v135();
  uint64_t v89 = sub_2505BDF10();
  unint64_t v91 = v90;
  if (qword_269AB5670 != -1) {
    swift_once();
  }
  uint64_t v93 = qword_269AC3790;
  unint64_t v92 = *(void *)algn_269AC3798;
  uint64_t v135 = (void (*)(void))__swift_instantiateConcreteTypeFromMangledName(&qword_269AB59F8);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = v93;
  long long v138 = xmmword_2505C1BA0;
  *(_OWORD *)(inited + 16) = xmmword_2505C1BA0;
  *(void *)(inited + 40) = v92;
  *(void *)(inited + 48) = v48;
  *(void *)(inited + 56) = v49;
  *(void *)(inited + 64) = v89;
  *(void *)(inited + 72) = v91;
  sub_2504DBC4C(v48, v49);
  sub_2504DBC4C(v93, v92);
  sub_2504DBC4C(v89, v91);
  *(void *)&long long v140 = sub_250576544(inited);
  *((void *)&v140 + 1) = v95;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_250511528(v89, v91);
  uint64_t v96 = sub_2505BDF10();
  unint64_t v98 = v97;
  if (qword_269AB5678 != -1) {
    swift_once();
  }
  uint64_t v99 = qword_269AC37A0;
  unint64_t v100 = *(void *)algn_269AC37A8;
  uint64_t v101 = swift_initStackObject();
  *(void *)(v101 + 32) = v99;
  *(_OWORD *)(v101 + 16) = v138;
  *(void *)(v101 + 40) = v100;
  *(void *)(v101 + 48) = v48;
  *(void *)(v101 + 56) = v49;
  *(void *)(v101 + 64) = v96;
  *(void *)(v101 + 72) = v98;
  sub_2504DBC4C(v48, v49);
  sub_2504DBC4C(v99, v100);
  sub_2504DBC4C(v96, v98);
  uint64_t v102 = v96;
  uint64_t v103 = sub_250576544(v101);
  unint64_t v105 = v104;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_250511528(v102, v98);
  sub_250511528(v48, v49);
  uint64_t v106 = v103;
  *(void *)&long long v152 = v103;
  *((void *)&v152 + 1) = v105;
  if (sub_2505BE050())
  {
    long long v107 = v140;
    long long v152 = v140;
    char v108 = sub_2505BE050();
    uint64_t v109 = v53;
    uint64_t v110 = (uint64_t)v133;
    if (v108)
    {
      sub_250511528(v103, v105);
      sub_250511528(v107, *((unint64_t *)&v107 + 1));
      sub_250511528(v148, v155);
      sub_2505659B0(v110, type metadata accessor for GKCrypto_UserKeys);
      uint64_t v111 = v139;
      unsigned int v112 = v151;
      *(uint64_t *)((char *)v151 + v139[9]) = MEMORY[0x263F8EE78];
      sub_2505283F0(v149, (uint64_t)v112 + v111[10], &qword_269AB5A78);
      return sub_2505283F0(v109, (uint64_t)v112 + v111[11], &qword_269AB5A28);
    }
    *(void *)&long long v138 = v105;
    char v121 = v151;
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v125 = sub_2505BDC40();
    __swift_project_value_buffer(v125, (uint64_t)qword_269AC3188);
    os_log_type_t v126 = sub_2505BE3D0();
    unint64_t v127 = sub_2505BDC20();
    os_log_type_t v128 = v126;
    if (os_log_type_enabled(v127, v126))
    {
      uint64_t v129 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v129 = 0;
      _os_log_impl(&dword_2504D2000, v127, v128, "encryptionKeyStringThatWasSigned signature verification with encryptionKeySignature failed", v129, 2u);
      MEMORY[0x25337FF10](v129, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    uint64_t v130 = swift_allocError();
    *(_WORD *)uint64_t v131 = 265;
    *(_OWORD *)(v131 + 8) = xmmword_2505C54C0;
    *(void *)(v131 + 24) = 0x80000002505CB880;
    *(void *)(v131 + 32) = 0xD00000000000005BLL;
    *(void *)(v131 + 40) = 0x80000002505CB8C0;
    uint64_t v147 = (char *)v130;
    swift_willThrow();
    sub_250511528(v103, v138);
    sub_250511528(v107, *((unint64_t *)&v107 + 1));
    sub_250511528(v148, v155);
    sub_2504DAF60(v149, &qword_269AB5A78);
    sub_2504DAF60(v109, &qword_269AB5A28);
    sub_2505659B0(v110, type metadata accessor for GKCrypto_UserKeys);
    uint64_t v78 = v142;
    uint64_t v79 = v145;
    uint64_t v115 = v137;
  }
  else
  {
    unint64_t v113 = v105;
    uint64_t v114 = (uint64_t)v133;
    uint64_t v115 = v137;
    if (qword_269AB5418 != -1) {
      swift_once();
    }
    uint64_t v116 = sub_2505BDC40();
    __swift_project_value_buffer(v116, (uint64_t)qword_269AC3188);
    os_log_type_t v117 = sub_2505BE3D0();
    uint64_t v118 = sub_2505BDC20();
    os_log_type_t v119 = v117;
    BOOL v120 = os_log_type_enabled(v118, v117);
    char v121 = v151;
    if (v120)
    {
      char v122 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v122 = 0;
      _os_log_impl(&dword_2504D2000, v118, v119, "verificationKeyStringToSign signature verification with verificationKey failed", v122, 2u);
      uint64_t v115 = v137;
      MEMORY[0x25337FF10](v122, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_269AB59E0);
    sub_25055AFD0();
    uint64_t v123 = swift_allocError();
    *(_WORD *)uint64_t v124 = 266;
    *(_OWORD *)(v124 + 8) = xmmword_2505C54B0;
    *(void *)(v124 + 24) = 0x80000002505CB880;
    *(void *)(v124 + 32) = 0xD00000000000005BLL;
    *(void *)(v124 + 40) = 0x80000002505CB8C0;
    uint64_t v147 = (char *)v123;
    swift_willThrow();
    sub_250511528(v106, v113);
    sub_250511528(v140, *((unint64_t *)&v140 + 1));
    sub_250511528(v148, v155);
    sub_2504DAF60(v149, &qword_269AB5A78);
    sub_2504DAF60(v53, &qword_269AB5A28);
    sub_2505659B0(v114, type metadata accessor for GKCrypto_UserKeys);
    uint64_t v78 = v142;
    uint64_t v79 = v145;
  }
  sub_250511528(*v121, v121[1]);
  unint64_t v85 = v139;
  (*(void (**)(char *, uint64_t))(v79 + 8))((char *)v121 + v139[5], v146);
  uint64_t v86 = v143;
  uint64_t v87 = v144;
  uint64_t v88 = v141;
  (*(void (**)(char *, uint64_t))(v141 + 8))((char *)v121 + v85[6], v78);
  if (!v115) {
    (*(void (**)(char *, uint64_t))(v87 + 8))((char *)v121 + v85[7], v86);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))((char *)v121 + v85[8], v78);
}

uint64_t sub_250563888()
{
  uint64_t result = sub_25056CFB4(0xD000000000000034, 0x80000002505CB960);
  qword_269AC3790 = result;
  *(void *)algn_269AC3798 = v1;
  return result;
}

uint64_t sub_2505638C4()
{
  uint64_t result = sub_25056CFB4(0xD000000000000036, 0x80000002505CB920);
  qword_269AC37A0 = result;
  *(void *)algn_269AC37A8 = v1;
  return result;
}

uint64_t UserKeyingInfo.user.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_2504DBC4C(v2, v3);
}

uint64_t UserKeyingInfo.encryptionKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 20);
  uint64_t v4 = sub_2505BDF30();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t UserKeyingInfo.encryptionKeySignature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 24);
  uint64_t v4 = sub_2505BE040();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t UserKeyingInfo.verificationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 28);
  uint64_t v4 = sub_2505BE0B0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t UserKeyingInfo.verificationKeySelfSignature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 32);
  uint64_t v4 = sub_2505BE040();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_250563AF4(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v312 = type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs(0);
  uint64_t v302 = *(void *)(v312 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v312, v4, v5, v6, v7);
  unint64_t v295 = (char *)&v289 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v8, v10, v11, v12, v13);
  uint64_t v303 = (uint64_t)&v289 - v15;
  uint64_t v20 = MEMORY[0x270FA5388](v14, v16, v17, v18, v19);
  uint64_t v296 = (char *)&v289 - v21;
  MEMORY[0x270FA5388](v20, v22, v23, v24, v25);
  uint64_t v311 = (uint64_t)&v289 - v26;
  uint64_t v298 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB68F8);
  MEMORY[0x270FA5388](v298, v27, v28, v29, v30);
  os_log_type_t v301 = (char *)&v289 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB6900);
  uint64_t v37 = MEMORY[0x270FA5388](v32 - 8, v33, v34, v35, v36);
  uint64_t v300 = (char *)&v289 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37, v39, v40, v41, v42);
  uint64_t v299 = (char *)&v289 - v43;
  uint64_t v44 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v49 = MEMORY[0x270FA5388](v44, v45, v46, v47, v48);
  uint64_t v310 = (uint64_t *)((char *)&v289 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v55 = MEMORY[0x270FA5388](v49, v51, v52, v53, v54);
  uint64_t v308 = (uint64_t)&v289 - v56;
  uint64_t v61 = MEMORY[0x270FA5388](v55, v57, v58, v59, v60);
  uint64_t v309 = (uint64_t)&v289 - v62;
  uint64_t v67 = MEMORY[0x270FA5388](v61, v63, v64, v65, v66);
  unint64_t v306 = (unint64_t)&v289 - v68;
  uint64_t v73 = MEMORY[0x270FA5388](v67, v69, v70, v71, v72);
  uint64_t v307 = (uint64_t *)((char *)&v289 - v74);
  uint64_t v79 = MEMORY[0x270FA5388](v73, v75, v76, v77, v78);
  unint64_t v81 = (char *)&v289 - v80;
  uint64_t v86 = MEMORY[0x270FA5388](v79, v82, v83, v84, v85);
  uint64_t v305 = (uint64_t)&v289 - v87;
  uint64_t v92 = MEMORY[0x270FA5388](v86, v88, v89, v90, v91);
  uint64_t v94 = (char *)&v289 - v93;
  uint64_t v99 = MEMORY[0x270FA5388](v92, v95, v96, v97, v98);
  uint64_t v101 = (char *)&v289 - v100;
  uint64_t v304 = v99;
  uint64_t v102 = sub_2505BDEE0();
  unint64_t v104 = v103;
  uint64_t v105 = sub_2505BDEE0();
  unint64_t v107 = v106;
  char v108 = sub_25051AAD8(v102, v104, v105, v106);
  unint64_t v109 = v107;
  uint64_t v110 = a2;
  uint64_t v111 = a1;
  sub_250511528(v105, v109);
  sub_250511528(v102, v104);
  sub_250569D90(a1, (uint64_t)v101, type metadata accessor for UserKeyingInfo);
  sub_250569D90(v110, (uint64_t)v94, type metadata accessor for UserKeyingInfo);
  if ((v108 & 1) == 0)
  {
    sub_2505659B0((uint64_t)v94, type metadata accessor for UserKeyingInfo);
    sub_2505659B0((uint64_t)v101, type metadata accessor for UserKeyingInfo);
    uint64_t v153 = a1;
    uint64_t v121 = v305;
    sub_250569D90(v153, v305, type metadata accessor for UserKeyingInfo);
    sub_250569D90(v110, (uint64_t)v81, type metadata accessor for UserKeyingInfo);
    goto LABEL_7;
  }
  unint64_t v297 = v110;
  uint64_t v112 = sub_2505BDEE0();
  unint64_t v114 = v113;
  uint64_t v115 = sub_2505BDEE0();
  unint64_t v117 = v116;
  char v118 = sub_25051AAD8(v112, v114, v115, v116);
  unint64_t v119 = v117;
  uint64_t v110 = v297;
  sub_250511528(v115, v119);
  sub_250511528(v112, v114);
  sub_2505659B0((uint64_t)v94, type metadata accessor for UserKeyingInfo);
  sub_2505659B0((uint64_t)v101, type metadata accessor for UserKeyingInfo);
  uint64_t v120 = a1;
  uint64_t v121 = v305;
  sub_250569D90(v120, v305, type metadata accessor for UserKeyingInfo);
  sub_250569D90(v110, (uint64_t)v81, type metadata accessor for UserKeyingInfo);
  if ((v118 & 1) == 0)
  {
LABEL_7:
    sub_2505659B0((uint64_t)v81, type metadata accessor for UserKeyingInfo);
    sub_2505659B0(v121, type metadata accessor for UserKeyingInfo);
    uint64_t v130 = v307;
    sub_250569D90(v111, (uint64_t)v307, type metadata accessor for UserKeyingInfo);
    uint64_t v131 = v306;
    sub_250569D90(v110, v306, type metadata accessor for UserKeyingInfo);
    uint64_t v133 = v309;
    uint64_t v132 = v310;
    uint64_t v134 = v308;
    goto LABEL_8;
  }
  uint64_t v122 = sub_2505BE030();
  unint64_t v124 = v123;
  uint64_t v125 = sub_2505BE030();
  unint64_t v127 = v126;
  char v128 = sub_25051AAD8(v122, v124, v125, v126);
  unint64_t v129 = v127;
  uint64_t v110 = v297;
  sub_250511528(v125, v129);
  sub_250511528(v122, v124);
  sub_2505659B0((uint64_t)v81, type metadata accessor for UserKeyingInfo);
  sub_2505659B0(v121, type metadata accessor for UserKeyingInfo);
  uint64_t v130 = v307;
  sub_250569D90(v111, (uint64_t)v307, type metadata accessor for UserKeyingInfo);
  uint64_t v131 = v306;
  sub_250569D90(v110, v306, type metadata accessor for UserKeyingInfo);
  uint64_t v133 = v309;
  uint64_t v132 = v310;
  uint64_t v134 = v308;
  if ((v128 & 1) == 0)
  {
LABEL_8:
    sub_2505659B0(v131, type metadata accessor for UserKeyingInfo);
    sub_2505659B0((uint64_t)v130, type metadata accessor for UserKeyingInfo);
    sub_250569D90(v111, v133, type metadata accessor for UserKeyingInfo);
    sub_250569D90(v110, v134, type metadata accessor for UserKeyingInfo);
    goto LABEL_9;
  }
  uint64_t v135 = (uint64_t)v130;
  uint64_t v136 = sub_2505BE030();
  unint64_t v138 = v137;
  uint64_t v139 = sub_2505BE030();
  unint64_t v141 = v140;
  LODWORD(v305) = sub_25051AAD8(v136, v138, v139, v140);
  sub_250511528(v139, v141);
  sub_250511528(v136, v138);
  sub_2505659B0(v131, type metadata accessor for UserKeyingInfo);
  sub_2505659B0(v135, type metadata accessor for UserKeyingInfo);
  sub_250569D90(v111, v133, type metadata accessor for UserKeyingInfo);
  sub_250569D90(v297, v134, type metadata accessor for UserKeyingInfo);
  if ((v305 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v291 = v111;
  uint64_t v142 = *(int *)(v304 + 36);
  uint64_t v143 = *(void *)(v133 + v142);
  uint64_t v144 = *(void *)(v134 + v142);
  uint64_t v145 = *(void *)(v143 + 16);
  unint64_t v146 = *(void *)(v144 + 16);
  uint64_t v307 = (void *)(v302 + 56);
  uint64_t v305 = v302 + 48;
  uint64_t v294 = v143;
  swift_bridgeObjectRetain();
  uint64_t v293 = v144;
  swift_bridgeObjectRetain();
  unint64_t v306 = 0;
  unint64_t v147 = 0;
  uint64_t v148 = (uint64_t)v295;
  uint64_t v149 = (uint64_t)v296;
  uint64_t v151 = (uint64_t)v300;
  uint64_t v150 = (uint64_t)v301;
  uint64_t v152 = (uint64_t)v299;
  uint64_t v304 = v145;
  unint64_t v297 = v146;
  while (2)
  {
    if (v147 == v145)
    {
      uint64_t v156 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v307;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v307)(v152, 1, 1, v312);
      unint64_t v147 = v145;
    }
    else
    {
      if (v147 >= *(void *)(v294 + 16))
      {
        __break(1u);
LABEL_248:
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        __break(1u);
LABEL_251:
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
LABEL_256:
        __break(1u);
LABEL_257:
        __break(1u);
LABEL_258:
        __break(1u);
LABEL_259:
        __break(1u);
LABEL_260:
        __break(1u);
LABEL_261:
        __break(1u);
LABEL_262:
        __break(1u);
LABEL_263:
        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
LABEL_267:
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
      }
      uint64_t v157 = v302;
      sub_250569D90(v294+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(void *)(v302 + 72) * v147++, v152, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
      uint64_t v156 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
      v156(v152, 0, 1, v312);
    }
    unint64_t v158 = v306;
    if (v306 == v146)
    {
      uint64_t v159 = 1;
      unint64_t v306 = v146;
    }
    else
    {
      if (v306 >= *(void *)(v293 + 16)) {
        goto LABEL_248;
      }
      sub_250569D90(v293+ ((*(unsigned __int8 *)(v302 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v302 + 80))+ *(void *)(v302 + 72) * v306, v151, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
      uint64_t v159 = 0;
      unint64_t v306 = v158 + 1;
    }
    uint64_t v160 = v312;
    v156(v151, v159, 1, v312);
    uint64_t v161 = v150 + *(int *)(v298 + 48);
    sub_2505283F0(v152, v150, &qword_269AB6900);
    sub_2505283F0(v151, v161, &qword_269AB6900);
    uint64_t v162 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v305;
    int v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v305)(v150, 1, v160);
    int v164 = v162(v161, 1, v160);
    if (v163 == 1)
    {
      if (v164 != 1)
      {
        sub_2504DAF60(v161, &qword_269AB6900);
        goto LABEL_245;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2505659B0(v308, type metadata accessor for UserKeyingInfo);
      sub_2505659B0(v309, type metadata accessor for UserKeyingInfo);
      uint64_t v132 = v310;
      sub_250569D90(v291, (uint64_t)v310, type metadata accessor for UserKeyingInfo);
      uint64_t v286 = *v132;
      unint64_t v287 = v132[1];
      sub_2504DBC4C(*v132, v287);
      char v154 = sub_25051AAD8(v286, v287, v286, v287);
      sub_250511528(v286, v287);
      goto LABEL_10;
    }
    if (v164 == 1)
    {
      uint64_t v288 = v150;
      goto LABEL_244;
    }
    sub_250569DF8(v150, v311, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
    sub_250569DF8(v161, v149, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
    uint64_t v165 = sub_2505BDEE0();
    unint64_t v167 = v166;
    uint64_t v168 = sub_2505BDEE0();
    uint64_t v170 = v168;
    unint64_t v171 = v169;
    uint64_t v172 = 0;
    switch(v167 >> 62)
    {
      case 1uLL:
        LODWORD(v172) = HIDWORD(v165) - v165;
        if (__OFSUB__(HIDWORD(v165), v165)) {
          goto LABEL_249;
        }
        uint64_t v172 = (int)v172;
        break;
      case 2uLL:
        uint64_t v174 = *(void *)(v165 + 16);
        uint64_t v173 = *(void *)(v165 + 24);
        BOOL v175 = __OFSUB__(v173, v174);
        uint64_t v172 = v173 - v174;
        if (!v175) {
          break;
        }
        goto LABEL_250;
      case 3uLL:
        break;
      default:
        uint64_t v172 = BYTE6(v167);
        break;
    }
    unint64_t v176 = v169 >> 62;
    switch(v169 >> 62)
    {
      case 1uLL:
        LODWORD(v177) = HIDWORD(v168) - v168;
        if (__OFSUB__(HIDWORD(v168), v168)) {
          goto LABEL_251;
        }
        uint64_t v177 = (int)v177;
LABEL_33:
        if (v172 != v177)
        {
LABEL_241:
          sub_250511528(v168, v169);
          sub_250511528(v165, v167);
          uint64_t v226 = v303;
          sub_250569D90(v311, v303, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
          sub_250569D90(v149, v148, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
          goto LABEL_243;
        }
        if (v172 < 1)
        {
LABEL_44:
          sub_250511528(v168, v169);
          sub_250511528(v165, v167);
          sub_250569D90(v311, v303, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
          sub_250569D90(v149, v148, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
          goto LABEL_131;
        }
        break;
      case 2uLL:
        uint64_t v179 = *(void *)(v168 + 16);
        uint64_t v178 = *(void *)(v168 + 24);
        BOOL v175 = __OFSUB__(v178, v179);
        uint64_t v177 = v178 - v179;
        if (!v175) {
          goto LABEL_33;
        }
        goto LABEL_252;
      case 3uLL:
        if (!v172) {
          goto LABEL_44;
        }
        goto LABEL_241;
      default:
        uint64_t v177 = BYTE6(v169);
        goto LABEL_33;
    }
    switch(v167 >> 62)
    {
      case 1uLL:
        if ((int)v165 > v165 >> 32) {
          goto LABEL_257;
        }
        sub_2504DBC4C(v165, v167);
        uint64_t v185 = (char *)sub_2505BD7D0();
        if (!v185) {
          goto LABEL_49;
        }
        uint64_t v186 = sub_2505BD800();
        if (__OFSUB__((int)v165, v186)) {
          goto LABEL_260;
        }
        v185 += (int)v165 - v186;
LABEL_49:
        sub_2505BD7F0();
        if (v176)
        {
          if (v176 == 1)
          {
            if (v170 >> 32 < (int)v170) {
              goto LABEL_271;
            }
            swift_retain();
            unint64_t v187 = (char *)sub_2505BD7D0();
            if (v187)
            {
              uint64_t v188 = sub_2505BD800();
              if (__OFSUB__((int)v170, v188)) {
                goto LABEL_288;
              }
              v187 += (int)v170 - v188;
            }
            uint64_t v148 = (uint64_t)v295;
            uint64_t v189 = sub_2505BD7F0();
            if (v189 >= (v170 >> 32) - (int)v170) {
              size_t v190 = (v170 >> 32) - (int)v170;
            }
            else {
              size_t v190 = v189;
            }
            if (!v185) {
              goto LABEL_296;
            }
            if (!v187) {
              goto LABEL_297;
            }
            int v191 = memcmp(v185, v187, v190);
            sub_250511528(v170, v171);
          }
          else
          {
            uint64_t v220 = *(void *)(v170 + 16);
            unint64_t v292 = *(void *)(v170 + 24);
            swift_retain();
            swift_retain();
            uint64_t v221 = (char *)sub_2505BD7D0();
            if (v221)
            {
              uint64_t v222 = sub_2505BD800();
              if (__OFSUB__(v220, v222)) {
                goto LABEL_287;
              }
              v221 += v220 - v222;
            }
            BOOL v175 = __OFSUB__(v292, v220);
            int64_t v223 = v292 - v220;
            if (v175) {
              goto LABEL_272;
            }
            uint64_t v224 = sub_2505BD7F0();
            if (v224 >= v223) {
              size_t v225 = v223;
            }
            else {
              size_t v225 = v224;
            }
            if (!v185) {
              goto LABEL_307;
            }
            if (!v221) {
              goto LABEL_308;
            }
            int v191 = memcmp(v185, v221, v225);
            swift_release();
            swift_release();
          }
        }
        else
        {
          __s1[0] = v170;
          LOWORD(__s1[1]) = v171;
          BYTE2(__s1[1]) = BYTE2(v171);
          BYTE3(__s1[1]) = BYTE3(v171);
          BYTE4(__s1[1]) = BYTE4(v171);
          BYTE5(__s1[1]) = BYTE5(v171);
          if (!v185) {
            goto LABEL_306;
          }
          int v191 = memcmp(v185, __s1, BYTE6(v171));
        }
        sub_250511528(v165, v167);
        goto LABEL_129;
      case 2uLL:
        unint64_t v292 = v147;
        uint64_t v192 = *(void *)(v165 + 16);
        swift_retain();
        swift_retain();
        uint64_t v193 = (char *)sub_2505BD7D0();
        if (!v193) {
          goto LABEL_64;
        }
        uint64_t v194 = sub_2505BD800();
        if (__OFSUB__(v192, v194)) {
          goto LABEL_259;
        }
        v193 += v192 - v194;
LABEL_64:
        sub_2505BD7F0();
        if (!v176)
        {
          __s1[0] = v170;
          LOWORD(__s1[1]) = v171;
          BYTE2(__s1[1]) = BYTE2(v171);
          BYTE3(__s1[1]) = BYTE3(v171);
          BYTE4(__s1[1]) = BYTE4(v171);
          BYTE5(__s1[1]) = BYTE5(v171);
          if (!v193) {
            goto LABEL_303;
          }
          int v191 = memcmp(v193, __s1, BYTE6(v171));
LABEL_104:
          swift_release();
          goto LABEL_115;
        }
        if (v176 == 1)
        {
          if (v170 >> 32 < (int)v170) {
            goto LABEL_265;
          }
          swift_retain();
          uint64_t v195 = (char *)sub_2505BD7D0();
          if (v195)
          {
            uint64_t v196 = sub_2505BD800();
            if (__OFSUB__((int)v170, v196)) {
              goto LABEL_286;
            }
            v195 += (int)v170 - v196;
          }
          uint64_t v148 = (uint64_t)v295;
          uint64_t v197 = sub_2505BD7F0();
          if (v197 >= (v170 >> 32) - (int)v170) {
            size_t v198 = (v170 >> 32) - (int)v170;
          }
          else {
            size_t v198 = v197;
          }
          if (!v193) {
            goto LABEL_298;
          }
          if (!v195) {
            goto LABEL_299;
          }
          int v191 = memcmp(v193, v195, v198);
          sub_250511528(v170, v171);
          goto LABEL_104;
        }
        uint64_t v213 = *(void *)(v170 + 16);
        uint64_t v214 = *(void *)(v170 + 24);
        swift_retain();
        swift_retain();
        uint64_t v215 = (char *)sub_2505BD7D0();
        if (v215)
        {
          uint64_t v216 = sub_2505BD800();
          if (__OFSUB__(v213, v216)) {
            goto LABEL_285;
          }
          v215 += v213 - v216;
        }
        BOOL v175 = __OFSUB__(v214, v213);
        int64_t v217 = v214 - v213;
        if (v175) {
          goto LABEL_270;
        }
        uint64_t v218 = sub_2505BD7F0();
        if (v218 >= v217) {
          size_t v219 = v217;
        }
        else {
          size_t v219 = v218;
        }
        uint64_t v148 = (uint64_t)v295;
        if (!v193) {
          goto LABEL_304;
        }
        if (!v215) {
          goto LABEL_305;
        }
        int v191 = memcmp(v193, v215, v219);
        swift_release();
        swift_release();
        swift_release();
LABEL_115:
        swift_release();
        sub_250511528(v170, v171);
        sub_250511528(v165, v167);
        uint64_t v149 = (uint64_t)v296;
        unint64_t v147 = v292;
        goto LABEL_130;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v176) {
          goto LABEL_85;
        }
        if (v176 == 1)
        {
          uint64_t v180 = (v168 >> 32) - (int)v168;
          if (v168 >> 32 < (int)v168) {
            goto LABEL_264;
          }
          uint64_t v199 = sub_2505BD7D0();
          if (!v199) {
            goto LABEL_300;
          }
          uint64_t v182 = v199;
          uint64_t v200 = sub_2505BD800();
          uint64_t v184 = (int)v170 - v200;
          if (__OFSUB__((int)v170, v200)) {
            goto LABEL_269;
          }
          goto LABEL_81;
        }
        uint64_t v209 = *(void *)(v168 + 16);
        uint64_t v210 = *(void *)(v168 + 24);
        swift_retain();
        swift_retain();
        uint64_t v205 = (char *)sub_2505BD7D0();
        if (v205)
        {
          uint64_t v211 = sub_2505BD800();
          if (__OFSUB__(v209, v211)) {
            goto LABEL_284;
          }
          v205 += v209 - v211;
        }
        BOOL v175 = __OFSUB__(v210, v209);
        int64_t v207 = v210 - v209;
        if (v175) {
          goto LABEL_267;
        }
        uint64_t v208 = sub_2505BD7F0();
        uint64_t v149 = (uint64_t)v296;
        if (!v205) {
          goto LABEL_302;
        }
        goto LABEL_97;
      default:
        __s1[0] = v165;
        LOWORD(__s1[1]) = v167;
        BYTE2(__s1[1]) = BYTE2(v167);
        BYTE3(__s1[1]) = BYTE3(v167);
        BYTE4(__s1[1]) = BYTE4(v167);
        BYTE5(__s1[1]) = BYTE5(v167);
        if (!v176)
        {
LABEL_85:
          uint64_t __s2 = v168;
          __int16 v314 = v169;
          char v315 = BYTE2(v169);
          char v316 = BYTE3(v169);
          char v317 = BYTE4(v169);
          char v318 = BYTE5(v169);
          int v191 = memcmp(__s1, &__s2, BYTE6(v169));
LABEL_101:
          sub_250511528(v170, v171);
          sub_250511528(v165, v167);
          goto LABEL_130;
        }
        if (v176 != 1)
        {
          uint64_t v203 = *(void *)(v168 + 16);
          uint64_t v204 = *(void *)(v168 + 24);
          swift_retain();
          swift_retain();
          uint64_t v205 = (char *)sub_2505BD7D0();
          if (v205)
          {
            uint64_t v206 = sub_2505BD800();
            if (__OFSUB__(v203, v206)) {
              goto LABEL_283;
            }
            v205 += v203 - v206;
          }
          BOOL v175 = __OFSUB__(v204, v203);
          int64_t v207 = v204 - v203;
          if (v175) {
            goto LABEL_266;
          }
          uint64_t v208 = sub_2505BD7F0();
          uint64_t v149 = (uint64_t)v296;
          if (!v205) {
            goto LABEL_301;
          }
LABEL_97:
          if (v208 >= v207) {
            size_t v212 = v207;
          }
          else {
            size_t v212 = v208;
          }
          int v191 = memcmp(__s1, v205, v212);
          swift_release();
          swift_release();
          goto LABEL_101;
        }
        uint64_t v180 = (v168 >> 32) - (int)v168;
        if (v168 >> 32 < (int)v168) {
          goto LABEL_263;
        }
        uint64_t v181 = sub_2505BD7D0();
        if (!v181)
        {
          sub_2505BD7F0();
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          sub_2505BD7F0();
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          sub_2505BD7F0();
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
LABEL_312:
          __break(1u);
LABEL_313:
          __break(1u);
LABEL_314:
          sub_2505BD7F0();
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
          JUMPOUT(0x2505658F4);
        }
        uint64_t v182 = v181;
        uint64_t v183 = sub_2505BD800();
        uint64_t v184 = (int)v170 - v183;
        if (__OFSUB__((int)v170, v183)) {
          goto LABEL_268;
        }
LABEL_81:
        uint64_t v201 = sub_2505BD7F0();
        if (v201 >= v180) {
          size_t v202 = v180;
        }
        else {
          size_t v202 = v201;
        }
        int v191 = memcmp(__s1, (const void *)(v182 + v184), v202);
LABEL_129:
        sub_250511528(v170, v171);
        sub_250511528(v165, v167);
        uint64_t v149 = (uint64_t)v296;
LABEL_130:
        uint64_t v226 = v303;
        sub_250569D90(v311, v303, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
        sub_250569D90(v149, v148, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
        if (v191) {
          goto LABEL_243;
        }
LABEL_131:
        uint64_t v227 = sub_2505BE030();
        unint64_t v229 = v228;
        uint64_t v230 = sub_2505BE030();
        uint64_t v232 = v230;
        unint64_t v233 = v231;
        uint64_t v234 = 0;
        switch(v229 >> 62)
        {
          case 1uLL:
            LODWORD(v234) = HIDWORD(v227) - v227;
            if (__OFSUB__(HIDWORD(v227), v227)) {
              goto LABEL_253;
            }
            uint64_t v234 = (int)v234;
            break;
          case 2uLL:
            uint64_t v236 = *(void *)(v227 + 16);
            uint64_t v235 = *(void *)(v227 + 24);
            BOOL v175 = __OFSUB__(v235, v236);
            uint64_t v234 = v235 - v236;
            if (!v175) {
              goto LABEL_136;
            }
            goto LABEL_254;
          case 3uLL:
            goto LABEL_136;
          default:
            uint64_t v234 = BYTE6(v229);
            goto LABEL_136;
        }
        break;
    }
LABEL_136:
    unint64_t v237 = v231 >> 62;
    switch(v231 >> 62)
    {
      case 1uLL:
        LODWORD(v238) = HIDWORD(v230) - v230;
        if (__OFSUB__(HIDWORD(v230), v230)) {
          goto LABEL_255;
        }
        uint64_t v238 = (int)v238;
LABEL_141:
        if (v234 == v238)
        {
          if (v234 < 1)
          {
LABEL_12:
            sub_250511528(v230, v231);
            sub_250511528(v227, v229);
            sub_2505659B0(v303, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
            sub_2505659B0(v148, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
            sub_2505659B0(v149, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
            sub_2505659B0(v311, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
            uint64_t v151 = (uint64_t)v300;
            uint64_t v150 = (uint64_t)v301;
            uint64_t v152 = (uint64_t)v299;
            uint64_t v145 = v304;
            unint64_t v146 = v297;
          }
          else
          {
            switch(v229 >> 62)
            {
              case 1uLL:
                if ((int)v227 > v227 >> 32) {
                  goto LABEL_258;
                }
                sub_2504DBC4C(v227, v229);
                uint64_t v246 = (char *)sub_2505BD7D0();
                if (!v246) {
                  goto LABEL_155;
                }
                uint64_t v247 = sub_2505BD800();
                if (__OFSUB__((int)v227, v247)) {
                  goto LABEL_262;
                }
                v246 += (int)v227 - v247;
LABEL_155:
                sub_2505BD7F0();
                if (v237)
                {
                  if (v237 == 1)
                  {
                    if (v232 >> 32 < (int)v232) {
                      goto LABEL_281;
                    }
                    swift_retain();
                    os_log_type_t v248 = (char *)sub_2505BD7D0();
                    if (v248)
                    {
                      uint64_t v249 = sub_2505BD800();
                      if (__OFSUB__((int)v232, v249)) {
                        goto LABEL_294;
                      }
                      v248 += (int)v232 - v249;
                    }
                    uint64_t v148 = (uint64_t)v295;
                    uint64_t v250 = sub_2505BD7F0();
                    if (v250 >= (v232 >> 32) - (int)v232) {
                      size_t v251 = (v232 >> 32) - (int)v232;
                    }
                    else {
                      size_t v251 = v250;
                    }
                    if (!v246) {
                      goto LABEL_310;
                    }
                    if (!v248) {
                      goto LABEL_311;
                    }
                    int v252 = memcmp(v246, v248, v251);
                    sub_250511528(v232, v233);
                  }
                  else
                  {
                    uint64_t v280 = *(void *)(v232 + 16);
                    unint64_t v292 = *(void *)(v232 + 24);
                    swift_retain();
                    swift_retain();
                    unint64_t v281 = (char *)sub_2505BD7D0();
                    if (v281)
                    {
                      uint64_t v282 = sub_2505BD800();
                      if (__OFSUB__(v280, v282)) {
                        goto LABEL_293;
                      }
                      v281 += v280 - v282;
                    }
                    BOOL v175 = __OFSUB__(v292, v280);
                    int64_t v283 = v292 - v280;
                    if (v175) {
                      goto LABEL_282;
                    }
                    uint64_t v284 = sub_2505BD7F0();
                    if (v284 >= v283) {
                      size_t v285 = v283;
                    }
                    else {
                      size_t v285 = v284;
                    }
                    if (!v246) {
                      goto LABEL_321;
                    }
                    if (!v281) {
                      goto LABEL_322;
                    }
                    int v252 = memcmp(v246, v281, v285);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  __s1[0] = v232;
                  LOWORD(__s1[1]) = v233;
                  BYTE2(__s1[1]) = BYTE2(v233);
                  BYTE3(__s1[1]) = BYTE3(v233);
                  BYTE4(__s1[1]) = BYTE4(v233);
                  BYTE5(__s1[1]) = BYTE5(v233);
                  if (!v246) {
                    goto LABEL_320;
                  }
                  int v252 = memcmp(v246, __s1, BYTE6(v233));
                }
                sub_250511528(v227, v229);
LABEL_235:
                sub_250511528(v232, v233);
                sub_250511528(v227, v229);
                uint64_t v149 = (uint64_t)v296;
                goto LABEL_236;
              case 2uLL:
                unint64_t v292 = v147;
                uint64_t v253 = *(void *)(v227 + 16);
                swift_retain();
                swift_retain();
                uint64_t v254 = (char *)sub_2505BD7D0();
                if (!v254) {
                  goto LABEL_170;
                }
                uint64_t v255 = sub_2505BD800();
                if (__OFSUB__(v253, v255)) {
                  goto LABEL_261;
                }
                v254 += v253 - v255;
LABEL_170:
                sub_2505BD7F0();
                if (!v237)
                {
                  __s1[0] = v232;
                  LOWORD(__s1[1]) = v233;
                  BYTE2(__s1[1]) = BYTE2(v233);
                  BYTE3(__s1[1]) = BYTE3(v233);
                  BYTE4(__s1[1]) = BYTE4(v233);
                  BYTE5(__s1[1]) = BYTE5(v233);
                  if (!v254) {
                    goto LABEL_317;
                  }
                  int v252 = memcmp(v254, __s1, BYTE6(v233));
LABEL_210:
                  swift_release();
                  goto LABEL_221;
                }
                if (v237 == 1)
                {
                  if (v232 >> 32 < (int)v232) {
                    goto LABEL_275;
                  }
                  swift_retain();
                  unint64_t v256 = (char *)sub_2505BD7D0();
                  if (v256)
                  {
                    uint64_t v257 = sub_2505BD800();
                    if (__OFSUB__((int)v232, v257)) {
                      goto LABEL_292;
                    }
                    v256 += (int)v232 - v257;
                  }
                  uint64_t v148 = (uint64_t)v295;
                  uint64_t v258 = sub_2505BD7F0();
                  if (v258 >= (v232 >> 32) - (int)v232) {
                    size_t v259 = (v232 >> 32) - (int)v232;
                  }
                  else {
                    size_t v259 = v258;
                  }
                  if (!v254) {
                    goto LABEL_312;
                  }
                  if (!v256) {
                    goto LABEL_313;
                  }
                  int v252 = memcmp(v254, v256, v259);
                  sub_250511528(v232, v233);
                  goto LABEL_210;
                }
                uint64_t v274 = *(void *)(v232 + 16);
                uint64_t v290 = *(void *)(v232 + 24);
                swift_retain();
                swift_retain();
                uint64_t v275 = (char *)sub_2505BD7D0();
                if (v275)
                {
                  uint64_t v276 = sub_2505BD800();
                  if (__OFSUB__(v274, v276)) {
                    goto LABEL_291;
                  }
                  v275 += v274 - v276;
                }
                BOOL v175 = __OFSUB__(v290, v274);
                int64_t v277 = v290 - v274;
                if (v175) {
                  goto LABEL_280;
                }
                uint64_t v278 = sub_2505BD7F0();
                if (v278 >= v277) {
                  size_t v279 = v277;
                }
                else {
                  size_t v279 = v278;
                }
                if (!v254) {
                  goto LABEL_318;
                }
                if (!v275) {
                  goto LABEL_319;
                }
                int v252 = memcmp(v254, v275, v279);
                swift_release();
                swift_release();
                swift_release();
LABEL_221:
                swift_release();
                sub_250511528(v232, v233);
                sub_250511528(v227, v229);
                uint64_t v149 = (uint64_t)v296;
                unint64_t v147 = v292;
LABEL_236:
                sub_2505659B0(v303, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
                sub_2505659B0(v148, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
                sub_2505659B0(v149, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
                sub_2505659B0(v311, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
                uint64_t v151 = (uint64_t)v300;
                uint64_t v150 = (uint64_t)v301;
                uint64_t v152 = (uint64_t)v299;
                uint64_t v145 = v304;
                unint64_t v146 = v297;
                if (v252) {
                  goto LABEL_245;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v237) {
                  goto LABEL_191;
                }
                if (v237 == 1)
                {
                  uint64_t v241 = (v230 >> 32) - (int)v230;
                  if (v230 >> 32 < (int)v230) {
                    goto LABEL_274;
                  }
                  uint64_t v260 = sub_2505BD7D0();
                  if (!v260) {
                    goto LABEL_314;
                  }
                  uint64_t v243 = v260;
                  uint64_t v261 = sub_2505BD800();
                  uint64_t v245 = (int)v232 - v261;
                  if (__OFSUB__((int)v232, v261)) {
                    goto LABEL_279;
                  }
LABEL_187:
                  uint64_t v262 = sub_2505BD7F0();
                  if (v262 >= v241) {
                    size_t v263 = v241;
                  }
                  else {
                    size_t v263 = v262;
                  }
                  int v252 = memcmp(__s1, (const void *)(v243 + v245), v263);
                  goto LABEL_235;
                }
                uint64_t v270 = *(void *)(v230 + 16);
                uint64_t v271 = *(void *)(v230 + 24);
                swift_retain();
                swift_retain();
                uint64_t v266 = (char *)sub_2505BD7D0();
                if (v266)
                {
                  uint64_t v272 = sub_2505BD800();
                  if (__OFSUB__(v270, v272)) {
                    goto LABEL_290;
                  }
                  v266 += v270 - v272;
                }
                BOOL v175 = __OFSUB__(v271, v270);
                int64_t v268 = v271 - v270;
                if (v175) {
                  goto LABEL_277;
                }
                uint64_t v269 = sub_2505BD7F0();
                uint64_t v149 = (uint64_t)v296;
                if (!v266) {
                  goto LABEL_316;
                }
LABEL_203:
                if (v269 >= v268) {
                  size_t v273 = v268;
                }
                else {
                  size_t v273 = v269;
                }
                int v252 = memcmp(__s1, v266, v273);
                swift_release();
                swift_release();
LABEL_207:
                sub_250511528(v232, v233);
                sub_250511528(v227, v229);
                goto LABEL_236;
              default:
                __s1[0] = v227;
                LOWORD(__s1[1]) = v229;
                BYTE2(__s1[1]) = BYTE2(v229);
                BYTE3(__s1[1]) = BYTE3(v229);
                BYTE4(__s1[1]) = BYTE4(v229);
                BYTE5(__s1[1]) = BYTE5(v229);
                if (!v237)
                {
LABEL_191:
                  uint64_t __s2 = v230;
                  __int16 v314 = v231;
                  char v315 = BYTE2(v231);
                  char v316 = BYTE3(v231);
                  char v317 = BYTE4(v231);
                  char v318 = BYTE5(v231);
                  int v252 = memcmp(__s1, &__s2, BYTE6(v231));
                  goto LABEL_207;
                }
                if (v237 == 1)
                {
                  uint64_t v241 = (v230 >> 32) - (int)v230;
                  if (v230 >> 32 < (int)v230) {
                    goto LABEL_273;
                  }
                  uint64_t v242 = sub_2505BD7D0();
                  if (!v242) {
                    goto LABEL_309;
                  }
                  uint64_t v243 = v242;
                  uint64_t v244 = sub_2505BD800();
                  uint64_t v245 = (int)v232 - v244;
                  if (__OFSUB__((int)v232, v244)) {
                    goto LABEL_278;
                  }
                  goto LABEL_187;
                }
                uint64_t v264 = *(void *)(v230 + 16);
                uint64_t v265 = *(void *)(v230 + 24);
                swift_retain();
                swift_retain();
                uint64_t v266 = (char *)sub_2505BD7D0();
                if (v266)
                {
                  uint64_t v267 = sub_2505BD800();
                  if (__OFSUB__(v264, v267)) {
                    goto LABEL_289;
                  }
                  v266 += v264 - v267;
                }
                BOOL v175 = __OFSUB__(v265, v264);
                int64_t v268 = v265 - v264;
                if (v175) {
                  goto LABEL_276;
                }
                uint64_t v269 = sub_2505BD7F0();
                uint64_t v149 = (uint64_t)v296;
                if (!v266) {
                  goto LABEL_315;
                }
                goto LABEL_203;
            }
          }
          continue;
        }
LABEL_242:
        sub_250511528(v230, v231);
        sub_250511528(v227, v229);
        uint64_t v226 = v303;
LABEL_243:
        sub_2505659B0(v226, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
        sub_2505659B0(v148, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
        sub_2505659B0(v149, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
        uint64_t v288 = v311;
LABEL_244:
        sub_2505659B0(v288, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
LABEL_245:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v111 = v291;
        uint64_t v133 = v309;
        uint64_t v132 = v310;
        uint64_t v134 = v308;
LABEL_9:
        sub_2505659B0(v134, type metadata accessor for UserKeyingInfo);
        sub_2505659B0(v133, type metadata accessor for UserKeyingInfo);
        sub_250569D90(v111, (uint64_t)v132, type metadata accessor for UserKeyingInfo);
        char v154 = 0;
LABEL_10:
        sub_2505659B0((uint64_t)v132, type metadata accessor for UserKeyingInfo);
        return v154 & 1;
      case 2uLL:
        uint64_t v240 = *(void *)(v230 + 16);
        uint64_t v239 = *(void *)(v230 + 24);
        BOOL v175 = __OFSUB__(v239, v240);
        uint64_t v238 = v239 - v240;
        if (!v175) {
          goto LABEL_141;
        }
        goto LABEL_256;
      case 3uLL:
        if (!v234) {
          goto LABEL_12;
        }
        goto LABEL_242;
      default:
        uint64_t v238 = BYTE6(v231);
        goto LABEL_141;
    }
  }
}

unint64_t sub_250565958()
{
  unint64_t result = qword_269AB5A40;
  if (!qword_269AB5A40)
  {
    type metadata accessor for GKCrypto_UserKeys(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269AB5A40);
  }
  return result;
}

uint64_t sub_2505659B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_250565A10(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_2505BD7D0();
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  uint64_t v11 = sub_2505BD800();
  BOOL v12 = __OFSUB__(a1, v11);
  uint64_t v13 = a1 - v11;
  if (v12)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    sub_2505BD7F0();
    if (a3)
    {
LABEL_15:
      __break(1u);
      JUMPOUT(0x250565B00);
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_2505BD7F0();
  if (!a3) {
    goto LABEL_14;
  }
  size_t v14 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a4), a4)) {
        goto LABEL_11;
      }
      size_t v14 = HIDWORD(a4) - (int)a4;
      return timingsafe_bcmp(a3, (const void *)(v10 + v13), v14) == 0;
    case 2uLL:
      uint64_t v16 = *(void *)(a4 + 16);
      uint64_t v15 = *(void *)(a4 + 24);
      size_t v14 = v15 - v16;
      if (!__OFSUB__(v15, v16)) {
        return timingsafe_bcmp(a3, (const void *)(v10 + v13), v14) == 0;
      }
      goto LABEL_12;
    case 3uLL:
      return timingsafe_bcmp(a3, (const void *)(v10 + v13), v14) == 0;
    default:
      size_t v14 = BYTE6(a5);
      return timingsafe_bcmp(a3, (const void *)(v10 + v13), v14) == 0;
  }
}

BOOL _s14GroupKitCrypto14UserKeyingInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __b1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2505BE000();
  unint64_t v5 = *(void *)(v4 - 8);
  uint64_t v280 = v4;
  unint64_t v281 = v5;
  uint64_t v10 = MEMORY[0x270FA5388](v4, v6, v7, v8, v9);
  int64_t v277 = (char *)v267 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v12, v13, v14, v15);
  uint64_t v276 = (char *)v267 - v16;
  uint64_t v278 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB68E8);
  MEMORY[0x270FA5388](v278, v17, v18, v19, v20);
  uint64_t v279 = (uint64_t)v267 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_2505BDF90();
  uint64_t v285 = *(void *)(v22 - 8);
  uint64_t v286 = v22;
  uint64_t v27 = MEMORY[0x270FA5388](v22, v23, v24, v25, v26);
  uint64_t v282 = (char *)v267 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27, v29, v30, v31, v32);
  int64_t v283 = (char *)v267 - v33;
  uint64_t v284 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_269AB68F0);
  MEMORY[0x270FA5388](v284, v34, v35, v36, v37);
  uint64_t v39 = (char *)v267 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UserKeyingInfo(0);
  uint64_t v45 = MEMORY[0x270FA5388](v40, v41, v42, v43, v44);
  uint64_t v47 = (char *)v267 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = MEMORY[0x270FA5388](v45, v48, v49, v50, v51);
  uint64_t v54 = (char *)v267 - v53;
  uint64_t v59 = MEMORY[0x270FA5388](v52, v55, v56, v57, v58);
  uint64_t v61 = (char *)v267 - v60;
  MEMORY[0x270FA5388](v59, v62, v63, v64, v65);
  uint64_t v67 = (char *)v267 - v66;
  char v68 = sub_250563AF4(a1, a2);
  sub_250569D90(a1, (uint64_t)v67, type metadata accessor for UserKeyingInfo);
  uint64_t v69 = (uint64_t)v47;
  uint64_t v70 = a2;
  sub_250569D90(a2, (uint64_t)v61, type metadata accessor for UserKeyingInfo);
  if ((v68 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v273 = a1;
  uint64_t v274 = a2;
  uint64_t v275 = v69;
  uint64_t v71 = v40;
  uint64_t v72 = *(int *)(v40 + 40);
  uint64_t v272 = v67;
  uint64_t v73 = (uint64_t)&v61[v72];
  uint64_t v74 = (uint64_t)&v39[*((int *)v284 + 12)];
  sub_2504DAEFC((uint64_t)&v67[v72], (uint64_t)v39, &qword_269AB5A78);
  sub_2504DAEFC(v73, v74, &qword_269AB5A78);
  uint64_t v75 = v286;
  uint64_t v76 = v285;
  uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v285 + 48);
  LODWORD(v73) = v77(v39, 1, v286);
  int v78 = v77((char *)v74, 1, v75);
  if (v73 == 1)
  {
    if (v78 == 1)
    {
      sub_2505659B0((uint64_t)v61, type metadata accessor for UserKeyingInfo);
      sub_2505659B0((uint64_t)v272, type metadata accessor for UserKeyingInfo);
      sub_250569D90(v273, (uint64_t)v54, type metadata accessor for UserKeyingInfo);
      uint64_t v69 = v275;
      sub_250569D90(v274, v275, type metadata accessor for UserKeyingInfo);
      uint64_t v79 = v71;
      goto LABEL_5;
    }
    sub_2504DAF60(v74, &qword_269AB5A78);
    goto LABEL_11;
  }
  if (v78 == 1)
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v39, v75);
LABEL_11:
    uint64_t v70 = v274;
    uint64_t v69 = v275;
    uint64_t v67 = v272;
    a1 = v273;
LABEL_12:
    sub_2505659B0((uint64_t)v61, type metadata accessor for UserKeyingInfo);
    sub_2505659B0((uint64_t)v67, type metadata accessor for UserKeyingInfo);
    sub_250569D90(a1, (uint64_t)v54, type metadata accessor for UserKeyingInfo);
    uint64_t v90 = v70;
LABEL_13:
    sub_250569D90(v90, v69, type metadata accessor for UserKeyingInfo);
LABEL_14:
    BOOL v89 = 0;
    goto LABEL_15;
  }
  uint64_t v284 = v61;
  uint64_t v92 = v76;
  uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
  v93(v283, v39, v75);
  v93(v282, (char *)v74, v75);
  uint64_t v94 = sub_2505BDF60();
  unint64_t v96 = v95;
  uint64_t v97 = sub_2505BDF60();
  unint64_t v99 = v98;
  uint64_t v100 = 0;
  uint64_t v102 = v273;
  uint64_t v101 = v274;
  uint64_t v79 = v71;
  switch(v96 >> 62)
  {
    case 1uLL:
      LODWORD(v100) = HIDWORD(v94) - v94;
      if (__OFSUB__(HIDWORD(v94), v94))
      {
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
      }
      uint64_t v100 = (int)v100;
LABEL_27:
      unint64_t v114 = v98 >> 62;
      switch(v98 >> 62)
      {
        case 1uLL:
          LODWORD(v115) = HIDWORD(v97) - v97;
          if (__OFSUB__(HIDWORD(v97), v97)) {
            goto LABEL_202;
          }
          uint64_t v115 = (int)v115;
LABEL_32:
          if (v100 != v115)
          {
LABEL_37:
            sub_250511528(v97, v98);
            sub_250511528(v94, v96);
            unint64_t v119 = *(void (**)(char *, uint64_t))(v92 + 8);
            v119(v282, v75);
            v119(v283, v75);
            sub_2505659B0((uint64_t)v284, type metadata accessor for UserKeyingInfo);
            sub_2505659B0((uint64_t)v272, type metadata accessor for UserKeyingInfo);
            sub_250569D90(v102, (uint64_t)v54, type metadata accessor for UserKeyingInfo);
            uint64_t v90 = v101;
            uint64_t v69 = v275;
            goto LABEL_13;
          }
LABEL_33:
          unint64_t v270 = v98;
          uint64_t v271 = v97;
          switch(v96 >> 62)
          {
            case 1uLL:
              uint64_t v120 = v94;
              uint64_t v94 = (int)v94;
              if ((int)v94 > v120 >> 32) {
                goto LABEL_204;
              }
              uint64_t v121 = v273;
              unint64_t v122 = v98 >> 62;
              unint64_t v123 = v120;
              unint64_t v268 = v96;
              sub_2504DBC4C(v120, v96);
              unint64_t v96 = sub_2505BD7D0();
              if (!v96) {
                goto LABEL_42;
              }
              uint64_t v124 = sub_2505BD800();
              if (__OFSUB__(v94, v124)) {
                goto LABEL_210;
              }
              v96 += v94 - v124;
              break;
            case 2uLL:
              goto LABEL_47;
            case 3uLL:
LABEL_55:
              memset(__b1, 0, 14);
              uint64_t v269 = (const void *)v94;
              switch((int)v114)
              {
                case 1:
                  unint64_t v268 = v96;
                  uint64_t v171 = (int)v97;
                  if ((int)v97 > v97 >> 32) {
                    goto LABEL_214;
                  }
                  uint64_t v172 = sub_2505BD7D0();
                  if (!v172) {
                    goto LABEL_252;
                  }
                  uint64_t v173 = v172;
                  uint64_t v174 = sub_2505BD800();
                  BOOL v113 = __OFSUB__(v171, v174);
                  uint64_t v175 = v171 - v174;
                  if (v113) {
                    goto LABEL_220;
                  }
                  sub_2505BD7F0();
                  int v160 = timingsafe_bcmp(__b1, (const void *)(v173 + v175), 0);
                  uint64_t v176 = v271;
LABEL_108:
                  sub_250511528(v176, v270);
                  uint64_t v183 = (uint64_t)v269;
                  break;
                case 2:
                  unint64_t v268 = v96;
                  uint64_t v177 = *(void *)(v97 + 16);
                  swift_retain();
                  swift_retain();
                  uint64_t v178 = sub_2505BD7D0();
                  if (!v178) {
                    goto LABEL_253;
                  }
                  uint64_t v179 = v178;
                  uint64_t v180 = sub_2505BD800();
                  BOOL v113 = __OFSUB__(v177, v180);
                  uint64_t v181 = v177 - v180;
                  if (v113) {
                    goto LABEL_215;
                  }
                  sub_2505BD7F0();
                  int v160 = timingsafe_bcmp(__b1, (const void *)(v179 + v181), 0);
                  swift_release();
                  uint64_t v182 = v271;
                  swift_release();
                  uint64_t v176 = v182;
                  goto LABEL_108;
                case 3:
                  memset(__b2, 0, 14);
                  goto LABEL_110;
                default:
                  __b2[0] = v97;
                  LOWORD(__b2[1]) = v99;
                  BYTE2(__b2[1]) = BYTE2(v99);
                  BYTE3(__b2[1]) = BYTE3(v99);
                  BYTE4(__b2[1]) = BYTE4(v99);
                  BYTE5(__b2[1]) = BYTE5(v99);
LABEL_110:
                  uint64_t v170 = v97;
                  size_t v118 = 0;
                  goto LABEL_111;
              }
              goto LABEL_127;
            default:
              __b1[0] = v94;
              LOWORD(__b1[1]) = v96;
              BYTE2(__b1[1]) = BYTE2(v96);
              BYTE3(__b1[1]) = BYTE3(v96);
              BYTE4(__b1[1]) = BYTE4(v96);
              BYTE5(__b1[1]) = BYTE5(v96);
              uint64_t v269 = (const void *)v94;
              switch((int)v114)
              {
                case 1:
                  unint64_t v268 = v96;
                  uint64_t v153 = (int)v97;
                  if ((int)v97 > v97 >> 32) {
                    goto LABEL_212;
                  }
                  uint64_t v154 = sub_2505BD7D0();
                  if (!v154) {
                    goto LABEL_250;
                  }
                  uint64_t v155 = v154;
                  uint64_t v156 = sub_2505BD800();
                  BOOL v113 = __OFSUB__(v153, v156);
                  uint64_t v157 = v153 - v156;
                  if (v113) {
                    goto LABEL_219;
                  }
                  sub_2505BD7F0();
                  unint64_t v158 = (const void *)(v155 + v157);
                  unint64_t v159 = v268;
                  int v160 = timingsafe_bcmp(__b1, v158, BYTE6(v268));
                  uint64_t v161 = v271;
LABEL_98:
                  unint64_t v169 = v270;
LABEL_112:
                  sub_250511528(v161, v169);
                  uint64_t v183 = (uint64_t)v269;
                  break;
                case 2:
                  unint64_t v268 = v96;
                  uint64_t v162 = *(void *)(v97 + 16);
                  swift_retain();
                  swift_retain();
                  uint64_t v163 = sub_2505BD7D0();
                  if (!v163) {
                    goto LABEL_251;
                  }
                  uint64_t v164 = v163;
                  uint64_t v165 = sub_2505BD800();
                  BOOL v113 = __OFSUB__(v162, v165);
                  uint64_t v166 = v162 - v165;
                  if (v113) {
                    goto LABEL_213;
                  }
                  sub_2505BD7F0();
                  unint64_t v167 = (const void *)(v164 + v166);
                  unint64_t v159 = v268;
                  int v160 = timingsafe_bcmp(__b1, v167, BYTE6(v268));
                  swift_release();
                  uint64_t v168 = v271;
                  swift_release();
                  uint64_t v161 = v168;
                  goto LABEL_98;
                case 3:
                  size_t v118 = BYTE6(v96);
                  memset(__b2, 0, 14);
                  goto LABEL_100;
                default:
                  __b2[0] = v97;
                  LOWORD(__b2[1]) = v98;
                  BYTE2(__b2[1]) = BYTE2(v98);
                  BYTE3(__b2[1]) = BYTE3(v98);
                  BYTE4(__b2[1]) = BYTE4(v98);
                  size_t v118 = BYTE6(v96);
                  BYTE5(__b2[1]) = BYTE5(v98);
LABEL_100:
                  uint64_t v170 = v97;
LABEL_111:
                  unint64_t v159 = v96;
                  int v160 = timingsafe_bcmp(__b1, __b2, v118);
                  uint64_t v161 = v170;
                  unint64_t v169 = v99;
                  goto LABEL_112;
              }
              goto LABEL_143;
          }
          break;
        case 2uLL:
          uint64_t v117 = *(void *)(v97 + 16);
          uint64_t v116 = *(void *)(v97 + 24);
          BOOL v113 = __OFSUB__(v116, v117);
          uint64_t v115 = v116 - v117;
          if (!v113) {
            goto LABEL_32;
          }
          goto LABEL_203;
        case 3uLL:
          if (v100) {
            goto LABEL_37;
          }
          goto LABEL_33;
        default:
          uint64_t v115 = BYTE6(v98);
          goto LABEL_32;
      }
LABEL_42:
      uint64_t v94 = HIDWORD(v123);
      sub_2505BD7F0();
      uint64_t v125 = v122;
      uint64_t v102 = v121;
      switch(v125)
      {
        case 1:
          uint64_t v269 = (const void *)v96;
          uint64_t v206 = (int)v271;
          if ((int)v271 > v271 >> 32) {
            goto LABEL_222;
          }
          sub_2504DBC4C(v271, v270);
          uint64_t v207 = sub_2505BD7D0();
          if (!v207) {
            goto LABEL_259;
          }
          uint64_t v208 = v207;
          uint64_t v209 = sub_2505BD800();
          BOOL v113 = __OFSUB__(v206, v209);
          uint64_t v210 = v206 - v209;
          if (v113) {
            goto LABEL_227;
          }
          sub_2505BD7F0();
          if (!v269) {
            goto LABEL_260;
          }
          unint64_t v211 = v270;
          if (__OFSUB__(HIDWORD(v123), v123)) {
            goto LABEL_229;
          }
          unint64_t v212 = v123;
          int v160 = timingsafe_bcmp(v269, (const void *)(v208 + v210), HIDWORD(v123) - (int)v123);
          uint64_t v213 = v271;
          sub_250511528(v271, v211);
          uint64_t v214 = v212;
          unint64_t v215 = v211;
          uint64_t v216 = v212;
          unint64_t v217 = v268;
          sub_250511528(v214, v268);
          sub_250511528(v213, v215);
          uint64_t v218 = v216;
LABEL_139:
          sub_250511528(v218, v217);
          uint64_t v101 = v274;
          goto LABEL_145;
        case 2:
          uint64_t v269 = (const void *)v96;
          uint64_t v219 = *(void *)(v271 + 16);
          swift_retain();
          swift_retain();
          uint64_t v220 = sub_2505BD7D0();
          if (!v220) {
            goto LABEL_261;
          }
          uint64_t v221 = v220;
          uint64_t v222 = sub_2505BD800();
          BOOL v113 = __OFSUB__(v219, v222);
          uint64_t v223 = v219 - v222;
          if (v113) {
            goto LABEL_223;
          }
          sub_2505BD7F0();
          if (!v269) {
            goto LABEL_262;
          }
          if (__OFSUB__(HIDWORD(v123), v123)) {
            goto LABEL_228;
          }
          int v160 = timingsafe_bcmp(v269, (const void *)(v221 + v223), HIDWORD(v123) - (int)v123);
          swift_release();
          uint64_t v224 = v271;
          swift_release();
          unint64_t v217 = v268;
          sub_250511528(v123, v268);
          sub_250511528(v224, v270);
          uint64_t v218 = v123;
          goto LABEL_139;
        case 3:
          memset(__b1, 0, 14);
          if (!v96) {
            goto LABEL_263;
          }
          int v126 = HIDWORD(v123) - v123;
          uint64_t v101 = v274;
          if (!__OFSUB__(HIDWORD(v123), v123)) {
            goto LABEL_142;
          }
          goto LABEL_224;
        default:
          __b1[0] = v271;
          LODWORD(__b1[1]) = v270;
          WORD2(__b1[1]) = WORD2(v270);
          if (!v96) {
            goto LABEL_248;
          }
          int v126 = HIDWORD(v123) - v123;
          uint64_t v101 = v274;
          if (!__OFSUB__(HIDWORD(v123), v123))
          {
LABEL_142:
            int v160 = timingsafe_bcmp((const void *)v96, __b1, v126);
            unint64_t v159 = v268;
            sub_250511528(v123, v268);
            sub_250511528(v271, v270);
            uint64_t v183 = v123;
LABEL_143:
            unint64_t v205 = v159;
            goto LABEL_144;
          }
          __break(1u);
LABEL_47:
          uint64_t v127 = v101;
          uint64_t v101 = v102;
          unsigned int v128 = v114;
          unint64_t v268 = v96;
          unint64_t v129 = (const void *)(v96 & 0x3FFFFFFFFFFFFFFFLL);
          uint64_t v130 = (const void *)v94;
          uint64_t v131 = *(void *)(v94 + 16);
          uint64_t v269 = v130;
          swift_retain();
          swift_retain();
          unint64_t v96 = sub_2505BD7D0();
          v267[1] = v129;
          if (!v96) {
            goto LABEL_50;
          }
          uint64_t v132 = sub_2505BD800();
          if (__OFSUB__(v131, v132)) {
            goto LABEL_209;
          }
          v96 += v131 - v132;
LABEL_50:
          sub_2505BD7F0();
          uint64_t v133 = v128;
          unint64_t v99 = v270;
          uint64_t v97 = v271;
          uint64_t v102 = v101;
          switch(v133)
          {
            case 1:
              v267[0] = (const void *)v96;
              uint64_t v184 = (int)v271;
              if ((int)v271 > v271 >> 32) {
                goto LABEL_216;
              }
              uint64_t v101 = v127;
              sub_2504DBC4C(v271, v270);
              uint64_t v185 = sub_2505BD7D0();
              if (!v185) {
                goto LABEL_254;
              }
              uint64_t v186 = v185;
              uint64_t v187 = sub_2505BD800();
              BOOL v113 = __OFSUB__(v184, v187);
              uint64_t v188 = v184 - v187;
              if (v113) {
                goto LABEL_221;
              }
              sub_2505BD7F0();
              if (!v267[0]) {
                goto LABEL_255;
              }
              uint64_t v189 = (uint64_t)v269;
              uint64_t v191 = *((void *)v269 + 2);
              uint64_t v190 = *((void *)v269 + 3);
              if (__OFSUB__(v190, v191)) {
                goto LABEL_226;
              }
              int v160 = timingsafe_bcmp(v267[0], (const void *)(v186 + v188), v190 - v191);
              uint64_t v192 = v271;
              unint64_t v193 = v270;
              sub_250511528(v271, v270);
              swift_release();
              swift_release();
              sub_250511528(v192, v193);
              uint64_t v183 = v189;
              break;
            case 2:
              v267[0] = (const void *)v96;
              uint64_t v194 = *(void *)(v271 + 16);
              swift_retain();
              swift_retain();
              uint64_t v195 = sub_2505BD7D0();
              if (!v195) {
                goto LABEL_256;
              }
              uint64_t v196 = v195;
              uint64_t v101 = v127;
              uint64_t v197 = sub_2505BD800();
              BOOL v113 = __OFSUB__(v194, v197);
              uint64_t v198 = v194 - v197;
              if (v113) {
                goto LABEL_217;
              }
              sub_2505BD7F0();
              if (!v267[0]) {
                goto LABEL_257;
              }
              uint64_t v199 = (uint64_t)v269;
              uint64_t v201 = *((void *)v269 + 2);
              uint64_t v200 = *((void *)v269 + 3);
              if (__OFSUB__(v200, v201)) {
                goto LABEL_225;
              }
              int v160 = timingsafe_bcmp(v267[0], (const void *)(v196 + v198), v200 - v201);
              swift_release();
              swift_release();
              swift_release();
              uint64_t v202 = v271;
              swift_release();
              sub_250511528(v202, v270);
              uint64_t v183 = v199;
              break;
            case 3:
              memset(__b1, 0, 14);
              uint64_t v94 = (uint64_t)v269;
              if (!v96) {
                goto LABEL_258;
              }
              uint64_t v204 = *((void *)v269 + 2);
              uint64_t v203 = *((void *)v269 + 3);
              size_t v136 = v203 - v204;
              if (!__OFSUB__(v203, v204)) {
                goto LABEL_126;
              }
              goto LABEL_218;
            default:
              __b1[0] = v271;
              LODWORD(__b1[1]) = v270;
              WORD2(__b1[1]) = WORD2(v270);
              uint64_t v94 = (uint64_t)v269;
              if (!v96) {
                goto LABEL_249;
              }
              uint64_t v135 = *((void *)v269 + 2);
              uint64_t v134 = *((void *)v269 + 3);
              size_t v136 = v134 - v135;
              if (__OFSUB__(v134, v135))
              {
                __break(1u);
                goto LABEL_55;
              }
LABEL_126:
              uint64_t v101 = v127;
              int v160 = timingsafe_bcmp((const void *)v96, __b1, v136);
              swift_release();
              swift_release();
              sub_250511528(v271, v99);
              uint64_t v183 = v94;
              break;
          }
LABEL_127:
          unint64_t v205 = v268;
LABEL_144:
          sub_250511528(v183, v205);
LABEL_145:
          size_t v225 = *(void (**)(char *, uint64_t))(v92 + 8);
          v225(v282, v75);
          v225(v283, v75);
          sub_2505659B0((uint64_t)v284, type metadata accessor for UserKeyingInfo);
          sub_2505659B0((uint64_t)v272, type metadata accessor for UserKeyingInfo);
          sub_250569D90(v102, (uint64_t)v54, type metadata accessor for UserKeyingInfo);
          uint64_t v226 = v101;
          uint64_t v69 = v275;
          sub_250569D90(v226, v275, type metadata accessor for UserKeyingInfo);
          if (v160) {
            goto LABEL_14;
          }
LABEL_5:
          uint64_t v80 = *(int *)(v79 + 44);
          uint64_t v81 = v69;
          uint64_t v82 = v69 + v80;
          uint64_t v83 = v279;
          uint64_t v84 = v279 + *(int *)(v278 + 48);
          sub_2504DAEFC((uint64_t)&v54[v80], v279, &qword_269AB5A28);
          sub_2504DAEFC(v82, v84, &qword_269AB5A28);
          uint64_t v86 = v280;
          unint64_t v85 = v281;
          uint64_t v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 48);
          LODWORD(v82) = v87(v83, 1, v280);
          int v88 = v87(v84, 1, v86);
          if (v82 != 1)
          {
            if (v88 == 1)
            {
              (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v83, v86);
LABEL_21:
              BOOL v89 = 0;
              uint64_t v69 = v81;
              goto LABEL_15;
            }
            uint64_t v79 = *(void *)(v85 + 32);
            ((void (*)(char *, uint64_t, uint64_t))v79)(v276, v83, v86);
            ((void (*)(char *, uint64_t, uint64_t))v79)(v277, v84, v86);
            uint64_t v103 = sub_2505BDF60();
            unint64_t v105 = v104;
            uint64_t v106 = sub_2505BDF60();
            uint64_t v108 = v106;
            unint64_t v109 = v107;
            uint64_t v110 = 0;
            switch(v105 >> 62)
            {
              case 1uLL:
                LODWORD(v110) = HIDWORD(v103) - v103;
                if (__OFSUB__(HIDWORD(v103), v103)) {
                  goto LABEL_205;
                }
                uint64_t v110 = (int)v110;
                break;
              case 2uLL:
                uint64_t v138 = *(void *)(v103 + 16);
                uint64_t v137 = *(void *)(v103 + 24);
                BOOL v113 = __OFSUB__(v137, v138);
                uint64_t v110 = v137 - v138;
                if (!v113) {
                  break;
                }
                goto LABEL_206;
              case 3uLL:
                break;
              default:
                uint64_t v110 = BYTE6(v105);
                break;
            }
            unint64_t v139 = v107 >> 62;
            switch(v107 >> 62)
            {
              case 1uLL:
                LODWORD(v140) = HIDWORD(v106) - v106;
                if (__OFSUB__(HIDWORD(v106), v106)) {
                  goto LABEL_207;
                }
                uint64_t v140 = (int)v140;
LABEL_65:
                if (v110 != v140)
                {
LABEL_70:
                  sub_250511528(v106, v107);
                  sub_250511528(v103, v105);
                  BOOL v89 = 0;
                  unint64_t v139 = v281;
LABEL_71:
                  uint64_t v69 = v81;
LABEL_196:
                  uint64_t v265 = *(void (**)(char *, uint64_t))(v139 + 8);
                  v265(v277, v86);
                  v265(v276, v86);
                  goto LABEL_15;
                }
                break;
              case 2uLL:
                uint64_t v142 = *(void *)(v106 + 16);
                uint64_t v141 = *(void *)(v106 + 24);
                BOOL v113 = __OFSUB__(v141, v142);
                uint64_t v140 = v141 - v142;
                if (!v113) {
                  goto LABEL_65;
                }
                goto LABEL_208;
              case 3uLL:
                if (v110) {
                  goto LABEL_70;
                }
                break;
              default:
                uint64_t v140 = BYTE6(v107);
                goto LABEL_65;
            }
            switch(v105 >> 62)
            {
              case 1uLL:
                if ((int)v103 > v103 >> 32) {
                  goto LABEL_211;
                }
                sub_2504DBC4C(v103, v105);
                uint64_t v79 = sub_2505BD7D0();
                if (!v79) {
                  goto LABEL_76;
                }
                uint64_t v145 = sub_2505BD800();
                if (__OFSUB__((int)v103, v145)) {
                  goto LABEL_231;
                }
                v79 += (int)v103 - v145;
LABEL_76:
                uint64_t v81 = v275;
                sub_2505BD7F0();
                switch((int)v139)
                {
                  case 1:
                    if ((int)v108 > v108 >> 32) {
                      goto LABEL_241;
                    }
                    sub_2504DBC4C(v108, v109);
                    uint64_t v253 = sub_2505BD7D0();
                    if (!v253) {
                      goto LABEL_280;
                    }
                    uint64_t v254 = v253;
                    uint64_t v255 = sub_2505BD800();
                    uint64_t v256 = (int)v108 - v255;
                    if (__OFSUB__((int)v108, v255)) {
                      goto LABEL_245;
                    }
                    sub_2505BD7F0();
                    if (!v79) {
                      goto LABEL_281;
                    }
                    if (__OFSUB__(HIDWORD(v103), v103)) {
                      goto LABEL_247;
                    }
                    int v257 = timingsafe_bcmp((const void *)v79, (const void *)(v254 + v256), HIDWORD(v103) - (int)v103);
                    sub_250511528(v108, v109);
                    sub_250511528(v103, v105);
                    sub_250511528(v108, v109);
                    sub_250511528(v103, v105);
                    BOOL v258 = v257 == 0;
LABEL_191:
                    BOOL v89 = v258;
LABEL_194:
                    uint64_t v69 = v275;
                    uint64_t v86 = v280;
LABEL_195:
                    unint64_t v139 = v281;
                    goto LABEL_196;
                  case 2:
                    uint64_t v259 = *(void *)(v108 + 16);
                    swift_retain();
                    swift_retain();
                    uint64_t v260 = sub_2505BD7D0();
                    if (!v260) {
                      goto LABEL_277;
                    }
                    uint64_t v261 = v260;
                    uint64_t v262 = sub_2505BD800();
                    BOOL v113 = __OFSUB__(v259, v262);
                    uint64_t v263 = v259 - v262;
                    if (v113) {
                      goto LABEL_242;
                    }
                    sub_2505BD7F0();
                    if (!v79) {
                      goto LABEL_278;
                    }
                    if (__OFSUB__(HIDWORD(v103), v103)) {
                      goto LABEL_246;
                    }
                    int v264 = timingsafe_bcmp((const void *)v79, (const void *)(v261 + v263), HIDWORD(v103) - (int)v103);
                    swift_release();
                    swift_release();
                    sub_250511528(v103, v105);
                    sub_250511528(v108, v109);
                    sub_250511528(v103, v105);
                    BOOL v258 = v264 == 0;
                    goto LABEL_191;
                  case 3:
                    memset(__b1, 0, 14);
                    unint64_t v139 = v281;
                    if (!v79) {
                      goto LABEL_279;
                    }
                    int v146 = HIDWORD(v103) - v103;
                    if (!__OFSUB__(HIDWORD(v103), v103)) {
                      goto LABEL_199;
                    }
                    goto LABEL_243;
                  default:
                    __b1[0] = v108;
                    LOWORD(__b1[1]) = v109;
                    BYTE2(__b1[1]) = BYTE2(v109);
                    BYTE3(__b1[1]) = BYTE3(v109);
                    BYTE4(__b1[1]) = BYTE4(v109);
                    BYTE5(__b1[1]) = BYTE5(v109);
                    unint64_t v139 = v281;
                    if (!v79) {
                      goto LABEL_268;
                    }
                    int v146 = HIDWORD(v103) - v103;
                    if (!__OFSUB__(HIDWORD(v103), v103))
                    {
LABEL_199:
                      int v266 = timingsafe_bcmp((const void *)v79, __b1, v146);
                      sub_250511528(v103, v105);
                      sub_250511528(v108, v109);
                      sub_250511528(v103, v105);
                      BOOL v89 = v266 == 0;
                      uint64_t v86 = v280;
                      goto LABEL_71;
                    }
                    __break(1u);
LABEL_81:
                    uint64_t v81 = v105 & 0x3FFFFFFFFFFFFFFFLL;
                    uint64_t v147 = *(void *)(v103 + 16);
                    swift_retain();
                    swift_retain();
                    uint64_t v79 = sub_2505BD7D0();
                    if (!v79) {
                      goto LABEL_84;
                    }
                    uint64_t v148 = sub_2505BD800();
                    if (!__OFSUB__(v147, v148))
                    {
                      v79 += v147 - v148;
LABEL_84:
                      uint64_t v86 = v280;
                      sub_2505BD7F0();
                      switch((int)v139)
                      {
                        case 1:
                          if ((int)v108 > v108 >> 32) {
                            goto LABEL_236;
                          }
                          sub_2504DBC4C(v103, v105);
                          sub_2504DBC4C(v108, v109);
                          uint64_t v242 = sub_2505BD7D0();
                          if (!v242) {
                            goto LABEL_274;
                          }
                          uint64_t v243 = v242;
                          uint64_t v244 = sub_2505BD800();
                          uint64_t v245 = (int)v108 - v244;
                          if (__OFSUB__((int)v108, v244)) {
                            goto LABEL_240;
                          }
                          sub_2505BD7F0();
                          if (!v79) {
                            goto LABEL_275;
                          }
                          uint64_t v247 = *(void *)(v103 + 16);
                          uint64_t v246 = *(void *)(v103 + 24);
                          if (__OFSUB__(v246, v247)) {
                            goto LABEL_244;
                          }
                          int v248 = timingsafe_bcmp((const void *)v79, (const void *)(v243 + v245), v246 - v247);
                          sub_250511528(v108, v109);
                          swift_release();
                          swift_release();
                          sub_250511528(v108, v109);
                          sub_250511528(v103, v105);
                          BOOL v89 = v248 == 0;
                          sub_250511528(v103, v105);
                          goto LABEL_194;
                        case 2:
                          uint64_t v249 = *(void *)(v108 + 16);
                          sub_2504DBC4C(v103, v105);
                          swift_retain();
                          swift_retain();
                          BOOL v89 = sub_250565A10(v249, v109 & 0x3FFFFFFFFFFFFFFFLL, (const void *)v79, v103, v105);
                          swift_release();
                          swift_release();
                          swift_release();
                          swift_release();
                          sub_250511528(v108, v109);
                          sub_250511528(v103, v105);
                          sub_250511528(v103, v105);
                          uint64_t v69 = v275;
                          goto LABEL_195;
                        case 3:
                          memset(__b1, 0, 14);
                          if (!v79) {
                            goto LABEL_276;
                          }
                          uint64_t v251 = *(void *)(v103 + 16);
                          uint64_t v250 = *(void *)(v103 + 24);
                          size_t v151 = v250 - v251;
                          unint64_t v139 = v281;
                          if (!__OFSUB__(v250, v251)) {
                            goto LABEL_179;
                          }
                          goto LABEL_237;
                        default:
                          __b1[0] = v108;
                          LOWORD(__b1[1]) = v109;
                          BYTE2(__b1[1]) = BYTE2(v109);
                          BYTE3(__b1[1]) = BYTE3(v109);
                          BYTE4(__b1[1]) = BYTE4(v109);
                          BYTE5(__b1[1]) = BYTE5(v109);
                          if (!v79) {
                            goto LABEL_269;
                          }
                          uint64_t v150 = *(void *)(v103 + 16);
                          uint64_t v149 = *(void *)(v103 + 24);
                          size_t v151 = v149 - v150;
                          unint64_t v139 = v281;
                          if (__OFSUB__(v149, v150))
                          {
                            __break(1u);
                            goto LABEL_89;
                          }
LABEL_179:
                          sub_2504DBC4C(v103, v105);
                          int v252 = timingsafe_bcmp((const void *)v79, __b1, v151);
                          swift_release();
                          swift_release();
                          sub_250511528(v108, v109);
                          sub_250511528(v103, v105);
                          sub_250511528(v103, v105);
                          BOOL v89 = v252 == 0;
                          uint64_t v69 = v275;
                          break;
                      }
                      goto LABEL_196;
                    }
                    break;
                }
                goto LABEL_230;
              case 2uLL:
                goto LABEL_81;
              case 3uLL:
LABEL_89:
                memset(__b1, 0, 14);
                uint64_t v152 = v139;
                unint64_t v139 = v281;
                switch(v152)
                {
                  case 1:
                    if ((int)v108 > v108 >> 32) {
                      goto LABEL_234;
                    }
                    uint64_t v236 = sub_2505BD7D0();
                    if (!v236) {
                      goto LABEL_272;
                    }
                    uint64_t v79 = v236;
                    uint64_t v237 = sub_2505BD800();
                    uint64_t v238 = (int)v108 - v237;
                    if (__OFSUB__((int)v108, v237)) {
                      goto LABEL_239;
                    }
                    sub_2505BD7F0();
                    uint64_t v230 = (const void *)(v79 + v238);
                    size_t v231 = 0;
                    break;
                  case 2:
                    uint64_t v286 = *(void *)(v108 + 16);
                    swift_retain();
                    swift_retain();
                    uint64_t v240 = sub_2505BD7D0();
                    if (!v240) {
                      goto LABEL_273;
                    }
                    uint64_t v79 = v240;
                    uint64_t v241 = sub_2505BD800();
                    BOOL v113 = __OFSUB__(v286, v241);
                    v286 -= v241;
                    if (v113) {
                      goto LABEL_235;
                    }
                    sub_2505BD7F0();
                    uint64_t v234 = (const void *)(v79 + v286);
                    size_t v235 = 0;
                    goto LABEL_164;
                  case 3:
                    memset(__b2, 0, 14);
                    goto LABEL_167;
                  default:
                    __b2[0] = v108;
                    LOWORD(__b2[1]) = v109;
                    BYTE2(__b2[1]) = BYTE2(v109);
                    BYTE3(__b2[1]) = BYTE3(v109);
                    BYTE4(__b2[1]) = BYTE4(v109);
                    BYTE5(__b2[1]) = BYTE5(v109);
LABEL_167:
                    size_t v144 = 0;
                    goto LABEL_168;
                }
                goto LABEL_160;
              default:
                __b1[0] = v103;
                LOWORD(__b1[1]) = v105;
                BYTE2(__b1[1]) = BYTE2(v105);
                BYTE3(__b1[1]) = BYTE3(v105);
                BYTE4(__b1[1]) = BYTE4(v105);
                BYTE5(__b1[1]) = BYTE5(v105);
                uint64_t v143 = v139;
                unint64_t v139 = v281;
                switch(v143)
                {
                  case 1:
                    if ((int)v106 > v106 >> 32)
                    {
                      __break(1u);
LABEL_233:
                      __break(1u);
LABEL_234:
                      __break(1u);
LABEL_235:
                      __break(1u);
LABEL_236:
                      __break(1u);
LABEL_237:
                      __break(1u);
                    }
                    else
                    {
                      uint64_t v227 = sub_2505BD7D0();
                      if (!v227)
                      {
LABEL_270:
                        sub_2505BD7F0();
                        __break(1u);
LABEL_271:
                        sub_2505BD7F0();
                        __break(1u);
LABEL_272:
                        sub_2505BD7F0();
                        __break(1u);
LABEL_273:
                        sub_2505BD7F0();
                        __break(1u);
LABEL_274:
                        sub_2505BD7F0();
                        if (!v79)
                        {
LABEL_275:
                          __break(1u);
LABEL_276:
                          __break(1u);
LABEL_277:
                          sub_2505BD7F0();
                          if (v79) {
                            goto LABEL_283;
                          }
LABEL_278:
                          __break(1u);
LABEL_279:
                          __break(1u);
LABEL_280:
                          sub_2505BD7F0();
                          if (v79)
                          {
LABEL_284:
                            __break(1u);
                            JUMPOUT(0x2505678C8);
                          }
LABEL_281:
                          __break(1u);
                        }
                        __break(1u);
LABEL_283:
                        __break(1u);
                        goto LABEL_284;
                      }
                      uint64_t v79 = v227;
                      uint64_t v228 = sub_2505BD800();
                      uint64_t v229 = (int)v108 - v228;
                      if (!__OFSUB__((int)v108, v228))
                      {
                        sub_2505BD7F0();
                        uint64_t v230 = (const void *)(v79 + v229);
                        size_t v231 = BYTE6(v105);
LABEL_160:
                        int v239 = timingsafe_bcmp(__b1, v230, v231);
LABEL_165:
                        sub_250511528(v108, v109);
                        sub_250511528(v103, v105);
                        uint64_t v69 = v275;
LABEL_169:
                        BOOL v89 = v239 == 0;
                        goto LABEL_196;
                      }
                    }
                    __break(1u);
LABEL_239:
                    __break(1u);
LABEL_240:
                    __break(1u);
LABEL_241:
                    __break(1u);
LABEL_242:
                    __break(1u);
LABEL_243:
                    __break(1u);
LABEL_244:
                    __break(1u);
LABEL_245:
                    __break(1u);
LABEL_246:
                    __break(1u);
LABEL_247:
                    __break(1u);
LABEL_248:
                    __break(1u);
LABEL_249:
                    __break(1u);
LABEL_250:
                    sub_2505BD7F0();
                    __break(1u);
LABEL_251:
                    sub_2505BD7F0();
                    __break(1u);
LABEL_252:
                    sub_2505BD7F0();
                    __break(1u);
LABEL_253:
                    sub_2505BD7F0();
                    __break(1u);
LABEL_254:
                    sub_2505BD7F0();
                    if (v267[0]) {
                      goto LABEL_264;
                    }
LABEL_255:
                    __break(1u);
LABEL_256:
                    sub_2505BD7F0();
                    if (v267[0]) {
                      goto LABEL_265;
                    }
LABEL_257:
                    __break(1u);
LABEL_258:
                    __break(1u);
LABEL_259:
                    sub_2505BD7F0();
                    if (v269) {
                      goto LABEL_266;
                    }
LABEL_260:
                    __break(1u);
LABEL_261:
                    sub_2505BD7F0();
                    if (!v269)
                    {
LABEL_262:
                      __break(1u);
LABEL_263:
                      __break(1u);
LABEL_264:
                      __break(1u);
LABEL_265:
                      __break(1u);
LABEL_266:
                      __break(1u);
                    }
                    __break(1u);
LABEL_268:
                    __break(1u);
LABEL_269:
                    __break(1u);
                    goto LABEL_270;
                  case 2:
                    uint64_t v286 = *(void *)(v106 + 16);
                    swift_retain();
                    swift_retain();
                    uint64_t v232 = sub_2505BD7D0();
                    if (!v232) {
                      goto LABEL_271;
                    }
                    uint64_t v79 = v232;
                    uint64_t v233 = sub_2505BD800();
                    BOOL v113 = __OFSUB__(v286, v233);
                    v286 -= v233;
                    if (v113) {
                      goto LABEL_233;
                    }
                    sub_2505BD7F0();
                    uint64_t v234 = (const void *)(v79 + v286);
                    size_t v235 = BYTE6(v105);
LABEL_164:
                    int v239 = timingsafe_bcmp(__b1, v234, v235);
                    swift_release();
                    swift_release();
                    goto LABEL_165;
                  case 3:
                    size_t v144 = BYTE6(v105);
                    memset(__b2, 0, 14);
                    goto LABEL_168;
                  default:
                    __b2[0] = v106;
                    LOWORD(__b2[1]) = v107;
                    BYTE2(__b2[1]) = BYTE2(v107);
                    BYTE3(__b2[1]) = BYTE3(v107);
                    BYTE4(__b2[1]) = BYTE4(v107);
                    size_t v144 = BYTE6(v105);
                    BYTE5(__b2[1]) = BYTE5(v107);
LABEL_168:
                    int v239 = timingsafe_bcmp(__b1, __b2, v144);
                    sub_250511528(v108, v109);
                    sub_250511528(v103, v105);
                    uint64_t v69 = v81;
                    goto LABEL_169;
                }
            }
          }
          if (v88 != 1)
          {
            sub_2504DAF60(v84, &qword_269AB5A28);
            goto LABEL_21;
          }
          BOOL v89 = 1;
          uint64_t v69 = v81;
LABEL_15:
          sub_2505659B0(v69, type metadata accessor for UserKeyingInfo);
          sub_2505659B0((uint64_t)v54, type metadata accessor for UserKeyingInfo);
          return v89;
      }
    case 2uLL:
      uint64_t v112 = *(void *)(v94 + 16);
      uint64_t v111 = *(void *)(v94 + 24);
      BOOL v113 = __OFSUB__(v111, v112);
      uint64_t v100 = v111 - v112;
      if (!v113) {
        goto LABEL_27;
      }
      goto LABEL_201;
    case 3uLL:
      goto LABEL_27;
    default:
      uint64_t v100 = BYTE6(v96);
      goto LABEL_27;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UserKeyingInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_2504DBC4C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2505BDF30();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_2505BE040();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = sub_2505BE0B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    v17((char *)a1 + a3[8], (char *)a2 + a3[8], v16);
    uint64_t v22 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = sub_2505BDF90();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v30 = a3[11];
    uint64_t v31 = (char *)a1 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = sub_2505BE000();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t destroy for UserKeyingInfo(uint64_t a1, int *a2)
{
  sub_250511528(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_2505BDF30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = sub_2505BE040();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = sub_2505BE0B0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  v8(a1 + a2[8], v7);
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + a2[10];
  uint64_t v12 = sub_2505BDF90();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v14 = a1 + a2[11];
  uint64_t v15 = sub_2505BE000();
  uint64_t v18 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v14, 1, v15);
  if (!result)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    return v17(v14, v15);
  }
  return result;
}

uint64_t *initializeWithCopy for UserKeyingInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2505BDF30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2505BE040();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = sub_2505BE0B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  v16((char *)a1 + a3[8], (char *)a2 + a3[8], v15);
  uint64_t v21 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = sub_2505BDF90();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  swift_bridgeObjectRetain();
  if (v26(v23, 1, v24))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  uint64_t v28 = a3[11];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = sub_2505BE000();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t *assignWithCopy for UserKeyingInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_2504DBC4C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_250511528(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2505BDF30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_2505BE040();
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24);
  v18(v15, v16, v17);
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_2505BE0B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  v18((char *)a1 + a3[8], (char *)a2 + a3[8], v17);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = sub_2505BDF90();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v18) = v28(v24, 1, v26);
  int v29 = v28(v25, 1, v26);
  if (v18)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
    memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_7:
  uint64_t v31 = a3[11];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = sub_2505BE000();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v32, v33, v34);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

char *initializeWithTake for UserKeyingInfo(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_2505BDF30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = sub_2505BE040();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_2505BE0B0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  v14(&a1[a3[8]], &a2[a3[8]], v13);
  uint64_t v19 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = sub_2505BDF90();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A78);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v25 = a3[11];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = sub_2505BE000();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_269AB5A28);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}